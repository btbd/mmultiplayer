#include "../stdafx.h"

struct {
	unsigned long bExludeHandMoves; unsigned long bExludeFootMoves; unsigned long bPhysXMutatable; unsigned long bStatic; unsigned long bHidden; unsigned long bNoDelete; unsigned long bDeleteMe; unsigned long bTicked; unsigned long bOnlyOwnerSee; unsigned long bStasis; unsigned long bWorldGeometry; unsigned long bIgnoreRigidBodyPawns; unsigned long bOrientOnSlope; unsigned long bIgnoreEncroachers; unsigned long bPushedByEncroachers; unsigned long bDestroyedByInterpActor; unsigned long bRouteBeginPlayEvenIfStatic; unsigned long bIsMoving; unsigned long bAlwaysEncroachCheck; unsigned long bHasAlternateTargetLocation; unsigned long bNetTemporary; unsigned long bOnlyRelevantToOwner; unsigned long bNetDirty; unsigned long bAlwaysRelevant; unsigned long bReplicateInstigator; unsigned long bReplicateMovement; unsigned long bSkipActorPropertyReplication; unsigned long bUpdateSimulatedPosition; unsigned long bTearOff; unsigned long bOnlyDirtyReplication; unsigned long bDemoRecording; unsigned long bDemoOwner; unsigned long bForceDemoRelevant; unsigned long bNetInitialRotation; unsigned long bReplicateRigidBodyLocation; unsigned long bKillDuringLevelTransition; unsigned long bExchangedRoles; unsigned long bConsiderAllStaticMeshComponentsForStreaming; unsigned long bIgnoreForAITraces; unsigned long bInteractable; unsigned long bLOIObject; unsigned long bDebug; unsigned long bPostRenderIfNotVisible; unsigned long bForceNetUpdate; unsigned long bPendingNetUpdate; unsigned long bHardAttach; unsigned long bIgnoreBaseRotation; unsigned long bShadowParented; unsigned long bCanBeAdheredTo; unsigned long bCanBeFrictionedTo; unsigned long bHurtEntry; unsigned long bGameRelevant; unsigned long bMovable; unsigned long bDestroyInPainVolume; unsigned long bCanBeDamaged; unsigned long bShouldBaseAtStartup; unsigned long bPendingDelete; unsigned long bCanTeleport; unsigned long bAlwaysTick; unsigned long bBlocksNavigation; unsigned long BlockRigidBody; unsigned long bCollideWhenPlacing; unsigned long bCollideActors; unsigned long bCollideWorld; unsigned long bCollideComplex; unsigned long bBlockActors; unsigned long bProjTarget; unsigned long bBlocksTeleport; unsigned long bNoEncroachCheck; unsigned long bPhysRigidBodyOutOfWorldCheck; unsigned long bComponentOutsideWorld; unsigned long bBounce; unsigned long bJustTeleported; unsigned long bNetInitial; unsigned long bNetOwner; unsigned long bHiddenEd; unsigned long bHiddenEdGroup; unsigned long bHiddenEdCustom; unsigned long bEdShouldSnap; unsigned long bTempEditor; unsigned long bPathColliding; unsigned long bPathTemp; unsigned long bScriptInitialized; unsigned long bLockLocation; float CustomTimeDilation; Classes::TEnumAsByte<Classes::EPhysics> Physics; Classes::TEnumAsByte<Classes::ENetRole> RemoteRole; Classes::TEnumAsByte<Classes::ENetRole> Role; Classes::TEnumAsByte<Classes::ECollisionType> CollisionType; Classes::TEnumAsByte<Classes::ETickingGroup> TickGroup; int NetTag; float NetUpdateTime; float NetUpdateFrequency; float NetPriority; float LastNetUpdateTime; float LifeSpan; float CreationTime; float LastRenderTime; float LatentFloat; Classes::FVector Location; Classes::FRotator Rotation; Classes::FVector Velocity; Classes::FVector Acceleration; Classes::FVector AngularVelocity; Classes::FVector RelativeLocation; Classes::FRotator RelativeRotation; float DrawScale; Classes::FVector DrawScale3D; Classes::FVector PrePivot; int OverlapTag; Classes::FRotator RotationRate; Classes::FRotator DesiredRotation; float MinDistForNetRBCorrection; float MaxStepHeight; float MaxJumpHeight; float WalkableFloorZ; float NetRelevancyTime; unsigned long bUpAndOut; unsigned long bIsWalking; unsigned long bWantsToCrouch; unsigned long bIsCrouched; unsigned long bTryToUncrouch; unsigned long bCanCrouch; unsigned long bCrawler; unsigned long bReducedSpeed; unsigned long bJumpCapable; unsigned long bCanJump; unsigned long bCanWalk; unsigned long bCanSwim; unsigned long bCanFly; unsigned long bCanClimbLadders; unsigned long bCanStrafe; unsigned long bAvoidLedges; unsigned long bStopAtLedges; unsigned long bSimulateGravity; unsigned long bIgnoreForces; unsigned long bCanWalkOffLedges; unsigned long bCanBeBaseForPawns; unsigned long bSimGravityDisabled; unsigned long bDirectHitWall; unsigned long bPushesRigidBodies; unsigned long bForceFloorCheck; unsigned long bForceKeepAnchor; unsigned long bCanMantle; unsigned long bCanClimbCeilings; unsigned long bCanSwatTurn; unsigned long bCanLeap; unsigned long bCanCoverSlip; unsigned long bDisplayPathErrors; unsigned long bIsFemale; unsigned long bCanPickupInventory; unsigned long bAmbientCreature; unsigned long bLOSHearing; unsigned long bMuffledHearing; unsigned long bDontPossess; unsigned long bAutoFire; unsigned long bRollToDesired; unsigned long bStationary; unsigned long bCachedRelevant; unsigned long bSpecialHUD; unsigned long bNoWeaponFiring; unsigned long bCanUse; unsigned long bModifyReachSpecCost; unsigned long bPathfindsAsVehicle; unsigned long bRunPhysicsWithNoController; unsigned long bForceMaxAccel; unsigned long bForceRMVelocity; unsigned long bForceRegularVelocity; unsigned long bPlayedDeath; float UncrouchTime; float CrouchHeight; float CrouchRadius; int FullHeight; float NonPreferredVehiclePathMultiplier; Classes::TEnumAsByte<Classes::EPathSearchType> PathSearchType; unsigned char RemoteViewPitch; unsigned char FlashCount; unsigned char FiringMode; float DesiredSpeed; float MaxDesiredSpeed; float HearingThreshold; float Alertness; float SightRadius; float PeripheralVision; float AvgPhysicsTime; float Mass; float Buoyancy; float MeleeRange; float FindAnchorFailedTime; float LastValidAnchorTime; float DestinationOffset; float NextPathRadius; Classes::FVector SerpentineDir; float SerpentineDist; float SerpentineTime; float SpawnTime; int MaxPitchLimit; float GroundSpeed; float WaterSpeed; float AirSpeed; float LadderSpeed; float AccelRate; float JumpZ; float OutofWaterZ; float MaxOutOfWaterStepHeight; float AirControl; float WalkingPct; float CrouchedPct; float MaxFallSpeed; float AIMaxFallSpeedFactor; float BaseEyeHeight; float EyeHeight; Classes::FVector Floor; float SplashTime; float OldZ; int Health; int HealthMax; float BreathTime; float UnderWaterTime; float LastPainTime; Classes::FVector RMVelocity; Classes::FVector noise1spot; float noise1time; float noise1loudness; Classes::FVector noise2spot; float noise2time; float noise2loudness; float SoundDampening; float DamageScaling; float LastStartTime; Classes::FVector TakeHitLocation; Classes::FVector TearOffMomentum; float RBPushRadius; float RBPushStrength; float AlwaysRelevantDistanceSquared; float VehicleCheckRadius; float ViewPitchMin; float ViewPitchMax; int AllowedYawError; Classes::FVector FlashLocation; Classes::FVector LastFiringFlashLocation; int ShotCount; int FailedLandingCount; unsigned long bDisableSkelControlSpring; unsigned long bCanUnCrouch; unsigned long bConstrainLook; unsigned long bGoingForward; unsigned long bClimbLeftHand; unsigned long bClimbDownFast; unsigned long bEnableFootPlacement; unsigned long bMoveActionMax; unsigned long bFoundLedgeExcludesHandMoves; unsigned long bFoundLedgeExcludesFootMoves; unsigned long bIsWallWalking; unsigned long bFoundLedge; unsigned long bAllowMoveChange; unsigned long bSRPauseTimer; unsigned long bForceMaxAccelOneFrame; unsigned long RollTriggerPressed; unsigned long bUncontrolledSlide; unsigned long bIsPlayingSlideEffect; unsigned long bAlternateSound; unsigned long bCharacterInhaling; unsigned long bDisableCharacterSounds; unsigned long bTakeFallDamage; unsigned long bIsUsingRootMotion; unsigned long bIsUsingRootRotation; unsigned long bDebugDamage; unsigned long bDebugNetAnim; unsigned long bNoMoveAnims; unsigned long bDebugAcceleration; unsigned long bDebugJumping; unsigned long bDebugMovement; unsigned long bDebugPlotPath; unsigned long bDebugFootsteps; unsigned long bDebugSlapBack; unsigned long bDebugCharacterSounds; unsigned long bDebugBreathingSounds; unsigned long bDebugWeapons; unsigned long bDebugMaterials; float VelocityMagnitude2D; float VelocityMagnitude; Classes::FVector VelocityDir2D; Classes::FVector VelocityDir; float FaceRotationTimeLeft; float BecameReadyTime; float AmountTilUnarmed; float GravityModifier; float GravityModifierTimer; Classes::TEnumAsByte<Classes::EAgainstWallState> AgainstWallState; Classes::TEnumAsByte<Classes::EWeaponAnimState> WeaponAnimState; unsigned char AnimLockRefCount; unsigned char RootMotionRefCount; Classes::TEnumAsByte<Classes::EGrabTurnType> CurrentGrabTurnType; unsigned char LadderType; Classes::TEnumAsByte<Classes::EMovement> AnimationMovementState; Classes::TEnumAsByte<Classes::EMovement> PendingAnimationMovementState; Classes::TEnumAsByte<Classes::EMovement> OldMovementState; Classes::TEnumAsByte<Classes::EMovement> PendingMovementState; Classes::TEnumAsByte<Classes::EMovement> MovementState; Classes::TEnumAsByte<Classes::EMovement> ReplicatedMovementState; Classes::TEnumAsByte<Classes::EMovement> AIAimOldMovementState; Classes::TEnumAsByte<Classes::EWalkingState> OverrideWalkingState; Classes::TEnumAsByte<Classes::EWalkingState> PendingOverrideWalkingState; Classes::TEnumAsByte<Classes::EWalkingState> CurrentWalkingState; unsigned char ReplicateCustomAnimCount; Classes::TEnumAsByte<Classes::EMoveActionHint> MoveActionHint; unsigned char ReloadCount; unsigned char NoOfBreathingSounds; Classes::FVector AgainstWallLeftHand; Classes::FVector AgainstWallRightHand; Classes::FVector AgainstWallNormal; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float LegRotationSlowTimer; int LegRotation; float LegRotationSpeed; int GoBackLegAngleLimitMin; int GoBackLegAngleLimitMax; int LegAngleLimitFudge; float SneakVelocity; float WalkVelocity; float JogVelocity; float RunVelocity; float SprintVelocity; float AverageSpeed; float ASFilterTime; float ASPollInterval; float ASPollTimer; int ASPollSlots; int ASSlotPointer; float ASDistanceAccum; float NewFloorSmooth; float SmoothOffset; Classes::FRotator FootPlacementStoredRotation; float TargetMeshTranslationZ; float SlideStoppedTimeStamp; Classes::FVector MoveLocation; Classes::FVector MoveNormal; float MaxWallStepHeight; Classes::FVector MoveLedgeLocation; Classes::FVector MoveLedgeNormal; int MoveLedgeResult; Classes::FVector LedgeFindExtent; float LedgeFindDistance; float LedgeFindDepth; Classes::FVector IllegalLedgeNormal; float bIllegalLedgeTimer; int ActiveMoveTimer; int RemoteViewYaw; float EvadeTimer; float SpeedMaxBaseVelocity; float SpeedMinBaseVelocity; float SpeedStrafeVelocityAccelerationFactor; float SpeedWalkVelocityAccelerationFactor; float SpeedSprintVelocityAccelerationFactor; float SpeedEnergyDecelerationTime; float SpeedEnergyDecelerationExponent; float SpeedTurnDecelerationFactor; float SpeedSprintEnergy; float UpwardWalkFrictionScale; float DownwardWalkFrictionScale; float MinWalkFrictionModify; float MaxWalkFrictionModify; float UpwardSlideFrictionScale; float DownwardSlideFrictionScale; float BrakingFrictionStrength; float SoftLockStrength; float RollTriggerTime; Classes::FVector UncontrolledSlideNormal; float FallingUncontrolledHeight; float EnterFallingHeight; float SlideEffectUpdateTimer; float CustomSoundInput; float OverrideSynchPosOffset; float StreakEffectOverride; float StreakEffectDirection; int PatchOne; int PatchTwo; int PatchThree; float PhysicsHitReactionBlendTimer; float PhysicsHitReactionBlendOut; float PhysicsHitReactionBlendInTime; float PhysicsHitReactionBlendOutTime; float PhysicsHitReactionScale; int LastDamageTaken; float ArmorBulletsHead; float ArmorBulletsBody; float ArmorBulletsLegs; float ArmorMeleeHead; float ArmorMeleeBody; float ArmorMeleeLegs; float FootstepTraceLength; float FootstepTraceWidth; float LastFlybyStamp; int MaxHealth; float RegenerateDelay; float RegenerateHealthPerSecond; float UnrealEngineFallDamageScale; float TimeSinceLastDamage; float HealthFrac; float TaserDamageLevel; float RegenerateFromTaserPerSecond; float TaserRegenerateDelay; float TimeSinceLastTaserDamage; float StunDamageLevel; float RegenerateFromStunPerSecond; float MinTimeBeforeRemovingDeadBody; float MaxTimeBeforeRemovingDeadBody; int MyPassengerSeatIndex; float SlideFactor; float LastDamage; float LastDamageTime; float NextDebugPlotTime; Classes::FVector LastPlotLocation; Classes::FVector LastJumpLocation; unsigned long bHasMorphNodes; unsigned long bStuckOnGround; unsigned long bPlayerDiedHoldingTheBag; unsigned long bIsInShadowAlteringMoveState; unsigned long bEnableHairPhysics; unsigned long bLockBase; unsigned long bCutsceneIsSkippable; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; float VertigoEdgeProbingHeight; float VertigoEdgeProbingDistance; float VertigoEffectThreshold; float EdgeCheckMaxSpeed; float EdgeCheckDistance; float EdgeStopMinHeight; float LastEnemyHitTimeOut; float ReverbVolumeTimer; float ReverbVolumePollTime; float OcclusionDuckLevel; float OcclusionDuckFadeTime; int IndoorSoundGroupIndex; int IndoorMixGroupIndex; int OutdoorMixGroupIndex; float MovementStringAllowedGap; float MovementStringGapTimer; float PlayerBulletDamageMultiplier; Classes::FVector FocusLocation; Classes::FVector PlayerCameraLocation; Classes::FRotator PlayerCameraRotation; int DebugPlayerGraph; float LastDebugGraphValue; int SimulatedBadFPS; float FocusLocationInterpolationSpeed; float LastResetTimeStamp;
} pawnSave;

struct {
	unsigned long bExludeHandMoves; unsigned long bExludeFootMoves; unsigned long bPhysXMutatable; unsigned long bStatic; unsigned long bHidden; unsigned long bNoDelete; unsigned long bDeleteMe; unsigned long bTicked; unsigned long bOnlyOwnerSee; unsigned long bStasis; unsigned long bWorldGeometry; unsigned long bIgnoreRigidBodyPawns; unsigned long bOrientOnSlope; unsigned long bIgnoreEncroachers; unsigned long bPushedByEncroachers; unsigned long bDestroyedByInterpActor; unsigned long bRouteBeginPlayEvenIfStatic; unsigned long bIsMoving; unsigned long bAlwaysEncroachCheck; unsigned long bHasAlternateTargetLocation; unsigned long bNetTemporary; unsigned long bOnlyRelevantToOwner; unsigned long bNetDirty; unsigned long bAlwaysRelevant; unsigned long bReplicateInstigator; unsigned long bReplicateMovement; unsigned long bSkipActorPropertyReplication; unsigned long bUpdateSimulatedPosition; unsigned long bTearOff; unsigned long bOnlyDirtyReplication; unsigned long bDemoRecording; unsigned long bDemoOwner; unsigned long bForceDemoRelevant; unsigned long bNetInitialRotation; unsigned long bReplicateRigidBodyLocation; unsigned long bKillDuringLevelTransition; unsigned long bExchangedRoles; unsigned long bConsiderAllStaticMeshComponentsForStreaming; unsigned long bIgnoreForAITraces; unsigned long bInteractable; unsigned long bLOIObject; unsigned long bDebug; unsigned long bPostRenderIfNotVisible; unsigned long bForceNetUpdate; unsigned long bPendingNetUpdate; unsigned long bHardAttach; unsigned long bIgnoreBaseRotation; unsigned long bShadowParented; unsigned long bCanBeAdheredTo; unsigned long bCanBeFrictionedTo; unsigned long bHurtEntry; unsigned long bGameRelevant; unsigned long bMovable; unsigned long bDestroyInPainVolume; unsigned long bCanBeDamaged; unsigned long bShouldBaseAtStartup; unsigned long bPendingDelete; unsigned long bCanTeleport; unsigned long bAlwaysTick; unsigned long bBlocksNavigation; unsigned long BlockRigidBody; unsigned long bCollideWhenPlacing; unsigned long bCollideActors; unsigned long bCollideWorld; unsigned long bCollideComplex; unsigned long bBlockActors; unsigned long bProjTarget; unsigned long bBlocksTeleport; unsigned long bNoEncroachCheck; unsigned long bPhysRigidBodyOutOfWorldCheck; unsigned long bComponentOutsideWorld; unsigned long bBounce; unsigned long bJustTeleported; unsigned long bNetInitial; unsigned long bNetOwner; unsigned long bHiddenEd; unsigned long bHiddenEdGroup; unsigned long bHiddenEdCustom; unsigned long bEdShouldSnap; unsigned long bTempEditor; unsigned long bPathColliding; unsigned long bPathTemp; unsigned long bScriptInitialized; unsigned long bLockLocation; float CustomTimeDilation; Classes::TEnumAsByte<Classes::EPhysics> Physics; Classes::TEnumAsByte<Classes::ENetRole> RemoteRole; Classes::TEnumAsByte<Classes::ENetRole> Role; Classes::TEnumAsByte<Classes::ECollisionType> CollisionType; Classes::TEnumAsByte<Classes::ETickingGroup> TickGroup; int NetTag; float NetUpdateTime; float NetUpdateFrequency; float NetPriority; float LastNetUpdateTime; float LifeSpan; float CreationTime; float LastRenderTime; float LatentFloat; Classes::FVector Location; Classes::FRotator Rotation; Classes::FVector Velocity; Classes::FVector Acceleration; Classes::FVector AngularVelocity; Classes::FVector RelativeLocation; Classes::FRotator RelativeRotation; float DrawScale; Classes::FVector DrawScale3D; Classes::FVector PrePivot; int OverlapTag; Classes::FRotator RotationRate; Classes::FRotator DesiredRotation; float MinDistForNetRBCorrection; int PlayerNum; unsigned long bIsPlayer; unsigned long bGodMode; unsigned long bAffectedByHitEffects; unsigned long bSoaking; unsigned long bSlowerZAcquire; unsigned long bForceStrafe; unsigned long bNotifyPostLanded; unsigned long bNotifyApex; unsigned long bAdvancedTactics; unsigned long bCanDoSpecial; unsigned long bAdjusting; unsigned long bPreparingMove; unsigned long bIgnoreMovementFocus; unsigned long bLOSflag; unsigned long bUsePlayerHearing; unsigned long bNotifyFallingHitWall; unsigned long bForceDesiredRotation; unsigned long bPreciseDestination; unsigned long bSeeFriendly; unsigned long bUsingPathLanes; unsigned char bFire; float MinHitWall; float MoveTimer; Classes::FVector Destination; Classes::FVector FocalPoint; Classes::FVector AdjustLoc; Classes::FVector CurrentPathDir; float RouteDist; float LastRouteFind; float GroundPitchTime; Classes::FVector ViewX; Classes::FVector ViewY; Classes::FVector ViewZ; float FailedReachTime; Classes::FVector FailedReachLocation; float SightCounter; float RespawnPredictionTime; float InUseNodeCostMultiplier; int HighJumpNodeCostModifier; float LaneOffset; Classes::FRotator OldBasedRotation; int currentLaneSlot; int pathMatesCount; unsigned long bFrozen; unsigned long bPressedJump; unsigned long bDoubleJump; unsigned long bUpdatePosition; unsigned long bUpdating; unsigned long bNeverSwitchOnPickup; unsigned long bCheatFlying; unsigned long bCameraPositionLocked; unsigned long bShortConnectTimeOut; unsigned long bPendingDestroy; unsigned long bWasSpeedHack; unsigned long bWasSaturated; unsigned long bDynamicNetSpeed; unsigned long bAimingHelp; unsigned long bCinematicMode; unsigned long bCinemaDisableInputMove; unsigned long bCinemaDisableInputLook; unsigned long bReplicateAllPawns; unsigned long bIsUsingStreamingVolumes; unsigned long bIsExternalUIOpen; unsigned long bIsControllerConnected; unsigned long bCheckSoundOcclusion; unsigned long bLogHearSoundOverflow; unsigned long bCheckRelevancyThroughPortals; unsigned long bReceivedUniqueId; unsigned long bCanSeeLOI; float MaxResponseTime; float WaitDelay; Classes::TEnumAsByte<Classes::EDoubleClickDir> DoubleClickDir; unsigned char bIgnoreMoveInput; unsigned char bIgnoreLookInput; unsigned char bRun; unsigned char bDuck; unsigned char NetPlayerIndex; float FOVAngle; float DesiredFOV; float DefaultFOV; float LODDistanceFactor; Classes::FRotator TargetViewRotation; float TargetEyeHeight; Classes::FRotator BlendedTargetViewRotation; Classes::FVector LastAckedAccel; float CurrentTimeStamp; float LastUpdateTime; float ServerTimeStamp; float TimeMargin; float ClientUpdateTime; float MaxTimeMargin; float LastActiveTime; int ClientCap; float DynamicPingThreshold; float LastPingUpdate; float OldPing; float LastSpeedHackLog; float ProgressTimeOut; int GroundPitch; Classes::FVector OldFloor; Classes::FVector FailedPathStart; float InteractDistance; float LastBroadcastTime; float SpectatorCameraSpeed; float MinRespawnDelay; int MaxConcurrentHearSounds; unsigned long InfiniteAmmo; unsigned long bDebugPostProcessFreeFlight; unsigned long bReleasedJump; unsigned long bLeftThumbStickPassedDeadZone; unsigned long bRightThumbStickPassedDeadZone; unsigned long bDebugCloseCombat; unsigned long bDisableSkipCutscenes; unsigned long bReactionTime; unsigned long bOverrideReactionTimeSettings; unsigned long bJesusMode; unsigned long bStefanMode; unsigned long bIsWalking; unsigned long bIsStopping; unsigned long FailedToSpawn; unsigned long bDisableLoadFromLastCheckpoint; unsigned long bDebugSoundMixGroups; unsigned long bDebugSoundVelocity; unsigned long bDebugSoundReverbVolumes; unsigned long ControllerTilt; unsigned long VisualizeControllerTilt; unsigned long bRopeburnDisarmSucceeded; float TimePressedJump; float JumpTapTime; float BagSearchTapTime; float LastEmoteMessageTime; float AllowedEmoteMessageInterval; float TargetingPawnInterp; float TargetingCutoffAngle; Classes::FVector TargetActorLocation; float LookAtTimeDelay; Classes::TEnumAsByte<Classes::EMovementAction> MeleeLastAction; unsigned char bIgnoreButtonInput; Classes::TEnumAsByte<Classes::ESoundMode> CurrentSoundMode; Classes::TEnumAsByte<Classes::EWalkingState> CachedWalkingState; float CloseCombatMinRange; float CloseCombatMaxRange; float CloseCombatRangeTime; float CloseCombatMaxAngle; float CloseCombatPawnDistanceBias; float InputSize; float InputMaxSprintRaduisLimit; float InputMaxSprintHeightLimit; float InputMaxWalkRadiusLimit; float WallRunningAlignTime; int WallRunningAlignYaw; int LOIIndex; float ReactionTimeEnergy; float ReactionTimeSpawnLevel; float ReactionTimeDrain; float ReactionTimeMaxEffect; float ReactionTimeFadeIn; float ReactionTimeFadeOut; float ReactionTimeEnergyBuildRate; float WallClimbingDodgeJumpThreshold; float WallRunningDodgeJumpThreshold; float WalkCyclePart1; float WalkCyclePart2; float AccelerationTime; float StopAnimBlendIn; float StopAnimBlendOut; float StoppingVelocity; int NextLocalEnemyToCheckLOS; float LastEnemyNetSendTime; Classes::FRotator VehicleRotation; Classes::FRotator DriverRotation; int Team; float StickySpeed; float FOVZoomRate; float FOVZoomDelay; float MouseX; float MouseY; float ActualAccelX; float ActualAccelY; float ActualAccelZ; float SixAxisDisarmZ; float SixAxisDisarmY; float SixAxisRollZ; float SixAxisRollY; float DisarmTimeMultiplier; float LastZAxisTilt; float LastYAxisTilt;
} controllerSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; unsigned long bIsPlayingIdleAnim; float TriggerIdleAnimMinTime; float TriggerIdleAnimMaxTime;
} walkingSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; float StickyAimAfterAirTime; float AirTime; unsigned long bCloseToGround; Classes::TEnumAsByte<Classes::EMovement> PreviousMove;
} fallingSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; float WallRunningForwardCheckDistance; float WallRunningStrafeCheckDistance; float WallRunningVerticalCheckDistance; float WallRunningMinWallHeight; float WallRunningMinSpeed; float WallRunningVelocityStartLimit; float WallRunningVelocityStopLimit; float WallRunningForwardMinStartAngle; float WallRunningForwardMaxStartAngle; float WallRunningStrafeStartAngle; float WallRunningHorisontalFriction; float WallRunningHorisontalInitialZHeight; float WallRunningHorisontalAcceleration; float WallRunningHorisontalDeceleration; float WallRunningHorisontalAlignSpeed; float WallRunningIntoWallrunBlendInTime; float WallRunningIntoWallrunBlendOutTime; unsigned long PlayCameraHitWallEffect; unsigned long bHasReachedWall; unsigned long bStartMovingIntoWall; unsigned long bTurned90FromWall; unsigned long bChangedConstraints; float WallRunningDelayPawnRotationTime; float WallRunningDistanceForIntoWall; float WallRunningRotatePawnAlongWallTime; float WallRunningMoveToIntoPositionDegreeThreshold; float MinimumVelocityIntoWall; float MaximumVelocityIntoWall; float WallrunStartUpperBodyAnimPlayRate; float LookAlongWallInterpolationTime; float WallRunningBeginSpeed; Classes::TEnumAsByte<Classes::EMovement> NextMove; Classes::FVector WallNormal; Classes::FVector PredictedWallHitLocation; Classes::FVector IntoWallrunLocationTarget; int ConsequtiveWallruns; int MinContraintWorld; int MaxContraintWorld;
} wallRunRightSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; float WallRunningForwardCheckDistance; float WallRunningStrafeCheckDistance; float WallRunningVerticalCheckDistance; float WallRunningMinWallHeight; float WallRunningMinSpeed; float WallRunningVelocityStartLimit; float WallRunningVelocityStopLimit; float WallRunningForwardMinStartAngle; float WallRunningForwardMaxStartAngle; float WallRunningStrafeStartAngle; float WallRunningHorisontalFriction; float WallRunningHorisontalInitialZHeight; float WallRunningHorisontalAcceleration; float WallRunningHorisontalDeceleration; float WallRunningHorisontalAlignSpeed; float WallRunningIntoWallrunBlendInTime; float WallRunningIntoWallrunBlendOutTime; unsigned long PlayCameraHitWallEffect; unsigned long bHasReachedWall; unsigned long bStartMovingIntoWall; unsigned long bTurned90FromWall; unsigned long bChangedConstraints; float WallRunningDelayPawnRotationTime; float WallRunningDistanceForIntoWall; float WallRunningRotatePawnAlongWallTime; float WallRunningMoveToIntoPositionDegreeThreshold; float MinimumVelocityIntoWall; float MaximumVelocityIntoWall; float WallrunStartUpperBodyAnimPlayRate; float LookAlongWallInterpolationTime; float WallRunningBeginSpeed; Classes::TEnumAsByte<Classes::EMovement> NextMove; Classes::FVector WallNormal; Classes::FVector PredictedWallHitLocation; Classes::FVector IntoWallrunLocationTarget; int ConsequtiveWallruns; int MinContraintWorld; int MaxContraintWorld;
} wallRunLeftSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; float WallRunningForwardCheckDistance; float WallRunningStrafeCheckDistance; float WallRunningVerticalCheckDistance; float WallRunningMinWallHeight; float WallRunningMinSpeed; float WallRunningVelocityStartLimit; float WallRunningVelocityStopLimit; float WallRunningForwardMinStartAngle; float WallRunningForwardMaxStartAngle; float WallRunningStrafeStartAngle; float WallRunningHorisontalFriction; float WallRunningHorisontalInitialZHeight; float WallRunningHorisontalAcceleration; float WallRunningHorisontalDeceleration; float WallRunningHorisontalAlignSpeed; float WallRunningIntoWallrunBlendInTime; float WallRunningIntoWallrunBlendOutTime; unsigned long PlayCameraHitWallEffect; unsigned long bHasReachedWall; unsigned long bStartMovingIntoWall; unsigned long bTurned90FromWall; unsigned long bChangedConstraints; float WallRunningDelayPawnRotationTime; float WallRunningDistanceForIntoWall; float WallRunningRotatePawnAlongWallTime; float WallRunningMoveToIntoPositionDegreeThreshold; float MinimumVelocityIntoWall; float MaximumVelocityIntoWall; float WallrunStartUpperBodyAnimPlayRate; float LookAlongWallInterpolationTime; float WallRunningBeginSpeed; Classes::TEnumAsByte<Classes::EMovement> NextMove; Classes::FVector WallNormal; Classes::FVector PredictedWallHitLocation; Classes::FVector IntoWallrunLocationTarget; int ConsequtiveWallruns; int MinContraintWorld; int MaxContraintWorld;
} wallRunSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold; float BaseJumpZ; float BaseJumpZHeavy; float JumpAddXY; float LongJumpSlowThreshold; float LongJumpNormalThreshold; float LongJumpFastThreshold; float JumpBlendInTime; float JumpBlendOutTime; float JumpStillBlendOutTime; float PreJumpMomentum; Classes::FVector WantedJumpVelocity; float CanDoMoveTaserLimit;
} jumpSave;

struct {
	float SpeedModifier; float FrictionModifier; unsigned long bDebugMove; unsigned long bTriggersCompliment; unsigned long bDisableCollision; unsigned long bShouldHolsterWeapon; unsigned long bShouldUnzoom; unsigned long bIsTimedMove; unsigned long bConstrainLook; unsigned long bUseAbsoluteYawConstraint; unsigned long bDisableActorCollision; unsigned long bLookAtTargetLocation; unsigned long bLookAtTargetAngle; unsigned long bDisableFaceRotation; unsigned long bDisableControllerFacingPawnYawRotation; unsigned long bAvoidLedges; unsigned long bUsePreciseLocation; unsigned long bReachedPreciseLocation; unsigned long bDebugPreciseLocation; unsigned long bUsePreciseRotation; unsigned long bReachedPreciseRotation; unsigned long bDelayRotationAndLocationCallback; unsigned long bResetCameraLook; unsigned long bUseCustomCollision; unsigned long bUseCameraCollision; unsigned long bTwoHandedFullBodyAnimations; unsigned long bStickyAim; unsigned long bStopAfterMove; unsigned long bEnableFootPlacement; unsigned long bEnableAgainstWall; unsigned long bAllowPickup; float AiAimPenalty; float AiAimOneShotPenalty; Classes::TEnumAsByte<Classes::EMovementGroup> MovementGroup; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonDPG; Classes::TEnumAsByte<Classes::ESceneDepthPriorityGroup> FirstPersonLowerBodyDPG; Classes::TEnumAsByte<Classes::EPreciseLocationMode> PreciseLocationInterpMode; Classes::TEnumAsByte<Classes::EMoveAimMode> AimMode; float DisableMovementTime; float DisableLookTime; float LastCanDoMoveTime; float LastStopMoveTime; float MoveActiveTime; float RedoMoveTime; float PreciseLocationSpeed; Classes::FVector PreciseLocation; float PreciseRotationInterpolationTime; Classes::FRotator PreciseRotation; Classes::FVector LookAtTargetLocation; Classes::FRotator LookAtTargetAngle; float LookAtTargetInterpolationTime; float LookAtTargetDuration; float CancelResetCameraLookTime; float ResetCameraLookTime; Classes::FRotator MinLookConstraint; Classes::FRotator MaxLookConstraint; float CustomCollisionRadius; float CustomCollisionHeight; int WeaponInactivePitchAimingLimit; Classes::FVector RootMotionScale; Classes::FVector RootOffset; int SwanNeckEnableAtPitch; float SwanNeckForward; float SwanNeckDown; float AnimBlendTime; int StickyAngle; float StickyAimedModifier; float Timer; Classes::TEnumAsByte<Classes::EPhysics> PawnPhysics; float HandPlantExtentCheckHeight; float HandPlantExtentCheckWidth; float HandPlantCheckDistance; float HandPlantCheckHeight; float ContextMoveDistanceMultiplier; unsigned long bCheckForGrab; unsigned long bCheckForVaultOver; unsigned long bCheckForWallClimb; unsigned long bCheckForEdgeInVelDir; unsigned long bCheckExitToFalling; unsigned long bCheckExitToUncontrolledFalling; unsigned long bCheckForSoftLanding; float bDelayTimeCheckAutoMoves; float ExitToFallingZSpeed; float SoftLandingZSpeedThreshold; float TimeToSoftLandingThreshold;
} fallingUncontrolledSave;

static void Save(Classes::ATdPlayerPawn *pawn, Classes::ATdPlayerController *controller) {
	pawnSave.bExludeHandMoves = pawn->bExludeHandMoves; pawnSave.bExludeFootMoves = pawn->bExludeFootMoves; pawnSave.bPhysXMutatable = pawn->bPhysXMutatable; pawnSave.bStatic = pawn->bStatic; pawnSave.bHidden = pawn->bHidden; pawnSave.bNoDelete = pawn->bNoDelete; pawnSave.bDeleteMe = pawn->bDeleteMe; pawnSave.bTicked = pawn->bTicked; pawnSave.bOnlyOwnerSee = pawn->bOnlyOwnerSee; pawnSave.bStasis = pawn->bStasis; pawnSave.bWorldGeometry = pawn->bWorldGeometry; pawnSave.bIgnoreRigidBodyPawns = pawn->bIgnoreRigidBodyPawns; pawnSave.bOrientOnSlope = pawn->bOrientOnSlope; pawnSave.bIgnoreEncroachers = pawn->bIgnoreEncroachers; pawnSave.bPushedByEncroachers = pawn->bPushedByEncroachers; pawnSave.bDestroyedByInterpActor = pawn->bDestroyedByInterpActor; pawnSave.bRouteBeginPlayEvenIfStatic = pawn->bRouteBeginPlayEvenIfStatic; pawnSave.bIsMoving = pawn->bIsMoving; pawnSave.bAlwaysEncroachCheck = pawn->bAlwaysEncroachCheck; pawnSave.bHasAlternateTargetLocation = pawn->bHasAlternateTargetLocation; pawnSave.bNetTemporary = pawn->bNetTemporary; pawnSave.bOnlyRelevantToOwner = pawn->bOnlyRelevantToOwner; pawnSave.bNetDirty = pawn->bNetDirty; pawnSave.bAlwaysRelevant = pawn->bAlwaysRelevant; pawnSave.bReplicateInstigator = pawn->bReplicateInstigator; pawnSave.bReplicateMovement = pawn->bReplicateMovement; pawnSave.bSkipActorPropertyReplication = pawn->bSkipActorPropertyReplication; pawnSave.bUpdateSimulatedPosition = pawn->bUpdateSimulatedPosition; pawnSave.bTearOff = pawn->bTearOff; pawnSave.bOnlyDirtyReplication = pawn->bOnlyDirtyReplication; pawnSave.bDemoRecording = pawn->bDemoRecording; pawnSave.bDemoOwner = pawn->bDemoOwner; pawnSave.bForceDemoRelevant = pawn->bForceDemoRelevant; pawnSave.bNetInitialRotation = pawn->bNetInitialRotation; pawnSave.bReplicateRigidBodyLocation = pawn->bReplicateRigidBodyLocation; pawnSave.bKillDuringLevelTransition = pawn->bKillDuringLevelTransition; pawnSave.bExchangedRoles = pawn->bExchangedRoles; pawnSave.bConsiderAllStaticMeshComponentsForStreaming = pawn->bConsiderAllStaticMeshComponentsForStreaming; pawnSave.bIgnoreForAITraces = pawn->bIgnoreForAITraces; pawnSave.bInteractable = pawn->bInteractable; pawnSave.bLOIObject = pawn->bLOIObject; pawnSave.bDebug = pawn->bDebug; pawnSave.bPostRenderIfNotVisible = pawn->bPostRenderIfNotVisible; pawnSave.bForceNetUpdate = pawn->bForceNetUpdate; pawnSave.bPendingNetUpdate = pawn->bPendingNetUpdate; pawnSave.bHardAttach = pawn->bHardAttach; pawnSave.bIgnoreBaseRotation = pawn->bIgnoreBaseRotation; pawnSave.bShadowParented = pawn->bShadowParented; pawnSave.bCanBeAdheredTo = pawn->bCanBeAdheredTo; pawnSave.bCanBeFrictionedTo = pawn->bCanBeFrictionedTo; pawnSave.bHurtEntry = pawn->bHurtEntry; pawnSave.bGameRelevant = pawn->bGameRelevant; pawnSave.bMovable = pawn->bMovable; pawnSave.bDestroyInPainVolume = pawn->bDestroyInPainVolume; pawnSave.bCanBeDamaged = pawn->bCanBeDamaged; pawnSave.bShouldBaseAtStartup = pawn->bShouldBaseAtStartup; pawnSave.bPendingDelete = pawn->bPendingDelete; pawnSave.bCanTeleport = pawn->bCanTeleport; pawnSave.bAlwaysTick = pawn->bAlwaysTick; pawnSave.bBlocksNavigation = pawn->bBlocksNavigation; pawnSave.BlockRigidBody = pawn->BlockRigidBody; pawnSave.bCollideWhenPlacing = pawn->bCollideWhenPlacing; pawnSave.bCollideActors = pawn->bCollideActors; pawnSave.bCollideWorld = pawn->bCollideWorld; pawnSave.bCollideComplex = pawn->bCollideComplex; pawnSave.bBlockActors = pawn->bBlockActors; pawnSave.bProjTarget = pawn->bProjTarget; pawnSave.bBlocksTeleport = pawn->bBlocksTeleport; pawnSave.bNoEncroachCheck = pawn->bNoEncroachCheck; pawnSave.bPhysRigidBodyOutOfWorldCheck = pawn->bPhysRigidBodyOutOfWorldCheck; pawnSave.bComponentOutsideWorld = pawn->bComponentOutsideWorld; pawnSave.bBounce = pawn->bBounce; pawnSave.bJustTeleported = pawn->bJustTeleported; pawnSave.bNetInitial = pawn->bNetInitial; pawnSave.bNetOwner = pawn->bNetOwner; pawnSave.bHiddenEd = pawn->bHiddenEd; pawnSave.bHiddenEdGroup = pawn->bHiddenEdGroup; pawnSave.bHiddenEdCustom = pawn->bHiddenEdCustom; pawnSave.bEdShouldSnap = pawn->bEdShouldSnap; pawnSave.bTempEditor = pawn->bTempEditor; pawnSave.bPathColliding = pawn->bPathColliding; pawnSave.bPathTemp = pawn->bPathTemp; pawnSave.bScriptInitialized = pawn->bScriptInitialized; pawnSave.bLockLocation = pawn->bLockLocation; pawnSave.CustomTimeDilation = pawn->CustomTimeDilation; pawnSave.Physics = pawn->Physics; pawnSave.RemoteRole = pawn->RemoteRole; pawnSave.Role = pawn->Role; pawnSave.CollisionType = pawn->CollisionType; pawnSave.TickGroup = pawn->TickGroup; pawnSave.NetTag = pawn->NetTag; pawnSave.NetUpdateTime = pawn->NetUpdateTime; pawnSave.NetUpdateFrequency = pawn->NetUpdateFrequency; pawnSave.NetPriority = pawn->NetPriority; pawnSave.LastNetUpdateTime = pawn->LastNetUpdateTime; pawnSave.LifeSpan = pawn->LifeSpan; pawnSave.CreationTime = pawn->CreationTime; pawnSave.LastRenderTime = pawn->LastRenderTime; pawnSave.LatentFloat = pawn->LatentFloat; pawnSave.Location = pawn->Location; pawnSave.Rotation = pawn->Rotation; pawnSave.Velocity = pawn->Velocity; pawnSave.Acceleration = pawn->Acceleration; pawnSave.AngularVelocity = pawn->AngularVelocity; pawnSave.RelativeLocation = pawn->RelativeLocation; pawnSave.RelativeRotation = pawn->RelativeRotation; pawnSave.DrawScale = pawn->DrawScale; pawnSave.DrawScale3D = pawn->DrawScale3D; pawnSave.PrePivot = pawn->PrePivot; pawnSave.OverlapTag = pawn->OverlapTag; pawnSave.RotationRate = pawn->RotationRate; pawnSave.DesiredRotation = pawn->DesiredRotation; pawnSave.MinDistForNetRBCorrection = pawn->MinDistForNetRBCorrection; pawnSave.MaxStepHeight = pawn->MaxStepHeight; pawnSave.MaxJumpHeight = pawn->MaxJumpHeight; pawnSave.WalkableFloorZ = pawn->WalkableFloorZ; pawnSave.NetRelevancyTime = pawn->NetRelevancyTime; pawnSave.bUpAndOut = pawn->bUpAndOut; pawnSave.bIsWalking = pawn->bIsWalking; pawnSave.bWantsToCrouch = pawn->bWantsToCrouch; pawnSave.bIsCrouched = pawn->bIsCrouched; pawnSave.bTryToUncrouch = pawn->bTryToUncrouch; pawnSave.bCanCrouch = pawn->bCanCrouch; pawnSave.bCrawler = pawn->bCrawler; pawnSave.bReducedSpeed = pawn->bReducedSpeed; pawnSave.bJumpCapable = pawn->bJumpCapable; pawnSave.bCanJump = pawn->bCanJump; pawnSave.bCanWalk = pawn->bCanWalk; pawnSave.bCanSwim = pawn->bCanSwim; pawnSave.bCanFly = pawn->bCanFly; pawnSave.bCanClimbLadders = pawn->bCanClimbLadders; pawnSave.bCanStrafe = pawn->bCanStrafe; pawnSave.bAvoidLedges = pawn->bAvoidLedges; pawnSave.bStopAtLedges = pawn->bStopAtLedges; pawnSave.bSimulateGravity = pawn->bSimulateGravity; pawnSave.bIgnoreForces = pawn->bIgnoreForces; pawnSave.bCanWalkOffLedges = pawn->bCanWalkOffLedges; pawnSave.bCanBeBaseForPawns = pawn->bCanBeBaseForPawns; pawnSave.bSimGravityDisabled = pawn->bSimGravityDisabled; pawnSave.bDirectHitWall = pawn->bDirectHitWall; pawnSave.bPushesRigidBodies = pawn->bPushesRigidBodies; pawnSave.bForceFloorCheck = pawn->bForceFloorCheck; pawnSave.bForceKeepAnchor = pawn->bForceKeepAnchor; pawnSave.bCanMantle = pawn->bCanMantle; pawnSave.bCanClimbCeilings = pawn->bCanClimbCeilings; pawnSave.bCanSwatTurn = pawn->bCanSwatTurn; pawnSave.bCanLeap = pawn->bCanLeap; pawnSave.bCanCoverSlip = pawn->bCanCoverSlip; pawnSave.bDisplayPathErrors = pawn->bDisplayPathErrors; pawnSave.bIsFemale = pawn->bIsFemale; pawnSave.bCanPickupInventory = pawn->bCanPickupInventory; pawnSave.bAmbientCreature = pawn->bAmbientCreature; pawnSave.bLOSHearing = pawn->bLOSHearing; pawnSave.bMuffledHearing = pawn->bMuffledHearing; pawnSave.bDontPossess = pawn->bDontPossess; pawnSave.bAutoFire = pawn->bAutoFire; pawnSave.bRollToDesired = pawn->bRollToDesired; pawnSave.bStationary = pawn->bStationary; pawnSave.bCachedRelevant = pawn->bCachedRelevant; pawnSave.bSpecialHUD = pawn->bSpecialHUD; pawnSave.bNoWeaponFiring = pawn->bNoWeaponFiring; pawnSave.bCanUse = pawn->bCanUse; pawnSave.bModifyReachSpecCost = pawn->bModifyReachSpecCost; pawnSave.bPathfindsAsVehicle = pawn->bPathfindsAsVehicle; pawnSave.bRunPhysicsWithNoController = pawn->bRunPhysicsWithNoController; pawnSave.bForceMaxAccel = pawn->bForceMaxAccel; pawnSave.bForceRMVelocity = pawn->bForceRMVelocity; pawnSave.bForceRegularVelocity = pawn->bForceRegularVelocity; pawnSave.bPlayedDeath = pawn->bPlayedDeath; pawnSave.UncrouchTime = pawn->UncrouchTime; pawnSave.CrouchHeight = pawn->CrouchHeight; pawnSave.CrouchRadius = pawn->CrouchRadius; pawnSave.FullHeight = pawn->FullHeight; pawnSave.NonPreferredVehiclePathMultiplier = pawn->NonPreferredVehiclePathMultiplier; pawnSave.PathSearchType = pawn->PathSearchType; pawnSave.RemoteViewPitch = pawn->RemoteViewPitch; pawnSave.FlashCount = pawn->FlashCount; pawnSave.FiringMode = pawn->FiringMode; pawnSave.DesiredSpeed = pawn->DesiredSpeed; pawnSave.MaxDesiredSpeed = pawn->MaxDesiredSpeed; pawnSave.HearingThreshold = pawn->HearingThreshold; pawnSave.Alertness = pawn->Alertness; pawnSave.SightRadius = pawn->SightRadius; pawnSave.PeripheralVision = pawn->PeripheralVision; pawnSave.AvgPhysicsTime = pawn->AvgPhysicsTime; pawnSave.Mass = pawn->Mass; pawnSave.Buoyancy = pawn->Buoyancy; pawnSave.MeleeRange = pawn->MeleeRange; pawnSave.FindAnchorFailedTime = pawn->FindAnchorFailedTime; pawnSave.LastValidAnchorTime = pawn->LastValidAnchorTime; pawnSave.DestinationOffset = pawn->DestinationOffset; pawnSave.NextPathRadius = pawn->NextPathRadius; pawnSave.SerpentineDir = pawn->SerpentineDir; pawnSave.SerpentineDist = pawn->SerpentineDist; pawnSave.SerpentineTime = pawn->SerpentineTime; pawnSave.SpawnTime = pawn->SpawnTime; pawnSave.MaxPitchLimit = pawn->MaxPitchLimit; pawnSave.GroundSpeed = pawn->GroundSpeed; pawnSave.WaterSpeed = pawn->WaterSpeed; pawnSave.AirSpeed = pawn->AirSpeed; pawnSave.LadderSpeed = pawn->LadderSpeed; pawnSave.AccelRate = pawn->AccelRate; pawnSave.JumpZ = pawn->JumpZ; pawnSave.OutofWaterZ = pawn->OutofWaterZ; pawnSave.MaxOutOfWaterStepHeight = pawn->MaxOutOfWaterStepHeight; pawnSave.AirControl = pawn->AirControl; pawnSave.WalkingPct = pawn->WalkingPct; pawnSave.CrouchedPct = pawn->CrouchedPct; pawnSave.MaxFallSpeed = pawn->MaxFallSpeed; pawnSave.AIMaxFallSpeedFactor = pawn->AIMaxFallSpeedFactor; pawnSave.BaseEyeHeight = pawn->BaseEyeHeight; pawnSave.EyeHeight = pawn->EyeHeight; pawnSave.Floor = pawn->Floor; pawnSave.SplashTime = pawn->SplashTime; pawnSave.OldZ = pawn->OldZ; pawnSave.Health = pawn->Health; pawnSave.HealthMax = pawn->HealthMax; pawnSave.BreathTime = pawn->BreathTime; pawnSave.UnderWaterTime = pawn->UnderWaterTime; pawnSave.LastPainTime = pawn->LastPainTime; pawnSave.RMVelocity = pawn->RMVelocity; pawnSave.noise1spot = pawn->noise1spot; pawnSave.noise1time = pawn->noise1time; pawnSave.noise1loudness = pawn->noise1loudness; pawnSave.noise2spot = pawn->noise2spot; pawnSave.noise2time = pawn->noise2time; pawnSave.noise2loudness = pawn->noise2loudness; pawnSave.SoundDampening = pawn->SoundDampening; pawnSave.DamageScaling = pawn->DamageScaling; pawnSave.LastStartTime = pawn->LastStartTime; pawnSave.TakeHitLocation = pawn->TakeHitLocation; pawnSave.TearOffMomentum = pawn->TearOffMomentum; pawnSave.RBPushRadius = pawn->RBPushRadius; pawnSave.RBPushStrength = pawn->RBPushStrength; pawnSave.AlwaysRelevantDistanceSquared = pawn->AlwaysRelevantDistanceSquared; pawnSave.VehicleCheckRadius = pawn->VehicleCheckRadius; pawnSave.ViewPitchMin = pawn->ViewPitchMin; pawnSave.ViewPitchMax = pawn->ViewPitchMax; pawnSave.AllowedYawError = pawn->AllowedYawError; pawnSave.FlashLocation = pawn->FlashLocation; pawnSave.LastFiringFlashLocation = pawn->LastFiringFlashLocation; pawnSave.ShotCount = pawn->ShotCount; pawnSave.FailedLandingCount = pawn->FailedLandingCount; pawnSave.bDisableSkelControlSpring = pawn->bDisableSkelControlSpring; pawnSave.bCanUnCrouch = pawn->bCanUnCrouch; pawnSave.bConstrainLook = pawn->bConstrainLook; pawnSave.bGoingForward = pawn->bGoingForward; pawnSave.bClimbLeftHand = pawn->bClimbLeftHand; pawnSave.bClimbDownFast = pawn->bClimbDownFast; pawnSave.bEnableFootPlacement = pawn->bEnableFootPlacement; pawnSave.bMoveActionMax = pawn->bMoveActionMax; pawnSave.bFoundLedgeExcludesHandMoves = pawn->bFoundLedgeExcludesHandMoves; pawnSave.bFoundLedgeExcludesFootMoves = pawn->bFoundLedgeExcludesFootMoves; pawnSave.bIsWallWalking = pawn->bIsWallWalking; pawnSave.bFoundLedge = pawn->bFoundLedge; pawnSave.bAllowMoveChange = pawn->bAllowMoveChange; pawnSave.bSRPauseTimer = pawn->bSRPauseTimer; pawnSave.bForceMaxAccelOneFrame = pawn->bForceMaxAccelOneFrame; pawnSave.RollTriggerPressed = pawn->RollTriggerPressed; pawnSave.bUncontrolledSlide = pawn->bUncontrolledSlide; pawnSave.bIsPlayingSlideEffect = pawn->bIsPlayingSlideEffect; pawnSave.bAlternateSound = pawn->bAlternateSound; pawnSave.bCharacterInhaling = pawn->bCharacterInhaling; pawnSave.bDisableCharacterSounds = pawn->bDisableCharacterSounds; pawnSave.bTakeFallDamage = pawn->bTakeFallDamage; pawnSave.bIsUsingRootMotion = pawn->bIsUsingRootMotion; pawnSave.bIsUsingRootRotation = pawn->bIsUsingRootRotation; pawnSave.bDebugDamage = pawn->bDebugDamage; pawnSave.bDebugNetAnim = pawn->bDebugNetAnim; pawnSave.bNoMoveAnims = pawn->bNoMoveAnims; pawnSave.bDebugAcceleration = pawn->bDebugAcceleration; pawnSave.bDebugJumping = pawn->bDebugJumping; pawnSave.bDebugMovement = pawn->bDebugMovement; pawnSave.bDebugPlotPath = pawn->bDebugPlotPath; pawnSave.bDebugFootsteps = pawn->bDebugFootsteps; pawnSave.bDebugSlapBack = pawn->bDebugSlapBack; pawnSave.bDebugCharacterSounds = pawn->bDebugCharacterSounds; pawnSave.bDebugBreathingSounds = pawn->bDebugBreathingSounds; pawnSave.bDebugWeapons = pawn->bDebugWeapons; pawnSave.bDebugMaterials = pawn->bDebugMaterials; pawnSave.VelocityMagnitude2D = pawn->VelocityMagnitude2D; pawnSave.VelocityMagnitude = pawn->VelocityMagnitude; pawnSave.VelocityDir2D = pawn->VelocityDir2D; pawnSave.VelocityDir = pawn->VelocityDir; pawnSave.FaceRotationTimeLeft = pawn->FaceRotationTimeLeft; pawnSave.BecameReadyTime = pawn->BecameReadyTime; pawnSave.AmountTilUnarmed = pawn->AmountTilUnarmed; pawnSave.GravityModifier = pawn->GravityModifier; pawnSave.GravityModifierTimer = pawn->GravityModifierTimer; pawnSave.AgainstWallState = pawn->AgainstWallState; pawnSave.WeaponAnimState = pawn->WeaponAnimState; pawnSave.AnimLockRefCount = pawn->AnimLockRefCount; pawnSave.RootMotionRefCount = pawn->RootMotionRefCount; pawnSave.CurrentGrabTurnType = pawn->CurrentGrabTurnType; pawnSave.LadderType = pawn->LadderType; pawnSave.AnimationMovementState = pawn->AnimationMovementState; pawnSave.PendingAnimationMovementState = pawn->PendingAnimationMovementState; pawnSave.OldMovementState = pawn->OldMovementState; pawnSave.PendingMovementState = pawn->PendingMovementState; pawnSave.MovementState = pawn->MovementState; pawnSave.ReplicatedMovementState = pawn->ReplicatedMovementState; pawnSave.AIAimOldMovementState = pawn->AIAimOldMovementState; pawnSave.OverrideWalkingState = pawn->OverrideWalkingState; pawnSave.PendingOverrideWalkingState = pawn->PendingOverrideWalkingState; pawnSave.CurrentWalkingState = pawn->CurrentWalkingState; pawnSave.ReplicateCustomAnimCount = pawn->ReplicateCustomAnimCount; pawnSave.MoveActionHint = pawn->MoveActionHint; pawnSave.ReloadCount = pawn->ReloadCount; pawnSave.NoOfBreathingSounds = pawn->NoOfBreathingSounds; pawnSave.AgainstWallLeftHand = pawn->AgainstWallLeftHand; pawnSave.AgainstWallRightHand = pawn->AgainstWallRightHand; pawnSave.AgainstWallNormal = pawn->AgainstWallNormal; pawnSave.MinLookConstraint = pawn->MinLookConstraint; pawnSave.MaxLookConstraint = pawn->MaxLookConstraint; pawnSave.LegRotationSlowTimer = pawn->LegRotationSlowTimer; pawnSave.LegRotation = pawn->LegRotation; pawnSave.LegRotationSpeed = pawn->LegRotationSpeed; pawnSave.GoBackLegAngleLimitMin = pawn->GoBackLegAngleLimitMin; pawnSave.GoBackLegAngleLimitMax = pawn->GoBackLegAngleLimitMax; pawnSave.LegAngleLimitFudge = pawn->LegAngleLimitFudge; pawnSave.SneakVelocity = pawn->SneakVelocity; pawnSave.WalkVelocity = pawn->WalkVelocity; pawnSave.JogVelocity = pawn->JogVelocity; pawnSave.RunVelocity = pawn->RunVelocity; pawnSave.SprintVelocity = pawn->SprintVelocity; pawnSave.AverageSpeed = pawn->AverageSpeed; pawnSave.ASFilterTime = pawn->ASFilterTime; pawnSave.ASPollInterval = pawn->ASPollInterval; pawnSave.ASPollTimer = pawn->ASPollTimer; pawnSave.ASPollSlots = pawn->ASPollSlots; pawnSave.ASSlotPointer = pawn->ASSlotPointer; pawnSave.ASDistanceAccum = pawn->ASDistanceAccum; pawnSave.NewFloorSmooth = pawn->NewFloorSmooth; pawnSave.SmoothOffset = pawn->SmoothOffset; pawnSave.FootPlacementStoredRotation = pawn->FootPlacementStoredRotation; pawnSave.TargetMeshTranslationZ = pawn->TargetMeshTranslationZ; pawnSave.SlideStoppedTimeStamp = pawn->SlideStoppedTimeStamp; pawnSave.MoveLocation = pawn->MoveLocation; pawnSave.MoveNormal = pawn->MoveNormal; pawnSave.MaxWallStepHeight = pawn->MaxWallStepHeight; pawnSave.MoveLedgeLocation = pawn->MoveLedgeLocation; pawnSave.MoveLedgeNormal = pawn->MoveLedgeNormal; pawnSave.MoveLedgeResult = pawn->MoveLedgeResult; pawnSave.LedgeFindExtent = pawn->LedgeFindExtent; pawnSave.LedgeFindDistance = pawn->LedgeFindDistance; pawnSave.LedgeFindDepth = pawn->LedgeFindDepth; pawnSave.IllegalLedgeNormal = pawn->IllegalLedgeNormal; pawnSave.bIllegalLedgeTimer = pawn->bIllegalLedgeTimer; pawnSave.ActiveMoveTimer = pawn->ActiveMoveTimer; pawnSave.RemoteViewYaw = pawn->RemoteViewYaw; pawnSave.EvadeTimer = pawn->EvadeTimer; pawnSave.SpeedMaxBaseVelocity = pawn->SpeedMaxBaseVelocity; pawnSave.SpeedMinBaseVelocity = pawn->SpeedMinBaseVelocity; pawnSave.SpeedStrafeVelocityAccelerationFactor = pawn->SpeedStrafeVelocityAccelerationFactor; pawnSave.SpeedWalkVelocityAccelerationFactor = pawn->SpeedWalkVelocityAccelerationFactor; pawnSave.SpeedSprintVelocityAccelerationFactor = pawn->SpeedSprintVelocityAccelerationFactor; pawnSave.SpeedEnergyDecelerationTime = pawn->SpeedEnergyDecelerationTime; pawnSave.SpeedEnergyDecelerationExponent = pawn->SpeedEnergyDecelerationExponent; pawnSave.SpeedTurnDecelerationFactor = pawn->SpeedTurnDecelerationFactor; pawnSave.SpeedSprintEnergy = pawn->SpeedSprintEnergy; pawnSave.UpwardWalkFrictionScale = pawn->UpwardWalkFrictionScale; pawnSave.DownwardWalkFrictionScale = pawn->DownwardWalkFrictionScale; pawnSave.MinWalkFrictionModify = pawn->MinWalkFrictionModify; pawnSave.MaxWalkFrictionModify = pawn->MaxWalkFrictionModify; pawnSave.UpwardSlideFrictionScale = pawn->UpwardSlideFrictionScale; pawnSave.DownwardSlideFrictionScale = pawn->DownwardSlideFrictionScale; pawnSave.BrakingFrictionStrength = pawn->BrakingFrictionStrength; pawnSave.SoftLockStrength = pawn->SoftLockStrength; pawnSave.RollTriggerTime = pawn->RollTriggerTime; pawnSave.UncontrolledSlideNormal = pawn->UncontrolledSlideNormal; pawnSave.FallingUncontrolledHeight = pawn->FallingUncontrolledHeight; pawnSave.EnterFallingHeight = pawn->EnterFallingHeight; pawnSave.SlideEffectUpdateTimer = pawn->SlideEffectUpdateTimer; pawnSave.CustomSoundInput = pawn->CustomSoundInput; pawnSave.OverrideSynchPosOffset = pawn->OverrideSynchPosOffset; pawnSave.StreakEffectOverride = pawn->StreakEffectOverride; pawnSave.StreakEffectDirection = pawn->StreakEffectDirection; pawnSave.PatchOne = pawn->PatchOne; pawnSave.PatchTwo = pawn->PatchTwo; pawnSave.PatchThree = pawn->PatchThree; pawnSave.PhysicsHitReactionBlendTimer = pawn->PhysicsHitReactionBlendTimer; pawnSave.PhysicsHitReactionBlendOut = pawn->PhysicsHitReactionBlendOut; pawnSave.PhysicsHitReactionBlendInTime = pawn->PhysicsHitReactionBlendInTime; pawnSave.PhysicsHitReactionBlendOutTime = pawn->PhysicsHitReactionBlendOutTime; pawnSave.PhysicsHitReactionScale = pawn->PhysicsHitReactionScale; pawnSave.LastDamageTaken = pawn->LastDamageTaken; pawnSave.ArmorBulletsHead = pawn->ArmorBulletsHead; pawnSave.ArmorBulletsBody = pawn->ArmorBulletsBody; pawnSave.ArmorBulletsLegs = pawn->ArmorBulletsLegs; pawnSave.ArmorMeleeHead = pawn->ArmorMeleeHead; pawnSave.ArmorMeleeBody = pawn->ArmorMeleeBody; pawnSave.ArmorMeleeLegs = pawn->ArmorMeleeLegs; pawnSave.FootstepTraceLength = pawn->FootstepTraceLength; pawnSave.FootstepTraceWidth = pawn->FootstepTraceWidth; pawnSave.LastFlybyStamp = pawn->LastFlybyStamp; pawnSave.MaxHealth = pawn->MaxHealth; pawnSave.RegenerateDelay = pawn->RegenerateDelay; pawnSave.RegenerateHealthPerSecond = pawn->RegenerateHealthPerSecond; pawnSave.UnrealEngineFallDamageScale = pawn->UnrealEngineFallDamageScale; pawnSave.TimeSinceLastDamage = pawn->TimeSinceLastDamage; pawnSave.HealthFrac = pawn->HealthFrac; pawnSave.TaserDamageLevel = pawn->TaserDamageLevel; pawnSave.RegenerateFromTaserPerSecond = pawn->RegenerateFromTaserPerSecond; pawnSave.TaserRegenerateDelay = pawn->TaserRegenerateDelay; pawnSave.TimeSinceLastTaserDamage = pawn->TimeSinceLastTaserDamage; pawnSave.StunDamageLevel = pawn->StunDamageLevel; pawnSave.RegenerateFromStunPerSecond = pawn->RegenerateFromStunPerSecond; pawnSave.MinTimeBeforeRemovingDeadBody = pawn->MinTimeBeforeRemovingDeadBody; pawnSave.MaxTimeBeforeRemovingDeadBody = pawn->MaxTimeBeforeRemovingDeadBody; pawnSave.MyPassengerSeatIndex = pawn->MyPassengerSeatIndex; pawnSave.SlideFactor = pawn->SlideFactor; pawnSave.LastDamage = pawn->LastDamage; pawnSave.LastDamageTime = pawn->LastDamageTime; pawnSave.NextDebugPlotTime = pawn->NextDebugPlotTime; pawnSave.LastPlotLocation = pawn->LastPlotLocation; pawnSave.LastJumpLocation = pawn->LastJumpLocation; pawnSave.bHasMorphNodes = pawn->bHasMorphNodes; pawnSave.bStuckOnGround = pawn->bStuckOnGround; pawnSave.bPlayerDiedHoldingTheBag = pawn->bPlayerDiedHoldingTheBag; pawnSave.bIsInShadowAlteringMoveState = pawn->bIsInShadowAlteringMoveState; pawnSave.bEnableHairPhysics = pawn->bEnableHairPhysics; pawnSave.bLockBase = pawn->bLockBase; pawnSave.bCutsceneIsSkippable = pawn->bCutsceneIsSkippable; pawnSave.FirstPersonDPG = pawn->FirstPersonDPG; pawnSave.FirstPersonLowerBodyDPG = pawn->FirstPersonLowerBodyDPG; pawnSave.VertigoEdgeProbingHeight = pawn->VertigoEdgeProbingHeight; pawnSave.VertigoEdgeProbingDistance = pawn->VertigoEdgeProbingDistance; pawnSave.VertigoEffectThreshold = pawn->VertigoEffectThreshold; pawnSave.EdgeCheckMaxSpeed = pawn->EdgeCheckMaxSpeed; pawnSave.EdgeCheckDistance = pawn->EdgeCheckDistance; pawnSave.EdgeStopMinHeight = pawn->EdgeStopMinHeight; pawnSave.LastEnemyHitTimeOut = pawn->LastEnemyHitTimeOut; pawnSave.ReverbVolumeTimer = pawn->ReverbVolumeTimer; pawnSave.ReverbVolumePollTime = pawn->ReverbVolumePollTime; pawnSave.OcclusionDuckLevel = pawn->OcclusionDuckLevel; pawnSave.OcclusionDuckFadeTime = pawn->OcclusionDuckFadeTime; pawnSave.IndoorSoundGroupIndex = pawn->IndoorSoundGroupIndex; pawnSave.IndoorMixGroupIndex = pawn->IndoorMixGroupIndex; pawnSave.OutdoorMixGroupIndex = pawn->OutdoorMixGroupIndex; pawnSave.MovementStringAllowedGap = pawn->MovementStringAllowedGap; pawnSave.MovementStringGapTimer = pawn->MovementStringGapTimer; pawnSave.PlayerBulletDamageMultiplier = pawn->PlayerBulletDamageMultiplier; pawnSave.FocusLocation = pawn->FocusLocation; pawnSave.PlayerCameraLocation = pawn->PlayerCameraLocation; pawnSave.PlayerCameraRotation = pawn->PlayerCameraRotation; pawnSave.DebugPlayerGraph = pawn->DebugPlayerGraph; pawnSave.LastDebugGraphValue = pawn->LastDebugGraphValue; pawnSave.SimulatedBadFPS = pawn->SimulatedBadFPS; pawnSave.FocusLocationInterpolationSpeed = pawn->FocusLocationInterpolationSpeed; pawnSave.LastResetTimeStamp = pawn->LastResetTimeStamp;
	controllerSave.bExludeHandMoves = controller->bExludeHandMoves; controllerSave.bExludeFootMoves = controller->bExludeFootMoves; controllerSave.bPhysXMutatable = controller->bPhysXMutatable; controllerSave.bStatic = controller->bStatic; controllerSave.bHidden = controller->bHidden; controllerSave.bNoDelete = controller->bNoDelete; controllerSave.bDeleteMe = controller->bDeleteMe; controllerSave.bTicked = controller->bTicked; controllerSave.bOnlyOwnerSee = controller->bOnlyOwnerSee; controllerSave.bStasis = controller->bStasis; controllerSave.bWorldGeometry = controller->bWorldGeometry; controllerSave.bIgnoreRigidBodyPawns = controller->bIgnoreRigidBodyPawns; controllerSave.bOrientOnSlope = controller->bOrientOnSlope; controllerSave.bIgnoreEncroachers = controller->bIgnoreEncroachers; controllerSave.bPushedByEncroachers = controller->bPushedByEncroachers; controllerSave.bDestroyedByInterpActor = controller->bDestroyedByInterpActor; controllerSave.bRouteBeginPlayEvenIfStatic = controller->bRouteBeginPlayEvenIfStatic; controllerSave.bIsMoving = controller->bIsMoving; controllerSave.bAlwaysEncroachCheck = controller->bAlwaysEncroachCheck; controllerSave.bHasAlternateTargetLocation = controller->bHasAlternateTargetLocation; controllerSave.bNetTemporary = controller->bNetTemporary; controllerSave.bOnlyRelevantToOwner = controller->bOnlyRelevantToOwner; controllerSave.bNetDirty = controller->bNetDirty; controllerSave.bAlwaysRelevant = controller->bAlwaysRelevant; controllerSave.bReplicateInstigator = controller->bReplicateInstigator; controllerSave.bReplicateMovement = controller->bReplicateMovement; controllerSave.bSkipActorPropertyReplication = controller->bSkipActorPropertyReplication; controllerSave.bUpdateSimulatedPosition = controller->bUpdateSimulatedPosition; controllerSave.bTearOff = controller->bTearOff; controllerSave.bOnlyDirtyReplication = controller->bOnlyDirtyReplication; controllerSave.bDemoRecording = controller->bDemoRecording; controllerSave.bDemoOwner = controller->bDemoOwner; controllerSave.bForceDemoRelevant = controller->bForceDemoRelevant; controllerSave.bNetInitialRotation = controller->bNetInitialRotation; controllerSave.bReplicateRigidBodyLocation = controller->bReplicateRigidBodyLocation; controllerSave.bKillDuringLevelTransition = controller->bKillDuringLevelTransition; controllerSave.bExchangedRoles = controller->bExchangedRoles; controllerSave.bConsiderAllStaticMeshComponentsForStreaming = controller->bConsiderAllStaticMeshComponentsForStreaming; controllerSave.bIgnoreForAITraces = controller->bIgnoreForAITraces; controllerSave.bInteractable = controller->bInteractable; controllerSave.bLOIObject = controller->bLOIObject; controllerSave.bDebug = controller->bDebug; controllerSave.bPostRenderIfNotVisible = controller->bPostRenderIfNotVisible; controllerSave.bForceNetUpdate = controller->bForceNetUpdate; controllerSave.bPendingNetUpdate = controller->bPendingNetUpdate; controllerSave.bHardAttach = controller->bHardAttach; controllerSave.bIgnoreBaseRotation = controller->bIgnoreBaseRotation; controllerSave.bShadowParented = controller->bShadowParented; controllerSave.bCanBeAdheredTo = controller->bCanBeAdheredTo; controllerSave.bCanBeFrictionedTo = controller->bCanBeFrictionedTo; controllerSave.bHurtEntry = controller->bHurtEntry; controllerSave.bGameRelevant = controller->bGameRelevant; controllerSave.bMovable = controller->bMovable; controllerSave.bDestroyInPainVolume = controller->bDestroyInPainVolume; controllerSave.bCanBeDamaged = controller->bCanBeDamaged; controllerSave.bShouldBaseAtStartup = controller->bShouldBaseAtStartup; controllerSave.bPendingDelete = controller->bPendingDelete; controllerSave.bCanTeleport = controller->bCanTeleport; controllerSave.bAlwaysTick = controller->bAlwaysTick; controllerSave.bBlocksNavigation = controller->bBlocksNavigation; controllerSave.BlockRigidBody = controller->BlockRigidBody; controllerSave.bCollideWhenPlacing = controller->bCollideWhenPlacing; controllerSave.bCollideActors = controller->bCollideActors; controllerSave.bCollideWorld = controller->bCollideWorld; controllerSave.bCollideComplex = controller->bCollideComplex; controllerSave.bBlockActors = controller->bBlockActors; controllerSave.bProjTarget = controller->bProjTarget; controllerSave.bBlocksTeleport = controller->bBlocksTeleport; controllerSave.bNoEncroachCheck = controller->bNoEncroachCheck; controllerSave.bPhysRigidBodyOutOfWorldCheck = controller->bPhysRigidBodyOutOfWorldCheck; controllerSave.bComponentOutsideWorld = controller->bComponentOutsideWorld; controllerSave.bBounce = controller->bBounce; controllerSave.bJustTeleported = controller->bJustTeleported; controllerSave.bNetInitial = controller->bNetInitial; controllerSave.bNetOwner = controller->bNetOwner; controllerSave.bHiddenEd = controller->bHiddenEd; controllerSave.bHiddenEdGroup = controller->bHiddenEdGroup; controllerSave.bHiddenEdCustom = controller->bHiddenEdCustom; controllerSave.bEdShouldSnap = controller->bEdShouldSnap; controllerSave.bTempEditor = controller->bTempEditor; controllerSave.bPathColliding = controller->bPathColliding; controllerSave.bPathTemp = controller->bPathTemp; controllerSave.bScriptInitialized = controller->bScriptInitialized; controllerSave.bLockLocation = controller->bLockLocation; controllerSave.CustomTimeDilation = controller->CustomTimeDilation; controllerSave.Physics = controller->Physics; controllerSave.RemoteRole = controller->RemoteRole; controllerSave.Role = controller->Role; controllerSave.CollisionType = controller->CollisionType; controllerSave.TickGroup = controller->TickGroup; controllerSave.NetTag = controller->NetTag; controllerSave.NetUpdateTime = controller->NetUpdateTime; controllerSave.NetUpdateFrequency = controller->NetUpdateFrequency; controllerSave.NetPriority = controller->NetPriority; controllerSave.LastNetUpdateTime = controller->LastNetUpdateTime; controllerSave.LifeSpan = controller->LifeSpan; controllerSave.CreationTime = controller->CreationTime; controllerSave.LastRenderTime = controller->LastRenderTime; controllerSave.LatentFloat = controller->LatentFloat; controllerSave.Location = controller->Location; controllerSave.Rotation = controller->Rotation; controllerSave.Velocity = controller->Velocity; controllerSave.Acceleration = controller->Acceleration; controllerSave.AngularVelocity = controller->AngularVelocity; controllerSave.RelativeLocation = controller->RelativeLocation; controllerSave.RelativeRotation = controller->RelativeRotation; controllerSave.DrawScale = controller->DrawScale; controllerSave.DrawScale3D = controller->DrawScale3D; controllerSave.PrePivot = controller->PrePivot; controllerSave.OverlapTag = controller->OverlapTag; controllerSave.RotationRate = controller->RotationRate; controllerSave.DesiredRotation = controller->DesiredRotation; controllerSave.MinDistForNetRBCorrection = controller->MinDistForNetRBCorrection; controllerSave.PlayerNum = controller->PlayerNum; controllerSave.bIsPlayer = controller->bIsPlayer; controllerSave.bGodMode = controller->bGodMode; controllerSave.bAffectedByHitEffects = controller->bAffectedByHitEffects; controllerSave.bSoaking = controller->bSoaking; controllerSave.bSlowerZAcquire = controller->bSlowerZAcquire; controllerSave.bForceStrafe = controller->bForceStrafe; controllerSave.bNotifyPostLanded = controller->bNotifyPostLanded; controllerSave.bNotifyApex = controller->bNotifyApex; controllerSave.bAdvancedTactics = controller->bAdvancedTactics; controllerSave.bCanDoSpecial = controller->bCanDoSpecial; controllerSave.bAdjusting = controller->bAdjusting; controllerSave.bPreparingMove = controller->bPreparingMove; controllerSave.bIgnoreMovementFocus = controller->bIgnoreMovementFocus; controllerSave.bLOSflag = controller->bLOSflag; controllerSave.bUsePlayerHearing = controller->bUsePlayerHearing; controllerSave.bNotifyFallingHitWall = controller->bNotifyFallingHitWall; controllerSave.bForceDesiredRotation = controller->bForceDesiredRotation; controllerSave.bPreciseDestination = controller->bPreciseDestination; controllerSave.bSeeFriendly = controller->bSeeFriendly; controllerSave.bUsingPathLanes = controller->bUsingPathLanes; controllerSave.bFire = controller->bFire; controllerSave.MinHitWall = controller->MinHitWall; controllerSave.MoveTimer = controller->MoveTimer; controllerSave.Destination = controller->Destination; controllerSave.FocalPoint = controller->FocalPoint; controllerSave.AdjustLoc = controller->AdjustLoc; controllerSave.CurrentPathDir = controller->CurrentPathDir; controllerSave.RouteDist = controller->RouteDist; controllerSave.LastRouteFind = controller->LastRouteFind; controllerSave.GroundPitchTime = controller->GroundPitchTime; controllerSave.ViewX = controller->ViewX; controllerSave.ViewY = controller->ViewY; controllerSave.ViewZ = controller->ViewZ; controllerSave.FailedReachTime = controller->FailedReachTime; controllerSave.FailedReachLocation = controller->FailedReachLocation; controllerSave.SightCounter = controller->SightCounter; controllerSave.RespawnPredictionTime = controller->RespawnPredictionTime; controllerSave.InUseNodeCostMultiplier = controller->InUseNodeCostMultiplier; controllerSave.HighJumpNodeCostModifier = controller->HighJumpNodeCostModifier; controllerSave.LaneOffset = controller->LaneOffset; controllerSave.OldBasedRotation = controller->OldBasedRotation; controllerSave.currentLaneSlot = controller->currentLaneSlot; controllerSave.pathMatesCount = controller->pathMatesCount; controllerSave.bFrozen = controller->bFrozen; controllerSave.bPressedJump = controller->bPressedJump; controllerSave.bDoubleJump = controller->bDoubleJump; controllerSave.bUpdatePosition = controller->bUpdatePosition; controllerSave.bUpdating = controller->bUpdating; controllerSave.bNeverSwitchOnPickup = controller->bNeverSwitchOnPickup; controllerSave.bCheatFlying = controller->bCheatFlying; controllerSave.bCameraPositionLocked = controller->bCameraPositionLocked; controllerSave.bShortConnectTimeOut = controller->bShortConnectTimeOut; controllerSave.bPendingDestroy = controller->bPendingDestroy; controllerSave.bWasSpeedHack = controller->bWasSpeedHack; controllerSave.bWasSaturated = controller->bWasSaturated; controllerSave.bDynamicNetSpeed = controller->bDynamicNetSpeed; controllerSave.bAimingHelp = controller->bAimingHelp; controllerSave.bCinematicMode = controller->bCinematicMode; controllerSave.bCinemaDisableInputMove = controller->bCinemaDisableInputMove; controllerSave.bCinemaDisableInputLook = controller->bCinemaDisableInputLook; controllerSave.bReplicateAllPawns = controller->bReplicateAllPawns; controllerSave.bIsUsingStreamingVolumes = controller->bIsUsingStreamingVolumes; controllerSave.bIsExternalUIOpen = controller->bIsExternalUIOpen; controllerSave.bIsControllerConnected = controller->bIsControllerConnected; controllerSave.bCheckSoundOcclusion = controller->bCheckSoundOcclusion; controllerSave.bLogHearSoundOverflow = controller->bLogHearSoundOverflow; controllerSave.bCheckRelevancyThroughPortals = controller->bCheckRelevancyThroughPortals; controllerSave.bReceivedUniqueId = controller->bReceivedUniqueId; controllerSave.bCanSeeLOI = controller->bCanSeeLOI; controllerSave.MaxResponseTime = controller->MaxResponseTime; controllerSave.WaitDelay = controller->WaitDelay; controllerSave.DoubleClickDir = controller->DoubleClickDir; controllerSave.bIgnoreMoveInput = controller->bIgnoreMoveInput; controllerSave.bIgnoreLookInput = controller->bIgnoreLookInput; controllerSave.bRun = controller->bRun; controllerSave.bDuck = controller->bDuck; controllerSave.NetPlayerIndex = controller->NetPlayerIndex; controllerSave.FOVAngle = controller->FOVAngle; controllerSave.DesiredFOV = controller->DesiredFOV; controllerSave.DefaultFOV = controller->DefaultFOV; controllerSave.LODDistanceFactor = controller->LODDistanceFactor; controllerSave.TargetViewRotation = controller->TargetViewRotation; controllerSave.TargetEyeHeight = controller->TargetEyeHeight; controllerSave.BlendedTargetViewRotation = controller->BlendedTargetViewRotation; controllerSave.LastAckedAccel = controller->LastAckedAccel; controllerSave.CurrentTimeStamp = controller->CurrentTimeStamp; controllerSave.LastUpdateTime = controller->LastUpdateTime; controllerSave.ServerTimeStamp = controller->ServerTimeStamp; controllerSave.TimeMargin = controller->TimeMargin; controllerSave.ClientUpdateTime = controller->ClientUpdateTime; controllerSave.MaxTimeMargin = controller->MaxTimeMargin; controllerSave.LastActiveTime = controller->LastActiveTime; controllerSave.ClientCap = controller->ClientCap; controllerSave.DynamicPingThreshold = controller->DynamicPingThreshold; controllerSave.LastPingUpdate = controller->LastPingUpdate; controllerSave.OldPing = controller->OldPing; controllerSave.LastSpeedHackLog = controller->LastSpeedHackLog; controllerSave.ProgressTimeOut = controller->ProgressTimeOut; controllerSave.GroundPitch = controller->GroundPitch; controllerSave.OldFloor = controller->OldFloor; controllerSave.FailedPathStart = controller->FailedPathStart; controllerSave.InteractDistance = controller->InteractDistance; controllerSave.LastBroadcastTime = controller->LastBroadcastTime; controllerSave.SpectatorCameraSpeed = controller->SpectatorCameraSpeed; controllerSave.MinRespawnDelay = controller->MinRespawnDelay; controllerSave.MaxConcurrentHearSounds = controller->MaxConcurrentHearSounds; controllerSave.InfiniteAmmo = controller->InfiniteAmmo; controllerSave.bDebugPostProcessFreeFlight = controller->bDebugPostProcessFreeFlight; controllerSave.bReleasedJump = controller->bReleasedJump; controllerSave.bLeftThumbStickPassedDeadZone = controller->bLeftThumbStickPassedDeadZone; controllerSave.bRightThumbStickPassedDeadZone = controller->bRightThumbStickPassedDeadZone; controllerSave.bDebugCloseCombat = controller->bDebugCloseCombat; controllerSave.bDisableSkipCutscenes = controller->bDisableSkipCutscenes; controllerSave.bReactionTime = controller->bReactionTime; controllerSave.bOverrideReactionTimeSettings = controller->bOverrideReactionTimeSettings; controllerSave.bJesusMode = controller->bJesusMode; controllerSave.bStefanMode = controller->bStefanMode; controllerSave.bIsWalking = controller->bIsWalking; controllerSave.bIsStopping = controller->bIsStopping; controllerSave.FailedToSpawn = controller->FailedToSpawn; controllerSave.bDisableLoadFromLastCheckpoint = controller->bDisableLoadFromLastCheckpoint; controllerSave.bDebugSoundMixGroups = controller->bDebugSoundMixGroups; controllerSave.bDebugSoundVelocity = controller->bDebugSoundVelocity; controllerSave.bDebugSoundReverbVolumes = controller->bDebugSoundReverbVolumes; controllerSave.ControllerTilt = controller->ControllerTilt; controllerSave.VisualizeControllerTilt = controller->VisualizeControllerTilt; controllerSave.bRopeburnDisarmSucceeded = controller->bRopeburnDisarmSucceeded; controllerSave.TimePressedJump = controller->TimePressedJump; controllerSave.JumpTapTime = controller->JumpTapTime; controllerSave.BagSearchTapTime = controller->BagSearchTapTime; controllerSave.LastEmoteMessageTime = controller->LastEmoteMessageTime; controllerSave.AllowedEmoteMessageInterval = controller->AllowedEmoteMessageInterval; controllerSave.TargetingPawnInterp = controller->TargetingPawnInterp; controllerSave.TargetingCutoffAngle = controller->TargetingCutoffAngle; controllerSave.TargetActorLocation = controller->TargetActorLocation; controllerSave.LookAtTimeDelay = controller->LookAtTimeDelay; controllerSave.MeleeLastAction = controller->MeleeLastAction; controllerSave.bIgnoreButtonInput = controller->bIgnoreButtonInput; controllerSave.CurrentSoundMode = controller->CurrentSoundMode; controllerSave.CachedWalkingState = controller->CachedWalkingState; controllerSave.CloseCombatMinRange = controller->CloseCombatMinRange; controllerSave.CloseCombatMaxRange = controller->CloseCombatMaxRange; controllerSave.CloseCombatRangeTime = controller->CloseCombatRangeTime; controllerSave.CloseCombatMaxAngle = controller->CloseCombatMaxAngle; controllerSave.CloseCombatPawnDistanceBias = controller->CloseCombatPawnDistanceBias; controllerSave.InputSize = controller->InputSize; controllerSave.InputMaxSprintRaduisLimit = controller->InputMaxSprintRaduisLimit; controllerSave.InputMaxSprintHeightLimit = controller->InputMaxSprintHeightLimit; controllerSave.InputMaxWalkRadiusLimit = controller->InputMaxWalkRadiusLimit; controllerSave.WallRunningAlignTime = controller->WallRunningAlignTime; controllerSave.WallRunningAlignYaw = controller->WallRunningAlignYaw; controllerSave.LOIIndex = controller->LOIIndex; controllerSave.ReactionTimeEnergy = controller->ReactionTimeEnergy; controllerSave.ReactionTimeSpawnLevel = controller->ReactionTimeSpawnLevel; controllerSave.ReactionTimeDrain = controller->ReactionTimeDrain; controllerSave.ReactionTimeMaxEffect = controller->ReactionTimeMaxEffect; controllerSave.ReactionTimeFadeIn = controller->ReactionTimeFadeIn; controllerSave.ReactionTimeFadeOut = controller->ReactionTimeFadeOut; controllerSave.ReactionTimeEnergyBuildRate = controller->ReactionTimeEnergyBuildRate; controllerSave.WallClimbingDodgeJumpThreshold = controller->WallClimbingDodgeJumpThreshold; controllerSave.WallRunningDodgeJumpThreshold = controller->WallRunningDodgeJumpThreshold; controllerSave.WalkCyclePart1 = controller->WalkCyclePart1; controllerSave.WalkCyclePart2 = controller->WalkCyclePart2; controllerSave.AccelerationTime = controller->AccelerationTime; controllerSave.StopAnimBlendIn = controller->StopAnimBlendIn; controllerSave.StopAnimBlendOut = controller->StopAnimBlendOut; controllerSave.StoppingVelocity = controller->StoppingVelocity; controllerSave.NextLocalEnemyToCheckLOS = controller->NextLocalEnemyToCheckLOS; controllerSave.LastEnemyNetSendTime = controller->LastEnemyNetSendTime; controllerSave.VehicleRotation = controller->VehicleRotation; controllerSave.DriverRotation = controller->DriverRotation; controllerSave.Team = controller->Team; controllerSave.StickySpeed = controller->StickySpeed; controllerSave.FOVZoomRate = controller->FOVZoomRate; controllerSave.FOVZoomDelay = controller->FOVZoomDelay; controllerSave.MouseX = controller->MouseX; controllerSave.MouseY = controller->MouseY; controllerSave.ActualAccelX = controller->ActualAccelX; controllerSave.ActualAccelY = controller->ActualAccelY; controllerSave.ActualAccelZ = controller->ActualAccelZ; controllerSave.SixAxisDisarmZ = controller->SixAxisDisarmZ; controllerSave.SixAxisDisarmY = controller->SixAxisDisarmY; controllerSave.SixAxisRollZ = controller->SixAxisRollZ; controllerSave.SixAxisRollY = controller->SixAxisRollY; controllerSave.DisarmTimeMultiplier = controller->DisarmTimeMultiplier; controllerSave.LastZAxisTilt = controller->LastZAxisTilt; controllerSave.LastYAxisTilt = controller->LastYAxisTilt;

	auto walking = static_cast<Classes::UTdMove_Walking *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Walking)]);
	if (walking) {
		walkingSave.SpeedModifier = walking->SpeedModifier; walkingSave.FrictionModifier = walking->FrictionModifier; walkingSave.bDebugMove = walking->bDebugMove; walkingSave.bTriggersCompliment = walking->bTriggersCompliment; walkingSave.bDisableCollision = walking->bDisableCollision; walkingSave.bShouldHolsterWeapon = walking->bShouldHolsterWeapon; walkingSave.bShouldUnzoom = walking->bShouldUnzoom; walkingSave.bIsTimedMove = walking->bIsTimedMove; walkingSave.bConstrainLook = walking->bConstrainLook; walkingSave.bUseAbsoluteYawConstraint = walking->bUseAbsoluteYawConstraint; walkingSave.bDisableActorCollision = walking->bDisableActorCollision; walkingSave.bLookAtTargetLocation = walking->bLookAtTargetLocation; walkingSave.bLookAtTargetAngle = walking->bLookAtTargetAngle; walkingSave.bDisableFaceRotation = walking->bDisableFaceRotation; walkingSave.bDisableControllerFacingPawnYawRotation = walking->bDisableControllerFacingPawnYawRotation; walkingSave.bAvoidLedges = walking->bAvoidLedges; walkingSave.bUsePreciseLocation = walking->bUsePreciseLocation; walkingSave.bReachedPreciseLocation = walking->bReachedPreciseLocation; walkingSave.bDebugPreciseLocation = walking->bDebugPreciseLocation; walkingSave.bUsePreciseRotation = walking->bUsePreciseRotation; walkingSave.bReachedPreciseRotation = walking->bReachedPreciseRotation; walkingSave.bDelayRotationAndLocationCallback = walking->bDelayRotationAndLocationCallback; walkingSave.bResetCameraLook = walking->bResetCameraLook; walkingSave.bUseCustomCollision = walking->bUseCustomCollision; walkingSave.bUseCameraCollision = walking->bUseCameraCollision; walkingSave.bTwoHandedFullBodyAnimations = walking->bTwoHandedFullBodyAnimations; walkingSave.bStickyAim = walking->bStickyAim; walkingSave.bStopAfterMove = walking->bStopAfterMove; walkingSave.bEnableFootPlacement = walking->bEnableFootPlacement; walkingSave.bEnableAgainstWall = walking->bEnableAgainstWall; walkingSave.bAllowPickup = walking->bAllowPickup; walkingSave.AiAimPenalty = walking->AiAimPenalty; walkingSave.AiAimOneShotPenalty = walking->AiAimOneShotPenalty; walkingSave.MovementGroup = walking->MovementGroup; walkingSave.FirstPersonDPG = walking->FirstPersonDPG; walkingSave.FirstPersonLowerBodyDPG = walking->FirstPersonLowerBodyDPG; walkingSave.PreciseLocationInterpMode = walking->PreciseLocationInterpMode; walkingSave.AimMode = walking->AimMode; walkingSave.DisableMovementTime = walking->DisableMovementTime; walkingSave.DisableLookTime = walking->DisableLookTime; walkingSave.LastCanDoMoveTime = walking->LastCanDoMoveTime; walkingSave.LastStopMoveTime = walking->LastStopMoveTime; walkingSave.MoveActiveTime = walking->MoveActiveTime; walkingSave.RedoMoveTime = walking->RedoMoveTime; walkingSave.PreciseLocationSpeed = walking->PreciseLocationSpeed; walkingSave.PreciseLocation = walking->PreciseLocation; walkingSave.PreciseRotationInterpolationTime = walking->PreciseRotationInterpolationTime; walkingSave.PreciseRotation = walking->PreciseRotation; walkingSave.LookAtTargetLocation = walking->LookAtTargetLocation; walkingSave.LookAtTargetAngle = walking->LookAtTargetAngle; walkingSave.LookAtTargetInterpolationTime = walking->LookAtTargetInterpolationTime; walkingSave.LookAtTargetDuration = walking->LookAtTargetDuration; walkingSave.CancelResetCameraLookTime = walking->CancelResetCameraLookTime; walkingSave.ResetCameraLookTime = walking->ResetCameraLookTime; walkingSave.MinLookConstraint = walking->MinLookConstraint; walkingSave.MaxLookConstraint = walking->MaxLookConstraint; walkingSave.CustomCollisionRadius = walking->CustomCollisionRadius; walkingSave.CustomCollisionHeight = walking->CustomCollisionHeight; walkingSave.WeaponInactivePitchAimingLimit = walking->WeaponInactivePitchAimingLimit; walkingSave.RootMotionScale = walking->RootMotionScale; walkingSave.RootOffset = walking->RootOffset; walkingSave.SwanNeckEnableAtPitch = walking->SwanNeckEnableAtPitch; walkingSave.SwanNeckForward = walking->SwanNeckForward; walkingSave.SwanNeckDown = walking->SwanNeckDown; walkingSave.AnimBlendTime = walking->AnimBlendTime; walkingSave.StickyAngle = walking->StickyAngle; walkingSave.StickyAimedModifier = walking->StickyAimedModifier; walkingSave.Timer = walking->Timer; walkingSave.PawnPhysics = walking->PawnPhysics; walkingSave.HandPlantExtentCheckHeight = walking->HandPlantExtentCheckHeight; walkingSave.HandPlantExtentCheckWidth = walking->HandPlantExtentCheckWidth; walkingSave.HandPlantCheckDistance = walking->HandPlantCheckDistance; walkingSave.HandPlantCheckHeight = walking->HandPlantCheckHeight; walkingSave.ContextMoveDistanceMultiplier = walking->ContextMoveDistanceMultiplier; walkingSave.bCheckForGrab = walking->bCheckForGrab; walkingSave.bCheckForVaultOver = walking->bCheckForVaultOver; walkingSave.bCheckForWallClimb = walking->bCheckForWallClimb; walkingSave.bCheckForEdgeInVelDir = walking->bCheckForEdgeInVelDir; walkingSave.bCheckExitToFalling = walking->bCheckExitToFalling; walkingSave.bCheckExitToUncontrolledFalling = walking->bCheckExitToUncontrolledFalling; walkingSave.bCheckForSoftLanding = walking->bCheckForSoftLanding; walkingSave.bDelayTimeCheckAutoMoves = walking->bDelayTimeCheckAutoMoves; walkingSave.ExitToFallingZSpeed = walking->ExitToFallingZSpeed; walkingSave.SoftLandingZSpeedThreshold = walking->SoftLandingZSpeedThreshold; walkingSave.TimeToSoftLandingThreshold = walking->TimeToSoftLandingThreshold; walkingSave.bIsPlayingIdleAnim = walking->bIsPlayingIdleAnim; walkingSave.TriggerIdleAnimMinTime = walking->TriggerIdleAnimMinTime; walkingSave.TriggerIdleAnimMaxTime = walking->TriggerIdleAnimMaxTime;
	}

	auto falling = static_cast<Classes::UTdMove_Falling *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Falling)]);
	if (falling) {
		fallingSave.SpeedModifier = falling->SpeedModifier; fallingSave.FrictionModifier = falling->FrictionModifier; fallingSave.bDebugMove = falling->bDebugMove; fallingSave.bTriggersCompliment = falling->bTriggersCompliment; fallingSave.bDisableCollision = falling->bDisableCollision; fallingSave.bShouldHolsterWeapon = falling->bShouldHolsterWeapon; fallingSave.bShouldUnzoom = falling->bShouldUnzoom; fallingSave.bIsTimedMove = falling->bIsTimedMove; fallingSave.bConstrainLook = falling->bConstrainLook; fallingSave.bUseAbsoluteYawConstraint = falling->bUseAbsoluteYawConstraint; fallingSave.bDisableActorCollision = falling->bDisableActorCollision; fallingSave.bLookAtTargetLocation = falling->bLookAtTargetLocation; fallingSave.bLookAtTargetAngle = falling->bLookAtTargetAngle; fallingSave.bDisableFaceRotation = falling->bDisableFaceRotation; fallingSave.bDisableControllerFacingPawnYawRotation = falling->bDisableControllerFacingPawnYawRotation; fallingSave.bAvoidLedges = falling->bAvoidLedges; fallingSave.bUsePreciseLocation = falling->bUsePreciseLocation; fallingSave.bReachedPreciseLocation = falling->bReachedPreciseLocation; fallingSave.bDebugPreciseLocation = falling->bDebugPreciseLocation; fallingSave.bUsePreciseRotation = falling->bUsePreciseRotation; fallingSave.bReachedPreciseRotation = falling->bReachedPreciseRotation; fallingSave.bDelayRotationAndLocationCallback = falling->bDelayRotationAndLocationCallback; fallingSave.bResetCameraLook = falling->bResetCameraLook; fallingSave.bUseCustomCollision = falling->bUseCustomCollision; fallingSave.bUseCameraCollision = falling->bUseCameraCollision; fallingSave.bTwoHandedFullBodyAnimations = falling->bTwoHandedFullBodyAnimations; fallingSave.bStickyAim = falling->bStickyAim; fallingSave.bStopAfterMove = falling->bStopAfterMove; fallingSave.bEnableFootPlacement = falling->bEnableFootPlacement; fallingSave.bEnableAgainstWall = falling->bEnableAgainstWall; fallingSave.bAllowPickup = falling->bAllowPickup; fallingSave.AiAimPenalty = falling->AiAimPenalty; fallingSave.AiAimOneShotPenalty = falling->AiAimOneShotPenalty; fallingSave.MovementGroup = falling->MovementGroup; fallingSave.FirstPersonDPG = falling->FirstPersonDPG; fallingSave.FirstPersonLowerBodyDPG = falling->FirstPersonLowerBodyDPG; fallingSave.PreciseLocationInterpMode = falling->PreciseLocationInterpMode; fallingSave.AimMode = falling->AimMode; fallingSave.DisableMovementTime = falling->DisableMovementTime; fallingSave.DisableLookTime = falling->DisableLookTime; fallingSave.LastCanDoMoveTime = falling->LastCanDoMoveTime; fallingSave.LastStopMoveTime = falling->LastStopMoveTime; fallingSave.MoveActiveTime = falling->MoveActiveTime; fallingSave.RedoMoveTime = falling->RedoMoveTime; fallingSave.PreciseLocationSpeed = falling->PreciseLocationSpeed; fallingSave.PreciseLocation = falling->PreciseLocation; fallingSave.PreciseRotationInterpolationTime = falling->PreciseRotationInterpolationTime; fallingSave.PreciseRotation = falling->PreciseRotation; fallingSave.LookAtTargetLocation = falling->LookAtTargetLocation; fallingSave.LookAtTargetAngle = falling->LookAtTargetAngle; fallingSave.LookAtTargetInterpolationTime = falling->LookAtTargetInterpolationTime; fallingSave.LookAtTargetDuration = falling->LookAtTargetDuration; fallingSave.CancelResetCameraLookTime = falling->CancelResetCameraLookTime; fallingSave.ResetCameraLookTime = falling->ResetCameraLookTime; fallingSave.MinLookConstraint = falling->MinLookConstraint; fallingSave.MaxLookConstraint = falling->MaxLookConstraint; fallingSave.CustomCollisionRadius = falling->CustomCollisionRadius; fallingSave.CustomCollisionHeight = falling->CustomCollisionHeight; fallingSave.WeaponInactivePitchAimingLimit = falling->WeaponInactivePitchAimingLimit; fallingSave.RootMotionScale = falling->RootMotionScale; fallingSave.RootOffset = falling->RootOffset; fallingSave.SwanNeckEnableAtPitch = falling->SwanNeckEnableAtPitch; fallingSave.SwanNeckForward = falling->SwanNeckForward; fallingSave.SwanNeckDown = falling->SwanNeckDown; fallingSave.AnimBlendTime = falling->AnimBlendTime; fallingSave.StickyAngle = falling->StickyAngle; fallingSave.StickyAimedModifier = falling->StickyAimedModifier; fallingSave.Timer = falling->Timer; fallingSave.PawnPhysics = falling->PawnPhysics; fallingSave.HandPlantExtentCheckHeight = falling->HandPlantExtentCheckHeight; fallingSave.HandPlantExtentCheckWidth = falling->HandPlantExtentCheckWidth; fallingSave.HandPlantCheckDistance = falling->HandPlantCheckDistance; fallingSave.HandPlantCheckHeight = falling->HandPlantCheckHeight; fallingSave.ContextMoveDistanceMultiplier = falling->ContextMoveDistanceMultiplier; fallingSave.bCheckForGrab = falling->bCheckForGrab; fallingSave.bCheckForVaultOver = falling->bCheckForVaultOver; fallingSave.bCheckForWallClimb = falling->bCheckForWallClimb; fallingSave.bCheckForEdgeInVelDir = falling->bCheckForEdgeInVelDir; fallingSave.bCheckExitToFalling = falling->bCheckExitToFalling; fallingSave.bCheckExitToUncontrolledFalling = falling->bCheckExitToUncontrolledFalling; fallingSave.bCheckForSoftLanding = falling->bCheckForSoftLanding; fallingSave.bDelayTimeCheckAutoMoves = falling->bDelayTimeCheckAutoMoves; fallingSave.ExitToFallingZSpeed = falling->ExitToFallingZSpeed; fallingSave.SoftLandingZSpeedThreshold = falling->SoftLandingZSpeedThreshold; fallingSave.TimeToSoftLandingThreshold = falling->TimeToSoftLandingThreshold; fallingSave.StickyAimAfterAirTime = falling->StickyAimAfterAirTime; fallingSave.AirTime = falling->AirTime; fallingSave.bCloseToGround = falling->bCloseToGround; fallingSave.PreviousMove = falling->PreviousMove;
	}

	auto wallRunRight = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningRight)]);
	if (wallRunRight) {
		wallRunRightSave.SpeedModifier = wallRunRight->SpeedModifier; wallRunRightSave.FrictionModifier = wallRunRight->FrictionModifier; wallRunRightSave.bDebugMove = wallRunRight->bDebugMove; wallRunRightSave.bTriggersCompliment = wallRunRight->bTriggersCompliment; wallRunRightSave.bDisableCollision = wallRunRight->bDisableCollision; wallRunRightSave.bShouldHolsterWeapon = wallRunRight->bShouldHolsterWeapon; wallRunRightSave.bShouldUnzoom = wallRunRight->bShouldUnzoom; wallRunRightSave.bIsTimedMove = wallRunRight->bIsTimedMove; wallRunRightSave.bConstrainLook = wallRunRight->bConstrainLook; wallRunRightSave.bUseAbsoluteYawConstraint = wallRunRight->bUseAbsoluteYawConstraint; wallRunRightSave.bDisableActorCollision = wallRunRight->bDisableActorCollision; wallRunRightSave.bLookAtTargetLocation = wallRunRight->bLookAtTargetLocation; wallRunRightSave.bLookAtTargetAngle = wallRunRight->bLookAtTargetAngle; wallRunRightSave.bDisableFaceRotation = wallRunRight->bDisableFaceRotation; wallRunRightSave.bDisableControllerFacingPawnYawRotation = wallRunRight->bDisableControllerFacingPawnYawRotation; wallRunRightSave.bAvoidLedges = wallRunRight->bAvoidLedges; wallRunRightSave.bUsePreciseLocation = wallRunRight->bUsePreciseLocation; wallRunRightSave.bReachedPreciseLocation = wallRunRight->bReachedPreciseLocation; wallRunRightSave.bDebugPreciseLocation = wallRunRight->bDebugPreciseLocation; wallRunRightSave.bUsePreciseRotation = wallRunRight->bUsePreciseRotation; wallRunRightSave.bReachedPreciseRotation = wallRunRight->bReachedPreciseRotation; wallRunRightSave.bDelayRotationAndLocationCallback = wallRunRight->bDelayRotationAndLocationCallback; wallRunRightSave.bResetCameraLook = wallRunRight->bResetCameraLook; wallRunRightSave.bUseCustomCollision = wallRunRight->bUseCustomCollision; wallRunRightSave.bUseCameraCollision = wallRunRight->bUseCameraCollision; wallRunRightSave.bTwoHandedFullBodyAnimations = wallRunRight->bTwoHandedFullBodyAnimations; wallRunRightSave.bStickyAim = wallRunRight->bStickyAim; wallRunRightSave.bStopAfterMove = wallRunRight->bStopAfterMove; wallRunRightSave.bEnableFootPlacement = wallRunRight->bEnableFootPlacement; wallRunRightSave.bEnableAgainstWall = wallRunRight->bEnableAgainstWall; wallRunRightSave.bAllowPickup = wallRunRight->bAllowPickup; wallRunRightSave.AiAimPenalty = wallRunRight->AiAimPenalty; wallRunRightSave.AiAimOneShotPenalty = wallRunRight->AiAimOneShotPenalty; wallRunRightSave.MovementGroup = wallRunRight->MovementGroup; wallRunRightSave.FirstPersonDPG = wallRunRight->FirstPersonDPG; wallRunRightSave.FirstPersonLowerBodyDPG = wallRunRight->FirstPersonLowerBodyDPG; wallRunRightSave.PreciseLocationInterpMode = wallRunRight->PreciseLocationInterpMode; wallRunRightSave.AimMode = wallRunRight->AimMode; wallRunRightSave.DisableMovementTime = wallRunRight->DisableMovementTime; wallRunRightSave.DisableLookTime = wallRunRight->DisableLookTime; wallRunRightSave.LastCanDoMoveTime = wallRunRight->LastCanDoMoveTime; wallRunRightSave.LastStopMoveTime = wallRunRight->LastStopMoveTime; wallRunRightSave.MoveActiveTime = wallRunRight->MoveActiveTime; wallRunRightSave.RedoMoveTime = wallRunRight->RedoMoveTime; wallRunRightSave.PreciseLocationSpeed = wallRunRight->PreciseLocationSpeed; wallRunRightSave.PreciseLocation = wallRunRight->PreciseLocation; wallRunRightSave.PreciseRotationInterpolationTime = wallRunRight->PreciseRotationInterpolationTime; wallRunRightSave.PreciseRotation = wallRunRight->PreciseRotation; wallRunRightSave.LookAtTargetLocation = wallRunRight->LookAtTargetLocation; wallRunRightSave.LookAtTargetAngle = wallRunRight->LookAtTargetAngle; wallRunRightSave.LookAtTargetInterpolationTime = wallRunRight->LookAtTargetInterpolationTime; wallRunRightSave.LookAtTargetDuration = wallRunRight->LookAtTargetDuration; wallRunRightSave.CancelResetCameraLookTime = wallRunRight->CancelResetCameraLookTime; wallRunRightSave.ResetCameraLookTime = wallRunRight->ResetCameraLookTime; wallRunRightSave.MinLookConstraint = wallRunRight->MinLookConstraint; wallRunRightSave.MaxLookConstraint = wallRunRight->MaxLookConstraint; wallRunRightSave.CustomCollisionRadius = wallRunRight->CustomCollisionRadius; wallRunRightSave.CustomCollisionHeight = wallRunRight->CustomCollisionHeight; wallRunRightSave.WeaponInactivePitchAimingLimit = wallRunRight->WeaponInactivePitchAimingLimit; wallRunRightSave.RootMotionScale = wallRunRight->RootMotionScale; wallRunRightSave.RootOffset = wallRunRight->RootOffset; wallRunRightSave.SwanNeckEnableAtPitch = wallRunRight->SwanNeckEnableAtPitch; wallRunRightSave.SwanNeckForward = wallRunRight->SwanNeckForward; wallRunRightSave.SwanNeckDown = wallRunRight->SwanNeckDown; wallRunRightSave.AnimBlendTime = wallRunRight->AnimBlendTime; wallRunRightSave.StickyAngle = wallRunRight->StickyAngle; wallRunRightSave.StickyAimedModifier = wallRunRight->StickyAimedModifier; wallRunRightSave.Timer = wallRunRight->Timer; wallRunRightSave.PawnPhysics = wallRunRight->PawnPhysics; wallRunRightSave.HandPlantExtentCheckHeight = wallRunRight->HandPlantExtentCheckHeight; wallRunRightSave.HandPlantExtentCheckWidth = wallRunRight->HandPlantExtentCheckWidth; wallRunRightSave.HandPlantCheckDistance = wallRunRight->HandPlantCheckDistance; wallRunRightSave.HandPlantCheckHeight = wallRunRight->HandPlantCheckHeight; wallRunRightSave.ContextMoveDistanceMultiplier = wallRunRight->ContextMoveDistanceMultiplier; wallRunRightSave.bCheckForGrab = wallRunRight->bCheckForGrab; wallRunRightSave.bCheckForVaultOver = wallRunRight->bCheckForVaultOver; wallRunRightSave.bCheckForWallClimb = wallRunRight->bCheckForWallClimb; wallRunRightSave.bCheckForEdgeInVelDir = wallRunRight->bCheckForEdgeInVelDir; wallRunRightSave.bCheckExitToFalling = wallRunRight->bCheckExitToFalling; wallRunRightSave.bCheckExitToUncontrolledFalling = wallRunRight->bCheckExitToUncontrolledFalling; wallRunRightSave.bCheckForSoftLanding = wallRunRight->bCheckForSoftLanding; wallRunRightSave.bDelayTimeCheckAutoMoves = wallRunRight->bDelayTimeCheckAutoMoves; wallRunRightSave.ExitToFallingZSpeed = wallRunRight->ExitToFallingZSpeed; wallRunRightSave.SoftLandingZSpeedThreshold = wallRunRight->SoftLandingZSpeedThreshold; wallRunRightSave.TimeToSoftLandingThreshold = wallRunRight->TimeToSoftLandingThreshold; wallRunRightSave.WallRunningForwardCheckDistance = wallRunRight->WallRunningForwardCheckDistance; wallRunRightSave.WallRunningStrafeCheckDistance = wallRunRight->WallRunningStrafeCheckDistance; wallRunRightSave.WallRunningVerticalCheckDistance = wallRunRight->WallRunningVerticalCheckDistance; wallRunRightSave.WallRunningMinWallHeight = wallRunRight->WallRunningMinWallHeight; wallRunRightSave.WallRunningMinSpeed = wallRunRight->WallRunningMinSpeed; wallRunRightSave.WallRunningVelocityStartLimit = wallRunRight->WallRunningVelocityStartLimit; wallRunRightSave.WallRunningVelocityStopLimit = wallRunRight->WallRunningVelocityStopLimit; wallRunRightSave.WallRunningForwardMinStartAngle = wallRunRight->WallRunningForwardMinStartAngle; wallRunRightSave.WallRunningForwardMaxStartAngle = wallRunRight->WallRunningForwardMaxStartAngle; wallRunRightSave.WallRunningStrafeStartAngle = wallRunRight->WallRunningStrafeStartAngle; wallRunRightSave.WallRunningHorisontalFriction = wallRunRight->WallRunningHorisontalFriction; wallRunRightSave.WallRunningHorisontalInitialZHeight = wallRunRight->WallRunningHorisontalInitialZHeight; wallRunRightSave.WallRunningHorisontalAcceleration = wallRunRight->WallRunningHorisontalAcceleration; wallRunRightSave.WallRunningHorisontalDeceleration = wallRunRight->WallRunningHorisontalDeceleration; wallRunRightSave.WallRunningHorisontalAlignSpeed = wallRunRight->WallRunningHorisontalAlignSpeed; wallRunRightSave.WallRunningIntoWallrunBlendInTime = wallRunRight->WallRunningIntoWallrunBlendInTime; wallRunRightSave.WallRunningIntoWallrunBlendOutTime = wallRunRight->WallRunningIntoWallrunBlendOutTime; wallRunRightSave.PlayCameraHitWallEffect = wallRunRight->PlayCameraHitWallEffect; wallRunRightSave.bHasReachedWall = wallRunRight->bHasReachedWall; wallRunRightSave.bStartMovingIntoWall = wallRunRight->bStartMovingIntoWall; wallRunRightSave.bTurned90FromWall = wallRunRight->bTurned90FromWall; wallRunRightSave.bChangedConstraints = wallRunRight->bChangedConstraints; wallRunRightSave.WallRunningDelayPawnRotationTime = wallRunRight->WallRunningDelayPawnRotationTime; wallRunRightSave.WallRunningDistanceForIntoWall = wallRunRight->WallRunningDistanceForIntoWall; wallRunRightSave.WallRunningRotatePawnAlongWallTime = wallRunRight->WallRunningRotatePawnAlongWallTime; wallRunRightSave.WallRunningMoveToIntoPositionDegreeThreshold = wallRunRight->WallRunningMoveToIntoPositionDegreeThreshold; wallRunRightSave.MinimumVelocityIntoWall = wallRunRight->MinimumVelocityIntoWall; wallRunRightSave.MaximumVelocityIntoWall = wallRunRight->MaximumVelocityIntoWall; wallRunRightSave.WallrunStartUpperBodyAnimPlayRate = wallRunRight->WallrunStartUpperBodyAnimPlayRate; wallRunRightSave.LookAlongWallInterpolationTime = wallRunRight->LookAlongWallInterpolationTime; wallRunRightSave.WallRunningBeginSpeed = wallRunRight->WallRunningBeginSpeed; wallRunRightSave.NextMove = wallRunRight->NextMove; wallRunRightSave.WallNormal = wallRunRight->WallNormal; wallRunRightSave.PredictedWallHitLocation = wallRunRight->PredictedWallHitLocation; wallRunRightSave.IntoWallrunLocationTarget = wallRunRight->IntoWallrunLocationTarget; wallRunRightSave.ConsequtiveWallruns = wallRunRight->ConsequtiveWallruns; wallRunRightSave.MinContraintWorld = wallRunRight->MinContraintWorld; wallRunRightSave.MaxContraintWorld = wallRunRight->MaxContraintWorld;
	}

	auto wallRunLeft = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningLeft)]);
	if (wallRunLeft) {
		wallRunLeftSave.SpeedModifier = wallRunLeft->SpeedModifier; wallRunLeftSave.FrictionModifier = wallRunLeft->FrictionModifier; wallRunLeftSave.bDebugMove = wallRunLeft->bDebugMove; wallRunLeftSave.bTriggersCompliment = wallRunLeft->bTriggersCompliment; wallRunLeftSave.bDisableCollision = wallRunLeft->bDisableCollision; wallRunLeftSave.bShouldHolsterWeapon = wallRunLeft->bShouldHolsterWeapon; wallRunLeftSave.bShouldUnzoom = wallRunLeft->bShouldUnzoom; wallRunLeftSave.bIsTimedMove = wallRunLeft->bIsTimedMove; wallRunLeftSave.bConstrainLook = wallRunLeft->bConstrainLook; wallRunLeftSave.bUseAbsoluteYawConstraint = wallRunLeft->bUseAbsoluteYawConstraint; wallRunLeftSave.bDisableActorCollision = wallRunLeft->bDisableActorCollision; wallRunLeftSave.bLookAtTargetLocation = wallRunLeft->bLookAtTargetLocation; wallRunLeftSave.bLookAtTargetAngle = wallRunLeft->bLookAtTargetAngle; wallRunLeftSave.bDisableFaceRotation = wallRunLeft->bDisableFaceRotation; wallRunLeftSave.bDisableControllerFacingPawnYawRotation = wallRunLeft->bDisableControllerFacingPawnYawRotation; wallRunLeftSave.bAvoidLedges = wallRunLeft->bAvoidLedges; wallRunLeftSave.bUsePreciseLocation = wallRunLeft->bUsePreciseLocation; wallRunLeftSave.bReachedPreciseLocation = wallRunLeft->bReachedPreciseLocation; wallRunLeftSave.bDebugPreciseLocation = wallRunLeft->bDebugPreciseLocation; wallRunLeftSave.bUsePreciseRotation = wallRunLeft->bUsePreciseRotation; wallRunLeftSave.bReachedPreciseRotation = wallRunLeft->bReachedPreciseRotation; wallRunLeftSave.bDelayRotationAndLocationCallback = wallRunLeft->bDelayRotationAndLocationCallback; wallRunLeftSave.bResetCameraLook = wallRunLeft->bResetCameraLook; wallRunLeftSave.bUseCustomCollision = wallRunLeft->bUseCustomCollision; wallRunLeftSave.bUseCameraCollision = wallRunLeft->bUseCameraCollision; wallRunLeftSave.bTwoHandedFullBodyAnimations = wallRunLeft->bTwoHandedFullBodyAnimations; wallRunLeftSave.bStickyAim = wallRunLeft->bStickyAim; wallRunLeftSave.bStopAfterMove = wallRunLeft->bStopAfterMove; wallRunLeftSave.bEnableFootPlacement = wallRunLeft->bEnableFootPlacement; wallRunLeftSave.bEnableAgainstWall = wallRunLeft->bEnableAgainstWall; wallRunLeftSave.bAllowPickup = wallRunLeft->bAllowPickup; wallRunLeftSave.AiAimPenalty = wallRunLeft->AiAimPenalty; wallRunLeftSave.AiAimOneShotPenalty = wallRunLeft->AiAimOneShotPenalty; wallRunLeftSave.MovementGroup = wallRunLeft->MovementGroup; wallRunLeftSave.FirstPersonDPG = wallRunLeft->FirstPersonDPG; wallRunLeftSave.FirstPersonLowerBodyDPG = wallRunLeft->FirstPersonLowerBodyDPG; wallRunLeftSave.PreciseLocationInterpMode = wallRunLeft->PreciseLocationInterpMode; wallRunLeftSave.AimMode = wallRunLeft->AimMode; wallRunLeftSave.DisableMovementTime = wallRunLeft->DisableMovementTime; wallRunLeftSave.DisableLookTime = wallRunLeft->DisableLookTime; wallRunLeftSave.LastCanDoMoveTime = wallRunLeft->LastCanDoMoveTime; wallRunLeftSave.LastStopMoveTime = wallRunLeft->LastStopMoveTime; wallRunLeftSave.MoveActiveTime = wallRunLeft->MoveActiveTime; wallRunLeftSave.RedoMoveTime = wallRunLeft->RedoMoveTime; wallRunLeftSave.PreciseLocationSpeed = wallRunLeft->PreciseLocationSpeed; wallRunLeftSave.PreciseLocation = wallRunLeft->PreciseLocation; wallRunLeftSave.PreciseRotationInterpolationTime = wallRunLeft->PreciseRotationInterpolationTime; wallRunLeftSave.PreciseRotation = wallRunLeft->PreciseRotation; wallRunLeftSave.LookAtTargetLocation = wallRunLeft->LookAtTargetLocation; wallRunLeftSave.LookAtTargetAngle = wallRunLeft->LookAtTargetAngle; wallRunLeftSave.LookAtTargetInterpolationTime = wallRunLeft->LookAtTargetInterpolationTime; wallRunLeftSave.LookAtTargetDuration = wallRunLeft->LookAtTargetDuration; wallRunLeftSave.CancelResetCameraLookTime = wallRunLeft->CancelResetCameraLookTime; wallRunLeftSave.ResetCameraLookTime = wallRunLeft->ResetCameraLookTime; wallRunLeftSave.MinLookConstraint = wallRunLeft->MinLookConstraint; wallRunLeftSave.MaxLookConstraint = wallRunLeft->MaxLookConstraint; wallRunLeftSave.CustomCollisionRadius = wallRunLeft->CustomCollisionRadius; wallRunLeftSave.CustomCollisionHeight = wallRunLeft->CustomCollisionHeight; wallRunLeftSave.WeaponInactivePitchAimingLimit = wallRunLeft->WeaponInactivePitchAimingLimit; wallRunLeftSave.RootMotionScale = wallRunLeft->RootMotionScale; wallRunLeftSave.RootOffset = wallRunLeft->RootOffset; wallRunLeftSave.SwanNeckEnableAtPitch = wallRunLeft->SwanNeckEnableAtPitch; wallRunLeftSave.SwanNeckForward = wallRunLeft->SwanNeckForward; wallRunLeftSave.SwanNeckDown = wallRunLeft->SwanNeckDown; wallRunLeftSave.AnimBlendTime = wallRunLeft->AnimBlendTime; wallRunLeftSave.StickyAngle = wallRunLeft->StickyAngle; wallRunLeftSave.StickyAimedModifier = wallRunLeft->StickyAimedModifier; wallRunLeftSave.Timer = wallRunLeft->Timer; wallRunLeftSave.PawnPhysics = wallRunLeft->PawnPhysics; wallRunLeftSave.HandPlantExtentCheckHeight = wallRunLeft->HandPlantExtentCheckHeight; wallRunLeftSave.HandPlantExtentCheckWidth = wallRunLeft->HandPlantExtentCheckWidth; wallRunLeftSave.HandPlantCheckDistance = wallRunLeft->HandPlantCheckDistance; wallRunLeftSave.HandPlantCheckHeight = wallRunLeft->HandPlantCheckHeight; wallRunLeftSave.ContextMoveDistanceMultiplier = wallRunLeft->ContextMoveDistanceMultiplier; wallRunLeftSave.bCheckForGrab = wallRunLeft->bCheckForGrab; wallRunLeftSave.bCheckForVaultOver = wallRunLeft->bCheckForVaultOver; wallRunLeftSave.bCheckForWallClimb = wallRunLeft->bCheckForWallClimb; wallRunLeftSave.bCheckForEdgeInVelDir = wallRunLeft->bCheckForEdgeInVelDir; wallRunLeftSave.bCheckExitToFalling = wallRunLeft->bCheckExitToFalling; wallRunLeftSave.bCheckExitToUncontrolledFalling = wallRunLeft->bCheckExitToUncontrolledFalling; wallRunLeftSave.bCheckForSoftLanding = wallRunLeft->bCheckForSoftLanding; wallRunLeftSave.bDelayTimeCheckAutoMoves = wallRunLeft->bDelayTimeCheckAutoMoves; wallRunLeftSave.ExitToFallingZSpeed = wallRunLeft->ExitToFallingZSpeed; wallRunLeftSave.SoftLandingZSpeedThreshold = wallRunLeft->SoftLandingZSpeedThreshold; wallRunLeftSave.TimeToSoftLandingThreshold = wallRunLeft->TimeToSoftLandingThreshold; wallRunLeftSave.WallRunningForwardCheckDistance = wallRunLeft->WallRunningForwardCheckDistance; wallRunLeftSave.WallRunningStrafeCheckDistance = wallRunLeft->WallRunningStrafeCheckDistance; wallRunLeftSave.WallRunningVerticalCheckDistance = wallRunLeft->WallRunningVerticalCheckDistance; wallRunLeftSave.WallRunningMinWallHeight = wallRunLeft->WallRunningMinWallHeight; wallRunLeftSave.WallRunningMinSpeed = wallRunLeft->WallRunningMinSpeed; wallRunLeftSave.WallRunningVelocityStartLimit = wallRunLeft->WallRunningVelocityStartLimit; wallRunLeftSave.WallRunningVelocityStopLimit = wallRunLeft->WallRunningVelocityStopLimit; wallRunLeftSave.WallRunningForwardMinStartAngle = wallRunLeft->WallRunningForwardMinStartAngle; wallRunLeftSave.WallRunningForwardMaxStartAngle = wallRunLeft->WallRunningForwardMaxStartAngle; wallRunLeftSave.WallRunningStrafeStartAngle = wallRunLeft->WallRunningStrafeStartAngle; wallRunLeftSave.WallRunningHorisontalFriction = wallRunLeft->WallRunningHorisontalFriction; wallRunLeftSave.WallRunningHorisontalInitialZHeight = wallRunLeft->WallRunningHorisontalInitialZHeight; wallRunLeftSave.WallRunningHorisontalAcceleration = wallRunLeft->WallRunningHorisontalAcceleration; wallRunLeftSave.WallRunningHorisontalDeceleration = wallRunLeft->WallRunningHorisontalDeceleration; wallRunLeftSave.WallRunningHorisontalAlignSpeed = wallRunLeft->WallRunningHorisontalAlignSpeed; wallRunLeftSave.WallRunningIntoWallrunBlendInTime = wallRunLeft->WallRunningIntoWallrunBlendInTime; wallRunLeftSave.WallRunningIntoWallrunBlendOutTime = wallRunLeft->WallRunningIntoWallrunBlendOutTime; wallRunLeftSave.PlayCameraHitWallEffect = wallRunLeft->PlayCameraHitWallEffect; wallRunLeftSave.bHasReachedWall = wallRunLeft->bHasReachedWall; wallRunLeftSave.bStartMovingIntoWall = wallRunLeft->bStartMovingIntoWall; wallRunLeftSave.bTurned90FromWall = wallRunLeft->bTurned90FromWall; wallRunLeftSave.bChangedConstraints = wallRunLeft->bChangedConstraints; wallRunLeftSave.WallRunningDelayPawnRotationTime = wallRunLeft->WallRunningDelayPawnRotationTime; wallRunLeftSave.WallRunningDistanceForIntoWall = wallRunLeft->WallRunningDistanceForIntoWall; wallRunLeftSave.WallRunningRotatePawnAlongWallTime = wallRunLeft->WallRunningRotatePawnAlongWallTime; wallRunLeftSave.WallRunningMoveToIntoPositionDegreeThreshold = wallRunLeft->WallRunningMoveToIntoPositionDegreeThreshold; wallRunLeftSave.MinimumVelocityIntoWall = wallRunLeft->MinimumVelocityIntoWall; wallRunLeftSave.MaximumVelocityIntoWall = wallRunLeft->MaximumVelocityIntoWall; wallRunLeftSave.WallrunStartUpperBodyAnimPlayRate = wallRunLeft->WallrunStartUpperBodyAnimPlayRate; wallRunLeftSave.LookAlongWallInterpolationTime = wallRunLeft->LookAlongWallInterpolationTime; wallRunLeftSave.WallRunningBeginSpeed = wallRunLeft->WallRunningBeginSpeed; wallRunLeftSave.NextMove = wallRunLeft->NextMove; wallRunLeftSave.WallNormal = wallRunLeft->WallNormal; wallRunLeftSave.PredictedWallHitLocation = wallRunLeft->PredictedWallHitLocation; wallRunLeftSave.IntoWallrunLocationTarget = wallRunLeft->IntoWallrunLocationTarget; wallRunLeftSave.ConsequtiveWallruns = wallRunLeft->ConsequtiveWallruns; wallRunLeftSave.MinContraintWorld = wallRunLeft->MinContraintWorld; wallRunLeftSave.MaxContraintWorld = wallRunLeft->MaxContraintWorld;
	}

	auto jump = static_cast<Classes::UTdMove_Jump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Jump)]);
	if (jump) {
		jumpSave.SpeedModifier = jump->SpeedModifier; jumpSave.FrictionModifier = jump->FrictionModifier; jumpSave.bDebugMove = jump->bDebugMove; jumpSave.bTriggersCompliment = jump->bTriggersCompliment; jumpSave.bDisableCollision = jump->bDisableCollision; jumpSave.bShouldHolsterWeapon = jump->bShouldHolsterWeapon; jumpSave.bShouldUnzoom = jump->bShouldUnzoom; jumpSave.bIsTimedMove = jump->bIsTimedMove; jumpSave.bConstrainLook = jump->bConstrainLook; jumpSave.bUseAbsoluteYawConstraint = jump->bUseAbsoluteYawConstraint; jumpSave.bDisableActorCollision = jump->bDisableActorCollision; jumpSave.bLookAtTargetLocation = jump->bLookAtTargetLocation; jumpSave.bLookAtTargetAngle = jump->bLookAtTargetAngle; jumpSave.bDisableFaceRotation = jump->bDisableFaceRotation; jumpSave.bDisableControllerFacingPawnYawRotation = jump->bDisableControllerFacingPawnYawRotation; jumpSave.bAvoidLedges = jump->bAvoidLedges; jumpSave.bUsePreciseLocation = jump->bUsePreciseLocation; jumpSave.bReachedPreciseLocation = jump->bReachedPreciseLocation; jumpSave.bDebugPreciseLocation = jump->bDebugPreciseLocation; jumpSave.bUsePreciseRotation = jump->bUsePreciseRotation; jumpSave.bReachedPreciseRotation = jump->bReachedPreciseRotation; jumpSave.bDelayRotationAndLocationCallback = jump->bDelayRotationAndLocationCallback; jumpSave.bResetCameraLook = jump->bResetCameraLook; jumpSave.bUseCustomCollision = jump->bUseCustomCollision; jumpSave.bUseCameraCollision = jump->bUseCameraCollision; jumpSave.bTwoHandedFullBodyAnimations = jump->bTwoHandedFullBodyAnimations; jumpSave.bStickyAim = jump->bStickyAim; jumpSave.bStopAfterMove = jump->bStopAfterMove; jumpSave.bEnableFootPlacement = jump->bEnableFootPlacement; jumpSave.bEnableAgainstWall = jump->bEnableAgainstWall; jumpSave.bAllowPickup = jump->bAllowPickup; jumpSave.AiAimPenalty = jump->AiAimPenalty; jumpSave.AiAimOneShotPenalty = jump->AiAimOneShotPenalty; jumpSave.MovementGroup = jump->MovementGroup; jumpSave.FirstPersonDPG = jump->FirstPersonDPG; jumpSave.FirstPersonLowerBodyDPG = jump->FirstPersonLowerBodyDPG; jumpSave.PreciseLocationInterpMode = jump->PreciseLocationInterpMode; jumpSave.AimMode = jump->AimMode; jumpSave.DisableMovementTime = jump->DisableMovementTime; jumpSave.DisableLookTime = jump->DisableLookTime; jumpSave.LastCanDoMoveTime = jump->LastCanDoMoveTime; jumpSave.LastStopMoveTime = jump->LastStopMoveTime; jumpSave.MoveActiveTime = jump->MoveActiveTime; jumpSave.RedoMoveTime = jump->RedoMoveTime; jumpSave.PreciseLocationSpeed = jump->PreciseLocationSpeed; jumpSave.PreciseLocation = jump->PreciseLocation; jumpSave.PreciseRotationInterpolationTime = jump->PreciseRotationInterpolationTime; jumpSave.PreciseRotation = jump->PreciseRotation; jumpSave.LookAtTargetLocation = jump->LookAtTargetLocation; jumpSave.LookAtTargetAngle = jump->LookAtTargetAngle; jumpSave.LookAtTargetInterpolationTime = jump->LookAtTargetInterpolationTime; jumpSave.LookAtTargetDuration = jump->LookAtTargetDuration; jumpSave.CancelResetCameraLookTime = jump->CancelResetCameraLookTime; jumpSave.ResetCameraLookTime = jump->ResetCameraLookTime; jumpSave.MinLookConstraint = jump->MinLookConstraint; jumpSave.MaxLookConstraint = jump->MaxLookConstraint; jumpSave.CustomCollisionRadius = jump->CustomCollisionRadius; jumpSave.CustomCollisionHeight = jump->CustomCollisionHeight; jumpSave.WeaponInactivePitchAimingLimit = jump->WeaponInactivePitchAimingLimit; jumpSave.RootMotionScale = jump->RootMotionScale; jumpSave.RootOffset = jump->RootOffset; jumpSave.SwanNeckEnableAtPitch = jump->SwanNeckEnableAtPitch; jumpSave.SwanNeckForward = jump->SwanNeckForward; jumpSave.SwanNeckDown = jump->SwanNeckDown; jumpSave.AnimBlendTime = jump->AnimBlendTime; jumpSave.StickyAngle = jump->StickyAngle; jumpSave.StickyAimedModifier = jump->StickyAimedModifier; jumpSave.Timer = jump->Timer; jumpSave.PawnPhysics = jump->PawnPhysics; jumpSave.HandPlantExtentCheckHeight = jump->HandPlantExtentCheckHeight; jumpSave.HandPlantExtentCheckWidth = jump->HandPlantExtentCheckWidth; jumpSave.HandPlantCheckDistance = jump->HandPlantCheckDistance; jumpSave.HandPlantCheckHeight = jump->HandPlantCheckHeight; jumpSave.ContextMoveDistanceMultiplier = jump->ContextMoveDistanceMultiplier; jumpSave.bCheckForGrab = jump->bCheckForGrab; jumpSave.bCheckForVaultOver = jump->bCheckForVaultOver; jumpSave.bCheckForWallClimb = jump->bCheckForWallClimb; jumpSave.bCheckForEdgeInVelDir = jump->bCheckForEdgeInVelDir; jumpSave.bCheckExitToFalling = jump->bCheckExitToFalling; jumpSave.bCheckExitToUncontrolledFalling = jump->bCheckExitToUncontrolledFalling; jumpSave.bCheckForSoftLanding = jump->bCheckForSoftLanding; jumpSave.bDelayTimeCheckAutoMoves = jump->bDelayTimeCheckAutoMoves; jumpSave.ExitToFallingZSpeed = jump->ExitToFallingZSpeed; jumpSave.SoftLandingZSpeedThreshold = jump->SoftLandingZSpeedThreshold; jumpSave.TimeToSoftLandingThreshold = jump->TimeToSoftLandingThreshold; jumpSave.BaseJumpZ = jump->BaseJumpZ; jumpSave.BaseJumpZHeavy = jump->BaseJumpZHeavy; jumpSave.JumpAddXY = jump->JumpAddXY; jumpSave.LongJumpSlowThreshold = jump->LongJumpSlowThreshold; jumpSave.LongJumpNormalThreshold = jump->LongJumpNormalThreshold; jumpSave.LongJumpFastThreshold = jump->LongJumpFastThreshold; jumpSave.JumpBlendInTime = jump->JumpBlendInTime; jumpSave.JumpBlendOutTime = jump->JumpBlendOutTime; jumpSave.JumpStillBlendOutTime = jump->JumpStillBlendOutTime; jumpSave.PreJumpMomentum = jump->PreJumpMomentum; jumpSave.WantedJumpVelocity = jump->WantedJumpVelocity; jumpSave.CanDoMoveTaserLimit = jump->CanDoMoveTaserLimit;
	}

	auto fallingUncontrolled = static_cast<Classes::UTdMove_FallingUncontrolled *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_FallingUncontrolled)]);
	if (fallingUncontrolled) {
		fallingUncontrolledSave.SpeedModifier = fallingUncontrolled->SpeedModifier; fallingUncontrolledSave.FrictionModifier = fallingUncontrolled->FrictionModifier; fallingUncontrolledSave.bDebugMove = fallingUncontrolled->bDebugMove; fallingUncontrolledSave.bTriggersCompliment = fallingUncontrolled->bTriggersCompliment; fallingUncontrolledSave.bDisableCollision = fallingUncontrolled->bDisableCollision; fallingUncontrolledSave.bShouldHolsterWeapon = fallingUncontrolled->bShouldHolsterWeapon; fallingUncontrolledSave.bShouldUnzoom = fallingUncontrolled->bShouldUnzoom; fallingUncontrolledSave.bIsTimedMove = fallingUncontrolled->bIsTimedMove; fallingUncontrolledSave.bConstrainLook = fallingUncontrolled->bConstrainLook; fallingUncontrolledSave.bUseAbsoluteYawConstraint = fallingUncontrolled->bUseAbsoluteYawConstraint; fallingUncontrolledSave.bDisableActorCollision = fallingUncontrolled->bDisableActorCollision; fallingUncontrolledSave.bLookAtTargetLocation = fallingUncontrolled->bLookAtTargetLocation; fallingUncontrolledSave.bLookAtTargetAngle = fallingUncontrolled->bLookAtTargetAngle; fallingUncontrolledSave.bDisableFaceRotation = fallingUncontrolled->bDisableFaceRotation; fallingUncontrolledSave.bDisableControllerFacingPawnYawRotation = fallingUncontrolled->bDisableControllerFacingPawnYawRotation; fallingUncontrolledSave.bAvoidLedges = fallingUncontrolled->bAvoidLedges; fallingUncontrolledSave.bUsePreciseLocation = fallingUncontrolled->bUsePreciseLocation; fallingUncontrolledSave.bReachedPreciseLocation = fallingUncontrolled->bReachedPreciseLocation; fallingUncontrolledSave.bDebugPreciseLocation = fallingUncontrolled->bDebugPreciseLocation; fallingUncontrolledSave.bUsePreciseRotation = fallingUncontrolled->bUsePreciseRotation; fallingUncontrolledSave.bReachedPreciseRotation = fallingUncontrolled->bReachedPreciseRotation; fallingUncontrolledSave.bDelayRotationAndLocationCallback = fallingUncontrolled->bDelayRotationAndLocationCallback; fallingUncontrolledSave.bResetCameraLook = fallingUncontrolled->bResetCameraLook; fallingUncontrolledSave.bUseCustomCollision = fallingUncontrolled->bUseCustomCollision; fallingUncontrolledSave.bUseCameraCollision = fallingUncontrolled->bUseCameraCollision; fallingUncontrolledSave.bTwoHandedFullBodyAnimations = fallingUncontrolled->bTwoHandedFullBodyAnimations; fallingUncontrolledSave.bStickyAim = fallingUncontrolled->bStickyAim; fallingUncontrolledSave.bStopAfterMove = fallingUncontrolled->bStopAfterMove; fallingUncontrolledSave.bEnableFootPlacement = fallingUncontrolled->bEnableFootPlacement; fallingUncontrolledSave.bEnableAgainstWall = fallingUncontrolled->bEnableAgainstWall; fallingUncontrolledSave.bAllowPickup = fallingUncontrolled->bAllowPickup; fallingUncontrolledSave.AiAimPenalty = fallingUncontrolled->AiAimPenalty; fallingUncontrolledSave.AiAimOneShotPenalty = fallingUncontrolled->AiAimOneShotPenalty; fallingUncontrolledSave.MovementGroup = fallingUncontrolled->MovementGroup; fallingUncontrolledSave.FirstPersonDPG = fallingUncontrolled->FirstPersonDPG; fallingUncontrolledSave.FirstPersonLowerBodyDPG = fallingUncontrolled->FirstPersonLowerBodyDPG; fallingUncontrolledSave.PreciseLocationInterpMode = fallingUncontrolled->PreciseLocationInterpMode; fallingUncontrolledSave.AimMode = fallingUncontrolled->AimMode; fallingUncontrolledSave.DisableMovementTime = fallingUncontrolled->DisableMovementTime; fallingUncontrolledSave.DisableLookTime = fallingUncontrolled->DisableLookTime; fallingUncontrolledSave.LastCanDoMoveTime = fallingUncontrolled->LastCanDoMoveTime; fallingUncontrolledSave.LastStopMoveTime = fallingUncontrolled->LastStopMoveTime; fallingUncontrolledSave.MoveActiveTime = fallingUncontrolled->MoveActiveTime; fallingUncontrolledSave.RedoMoveTime = fallingUncontrolled->RedoMoveTime; fallingUncontrolledSave.PreciseLocationSpeed = fallingUncontrolled->PreciseLocationSpeed; fallingUncontrolledSave.PreciseLocation = fallingUncontrolled->PreciseLocation; fallingUncontrolledSave.PreciseRotationInterpolationTime = fallingUncontrolled->PreciseRotationInterpolationTime; fallingUncontrolledSave.PreciseRotation = fallingUncontrolled->PreciseRotation; fallingUncontrolledSave.LookAtTargetLocation = fallingUncontrolled->LookAtTargetLocation; fallingUncontrolledSave.LookAtTargetAngle = fallingUncontrolled->LookAtTargetAngle; fallingUncontrolledSave.LookAtTargetInterpolationTime = fallingUncontrolled->LookAtTargetInterpolationTime; fallingUncontrolledSave.LookAtTargetDuration = fallingUncontrolled->LookAtTargetDuration; fallingUncontrolledSave.CancelResetCameraLookTime = fallingUncontrolled->CancelResetCameraLookTime; fallingUncontrolledSave.ResetCameraLookTime = fallingUncontrolled->ResetCameraLookTime; fallingUncontrolledSave.MinLookConstraint = fallingUncontrolled->MinLookConstraint; fallingUncontrolledSave.MaxLookConstraint = fallingUncontrolled->MaxLookConstraint; fallingUncontrolledSave.CustomCollisionRadius = fallingUncontrolled->CustomCollisionRadius; fallingUncontrolledSave.CustomCollisionHeight = fallingUncontrolled->CustomCollisionHeight; fallingUncontrolledSave.WeaponInactivePitchAimingLimit = fallingUncontrolled->WeaponInactivePitchAimingLimit; fallingUncontrolledSave.RootMotionScale = fallingUncontrolled->RootMotionScale; fallingUncontrolledSave.RootOffset = fallingUncontrolled->RootOffset; fallingUncontrolledSave.SwanNeckEnableAtPitch = fallingUncontrolled->SwanNeckEnableAtPitch; fallingUncontrolledSave.SwanNeckForward = fallingUncontrolled->SwanNeckForward; fallingUncontrolledSave.SwanNeckDown = fallingUncontrolled->SwanNeckDown; fallingUncontrolledSave.AnimBlendTime = fallingUncontrolled->AnimBlendTime; fallingUncontrolledSave.StickyAngle = fallingUncontrolled->StickyAngle; fallingUncontrolledSave.StickyAimedModifier = fallingUncontrolled->StickyAimedModifier; fallingUncontrolledSave.Timer = fallingUncontrolled->Timer; fallingUncontrolledSave.PawnPhysics = fallingUncontrolled->PawnPhysics; fallingUncontrolledSave.HandPlantExtentCheckHeight = fallingUncontrolled->HandPlantExtentCheckHeight; fallingUncontrolledSave.HandPlantExtentCheckWidth = fallingUncontrolled->HandPlantExtentCheckWidth; fallingUncontrolledSave.HandPlantCheckDistance = fallingUncontrolled->HandPlantCheckDistance; fallingUncontrolledSave.HandPlantCheckHeight = fallingUncontrolled->HandPlantCheckHeight; fallingUncontrolledSave.ContextMoveDistanceMultiplier = fallingUncontrolled->ContextMoveDistanceMultiplier; fallingUncontrolledSave.bCheckForGrab = fallingUncontrolled->bCheckForGrab; fallingUncontrolledSave.bCheckForVaultOver = fallingUncontrolled->bCheckForVaultOver; fallingUncontrolledSave.bCheckForWallClimb = fallingUncontrolled->bCheckForWallClimb; fallingUncontrolledSave.bCheckForEdgeInVelDir = fallingUncontrolled->bCheckForEdgeInVelDir; fallingUncontrolledSave.bCheckExitToFalling = fallingUncontrolled->bCheckExitToFalling; fallingUncontrolledSave.bCheckExitToUncontrolledFalling = fallingUncontrolled->bCheckExitToUncontrolledFalling; fallingUncontrolledSave.bCheckForSoftLanding = fallingUncontrolled->bCheckForSoftLanding; fallingUncontrolledSave.bDelayTimeCheckAutoMoves = fallingUncontrolled->bDelayTimeCheckAutoMoves; fallingUncontrolledSave.ExitToFallingZSpeed = fallingUncontrolled->ExitToFallingZSpeed; fallingUncontrolledSave.SoftLandingZSpeedThreshold = fallingUncontrolled->SoftLandingZSpeedThreshold; fallingUncontrolledSave.TimeToSoftLandingThreshold = fallingUncontrolled->TimeToSoftLandingThreshold;
	}
}

static void Load(Classes::ATdPlayerPawn *pawn, Classes::ATdPlayerController *controller) {
	pawn->StopAllCustomAnimations(0.0f);
	pawn->SetMove(pawnSave.MovementState, false, false);

	pawn->bExludeHandMoves = pawnSave.bExludeHandMoves; pawn->bExludeFootMoves = pawnSave.bExludeFootMoves; pawn->bPhysXMutatable = pawnSave.bPhysXMutatable; pawn->bStatic = pawnSave.bStatic; pawn->bHidden = pawnSave.bHidden; pawn->bNoDelete = pawnSave.bNoDelete; pawn->bDeleteMe = pawnSave.bDeleteMe; pawn->bTicked = pawnSave.bTicked; pawn->bOnlyOwnerSee = pawnSave.bOnlyOwnerSee; pawn->bStasis = pawnSave.bStasis; pawn->bWorldGeometry = pawnSave.bWorldGeometry; pawn->bIgnoreRigidBodyPawns = pawnSave.bIgnoreRigidBodyPawns; pawn->bOrientOnSlope = pawnSave.bOrientOnSlope; pawn->bIgnoreEncroachers = pawnSave.bIgnoreEncroachers; pawn->bPushedByEncroachers = pawnSave.bPushedByEncroachers; pawn->bDestroyedByInterpActor = pawnSave.bDestroyedByInterpActor; pawn->bRouteBeginPlayEvenIfStatic = pawnSave.bRouteBeginPlayEvenIfStatic; pawn->bIsMoving = pawnSave.bIsMoving; pawn->bAlwaysEncroachCheck = pawnSave.bAlwaysEncroachCheck; pawn->bHasAlternateTargetLocation = pawnSave.bHasAlternateTargetLocation; pawn->bNetTemporary = pawnSave.bNetTemporary; pawn->bOnlyRelevantToOwner = pawnSave.bOnlyRelevantToOwner; pawn->bNetDirty = pawnSave.bNetDirty; pawn->bAlwaysRelevant = pawnSave.bAlwaysRelevant; pawn->bReplicateInstigator = pawnSave.bReplicateInstigator; pawn->bReplicateMovement = pawnSave.bReplicateMovement; pawn->bSkipActorPropertyReplication = pawnSave.bSkipActorPropertyReplication; pawn->bUpdateSimulatedPosition = pawnSave.bUpdateSimulatedPosition; pawn->bTearOff = pawnSave.bTearOff; pawn->bOnlyDirtyReplication = pawnSave.bOnlyDirtyReplication; pawn->bDemoRecording = pawnSave.bDemoRecording; pawn->bDemoOwner = pawnSave.bDemoOwner; pawn->bForceDemoRelevant = pawnSave.bForceDemoRelevant; pawn->bNetInitialRotation = pawnSave.bNetInitialRotation; pawn->bReplicateRigidBodyLocation = pawnSave.bReplicateRigidBodyLocation; pawn->bKillDuringLevelTransition = pawnSave.bKillDuringLevelTransition; pawn->bExchangedRoles = pawnSave.bExchangedRoles; pawn->bConsiderAllStaticMeshComponentsForStreaming = pawnSave.bConsiderAllStaticMeshComponentsForStreaming; pawn->bIgnoreForAITraces = pawnSave.bIgnoreForAITraces; pawn->bInteractable = pawnSave.bInteractable; pawn->bLOIObject = pawnSave.bLOIObject; pawn->bDebug = pawnSave.bDebug; pawn->bPostRenderIfNotVisible = pawnSave.bPostRenderIfNotVisible; pawn->bForceNetUpdate = pawnSave.bForceNetUpdate; pawn->bPendingNetUpdate = pawnSave.bPendingNetUpdate; pawn->bHardAttach = pawnSave.bHardAttach; pawn->bIgnoreBaseRotation = pawnSave.bIgnoreBaseRotation; pawn->bShadowParented = pawnSave.bShadowParented; pawn->bCanBeAdheredTo = pawnSave.bCanBeAdheredTo; pawn->bCanBeFrictionedTo = pawnSave.bCanBeFrictionedTo; pawn->bHurtEntry = pawnSave.bHurtEntry; pawn->bGameRelevant = pawnSave.bGameRelevant; pawn->bMovable = pawnSave.bMovable; pawn->bDestroyInPainVolume = pawnSave.bDestroyInPainVolume; pawn->bCanBeDamaged = pawnSave.bCanBeDamaged; pawn->bShouldBaseAtStartup = pawnSave.bShouldBaseAtStartup; pawn->bPendingDelete = pawnSave.bPendingDelete; pawn->bCanTeleport = pawnSave.bCanTeleport; pawn->bAlwaysTick = pawnSave.bAlwaysTick; pawn->bBlocksNavigation = pawnSave.bBlocksNavigation; pawn->BlockRigidBody = pawnSave.BlockRigidBody; pawn->bCollideWhenPlacing = pawnSave.bCollideWhenPlacing; pawn->bCollideActors = pawnSave.bCollideActors; pawn->bCollideWorld = pawnSave.bCollideWorld; pawn->bCollideComplex = pawnSave.bCollideComplex; pawn->bBlockActors = pawnSave.bBlockActors; pawn->bProjTarget = pawnSave.bProjTarget; pawn->bBlocksTeleport = pawnSave.bBlocksTeleport; pawn->bNoEncroachCheck = pawnSave.bNoEncroachCheck; pawn->bPhysRigidBodyOutOfWorldCheck = pawnSave.bPhysRigidBodyOutOfWorldCheck; pawn->bComponentOutsideWorld = pawnSave.bComponentOutsideWorld; pawn->bBounce = pawnSave.bBounce; pawn->bJustTeleported = pawnSave.bJustTeleported; pawn->bNetInitial = pawnSave.bNetInitial; pawn->bNetOwner = pawnSave.bNetOwner; pawn->bHiddenEd = pawnSave.bHiddenEd; pawn->bHiddenEdGroup = pawnSave.bHiddenEdGroup; pawn->bHiddenEdCustom = pawnSave.bHiddenEdCustom; pawn->bEdShouldSnap = pawnSave.bEdShouldSnap; pawn->bTempEditor = pawnSave.bTempEditor; pawn->bPathColliding = pawnSave.bPathColliding; pawn->bPathTemp = pawnSave.bPathTemp; pawn->bScriptInitialized = pawnSave.bScriptInitialized; pawn->bLockLocation = pawnSave.bLockLocation; pawn->CustomTimeDilation = pawnSave.CustomTimeDilation; pawn->Physics = pawnSave.Physics; pawn->RemoteRole = pawnSave.RemoteRole; pawn->Role = pawnSave.Role; pawn->CollisionType = pawnSave.CollisionType; pawn->TickGroup = pawnSave.TickGroup; pawn->NetTag = pawnSave.NetTag; pawn->NetUpdateTime = pawnSave.NetUpdateTime; pawn->NetUpdateFrequency = pawnSave.NetUpdateFrequency; pawn->NetPriority = pawnSave.NetPriority; pawn->LastNetUpdateTime = pawnSave.LastNetUpdateTime; pawn->LifeSpan = pawnSave.LifeSpan; pawn->CreationTime = pawnSave.CreationTime; pawn->LastRenderTime = pawnSave.LastRenderTime; pawn->LatentFloat = pawnSave.LatentFloat; pawn->Location = pawnSave.Location; pawn->Rotation = pawnSave.Rotation; pawn->Velocity = pawnSave.Velocity; pawn->Acceleration = pawnSave.Acceleration; pawn->AngularVelocity = pawnSave.AngularVelocity; pawn->RelativeLocation = pawnSave.RelativeLocation; pawn->RelativeRotation = pawnSave.RelativeRotation; pawn->DrawScale = pawnSave.DrawScale; pawn->DrawScale3D = pawnSave.DrawScale3D; pawn->PrePivot = pawnSave.PrePivot; pawn->OverlapTag = pawnSave.OverlapTag; pawn->RotationRate = pawnSave.RotationRate; pawn->DesiredRotation = pawnSave.DesiredRotation; pawn->MinDistForNetRBCorrection = pawnSave.MinDistForNetRBCorrection; pawn->MaxStepHeight = pawnSave.MaxStepHeight; pawn->MaxJumpHeight = pawnSave.MaxJumpHeight; pawn->WalkableFloorZ = pawnSave.WalkableFloorZ; pawn->NetRelevancyTime = pawnSave.NetRelevancyTime; pawn->bUpAndOut = pawnSave.bUpAndOut; pawn->bIsWalking = pawnSave.bIsWalking; pawn->bWantsToCrouch = pawnSave.bWantsToCrouch; pawn->bIsCrouched = pawnSave.bIsCrouched; pawn->bTryToUncrouch = pawnSave.bTryToUncrouch; pawn->bCanCrouch = pawnSave.bCanCrouch; pawn->bCrawler = pawnSave.bCrawler; pawn->bReducedSpeed = pawnSave.bReducedSpeed; pawn->bJumpCapable = pawnSave.bJumpCapable; pawn->bCanJump = pawnSave.bCanJump; pawn->bCanWalk = pawnSave.bCanWalk; pawn->bCanSwim = pawnSave.bCanSwim; pawn->bCanFly = pawnSave.bCanFly; pawn->bCanClimbLadders = pawnSave.bCanClimbLadders; pawn->bCanStrafe = pawnSave.bCanStrafe; pawn->bAvoidLedges = pawnSave.bAvoidLedges; pawn->bStopAtLedges = pawnSave.bStopAtLedges; pawn->bSimulateGravity = pawnSave.bSimulateGravity; pawn->bIgnoreForces = pawnSave.bIgnoreForces; pawn->bCanWalkOffLedges = pawnSave.bCanWalkOffLedges; pawn->bCanBeBaseForPawns = pawnSave.bCanBeBaseForPawns; pawn->bSimGravityDisabled = pawnSave.bSimGravityDisabled; pawn->bDirectHitWall = pawnSave.bDirectHitWall; pawn->bPushesRigidBodies = pawnSave.bPushesRigidBodies; pawn->bForceFloorCheck = pawnSave.bForceFloorCheck; pawn->bForceKeepAnchor = pawnSave.bForceKeepAnchor; pawn->bCanMantle = pawnSave.bCanMantle; pawn->bCanClimbCeilings = pawnSave.bCanClimbCeilings; pawn->bCanSwatTurn = pawnSave.bCanSwatTurn; pawn->bCanLeap = pawnSave.bCanLeap; pawn->bCanCoverSlip = pawnSave.bCanCoverSlip; pawn->bDisplayPathErrors = pawnSave.bDisplayPathErrors; pawn->bIsFemale = pawnSave.bIsFemale; pawn->bCanPickupInventory = pawnSave.bCanPickupInventory; pawn->bAmbientCreature = pawnSave.bAmbientCreature; pawn->bLOSHearing = pawnSave.bLOSHearing; pawn->bMuffledHearing = pawnSave.bMuffledHearing; pawn->bDontPossess = pawnSave.bDontPossess; pawn->bAutoFire = pawnSave.bAutoFire; pawn->bRollToDesired = pawnSave.bRollToDesired; pawn->bStationary = pawnSave.bStationary; pawn->bCachedRelevant = pawnSave.bCachedRelevant; pawn->bSpecialHUD = pawnSave.bSpecialHUD; pawn->bNoWeaponFiring = pawnSave.bNoWeaponFiring; pawn->bCanUse = pawnSave.bCanUse; pawn->bModifyReachSpecCost = pawnSave.bModifyReachSpecCost; pawn->bPathfindsAsVehicle = pawnSave.bPathfindsAsVehicle; pawn->bRunPhysicsWithNoController = pawnSave.bRunPhysicsWithNoController; pawn->bForceMaxAccel = pawnSave.bForceMaxAccel; pawn->bForceRMVelocity = pawnSave.bForceRMVelocity; pawn->bForceRegularVelocity = pawnSave.bForceRegularVelocity; pawn->bPlayedDeath = pawnSave.bPlayedDeath; pawn->UncrouchTime = pawnSave.UncrouchTime; pawn->CrouchHeight = pawnSave.CrouchHeight; pawn->CrouchRadius = pawnSave.CrouchRadius; pawn->FullHeight = pawnSave.FullHeight; pawn->NonPreferredVehiclePathMultiplier = pawnSave.NonPreferredVehiclePathMultiplier; pawn->PathSearchType = pawnSave.PathSearchType; pawn->RemoteViewPitch = pawnSave.RemoteViewPitch; pawn->FlashCount = pawnSave.FlashCount; pawn->FiringMode = pawnSave.FiringMode; pawn->DesiredSpeed = pawnSave.DesiredSpeed; pawn->MaxDesiredSpeed = pawnSave.MaxDesiredSpeed; pawn->HearingThreshold = pawnSave.HearingThreshold; pawn->Alertness = pawnSave.Alertness; pawn->SightRadius = pawnSave.SightRadius; pawn->PeripheralVision = pawnSave.PeripheralVision; pawn->AvgPhysicsTime = pawnSave.AvgPhysicsTime; pawn->Mass = pawnSave.Mass; pawn->Buoyancy = pawnSave.Buoyancy; pawn->MeleeRange = pawnSave.MeleeRange; pawn->FindAnchorFailedTime = pawnSave.FindAnchorFailedTime; pawn->LastValidAnchorTime = pawnSave.LastValidAnchorTime; pawn->DestinationOffset = pawnSave.DestinationOffset; pawn->NextPathRadius = pawnSave.NextPathRadius; pawn->SerpentineDir = pawnSave.SerpentineDir; pawn->SerpentineDist = pawnSave.SerpentineDist; pawn->SerpentineTime = pawnSave.SerpentineTime; pawn->SpawnTime = pawnSave.SpawnTime; pawn->MaxPitchLimit = pawnSave.MaxPitchLimit; pawn->GroundSpeed = pawnSave.GroundSpeed; pawn->WaterSpeed = pawnSave.WaterSpeed; pawn->AirSpeed = pawnSave.AirSpeed; pawn->LadderSpeed = pawnSave.LadderSpeed; pawn->AccelRate = pawnSave.AccelRate; pawn->JumpZ = pawnSave.JumpZ; pawn->OutofWaterZ = pawnSave.OutofWaterZ; pawn->MaxOutOfWaterStepHeight = pawnSave.MaxOutOfWaterStepHeight; pawn->AirControl = pawnSave.AirControl; pawn->WalkingPct = pawnSave.WalkingPct; pawn->CrouchedPct = pawnSave.CrouchedPct; pawn->MaxFallSpeed = pawnSave.MaxFallSpeed; pawn->AIMaxFallSpeedFactor = pawnSave.AIMaxFallSpeedFactor; pawn->BaseEyeHeight = pawnSave.BaseEyeHeight; pawn->EyeHeight = pawnSave.EyeHeight; pawn->Floor = pawnSave.Floor; pawn->SplashTime = pawnSave.SplashTime; pawn->OldZ = pawnSave.OldZ; pawn->Health = pawnSave.Health; pawn->HealthMax = pawnSave.HealthMax; pawn->BreathTime = pawnSave.BreathTime; pawn->UnderWaterTime = pawnSave.UnderWaterTime; pawn->LastPainTime = pawnSave.LastPainTime; pawn->RMVelocity = pawnSave.RMVelocity; pawn->noise1spot = pawnSave.noise1spot; pawn->noise1time = pawnSave.noise1time; pawn->noise1loudness = pawnSave.noise1loudness; pawn->noise2spot = pawnSave.noise2spot; pawn->noise2time = pawnSave.noise2time; pawn->noise2loudness = pawnSave.noise2loudness; pawn->SoundDampening = pawnSave.SoundDampening; pawn->DamageScaling = pawnSave.DamageScaling; pawn->LastStartTime = pawnSave.LastStartTime; pawn->TakeHitLocation = pawnSave.TakeHitLocation; pawn->TearOffMomentum = pawnSave.TearOffMomentum; pawn->RBPushRadius = pawnSave.RBPushRadius; pawn->RBPushStrength = pawnSave.RBPushStrength; pawn->AlwaysRelevantDistanceSquared = pawnSave.AlwaysRelevantDistanceSquared; pawn->VehicleCheckRadius = pawnSave.VehicleCheckRadius; pawn->ViewPitchMin = pawnSave.ViewPitchMin; pawn->ViewPitchMax = pawnSave.ViewPitchMax; pawn->AllowedYawError = pawnSave.AllowedYawError; pawn->FlashLocation = pawnSave.FlashLocation; pawn->LastFiringFlashLocation = pawnSave.LastFiringFlashLocation; pawn->ShotCount = pawnSave.ShotCount; pawn->FailedLandingCount = pawnSave.FailedLandingCount; pawn->bDisableSkelControlSpring = pawnSave.bDisableSkelControlSpring; pawn->bCanUnCrouch = pawnSave.bCanUnCrouch; pawn->bConstrainLook = pawnSave.bConstrainLook; pawn->bGoingForward = pawnSave.bGoingForward; pawn->bClimbLeftHand = pawnSave.bClimbLeftHand; pawn->bClimbDownFast = pawnSave.bClimbDownFast; pawn->bEnableFootPlacement = pawnSave.bEnableFootPlacement; pawn->bMoveActionMax = pawnSave.bMoveActionMax; pawn->bFoundLedgeExcludesHandMoves = pawnSave.bFoundLedgeExcludesHandMoves; pawn->bFoundLedgeExcludesFootMoves = pawnSave.bFoundLedgeExcludesFootMoves; pawn->bIsWallWalking = pawnSave.bIsWallWalking; pawn->bFoundLedge = pawnSave.bFoundLedge; pawn->bAllowMoveChange = pawnSave.bAllowMoveChange; pawn->bSRPauseTimer = pawnSave.bSRPauseTimer; pawn->bForceMaxAccelOneFrame = pawnSave.bForceMaxAccelOneFrame; pawn->RollTriggerPressed = pawnSave.RollTriggerPressed; pawn->bUncontrolledSlide = pawnSave.bUncontrolledSlide; pawn->bIsPlayingSlideEffect = pawnSave.bIsPlayingSlideEffect; pawn->bAlternateSound = pawnSave.bAlternateSound; pawn->bCharacterInhaling = pawnSave.bCharacterInhaling; pawn->bDisableCharacterSounds = pawnSave.bDisableCharacterSounds; pawn->bTakeFallDamage = pawnSave.bTakeFallDamage; pawn->bIsUsingRootMotion = pawnSave.bIsUsingRootMotion; pawn->bIsUsingRootRotation = pawnSave.bIsUsingRootRotation; pawn->bDebugDamage = pawnSave.bDebugDamage; pawn->bDebugNetAnim = pawnSave.bDebugNetAnim; pawn->bNoMoveAnims = pawnSave.bNoMoveAnims; pawn->bDebugAcceleration = pawnSave.bDebugAcceleration; pawn->bDebugJumping = pawnSave.bDebugJumping; pawn->bDebugMovement = pawnSave.bDebugMovement; pawn->bDebugPlotPath = pawnSave.bDebugPlotPath; pawn->bDebugFootsteps = pawnSave.bDebugFootsteps; pawn->bDebugSlapBack = pawnSave.bDebugSlapBack; pawn->bDebugCharacterSounds = pawnSave.bDebugCharacterSounds; pawn->bDebugBreathingSounds = pawnSave.bDebugBreathingSounds; pawn->bDebugWeapons = pawnSave.bDebugWeapons; pawn->bDebugMaterials = pawnSave.bDebugMaterials; pawn->VelocityMagnitude2D = pawnSave.VelocityMagnitude2D; pawn->VelocityMagnitude = pawnSave.VelocityMagnitude; pawn->VelocityDir2D = pawnSave.VelocityDir2D; pawn->VelocityDir = pawnSave.VelocityDir; pawn->FaceRotationTimeLeft = pawnSave.FaceRotationTimeLeft; pawn->BecameReadyTime = pawnSave.BecameReadyTime; pawn->AmountTilUnarmed = pawnSave.AmountTilUnarmed; pawn->GravityModifier = pawnSave.GravityModifier; pawn->GravityModifierTimer = pawnSave.GravityModifierTimer; pawn->AgainstWallState = pawnSave.AgainstWallState; pawn->WeaponAnimState = pawnSave.WeaponAnimState; pawn->AnimLockRefCount = pawnSave.AnimLockRefCount; pawn->RootMotionRefCount = pawnSave.RootMotionRefCount; pawn->CurrentGrabTurnType = pawnSave.CurrentGrabTurnType; pawn->LadderType = pawnSave.LadderType; pawn->AnimationMovementState = pawnSave.AnimationMovementState; pawn->PendingAnimationMovementState = pawnSave.PendingAnimationMovementState; pawn->OldMovementState = pawnSave.OldMovementState; pawn->PendingMovementState = pawnSave.PendingMovementState; pawn->MovementState = pawnSave.MovementState; pawn->ReplicatedMovementState = pawnSave.ReplicatedMovementState; pawn->AIAimOldMovementState = pawnSave.AIAimOldMovementState; pawn->OverrideWalkingState = pawnSave.OverrideWalkingState; pawn->PendingOverrideWalkingState = pawnSave.PendingOverrideWalkingState; pawn->CurrentWalkingState = pawnSave.CurrentWalkingState; pawn->ReplicateCustomAnimCount = pawnSave.ReplicateCustomAnimCount; pawn->MoveActionHint = pawnSave.MoveActionHint; pawn->ReloadCount = pawnSave.ReloadCount; pawn->NoOfBreathingSounds = pawnSave.NoOfBreathingSounds; pawn->AgainstWallLeftHand = pawnSave.AgainstWallLeftHand; pawn->AgainstWallRightHand = pawnSave.AgainstWallRightHand; pawn->AgainstWallNormal = pawnSave.AgainstWallNormal; pawn->MinLookConstraint = pawnSave.MinLookConstraint; pawn->MaxLookConstraint = pawnSave.MaxLookConstraint; pawn->LegRotationSlowTimer = pawnSave.LegRotationSlowTimer; pawn->LegRotation = pawnSave.LegRotation; pawn->LegRotationSpeed = pawnSave.LegRotationSpeed; pawn->GoBackLegAngleLimitMin = pawnSave.GoBackLegAngleLimitMin; pawn->GoBackLegAngleLimitMax = pawnSave.GoBackLegAngleLimitMax; pawn->LegAngleLimitFudge = pawnSave.LegAngleLimitFudge; pawn->SneakVelocity = pawnSave.SneakVelocity; pawn->WalkVelocity = pawnSave.WalkVelocity; pawn->JogVelocity = pawnSave.JogVelocity; pawn->RunVelocity = pawnSave.RunVelocity; pawn->SprintVelocity = pawnSave.SprintVelocity; pawn->AverageSpeed = pawnSave.AverageSpeed; pawn->ASFilterTime = pawnSave.ASFilterTime; pawn->ASPollInterval = pawnSave.ASPollInterval; pawn->ASPollTimer = pawnSave.ASPollTimer; pawn->ASPollSlots = pawnSave.ASPollSlots; pawn->ASSlotPointer = pawnSave.ASSlotPointer; pawn->ASDistanceAccum = pawnSave.ASDistanceAccum; pawn->NewFloorSmooth = pawnSave.NewFloorSmooth; pawn->SmoothOffset = pawnSave.SmoothOffset; pawn->FootPlacementStoredRotation = pawnSave.FootPlacementStoredRotation; pawn->TargetMeshTranslationZ = pawnSave.TargetMeshTranslationZ; pawn->SlideStoppedTimeStamp = pawnSave.SlideStoppedTimeStamp; pawn->MoveLocation = pawnSave.MoveLocation; pawn->MoveNormal = pawnSave.MoveNormal; pawn->MaxWallStepHeight = pawnSave.MaxWallStepHeight; pawn->MoveLedgeLocation = pawnSave.MoveLedgeLocation; pawn->MoveLedgeNormal = pawnSave.MoveLedgeNormal; pawn->MoveLedgeResult = pawnSave.MoveLedgeResult; pawn->LedgeFindExtent = pawnSave.LedgeFindExtent; pawn->LedgeFindDistance = pawnSave.LedgeFindDistance; pawn->LedgeFindDepth = pawnSave.LedgeFindDepth; pawn->IllegalLedgeNormal = pawnSave.IllegalLedgeNormal; pawn->bIllegalLedgeTimer = pawnSave.bIllegalLedgeTimer; pawn->ActiveMoveTimer = pawnSave.ActiveMoveTimer; pawn->RemoteViewYaw = pawnSave.RemoteViewYaw; pawn->EvadeTimer = pawnSave.EvadeTimer; pawn->SpeedMaxBaseVelocity = pawnSave.SpeedMaxBaseVelocity; pawn->SpeedMinBaseVelocity = pawnSave.SpeedMinBaseVelocity; pawn->SpeedStrafeVelocityAccelerationFactor = pawnSave.SpeedStrafeVelocityAccelerationFactor; pawn->SpeedWalkVelocityAccelerationFactor = pawnSave.SpeedWalkVelocityAccelerationFactor; pawn->SpeedSprintVelocityAccelerationFactor = pawnSave.SpeedSprintVelocityAccelerationFactor; pawn->SpeedEnergyDecelerationTime = pawnSave.SpeedEnergyDecelerationTime; pawn->SpeedEnergyDecelerationExponent = pawnSave.SpeedEnergyDecelerationExponent; pawn->SpeedTurnDecelerationFactor = pawnSave.SpeedTurnDecelerationFactor; pawn->SpeedSprintEnergy = pawnSave.SpeedSprintEnergy; pawn->UpwardWalkFrictionScale = pawnSave.UpwardWalkFrictionScale; pawn->DownwardWalkFrictionScale = pawnSave.DownwardWalkFrictionScale; pawn->MinWalkFrictionModify = pawnSave.MinWalkFrictionModify; pawn->MaxWalkFrictionModify = pawnSave.MaxWalkFrictionModify; pawn->UpwardSlideFrictionScale = pawnSave.UpwardSlideFrictionScale; pawn->DownwardSlideFrictionScale = pawnSave.DownwardSlideFrictionScale; pawn->BrakingFrictionStrength = pawnSave.BrakingFrictionStrength; pawn->SoftLockStrength = pawnSave.SoftLockStrength; pawn->RollTriggerTime = pawnSave.RollTriggerTime; pawn->UncontrolledSlideNormal = pawnSave.UncontrolledSlideNormal; pawn->FallingUncontrolledHeight = pawnSave.FallingUncontrolledHeight; pawn->EnterFallingHeight = pawnSave.EnterFallingHeight; pawn->SlideEffectUpdateTimer = pawnSave.SlideEffectUpdateTimer; pawn->CustomSoundInput = pawnSave.CustomSoundInput; pawn->OverrideSynchPosOffset = pawnSave.OverrideSynchPosOffset; pawn->StreakEffectOverride = pawnSave.StreakEffectOverride; pawn->StreakEffectDirection = pawnSave.StreakEffectDirection; pawn->PatchOne = pawnSave.PatchOne; pawn->PatchTwo = pawnSave.PatchTwo; pawn->PatchThree = pawnSave.PatchThree; pawn->PhysicsHitReactionBlendTimer = pawnSave.PhysicsHitReactionBlendTimer; pawn->PhysicsHitReactionBlendOut = pawnSave.PhysicsHitReactionBlendOut; pawn->PhysicsHitReactionBlendInTime = pawnSave.PhysicsHitReactionBlendInTime; pawn->PhysicsHitReactionBlendOutTime = pawnSave.PhysicsHitReactionBlendOutTime; pawn->PhysicsHitReactionScale = pawnSave.PhysicsHitReactionScale; pawn->LastDamageTaken = pawnSave.LastDamageTaken; pawn->ArmorBulletsHead = pawnSave.ArmorBulletsHead; pawn->ArmorBulletsBody = pawnSave.ArmorBulletsBody; pawn->ArmorBulletsLegs = pawnSave.ArmorBulletsLegs; pawn->ArmorMeleeHead = pawnSave.ArmorMeleeHead; pawn->ArmorMeleeBody = pawnSave.ArmorMeleeBody; pawn->ArmorMeleeLegs = pawnSave.ArmorMeleeLegs; pawn->FootstepTraceLength = pawnSave.FootstepTraceLength; pawn->FootstepTraceWidth = pawnSave.FootstepTraceWidth; pawn->LastFlybyStamp = pawnSave.LastFlybyStamp; pawn->MaxHealth = pawnSave.MaxHealth; pawn->RegenerateDelay = pawnSave.RegenerateDelay; pawn->RegenerateHealthPerSecond = pawnSave.RegenerateHealthPerSecond; pawn->UnrealEngineFallDamageScale = pawnSave.UnrealEngineFallDamageScale; pawn->TimeSinceLastDamage = pawnSave.TimeSinceLastDamage; pawn->HealthFrac = pawnSave.HealthFrac; pawn->TaserDamageLevel = pawnSave.TaserDamageLevel; pawn->RegenerateFromTaserPerSecond = pawnSave.RegenerateFromTaserPerSecond; pawn->TaserRegenerateDelay = pawnSave.TaserRegenerateDelay; pawn->TimeSinceLastTaserDamage = pawnSave.TimeSinceLastTaserDamage; pawn->StunDamageLevel = pawnSave.StunDamageLevel; pawn->RegenerateFromStunPerSecond = pawnSave.RegenerateFromStunPerSecond; pawn->MinTimeBeforeRemovingDeadBody = pawnSave.MinTimeBeforeRemovingDeadBody; pawn->MaxTimeBeforeRemovingDeadBody = pawnSave.MaxTimeBeforeRemovingDeadBody; pawn->MyPassengerSeatIndex = pawnSave.MyPassengerSeatIndex; pawn->SlideFactor = pawnSave.SlideFactor; pawn->LastDamage = pawnSave.LastDamage; pawn->LastDamageTime = pawnSave.LastDamageTime; pawn->NextDebugPlotTime = pawnSave.NextDebugPlotTime; pawn->LastPlotLocation = pawnSave.LastPlotLocation; pawn->LastJumpLocation = pawnSave.LastJumpLocation; pawn->bHasMorphNodes = pawnSave.bHasMorphNodes; pawn->bStuckOnGround = pawnSave.bStuckOnGround; pawn->bPlayerDiedHoldingTheBag = pawnSave.bPlayerDiedHoldingTheBag; pawn->bIsInShadowAlteringMoveState = pawnSave.bIsInShadowAlteringMoveState; pawn->bEnableHairPhysics = pawnSave.bEnableHairPhysics; pawn->bLockBase = pawnSave.bLockBase; pawn->bCutsceneIsSkippable = pawnSave.bCutsceneIsSkippable; pawn->FirstPersonDPG = pawnSave.FirstPersonDPG; pawn->FirstPersonLowerBodyDPG = pawnSave.FirstPersonLowerBodyDPG; pawn->VertigoEdgeProbingHeight = pawnSave.VertigoEdgeProbingHeight; pawn->VertigoEdgeProbingDistance = pawnSave.VertigoEdgeProbingDistance; pawn->VertigoEffectThreshold = pawnSave.VertigoEffectThreshold; pawn->EdgeCheckMaxSpeed = pawnSave.EdgeCheckMaxSpeed; pawn->EdgeCheckDistance = pawnSave.EdgeCheckDistance; pawn->EdgeStopMinHeight = pawnSave.EdgeStopMinHeight; pawn->LastEnemyHitTimeOut = pawnSave.LastEnemyHitTimeOut; pawn->ReverbVolumeTimer = pawnSave.ReverbVolumeTimer; pawn->ReverbVolumePollTime = pawnSave.ReverbVolumePollTime; pawn->OcclusionDuckLevel = pawnSave.OcclusionDuckLevel; pawn->OcclusionDuckFadeTime = pawnSave.OcclusionDuckFadeTime; pawn->IndoorSoundGroupIndex = pawnSave.IndoorSoundGroupIndex; pawn->IndoorMixGroupIndex = pawnSave.IndoorMixGroupIndex; pawn->OutdoorMixGroupIndex = pawnSave.OutdoorMixGroupIndex; pawn->MovementStringAllowedGap = pawnSave.MovementStringAllowedGap; pawn->MovementStringGapTimer = pawnSave.MovementStringGapTimer; pawn->PlayerBulletDamageMultiplier = pawnSave.PlayerBulletDamageMultiplier; pawn->FocusLocation = pawnSave.FocusLocation; pawn->PlayerCameraLocation = pawnSave.PlayerCameraLocation; pawn->PlayerCameraRotation = pawnSave.PlayerCameraRotation; pawn->DebugPlayerGraph = pawnSave.DebugPlayerGraph; pawn->LastDebugGraphValue = pawnSave.LastDebugGraphValue; pawn->SimulatedBadFPS = pawnSave.SimulatedBadFPS; pawn->FocusLocationInterpolationSpeed = pawnSave.FocusLocationInterpolationSpeed; pawn->LastResetTimeStamp = pawnSave.LastResetTimeStamp;
	controller->bExludeHandMoves = controllerSave.bExludeHandMoves; controller->bExludeFootMoves = controllerSave.bExludeFootMoves; controller->bPhysXMutatable = controllerSave.bPhysXMutatable; controller->bStatic = controllerSave.bStatic; controller->bHidden = controllerSave.bHidden; controller->bNoDelete = controllerSave.bNoDelete; controller->bDeleteMe = controllerSave.bDeleteMe; controller->bTicked = controllerSave.bTicked; controller->bOnlyOwnerSee = controllerSave.bOnlyOwnerSee; controller->bStasis = controllerSave.bStasis; controller->bWorldGeometry = controllerSave.bWorldGeometry; controller->bIgnoreRigidBodyPawns = controllerSave.bIgnoreRigidBodyPawns; controller->bOrientOnSlope = controllerSave.bOrientOnSlope; controller->bIgnoreEncroachers = controllerSave.bIgnoreEncroachers; controller->bPushedByEncroachers = controllerSave.bPushedByEncroachers; controller->bDestroyedByInterpActor = controllerSave.bDestroyedByInterpActor; controller->bRouteBeginPlayEvenIfStatic = controllerSave.bRouteBeginPlayEvenIfStatic; controller->bIsMoving = controllerSave.bIsMoving; controller->bAlwaysEncroachCheck = controllerSave.bAlwaysEncroachCheck; controller->bHasAlternateTargetLocation = controllerSave.bHasAlternateTargetLocation; controller->bNetTemporary = controllerSave.bNetTemporary; controller->bOnlyRelevantToOwner = controllerSave.bOnlyRelevantToOwner; controller->bNetDirty = controllerSave.bNetDirty; controller->bAlwaysRelevant = controllerSave.bAlwaysRelevant; controller->bReplicateInstigator = controllerSave.bReplicateInstigator; controller->bReplicateMovement = controllerSave.bReplicateMovement; controller->bSkipActorPropertyReplication = controllerSave.bSkipActorPropertyReplication; controller->bUpdateSimulatedPosition = controllerSave.bUpdateSimulatedPosition; controller->bTearOff = controllerSave.bTearOff; controller->bOnlyDirtyReplication = controllerSave.bOnlyDirtyReplication; controller->bDemoRecording = controllerSave.bDemoRecording; controller->bDemoOwner = controllerSave.bDemoOwner; controller->bForceDemoRelevant = controllerSave.bForceDemoRelevant; controller->bNetInitialRotation = controllerSave.bNetInitialRotation; controller->bReplicateRigidBodyLocation = controllerSave.bReplicateRigidBodyLocation; controller->bKillDuringLevelTransition = controllerSave.bKillDuringLevelTransition; controller->bExchangedRoles = controllerSave.bExchangedRoles; controller->bConsiderAllStaticMeshComponentsForStreaming = controllerSave.bConsiderAllStaticMeshComponentsForStreaming; controller->bIgnoreForAITraces = controllerSave.bIgnoreForAITraces; controller->bInteractable = controllerSave.bInteractable; controller->bLOIObject = controllerSave.bLOIObject; controller->bDebug = controllerSave.bDebug; controller->bPostRenderIfNotVisible = controllerSave.bPostRenderIfNotVisible; controller->bForceNetUpdate = controllerSave.bForceNetUpdate; controller->bPendingNetUpdate = controllerSave.bPendingNetUpdate; controller->bHardAttach = controllerSave.bHardAttach; controller->bIgnoreBaseRotation = controllerSave.bIgnoreBaseRotation; controller->bShadowParented = controllerSave.bShadowParented; controller->bCanBeAdheredTo = controllerSave.bCanBeAdheredTo; controller->bCanBeFrictionedTo = controllerSave.bCanBeFrictionedTo; controller->bHurtEntry = controllerSave.bHurtEntry; controller->bGameRelevant = controllerSave.bGameRelevant; controller->bMovable = controllerSave.bMovable; controller->bDestroyInPainVolume = controllerSave.bDestroyInPainVolume; controller->bCanBeDamaged = controllerSave.bCanBeDamaged; controller->bShouldBaseAtStartup = controllerSave.bShouldBaseAtStartup; controller->bPendingDelete = controllerSave.bPendingDelete; controller->bCanTeleport = controllerSave.bCanTeleport; controller->bAlwaysTick = controllerSave.bAlwaysTick; controller->bBlocksNavigation = controllerSave.bBlocksNavigation; controller->BlockRigidBody = controllerSave.BlockRigidBody; controller->bCollideWhenPlacing = controllerSave.bCollideWhenPlacing; controller->bCollideActors = controllerSave.bCollideActors; controller->bCollideWorld = controllerSave.bCollideWorld; controller->bCollideComplex = controllerSave.bCollideComplex; controller->bBlockActors = controllerSave.bBlockActors; controller->bProjTarget = controllerSave.bProjTarget; controller->bBlocksTeleport = controllerSave.bBlocksTeleport; controller->bNoEncroachCheck = controllerSave.bNoEncroachCheck; controller->bPhysRigidBodyOutOfWorldCheck = controllerSave.bPhysRigidBodyOutOfWorldCheck; controller->bComponentOutsideWorld = controllerSave.bComponentOutsideWorld; controller->bBounce = controllerSave.bBounce; controller->bJustTeleported = controllerSave.bJustTeleported; controller->bNetInitial = controllerSave.bNetInitial; controller->bNetOwner = controllerSave.bNetOwner; controller->bHiddenEd = controllerSave.bHiddenEd; controller->bHiddenEdGroup = controllerSave.bHiddenEdGroup; controller->bHiddenEdCustom = controllerSave.bHiddenEdCustom; controller->bEdShouldSnap = controllerSave.bEdShouldSnap; controller->bTempEditor = controllerSave.bTempEditor; controller->bPathColliding = controllerSave.bPathColliding; controller->bPathTemp = controllerSave.bPathTemp; controller->bScriptInitialized = controllerSave.bScriptInitialized; controller->bLockLocation = controllerSave.bLockLocation; controller->CustomTimeDilation = controllerSave.CustomTimeDilation; controller->Physics = controllerSave.Physics; controller->RemoteRole = controllerSave.RemoteRole; controller->Role = controllerSave.Role; controller->CollisionType = controllerSave.CollisionType; controller->TickGroup = controllerSave.TickGroup; controller->NetTag = controllerSave.NetTag; controller->NetUpdateTime = controllerSave.NetUpdateTime; controller->NetUpdateFrequency = controllerSave.NetUpdateFrequency; controller->NetPriority = controllerSave.NetPriority; controller->LastNetUpdateTime = controllerSave.LastNetUpdateTime; controller->LifeSpan = controllerSave.LifeSpan; controller->CreationTime = controllerSave.CreationTime; controller->LastRenderTime = controllerSave.LastRenderTime; controller->LatentFloat = controllerSave.LatentFloat; controller->Location = controllerSave.Location; controller->Rotation = controllerSave.Rotation; controller->Velocity = controllerSave.Velocity; controller->Acceleration = controllerSave.Acceleration; controller->AngularVelocity = controllerSave.AngularVelocity; controller->RelativeLocation = controllerSave.RelativeLocation; controller->RelativeRotation = controllerSave.RelativeRotation; controller->DrawScale = controllerSave.DrawScale; controller->DrawScale3D = controllerSave.DrawScale3D; controller->PrePivot = controllerSave.PrePivot; controller->OverlapTag = controllerSave.OverlapTag; controller->RotationRate = controllerSave.RotationRate; controller->DesiredRotation = controllerSave.DesiredRotation; controller->MinDistForNetRBCorrection = controllerSave.MinDistForNetRBCorrection; controller->PlayerNum = controllerSave.PlayerNum; controller->bIsPlayer = controllerSave.bIsPlayer; controller->bGodMode = controllerSave.bGodMode; controller->bAffectedByHitEffects = controllerSave.bAffectedByHitEffects; controller->bSoaking = controllerSave.bSoaking; controller->bSlowerZAcquire = controllerSave.bSlowerZAcquire; controller->bForceStrafe = controllerSave.bForceStrafe; controller->bNotifyPostLanded = controllerSave.bNotifyPostLanded; controller->bNotifyApex = controllerSave.bNotifyApex; controller->bAdvancedTactics = controllerSave.bAdvancedTactics; controller->bCanDoSpecial = controllerSave.bCanDoSpecial; controller->bAdjusting = controllerSave.bAdjusting; controller->bPreparingMove = controllerSave.bPreparingMove; controller->bIgnoreMovementFocus = controllerSave.bIgnoreMovementFocus; controller->bLOSflag = controllerSave.bLOSflag; controller->bUsePlayerHearing = controllerSave.bUsePlayerHearing; controller->bNotifyFallingHitWall = controllerSave.bNotifyFallingHitWall; controller->bForceDesiredRotation = controllerSave.bForceDesiredRotation; controller->bPreciseDestination = controllerSave.bPreciseDestination; controller->bSeeFriendly = controllerSave.bSeeFriendly; controller->bUsingPathLanes = controllerSave.bUsingPathLanes; controller->bFire = controllerSave.bFire; controller->MinHitWall = controllerSave.MinHitWall; controller->MoveTimer = controllerSave.MoveTimer; controller->Destination = controllerSave.Destination; controller->FocalPoint = controllerSave.FocalPoint; controller->AdjustLoc = controllerSave.AdjustLoc; controller->CurrentPathDir = controllerSave.CurrentPathDir; controller->RouteDist = controllerSave.RouteDist; controller->LastRouteFind = controllerSave.LastRouteFind; controller->GroundPitchTime = controllerSave.GroundPitchTime; controller->ViewX = controllerSave.ViewX; controller->ViewY = controllerSave.ViewY; controller->ViewZ = controllerSave.ViewZ; controller->FailedReachTime = controllerSave.FailedReachTime; controller->FailedReachLocation = controllerSave.FailedReachLocation; controller->SightCounter = controllerSave.SightCounter; controller->RespawnPredictionTime = controllerSave.RespawnPredictionTime; controller->InUseNodeCostMultiplier = controllerSave.InUseNodeCostMultiplier; controller->HighJumpNodeCostModifier = controllerSave.HighJumpNodeCostModifier; controller->LaneOffset = controllerSave.LaneOffset; controller->OldBasedRotation = controllerSave.OldBasedRotation; controller->currentLaneSlot = controllerSave.currentLaneSlot; controller->pathMatesCount = controllerSave.pathMatesCount; controller->bFrozen = controllerSave.bFrozen; controller->bPressedJump = controllerSave.bPressedJump; controller->bDoubleJump = controllerSave.bDoubleJump; controller->bUpdatePosition = controllerSave.bUpdatePosition; controller->bUpdating = controllerSave.bUpdating; controller->bNeverSwitchOnPickup = controllerSave.bNeverSwitchOnPickup; controller->bCheatFlying = controllerSave.bCheatFlying; controller->bCameraPositionLocked = controllerSave.bCameraPositionLocked; controller->bShortConnectTimeOut = controllerSave.bShortConnectTimeOut; controller->bPendingDestroy = controllerSave.bPendingDestroy; controller->bWasSpeedHack = controllerSave.bWasSpeedHack; controller->bWasSaturated = controllerSave.bWasSaturated; controller->bDynamicNetSpeed = controllerSave.bDynamicNetSpeed; controller->bAimingHelp = controllerSave.bAimingHelp; controller->bCinematicMode = controllerSave.bCinematicMode; controller->bCinemaDisableInputMove = controllerSave.bCinemaDisableInputMove; controller->bCinemaDisableInputLook = controllerSave.bCinemaDisableInputLook; controller->bReplicateAllPawns = controllerSave.bReplicateAllPawns; controller->bIsUsingStreamingVolumes = controllerSave.bIsUsingStreamingVolumes; controller->bIsExternalUIOpen = controllerSave.bIsExternalUIOpen; controller->bIsControllerConnected = controllerSave.bIsControllerConnected; controller->bCheckSoundOcclusion = controllerSave.bCheckSoundOcclusion; controller->bLogHearSoundOverflow = controllerSave.bLogHearSoundOverflow; controller->bCheckRelevancyThroughPortals = controllerSave.bCheckRelevancyThroughPortals; controller->bReceivedUniqueId = controllerSave.bReceivedUniqueId; controller->bCanSeeLOI = controllerSave.bCanSeeLOI; controller->MaxResponseTime = controllerSave.MaxResponseTime; controller->WaitDelay = controllerSave.WaitDelay; controller->DoubleClickDir = controllerSave.DoubleClickDir; controller->bIgnoreMoveInput = controllerSave.bIgnoreMoveInput; controller->bIgnoreLookInput = controllerSave.bIgnoreLookInput; controller->bRun = controllerSave.bRun; controller->bDuck = controllerSave.bDuck; controller->NetPlayerIndex = controllerSave.NetPlayerIndex; controller->FOVAngle = controllerSave.FOVAngle; controller->DesiredFOV = controllerSave.DesiredFOV; controller->DefaultFOV = controllerSave.DefaultFOV; controller->LODDistanceFactor = controllerSave.LODDistanceFactor; controller->TargetViewRotation = controllerSave.TargetViewRotation; controller->TargetEyeHeight = controllerSave.TargetEyeHeight; controller->BlendedTargetViewRotation = controllerSave.BlendedTargetViewRotation; controller->LastAckedAccel = controllerSave.LastAckedAccel; controller->CurrentTimeStamp = controllerSave.CurrentTimeStamp; controller->LastUpdateTime = controllerSave.LastUpdateTime; controller->ServerTimeStamp = controllerSave.ServerTimeStamp; controller->TimeMargin = controllerSave.TimeMargin; controller->ClientUpdateTime = controllerSave.ClientUpdateTime; controller->MaxTimeMargin = controllerSave.MaxTimeMargin; controller->LastActiveTime = controllerSave.LastActiveTime; controller->ClientCap = controllerSave.ClientCap; controller->DynamicPingThreshold = controllerSave.DynamicPingThreshold; controller->LastPingUpdate = controllerSave.LastPingUpdate; controller->OldPing = controllerSave.OldPing; controller->LastSpeedHackLog = controllerSave.LastSpeedHackLog; controller->ProgressTimeOut = controllerSave.ProgressTimeOut; controller->GroundPitch = controllerSave.GroundPitch; controller->OldFloor = controllerSave.OldFloor; controller->FailedPathStart = controllerSave.FailedPathStart; controller->InteractDistance = controllerSave.InteractDistance; controller->LastBroadcastTime = controllerSave.LastBroadcastTime; controller->SpectatorCameraSpeed = controllerSave.SpectatorCameraSpeed; controller->MinRespawnDelay = controllerSave.MinRespawnDelay; controller->MaxConcurrentHearSounds = controllerSave.MaxConcurrentHearSounds; controller->InfiniteAmmo = controllerSave.InfiniteAmmo; controller->bDebugPostProcessFreeFlight = controllerSave.bDebugPostProcessFreeFlight; controller->bReleasedJump = controllerSave.bReleasedJump; controller->bLeftThumbStickPassedDeadZone = controllerSave.bLeftThumbStickPassedDeadZone; controller->bRightThumbStickPassedDeadZone = controllerSave.bRightThumbStickPassedDeadZone; controller->bDebugCloseCombat = controllerSave.bDebugCloseCombat; controller->bDisableSkipCutscenes = controllerSave.bDisableSkipCutscenes; controller->bReactionTime = controllerSave.bReactionTime; controller->bOverrideReactionTimeSettings = controllerSave.bOverrideReactionTimeSettings; controller->bJesusMode = controllerSave.bJesusMode; controller->bStefanMode = controllerSave.bStefanMode; controller->bIsWalking = controllerSave.bIsWalking; controller->bIsStopping = controllerSave.bIsStopping; controller->FailedToSpawn = controllerSave.FailedToSpawn; controller->bDisableLoadFromLastCheckpoint = controllerSave.bDisableLoadFromLastCheckpoint; controller->bDebugSoundMixGroups = controllerSave.bDebugSoundMixGroups; controller->bDebugSoundVelocity = controllerSave.bDebugSoundVelocity; controller->bDebugSoundReverbVolumes = controllerSave.bDebugSoundReverbVolumes; controller->ControllerTilt = controllerSave.ControllerTilt; controller->VisualizeControllerTilt = controllerSave.VisualizeControllerTilt; controller->bRopeburnDisarmSucceeded = controllerSave.bRopeburnDisarmSucceeded; controller->TimePressedJump = controllerSave.TimePressedJump; controller->JumpTapTime = controllerSave.JumpTapTime; controller->BagSearchTapTime = controllerSave.BagSearchTapTime; controller->LastEmoteMessageTime = controllerSave.LastEmoteMessageTime; controller->AllowedEmoteMessageInterval = controllerSave.AllowedEmoteMessageInterval; controller->TargetingPawnInterp = controllerSave.TargetingPawnInterp; controller->TargetingCutoffAngle = controllerSave.TargetingCutoffAngle; controller->TargetActorLocation = controllerSave.TargetActorLocation; controller->LookAtTimeDelay = controllerSave.LookAtTimeDelay; controller->MeleeLastAction = controllerSave.MeleeLastAction; controller->bIgnoreButtonInput = controllerSave.bIgnoreButtonInput; controller->CurrentSoundMode = controllerSave.CurrentSoundMode; controller->CachedWalkingState = controllerSave.CachedWalkingState; controller->CloseCombatMinRange = controllerSave.CloseCombatMinRange; controller->CloseCombatMaxRange = controllerSave.CloseCombatMaxRange; controller->CloseCombatRangeTime = controllerSave.CloseCombatRangeTime; controller->CloseCombatMaxAngle = controllerSave.CloseCombatMaxAngle; controller->CloseCombatPawnDistanceBias = controllerSave.CloseCombatPawnDistanceBias; controller->InputSize = controllerSave.InputSize; controller->InputMaxSprintRaduisLimit = controllerSave.InputMaxSprintRaduisLimit; controller->InputMaxSprintHeightLimit = controllerSave.InputMaxSprintHeightLimit; controller->InputMaxWalkRadiusLimit = controllerSave.InputMaxWalkRadiusLimit; controller->WallRunningAlignTime = controllerSave.WallRunningAlignTime; controller->WallRunningAlignYaw = controllerSave.WallRunningAlignYaw; controller->LOIIndex = controllerSave.LOIIndex; controller->ReactionTimeEnergy = controllerSave.ReactionTimeEnergy; controller->ReactionTimeSpawnLevel = controllerSave.ReactionTimeSpawnLevel; controller->ReactionTimeDrain = controllerSave.ReactionTimeDrain; controller->ReactionTimeMaxEffect = controllerSave.ReactionTimeMaxEffect; controller->ReactionTimeFadeIn = controllerSave.ReactionTimeFadeIn; controller->ReactionTimeFadeOut = controllerSave.ReactionTimeFadeOut; controller->ReactionTimeEnergyBuildRate = controllerSave.ReactionTimeEnergyBuildRate; controller->WallClimbingDodgeJumpThreshold = controllerSave.WallClimbingDodgeJumpThreshold; controller->WallRunningDodgeJumpThreshold = controllerSave.WallRunningDodgeJumpThreshold; controller->WalkCyclePart1 = controllerSave.WalkCyclePart1; controller->WalkCyclePart2 = controllerSave.WalkCyclePart2; controller->AccelerationTime = controllerSave.AccelerationTime; controller->StopAnimBlendIn = controllerSave.StopAnimBlendIn; controller->StopAnimBlendOut = controllerSave.StopAnimBlendOut; controller->StoppingVelocity = controllerSave.StoppingVelocity; controller->NextLocalEnemyToCheckLOS = controllerSave.NextLocalEnemyToCheckLOS; controller->LastEnemyNetSendTime = controllerSave.LastEnemyNetSendTime; controller->VehicleRotation = controllerSave.VehicleRotation; controller->DriverRotation = controllerSave.DriverRotation; controller->Team = controllerSave.Team; controller->StickySpeed = controllerSave.StickySpeed; controller->FOVZoomRate = controllerSave.FOVZoomRate; controller->FOVZoomDelay = controllerSave.FOVZoomDelay; controller->MouseX = controllerSave.MouseX; controller->MouseY = controllerSave.MouseY; controller->ActualAccelX = controllerSave.ActualAccelX; controller->ActualAccelY = controllerSave.ActualAccelY; controller->ActualAccelZ = controllerSave.ActualAccelZ; controller->SixAxisDisarmZ = controllerSave.SixAxisDisarmZ; controller->SixAxisDisarmY = controllerSave.SixAxisDisarmY; controller->SixAxisRollZ = controllerSave.SixAxisRollZ; controller->SixAxisRollY = controllerSave.SixAxisRollY; controller->DisarmTimeMultiplier = controllerSave.DisarmTimeMultiplier; controller->LastZAxisTilt = controllerSave.LastZAxisTilt; controller->LastYAxisTilt = controllerSave.LastYAxisTilt;

	auto walking = static_cast<Classes::UTdMove_Walking *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Walking)]);
	if (walking) {
		walking->SpeedModifier = walkingSave.SpeedModifier; walking->FrictionModifier = walkingSave.FrictionModifier; walking->bDebugMove = walkingSave.bDebugMove; walking->bTriggersCompliment = walkingSave.bTriggersCompliment; walking->bDisableCollision = walkingSave.bDisableCollision; walking->bShouldHolsterWeapon = walkingSave.bShouldHolsterWeapon; walking->bShouldUnzoom = walkingSave.bShouldUnzoom; walking->bIsTimedMove = walkingSave.bIsTimedMove; walking->bConstrainLook = walkingSave.bConstrainLook; walking->bUseAbsoluteYawConstraint = walkingSave.bUseAbsoluteYawConstraint; walking->bDisableActorCollision = walkingSave.bDisableActorCollision; walking->bLookAtTargetLocation = walkingSave.bLookAtTargetLocation; walking->bLookAtTargetAngle = walkingSave.bLookAtTargetAngle; walking->bDisableFaceRotation = walkingSave.bDisableFaceRotation; walking->bDisableControllerFacingPawnYawRotation = walkingSave.bDisableControllerFacingPawnYawRotation; walking->bAvoidLedges = walkingSave.bAvoidLedges; walking->bUsePreciseLocation = walkingSave.bUsePreciseLocation; walking->bReachedPreciseLocation = walkingSave.bReachedPreciseLocation; walking->bDebugPreciseLocation = walkingSave.bDebugPreciseLocation; walking->bUsePreciseRotation = walkingSave.bUsePreciseRotation; walking->bReachedPreciseRotation = walkingSave.bReachedPreciseRotation; walking->bDelayRotationAndLocationCallback = walkingSave.bDelayRotationAndLocationCallback; walking->bResetCameraLook = walkingSave.bResetCameraLook; walking->bUseCustomCollision = walkingSave.bUseCustomCollision; walking->bUseCameraCollision = walkingSave.bUseCameraCollision; walking->bTwoHandedFullBodyAnimations = walkingSave.bTwoHandedFullBodyAnimations; walking->bStickyAim = walkingSave.bStickyAim; walking->bStopAfterMove = walkingSave.bStopAfterMove; walking->bEnableFootPlacement = walkingSave.bEnableFootPlacement; walking->bEnableAgainstWall = walkingSave.bEnableAgainstWall; walking->bAllowPickup = walkingSave.bAllowPickup; walking->AiAimPenalty = walkingSave.AiAimPenalty; walking->AiAimOneShotPenalty = walkingSave.AiAimOneShotPenalty; walking->MovementGroup = walkingSave.MovementGroup; walking->FirstPersonDPG = walkingSave.FirstPersonDPG; walking->FirstPersonLowerBodyDPG = walkingSave.FirstPersonLowerBodyDPG; walking->PreciseLocationInterpMode = walkingSave.PreciseLocationInterpMode; walking->AimMode = walkingSave.AimMode; walking->DisableMovementTime = walkingSave.DisableMovementTime; walking->DisableLookTime = walkingSave.DisableLookTime; walking->LastCanDoMoveTime = walkingSave.LastCanDoMoveTime; walking->LastStopMoveTime = walkingSave.LastStopMoveTime; walking->MoveActiveTime = walkingSave.MoveActiveTime; walking->RedoMoveTime = walkingSave.RedoMoveTime; walking->PreciseLocationSpeed = walkingSave.PreciseLocationSpeed; walking->PreciseLocation = walkingSave.PreciseLocation; walking->PreciseRotationInterpolationTime = walkingSave.PreciseRotationInterpolationTime; walking->PreciseRotation = walkingSave.PreciseRotation; walking->LookAtTargetLocation = walkingSave.LookAtTargetLocation; walking->LookAtTargetAngle = walkingSave.LookAtTargetAngle; walking->LookAtTargetInterpolationTime = walkingSave.LookAtTargetInterpolationTime; walking->LookAtTargetDuration = walkingSave.LookAtTargetDuration; walking->CancelResetCameraLookTime = walkingSave.CancelResetCameraLookTime; walking->ResetCameraLookTime = walkingSave.ResetCameraLookTime; walking->MinLookConstraint = walkingSave.MinLookConstraint; walking->MaxLookConstraint = walkingSave.MaxLookConstraint; walking->CustomCollisionRadius = walkingSave.CustomCollisionRadius; walking->CustomCollisionHeight = walkingSave.CustomCollisionHeight; walking->WeaponInactivePitchAimingLimit = walkingSave.WeaponInactivePitchAimingLimit; walking->RootMotionScale = walkingSave.RootMotionScale; walking->RootOffset = walkingSave.RootOffset; walking->SwanNeckEnableAtPitch = walkingSave.SwanNeckEnableAtPitch; walking->SwanNeckForward = walkingSave.SwanNeckForward; walking->SwanNeckDown = walkingSave.SwanNeckDown; walking->AnimBlendTime = walkingSave.AnimBlendTime; walking->StickyAngle = walkingSave.StickyAngle; walking->StickyAimedModifier = walkingSave.StickyAimedModifier; walking->Timer = walkingSave.Timer; walking->PawnPhysics = walkingSave.PawnPhysics; walking->HandPlantExtentCheckHeight = walkingSave.HandPlantExtentCheckHeight; walking->HandPlantExtentCheckWidth = walkingSave.HandPlantExtentCheckWidth; walking->HandPlantCheckDistance = walkingSave.HandPlantCheckDistance; walking->HandPlantCheckHeight = walkingSave.HandPlantCheckHeight; walking->ContextMoveDistanceMultiplier = walkingSave.ContextMoveDistanceMultiplier; walking->bCheckForGrab = walkingSave.bCheckForGrab; walking->bCheckForVaultOver = walkingSave.bCheckForVaultOver; walking->bCheckForWallClimb = walkingSave.bCheckForWallClimb; walking->bCheckForEdgeInVelDir = walkingSave.bCheckForEdgeInVelDir; walking->bCheckExitToFalling = walkingSave.bCheckExitToFalling; walking->bCheckExitToUncontrolledFalling = walkingSave.bCheckExitToUncontrolledFalling; walking->bCheckForSoftLanding = walkingSave.bCheckForSoftLanding; walking->bDelayTimeCheckAutoMoves = walkingSave.bDelayTimeCheckAutoMoves; walking->ExitToFallingZSpeed = walkingSave.ExitToFallingZSpeed; walking->SoftLandingZSpeedThreshold = walkingSave.SoftLandingZSpeedThreshold; walking->TimeToSoftLandingThreshold = walkingSave.TimeToSoftLandingThreshold; walking->bIsPlayingIdleAnim = walkingSave.bIsPlayingIdleAnim; walking->TriggerIdleAnimMinTime = walkingSave.TriggerIdleAnimMinTime; walking->TriggerIdleAnimMaxTime = walkingSave.TriggerIdleAnimMaxTime;
	}

	auto falling = static_cast<Classes::UTdMove_Falling *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Falling)]);
	if (falling) {
		falling->SpeedModifier = fallingSave.SpeedModifier; falling->FrictionModifier = fallingSave.FrictionModifier; falling->bDebugMove = fallingSave.bDebugMove; falling->bTriggersCompliment = fallingSave.bTriggersCompliment; falling->bDisableCollision = fallingSave.bDisableCollision; falling->bShouldHolsterWeapon = fallingSave.bShouldHolsterWeapon; falling->bShouldUnzoom = fallingSave.bShouldUnzoom; falling->bIsTimedMove = fallingSave.bIsTimedMove; falling->bConstrainLook = fallingSave.bConstrainLook; falling->bUseAbsoluteYawConstraint = fallingSave.bUseAbsoluteYawConstraint; falling->bDisableActorCollision = fallingSave.bDisableActorCollision; falling->bLookAtTargetLocation = fallingSave.bLookAtTargetLocation; falling->bLookAtTargetAngle = fallingSave.bLookAtTargetAngle; falling->bDisableFaceRotation = fallingSave.bDisableFaceRotation; falling->bDisableControllerFacingPawnYawRotation = fallingSave.bDisableControllerFacingPawnYawRotation; falling->bAvoidLedges = fallingSave.bAvoidLedges; falling->bUsePreciseLocation = fallingSave.bUsePreciseLocation; falling->bReachedPreciseLocation = fallingSave.bReachedPreciseLocation; falling->bDebugPreciseLocation = fallingSave.bDebugPreciseLocation; falling->bUsePreciseRotation = fallingSave.bUsePreciseRotation; falling->bReachedPreciseRotation = fallingSave.bReachedPreciseRotation; falling->bDelayRotationAndLocationCallback = fallingSave.bDelayRotationAndLocationCallback; falling->bResetCameraLook = fallingSave.bResetCameraLook; falling->bUseCustomCollision = fallingSave.bUseCustomCollision; falling->bUseCameraCollision = fallingSave.bUseCameraCollision; falling->bTwoHandedFullBodyAnimations = fallingSave.bTwoHandedFullBodyAnimations; falling->bStickyAim = fallingSave.bStickyAim; falling->bStopAfterMove = fallingSave.bStopAfterMove; falling->bEnableFootPlacement = fallingSave.bEnableFootPlacement; falling->bEnableAgainstWall = fallingSave.bEnableAgainstWall; falling->bAllowPickup = fallingSave.bAllowPickup; falling->AiAimPenalty = fallingSave.AiAimPenalty; falling->AiAimOneShotPenalty = fallingSave.AiAimOneShotPenalty; falling->MovementGroup = fallingSave.MovementGroup; falling->FirstPersonDPG = fallingSave.FirstPersonDPG; falling->FirstPersonLowerBodyDPG = fallingSave.FirstPersonLowerBodyDPG; falling->PreciseLocationInterpMode = fallingSave.PreciseLocationInterpMode; falling->AimMode = fallingSave.AimMode; falling->DisableMovementTime = fallingSave.DisableMovementTime; falling->DisableLookTime = fallingSave.DisableLookTime; falling->LastCanDoMoveTime = fallingSave.LastCanDoMoveTime; falling->LastStopMoveTime = fallingSave.LastStopMoveTime; falling->MoveActiveTime = fallingSave.MoveActiveTime; falling->RedoMoveTime = fallingSave.RedoMoveTime; falling->PreciseLocationSpeed = fallingSave.PreciseLocationSpeed; falling->PreciseLocation = fallingSave.PreciseLocation; falling->PreciseRotationInterpolationTime = fallingSave.PreciseRotationInterpolationTime; falling->PreciseRotation = fallingSave.PreciseRotation; falling->LookAtTargetLocation = fallingSave.LookAtTargetLocation; falling->LookAtTargetAngle = fallingSave.LookAtTargetAngle; falling->LookAtTargetInterpolationTime = fallingSave.LookAtTargetInterpolationTime; falling->LookAtTargetDuration = fallingSave.LookAtTargetDuration; falling->CancelResetCameraLookTime = fallingSave.CancelResetCameraLookTime; falling->ResetCameraLookTime = fallingSave.ResetCameraLookTime; falling->MinLookConstraint = fallingSave.MinLookConstraint; falling->MaxLookConstraint = fallingSave.MaxLookConstraint; falling->CustomCollisionRadius = fallingSave.CustomCollisionRadius; falling->CustomCollisionHeight = fallingSave.CustomCollisionHeight; falling->WeaponInactivePitchAimingLimit = fallingSave.WeaponInactivePitchAimingLimit; falling->RootMotionScale = fallingSave.RootMotionScale; falling->RootOffset = fallingSave.RootOffset; falling->SwanNeckEnableAtPitch = fallingSave.SwanNeckEnableAtPitch; falling->SwanNeckForward = fallingSave.SwanNeckForward; falling->SwanNeckDown = fallingSave.SwanNeckDown; falling->AnimBlendTime = fallingSave.AnimBlendTime; falling->StickyAngle = fallingSave.StickyAngle; falling->StickyAimedModifier = fallingSave.StickyAimedModifier; falling->Timer = fallingSave.Timer; falling->PawnPhysics = fallingSave.PawnPhysics; falling->HandPlantExtentCheckHeight = fallingSave.HandPlantExtentCheckHeight; falling->HandPlantExtentCheckWidth = fallingSave.HandPlantExtentCheckWidth; falling->HandPlantCheckDistance = fallingSave.HandPlantCheckDistance; falling->HandPlantCheckHeight = fallingSave.HandPlantCheckHeight; falling->ContextMoveDistanceMultiplier = fallingSave.ContextMoveDistanceMultiplier; falling->bCheckForGrab = fallingSave.bCheckForGrab; falling->bCheckForVaultOver = fallingSave.bCheckForVaultOver; falling->bCheckForWallClimb = fallingSave.bCheckForWallClimb; falling->bCheckForEdgeInVelDir = fallingSave.bCheckForEdgeInVelDir; falling->bCheckExitToFalling = fallingSave.bCheckExitToFalling; falling->bCheckExitToUncontrolledFalling = fallingSave.bCheckExitToUncontrolledFalling; falling->bCheckForSoftLanding = fallingSave.bCheckForSoftLanding; falling->bDelayTimeCheckAutoMoves = fallingSave.bDelayTimeCheckAutoMoves; falling->ExitToFallingZSpeed = fallingSave.ExitToFallingZSpeed; falling->SoftLandingZSpeedThreshold = fallingSave.SoftLandingZSpeedThreshold; falling->TimeToSoftLandingThreshold = fallingSave.TimeToSoftLandingThreshold; falling->StickyAimAfterAirTime = fallingSave.StickyAimAfterAirTime; falling->AirTime = fallingSave.AirTime; falling->bCloseToGround = fallingSave.bCloseToGround; falling->PreviousMove = fallingSave.PreviousMove;
	}

	auto wallRunRight = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningRight)]);
	if (wallRunRight) {
		wallRunRight->SpeedModifier = wallRunRightSave.SpeedModifier; wallRunRight->FrictionModifier = wallRunRightSave.FrictionModifier; wallRunRight->bDebugMove = wallRunRightSave.bDebugMove; wallRunRight->bTriggersCompliment = wallRunRightSave.bTriggersCompliment; wallRunRight->bDisableCollision = wallRunRightSave.bDisableCollision; wallRunRight->bShouldHolsterWeapon = wallRunRightSave.bShouldHolsterWeapon; wallRunRight->bShouldUnzoom = wallRunRightSave.bShouldUnzoom; wallRunRight->bIsTimedMove = wallRunRightSave.bIsTimedMove; wallRunRight->bConstrainLook = wallRunRightSave.bConstrainLook; wallRunRight->bUseAbsoluteYawConstraint = wallRunRightSave.bUseAbsoluteYawConstraint; wallRunRight->bDisableActorCollision = wallRunRightSave.bDisableActorCollision; wallRunRight->bLookAtTargetLocation = wallRunRightSave.bLookAtTargetLocation; wallRunRight->bLookAtTargetAngle = wallRunRightSave.bLookAtTargetAngle; wallRunRight->bDisableFaceRotation = wallRunRightSave.bDisableFaceRotation; wallRunRight->bDisableControllerFacingPawnYawRotation = wallRunRightSave.bDisableControllerFacingPawnYawRotation; wallRunRight->bAvoidLedges = wallRunRightSave.bAvoidLedges; wallRunRight->bUsePreciseLocation = wallRunRightSave.bUsePreciseLocation; wallRunRight->bReachedPreciseLocation = wallRunRightSave.bReachedPreciseLocation; wallRunRight->bDebugPreciseLocation = wallRunRightSave.bDebugPreciseLocation; wallRunRight->bUsePreciseRotation = wallRunRightSave.bUsePreciseRotation; wallRunRight->bReachedPreciseRotation = wallRunRightSave.bReachedPreciseRotation; wallRunRight->bDelayRotationAndLocationCallback = wallRunRightSave.bDelayRotationAndLocationCallback; wallRunRight->bResetCameraLook = wallRunRightSave.bResetCameraLook; wallRunRight->bUseCustomCollision = wallRunRightSave.bUseCustomCollision; wallRunRight->bUseCameraCollision = wallRunRightSave.bUseCameraCollision; wallRunRight->bTwoHandedFullBodyAnimations = wallRunRightSave.bTwoHandedFullBodyAnimations; wallRunRight->bStickyAim = wallRunRightSave.bStickyAim; wallRunRight->bStopAfterMove = wallRunRightSave.bStopAfterMove; wallRunRight->bEnableFootPlacement = wallRunRightSave.bEnableFootPlacement; wallRunRight->bEnableAgainstWall = wallRunRightSave.bEnableAgainstWall; wallRunRight->bAllowPickup = wallRunRightSave.bAllowPickup; wallRunRight->AiAimPenalty = wallRunRightSave.AiAimPenalty; wallRunRight->AiAimOneShotPenalty = wallRunRightSave.AiAimOneShotPenalty; wallRunRight->MovementGroup = wallRunRightSave.MovementGroup; wallRunRight->FirstPersonDPG = wallRunRightSave.FirstPersonDPG; wallRunRight->FirstPersonLowerBodyDPG = wallRunRightSave.FirstPersonLowerBodyDPG; wallRunRight->PreciseLocationInterpMode = wallRunRightSave.PreciseLocationInterpMode; wallRunRight->AimMode = wallRunRightSave.AimMode; wallRunRight->DisableMovementTime = wallRunRightSave.DisableMovementTime; wallRunRight->DisableLookTime = wallRunRightSave.DisableLookTime; wallRunRight->LastCanDoMoveTime = wallRunRightSave.LastCanDoMoveTime; wallRunRight->LastStopMoveTime = wallRunRightSave.LastStopMoveTime; wallRunRight->MoveActiveTime = wallRunRightSave.MoveActiveTime; wallRunRight->RedoMoveTime = wallRunRightSave.RedoMoveTime; wallRunRight->PreciseLocationSpeed = wallRunRightSave.PreciseLocationSpeed; wallRunRight->PreciseLocation = wallRunRightSave.PreciseLocation; wallRunRight->PreciseRotationInterpolationTime = wallRunRightSave.PreciseRotationInterpolationTime; wallRunRight->PreciseRotation = wallRunRightSave.PreciseRotation; wallRunRight->LookAtTargetLocation = wallRunRightSave.LookAtTargetLocation; wallRunRight->LookAtTargetAngle = wallRunRightSave.LookAtTargetAngle; wallRunRight->LookAtTargetInterpolationTime = wallRunRightSave.LookAtTargetInterpolationTime; wallRunRight->LookAtTargetDuration = wallRunRightSave.LookAtTargetDuration; wallRunRight->CancelResetCameraLookTime = wallRunRightSave.CancelResetCameraLookTime; wallRunRight->ResetCameraLookTime = wallRunRightSave.ResetCameraLookTime; wallRunRight->MinLookConstraint = wallRunRightSave.MinLookConstraint; wallRunRight->MaxLookConstraint = wallRunRightSave.MaxLookConstraint; wallRunRight->CustomCollisionRadius = wallRunRightSave.CustomCollisionRadius; wallRunRight->CustomCollisionHeight = wallRunRightSave.CustomCollisionHeight; wallRunRight->WeaponInactivePitchAimingLimit = wallRunRightSave.WeaponInactivePitchAimingLimit; wallRunRight->RootMotionScale = wallRunRightSave.RootMotionScale; wallRunRight->RootOffset = wallRunRightSave.RootOffset; wallRunRight->SwanNeckEnableAtPitch = wallRunRightSave.SwanNeckEnableAtPitch; wallRunRight->SwanNeckForward = wallRunRightSave.SwanNeckForward; wallRunRight->SwanNeckDown = wallRunRightSave.SwanNeckDown; wallRunRight->AnimBlendTime = wallRunRightSave.AnimBlendTime; wallRunRight->StickyAngle = wallRunRightSave.StickyAngle; wallRunRight->StickyAimedModifier = wallRunRightSave.StickyAimedModifier; wallRunRight->Timer = wallRunRightSave.Timer; wallRunRight->PawnPhysics = wallRunRightSave.PawnPhysics; wallRunRight->HandPlantExtentCheckHeight = wallRunRightSave.HandPlantExtentCheckHeight; wallRunRight->HandPlantExtentCheckWidth = wallRunRightSave.HandPlantExtentCheckWidth; wallRunRight->HandPlantCheckDistance = wallRunRightSave.HandPlantCheckDistance; wallRunRight->HandPlantCheckHeight = wallRunRightSave.HandPlantCheckHeight; wallRunRight->ContextMoveDistanceMultiplier = wallRunRightSave.ContextMoveDistanceMultiplier; wallRunRight->bCheckForGrab = wallRunRightSave.bCheckForGrab; wallRunRight->bCheckForVaultOver = wallRunRightSave.bCheckForVaultOver; wallRunRight->bCheckForWallClimb = wallRunRightSave.bCheckForWallClimb; wallRunRight->bCheckForEdgeInVelDir = wallRunRightSave.bCheckForEdgeInVelDir; wallRunRight->bCheckExitToFalling = wallRunRightSave.bCheckExitToFalling; wallRunRight->bCheckExitToUncontrolledFalling = wallRunRightSave.bCheckExitToUncontrolledFalling; wallRunRight->bCheckForSoftLanding = wallRunRightSave.bCheckForSoftLanding; wallRunRight->bDelayTimeCheckAutoMoves = wallRunRightSave.bDelayTimeCheckAutoMoves; wallRunRight->ExitToFallingZSpeed = wallRunRightSave.ExitToFallingZSpeed; wallRunRight->SoftLandingZSpeedThreshold = wallRunRightSave.SoftLandingZSpeedThreshold; wallRunRight->TimeToSoftLandingThreshold = wallRunRightSave.TimeToSoftLandingThreshold; wallRunRight->WallRunningForwardCheckDistance = wallRunRightSave.WallRunningForwardCheckDistance; wallRunRight->WallRunningStrafeCheckDistance = wallRunRightSave.WallRunningStrafeCheckDistance; wallRunRight->WallRunningVerticalCheckDistance = wallRunRightSave.WallRunningVerticalCheckDistance; wallRunRight->WallRunningMinWallHeight = wallRunRightSave.WallRunningMinWallHeight; wallRunRight->WallRunningMinSpeed = wallRunRightSave.WallRunningMinSpeed; wallRunRight->WallRunningVelocityStartLimit = wallRunRightSave.WallRunningVelocityStartLimit; wallRunRight->WallRunningVelocityStopLimit = wallRunRightSave.WallRunningVelocityStopLimit; wallRunRight->WallRunningForwardMinStartAngle = wallRunRightSave.WallRunningForwardMinStartAngle; wallRunRight->WallRunningForwardMaxStartAngle = wallRunRightSave.WallRunningForwardMaxStartAngle; wallRunRight->WallRunningStrafeStartAngle = wallRunRightSave.WallRunningStrafeStartAngle; wallRunRight->WallRunningHorisontalFriction = wallRunRightSave.WallRunningHorisontalFriction; wallRunRight->WallRunningHorisontalInitialZHeight = wallRunRightSave.WallRunningHorisontalInitialZHeight; wallRunRight->WallRunningHorisontalAcceleration = wallRunRightSave.WallRunningHorisontalAcceleration; wallRunRight->WallRunningHorisontalDeceleration = wallRunRightSave.WallRunningHorisontalDeceleration; wallRunRight->WallRunningHorisontalAlignSpeed = wallRunRightSave.WallRunningHorisontalAlignSpeed; wallRunRight->WallRunningIntoWallrunBlendInTime = wallRunRightSave.WallRunningIntoWallrunBlendInTime; wallRunRight->WallRunningIntoWallrunBlendOutTime = wallRunRightSave.WallRunningIntoWallrunBlendOutTime; wallRunRight->PlayCameraHitWallEffect = wallRunRightSave.PlayCameraHitWallEffect; wallRunRight->bHasReachedWall = wallRunRightSave.bHasReachedWall; wallRunRight->bStartMovingIntoWall = wallRunRightSave.bStartMovingIntoWall; wallRunRight->bTurned90FromWall = wallRunRightSave.bTurned90FromWall; wallRunRight->bChangedConstraints = wallRunRightSave.bChangedConstraints; wallRunRight->WallRunningDelayPawnRotationTime = wallRunRightSave.WallRunningDelayPawnRotationTime; wallRunRight->WallRunningDistanceForIntoWall = wallRunRightSave.WallRunningDistanceForIntoWall; wallRunRight->WallRunningRotatePawnAlongWallTime = wallRunRightSave.WallRunningRotatePawnAlongWallTime; wallRunRight->WallRunningMoveToIntoPositionDegreeThreshold = wallRunRightSave.WallRunningMoveToIntoPositionDegreeThreshold; wallRunRight->MinimumVelocityIntoWall = wallRunRightSave.MinimumVelocityIntoWall; wallRunRight->MaximumVelocityIntoWall = wallRunRightSave.MaximumVelocityIntoWall; wallRunRight->WallrunStartUpperBodyAnimPlayRate = wallRunRightSave.WallrunStartUpperBodyAnimPlayRate; wallRunRight->LookAlongWallInterpolationTime = wallRunRightSave.LookAlongWallInterpolationTime; wallRunRight->WallRunningBeginSpeed = wallRunRightSave.WallRunningBeginSpeed; wallRunRight->NextMove = wallRunRightSave.NextMove; wallRunRight->WallNormal = wallRunRightSave.WallNormal; wallRunRight->PredictedWallHitLocation = wallRunRightSave.PredictedWallHitLocation; wallRunRight->IntoWallrunLocationTarget = wallRunRightSave.IntoWallrunLocationTarget; wallRunRight->ConsequtiveWallruns = wallRunRightSave.ConsequtiveWallruns; wallRunRight->MinContraintWorld = wallRunRightSave.MinContraintWorld; wallRunRight->MaxContraintWorld = wallRunRightSave.MaxContraintWorld;
	}

	auto wallRunLeft = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningLeft)]);
	if (wallRunLeft) {
		wallRunLeft->SpeedModifier = wallRunLeftSave.SpeedModifier; wallRunLeft->FrictionModifier = wallRunLeftSave.FrictionModifier; wallRunLeft->bDebugMove = wallRunLeftSave.bDebugMove; wallRunLeft->bTriggersCompliment = wallRunLeftSave.bTriggersCompliment; wallRunLeft->bDisableCollision = wallRunLeftSave.bDisableCollision; wallRunLeft->bShouldHolsterWeapon = wallRunLeftSave.bShouldHolsterWeapon; wallRunLeft->bShouldUnzoom = wallRunLeftSave.bShouldUnzoom; wallRunLeft->bIsTimedMove = wallRunLeftSave.bIsTimedMove; wallRunLeft->bConstrainLook = wallRunLeftSave.bConstrainLook; wallRunLeft->bUseAbsoluteYawConstraint = wallRunLeftSave.bUseAbsoluteYawConstraint; wallRunLeft->bDisableActorCollision = wallRunLeftSave.bDisableActorCollision; wallRunLeft->bLookAtTargetLocation = wallRunLeftSave.bLookAtTargetLocation; wallRunLeft->bLookAtTargetAngle = wallRunLeftSave.bLookAtTargetAngle; wallRunLeft->bDisableFaceRotation = wallRunLeftSave.bDisableFaceRotation; wallRunLeft->bDisableControllerFacingPawnYawRotation = wallRunLeftSave.bDisableControllerFacingPawnYawRotation; wallRunLeft->bAvoidLedges = wallRunLeftSave.bAvoidLedges; wallRunLeft->bUsePreciseLocation = wallRunLeftSave.bUsePreciseLocation; wallRunLeft->bReachedPreciseLocation = wallRunLeftSave.bReachedPreciseLocation; wallRunLeft->bDebugPreciseLocation = wallRunLeftSave.bDebugPreciseLocation; wallRunLeft->bUsePreciseRotation = wallRunLeftSave.bUsePreciseRotation; wallRunLeft->bReachedPreciseRotation = wallRunLeftSave.bReachedPreciseRotation; wallRunLeft->bDelayRotationAndLocationCallback = wallRunLeftSave.bDelayRotationAndLocationCallback; wallRunLeft->bResetCameraLook = wallRunLeftSave.bResetCameraLook; wallRunLeft->bUseCustomCollision = wallRunLeftSave.bUseCustomCollision; wallRunLeft->bUseCameraCollision = wallRunLeftSave.bUseCameraCollision; wallRunLeft->bTwoHandedFullBodyAnimations = wallRunLeftSave.bTwoHandedFullBodyAnimations; wallRunLeft->bStickyAim = wallRunLeftSave.bStickyAim; wallRunLeft->bStopAfterMove = wallRunLeftSave.bStopAfterMove; wallRunLeft->bEnableFootPlacement = wallRunLeftSave.bEnableFootPlacement; wallRunLeft->bEnableAgainstWall = wallRunLeftSave.bEnableAgainstWall; wallRunLeft->bAllowPickup = wallRunLeftSave.bAllowPickup; wallRunLeft->AiAimPenalty = wallRunLeftSave.AiAimPenalty; wallRunLeft->AiAimOneShotPenalty = wallRunLeftSave.AiAimOneShotPenalty; wallRunLeft->MovementGroup = wallRunLeftSave.MovementGroup; wallRunLeft->FirstPersonDPG = wallRunLeftSave.FirstPersonDPG; wallRunLeft->FirstPersonLowerBodyDPG = wallRunLeftSave.FirstPersonLowerBodyDPG; wallRunLeft->PreciseLocationInterpMode = wallRunLeftSave.PreciseLocationInterpMode; wallRunLeft->AimMode = wallRunLeftSave.AimMode; wallRunLeft->DisableMovementTime = wallRunLeftSave.DisableMovementTime; wallRunLeft->DisableLookTime = wallRunLeftSave.DisableLookTime; wallRunLeft->LastCanDoMoveTime = wallRunLeftSave.LastCanDoMoveTime; wallRunLeft->LastStopMoveTime = wallRunLeftSave.LastStopMoveTime; wallRunLeft->MoveActiveTime = wallRunLeftSave.MoveActiveTime; wallRunLeft->RedoMoveTime = wallRunLeftSave.RedoMoveTime; wallRunLeft->PreciseLocationSpeed = wallRunLeftSave.PreciseLocationSpeed; wallRunLeft->PreciseLocation = wallRunLeftSave.PreciseLocation; wallRunLeft->PreciseRotationInterpolationTime = wallRunLeftSave.PreciseRotationInterpolationTime; wallRunLeft->PreciseRotation = wallRunLeftSave.PreciseRotation; wallRunLeft->LookAtTargetLocation = wallRunLeftSave.LookAtTargetLocation; wallRunLeft->LookAtTargetAngle = wallRunLeftSave.LookAtTargetAngle; wallRunLeft->LookAtTargetInterpolationTime = wallRunLeftSave.LookAtTargetInterpolationTime; wallRunLeft->LookAtTargetDuration = wallRunLeftSave.LookAtTargetDuration; wallRunLeft->CancelResetCameraLookTime = wallRunLeftSave.CancelResetCameraLookTime; wallRunLeft->ResetCameraLookTime = wallRunLeftSave.ResetCameraLookTime; wallRunLeft->MinLookConstraint = wallRunLeftSave.MinLookConstraint; wallRunLeft->MaxLookConstraint = wallRunLeftSave.MaxLookConstraint; wallRunLeft->CustomCollisionRadius = wallRunLeftSave.CustomCollisionRadius; wallRunLeft->CustomCollisionHeight = wallRunLeftSave.CustomCollisionHeight; wallRunLeft->WeaponInactivePitchAimingLimit = wallRunLeftSave.WeaponInactivePitchAimingLimit; wallRunLeft->RootMotionScale = wallRunLeftSave.RootMotionScale; wallRunLeft->RootOffset = wallRunLeftSave.RootOffset; wallRunLeft->SwanNeckEnableAtPitch = wallRunLeftSave.SwanNeckEnableAtPitch; wallRunLeft->SwanNeckForward = wallRunLeftSave.SwanNeckForward; wallRunLeft->SwanNeckDown = wallRunLeftSave.SwanNeckDown; wallRunLeft->AnimBlendTime = wallRunLeftSave.AnimBlendTime; wallRunLeft->StickyAngle = wallRunLeftSave.StickyAngle; wallRunLeft->StickyAimedModifier = wallRunLeftSave.StickyAimedModifier; wallRunLeft->Timer = wallRunLeftSave.Timer; wallRunLeft->PawnPhysics = wallRunLeftSave.PawnPhysics; wallRunLeft->HandPlantExtentCheckHeight = wallRunLeftSave.HandPlantExtentCheckHeight; wallRunLeft->HandPlantExtentCheckWidth = wallRunLeftSave.HandPlantExtentCheckWidth; wallRunLeft->HandPlantCheckDistance = wallRunLeftSave.HandPlantCheckDistance; wallRunLeft->HandPlantCheckHeight = wallRunLeftSave.HandPlantCheckHeight; wallRunLeft->ContextMoveDistanceMultiplier = wallRunLeftSave.ContextMoveDistanceMultiplier; wallRunLeft->bCheckForGrab = wallRunLeftSave.bCheckForGrab; wallRunLeft->bCheckForVaultOver = wallRunLeftSave.bCheckForVaultOver; wallRunLeft->bCheckForWallClimb = wallRunLeftSave.bCheckForWallClimb; wallRunLeft->bCheckForEdgeInVelDir = wallRunLeftSave.bCheckForEdgeInVelDir; wallRunLeft->bCheckExitToFalling = wallRunLeftSave.bCheckExitToFalling; wallRunLeft->bCheckExitToUncontrolledFalling = wallRunLeftSave.bCheckExitToUncontrolledFalling; wallRunLeft->bCheckForSoftLanding = wallRunLeftSave.bCheckForSoftLanding; wallRunLeft->bDelayTimeCheckAutoMoves = wallRunLeftSave.bDelayTimeCheckAutoMoves; wallRunLeft->ExitToFallingZSpeed = wallRunLeftSave.ExitToFallingZSpeed; wallRunLeft->SoftLandingZSpeedThreshold = wallRunLeftSave.SoftLandingZSpeedThreshold; wallRunLeft->TimeToSoftLandingThreshold = wallRunLeftSave.TimeToSoftLandingThreshold; wallRunLeft->WallRunningForwardCheckDistance = wallRunLeftSave.WallRunningForwardCheckDistance; wallRunLeft->WallRunningStrafeCheckDistance = wallRunLeftSave.WallRunningStrafeCheckDistance; wallRunLeft->WallRunningVerticalCheckDistance = wallRunLeftSave.WallRunningVerticalCheckDistance; wallRunLeft->WallRunningMinWallHeight = wallRunLeftSave.WallRunningMinWallHeight; wallRunLeft->WallRunningMinSpeed = wallRunLeftSave.WallRunningMinSpeed; wallRunLeft->WallRunningVelocityStartLimit = wallRunLeftSave.WallRunningVelocityStartLimit; wallRunLeft->WallRunningVelocityStopLimit = wallRunLeftSave.WallRunningVelocityStopLimit; wallRunLeft->WallRunningForwardMinStartAngle = wallRunLeftSave.WallRunningForwardMinStartAngle; wallRunLeft->WallRunningForwardMaxStartAngle = wallRunLeftSave.WallRunningForwardMaxStartAngle; wallRunLeft->WallRunningStrafeStartAngle = wallRunLeftSave.WallRunningStrafeStartAngle; wallRunLeft->WallRunningHorisontalFriction = wallRunLeftSave.WallRunningHorisontalFriction; wallRunLeft->WallRunningHorisontalInitialZHeight = wallRunLeftSave.WallRunningHorisontalInitialZHeight; wallRunLeft->WallRunningHorisontalAcceleration = wallRunLeftSave.WallRunningHorisontalAcceleration; wallRunLeft->WallRunningHorisontalDeceleration = wallRunLeftSave.WallRunningHorisontalDeceleration; wallRunLeft->WallRunningHorisontalAlignSpeed = wallRunLeftSave.WallRunningHorisontalAlignSpeed; wallRunLeft->WallRunningIntoWallrunBlendInTime = wallRunLeftSave.WallRunningIntoWallrunBlendInTime; wallRunLeft->WallRunningIntoWallrunBlendOutTime = wallRunLeftSave.WallRunningIntoWallrunBlendOutTime; wallRunLeft->PlayCameraHitWallEffect = wallRunLeftSave.PlayCameraHitWallEffect; wallRunLeft->bHasReachedWall = wallRunLeftSave.bHasReachedWall; wallRunLeft->bStartMovingIntoWall = wallRunLeftSave.bStartMovingIntoWall; wallRunLeft->bTurned90FromWall = wallRunLeftSave.bTurned90FromWall; wallRunLeft->bChangedConstraints = wallRunLeftSave.bChangedConstraints; wallRunLeft->WallRunningDelayPawnRotationTime = wallRunLeftSave.WallRunningDelayPawnRotationTime; wallRunLeft->WallRunningDistanceForIntoWall = wallRunLeftSave.WallRunningDistanceForIntoWall; wallRunLeft->WallRunningRotatePawnAlongWallTime = wallRunLeftSave.WallRunningRotatePawnAlongWallTime; wallRunLeft->WallRunningMoveToIntoPositionDegreeThreshold = wallRunLeftSave.WallRunningMoveToIntoPositionDegreeThreshold; wallRunLeft->MinimumVelocityIntoWall = wallRunLeftSave.MinimumVelocityIntoWall; wallRunLeft->MaximumVelocityIntoWall = wallRunLeftSave.MaximumVelocityIntoWall; wallRunLeft->WallrunStartUpperBodyAnimPlayRate = wallRunLeftSave.WallrunStartUpperBodyAnimPlayRate; wallRunLeft->LookAlongWallInterpolationTime = wallRunLeftSave.LookAlongWallInterpolationTime; wallRunLeft->WallRunningBeginSpeed = wallRunLeftSave.WallRunningBeginSpeed; wallRunLeft->NextMove = wallRunLeftSave.NextMove; wallRunLeft->WallNormal = wallRunLeftSave.WallNormal; wallRunLeft->PredictedWallHitLocation = wallRunLeftSave.PredictedWallHitLocation; wallRunLeft->IntoWallrunLocationTarget = wallRunLeftSave.IntoWallrunLocationTarget; wallRunLeft->ConsequtiveWallruns = wallRunLeftSave.ConsequtiveWallruns; wallRunLeft->MinContraintWorld = wallRunLeftSave.MinContraintWorld; wallRunLeft->MaxContraintWorld = wallRunLeftSave.MaxContraintWorld;
	}

	auto jump = static_cast<Classes::UTdMove_Jump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Jump)]);
	if (jump) {
		jump->SpeedModifier = jumpSave.SpeedModifier; jump->FrictionModifier = jumpSave.FrictionModifier; jump->bDebugMove = jumpSave.bDebugMove; jump->bTriggersCompliment = jumpSave.bTriggersCompliment; jump->bDisableCollision = jumpSave.bDisableCollision; jump->bShouldHolsterWeapon = jumpSave.bShouldHolsterWeapon; jump->bShouldUnzoom = jumpSave.bShouldUnzoom; jump->bIsTimedMove = jumpSave.bIsTimedMove; jump->bConstrainLook = jumpSave.bConstrainLook; jump->bUseAbsoluteYawConstraint = jumpSave.bUseAbsoluteYawConstraint; jump->bDisableActorCollision = jumpSave.bDisableActorCollision; jump->bLookAtTargetLocation = jumpSave.bLookAtTargetLocation; jump->bLookAtTargetAngle = jumpSave.bLookAtTargetAngle; jump->bDisableFaceRotation = jumpSave.bDisableFaceRotation; jump->bDisableControllerFacingPawnYawRotation = jumpSave.bDisableControllerFacingPawnYawRotation; jump->bAvoidLedges = jumpSave.bAvoidLedges; jump->bUsePreciseLocation = jumpSave.bUsePreciseLocation; jump->bReachedPreciseLocation = jumpSave.bReachedPreciseLocation; jump->bDebugPreciseLocation = jumpSave.bDebugPreciseLocation; jump->bUsePreciseRotation = jumpSave.bUsePreciseRotation; jump->bReachedPreciseRotation = jumpSave.bReachedPreciseRotation; jump->bDelayRotationAndLocationCallback = jumpSave.bDelayRotationAndLocationCallback; jump->bResetCameraLook = jumpSave.bResetCameraLook; jump->bUseCustomCollision = jumpSave.bUseCustomCollision; jump->bUseCameraCollision = jumpSave.bUseCameraCollision; jump->bTwoHandedFullBodyAnimations = jumpSave.bTwoHandedFullBodyAnimations; jump->bStickyAim = jumpSave.bStickyAim; jump->bStopAfterMove = jumpSave.bStopAfterMove; jump->bEnableFootPlacement = jumpSave.bEnableFootPlacement; jump->bEnableAgainstWall = jumpSave.bEnableAgainstWall; jump->bAllowPickup = jumpSave.bAllowPickup; jump->AiAimPenalty = jumpSave.AiAimPenalty; jump->AiAimOneShotPenalty = jumpSave.AiAimOneShotPenalty; jump->MovementGroup = jumpSave.MovementGroup; jump->FirstPersonDPG = jumpSave.FirstPersonDPG; jump->FirstPersonLowerBodyDPG = jumpSave.FirstPersonLowerBodyDPG; jump->PreciseLocationInterpMode = jumpSave.PreciseLocationInterpMode; jump->AimMode = jumpSave.AimMode; jump->DisableMovementTime = jumpSave.DisableMovementTime; jump->DisableLookTime = jumpSave.DisableLookTime; jump->LastCanDoMoveTime = jumpSave.LastCanDoMoveTime; jump->LastStopMoveTime = jumpSave.LastStopMoveTime; jump->MoveActiveTime = jumpSave.MoveActiveTime; jump->RedoMoveTime = jumpSave.RedoMoveTime; jump->PreciseLocationSpeed = jumpSave.PreciseLocationSpeed; jump->PreciseLocation = jumpSave.PreciseLocation; jump->PreciseRotationInterpolationTime = jumpSave.PreciseRotationInterpolationTime; jump->PreciseRotation = jumpSave.PreciseRotation; jump->LookAtTargetLocation = jumpSave.LookAtTargetLocation; jump->LookAtTargetAngle = jumpSave.LookAtTargetAngle; jump->LookAtTargetInterpolationTime = jumpSave.LookAtTargetInterpolationTime; jump->LookAtTargetDuration = jumpSave.LookAtTargetDuration; jump->CancelResetCameraLookTime = jumpSave.CancelResetCameraLookTime; jump->ResetCameraLookTime = jumpSave.ResetCameraLookTime; jump->MinLookConstraint = jumpSave.MinLookConstraint; jump->MaxLookConstraint = jumpSave.MaxLookConstraint; jump->CustomCollisionRadius = jumpSave.CustomCollisionRadius; jump->CustomCollisionHeight = jumpSave.CustomCollisionHeight; jump->WeaponInactivePitchAimingLimit = jumpSave.WeaponInactivePitchAimingLimit; jump->RootMotionScale = jumpSave.RootMotionScale; jump->RootOffset = jumpSave.RootOffset; jump->SwanNeckEnableAtPitch = jumpSave.SwanNeckEnableAtPitch; jump->SwanNeckForward = jumpSave.SwanNeckForward; jump->SwanNeckDown = jumpSave.SwanNeckDown; jump->AnimBlendTime = jumpSave.AnimBlendTime; jump->StickyAngle = jumpSave.StickyAngle; jump->StickyAimedModifier = jumpSave.StickyAimedModifier; jump->Timer = jumpSave.Timer; jump->PawnPhysics = jumpSave.PawnPhysics; jump->HandPlantExtentCheckHeight = jumpSave.HandPlantExtentCheckHeight; jump->HandPlantExtentCheckWidth = jumpSave.HandPlantExtentCheckWidth; jump->HandPlantCheckDistance = jumpSave.HandPlantCheckDistance; jump->HandPlantCheckHeight = jumpSave.HandPlantCheckHeight; jump->ContextMoveDistanceMultiplier = jumpSave.ContextMoveDistanceMultiplier; jump->bCheckForGrab = jumpSave.bCheckForGrab; jump->bCheckForVaultOver = jumpSave.bCheckForVaultOver; jump->bCheckForWallClimb = jumpSave.bCheckForWallClimb; jump->bCheckForEdgeInVelDir = jumpSave.bCheckForEdgeInVelDir; jump->bCheckExitToFalling = jumpSave.bCheckExitToFalling; jump->bCheckExitToUncontrolledFalling = jumpSave.bCheckExitToUncontrolledFalling; jump->bCheckForSoftLanding = jumpSave.bCheckForSoftLanding; jump->bDelayTimeCheckAutoMoves = jumpSave.bDelayTimeCheckAutoMoves; jump->ExitToFallingZSpeed = jumpSave.ExitToFallingZSpeed; jump->SoftLandingZSpeedThreshold = jumpSave.SoftLandingZSpeedThreshold; jump->TimeToSoftLandingThreshold = jumpSave.TimeToSoftLandingThreshold; jump->BaseJumpZ = jumpSave.BaseJumpZ; jump->BaseJumpZHeavy = jumpSave.BaseJumpZHeavy; jump->JumpAddXY = jumpSave.JumpAddXY; jump->LongJumpSlowThreshold = jumpSave.LongJumpSlowThreshold; jump->LongJumpNormalThreshold = jumpSave.LongJumpNormalThreshold; jump->LongJumpFastThreshold = jumpSave.LongJumpFastThreshold; jump->JumpBlendInTime = jumpSave.JumpBlendInTime; jump->JumpBlendOutTime = jumpSave.JumpBlendOutTime; jump->JumpStillBlendOutTime = jumpSave.JumpStillBlendOutTime; jump->PreJumpMomentum = jumpSave.PreJumpMomentum; jump->WantedJumpVelocity = jumpSave.WantedJumpVelocity; jump->CanDoMoveTaserLimit = jumpSave.CanDoMoveTaserLimit;
	}

	auto fallingUncontrolled = static_cast<Classes::UTdMove_FallingUncontrolled *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_FallingUncontrolled)]);
	if (fallingUncontrolled) {
		fallingUncontrolled->SpeedModifier = fallingUncontrolledSave.SpeedModifier; fallingUncontrolled->FrictionModifier = fallingUncontrolledSave.FrictionModifier; fallingUncontrolled->bDebugMove = fallingUncontrolledSave.bDebugMove; fallingUncontrolled->bTriggersCompliment = fallingUncontrolledSave.bTriggersCompliment; fallingUncontrolled->bDisableCollision = fallingUncontrolledSave.bDisableCollision; fallingUncontrolled->bShouldHolsterWeapon = fallingUncontrolledSave.bShouldHolsterWeapon; fallingUncontrolled->bShouldUnzoom = fallingUncontrolledSave.bShouldUnzoom; fallingUncontrolled->bIsTimedMove = fallingUncontrolledSave.bIsTimedMove; fallingUncontrolled->bConstrainLook = fallingUncontrolledSave.bConstrainLook; fallingUncontrolled->bUseAbsoluteYawConstraint = fallingUncontrolledSave.bUseAbsoluteYawConstraint; fallingUncontrolled->bDisableActorCollision = fallingUncontrolledSave.bDisableActorCollision; fallingUncontrolled->bLookAtTargetLocation = fallingUncontrolledSave.bLookAtTargetLocation; fallingUncontrolled->bLookAtTargetAngle = fallingUncontrolledSave.bLookAtTargetAngle; fallingUncontrolled->bDisableFaceRotation = fallingUncontrolledSave.bDisableFaceRotation; fallingUncontrolled->bDisableControllerFacingPawnYawRotation = fallingUncontrolledSave.bDisableControllerFacingPawnYawRotation; fallingUncontrolled->bAvoidLedges = fallingUncontrolledSave.bAvoidLedges; fallingUncontrolled->bUsePreciseLocation = fallingUncontrolledSave.bUsePreciseLocation; fallingUncontrolled->bReachedPreciseLocation = fallingUncontrolledSave.bReachedPreciseLocation; fallingUncontrolled->bDebugPreciseLocation = fallingUncontrolledSave.bDebugPreciseLocation; fallingUncontrolled->bUsePreciseRotation = fallingUncontrolledSave.bUsePreciseRotation; fallingUncontrolled->bReachedPreciseRotation = fallingUncontrolledSave.bReachedPreciseRotation; fallingUncontrolled->bDelayRotationAndLocationCallback = fallingUncontrolledSave.bDelayRotationAndLocationCallback; fallingUncontrolled->bResetCameraLook = fallingUncontrolledSave.bResetCameraLook; fallingUncontrolled->bUseCustomCollision = fallingUncontrolledSave.bUseCustomCollision; fallingUncontrolled->bUseCameraCollision = fallingUncontrolledSave.bUseCameraCollision; fallingUncontrolled->bTwoHandedFullBodyAnimations = fallingUncontrolledSave.bTwoHandedFullBodyAnimations; fallingUncontrolled->bStickyAim = fallingUncontrolledSave.bStickyAim; fallingUncontrolled->bStopAfterMove = fallingUncontrolledSave.bStopAfterMove; fallingUncontrolled->bEnableFootPlacement = fallingUncontrolledSave.bEnableFootPlacement; fallingUncontrolled->bEnableAgainstWall = fallingUncontrolledSave.bEnableAgainstWall; fallingUncontrolled->bAllowPickup = fallingUncontrolledSave.bAllowPickup; fallingUncontrolled->AiAimPenalty = fallingUncontrolledSave.AiAimPenalty; fallingUncontrolled->AiAimOneShotPenalty = fallingUncontrolledSave.AiAimOneShotPenalty; fallingUncontrolled->MovementGroup = fallingUncontrolledSave.MovementGroup; fallingUncontrolled->FirstPersonDPG = fallingUncontrolledSave.FirstPersonDPG; fallingUncontrolled->FirstPersonLowerBodyDPG = fallingUncontrolledSave.FirstPersonLowerBodyDPG; fallingUncontrolled->PreciseLocationInterpMode = fallingUncontrolledSave.PreciseLocationInterpMode; fallingUncontrolled->AimMode = fallingUncontrolledSave.AimMode; fallingUncontrolled->DisableMovementTime = fallingUncontrolledSave.DisableMovementTime; fallingUncontrolled->DisableLookTime = fallingUncontrolledSave.DisableLookTime; fallingUncontrolled->LastCanDoMoveTime = fallingUncontrolledSave.LastCanDoMoveTime; fallingUncontrolled->LastStopMoveTime = fallingUncontrolledSave.LastStopMoveTime; fallingUncontrolled->MoveActiveTime = fallingUncontrolledSave.MoveActiveTime; fallingUncontrolled->RedoMoveTime = fallingUncontrolledSave.RedoMoveTime; fallingUncontrolled->PreciseLocationSpeed = fallingUncontrolledSave.PreciseLocationSpeed; fallingUncontrolled->PreciseLocation = fallingUncontrolledSave.PreciseLocation; fallingUncontrolled->PreciseRotationInterpolationTime = fallingUncontrolledSave.PreciseRotationInterpolationTime; fallingUncontrolled->PreciseRotation = fallingUncontrolledSave.PreciseRotation; fallingUncontrolled->LookAtTargetLocation = fallingUncontrolledSave.LookAtTargetLocation; fallingUncontrolled->LookAtTargetAngle = fallingUncontrolledSave.LookAtTargetAngle; fallingUncontrolled->LookAtTargetInterpolationTime = fallingUncontrolledSave.LookAtTargetInterpolationTime; fallingUncontrolled->LookAtTargetDuration = fallingUncontrolledSave.LookAtTargetDuration; fallingUncontrolled->CancelResetCameraLookTime = fallingUncontrolledSave.CancelResetCameraLookTime; fallingUncontrolled->ResetCameraLookTime = fallingUncontrolledSave.ResetCameraLookTime; fallingUncontrolled->MinLookConstraint = fallingUncontrolledSave.MinLookConstraint; fallingUncontrolled->MaxLookConstraint = fallingUncontrolledSave.MaxLookConstraint; fallingUncontrolled->CustomCollisionRadius = fallingUncontrolledSave.CustomCollisionRadius; fallingUncontrolled->CustomCollisionHeight = fallingUncontrolledSave.CustomCollisionHeight; fallingUncontrolled->WeaponInactivePitchAimingLimit = fallingUncontrolledSave.WeaponInactivePitchAimingLimit; fallingUncontrolled->RootMotionScale = fallingUncontrolledSave.RootMotionScale; fallingUncontrolled->RootOffset = fallingUncontrolledSave.RootOffset; fallingUncontrolled->SwanNeckEnableAtPitch = fallingUncontrolledSave.SwanNeckEnableAtPitch; fallingUncontrolled->SwanNeckForward = fallingUncontrolledSave.SwanNeckForward; fallingUncontrolled->SwanNeckDown = fallingUncontrolledSave.SwanNeckDown; fallingUncontrolled->AnimBlendTime = fallingUncontrolledSave.AnimBlendTime; fallingUncontrolled->StickyAngle = fallingUncontrolledSave.StickyAngle; fallingUncontrolled->StickyAimedModifier = fallingUncontrolledSave.StickyAimedModifier; fallingUncontrolled->Timer = fallingUncontrolledSave.Timer; fallingUncontrolled->PawnPhysics = fallingUncontrolledSave.PawnPhysics; fallingUncontrolled->HandPlantExtentCheckHeight = fallingUncontrolledSave.HandPlantExtentCheckHeight; fallingUncontrolled->HandPlantExtentCheckWidth = fallingUncontrolledSave.HandPlantExtentCheckWidth; fallingUncontrolled->HandPlantCheckDistance = fallingUncontrolledSave.HandPlantCheckDistance; fallingUncontrolled->HandPlantCheckHeight = fallingUncontrolledSave.HandPlantCheckHeight; fallingUncontrolled->ContextMoveDistanceMultiplier = fallingUncontrolledSave.ContextMoveDistanceMultiplier; fallingUncontrolled->bCheckForGrab = fallingUncontrolledSave.bCheckForGrab; fallingUncontrolled->bCheckForVaultOver = fallingUncontrolledSave.bCheckForVaultOver; fallingUncontrolled->bCheckForWallClimb = fallingUncontrolledSave.bCheckForWallClimb; fallingUncontrolled->bCheckForEdgeInVelDir = fallingUncontrolledSave.bCheckForEdgeInVelDir; fallingUncontrolled->bCheckExitToFalling = fallingUncontrolledSave.bCheckExitToFalling; fallingUncontrolled->bCheckExitToUncontrolledFalling = fallingUncontrolledSave.bCheckExitToUncontrolledFalling; fallingUncontrolled->bCheckForSoftLanding = fallingUncontrolledSave.bCheckForSoftLanding; fallingUncontrolled->bDelayTimeCheckAutoMoves = fallingUncontrolledSave.bDelayTimeCheckAutoMoves; fallingUncontrolled->ExitToFallingZSpeed = fallingUncontrolledSave.ExitToFallingZSpeed; fallingUncontrolled->SoftLandingZSpeedThreshold = fallingUncontrolledSave.SoftLandingZSpeedThreshold; fallingUncontrolled->TimeToSoftLandingThreshold = fallingUncontrolledSave.TimeToSoftLandingThreshold;
	}
}

static void OnTick(float) {
	auto pawn = Engine::GetPlayerPawn();
	if (!pawn) {
		return;
	}

	auto controller = Engine::GetPlayerController();
	if (!controller) {
		return;
	}

	if (GetAsyncKeyState(0x34) < 0) {
		Save(pawn, controller);
	}

	if (GetAsyncKeyState(0x35) < 0) {
		Load(pawn, controller);
	}
}

bool Trainer::Initialize() {
	Engine::OnTick(OnTick);

	return true;
}

std::string Trainer::GetName() {
	return "Trainer";
}