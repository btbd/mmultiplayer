#include "../stdafx.h"

static void Save(Trainer::Save &save, Classes::ATdPlayerPawn *pawn, Classes::ATdPlayerController *controller) {
	save.Pawn.bExludeHandMoves = pawn->bExludeHandMoves; save.Pawn.bExludeFootMoves = pawn->bExludeFootMoves; save.Pawn.bPhysXMutatable = pawn->bPhysXMutatable; save.Pawn.bStatic = pawn->bStatic; save.Pawn.bHidden = pawn->bHidden; save.Pawn.bNoDelete = pawn->bNoDelete; save.Pawn.bDeleteMe = pawn->bDeleteMe; save.Pawn.bTicked = pawn->bTicked; save.Pawn.bOnlyOwnerSee = pawn->bOnlyOwnerSee; save.Pawn.bStasis = pawn->bStasis; save.Pawn.bWorldGeometry = pawn->bWorldGeometry; save.Pawn.bIgnoreRigidBodyPawns = pawn->bIgnoreRigidBodyPawns; save.Pawn.bOrientOnSlope = pawn->bOrientOnSlope; save.Pawn.bIgnoreEncroachers = pawn->bIgnoreEncroachers; save.Pawn.bPushedByEncroachers = pawn->bPushedByEncroachers; save.Pawn.bDestroyedByInterpActor = pawn->bDestroyedByInterpActor; save.Pawn.bRouteBeginPlayEvenIfStatic = pawn->bRouteBeginPlayEvenIfStatic; save.Pawn.bIsMoving = pawn->bIsMoving; save.Pawn.bAlwaysEncroachCheck = pawn->bAlwaysEncroachCheck; save.Pawn.bHasAlternateTargetLocation = pawn->bHasAlternateTargetLocation; save.Pawn.bNetTemporary = pawn->bNetTemporary; save.Pawn.bOnlyRelevantToOwner = pawn->bOnlyRelevantToOwner; save.Pawn.bNetDirty = pawn->bNetDirty; save.Pawn.bAlwaysRelevant = pawn->bAlwaysRelevant; save.Pawn.bReplicateInstigator = pawn->bReplicateInstigator; save.Pawn.bReplicateMovement = pawn->bReplicateMovement; save.Pawn.bSkipActorPropertyReplication = pawn->bSkipActorPropertyReplication; save.Pawn.bUpdateSimulatedPosition = pawn->bUpdateSimulatedPosition; save.Pawn.bTearOff = pawn->bTearOff; save.Pawn.bOnlyDirtyReplication = pawn->bOnlyDirtyReplication; save.Pawn.bDemoRecording = pawn->bDemoRecording; save.Pawn.bDemoOwner = pawn->bDemoOwner; save.Pawn.bForceDemoRelevant = pawn->bForceDemoRelevant; save.Pawn.bNetInitialRotation = pawn->bNetInitialRotation; save.Pawn.bReplicateRigidBodyLocation = pawn->bReplicateRigidBodyLocation; save.Pawn.bKillDuringLevelTransition = pawn->bKillDuringLevelTransition; save.Pawn.bExchangedRoles = pawn->bExchangedRoles; save.Pawn.bConsiderAllStaticMeshComponentsForStreaming = pawn->bConsiderAllStaticMeshComponentsForStreaming; save.Pawn.bIgnoreForAITraces = pawn->bIgnoreForAITraces; save.Pawn.bInteractable = pawn->bInteractable; save.Pawn.bLOIObject = pawn->bLOIObject; save.Pawn.bDebug = pawn->bDebug; save.Pawn.bPostRenderIfNotVisible = pawn->bPostRenderIfNotVisible; save.Pawn.bForceNetUpdate = pawn->bForceNetUpdate; save.Pawn.bPendingNetUpdate = pawn->bPendingNetUpdate; save.Pawn.bHardAttach = pawn->bHardAttach; save.Pawn.bIgnoreBaseRotation = pawn->bIgnoreBaseRotation; save.Pawn.bShadowParented = pawn->bShadowParented; save.Pawn.bCanBeAdheredTo = pawn->bCanBeAdheredTo; save.Pawn.bCanBeFrictionedTo = pawn->bCanBeFrictionedTo; save.Pawn.bHurtEntry = pawn->bHurtEntry; save.Pawn.bGameRelevant = pawn->bGameRelevant; save.Pawn.bMovable = pawn->bMovable; save.Pawn.bDestroyInPainVolume = pawn->bDestroyInPainVolume; save.Pawn.bCanBeDamaged = pawn->bCanBeDamaged; save.Pawn.bShouldBaseAtStartup = pawn->bShouldBaseAtStartup; save.Pawn.bPendingDelete = pawn->bPendingDelete; save.Pawn.bCanTeleport = pawn->bCanTeleport; save.Pawn.bAlwaysTick = pawn->bAlwaysTick; save.Pawn.bBlocksNavigation = pawn->bBlocksNavigation; save.Pawn.BlockRigidBody = pawn->BlockRigidBody; save.Pawn.bCollideWhenPlacing = pawn->bCollideWhenPlacing; save.Pawn.bCollideActors = pawn->bCollideActors; save.Pawn.bCollideWorld = pawn->bCollideWorld; save.Pawn.bCollideComplex = pawn->bCollideComplex; save.Pawn.bBlockActors = pawn->bBlockActors; save.Pawn.bProjTarget = pawn->bProjTarget; save.Pawn.bBlocksTeleport = pawn->bBlocksTeleport; save.Pawn.bNoEncroachCheck = pawn->bNoEncroachCheck; save.Pawn.bPhysRigidBodyOutOfWorldCheck = pawn->bPhysRigidBodyOutOfWorldCheck; save.Pawn.bComponentOutsideWorld = pawn->bComponentOutsideWorld; save.Pawn.bBounce = pawn->bBounce; save.Pawn.bJustTeleported = pawn->bJustTeleported; save.Pawn.bNetInitial = pawn->bNetInitial; save.Pawn.bNetOwner = pawn->bNetOwner; save.Pawn.bHiddenEd = pawn->bHiddenEd; save.Pawn.bHiddenEdGroup = pawn->bHiddenEdGroup; save.Pawn.bHiddenEdCustom = pawn->bHiddenEdCustom; save.Pawn.bEdShouldSnap = pawn->bEdShouldSnap; save.Pawn.bTempEditor = pawn->bTempEditor; save.Pawn.bPathColliding = pawn->bPathColliding; save.Pawn.bPathTemp = pawn->bPathTemp; save.Pawn.bScriptInitialized = pawn->bScriptInitialized; save.Pawn.bLockLocation = pawn->bLockLocation; save.Pawn.CustomTimeDilation = pawn->CustomTimeDilation; save.Pawn.Physics = pawn->Physics; save.Pawn.RemoteRole = pawn->RemoteRole; save.Pawn.Role = pawn->Role; save.Pawn.CollisionType = pawn->CollisionType; save.Pawn.TickGroup = pawn->TickGroup; save.Pawn.NetTag = pawn->NetTag; save.Pawn.NetUpdateTime = pawn->NetUpdateTime; save.Pawn.NetUpdateFrequency = pawn->NetUpdateFrequency; save.Pawn.NetPriority = pawn->NetPriority; save.Pawn.LastNetUpdateTime = pawn->LastNetUpdateTime; save.Pawn.LifeSpan = pawn->LifeSpan; save.Pawn.CreationTime = pawn->CreationTime; save.Pawn.LastRenderTime = pawn->LastRenderTime; save.Pawn.LatentFloat = pawn->LatentFloat; save.Pawn.Location = pawn->Location; save.Pawn.Rotation = pawn->Rotation; save.Pawn.Velocity = pawn->Velocity; save.Pawn.Acceleration = pawn->Acceleration; save.Pawn.AngularVelocity = pawn->AngularVelocity; save.Pawn.RelativeLocation = pawn->RelativeLocation; save.Pawn.RelativeRotation = pawn->RelativeRotation; save.Pawn.DrawScale = pawn->DrawScale; save.Pawn.DrawScale3D = pawn->DrawScale3D; save.Pawn.PrePivot = pawn->PrePivot; save.Pawn.OverlapTag = pawn->OverlapTag; save.Pawn.RotationRate = pawn->RotationRate; save.Pawn.DesiredRotation = pawn->DesiredRotation; save.Pawn.MinDistForNetRBCorrection = pawn->MinDistForNetRBCorrection; save.Pawn.MaxStepHeight = pawn->MaxStepHeight; save.Pawn.MaxJumpHeight = pawn->MaxJumpHeight; save.Pawn.WalkableFloorZ = pawn->WalkableFloorZ; save.Pawn.NetRelevancyTime = pawn->NetRelevancyTime; save.Pawn.bUpAndOut = pawn->bUpAndOut; save.Pawn.bIsWalking = pawn->bIsWalking; save.Pawn.bWantsToCrouch = pawn->bWantsToCrouch; save.Pawn.bIsCrouched = pawn->bIsCrouched; save.Pawn.bTryToUncrouch = pawn->bTryToUncrouch; save.Pawn.bCanCrouch = pawn->bCanCrouch; save.Pawn.bCrawler = pawn->bCrawler; save.Pawn.bReducedSpeed = pawn->bReducedSpeed; save.Pawn.bJumpCapable = pawn->bJumpCapable; save.Pawn.bCanJump = pawn->bCanJump; save.Pawn.bCanWalk = pawn->bCanWalk; save.Pawn.bCanSwim = pawn->bCanSwim; save.Pawn.bCanFly = pawn->bCanFly; save.Pawn.bCanClimbLadders = pawn->bCanClimbLadders; save.Pawn.bCanStrafe = pawn->bCanStrafe; save.Pawn.bAvoidLedges = pawn->bAvoidLedges; save.Pawn.bStopAtLedges = pawn->bStopAtLedges; save.Pawn.bSimulateGravity = pawn->bSimulateGravity; save.Pawn.bIgnoreForces = pawn->bIgnoreForces; save.Pawn.bCanWalkOffLedges = pawn->bCanWalkOffLedges; save.Pawn.bCanBeBaseForPawns = pawn->bCanBeBaseForPawns; save.Pawn.bSimGravityDisabled = pawn->bSimGravityDisabled; save.Pawn.bDirectHitWall = pawn->bDirectHitWall; save.Pawn.bPushesRigidBodies = pawn->bPushesRigidBodies; save.Pawn.bForceFloorCheck = pawn->bForceFloorCheck; save.Pawn.bForceKeepAnchor = pawn->bForceKeepAnchor; save.Pawn.bCanMantle = pawn->bCanMantle; save.Pawn.bCanClimbCeilings = pawn->bCanClimbCeilings; save.Pawn.bCanSwatTurn = pawn->bCanSwatTurn; save.Pawn.bCanLeap = pawn->bCanLeap; save.Pawn.bCanCoverSlip = pawn->bCanCoverSlip; save.Pawn.bDisplayPathErrors = pawn->bDisplayPathErrors; save.Pawn.bIsFemale = pawn->bIsFemale; save.Pawn.bCanPickupInventory = pawn->bCanPickupInventory; save.Pawn.bAmbientCreature = pawn->bAmbientCreature; save.Pawn.bLOSHearing = pawn->bLOSHearing; save.Pawn.bMuffledHearing = pawn->bMuffledHearing; save.Pawn.bDontPossess = pawn->bDontPossess; save.Pawn.bAutoFire = pawn->bAutoFire; save.Pawn.bRollToDesired = pawn->bRollToDesired; save.Pawn.bStationary = pawn->bStationary; save.Pawn.bCachedRelevant = pawn->bCachedRelevant; save.Pawn.bSpecialHUD = pawn->bSpecialHUD; save.Pawn.bNoWeaponFiring = pawn->bNoWeaponFiring; save.Pawn.bCanUse = pawn->bCanUse; save.Pawn.bModifyReachSpecCost = pawn->bModifyReachSpecCost; save.Pawn.bPathfindsAsVehicle = pawn->bPathfindsAsVehicle; save.Pawn.bRunPhysicsWithNoController = pawn->bRunPhysicsWithNoController; save.Pawn.bForceMaxAccel = pawn->bForceMaxAccel; save.Pawn.bForceRMVelocity = pawn->bForceRMVelocity; save.Pawn.bForceRegularVelocity = pawn->bForceRegularVelocity; save.Pawn.bPlayedDeath = pawn->bPlayedDeath; save.Pawn.UncrouchTime = pawn->UncrouchTime; save.Pawn.CrouchHeight = pawn->CrouchHeight; save.Pawn.CrouchRadius = pawn->CrouchRadius; save.Pawn.FullHeight = pawn->FullHeight; save.Pawn.NonPreferredVehiclePathMultiplier = pawn->NonPreferredVehiclePathMultiplier; save.Pawn.PathSearchType = pawn->PathSearchType; save.Pawn.RemoteViewPitch = pawn->RemoteViewPitch; save.Pawn.FlashCount = pawn->FlashCount; save.Pawn.FiringMode = pawn->FiringMode; save.Pawn.DesiredSpeed = pawn->DesiredSpeed; save.Pawn.MaxDesiredSpeed = pawn->MaxDesiredSpeed; save.Pawn.HearingThreshold = pawn->HearingThreshold; save.Pawn.Alertness = pawn->Alertness; save.Pawn.SightRadius = pawn->SightRadius; save.Pawn.PeripheralVision = pawn->PeripheralVision; save.Pawn.AvgPhysicsTime = pawn->AvgPhysicsTime; save.Pawn.Mass = pawn->Mass; save.Pawn.Buoyancy = pawn->Buoyancy; save.Pawn.MeleeRange = pawn->MeleeRange; save.Pawn.FindAnchorFailedTime = pawn->FindAnchorFailedTime; save.Pawn.LastValidAnchorTime = pawn->LastValidAnchorTime; save.Pawn.DestinationOffset = pawn->DestinationOffset; save.Pawn.NextPathRadius = pawn->NextPathRadius; save.Pawn.SerpentineDir = pawn->SerpentineDir; save.Pawn.SerpentineDist = pawn->SerpentineDist; save.Pawn.SerpentineTime = pawn->SerpentineTime; save.Pawn.SpawnTime = pawn->SpawnTime; save.Pawn.MaxPitchLimit = pawn->MaxPitchLimit; save.Pawn.GroundSpeed = pawn->GroundSpeed; save.Pawn.WaterSpeed = pawn->WaterSpeed; save.Pawn.AirSpeed = pawn->AirSpeed; save.Pawn.LadderSpeed = pawn->LadderSpeed; save.Pawn.AccelRate = pawn->AccelRate; save.Pawn.JumpZ = pawn->JumpZ; save.Pawn.OutofWaterZ = pawn->OutofWaterZ; save.Pawn.MaxOutOfWaterStepHeight = pawn->MaxOutOfWaterStepHeight; save.Pawn.AirControl = pawn->AirControl; save.Pawn.WalkingPct = pawn->WalkingPct; save.Pawn.CrouchedPct = pawn->CrouchedPct; save.Pawn.MaxFallSpeed = pawn->MaxFallSpeed; save.Pawn.AIMaxFallSpeedFactor = pawn->AIMaxFallSpeedFactor; save.Pawn.BaseEyeHeight = pawn->BaseEyeHeight; save.Pawn.EyeHeight = pawn->EyeHeight; save.Pawn.Floor = pawn->Floor; save.Pawn.SplashTime = pawn->SplashTime; save.Pawn.OldZ = pawn->OldZ; save.Pawn.Health = pawn->Health; save.Pawn.HealthMax = pawn->HealthMax; save.Pawn.BreathTime = pawn->BreathTime; save.Pawn.UnderWaterTime = pawn->UnderWaterTime; save.Pawn.LastPainTime = pawn->LastPainTime; save.Pawn.RMVelocity = pawn->RMVelocity; save.Pawn.noise1spot = pawn->noise1spot; save.Pawn.noise1time = pawn->noise1time; save.Pawn.noise1loudness = pawn->noise1loudness; save.Pawn.noise2spot = pawn->noise2spot; save.Pawn.noise2time = pawn->noise2time; save.Pawn.noise2loudness = pawn->noise2loudness; save.Pawn.SoundDampening = pawn->SoundDampening; save.Pawn.DamageScaling = pawn->DamageScaling; save.Pawn.LastStartTime = pawn->LastStartTime; save.Pawn.TakeHitLocation = pawn->TakeHitLocation; save.Pawn.TearOffMomentum = pawn->TearOffMomentum; save.Pawn.RBPushRadius = pawn->RBPushRadius; save.Pawn.RBPushStrength = pawn->RBPushStrength; save.Pawn.AlwaysRelevantDistanceSquared = pawn->AlwaysRelevantDistanceSquared; save.Pawn.VehicleCheckRadius = pawn->VehicleCheckRadius; save.Pawn.ViewPitchMin = pawn->ViewPitchMin; save.Pawn.ViewPitchMax = pawn->ViewPitchMax; save.Pawn.AllowedYawError = pawn->AllowedYawError; save.Pawn.FlashLocation = pawn->FlashLocation; save.Pawn.LastFiringFlashLocation = pawn->LastFiringFlashLocation; save.Pawn.ShotCount = pawn->ShotCount; save.Pawn.FailedLandingCount = pawn->FailedLandingCount; save.Pawn.bDisableSkelControlSpring = pawn->bDisableSkelControlSpring; save.Pawn.bCanUnCrouch = pawn->bCanUnCrouch; save.Pawn.bConstrainLook = pawn->bConstrainLook; save.Pawn.bGoingForward = pawn->bGoingForward; save.Pawn.bClimbLeftHand = pawn->bClimbLeftHand; save.Pawn.bClimbDownFast = pawn->bClimbDownFast; save.Pawn.bEnableFootPlacement = pawn->bEnableFootPlacement; save.Pawn.bMoveActionMax = pawn->bMoveActionMax; save.Pawn.bFoundLedgeExcludesHandMoves = pawn->bFoundLedgeExcludesHandMoves; save.Pawn.bFoundLedgeExcludesFootMoves = pawn->bFoundLedgeExcludesFootMoves; save.Pawn.bIsWallWalking = pawn->bIsWallWalking; save.Pawn.bFoundLedge = pawn->bFoundLedge; save.Pawn.bAllowMoveChange = pawn->bAllowMoveChange; save.Pawn.bSRPauseTimer = pawn->bSRPauseTimer; save.Pawn.bForceMaxAccelOneFrame = pawn->bForceMaxAccelOneFrame; save.Pawn.RollTriggerPressed = pawn->RollTriggerPressed; save.Pawn.bUncontrolledSlide = pawn->bUncontrolledSlide; save.Pawn.bIsPlayingSlideEffect = pawn->bIsPlayingSlideEffect; save.Pawn.bAlternateSound = pawn->bAlternateSound; save.Pawn.bCharacterInhaling = pawn->bCharacterInhaling; save.Pawn.bDisableCharacterSounds = pawn->bDisableCharacterSounds; save.Pawn.bTakeFallDamage = pawn->bTakeFallDamage; save.Pawn.bIsUsingRootMotion = pawn->bIsUsingRootMotion; save.Pawn.bIsUsingRootRotation = pawn->bIsUsingRootRotation; save.Pawn.bDebugDamage = pawn->bDebugDamage; save.Pawn.bDebugNetAnim = pawn->bDebugNetAnim; save.Pawn.bNoMoveAnims = pawn->bNoMoveAnims; save.Pawn.bDebugAcceleration = pawn->bDebugAcceleration; save.Pawn.bDebugJumping = pawn->bDebugJumping; save.Pawn.bDebugMovement = pawn->bDebugMovement; save.Pawn.bDebugPlotPath = pawn->bDebugPlotPath; save.Pawn.bDebugFootsteps = pawn->bDebugFootsteps; save.Pawn.bDebugSlapBack = pawn->bDebugSlapBack; save.Pawn.bDebugCharacterSounds = pawn->bDebugCharacterSounds; save.Pawn.bDebugBreathingSounds = pawn->bDebugBreathingSounds; save.Pawn.bDebugWeapons = pawn->bDebugWeapons; save.Pawn.bDebugMaterials = pawn->bDebugMaterials; save.Pawn.VelocityMagnitude2D = pawn->VelocityMagnitude2D; save.Pawn.VelocityMagnitude = pawn->VelocityMagnitude; save.Pawn.VelocityDir2D = pawn->VelocityDir2D; save.Pawn.VelocityDir = pawn->VelocityDir; save.Pawn.FaceRotationTimeLeft = pawn->FaceRotationTimeLeft; save.Pawn.BecameReadyTime = pawn->BecameReadyTime; save.Pawn.AmountTilUnarmed = pawn->AmountTilUnarmed; save.Pawn.GravityModifier = pawn->GravityModifier; save.Pawn.GravityModifierTimer = pawn->GravityModifierTimer; save.Pawn.AgainstWallState = pawn->AgainstWallState; save.Pawn.WeaponAnimState = pawn->WeaponAnimState; save.Pawn.AnimLockRefCount = pawn->AnimLockRefCount; save.Pawn.RootMotionRefCount = pawn->RootMotionRefCount; save.Pawn.CurrentGrabTurnType = pawn->CurrentGrabTurnType; save.Pawn.LadderType = pawn->LadderType; save.Pawn.AnimationMovementState = pawn->AnimationMovementState; save.Pawn.PendingAnimationMovementState = pawn->PendingAnimationMovementState; save.Pawn.OldMovementState = pawn->OldMovementState; save.Pawn.PendingMovementState = pawn->PendingMovementState; save.Pawn.MovementState = pawn->MovementState; save.Pawn.ReplicatedMovementState = pawn->ReplicatedMovementState; save.Pawn.AIAimOldMovementState = pawn->AIAimOldMovementState; save.Pawn.OverrideWalkingState = pawn->OverrideWalkingState; save.Pawn.PendingOverrideWalkingState = pawn->PendingOverrideWalkingState; save.Pawn.CurrentWalkingState = pawn->CurrentWalkingState; save.Pawn.ReplicateCustomAnimCount = pawn->ReplicateCustomAnimCount; save.Pawn.MoveActionHint = pawn->MoveActionHint; save.Pawn.ReloadCount = pawn->ReloadCount; save.Pawn.NoOfBreathingSounds = pawn->NoOfBreathingSounds; save.Pawn.AgainstWallLeftHand = pawn->AgainstWallLeftHand; save.Pawn.AgainstWallRightHand = pawn->AgainstWallRightHand; save.Pawn.AgainstWallNormal = pawn->AgainstWallNormal; save.Pawn.MinLookConstraint = pawn->MinLookConstraint; save.Pawn.MaxLookConstraint = pawn->MaxLookConstraint; save.Pawn.LegRotationSlowTimer = pawn->LegRotationSlowTimer; save.Pawn.LegRotation = pawn->LegRotation; save.Pawn.LegRotationSpeed = pawn->LegRotationSpeed; save.Pawn.GoBackLegAngleLimitMin = pawn->GoBackLegAngleLimitMin; save.Pawn.GoBackLegAngleLimitMax = pawn->GoBackLegAngleLimitMax; save.Pawn.LegAngleLimitFudge = pawn->LegAngleLimitFudge; save.Pawn.SneakVelocity = pawn->SneakVelocity; save.Pawn.WalkVelocity = pawn->WalkVelocity; save.Pawn.JogVelocity = pawn->JogVelocity; save.Pawn.RunVelocity = pawn->RunVelocity; save.Pawn.SprintVelocity = pawn->SprintVelocity; save.Pawn.AverageSpeed = pawn->AverageSpeed; save.Pawn.ASFilterTime = pawn->ASFilterTime; save.Pawn.ASPollInterval = pawn->ASPollInterval; save.Pawn.ASPollTimer = pawn->ASPollTimer; save.Pawn.ASPollSlots = pawn->ASPollSlots; save.Pawn.ASSlotPointer = pawn->ASSlotPointer; save.Pawn.ASDistanceAccum = pawn->ASDistanceAccum; save.Pawn.NewFloorSmooth = pawn->NewFloorSmooth; save.Pawn.SmoothOffset = pawn->SmoothOffset; save.Pawn.FootPlacementStoredRotation = pawn->FootPlacementStoredRotation; save.Pawn.TargetMeshTranslationZ = pawn->TargetMeshTranslationZ; save.Pawn.SlideStoppedTimeStamp = pawn->SlideStoppedTimeStamp; save.Pawn.MoveLocation = pawn->MoveLocation; save.Pawn.MoveNormal = pawn->MoveNormal; save.Pawn.MaxWallStepHeight = pawn->MaxWallStepHeight; save.Pawn.MoveLedgeLocation = pawn->MoveLedgeLocation; save.Pawn.MoveLedgeNormal = pawn->MoveLedgeNormal; save.Pawn.MoveLedgeResult = pawn->MoveLedgeResult; save.Pawn.LedgeFindExtent = pawn->LedgeFindExtent; save.Pawn.LedgeFindDistance = pawn->LedgeFindDistance; save.Pawn.LedgeFindDepth = pawn->LedgeFindDepth; save.Pawn.IllegalLedgeNormal = pawn->IllegalLedgeNormal; save.Pawn.bIllegalLedgeTimer = pawn->bIllegalLedgeTimer; save.Pawn.ActiveMoveTimer = pawn->ActiveMoveTimer; save.Pawn.RemoteViewYaw = pawn->RemoteViewYaw; save.Pawn.EvadeTimer = pawn->EvadeTimer; save.Pawn.SpeedMaxBaseVelocity = pawn->SpeedMaxBaseVelocity; save.Pawn.SpeedMinBaseVelocity = pawn->SpeedMinBaseVelocity; save.Pawn.SpeedStrafeVelocityAccelerationFactor = pawn->SpeedStrafeVelocityAccelerationFactor; save.Pawn.SpeedWalkVelocityAccelerationFactor = pawn->SpeedWalkVelocityAccelerationFactor; save.Pawn.SpeedSprintVelocityAccelerationFactor = pawn->SpeedSprintVelocityAccelerationFactor; save.Pawn.SpeedEnergyDecelerationTime = pawn->SpeedEnergyDecelerationTime; save.Pawn.SpeedEnergyDecelerationExponent = pawn->SpeedEnergyDecelerationExponent; save.Pawn.SpeedTurnDecelerationFactor = pawn->SpeedTurnDecelerationFactor; save.Pawn.SpeedSprintEnergy = pawn->SpeedSprintEnergy; save.Pawn.UpwardWalkFrictionScale = pawn->UpwardWalkFrictionScale; save.Pawn.DownwardWalkFrictionScale = pawn->DownwardWalkFrictionScale; save.Pawn.MinWalkFrictionModify = pawn->MinWalkFrictionModify; save.Pawn.MaxWalkFrictionModify = pawn->MaxWalkFrictionModify; save.Pawn.UpwardSlideFrictionScale = pawn->UpwardSlideFrictionScale; save.Pawn.DownwardSlideFrictionScale = pawn->DownwardSlideFrictionScale; save.Pawn.BrakingFrictionStrength = pawn->BrakingFrictionStrength; save.Pawn.SoftLockStrength = pawn->SoftLockStrength; save.Pawn.RollTriggerTime = pawn->RollTriggerTime; save.Pawn.UncontrolledSlideNormal = pawn->UncontrolledSlideNormal; save.Pawn.FallingUncontrolledHeight = pawn->FallingUncontrolledHeight; save.Pawn.EnterFallingHeight = pawn->EnterFallingHeight; save.Pawn.SlideEffectUpdateTimer = pawn->SlideEffectUpdateTimer; save.Pawn.CustomSoundInput = pawn->CustomSoundInput; save.Pawn.OverrideSynchPosOffset = pawn->OverrideSynchPosOffset; save.Pawn.StreakEffectOverride = pawn->StreakEffectOverride; save.Pawn.StreakEffectDirection = pawn->StreakEffectDirection; save.Pawn.PatchOne = pawn->PatchOne; save.Pawn.PatchTwo = pawn->PatchTwo; save.Pawn.PatchThree = pawn->PatchThree; save.Pawn.PhysicsHitReactionBlendTimer = pawn->PhysicsHitReactionBlendTimer; save.Pawn.PhysicsHitReactionBlendOut = pawn->PhysicsHitReactionBlendOut; save.Pawn.PhysicsHitReactionBlendInTime = pawn->PhysicsHitReactionBlendInTime; save.Pawn.PhysicsHitReactionBlendOutTime = pawn->PhysicsHitReactionBlendOutTime; save.Pawn.PhysicsHitReactionScale = pawn->PhysicsHitReactionScale; save.Pawn.LastDamageTaken = pawn->LastDamageTaken; save.Pawn.ArmorBulletsHead = pawn->ArmorBulletsHead; save.Pawn.ArmorBulletsBody = pawn->ArmorBulletsBody; save.Pawn.ArmorBulletsLegs = pawn->ArmorBulletsLegs; save.Pawn.ArmorMeleeHead = pawn->ArmorMeleeHead; save.Pawn.ArmorMeleeBody = pawn->ArmorMeleeBody; save.Pawn.ArmorMeleeLegs = pawn->ArmorMeleeLegs; save.Pawn.FootstepTraceLength = pawn->FootstepTraceLength; save.Pawn.FootstepTraceWidth = pawn->FootstepTraceWidth; save.Pawn.LastFlybyStamp = pawn->LastFlybyStamp; save.Pawn.MaxHealth = pawn->MaxHealth; save.Pawn.RegenerateDelay = pawn->RegenerateDelay; save.Pawn.RegenerateHealthPerSecond = pawn->RegenerateHealthPerSecond; save.Pawn.UnrealEngineFallDamageScale = pawn->UnrealEngineFallDamageScale; save.Pawn.TimeSinceLastDamage = pawn->TimeSinceLastDamage; save.Pawn.HealthFrac = pawn->HealthFrac; save.Pawn.TaserDamageLevel = pawn->TaserDamageLevel; save.Pawn.RegenerateFromTaserPerSecond = pawn->RegenerateFromTaserPerSecond; save.Pawn.TaserRegenerateDelay = pawn->TaserRegenerateDelay; save.Pawn.TimeSinceLastTaserDamage = pawn->TimeSinceLastTaserDamage; save.Pawn.StunDamageLevel = pawn->StunDamageLevel; save.Pawn.RegenerateFromStunPerSecond = pawn->RegenerateFromStunPerSecond; save.Pawn.MinTimeBeforeRemovingDeadBody = pawn->MinTimeBeforeRemovingDeadBody; save.Pawn.MaxTimeBeforeRemovingDeadBody = pawn->MaxTimeBeforeRemovingDeadBody; save.Pawn.MyPassengerSeatIndex = pawn->MyPassengerSeatIndex; save.Pawn.SlideFactor = pawn->SlideFactor; save.Pawn.LastDamage = pawn->LastDamage; save.Pawn.LastDamageTime = pawn->LastDamageTime; save.Pawn.NextDebugPlotTime = pawn->NextDebugPlotTime; save.Pawn.LastPlotLocation = pawn->LastPlotLocation; save.Pawn.LastJumpLocation = pawn->LastJumpLocation; save.Pawn.bHasMorphNodes = pawn->bHasMorphNodes; save.Pawn.bStuckOnGround = pawn->bStuckOnGround; save.Pawn.bPlayerDiedHoldingTheBag = pawn->bPlayerDiedHoldingTheBag; save.Pawn.bIsInShadowAlteringMoveState = pawn->bIsInShadowAlteringMoveState; save.Pawn.bEnableHairPhysics = pawn->bEnableHairPhysics; save.Pawn.bLockBase = pawn->bLockBase; save.Pawn.bCutsceneIsSkippable = pawn->bCutsceneIsSkippable; save.Pawn.FirstPersonDPG = pawn->FirstPersonDPG; save.Pawn.FirstPersonLowerBodyDPG = pawn->FirstPersonLowerBodyDPG; save.Pawn.VertigoEdgeProbingHeight = pawn->VertigoEdgeProbingHeight; save.Pawn.VertigoEdgeProbingDistance = pawn->VertigoEdgeProbingDistance; save.Pawn.VertigoEffectThreshold = pawn->VertigoEffectThreshold; save.Pawn.EdgeCheckMaxSpeed = pawn->EdgeCheckMaxSpeed; save.Pawn.EdgeCheckDistance = pawn->EdgeCheckDistance; save.Pawn.EdgeStopMinHeight = pawn->EdgeStopMinHeight; save.Pawn.LastEnemyHitTimeOut = pawn->LastEnemyHitTimeOut; save.Pawn.ReverbVolumeTimer = pawn->ReverbVolumeTimer; save.Pawn.ReverbVolumePollTime = pawn->ReverbVolumePollTime; save.Pawn.OcclusionDuckLevel = pawn->OcclusionDuckLevel; save.Pawn.OcclusionDuckFadeTime = pawn->OcclusionDuckFadeTime; save.Pawn.IndoorSoundGroupIndex = pawn->IndoorSoundGroupIndex; save.Pawn.IndoorMixGroupIndex = pawn->IndoorMixGroupIndex; save.Pawn.OutdoorMixGroupIndex = pawn->OutdoorMixGroupIndex; save.Pawn.MovementStringAllowedGap = pawn->MovementStringAllowedGap; save.Pawn.MovementStringGapTimer = pawn->MovementStringGapTimer; save.Pawn.PlayerBulletDamageMultiplier = pawn->PlayerBulletDamageMultiplier; save.Pawn.FocusLocation = pawn->FocusLocation; save.Pawn.PlayerCameraLocation = pawn->PlayerCameraLocation; save.Pawn.PlayerCameraRotation = pawn->PlayerCameraRotation; save.Pawn.DebugPlayerGraph = pawn->DebugPlayerGraph; save.Pawn.LastDebugGraphValue = pawn->LastDebugGraphValue; save.Pawn.SimulatedBadFPS = pawn->SimulatedBadFPS; save.Pawn.FocusLocationInterpolationSpeed = pawn->FocusLocationInterpolationSpeed; save.Pawn.LastResetTimeStamp = pawn->LastResetTimeStamp;
	save.Controller.bExludeHandMoves = controller->bExludeHandMoves; save.Controller.bExludeFootMoves = controller->bExludeFootMoves; save.Controller.bPhysXMutatable = controller->bPhysXMutatable; save.Controller.bStatic = controller->bStatic; save.Controller.bHidden = controller->bHidden; save.Controller.bNoDelete = controller->bNoDelete; save.Controller.bDeleteMe = controller->bDeleteMe; save.Controller.bTicked = controller->bTicked; save.Controller.bOnlyOwnerSee = controller->bOnlyOwnerSee; save.Controller.bStasis = controller->bStasis; save.Controller.bWorldGeometry = controller->bWorldGeometry; save.Controller.bIgnoreRigidBodyPawns = controller->bIgnoreRigidBodyPawns; save.Controller.bOrientOnSlope = controller->bOrientOnSlope; save.Controller.bIgnoreEncroachers = controller->bIgnoreEncroachers; save.Controller.bPushedByEncroachers = controller->bPushedByEncroachers; save.Controller.bDestroyedByInterpActor = controller->bDestroyedByInterpActor; save.Controller.bRouteBeginPlayEvenIfStatic = controller->bRouteBeginPlayEvenIfStatic; save.Controller.bIsMoving = controller->bIsMoving; save.Controller.bAlwaysEncroachCheck = controller->bAlwaysEncroachCheck; save.Controller.bHasAlternateTargetLocation = controller->bHasAlternateTargetLocation; save.Controller.bNetTemporary = controller->bNetTemporary; save.Controller.bOnlyRelevantToOwner = controller->bOnlyRelevantToOwner; save.Controller.bNetDirty = controller->bNetDirty; save.Controller.bAlwaysRelevant = controller->bAlwaysRelevant; save.Controller.bReplicateInstigator = controller->bReplicateInstigator; save.Controller.bReplicateMovement = controller->bReplicateMovement; save.Controller.bSkipActorPropertyReplication = controller->bSkipActorPropertyReplication; save.Controller.bUpdateSimulatedPosition = controller->bUpdateSimulatedPosition; save.Controller.bTearOff = controller->bTearOff; save.Controller.bOnlyDirtyReplication = controller->bOnlyDirtyReplication; save.Controller.bDemoRecording = controller->bDemoRecording; save.Controller.bDemoOwner = controller->bDemoOwner; save.Controller.bForceDemoRelevant = controller->bForceDemoRelevant; save.Controller.bNetInitialRotation = controller->bNetInitialRotation; save.Controller.bReplicateRigidBodyLocation = controller->bReplicateRigidBodyLocation; save.Controller.bKillDuringLevelTransition = controller->bKillDuringLevelTransition; save.Controller.bExchangedRoles = controller->bExchangedRoles; save.Controller.bConsiderAllStaticMeshComponentsForStreaming = controller->bConsiderAllStaticMeshComponentsForStreaming; save.Controller.bIgnoreForAITraces = controller->bIgnoreForAITraces; save.Controller.bInteractable = controller->bInteractable; save.Controller.bLOIObject = controller->bLOIObject; save.Controller.bDebug = controller->bDebug; save.Controller.bPostRenderIfNotVisible = controller->bPostRenderIfNotVisible; save.Controller.bForceNetUpdate = controller->bForceNetUpdate; save.Controller.bPendingNetUpdate = controller->bPendingNetUpdate; save.Controller.bHardAttach = controller->bHardAttach; save.Controller.bIgnoreBaseRotation = controller->bIgnoreBaseRotation; save.Controller.bShadowParented = controller->bShadowParented; save.Controller.bCanBeAdheredTo = controller->bCanBeAdheredTo; save.Controller.bCanBeFrictionedTo = controller->bCanBeFrictionedTo; save.Controller.bHurtEntry = controller->bHurtEntry; save.Controller.bGameRelevant = controller->bGameRelevant; save.Controller.bMovable = controller->bMovable; save.Controller.bDestroyInPainVolume = controller->bDestroyInPainVolume; save.Controller.bCanBeDamaged = controller->bCanBeDamaged; save.Controller.bShouldBaseAtStartup = controller->bShouldBaseAtStartup; save.Controller.bPendingDelete = controller->bPendingDelete; save.Controller.bCanTeleport = controller->bCanTeleport; save.Controller.bAlwaysTick = controller->bAlwaysTick; save.Controller.bBlocksNavigation = controller->bBlocksNavigation; save.Controller.BlockRigidBody = controller->BlockRigidBody; save.Controller.bCollideWhenPlacing = controller->bCollideWhenPlacing; save.Controller.bCollideActors = controller->bCollideActors; save.Controller.bCollideWorld = controller->bCollideWorld; save.Controller.bCollideComplex = controller->bCollideComplex; save.Controller.bBlockActors = controller->bBlockActors; save.Controller.bProjTarget = controller->bProjTarget; save.Controller.bBlocksTeleport = controller->bBlocksTeleport; save.Controller.bNoEncroachCheck = controller->bNoEncroachCheck; save.Controller.bPhysRigidBodyOutOfWorldCheck = controller->bPhysRigidBodyOutOfWorldCheck; save.Controller.bComponentOutsideWorld = controller->bComponentOutsideWorld; save.Controller.bBounce = controller->bBounce; save.Controller.bJustTeleported = controller->bJustTeleported; save.Controller.bNetInitial = controller->bNetInitial; save.Controller.bNetOwner = controller->bNetOwner; save.Controller.bHiddenEd = controller->bHiddenEd; save.Controller.bHiddenEdGroup = controller->bHiddenEdGroup; save.Controller.bHiddenEdCustom = controller->bHiddenEdCustom; save.Controller.bEdShouldSnap = controller->bEdShouldSnap; save.Controller.bTempEditor = controller->bTempEditor; save.Controller.bPathColliding = controller->bPathColliding; save.Controller.bPathTemp = controller->bPathTemp; save.Controller.bScriptInitialized = controller->bScriptInitialized; save.Controller.bLockLocation = controller->bLockLocation; save.Controller.CustomTimeDilation = controller->CustomTimeDilation; save.Controller.Physics = controller->Physics; save.Controller.RemoteRole = controller->RemoteRole; save.Controller.Role = controller->Role; save.Controller.CollisionType = controller->CollisionType; save.Controller.TickGroup = controller->TickGroup; save.Controller.NetTag = controller->NetTag; save.Controller.NetUpdateTime = controller->NetUpdateTime; save.Controller.NetUpdateFrequency = controller->NetUpdateFrequency; save.Controller.NetPriority = controller->NetPriority; save.Controller.LastNetUpdateTime = controller->LastNetUpdateTime; save.Controller.LifeSpan = controller->LifeSpan; save.Controller.CreationTime = controller->CreationTime; save.Controller.LastRenderTime = controller->LastRenderTime; save.Controller.LatentFloat = controller->LatentFloat; save.Controller.Location = controller->Location; save.Controller.Rotation = controller->Rotation; save.Controller.Velocity = controller->Velocity; save.Controller.Acceleration = controller->Acceleration; save.Controller.AngularVelocity = controller->AngularVelocity; save.Controller.RelativeLocation = controller->RelativeLocation; save.Controller.RelativeRotation = controller->RelativeRotation; save.Controller.DrawScale = controller->DrawScale; save.Controller.DrawScale3D = controller->DrawScale3D; save.Controller.PrePivot = controller->PrePivot; save.Controller.OverlapTag = controller->OverlapTag; save.Controller.RotationRate = controller->RotationRate; save.Controller.DesiredRotation = controller->DesiredRotation; save.Controller.MinDistForNetRBCorrection = controller->MinDistForNetRBCorrection; save.Controller.PlayerNum = controller->PlayerNum; save.Controller.bIsPlayer = controller->bIsPlayer; save.Controller.bGodMode = controller->bGodMode; save.Controller.bAffectedByHitEffects = controller->bAffectedByHitEffects; save.Controller.bSoaking = controller->bSoaking; save.Controller.bSlowerZAcquire = controller->bSlowerZAcquire; save.Controller.bForceStrafe = controller->bForceStrafe; save.Controller.bNotifyPostLanded = controller->bNotifyPostLanded; save.Controller.bNotifyApex = controller->bNotifyApex; save.Controller.bAdvancedTactics = controller->bAdvancedTactics; save.Controller.bCanDoSpecial = controller->bCanDoSpecial; save.Controller.bAdjusting = controller->bAdjusting; save.Controller.bPreparingMove = controller->bPreparingMove; save.Controller.bIgnoreMovementFocus = controller->bIgnoreMovementFocus; save.Controller.bLOSflag = controller->bLOSflag; save.Controller.bUsePlayerHearing = controller->bUsePlayerHearing; save.Controller.bNotifyFallingHitWall = controller->bNotifyFallingHitWall; save.Controller.bForceDesiredRotation = controller->bForceDesiredRotation; save.Controller.bPreciseDestination = controller->bPreciseDestination; save.Controller.bSeeFriendly = controller->bSeeFriendly; save.Controller.bUsingPathLanes = controller->bUsingPathLanes; save.Controller.bFire = controller->bFire; save.Controller.MinHitWall = controller->MinHitWall; save.Controller.MoveTimer = controller->MoveTimer; save.Controller.Destination = controller->Destination; save.Controller.FocalPoint = controller->FocalPoint; save.Controller.AdjustLoc = controller->AdjustLoc; save.Controller.CurrentPathDir = controller->CurrentPathDir; save.Controller.RouteDist = controller->RouteDist; save.Controller.LastRouteFind = controller->LastRouteFind; save.Controller.GroundPitchTime = controller->GroundPitchTime; save.Controller.ViewX = controller->ViewX; save.Controller.ViewY = controller->ViewY; save.Controller.ViewZ = controller->ViewZ; save.Controller.FailedReachTime = controller->FailedReachTime; save.Controller.FailedReachLocation = controller->FailedReachLocation; save.Controller.SightCounter = controller->SightCounter; save.Controller.RespawnPredictionTime = controller->RespawnPredictionTime; save.Controller.InUseNodeCostMultiplier = controller->InUseNodeCostMultiplier; save.Controller.HighJumpNodeCostModifier = controller->HighJumpNodeCostModifier; save.Controller.LaneOffset = controller->LaneOffset; save.Controller.OldBasedRotation = controller->OldBasedRotation; save.Controller.currentLaneSlot = controller->currentLaneSlot; save.Controller.pathMatesCount = controller->pathMatesCount; save.Controller.bFrozen = controller->bFrozen; save.Controller.bPressedJump = controller->bPressedJump; save.Controller.bDoubleJump = controller->bDoubleJump; save.Controller.bUpdatePosition = controller->bUpdatePosition; save.Controller.bUpdating = controller->bUpdating; save.Controller.bNeverSwitchOnPickup = controller->bNeverSwitchOnPickup; save.Controller.bCheatFlying = controller->bCheatFlying; save.Controller.bCameraPositionLocked = controller->bCameraPositionLocked; save.Controller.bShortConnectTimeOut = controller->bShortConnectTimeOut; save.Controller.bPendingDestroy = controller->bPendingDestroy; save.Controller.bWasSpeedHack = controller->bWasSpeedHack; save.Controller.bWasSaturated = controller->bWasSaturated; save.Controller.bDynamicNetSpeed = controller->bDynamicNetSpeed; save.Controller.bAimingHelp = controller->bAimingHelp; save.Controller.bCinematicMode = controller->bCinematicMode; save.Controller.bCinemaDisableInputMove = controller->bCinemaDisableInputMove; save.Controller.bCinemaDisableInputLook = controller->bCinemaDisableInputLook; save.Controller.bReplicateAllPawns = controller->bReplicateAllPawns; save.Controller.bIsUsingStreamingVolumes = controller->bIsUsingStreamingVolumes; save.Controller.bIsExternalUIOpen = controller->bIsExternalUIOpen; save.Controller.bIsControllerConnected = controller->bIsControllerConnected; save.Controller.bCheckSoundOcclusion = controller->bCheckSoundOcclusion; save.Controller.bLogHearSoundOverflow = controller->bLogHearSoundOverflow; save.Controller.bCheckRelevancyThroughPortals = controller->bCheckRelevancyThroughPortals; save.Controller.bReceivedUniqueId = controller->bReceivedUniqueId; save.Controller.bCanSeeLOI = controller->bCanSeeLOI; save.Controller.MaxResponseTime = controller->MaxResponseTime; save.Controller.WaitDelay = controller->WaitDelay; save.Controller.DoubleClickDir = controller->DoubleClickDir; save.Controller.bIgnoreMoveInput = controller->bIgnoreMoveInput; save.Controller.bIgnoreLookInput = controller->bIgnoreLookInput; save.Controller.bRun = controller->bRun; save.Controller.bDuck = controller->bDuck; save.Controller.NetPlayerIndex = controller->NetPlayerIndex; save.Controller.FOVAngle = controller->FOVAngle; save.Controller.DesiredFOV = controller->DesiredFOV; save.Controller.DefaultFOV = controller->DefaultFOV; save.Controller.LODDistanceFactor = controller->LODDistanceFactor; save.Controller.TargetViewRotation = controller->TargetViewRotation; save.Controller.TargetEyeHeight = controller->TargetEyeHeight; save.Controller.BlendedTargetViewRotation = controller->BlendedTargetViewRotation; save.Controller.LastAckedAccel = controller->LastAckedAccel; save.Controller.CurrentTimeStamp = controller->CurrentTimeStamp; save.Controller.LastUpdateTime = controller->LastUpdateTime; save.Controller.ServerTimeStamp = controller->ServerTimeStamp; save.Controller.TimeMargin = controller->TimeMargin; save.Controller.ClientUpdateTime = controller->ClientUpdateTime; save.Controller.MaxTimeMargin = controller->MaxTimeMargin; save.Controller.LastActiveTime = controller->LastActiveTime; save.Controller.ClientCap = controller->ClientCap; save.Controller.DynamicPingThreshold = controller->DynamicPingThreshold; save.Controller.LastPingUpdate = controller->LastPingUpdate; save.Controller.OldPing = controller->OldPing; save.Controller.LastSpeedHackLog = controller->LastSpeedHackLog; save.Controller.ProgressTimeOut = controller->ProgressTimeOut; save.Controller.GroundPitch = controller->GroundPitch; save.Controller.OldFloor = controller->OldFloor; save.Controller.FailedPathStart = controller->FailedPathStart; save.Controller.InteractDistance = controller->InteractDistance; save.Controller.LastBroadcastTime = controller->LastBroadcastTime; save.Controller.SpectatorCameraSpeed = controller->SpectatorCameraSpeed; save.Controller.MinRespawnDelay = controller->MinRespawnDelay; save.Controller.MaxConcurrentHearSounds = controller->MaxConcurrentHearSounds; save.Controller.InfiniteAmmo = controller->InfiniteAmmo; save.Controller.bDebugPostProcessFreeFlight = controller->bDebugPostProcessFreeFlight; save.Controller.bReleasedJump = controller->bReleasedJump; save.Controller.bLeftThumbStickPassedDeadZone = controller->bLeftThumbStickPassedDeadZone; save.Controller.bRightThumbStickPassedDeadZone = controller->bRightThumbStickPassedDeadZone; save.Controller.bDebugCloseCombat = controller->bDebugCloseCombat; save.Controller.bDisableSkipCutscenes = controller->bDisableSkipCutscenes; save.Controller.bReactionTime = controller->bReactionTime; save.Controller.bOverrideReactionTimeSettings = controller->bOverrideReactionTimeSettings; save.Controller.bJesusMode = controller->bJesusMode; save.Controller.bStefanMode = controller->bStefanMode; save.Controller.bIsWalking = controller->bIsWalking; save.Controller.bIsStopping = controller->bIsStopping; save.Controller.FailedToSpawn = controller->FailedToSpawn; save.Controller.bDisableLoadFromLastCheckpoint = controller->bDisableLoadFromLastCheckpoint; save.Controller.bDebugSoundMixGroups = controller->bDebugSoundMixGroups; save.Controller.bDebugSoundVelocity = controller->bDebugSoundVelocity; save.Controller.bDebugSoundReverbVolumes = controller->bDebugSoundReverbVolumes; save.Controller.ControllerTilt = controller->ControllerTilt; save.Controller.VisualizeControllerTilt = controller->VisualizeControllerTilt; save.Controller.bRopeburnDisarmSucceeded = controller->bRopeburnDisarmSucceeded; save.Controller.TimePressedJump = controller->TimePressedJump; save.Controller.JumpTapTime = controller->JumpTapTime; save.Controller.BagSearchTapTime = controller->BagSearchTapTime; save.Controller.LastEmoteMessageTime = controller->LastEmoteMessageTime; save.Controller.AllowedEmoteMessageInterval = controller->AllowedEmoteMessageInterval; save.Controller.TargetingPawnInterp = controller->TargetingPawnInterp; save.Controller.TargetingCutoffAngle = controller->TargetingCutoffAngle; save.Controller.TargetActorLocation = controller->TargetActorLocation; save.Controller.LookAtTimeDelay = controller->LookAtTimeDelay; save.Controller.MeleeLastAction = controller->MeleeLastAction; save.Controller.bIgnoreButtonInput = controller->bIgnoreButtonInput; save.Controller.CurrentSoundMode = controller->CurrentSoundMode; save.Controller.CachedWalkingState = controller->CachedWalkingState; save.Controller.CloseCombatMinRange = controller->CloseCombatMinRange; save.Controller.CloseCombatMaxRange = controller->CloseCombatMaxRange; save.Controller.CloseCombatRangeTime = controller->CloseCombatRangeTime; save.Controller.CloseCombatMaxAngle = controller->CloseCombatMaxAngle; save.Controller.CloseCombatPawnDistanceBias = controller->CloseCombatPawnDistanceBias; save.Controller.InputSize = controller->InputSize; save.Controller.InputMaxSprintRaduisLimit = controller->InputMaxSprintRaduisLimit; save.Controller.InputMaxSprintHeightLimit = controller->InputMaxSprintHeightLimit; save.Controller.InputMaxWalkRadiusLimit = controller->InputMaxWalkRadiusLimit; save.Controller.WallRunningAlignTime = controller->WallRunningAlignTime; save.Controller.WallRunningAlignYaw = controller->WallRunningAlignYaw; save.Controller.LOIIndex = controller->LOIIndex; save.Controller.ReactionTimeEnergy = controller->ReactionTimeEnergy; save.Controller.ReactionTimeSpawnLevel = controller->ReactionTimeSpawnLevel; save.Controller.ReactionTimeDrain = controller->ReactionTimeDrain; save.Controller.ReactionTimeMaxEffect = controller->ReactionTimeMaxEffect; save.Controller.ReactionTimeFadeIn = controller->ReactionTimeFadeIn; save.Controller.ReactionTimeFadeOut = controller->ReactionTimeFadeOut; save.Controller.ReactionTimeEnergyBuildRate = controller->ReactionTimeEnergyBuildRate; save.Controller.WallClimbingDodgeJumpThreshold = controller->WallClimbingDodgeJumpThreshold; save.Controller.WallRunningDodgeJumpThreshold = controller->WallRunningDodgeJumpThreshold; save.Controller.WalkCyclePart1 = controller->WalkCyclePart1; save.Controller.WalkCyclePart2 = controller->WalkCyclePart2; save.Controller.AccelerationTime = controller->AccelerationTime; save.Controller.StopAnimBlendIn = controller->StopAnimBlendIn; save.Controller.StopAnimBlendOut = controller->StopAnimBlendOut; save.Controller.StoppingVelocity = controller->StoppingVelocity; save.Controller.NextLocalEnemyToCheckLOS = controller->NextLocalEnemyToCheckLOS; save.Controller.LastEnemyNetSendTime = controller->LastEnemyNetSendTime; save.Controller.VehicleRotation = controller->VehicleRotation; save.Controller.DriverRotation = controller->DriverRotation; save.Controller.Team = controller->Team; save.Controller.StickySpeed = controller->StickySpeed; save.Controller.FOVZoomRate = controller->FOVZoomRate; save.Controller.FOVZoomDelay = controller->FOVZoomDelay; save.Controller.MouseX = controller->MouseX; save.Controller.MouseY = controller->MouseY; save.Controller.ActualAccelX = controller->ActualAccelX; save.Controller.ActualAccelY = controller->ActualAccelY; save.Controller.ActualAccelZ = controller->ActualAccelZ; save.Controller.SixAxisDisarmZ = controller->SixAxisDisarmZ; save.Controller.SixAxisDisarmY = controller->SixAxisDisarmY; save.Controller.SixAxisRollZ = controller->SixAxisRollZ; save.Controller.SixAxisRollY = controller->SixAxisRollY; save.Controller.DisarmTimeMultiplier = controller->DisarmTimeMultiplier; save.Controller.LastZAxisTilt = controller->LastZAxisTilt; save.Controller.LastYAxisTilt = controller->LastYAxisTilt;

	auto walking = static_cast<Classes::UTdMove_Walking *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Walking)]);
	if (walking) {
		save.Walking.SpeedModifier = walking->SpeedModifier; save.Walking.FrictionModifier = walking->FrictionModifier; save.Walking.bDebugMove = walking->bDebugMove; save.Walking.bTriggersCompliment = walking->bTriggersCompliment; save.Walking.bDisableCollision = walking->bDisableCollision; save.Walking.bShouldHolsterWeapon = walking->bShouldHolsterWeapon; save.Walking.bShouldUnzoom = walking->bShouldUnzoom; save.Walking.bIsTimedMove = walking->bIsTimedMove; save.Walking.bConstrainLook = walking->bConstrainLook; save.Walking.bUseAbsoluteYawConstraint = walking->bUseAbsoluteYawConstraint; save.Walking.bDisableActorCollision = walking->bDisableActorCollision; save.Walking.bLookAtTargetLocation = walking->bLookAtTargetLocation; save.Walking.bLookAtTargetAngle = walking->bLookAtTargetAngle; save.Walking.bDisableFaceRotation = walking->bDisableFaceRotation; save.Walking.bDisableControllerFacingPawnYawRotation = walking->bDisableControllerFacingPawnYawRotation; save.Walking.bAvoidLedges = walking->bAvoidLedges; save.Walking.bUsePreciseLocation = walking->bUsePreciseLocation; save.Walking.bReachedPreciseLocation = walking->bReachedPreciseLocation; save.Walking.bDebugPreciseLocation = walking->bDebugPreciseLocation; save.Walking.bUsePreciseRotation = walking->bUsePreciseRotation; save.Walking.bReachedPreciseRotation = walking->bReachedPreciseRotation; save.Walking.bDelayRotationAndLocationCallback = walking->bDelayRotationAndLocationCallback; save.Walking.bResetCameraLook = walking->bResetCameraLook; save.Walking.bUseCustomCollision = walking->bUseCustomCollision; save.Walking.bUseCameraCollision = walking->bUseCameraCollision; save.Walking.bTwoHandedFullBodyAnimations = walking->bTwoHandedFullBodyAnimations; save.Walking.bStickyAim = walking->bStickyAim; save.Walking.bStopAfterMove = walking->bStopAfterMove; save.Walking.bEnableFootPlacement = walking->bEnableFootPlacement; save.Walking.bEnableAgainstWall = walking->bEnableAgainstWall; save.Walking.bAllowPickup = walking->bAllowPickup; save.Walking.AiAimPenalty = walking->AiAimPenalty; save.Walking.AiAimOneShotPenalty = walking->AiAimOneShotPenalty; save.Walking.MovementGroup = walking->MovementGroup; save.Walking.FirstPersonDPG = walking->FirstPersonDPG; save.Walking.FirstPersonLowerBodyDPG = walking->FirstPersonLowerBodyDPG; save.Walking.PreciseLocationInterpMode = walking->PreciseLocationInterpMode; save.Walking.AimMode = walking->AimMode; save.Walking.DisableMovementTime = walking->DisableMovementTime; save.Walking.DisableLookTime = walking->DisableLookTime; save.Walking.LastCanDoMoveTime = walking->LastCanDoMoveTime; save.Walking.LastStopMoveTime = walking->LastStopMoveTime; save.Walking.MoveActiveTime = walking->MoveActiveTime; save.Walking.RedoMoveTime = walking->RedoMoveTime; save.Walking.PreciseLocationSpeed = walking->PreciseLocationSpeed; save.Walking.PreciseLocation = walking->PreciseLocation; save.Walking.PreciseRotationInterpolationTime = walking->PreciseRotationInterpolationTime; save.Walking.PreciseRotation = walking->PreciseRotation; save.Walking.LookAtTargetLocation = walking->LookAtTargetLocation; save.Walking.LookAtTargetAngle = walking->LookAtTargetAngle; save.Walking.LookAtTargetInterpolationTime = walking->LookAtTargetInterpolationTime; save.Walking.LookAtTargetDuration = walking->LookAtTargetDuration; save.Walking.CancelResetCameraLookTime = walking->CancelResetCameraLookTime; save.Walking.ResetCameraLookTime = walking->ResetCameraLookTime; save.Walking.MinLookConstraint = walking->MinLookConstraint; save.Walking.MaxLookConstraint = walking->MaxLookConstraint; save.Walking.CustomCollisionRadius = walking->CustomCollisionRadius; save.Walking.CustomCollisionHeight = walking->CustomCollisionHeight; save.Walking.WeaponInactivePitchAimingLimit = walking->WeaponInactivePitchAimingLimit; save.Walking.RootMotionScale = walking->RootMotionScale; save.Walking.RootOffset = walking->RootOffset; save.Walking.SwanNeckEnableAtPitch = walking->SwanNeckEnableAtPitch; save.Walking.SwanNeckForward = walking->SwanNeckForward; save.Walking.SwanNeckDown = walking->SwanNeckDown; save.Walking.AnimBlendTime = walking->AnimBlendTime; save.Walking.StickyAngle = walking->StickyAngle; save.Walking.StickyAimedModifier = walking->StickyAimedModifier; save.Walking.Timer = walking->Timer; save.Walking.PawnPhysics = walking->PawnPhysics; save.Walking.HandPlantExtentCheckHeight = walking->HandPlantExtentCheckHeight; save.Walking.HandPlantExtentCheckWidth = walking->HandPlantExtentCheckWidth; save.Walking.HandPlantCheckDistance = walking->HandPlantCheckDistance; save.Walking.HandPlantCheckHeight = walking->HandPlantCheckHeight; save.Walking.ContextMoveDistanceMultiplier = walking->ContextMoveDistanceMultiplier; save.Walking.bCheckForGrab = walking->bCheckForGrab; save.Walking.bCheckForVaultOver = walking->bCheckForVaultOver; save.Walking.bCheckForWallClimb = walking->bCheckForWallClimb; save.Walking.bCheckForEdgeInVelDir = walking->bCheckForEdgeInVelDir; save.Walking.bCheckExitToFalling = walking->bCheckExitToFalling; save.Walking.bCheckExitToUncontrolledFalling = walking->bCheckExitToUncontrolledFalling; save.Walking.bCheckForSoftLanding = walking->bCheckForSoftLanding; save.Walking.bDelayTimeCheckAutoMoves = walking->bDelayTimeCheckAutoMoves; save.Walking.ExitToFallingZSpeed = walking->ExitToFallingZSpeed; save.Walking.SoftLandingZSpeedThreshold = walking->SoftLandingZSpeedThreshold; save.Walking.TimeToSoftLandingThreshold = walking->TimeToSoftLandingThreshold; save.Walking.bIsPlayingIdleAnim = walking->bIsPlayingIdleAnim; save.Walking.TriggerIdleAnimMinTime = walking->TriggerIdleAnimMinTime; save.Walking.TriggerIdleAnimMaxTime = walking->TriggerIdleAnimMaxTime;
	}

	auto falling = static_cast<Classes::UTdMove_Falling *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Falling)]);
	if (falling) {
		save.Falling.SpeedModifier = falling->SpeedModifier; save.Falling.FrictionModifier = falling->FrictionModifier; save.Falling.bDebugMove = falling->bDebugMove; save.Falling.bTriggersCompliment = falling->bTriggersCompliment; save.Falling.bDisableCollision = falling->bDisableCollision; save.Falling.bShouldHolsterWeapon = falling->bShouldHolsterWeapon; save.Falling.bShouldUnzoom = falling->bShouldUnzoom; save.Falling.bIsTimedMove = falling->bIsTimedMove; save.Falling.bConstrainLook = falling->bConstrainLook; save.Falling.bUseAbsoluteYawConstraint = falling->bUseAbsoluteYawConstraint; save.Falling.bDisableActorCollision = falling->bDisableActorCollision; save.Falling.bLookAtTargetLocation = falling->bLookAtTargetLocation; save.Falling.bLookAtTargetAngle = falling->bLookAtTargetAngle; save.Falling.bDisableFaceRotation = falling->bDisableFaceRotation; save.Falling.bDisableControllerFacingPawnYawRotation = falling->bDisableControllerFacingPawnYawRotation; save.Falling.bAvoidLedges = falling->bAvoidLedges; save.Falling.bUsePreciseLocation = falling->bUsePreciseLocation; save.Falling.bReachedPreciseLocation = falling->bReachedPreciseLocation; save.Falling.bDebugPreciseLocation = falling->bDebugPreciseLocation; save.Falling.bUsePreciseRotation = falling->bUsePreciseRotation; save.Falling.bReachedPreciseRotation = falling->bReachedPreciseRotation; save.Falling.bDelayRotationAndLocationCallback = falling->bDelayRotationAndLocationCallback; save.Falling.bResetCameraLook = falling->bResetCameraLook; save.Falling.bUseCustomCollision = falling->bUseCustomCollision; save.Falling.bUseCameraCollision = falling->bUseCameraCollision; save.Falling.bTwoHandedFullBodyAnimations = falling->bTwoHandedFullBodyAnimations; save.Falling.bStickyAim = falling->bStickyAim; save.Falling.bStopAfterMove = falling->bStopAfterMove; save.Falling.bEnableFootPlacement = falling->bEnableFootPlacement; save.Falling.bEnableAgainstWall = falling->bEnableAgainstWall; save.Falling.bAllowPickup = falling->bAllowPickup; save.Falling.AiAimPenalty = falling->AiAimPenalty; save.Falling.AiAimOneShotPenalty = falling->AiAimOneShotPenalty; save.Falling.MovementGroup = falling->MovementGroup; save.Falling.FirstPersonDPG = falling->FirstPersonDPG; save.Falling.FirstPersonLowerBodyDPG = falling->FirstPersonLowerBodyDPG; save.Falling.PreciseLocationInterpMode = falling->PreciseLocationInterpMode; save.Falling.AimMode = falling->AimMode; save.Falling.DisableMovementTime = falling->DisableMovementTime; save.Falling.DisableLookTime = falling->DisableLookTime; save.Falling.LastCanDoMoveTime = falling->LastCanDoMoveTime; save.Falling.LastStopMoveTime = falling->LastStopMoveTime; save.Falling.MoveActiveTime = falling->MoveActiveTime; save.Falling.RedoMoveTime = falling->RedoMoveTime; save.Falling.PreciseLocationSpeed = falling->PreciseLocationSpeed; save.Falling.PreciseLocation = falling->PreciseLocation; save.Falling.PreciseRotationInterpolationTime = falling->PreciseRotationInterpolationTime; save.Falling.PreciseRotation = falling->PreciseRotation; save.Falling.LookAtTargetLocation = falling->LookAtTargetLocation; save.Falling.LookAtTargetAngle = falling->LookAtTargetAngle; save.Falling.LookAtTargetInterpolationTime = falling->LookAtTargetInterpolationTime; save.Falling.LookAtTargetDuration = falling->LookAtTargetDuration; save.Falling.CancelResetCameraLookTime = falling->CancelResetCameraLookTime; save.Falling.ResetCameraLookTime = falling->ResetCameraLookTime; save.Falling.MinLookConstraint = falling->MinLookConstraint; save.Falling.MaxLookConstraint = falling->MaxLookConstraint; save.Falling.CustomCollisionRadius = falling->CustomCollisionRadius; save.Falling.CustomCollisionHeight = falling->CustomCollisionHeight; save.Falling.WeaponInactivePitchAimingLimit = falling->WeaponInactivePitchAimingLimit; save.Falling.RootMotionScale = falling->RootMotionScale; save.Falling.RootOffset = falling->RootOffset; save.Falling.SwanNeckEnableAtPitch = falling->SwanNeckEnableAtPitch; save.Falling.SwanNeckForward = falling->SwanNeckForward; save.Falling.SwanNeckDown = falling->SwanNeckDown; save.Falling.AnimBlendTime = falling->AnimBlendTime; save.Falling.StickyAngle = falling->StickyAngle; save.Falling.StickyAimedModifier = falling->StickyAimedModifier; save.Falling.Timer = falling->Timer; save.Falling.PawnPhysics = falling->PawnPhysics; save.Falling.HandPlantExtentCheckHeight = falling->HandPlantExtentCheckHeight; save.Falling.HandPlantExtentCheckWidth = falling->HandPlantExtentCheckWidth; save.Falling.HandPlantCheckDistance = falling->HandPlantCheckDistance; save.Falling.HandPlantCheckHeight = falling->HandPlantCheckHeight; save.Falling.ContextMoveDistanceMultiplier = falling->ContextMoveDistanceMultiplier; save.Falling.bCheckForGrab = falling->bCheckForGrab; save.Falling.bCheckForVaultOver = falling->bCheckForVaultOver; save.Falling.bCheckForWallClimb = falling->bCheckForWallClimb; save.Falling.bCheckForEdgeInVelDir = falling->bCheckForEdgeInVelDir; save.Falling.bCheckExitToFalling = falling->bCheckExitToFalling; save.Falling.bCheckExitToUncontrolledFalling = falling->bCheckExitToUncontrolledFalling; save.Falling.bCheckForSoftLanding = falling->bCheckForSoftLanding; save.Falling.bDelayTimeCheckAutoMoves = falling->bDelayTimeCheckAutoMoves; save.Falling.ExitToFallingZSpeed = falling->ExitToFallingZSpeed; save.Falling.SoftLandingZSpeedThreshold = falling->SoftLandingZSpeedThreshold; save.Falling.TimeToSoftLandingThreshold = falling->TimeToSoftLandingThreshold; save.Falling.StickyAimAfterAirTime = falling->StickyAimAfterAirTime; save.Falling.AirTime = falling->AirTime; save.Falling.bCloseToGround = falling->bCloseToGround; save.Falling.PreviousMove = falling->PreviousMove;
	}

	auto grabbing = static_cast<Classes::UTdMove_Grab *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Grabbing)]);
	if (grabbing) {
		save.Grabbing.SpeedModifier = grabbing->SpeedModifier; save.Grabbing.FrictionModifier = grabbing->FrictionModifier; save.Grabbing.bDebugMove = grabbing->bDebugMove; save.Grabbing.bTriggersCompliment = grabbing->bTriggersCompliment; save.Grabbing.bDisableCollision = grabbing->bDisableCollision; save.Grabbing.bShouldHolsterWeapon = grabbing->bShouldHolsterWeapon; save.Grabbing.bShouldUnzoom = grabbing->bShouldUnzoom; save.Grabbing.bIsTimedMove = grabbing->bIsTimedMove; save.Grabbing.bConstrainLook = grabbing->bConstrainLook; save.Grabbing.bUseAbsoluteYawConstraint = grabbing->bUseAbsoluteYawConstraint; save.Grabbing.bDisableActorCollision = grabbing->bDisableActorCollision; save.Grabbing.bLookAtTargetLocation = grabbing->bLookAtTargetLocation; save.Grabbing.bLookAtTargetAngle = grabbing->bLookAtTargetAngle; save.Grabbing.bDisableFaceRotation = grabbing->bDisableFaceRotation; save.Grabbing.bDisableControllerFacingPawnYawRotation = grabbing->bDisableControllerFacingPawnYawRotation; save.Grabbing.bAvoidLedges = grabbing->bAvoidLedges; save.Grabbing.bUsePreciseLocation = grabbing->bUsePreciseLocation; save.Grabbing.bReachedPreciseLocation = grabbing->bReachedPreciseLocation; save.Grabbing.bDebugPreciseLocation = grabbing->bDebugPreciseLocation; save.Grabbing.bUsePreciseRotation = grabbing->bUsePreciseRotation; save.Grabbing.bReachedPreciseRotation = grabbing->bReachedPreciseRotation; save.Grabbing.bDelayRotationAndLocationCallback = grabbing->bDelayRotationAndLocationCallback; save.Grabbing.bResetCameraLook = grabbing->bResetCameraLook; save.Grabbing.bUseCustomCollision = grabbing->bUseCustomCollision; save.Grabbing.bUseCameraCollision = grabbing->bUseCameraCollision; save.Grabbing.bTwoHandedFullBodyAnimations = grabbing->bTwoHandedFullBodyAnimations; save.Grabbing.bStickyAim = grabbing->bStickyAim; save.Grabbing.bStopAfterMove = grabbing->bStopAfterMove; save.Grabbing.bEnableFootPlacement = grabbing->bEnableFootPlacement; save.Grabbing.bEnableAgainstWall = grabbing->bEnableAgainstWall; save.Grabbing.bAllowPickup = grabbing->bAllowPickup; save.Grabbing.AiAimPenalty = grabbing->AiAimPenalty; save.Grabbing.AiAimOneShotPenalty = grabbing->AiAimOneShotPenalty; save.Grabbing.MovementGroup = grabbing->MovementGroup; save.Grabbing.FirstPersonDPG = grabbing->FirstPersonDPG; save.Grabbing.FirstPersonLowerBodyDPG = grabbing->FirstPersonLowerBodyDPG; save.Grabbing.PreciseLocationInterpMode = grabbing->PreciseLocationInterpMode; save.Grabbing.AimMode = grabbing->AimMode; save.Grabbing.DisableMovementTime = grabbing->DisableMovementTime; save.Grabbing.DisableLookTime = grabbing->DisableLookTime; save.Grabbing.LastCanDoMoveTime = grabbing->LastCanDoMoveTime; save.Grabbing.LastStopMoveTime = grabbing->LastStopMoveTime; save.Grabbing.MoveActiveTime = grabbing->MoveActiveTime; save.Grabbing.RedoMoveTime = grabbing->RedoMoveTime; save.Grabbing.PreciseLocationSpeed = grabbing->PreciseLocationSpeed; save.Grabbing.PreciseLocation = grabbing->PreciseLocation; save.Grabbing.PreciseRotationInterpolationTime = grabbing->PreciseRotationInterpolationTime; save.Grabbing.PreciseRotation = grabbing->PreciseRotation; save.Grabbing.LookAtTargetLocation = grabbing->LookAtTargetLocation; save.Grabbing.LookAtTargetAngle = grabbing->LookAtTargetAngle; save.Grabbing.LookAtTargetInterpolationTime = grabbing->LookAtTargetInterpolationTime; save.Grabbing.LookAtTargetDuration = grabbing->LookAtTargetDuration; save.Grabbing.CancelResetCameraLookTime = grabbing->CancelResetCameraLookTime; save.Grabbing.ResetCameraLookTime = grabbing->ResetCameraLookTime; save.Grabbing.MinLookConstraint = grabbing->MinLookConstraint; save.Grabbing.MaxLookConstraint = grabbing->MaxLookConstraint; save.Grabbing.CustomCollisionRadius = grabbing->CustomCollisionRadius; save.Grabbing.CustomCollisionHeight = grabbing->CustomCollisionHeight; save.Grabbing.WeaponInactivePitchAimingLimit = grabbing->WeaponInactivePitchAimingLimit; save.Grabbing.RootMotionScale = grabbing->RootMotionScale; save.Grabbing.RootOffset = grabbing->RootOffset; save.Grabbing.SwanNeckEnableAtPitch = grabbing->SwanNeckEnableAtPitch; save.Grabbing.SwanNeckForward = grabbing->SwanNeckForward; save.Grabbing.SwanNeckDown = grabbing->SwanNeckDown; save.Grabbing.AnimBlendTime = grabbing->AnimBlendTime; save.Grabbing.StickyAngle = grabbing->StickyAngle; save.Grabbing.StickyAimedModifier = grabbing->StickyAimedModifier; save.Grabbing.Timer = grabbing->Timer; save.Grabbing.PawnPhysics = grabbing->PawnPhysics; save.Grabbing.HandPlantExtentCheckHeight = grabbing->HandPlantExtentCheckHeight; save.Grabbing.HandPlantExtentCheckWidth = grabbing->HandPlantExtentCheckWidth; save.Grabbing.HandPlantCheckDistance = grabbing->HandPlantCheckDistance; save.Grabbing.HandPlantCheckHeight = grabbing->HandPlantCheckHeight; save.Grabbing.ContextMoveDistanceMultiplier = grabbing->ContextMoveDistanceMultiplier; save.Grabbing.bCheckForGrab = grabbing->bCheckForGrab; save.Grabbing.bCheckForVaultOver = grabbing->bCheckForVaultOver; save.Grabbing.bCheckForWallClimb = grabbing->bCheckForWallClimb; save.Grabbing.bCheckForEdgeInVelDir = grabbing->bCheckForEdgeInVelDir; save.Grabbing.bCheckExitToFalling = grabbing->bCheckExitToFalling; save.Grabbing.bCheckExitToUncontrolledFalling = grabbing->bCheckExitToUncontrolledFalling; save.Grabbing.bCheckForSoftLanding = grabbing->bCheckForSoftLanding; save.Grabbing.bDelayTimeCheckAutoMoves = grabbing->bDelayTimeCheckAutoMoves; save.Grabbing.ExitToFallingZSpeed = grabbing->ExitToFallingZSpeed; save.Grabbing.SoftLandingZSpeedThreshold = grabbing->SoftLandingZSpeedThreshold; save.Grabbing.TimeToSoftLandingThreshold = grabbing->TimeToSoftLandingThreshold; save.Grabbing.GrabDesiredLedgeOffset = grabbing->GrabDesiredLedgeOffset; save.Grabbing.GrabMaxAngle = grabbing->GrabMaxAngle; save.Grabbing.GrabMinGrabableZNormal = grabbing->GrabMinGrabableZNormal; save.Grabbing.HangFreeZDistanceCheck = grabbing->HangFreeZDistanceCheck; save.Grabbing.RelativeExtent = grabbing->RelativeExtent; save.Grabbing.DistanceToWallFromFeet = grabbing->DistanceToWallFromFeet; save.Grabbing.StartTurningAngle = grabbing->StartTurningAngle; save.Grabbing.bIsWithinForwardView = grabbing->bIsWithinForwardView; save.Grabbing.bIsTurnedRight = grabbing->bIsTurnedRight; save.Grabbing.bSlopedLedge = grabbing->bSlopedLedge; save.Grabbing.bClimpUpFoldedActionReceived = grabbing->bClimpUpFoldedActionReceived; save.Grabbing.bRequestDropDown = grabbing->bRequestDropDown; save.Grabbing.bHangFreeVertigoEffect = grabbing->bHangFreeVertigoEffect; save.Grabbing.bGrabFromVerticalWallrun = grabbing->bGrabFromVerticalWallrun; save.Grabbing.bGrabFromHighZSpeed = grabbing->bGrabFromHighZSpeed; save.Grabbing.GrabType = grabbing->GrabType; save.Grabbing.PreviousGrabType = grabbing->PreviousGrabType; save.Grabbing.CurrentShimmyMove = grabbing->CurrentShimmyMove; save.Grabbing.CurrentFoldedType = grabbing->CurrentFoldedType; save.Grabbing.HangFreeMinLookContraint = grabbing->HangFreeMinLookContraint; save.Grabbing.HangFreeMaxLookContraint = grabbing->HangFreeMaxLookContraint; save.Grabbing.SlopeMinLookContraint = grabbing->SlopeMinLookContraint; save.Grabbing.SlopeMaxLookContraint = grabbing->SlopeMaxLookContraint; save.Grabbing.ShimmyAroundCornerMinLookContraint = grabbing->ShimmyAroundCornerMinLookContraint; save.Grabbing.ShimmyAroundCornerMaxLookContraint = grabbing->ShimmyAroundCornerMaxLookContraint; save.Grabbing.ShimmyAroundCornerFreeMinLookContraint = grabbing->ShimmyAroundCornerFreeMinLookContraint; save.Grabbing.ShimmyAroundCornerFreeMaxLookContraint = grabbing->ShimmyAroundCornerFreeMaxLookContraint; save.Grabbing.TargetYaw = grabbing->TargetYaw; save.Grabbing.TargetLocation = grabbing->TargetLocation; save.Grabbing.ShimmyVelocity = grabbing->ShimmyVelocity; save.Grabbing.ShimmyTime = grabbing->ShimmyTime; save.Grabbing.LastShimmyTimeSeconds = grabbing->LastShimmyTimeSeconds; save.Grabbing.DisableShimmyTime = grabbing->DisableShimmyTime; save.Grabbing.StartLookingAtLedgeTime = grabbing->StartLookingAtLedgeTime; save.Grabbing.StopLookingAtLedgeTime = grabbing->StopLookingAtLedgeTime;
	}

	auto wallRunRight = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningRight)]);
	if (wallRunRight) {
		save.WallRunRight.SpeedModifier = wallRunRight->SpeedModifier; save.WallRunRight.FrictionModifier = wallRunRight->FrictionModifier; save.WallRunRight.bDebugMove = wallRunRight->bDebugMove; save.WallRunRight.bTriggersCompliment = wallRunRight->bTriggersCompliment; save.WallRunRight.bDisableCollision = wallRunRight->bDisableCollision; save.WallRunRight.bShouldHolsterWeapon = wallRunRight->bShouldHolsterWeapon; save.WallRunRight.bShouldUnzoom = wallRunRight->bShouldUnzoom; save.WallRunRight.bIsTimedMove = wallRunRight->bIsTimedMove; save.WallRunRight.bConstrainLook = wallRunRight->bConstrainLook; save.WallRunRight.bUseAbsoluteYawConstraint = wallRunRight->bUseAbsoluteYawConstraint; save.WallRunRight.bDisableActorCollision = wallRunRight->bDisableActorCollision; save.WallRunRight.bLookAtTargetLocation = wallRunRight->bLookAtTargetLocation; save.WallRunRight.bLookAtTargetAngle = wallRunRight->bLookAtTargetAngle; save.WallRunRight.bDisableFaceRotation = wallRunRight->bDisableFaceRotation; save.WallRunRight.bDisableControllerFacingPawnYawRotation = wallRunRight->bDisableControllerFacingPawnYawRotation; save.WallRunRight.bAvoidLedges = wallRunRight->bAvoidLedges; save.WallRunRight.bUsePreciseLocation = wallRunRight->bUsePreciseLocation; save.WallRunRight.bReachedPreciseLocation = wallRunRight->bReachedPreciseLocation; save.WallRunRight.bDebugPreciseLocation = wallRunRight->bDebugPreciseLocation; save.WallRunRight.bUsePreciseRotation = wallRunRight->bUsePreciseRotation; save.WallRunRight.bReachedPreciseRotation = wallRunRight->bReachedPreciseRotation; save.WallRunRight.bDelayRotationAndLocationCallback = wallRunRight->bDelayRotationAndLocationCallback; save.WallRunRight.bResetCameraLook = wallRunRight->bResetCameraLook; save.WallRunRight.bUseCustomCollision = wallRunRight->bUseCustomCollision; save.WallRunRight.bUseCameraCollision = wallRunRight->bUseCameraCollision; save.WallRunRight.bTwoHandedFullBodyAnimations = wallRunRight->bTwoHandedFullBodyAnimations; save.WallRunRight.bStickyAim = wallRunRight->bStickyAim; save.WallRunRight.bStopAfterMove = wallRunRight->bStopAfterMove; save.WallRunRight.bEnableFootPlacement = wallRunRight->bEnableFootPlacement; save.WallRunRight.bEnableAgainstWall = wallRunRight->bEnableAgainstWall; save.WallRunRight.bAllowPickup = wallRunRight->bAllowPickup; save.WallRunRight.AiAimPenalty = wallRunRight->AiAimPenalty; save.WallRunRight.AiAimOneShotPenalty = wallRunRight->AiAimOneShotPenalty; save.WallRunRight.MovementGroup = wallRunRight->MovementGroup; save.WallRunRight.FirstPersonDPG = wallRunRight->FirstPersonDPG; save.WallRunRight.FirstPersonLowerBodyDPG = wallRunRight->FirstPersonLowerBodyDPG; save.WallRunRight.PreciseLocationInterpMode = wallRunRight->PreciseLocationInterpMode; save.WallRunRight.AimMode = wallRunRight->AimMode; save.WallRunRight.DisableMovementTime = wallRunRight->DisableMovementTime; save.WallRunRight.DisableLookTime = wallRunRight->DisableLookTime; save.WallRunRight.LastCanDoMoveTime = wallRunRight->LastCanDoMoveTime; save.WallRunRight.LastStopMoveTime = wallRunRight->LastStopMoveTime; save.WallRunRight.MoveActiveTime = wallRunRight->MoveActiveTime; save.WallRunRight.RedoMoveTime = wallRunRight->RedoMoveTime; save.WallRunRight.PreciseLocationSpeed = wallRunRight->PreciseLocationSpeed; save.WallRunRight.PreciseLocation = wallRunRight->PreciseLocation; save.WallRunRight.PreciseRotationInterpolationTime = wallRunRight->PreciseRotationInterpolationTime; save.WallRunRight.PreciseRotation = wallRunRight->PreciseRotation; save.WallRunRight.LookAtTargetLocation = wallRunRight->LookAtTargetLocation; save.WallRunRight.LookAtTargetAngle = wallRunRight->LookAtTargetAngle; save.WallRunRight.LookAtTargetInterpolationTime = wallRunRight->LookAtTargetInterpolationTime; save.WallRunRight.LookAtTargetDuration = wallRunRight->LookAtTargetDuration; save.WallRunRight.CancelResetCameraLookTime = wallRunRight->CancelResetCameraLookTime; save.WallRunRight.ResetCameraLookTime = wallRunRight->ResetCameraLookTime; save.WallRunRight.MinLookConstraint = wallRunRight->MinLookConstraint; save.WallRunRight.MaxLookConstraint = wallRunRight->MaxLookConstraint; save.WallRunRight.CustomCollisionRadius = wallRunRight->CustomCollisionRadius; save.WallRunRight.CustomCollisionHeight = wallRunRight->CustomCollisionHeight; save.WallRunRight.WeaponInactivePitchAimingLimit = wallRunRight->WeaponInactivePitchAimingLimit; save.WallRunRight.RootMotionScale = wallRunRight->RootMotionScale; save.WallRunRight.RootOffset = wallRunRight->RootOffset; save.WallRunRight.SwanNeckEnableAtPitch = wallRunRight->SwanNeckEnableAtPitch; save.WallRunRight.SwanNeckForward = wallRunRight->SwanNeckForward; save.WallRunRight.SwanNeckDown = wallRunRight->SwanNeckDown; save.WallRunRight.AnimBlendTime = wallRunRight->AnimBlendTime; save.WallRunRight.StickyAngle = wallRunRight->StickyAngle; save.WallRunRight.StickyAimedModifier = wallRunRight->StickyAimedModifier; save.WallRunRight.Timer = wallRunRight->Timer; save.WallRunRight.PawnPhysics = wallRunRight->PawnPhysics; save.WallRunRight.HandPlantExtentCheckHeight = wallRunRight->HandPlantExtentCheckHeight; save.WallRunRight.HandPlantExtentCheckWidth = wallRunRight->HandPlantExtentCheckWidth; save.WallRunRight.HandPlantCheckDistance = wallRunRight->HandPlantCheckDistance; save.WallRunRight.HandPlantCheckHeight = wallRunRight->HandPlantCheckHeight; save.WallRunRight.ContextMoveDistanceMultiplier = wallRunRight->ContextMoveDistanceMultiplier; save.WallRunRight.bCheckForGrab = wallRunRight->bCheckForGrab; save.WallRunRight.bCheckForVaultOver = wallRunRight->bCheckForVaultOver; save.WallRunRight.bCheckForWallClimb = wallRunRight->bCheckForWallClimb; save.WallRunRight.bCheckForEdgeInVelDir = wallRunRight->bCheckForEdgeInVelDir; save.WallRunRight.bCheckExitToFalling = wallRunRight->bCheckExitToFalling; save.WallRunRight.bCheckExitToUncontrolledFalling = wallRunRight->bCheckExitToUncontrolledFalling; save.WallRunRight.bCheckForSoftLanding = wallRunRight->bCheckForSoftLanding; save.WallRunRight.bDelayTimeCheckAutoMoves = wallRunRight->bDelayTimeCheckAutoMoves; save.WallRunRight.ExitToFallingZSpeed = wallRunRight->ExitToFallingZSpeed; save.WallRunRight.SoftLandingZSpeedThreshold = wallRunRight->SoftLandingZSpeedThreshold; save.WallRunRight.TimeToSoftLandingThreshold = wallRunRight->TimeToSoftLandingThreshold; save.WallRunRight.WallRunningForwardCheckDistance = wallRunRight->WallRunningForwardCheckDistance; save.WallRunRight.WallRunningStrafeCheckDistance = wallRunRight->WallRunningStrafeCheckDistance; save.WallRunRight.WallRunningVerticalCheckDistance = wallRunRight->WallRunningVerticalCheckDistance; save.WallRunRight.WallRunningMinWallHeight = wallRunRight->WallRunningMinWallHeight; save.WallRunRight.WallRunningMinSpeed = wallRunRight->WallRunningMinSpeed; save.WallRunRight.WallRunningVelocityStartLimit = wallRunRight->WallRunningVelocityStartLimit; save.WallRunRight.WallRunningVelocityStopLimit = wallRunRight->WallRunningVelocityStopLimit; save.WallRunRight.WallRunningForwardMinStartAngle = wallRunRight->WallRunningForwardMinStartAngle; save.WallRunRight.WallRunningForwardMaxStartAngle = wallRunRight->WallRunningForwardMaxStartAngle; save.WallRunRight.WallRunningStrafeStartAngle = wallRunRight->WallRunningStrafeStartAngle; save.WallRunRight.WallRunningHorisontalFriction = wallRunRight->WallRunningHorisontalFriction; save.WallRunRight.WallRunningHorisontalInitialZHeight = wallRunRight->WallRunningHorisontalInitialZHeight; save.WallRunRight.WallRunningHorisontalAcceleration = wallRunRight->WallRunningHorisontalAcceleration; save.WallRunRight.WallRunningHorisontalDeceleration = wallRunRight->WallRunningHorisontalDeceleration; save.WallRunRight.WallRunningHorisontalAlignSpeed = wallRunRight->WallRunningHorisontalAlignSpeed; save.WallRunRight.WallRunningIntoWallrunBlendInTime = wallRunRight->WallRunningIntoWallrunBlendInTime; save.WallRunRight.WallRunningIntoWallrunBlendOutTime = wallRunRight->WallRunningIntoWallrunBlendOutTime; save.WallRunRight.PlayCameraHitWallEffect = wallRunRight->PlayCameraHitWallEffect; save.WallRunRight.bHasReachedWall = wallRunRight->bHasReachedWall; save.WallRunRight.bStartMovingIntoWall = wallRunRight->bStartMovingIntoWall; save.WallRunRight.bTurned90FromWall = wallRunRight->bTurned90FromWall; save.WallRunRight.bChangedConstraints = wallRunRight->bChangedConstraints; save.WallRunRight.WallRunningDelayPawnRotationTime = wallRunRight->WallRunningDelayPawnRotationTime; save.WallRunRight.WallRunningDistanceForIntoWall = wallRunRight->WallRunningDistanceForIntoWall; save.WallRunRight.WallRunningRotatePawnAlongWallTime = wallRunRight->WallRunningRotatePawnAlongWallTime; save.WallRunRight.WallRunningMoveToIntoPositionDegreeThreshold = wallRunRight->WallRunningMoveToIntoPositionDegreeThreshold; save.WallRunRight.MinimumVelocityIntoWall = wallRunRight->MinimumVelocityIntoWall; save.WallRunRight.MaximumVelocityIntoWall = wallRunRight->MaximumVelocityIntoWall; save.WallRunRight.WallrunStartUpperBodyAnimPlayRate = wallRunRight->WallrunStartUpperBodyAnimPlayRate; save.WallRunRight.LookAlongWallInterpolationTime = wallRunRight->LookAlongWallInterpolationTime; save.WallRunRight.WallRunningBeginSpeed = wallRunRight->WallRunningBeginSpeed; save.WallRunRight.NextMove = wallRunRight->NextMove; save.WallRunRight.WallNormal = wallRunRight->WallNormal; save.WallRunRight.PredictedWallHitLocation = wallRunRight->PredictedWallHitLocation; save.WallRunRight.IntoWallrunLocationTarget = wallRunRight->IntoWallrunLocationTarget; save.WallRunRight.ConsequtiveWallruns = wallRunRight->ConsequtiveWallruns; save.WallRunRight.MinContraintWorld = wallRunRight->MinContraintWorld; save.WallRunRight.MaxContraintWorld = wallRunRight->MaxContraintWorld;
	}

	auto wallRunLeft = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningLeft)]);
	if (wallRunLeft) {
		save.WallRunLeft.SpeedModifier = wallRunLeft->SpeedModifier; save.WallRunLeft.FrictionModifier = wallRunLeft->FrictionModifier; save.WallRunLeft.bDebugMove = wallRunLeft->bDebugMove; save.WallRunLeft.bTriggersCompliment = wallRunLeft->bTriggersCompliment; save.WallRunLeft.bDisableCollision = wallRunLeft->bDisableCollision; save.WallRunLeft.bShouldHolsterWeapon = wallRunLeft->bShouldHolsterWeapon; save.WallRunLeft.bShouldUnzoom = wallRunLeft->bShouldUnzoom; save.WallRunLeft.bIsTimedMove = wallRunLeft->bIsTimedMove; save.WallRunLeft.bConstrainLook = wallRunLeft->bConstrainLook; save.WallRunLeft.bUseAbsoluteYawConstraint = wallRunLeft->bUseAbsoluteYawConstraint; save.WallRunLeft.bDisableActorCollision = wallRunLeft->bDisableActorCollision; save.WallRunLeft.bLookAtTargetLocation = wallRunLeft->bLookAtTargetLocation; save.WallRunLeft.bLookAtTargetAngle = wallRunLeft->bLookAtTargetAngle; save.WallRunLeft.bDisableFaceRotation = wallRunLeft->bDisableFaceRotation; save.WallRunLeft.bDisableControllerFacingPawnYawRotation = wallRunLeft->bDisableControllerFacingPawnYawRotation; save.WallRunLeft.bAvoidLedges = wallRunLeft->bAvoidLedges; save.WallRunLeft.bUsePreciseLocation = wallRunLeft->bUsePreciseLocation; save.WallRunLeft.bReachedPreciseLocation = wallRunLeft->bReachedPreciseLocation; save.WallRunLeft.bDebugPreciseLocation = wallRunLeft->bDebugPreciseLocation; save.WallRunLeft.bUsePreciseRotation = wallRunLeft->bUsePreciseRotation; save.WallRunLeft.bReachedPreciseRotation = wallRunLeft->bReachedPreciseRotation; save.WallRunLeft.bDelayRotationAndLocationCallback = wallRunLeft->bDelayRotationAndLocationCallback; save.WallRunLeft.bResetCameraLook = wallRunLeft->bResetCameraLook; save.WallRunLeft.bUseCustomCollision = wallRunLeft->bUseCustomCollision; save.WallRunLeft.bUseCameraCollision = wallRunLeft->bUseCameraCollision; save.WallRunLeft.bTwoHandedFullBodyAnimations = wallRunLeft->bTwoHandedFullBodyAnimations; save.WallRunLeft.bStickyAim = wallRunLeft->bStickyAim; save.WallRunLeft.bStopAfterMove = wallRunLeft->bStopAfterMove; save.WallRunLeft.bEnableFootPlacement = wallRunLeft->bEnableFootPlacement; save.WallRunLeft.bEnableAgainstWall = wallRunLeft->bEnableAgainstWall; save.WallRunLeft.bAllowPickup = wallRunLeft->bAllowPickup; save.WallRunLeft.AiAimPenalty = wallRunLeft->AiAimPenalty; save.WallRunLeft.AiAimOneShotPenalty = wallRunLeft->AiAimOneShotPenalty; save.WallRunLeft.MovementGroup = wallRunLeft->MovementGroup; save.WallRunLeft.FirstPersonDPG = wallRunLeft->FirstPersonDPG; save.WallRunLeft.FirstPersonLowerBodyDPG = wallRunLeft->FirstPersonLowerBodyDPG; save.WallRunLeft.PreciseLocationInterpMode = wallRunLeft->PreciseLocationInterpMode; save.WallRunLeft.AimMode = wallRunLeft->AimMode; save.WallRunLeft.DisableMovementTime = wallRunLeft->DisableMovementTime; save.WallRunLeft.DisableLookTime = wallRunLeft->DisableLookTime; save.WallRunLeft.LastCanDoMoveTime = wallRunLeft->LastCanDoMoveTime; save.WallRunLeft.LastStopMoveTime = wallRunLeft->LastStopMoveTime; save.WallRunLeft.MoveActiveTime = wallRunLeft->MoveActiveTime; save.WallRunLeft.RedoMoveTime = wallRunLeft->RedoMoveTime; save.WallRunLeft.PreciseLocationSpeed = wallRunLeft->PreciseLocationSpeed; save.WallRunLeft.PreciseLocation = wallRunLeft->PreciseLocation; save.WallRunLeft.PreciseRotationInterpolationTime = wallRunLeft->PreciseRotationInterpolationTime; save.WallRunLeft.PreciseRotation = wallRunLeft->PreciseRotation; save.WallRunLeft.LookAtTargetLocation = wallRunLeft->LookAtTargetLocation; save.WallRunLeft.LookAtTargetAngle = wallRunLeft->LookAtTargetAngle; save.WallRunLeft.LookAtTargetInterpolationTime = wallRunLeft->LookAtTargetInterpolationTime; save.WallRunLeft.LookAtTargetDuration = wallRunLeft->LookAtTargetDuration; save.WallRunLeft.CancelResetCameraLookTime = wallRunLeft->CancelResetCameraLookTime; save.WallRunLeft.ResetCameraLookTime = wallRunLeft->ResetCameraLookTime; save.WallRunLeft.MinLookConstraint = wallRunLeft->MinLookConstraint; save.WallRunLeft.MaxLookConstraint = wallRunLeft->MaxLookConstraint; save.WallRunLeft.CustomCollisionRadius = wallRunLeft->CustomCollisionRadius; save.WallRunLeft.CustomCollisionHeight = wallRunLeft->CustomCollisionHeight; save.WallRunLeft.WeaponInactivePitchAimingLimit = wallRunLeft->WeaponInactivePitchAimingLimit; save.WallRunLeft.RootMotionScale = wallRunLeft->RootMotionScale; save.WallRunLeft.RootOffset = wallRunLeft->RootOffset; save.WallRunLeft.SwanNeckEnableAtPitch = wallRunLeft->SwanNeckEnableAtPitch; save.WallRunLeft.SwanNeckForward = wallRunLeft->SwanNeckForward; save.WallRunLeft.SwanNeckDown = wallRunLeft->SwanNeckDown; save.WallRunLeft.AnimBlendTime = wallRunLeft->AnimBlendTime; save.WallRunLeft.StickyAngle = wallRunLeft->StickyAngle; save.WallRunLeft.StickyAimedModifier = wallRunLeft->StickyAimedModifier; save.WallRunLeft.Timer = wallRunLeft->Timer; save.WallRunLeft.PawnPhysics = wallRunLeft->PawnPhysics; save.WallRunLeft.HandPlantExtentCheckHeight = wallRunLeft->HandPlantExtentCheckHeight; save.WallRunLeft.HandPlantExtentCheckWidth = wallRunLeft->HandPlantExtentCheckWidth; save.WallRunLeft.HandPlantCheckDistance = wallRunLeft->HandPlantCheckDistance; save.WallRunLeft.HandPlantCheckHeight = wallRunLeft->HandPlantCheckHeight; save.WallRunLeft.ContextMoveDistanceMultiplier = wallRunLeft->ContextMoveDistanceMultiplier; save.WallRunLeft.bCheckForGrab = wallRunLeft->bCheckForGrab; save.WallRunLeft.bCheckForVaultOver = wallRunLeft->bCheckForVaultOver; save.WallRunLeft.bCheckForWallClimb = wallRunLeft->bCheckForWallClimb; save.WallRunLeft.bCheckForEdgeInVelDir = wallRunLeft->bCheckForEdgeInVelDir; save.WallRunLeft.bCheckExitToFalling = wallRunLeft->bCheckExitToFalling; save.WallRunLeft.bCheckExitToUncontrolledFalling = wallRunLeft->bCheckExitToUncontrolledFalling; save.WallRunLeft.bCheckForSoftLanding = wallRunLeft->bCheckForSoftLanding; save.WallRunLeft.bDelayTimeCheckAutoMoves = wallRunLeft->bDelayTimeCheckAutoMoves; save.WallRunLeft.ExitToFallingZSpeed = wallRunLeft->ExitToFallingZSpeed; save.WallRunLeft.SoftLandingZSpeedThreshold = wallRunLeft->SoftLandingZSpeedThreshold; save.WallRunLeft.TimeToSoftLandingThreshold = wallRunLeft->TimeToSoftLandingThreshold; save.WallRunLeft.WallRunningForwardCheckDistance = wallRunLeft->WallRunningForwardCheckDistance; save.WallRunLeft.WallRunningStrafeCheckDistance = wallRunLeft->WallRunningStrafeCheckDistance; save.WallRunLeft.WallRunningVerticalCheckDistance = wallRunLeft->WallRunningVerticalCheckDistance; save.WallRunLeft.WallRunningMinWallHeight = wallRunLeft->WallRunningMinWallHeight; save.WallRunLeft.WallRunningMinSpeed = wallRunLeft->WallRunningMinSpeed; save.WallRunLeft.WallRunningVelocityStartLimit = wallRunLeft->WallRunningVelocityStartLimit; save.WallRunLeft.WallRunningVelocityStopLimit = wallRunLeft->WallRunningVelocityStopLimit; save.WallRunLeft.WallRunningForwardMinStartAngle = wallRunLeft->WallRunningForwardMinStartAngle; save.WallRunLeft.WallRunningForwardMaxStartAngle = wallRunLeft->WallRunningForwardMaxStartAngle; save.WallRunLeft.WallRunningStrafeStartAngle = wallRunLeft->WallRunningStrafeStartAngle; save.WallRunLeft.WallRunningHorisontalFriction = wallRunLeft->WallRunningHorisontalFriction; save.WallRunLeft.WallRunningHorisontalInitialZHeight = wallRunLeft->WallRunningHorisontalInitialZHeight; save.WallRunLeft.WallRunningHorisontalAcceleration = wallRunLeft->WallRunningHorisontalAcceleration; save.WallRunLeft.WallRunningHorisontalDeceleration = wallRunLeft->WallRunningHorisontalDeceleration; save.WallRunLeft.WallRunningHorisontalAlignSpeed = wallRunLeft->WallRunningHorisontalAlignSpeed; save.WallRunLeft.WallRunningIntoWallrunBlendInTime = wallRunLeft->WallRunningIntoWallrunBlendInTime; save.WallRunLeft.WallRunningIntoWallrunBlendOutTime = wallRunLeft->WallRunningIntoWallrunBlendOutTime; save.WallRunLeft.PlayCameraHitWallEffect = wallRunLeft->PlayCameraHitWallEffect; save.WallRunLeft.bHasReachedWall = wallRunLeft->bHasReachedWall; save.WallRunLeft.bStartMovingIntoWall = wallRunLeft->bStartMovingIntoWall; save.WallRunLeft.bTurned90FromWall = wallRunLeft->bTurned90FromWall; save.WallRunLeft.bChangedConstraints = wallRunLeft->bChangedConstraints; save.WallRunLeft.WallRunningDelayPawnRotationTime = wallRunLeft->WallRunningDelayPawnRotationTime; save.WallRunLeft.WallRunningDistanceForIntoWall = wallRunLeft->WallRunningDistanceForIntoWall; save.WallRunLeft.WallRunningRotatePawnAlongWallTime = wallRunLeft->WallRunningRotatePawnAlongWallTime; save.WallRunLeft.WallRunningMoveToIntoPositionDegreeThreshold = wallRunLeft->WallRunningMoveToIntoPositionDegreeThreshold; save.WallRunLeft.MinimumVelocityIntoWall = wallRunLeft->MinimumVelocityIntoWall; save.WallRunLeft.MaximumVelocityIntoWall = wallRunLeft->MaximumVelocityIntoWall; save.WallRunLeft.WallrunStartUpperBodyAnimPlayRate = wallRunLeft->WallrunStartUpperBodyAnimPlayRate; save.WallRunLeft.LookAlongWallInterpolationTime = wallRunLeft->LookAlongWallInterpolationTime; save.WallRunLeft.WallRunningBeginSpeed = wallRunLeft->WallRunningBeginSpeed; save.WallRunLeft.NextMove = wallRunLeft->NextMove; save.WallRunLeft.WallNormal = wallRunLeft->WallNormal; save.WallRunLeft.PredictedWallHitLocation = wallRunLeft->PredictedWallHitLocation; save.WallRunLeft.IntoWallrunLocationTarget = wallRunLeft->IntoWallrunLocationTarget; save.WallRunLeft.ConsequtiveWallruns = wallRunLeft->ConsequtiveWallruns; save.WallRunLeft.MinContraintWorld = wallRunLeft->MinContraintWorld; save.WallRunLeft.MaxContraintWorld = wallRunLeft->MaxContraintWorld;
	}

	auto wallClimbing = static_cast<Classes::UTdMove_WallClimb *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallClimbing)]);
	if (wallClimbing) {
		save.WallClimbing.SpeedModifier = wallClimbing->SpeedModifier; save.WallClimbing.FrictionModifier = wallClimbing->FrictionModifier; save.WallClimbing.bDebugMove = wallClimbing->bDebugMove; save.WallClimbing.bTriggersCompliment = wallClimbing->bTriggersCompliment; save.WallClimbing.bDisableCollision = wallClimbing->bDisableCollision; save.WallClimbing.bShouldHolsterWeapon = wallClimbing->bShouldHolsterWeapon; save.WallClimbing.bShouldUnzoom = wallClimbing->bShouldUnzoom; save.WallClimbing.bIsTimedMove = wallClimbing->bIsTimedMove; save.WallClimbing.bConstrainLook = wallClimbing->bConstrainLook; save.WallClimbing.bUseAbsoluteYawConstraint = wallClimbing->bUseAbsoluteYawConstraint; save.WallClimbing.bDisableActorCollision = wallClimbing->bDisableActorCollision; save.WallClimbing.bLookAtTargetLocation = wallClimbing->bLookAtTargetLocation; save.WallClimbing.bLookAtTargetAngle = wallClimbing->bLookAtTargetAngle; save.WallClimbing.bDisableFaceRotation = wallClimbing->bDisableFaceRotation; save.WallClimbing.bDisableControllerFacingPawnYawRotation = wallClimbing->bDisableControllerFacingPawnYawRotation; save.WallClimbing.bAvoidLedges = wallClimbing->bAvoidLedges; save.WallClimbing.bUsePreciseLocation = wallClimbing->bUsePreciseLocation; save.WallClimbing.bReachedPreciseLocation = wallClimbing->bReachedPreciseLocation; save.WallClimbing.bDebugPreciseLocation = wallClimbing->bDebugPreciseLocation; save.WallClimbing.bUsePreciseRotation = wallClimbing->bUsePreciseRotation; save.WallClimbing.bReachedPreciseRotation = wallClimbing->bReachedPreciseRotation; save.WallClimbing.bDelayRotationAndLocationCallback = wallClimbing->bDelayRotationAndLocationCallback; save.WallClimbing.bResetCameraLook = wallClimbing->bResetCameraLook; save.WallClimbing.bUseCustomCollision = wallClimbing->bUseCustomCollision; save.WallClimbing.bUseCameraCollision = wallClimbing->bUseCameraCollision; save.WallClimbing.bTwoHandedFullBodyAnimations = wallClimbing->bTwoHandedFullBodyAnimations; save.WallClimbing.bStickyAim = wallClimbing->bStickyAim; save.WallClimbing.bStopAfterMove = wallClimbing->bStopAfterMove; save.WallClimbing.bEnableFootPlacement = wallClimbing->bEnableFootPlacement; save.WallClimbing.bEnableAgainstWall = wallClimbing->bEnableAgainstWall; save.WallClimbing.bAllowPickup = wallClimbing->bAllowPickup; save.WallClimbing.AiAimPenalty = wallClimbing->AiAimPenalty; save.WallClimbing.AiAimOneShotPenalty = wallClimbing->AiAimOneShotPenalty; save.WallClimbing.MovementGroup = wallClimbing->MovementGroup; save.WallClimbing.FirstPersonDPG = wallClimbing->FirstPersonDPG; save.WallClimbing.FirstPersonLowerBodyDPG = wallClimbing->FirstPersonLowerBodyDPG; save.WallClimbing.PreciseLocationInterpMode = wallClimbing->PreciseLocationInterpMode; save.WallClimbing.AimMode = wallClimbing->AimMode; save.WallClimbing.DisableMovementTime = wallClimbing->DisableMovementTime; save.WallClimbing.DisableLookTime = wallClimbing->DisableLookTime; save.WallClimbing.LastCanDoMoveTime = wallClimbing->LastCanDoMoveTime; save.WallClimbing.LastStopMoveTime = wallClimbing->LastStopMoveTime; save.WallClimbing.MoveActiveTime = wallClimbing->MoveActiveTime; save.WallClimbing.RedoMoveTime = wallClimbing->RedoMoveTime; save.WallClimbing.PreciseLocationSpeed = wallClimbing->PreciseLocationSpeed; save.WallClimbing.PreciseLocation = wallClimbing->PreciseLocation; save.WallClimbing.PreciseRotationInterpolationTime = wallClimbing->PreciseRotationInterpolationTime; save.WallClimbing.PreciseRotation = wallClimbing->PreciseRotation; save.WallClimbing.LookAtTargetLocation = wallClimbing->LookAtTargetLocation; save.WallClimbing.LookAtTargetAngle = wallClimbing->LookAtTargetAngle; save.WallClimbing.LookAtTargetInterpolationTime = wallClimbing->LookAtTargetInterpolationTime; save.WallClimbing.LookAtTargetDuration = wallClimbing->LookAtTargetDuration; save.WallClimbing.CancelResetCameraLookTime = wallClimbing->CancelResetCameraLookTime; save.WallClimbing.ResetCameraLookTime = wallClimbing->ResetCameraLookTime; save.WallClimbing.MinLookConstraint = wallClimbing->MinLookConstraint; save.WallClimbing.MaxLookConstraint = wallClimbing->MaxLookConstraint; save.WallClimbing.CustomCollisionRadius = wallClimbing->CustomCollisionRadius; save.WallClimbing.CustomCollisionHeight = wallClimbing->CustomCollisionHeight; save.WallClimbing.WeaponInactivePitchAimingLimit = wallClimbing->WeaponInactivePitchAimingLimit; save.WallClimbing.RootMotionScale = wallClimbing->RootMotionScale; save.WallClimbing.RootOffset = wallClimbing->RootOffset; save.WallClimbing.SwanNeckEnableAtPitch = wallClimbing->SwanNeckEnableAtPitch; save.WallClimbing.SwanNeckForward = wallClimbing->SwanNeckForward; save.WallClimbing.SwanNeckDown = wallClimbing->SwanNeckDown; save.WallClimbing.AnimBlendTime = wallClimbing->AnimBlendTime; save.WallClimbing.StickyAngle = wallClimbing->StickyAngle; save.WallClimbing.StickyAimedModifier = wallClimbing->StickyAimedModifier; save.WallClimbing.Timer = wallClimbing->Timer; save.WallClimbing.PawnPhysics = wallClimbing->PawnPhysics; save.WallClimbing.HandPlantExtentCheckHeight = wallClimbing->HandPlantExtentCheckHeight; save.WallClimbing.HandPlantExtentCheckWidth = wallClimbing->HandPlantExtentCheckWidth; save.WallClimbing.HandPlantCheckDistance = wallClimbing->HandPlantCheckDistance; save.WallClimbing.HandPlantCheckHeight = wallClimbing->HandPlantCheckHeight; save.WallClimbing.ContextMoveDistanceMultiplier = wallClimbing->ContextMoveDistanceMultiplier; save.WallClimbing.bCheckForGrab = wallClimbing->bCheckForGrab; save.WallClimbing.bCheckForVaultOver = wallClimbing->bCheckForVaultOver; save.WallClimbing.bCheckForWallClimb = wallClimbing->bCheckForWallClimb; save.WallClimbing.bCheckForEdgeInVelDir = wallClimbing->bCheckForEdgeInVelDir; save.WallClimbing.bCheckExitToFalling = wallClimbing->bCheckExitToFalling; save.WallClimbing.bCheckExitToUncontrolledFalling = wallClimbing->bCheckExitToUncontrolledFalling; save.WallClimbing.bCheckForSoftLanding = wallClimbing->bCheckForSoftLanding; save.WallClimbing.bDelayTimeCheckAutoMoves = wallClimbing->bDelayTimeCheckAutoMoves; save.WallClimbing.ExitToFallingZSpeed = wallClimbing->ExitToFallingZSpeed; save.WallClimbing.SoftLandingZSpeedThreshold = wallClimbing->SoftLandingZSpeedThreshold; save.WallClimbing.TimeToSoftLandingThreshold = wallClimbing->TimeToSoftLandingThreshold; save.WallClimbing.WallClimbingVelocityStartLimit = wallClimbing->WallClimbingVelocityStartLimit; save.WallClimbing.WallClimbingVerticalStartAngle = wallClimbing->WallClimbingVerticalStartAngle; save.WallClimbing.WallClimbingVerticalFriction = wallClimbing->WallClimbingVerticalFriction; save.WallClimbing.WallClimbingMaxDistance2D = wallClimbing->WallClimbingMaxDistance2D; save.WallClimbing.AddOnSpeed2DHeight = wallClimbing->AddOnSpeed2DHeight; save.WallClimbing.AddOnSpeed2DMaxLimit = wallClimbing->AddOnSpeed2DMaxLimit; save.WallClimbing.AddOnSpeedZHeight = wallClimbing->AddOnSpeedZHeight; save.WallClimbing.AddOnSpeedZMaxLimit = wallClimbing->AddOnSpeedZMaxLimit; save.WallClimbing.WallClimbingGravity = wallClimbing->WallClimbingGravity; save.WallClimbing.MinLegdeZNormal = wallClimbing->MinLegdeZNormal; save.WallClimbing.MinWallHeight = wallClimbing->MinWallHeight; save.WallClimbing.MinUpwardsVelocityToDoubleJump = wallClimbing->MinUpwardsVelocityToDoubleJump; save.WallClimbing.MaxIntoWallClimbVelocityToDoubleJump = wallClimbing->MaxIntoWallClimbVelocityToDoubleJump; save.WallClimbing.bHasReachedWall = wallClimbing->bHasReachedWall; save.WallClimbing.bFoundPossibleHandPlant = wallClimbing->bFoundPossibleHandPlant; save.WallClimbing.bPerformedDoubleJump = wallClimbing->bPerformedDoubleJump; save.WallClimbing.LookAtEdgeAngle = wallClimbing->LookAtEdgeAngle; save.WallClimbing.PossibleEdgeDestination = wallClimbing->PossibleEdgeDestination; save.WallClimbing.IntoWallClimbSpeed = wallClimbing->IntoWallClimbSpeed; save.WallClimbing.GroundZLoc = wallClimbing->GroundZLoc;
	}

	auto springBoarding = static_cast<Classes::UTdMove_SpringBoard *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_SpringBoarding)]);
	if (springBoarding) {
		save.SpringBoarding.SpeedModifier = springBoarding->SpeedModifier; save.SpringBoarding.FrictionModifier = springBoarding->FrictionModifier; save.SpringBoarding.bDebugMove = springBoarding->bDebugMove; save.SpringBoarding.bTriggersCompliment = springBoarding->bTriggersCompliment; save.SpringBoarding.bDisableCollision = springBoarding->bDisableCollision; save.SpringBoarding.bShouldHolsterWeapon = springBoarding->bShouldHolsterWeapon; save.SpringBoarding.bShouldUnzoom = springBoarding->bShouldUnzoom; save.SpringBoarding.bIsTimedMove = springBoarding->bIsTimedMove; save.SpringBoarding.bConstrainLook = springBoarding->bConstrainLook; save.SpringBoarding.bUseAbsoluteYawConstraint = springBoarding->bUseAbsoluteYawConstraint; save.SpringBoarding.bDisableActorCollision = springBoarding->bDisableActorCollision; save.SpringBoarding.bLookAtTargetLocation = springBoarding->bLookAtTargetLocation; save.SpringBoarding.bLookAtTargetAngle = springBoarding->bLookAtTargetAngle; save.SpringBoarding.bDisableFaceRotation = springBoarding->bDisableFaceRotation; save.SpringBoarding.bDisableControllerFacingPawnYawRotation = springBoarding->bDisableControllerFacingPawnYawRotation; save.SpringBoarding.bAvoidLedges = springBoarding->bAvoidLedges; save.SpringBoarding.bUsePreciseLocation = springBoarding->bUsePreciseLocation; save.SpringBoarding.bReachedPreciseLocation = springBoarding->bReachedPreciseLocation; save.SpringBoarding.bDebugPreciseLocation = springBoarding->bDebugPreciseLocation; save.SpringBoarding.bUsePreciseRotation = springBoarding->bUsePreciseRotation; save.SpringBoarding.bReachedPreciseRotation = springBoarding->bReachedPreciseRotation; save.SpringBoarding.bDelayRotationAndLocationCallback = springBoarding->bDelayRotationAndLocationCallback; save.SpringBoarding.bResetCameraLook = springBoarding->bResetCameraLook; save.SpringBoarding.bUseCustomCollision = springBoarding->bUseCustomCollision; save.SpringBoarding.bUseCameraCollision = springBoarding->bUseCameraCollision; save.SpringBoarding.bTwoHandedFullBodyAnimations = springBoarding->bTwoHandedFullBodyAnimations; save.SpringBoarding.bStickyAim = springBoarding->bStickyAim; save.SpringBoarding.bStopAfterMove = springBoarding->bStopAfterMove; save.SpringBoarding.bEnableFootPlacement = springBoarding->bEnableFootPlacement; save.SpringBoarding.bEnableAgainstWall = springBoarding->bEnableAgainstWall; save.SpringBoarding.bAllowPickup = springBoarding->bAllowPickup; save.SpringBoarding.AiAimPenalty = springBoarding->AiAimPenalty; save.SpringBoarding.AiAimOneShotPenalty = springBoarding->AiAimOneShotPenalty; save.SpringBoarding.MovementGroup = springBoarding->MovementGroup; save.SpringBoarding.FirstPersonDPG = springBoarding->FirstPersonDPG; save.SpringBoarding.FirstPersonLowerBodyDPG = springBoarding->FirstPersonLowerBodyDPG; save.SpringBoarding.PreciseLocationInterpMode = springBoarding->PreciseLocationInterpMode; save.SpringBoarding.AimMode = springBoarding->AimMode; save.SpringBoarding.DisableMovementTime = springBoarding->DisableMovementTime; save.SpringBoarding.DisableLookTime = springBoarding->DisableLookTime; save.SpringBoarding.LastCanDoMoveTime = springBoarding->LastCanDoMoveTime; save.SpringBoarding.LastStopMoveTime = springBoarding->LastStopMoveTime; save.SpringBoarding.MoveActiveTime = springBoarding->MoveActiveTime; save.SpringBoarding.RedoMoveTime = springBoarding->RedoMoveTime; save.SpringBoarding.PreciseLocationSpeed = springBoarding->PreciseLocationSpeed; save.SpringBoarding.PreciseLocation = springBoarding->PreciseLocation; save.SpringBoarding.PreciseRotationInterpolationTime = springBoarding->PreciseRotationInterpolationTime; save.SpringBoarding.PreciseRotation = springBoarding->PreciseRotation; save.SpringBoarding.LookAtTargetLocation = springBoarding->LookAtTargetLocation; save.SpringBoarding.LookAtTargetAngle = springBoarding->LookAtTargetAngle; save.SpringBoarding.LookAtTargetInterpolationTime = springBoarding->LookAtTargetInterpolationTime; save.SpringBoarding.LookAtTargetDuration = springBoarding->LookAtTargetDuration; save.SpringBoarding.CancelResetCameraLookTime = springBoarding->CancelResetCameraLookTime; save.SpringBoarding.ResetCameraLookTime = springBoarding->ResetCameraLookTime; save.SpringBoarding.MinLookConstraint = springBoarding->MinLookConstraint; save.SpringBoarding.MaxLookConstraint = springBoarding->MaxLookConstraint; save.SpringBoarding.CustomCollisionRadius = springBoarding->CustomCollisionRadius; save.SpringBoarding.CustomCollisionHeight = springBoarding->CustomCollisionHeight; save.SpringBoarding.WeaponInactivePitchAimingLimit = springBoarding->WeaponInactivePitchAimingLimit; save.SpringBoarding.RootMotionScale = springBoarding->RootMotionScale; save.SpringBoarding.RootOffset = springBoarding->RootOffset; save.SpringBoarding.SwanNeckEnableAtPitch = springBoarding->SwanNeckEnableAtPitch; save.SpringBoarding.SwanNeckForward = springBoarding->SwanNeckForward; save.SpringBoarding.SwanNeckDown = springBoarding->SwanNeckDown; save.SpringBoarding.AnimBlendTime = springBoarding->AnimBlendTime; save.SpringBoarding.StickyAngle = springBoarding->StickyAngle; save.SpringBoarding.StickyAimedModifier = springBoarding->StickyAimedModifier; save.SpringBoarding.Timer = springBoarding->Timer; save.SpringBoarding.PawnPhysics = springBoarding->PawnPhysics; save.SpringBoarding.HandPlantExtentCheckHeight = springBoarding->HandPlantExtentCheckHeight; save.SpringBoarding.HandPlantExtentCheckWidth = springBoarding->HandPlantExtentCheckWidth; save.SpringBoarding.HandPlantCheckDistance = springBoarding->HandPlantCheckDistance; save.SpringBoarding.HandPlantCheckHeight = springBoarding->HandPlantCheckHeight; save.SpringBoarding.ContextMoveDistanceMultiplier = springBoarding->ContextMoveDistanceMultiplier; save.SpringBoarding.bCheckForGrab = springBoarding->bCheckForGrab; save.SpringBoarding.bCheckForVaultOver = springBoarding->bCheckForVaultOver; save.SpringBoarding.bCheckForWallClimb = springBoarding->bCheckForWallClimb; save.SpringBoarding.bCheckForEdgeInVelDir = springBoarding->bCheckForEdgeInVelDir; save.SpringBoarding.bCheckExitToFalling = springBoarding->bCheckExitToFalling; save.SpringBoarding.bCheckExitToUncontrolledFalling = springBoarding->bCheckExitToUncontrolledFalling; save.SpringBoarding.bCheckForSoftLanding = springBoarding->bCheckForSoftLanding; save.SpringBoarding.bDelayTimeCheckAutoMoves = springBoarding->bDelayTimeCheckAutoMoves; save.SpringBoarding.ExitToFallingZSpeed = springBoarding->ExitToFallingZSpeed; save.SpringBoarding.SoftLandingZSpeedThreshold = springBoarding->SoftLandingZSpeedThreshold; save.SpringBoarding.TimeToSoftLandingThreshold = springBoarding->TimeToSoftLandingThreshold; save.SpringBoarding.SpringBoardMaxHeight = springBoarding->SpringBoardMaxHeight; save.SpringBoarding.SpringBoardMinHeight = springBoarding->SpringBoardMinHeight; save.SpringBoarding.SpringBoardJumpZ = springBoarding->SpringBoardJumpZ; save.SpringBoarding.SpringBoardJumpXYAdd = springBoarding->SpringBoardJumpXYAdd; save.SpringBoarding.SpringBoardJumpXYMin = springBoarding->SpringBoardJumpXYMin; save.SpringBoarding.IntermediateFootPlantHeight = springBoarding->IntermediateFootPlantHeight; save.SpringBoarding.IntermediateFootPlantDistance = springBoarding->IntermediateFootPlantDistance; save.SpringBoarding.CheckDistanceTime = springBoarding->CheckDistanceTime; save.SpringBoarding.IntermediateFootPlantLedgeLocation = springBoarding->IntermediateFootPlantLedgeLocation; save.SpringBoarding.SpringBoardFootPlantLedgeLocation = springBoarding->SpringBoardFootPlantLedgeLocation; save.SpringBoarding.StepTime1 = springBoarding->StepTime1; save.SpringBoarding.StepTime2 = springBoarding->StepTime2; save.SpringBoarding.SpringBoardState = springBoarding->SpringBoardState; save.SpringBoarding.SavedInitialSpeed = springBoarding->SavedInitialSpeed;
	}

	auto jump = static_cast<Classes::UTdMove_Jump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Jump)]);
	if (jump) {
		save.Jump.SpeedModifier = jump->SpeedModifier; save.Jump.FrictionModifier = jump->FrictionModifier; save.Jump.bDebugMove = jump->bDebugMove; save.Jump.bTriggersCompliment = jump->bTriggersCompliment; save.Jump.bDisableCollision = jump->bDisableCollision; save.Jump.bShouldHolsterWeapon = jump->bShouldHolsterWeapon; save.Jump.bShouldUnzoom = jump->bShouldUnzoom; save.Jump.bIsTimedMove = jump->bIsTimedMove; save.Jump.bConstrainLook = jump->bConstrainLook; save.Jump.bUseAbsoluteYawConstraint = jump->bUseAbsoluteYawConstraint; save.Jump.bDisableActorCollision = jump->bDisableActorCollision; save.Jump.bLookAtTargetLocation = jump->bLookAtTargetLocation; save.Jump.bLookAtTargetAngle = jump->bLookAtTargetAngle; save.Jump.bDisableFaceRotation = jump->bDisableFaceRotation; save.Jump.bDisableControllerFacingPawnYawRotation = jump->bDisableControllerFacingPawnYawRotation; save.Jump.bAvoidLedges = jump->bAvoidLedges; save.Jump.bUsePreciseLocation = jump->bUsePreciseLocation; save.Jump.bReachedPreciseLocation = jump->bReachedPreciseLocation; save.Jump.bDebugPreciseLocation = jump->bDebugPreciseLocation; save.Jump.bUsePreciseRotation = jump->bUsePreciseRotation; save.Jump.bReachedPreciseRotation = jump->bReachedPreciseRotation; save.Jump.bDelayRotationAndLocationCallback = jump->bDelayRotationAndLocationCallback; save.Jump.bResetCameraLook = jump->bResetCameraLook; save.Jump.bUseCustomCollision = jump->bUseCustomCollision; save.Jump.bUseCameraCollision = jump->bUseCameraCollision; save.Jump.bTwoHandedFullBodyAnimations = jump->bTwoHandedFullBodyAnimations; save.Jump.bStickyAim = jump->bStickyAim; save.Jump.bStopAfterMove = jump->bStopAfterMove; save.Jump.bEnableFootPlacement = jump->bEnableFootPlacement; save.Jump.bEnableAgainstWall = jump->bEnableAgainstWall; save.Jump.bAllowPickup = jump->bAllowPickup; save.Jump.AiAimPenalty = jump->AiAimPenalty; save.Jump.AiAimOneShotPenalty = jump->AiAimOneShotPenalty; save.Jump.MovementGroup = jump->MovementGroup; save.Jump.FirstPersonDPG = jump->FirstPersonDPG; save.Jump.FirstPersonLowerBodyDPG = jump->FirstPersonLowerBodyDPG; save.Jump.PreciseLocationInterpMode = jump->PreciseLocationInterpMode; save.Jump.AimMode = jump->AimMode; save.Jump.DisableMovementTime = jump->DisableMovementTime; save.Jump.DisableLookTime = jump->DisableLookTime; save.Jump.LastCanDoMoveTime = jump->LastCanDoMoveTime; save.Jump.LastStopMoveTime = jump->LastStopMoveTime; save.Jump.MoveActiveTime = jump->MoveActiveTime; save.Jump.RedoMoveTime = jump->RedoMoveTime; save.Jump.PreciseLocationSpeed = jump->PreciseLocationSpeed; save.Jump.PreciseLocation = jump->PreciseLocation; save.Jump.PreciseRotationInterpolationTime = jump->PreciseRotationInterpolationTime; save.Jump.PreciseRotation = jump->PreciseRotation; save.Jump.LookAtTargetLocation = jump->LookAtTargetLocation; save.Jump.LookAtTargetAngle = jump->LookAtTargetAngle; save.Jump.LookAtTargetInterpolationTime = jump->LookAtTargetInterpolationTime; save.Jump.LookAtTargetDuration = jump->LookAtTargetDuration; save.Jump.CancelResetCameraLookTime = jump->CancelResetCameraLookTime; save.Jump.ResetCameraLookTime = jump->ResetCameraLookTime; save.Jump.MinLookConstraint = jump->MinLookConstraint; save.Jump.MaxLookConstraint = jump->MaxLookConstraint; save.Jump.CustomCollisionRadius = jump->CustomCollisionRadius; save.Jump.CustomCollisionHeight = jump->CustomCollisionHeight; save.Jump.WeaponInactivePitchAimingLimit = jump->WeaponInactivePitchAimingLimit; save.Jump.RootMotionScale = jump->RootMotionScale; save.Jump.RootOffset = jump->RootOffset; save.Jump.SwanNeckEnableAtPitch = jump->SwanNeckEnableAtPitch; save.Jump.SwanNeckForward = jump->SwanNeckForward; save.Jump.SwanNeckDown = jump->SwanNeckDown; save.Jump.AnimBlendTime = jump->AnimBlendTime; save.Jump.StickyAngle = jump->StickyAngle; save.Jump.StickyAimedModifier = jump->StickyAimedModifier; save.Jump.Timer = jump->Timer; save.Jump.PawnPhysics = jump->PawnPhysics; save.Jump.HandPlantExtentCheckHeight = jump->HandPlantExtentCheckHeight; save.Jump.HandPlantExtentCheckWidth = jump->HandPlantExtentCheckWidth; save.Jump.HandPlantCheckDistance = jump->HandPlantCheckDistance; save.Jump.HandPlantCheckHeight = jump->HandPlantCheckHeight; save.Jump.ContextMoveDistanceMultiplier = jump->ContextMoveDistanceMultiplier; save.Jump.bCheckForGrab = jump->bCheckForGrab; save.Jump.bCheckForVaultOver = jump->bCheckForVaultOver; save.Jump.bCheckForWallClimb = jump->bCheckForWallClimb; save.Jump.bCheckForEdgeInVelDir = jump->bCheckForEdgeInVelDir; save.Jump.bCheckExitToFalling = jump->bCheckExitToFalling; save.Jump.bCheckExitToUncontrolledFalling = jump->bCheckExitToUncontrolledFalling; save.Jump.bCheckForSoftLanding = jump->bCheckForSoftLanding; save.Jump.bDelayTimeCheckAutoMoves = jump->bDelayTimeCheckAutoMoves; save.Jump.ExitToFallingZSpeed = jump->ExitToFallingZSpeed; save.Jump.SoftLandingZSpeedThreshold = jump->SoftLandingZSpeedThreshold; save.Jump.TimeToSoftLandingThreshold = jump->TimeToSoftLandingThreshold; save.Jump.BaseJumpZ = jump->BaseJumpZ; save.Jump.BaseJumpZHeavy = jump->BaseJumpZHeavy; save.Jump.JumpAddXY = jump->JumpAddXY; save.Jump.LongJumpSlowThreshold = jump->LongJumpSlowThreshold; save.Jump.LongJumpNormalThreshold = jump->LongJumpNormalThreshold; save.Jump.LongJumpFastThreshold = jump->LongJumpFastThreshold; save.Jump.JumpBlendInTime = jump->JumpBlendInTime; save.Jump.JumpBlendOutTime = jump->JumpBlendOutTime; save.Jump.JumpStillBlendOutTime = jump->JumpStillBlendOutTime; save.Jump.PreJumpMomentum = jump->PreJumpMomentum; save.Jump.WantedJumpVelocity = jump->WantedJumpVelocity; save.Jump.CanDoMoveTaserLimit = jump->CanDoMoveTaserLimit;
	}

	auto wallRunJump = static_cast<Classes::UTdMove_WallrunJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunJump)]);
	if (wallRunJump) {
		save.WallRunJump.SpeedModifier = wallRunJump->SpeedModifier; save.WallRunJump.FrictionModifier = wallRunJump->FrictionModifier; save.WallRunJump.bDebugMove = wallRunJump->bDebugMove; save.WallRunJump.bTriggersCompliment = wallRunJump->bTriggersCompliment; save.WallRunJump.bDisableCollision = wallRunJump->bDisableCollision; save.WallRunJump.bShouldHolsterWeapon = wallRunJump->bShouldHolsterWeapon; save.WallRunJump.bShouldUnzoom = wallRunJump->bShouldUnzoom; save.WallRunJump.bIsTimedMove = wallRunJump->bIsTimedMove; save.WallRunJump.bConstrainLook = wallRunJump->bConstrainLook; save.WallRunJump.bUseAbsoluteYawConstraint = wallRunJump->bUseAbsoluteYawConstraint; save.WallRunJump.bDisableActorCollision = wallRunJump->bDisableActorCollision; save.WallRunJump.bLookAtTargetLocation = wallRunJump->bLookAtTargetLocation; save.WallRunJump.bLookAtTargetAngle = wallRunJump->bLookAtTargetAngle; save.WallRunJump.bDisableFaceRotation = wallRunJump->bDisableFaceRotation; save.WallRunJump.bDisableControllerFacingPawnYawRotation = wallRunJump->bDisableControllerFacingPawnYawRotation; save.WallRunJump.bAvoidLedges = wallRunJump->bAvoidLedges; save.WallRunJump.bUsePreciseLocation = wallRunJump->bUsePreciseLocation; save.WallRunJump.bReachedPreciseLocation = wallRunJump->bReachedPreciseLocation; save.WallRunJump.bDebugPreciseLocation = wallRunJump->bDebugPreciseLocation; save.WallRunJump.bUsePreciseRotation = wallRunJump->bUsePreciseRotation; save.WallRunJump.bReachedPreciseRotation = wallRunJump->bReachedPreciseRotation; save.WallRunJump.bDelayRotationAndLocationCallback = wallRunJump->bDelayRotationAndLocationCallback; save.WallRunJump.bResetCameraLook = wallRunJump->bResetCameraLook; save.WallRunJump.bUseCustomCollision = wallRunJump->bUseCustomCollision; save.WallRunJump.bUseCameraCollision = wallRunJump->bUseCameraCollision; save.WallRunJump.bTwoHandedFullBodyAnimations = wallRunJump->bTwoHandedFullBodyAnimations; save.WallRunJump.bStickyAim = wallRunJump->bStickyAim; save.WallRunJump.bStopAfterMove = wallRunJump->bStopAfterMove; save.WallRunJump.bEnableFootPlacement = wallRunJump->bEnableFootPlacement; save.WallRunJump.bEnableAgainstWall = wallRunJump->bEnableAgainstWall; save.WallRunJump.bAllowPickup = wallRunJump->bAllowPickup; save.WallRunJump.AiAimPenalty = wallRunJump->AiAimPenalty; save.WallRunJump.AiAimOneShotPenalty = wallRunJump->AiAimOneShotPenalty; save.WallRunJump.MovementGroup = wallRunJump->MovementGroup; save.WallRunJump.FirstPersonDPG = wallRunJump->FirstPersonDPG; save.WallRunJump.FirstPersonLowerBodyDPG = wallRunJump->FirstPersonLowerBodyDPG; save.WallRunJump.PreciseLocationInterpMode = wallRunJump->PreciseLocationInterpMode; save.WallRunJump.AimMode = wallRunJump->AimMode; save.WallRunJump.DisableMovementTime = wallRunJump->DisableMovementTime; save.WallRunJump.DisableLookTime = wallRunJump->DisableLookTime; save.WallRunJump.LastCanDoMoveTime = wallRunJump->LastCanDoMoveTime; save.WallRunJump.LastStopMoveTime = wallRunJump->LastStopMoveTime; save.WallRunJump.MoveActiveTime = wallRunJump->MoveActiveTime; save.WallRunJump.RedoMoveTime = wallRunJump->RedoMoveTime; save.WallRunJump.PreciseLocationSpeed = wallRunJump->PreciseLocationSpeed; save.WallRunJump.PreciseLocation = wallRunJump->PreciseLocation; save.WallRunJump.PreciseRotationInterpolationTime = wallRunJump->PreciseRotationInterpolationTime; save.WallRunJump.PreciseRotation = wallRunJump->PreciseRotation; save.WallRunJump.LookAtTargetLocation = wallRunJump->LookAtTargetLocation; save.WallRunJump.LookAtTargetAngle = wallRunJump->LookAtTargetAngle; save.WallRunJump.LookAtTargetInterpolationTime = wallRunJump->LookAtTargetInterpolationTime; save.WallRunJump.LookAtTargetDuration = wallRunJump->LookAtTargetDuration; save.WallRunJump.CancelResetCameraLookTime = wallRunJump->CancelResetCameraLookTime; save.WallRunJump.ResetCameraLookTime = wallRunJump->ResetCameraLookTime; save.WallRunJump.MinLookConstraint = wallRunJump->MinLookConstraint; save.WallRunJump.MaxLookConstraint = wallRunJump->MaxLookConstraint; save.WallRunJump.CustomCollisionRadius = wallRunJump->CustomCollisionRadius; save.WallRunJump.CustomCollisionHeight = wallRunJump->CustomCollisionHeight; save.WallRunJump.WeaponInactivePitchAimingLimit = wallRunJump->WeaponInactivePitchAimingLimit; save.WallRunJump.RootMotionScale = wallRunJump->RootMotionScale; save.WallRunJump.RootOffset = wallRunJump->RootOffset; save.WallRunJump.SwanNeckEnableAtPitch = wallRunJump->SwanNeckEnableAtPitch; save.WallRunJump.SwanNeckForward = wallRunJump->SwanNeckForward; save.WallRunJump.SwanNeckDown = wallRunJump->SwanNeckDown; save.WallRunJump.AnimBlendTime = wallRunJump->AnimBlendTime; save.WallRunJump.StickyAngle = wallRunJump->StickyAngle; save.WallRunJump.StickyAimedModifier = wallRunJump->StickyAimedModifier; save.WallRunJump.Timer = wallRunJump->Timer; save.WallRunJump.PawnPhysics = wallRunJump->PawnPhysics; save.WallRunJump.HandPlantExtentCheckHeight = wallRunJump->HandPlantExtentCheckHeight; save.WallRunJump.HandPlantExtentCheckWidth = wallRunJump->HandPlantExtentCheckWidth; save.WallRunJump.HandPlantCheckDistance = wallRunJump->HandPlantCheckDistance; save.WallRunJump.HandPlantCheckHeight = wallRunJump->HandPlantCheckHeight; save.WallRunJump.ContextMoveDistanceMultiplier = wallRunJump->ContextMoveDistanceMultiplier; save.WallRunJump.bCheckForGrab = wallRunJump->bCheckForGrab; save.WallRunJump.bCheckForVaultOver = wallRunJump->bCheckForVaultOver; save.WallRunJump.bCheckForWallClimb = wallRunJump->bCheckForWallClimb; save.WallRunJump.bCheckForEdgeInVelDir = wallRunJump->bCheckForEdgeInVelDir; save.WallRunJump.bCheckExitToFalling = wallRunJump->bCheckExitToFalling; save.WallRunJump.bCheckExitToUncontrolledFalling = wallRunJump->bCheckExitToUncontrolledFalling; save.WallRunJump.bCheckForSoftLanding = wallRunJump->bCheckForSoftLanding; save.WallRunJump.bDelayTimeCheckAutoMoves = wallRunJump->bDelayTimeCheckAutoMoves; save.WallRunJump.ExitToFallingZSpeed = wallRunJump->ExitToFallingZSpeed; save.WallRunJump.SoftLandingZSpeedThreshold = wallRunJump->SoftLandingZSpeedThreshold; save.WallRunJump.TimeToSoftLandingThreshold = wallRunJump->TimeToSoftLandingThreshold; save.WallRunJump.WallRunningPushAwaySpeedNoob = wallRunJump->WallRunningPushAwaySpeedNoob; save.WallRunJump.WallRunningPushAwaySpeedProAdd = wallRunJump->WallRunningPushAwaySpeedProAdd; save.WallRunJump.WallRunningPushForwardSpeedMin = wallRunJump->WallRunningPushForwardSpeedMin; save.WallRunJump.WallRunningJumpOffZHeightForward = wallRunJump->WallRunningJumpOffZHeightForward; save.WallRunJump.WallRunningJumpOffZHeightMaxAddTurned = wallRunJump->WallRunningJumpOffZHeightMaxAddTurned; save.WallRunJump.WallRunningJumpOffZSpeed = wallRunJump->WallRunningJumpOffZSpeed; save.WallRunJump.MinContraintWorld = wallRunJump->MinContraintWorld; save.WallRunJump.MaxContraintWorld = wallRunJump->MaxContraintWorld;
	}

	auto grabJump = static_cast<Classes::UTdMove_GrabJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_GrabJump)]);
	if (grabJump) {
		save.GrabJump.SpeedModifier = grabJump->SpeedModifier; save.GrabJump.FrictionModifier = grabJump->FrictionModifier; save.GrabJump.bDebugMove = grabJump->bDebugMove; save.GrabJump.bTriggersCompliment = grabJump->bTriggersCompliment; save.GrabJump.bDisableCollision = grabJump->bDisableCollision; save.GrabJump.bShouldHolsterWeapon = grabJump->bShouldHolsterWeapon; save.GrabJump.bShouldUnzoom = grabJump->bShouldUnzoom; save.GrabJump.bIsTimedMove = grabJump->bIsTimedMove; save.GrabJump.bConstrainLook = grabJump->bConstrainLook; save.GrabJump.bUseAbsoluteYawConstraint = grabJump->bUseAbsoluteYawConstraint; save.GrabJump.bDisableActorCollision = grabJump->bDisableActorCollision; save.GrabJump.bLookAtTargetLocation = grabJump->bLookAtTargetLocation; save.GrabJump.bLookAtTargetAngle = grabJump->bLookAtTargetAngle; save.GrabJump.bDisableFaceRotation = grabJump->bDisableFaceRotation; save.GrabJump.bDisableControllerFacingPawnYawRotation = grabJump->bDisableControllerFacingPawnYawRotation; save.GrabJump.bAvoidLedges = grabJump->bAvoidLedges; save.GrabJump.bUsePreciseLocation = grabJump->bUsePreciseLocation; save.GrabJump.bReachedPreciseLocation = grabJump->bReachedPreciseLocation; save.GrabJump.bDebugPreciseLocation = grabJump->bDebugPreciseLocation; save.GrabJump.bUsePreciseRotation = grabJump->bUsePreciseRotation; save.GrabJump.bReachedPreciseRotation = grabJump->bReachedPreciseRotation; save.GrabJump.bDelayRotationAndLocationCallback = grabJump->bDelayRotationAndLocationCallback; save.GrabJump.bResetCameraLook = grabJump->bResetCameraLook; save.GrabJump.bUseCustomCollision = grabJump->bUseCustomCollision; save.GrabJump.bUseCameraCollision = grabJump->bUseCameraCollision; save.GrabJump.bTwoHandedFullBodyAnimations = grabJump->bTwoHandedFullBodyAnimations; save.GrabJump.bStickyAim = grabJump->bStickyAim; save.GrabJump.bStopAfterMove = grabJump->bStopAfterMove; save.GrabJump.bEnableFootPlacement = grabJump->bEnableFootPlacement; save.GrabJump.bEnableAgainstWall = grabJump->bEnableAgainstWall; save.GrabJump.bAllowPickup = grabJump->bAllowPickup; save.GrabJump.AiAimPenalty = grabJump->AiAimPenalty; save.GrabJump.AiAimOneShotPenalty = grabJump->AiAimOneShotPenalty; save.GrabJump.MovementGroup = grabJump->MovementGroup; save.GrabJump.FirstPersonDPG = grabJump->FirstPersonDPG; save.GrabJump.FirstPersonLowerBodyDPG = grabJump->FirstPersonLowerBodyDPG; save.GrabJump.PreciseLocationInterpMode = grabJump->PreciseLocationInterpMode; save.GrabJump.AimMode = grabJump->AimMode; save.GrabJump.DisableMovementTime = grabJump->DisableMovementTime; save.GrabJump.DisableLookTime = grabJump->DisableLookTime; save.GrabJump.LastCanDoMoveTime = grabJump->LastCanDoMoveTime; save.GrabJump.LastStopMoveTime = grabJump->LastStopMoveTime; save.GrabJump.MoveActiveTime = grabJump->MoveActiveTime; save.GrabJump.RedoMoveTime = grabJump->RedoMoveTime; save.GrabJump.PreciseLocationSpeed = grabJump->PreciseLocationSpeed; save.GrabJump.PreciseLocation = grabJump->PreciseLocation; save.GrabJump.PreciseRotationInterpolationTime = grabJump->PreciseRotationInterpolationTime; save.GrabJump.PreciseRotation = grabJump->PreciseRotation; save.GrabJump.LookAtTargetLocation = grabJump->LookAtTargetLocation; save.GrabJump.LookAtTargetAngle = grabJump->LookAtTargetAngle; save.GrabJump.LookAtTargetInterpolationTime = grabJump->LookAtTargetInterpolationTime; save.GrabJump.LookAtTargetDuration = grabJump->LookAtTargetDuration; save.GrabJump.CancelResetCameraLookTime = grabJump->CancelResetCameraLookTime; save.GrabJump.ResetCameraLookTime = grabJump->ResetCameraLookTime; save.GrabJump.MinLookConstraint = grabJump->MinLookConstraint; save.GrabJump.MaxLookConstraint = grabJump->MaxLookConstraint; save.GrabJump.CustomCollisionRadius = grabJump->CustomCollisionRadius; save.GrabJump.CustomCollisionHeight = grabJump->CustomCollisionHeight; save.GrabJump.WeaponInactivePitchAimingLimit = grabJump->WeaponInactivePitchAimingLimit; save.GrabJump.RootMotionScale = grabJump->RootMotionScale; save.GrabJump.RootOffset = grabJump->RootOffset; save.GrabJump.SwanNeckEnableAtPitch = grabJump->SwanNeckEnableAtPitch; save.GrabJump.SwanNeckForward = grabJump->SwanNeckForward; save.GrabJump.SwanNeckDown = grabJump->SwanNeckDown; save.GrabJump.AnimBlendTime = grabJump->AnimBlendTime; save.GrabJump.StickyAngle = grabJump->StickyAngle; save.GrabJump.StickyAimedModifier = grabJump->StickyAimedModifier; save.GrabJump.Timer = grabJump->Timer; save.GrabJump.PawnPhysics = grabJump->PawnPhysics; save.GrabJump.HandPlantExtentCheckHeight = grabJump->HandPlantExtentCheckHeight; save.GrabJump.HandPlantExtentCheckWidth = grabJump->HandPlantExtentCheckWidth; save.GrabJump.HandPlantCheckDistance = grabJump->HandPlantCheckDistance; save.GrabJump.HandPlantCheckHeight = grabJump->HandPlantCheckHeight; save.GrabJump.ContextMoveDistanceMultiplier = grabJump->ContextMoveDistanceMultiplier; save.GrabJump.bCheckForGrab = grabJump->bCheckForGrab; save.GrabJump.bCheckForVaultOver = grabJump->bCheckForVaultOver; save.GrabJump.bCheckForWallClimb = grabJump->bCheckForWallClimb; save.GrabJump.bCheckForEdgeInVelDir = grabJump->bCheckForEdgeInVelDir; save.GrabJump.bCheckExitToFalling = grabJump->bCheckExitToFalling; save.GrabJump.bCheckExitToUncontrolledFalling = grabJump->bCheckExitToUncontrolledFalling; save.GrabJump.bCheckForSoftLanding = grabJump->bCheckForSoftLanding; save.GrabJump.bDelayTimeCheckAutoMoves = grabJump->bDelayTimeCheckAutoMoves; save.GrabJump.ExitToFallingZSpeed = grabJump->ExitToFallingZSpeed; save.GrabJump.SoftLandingZSpeedThreshold = grabJump->SoftLandingZSpeedThreshold; save.GrabJump.TimeToSoftLandingThreshold = grabJump->TimeToSoftLandingThreshold; save.GrabJump.GrabJumpOffZHeight = grabJump->GrabJumpOffZHeight; save.GrabJump.GrabJumpPushAwayMaxSpeed = grabJump->GrabJumpPushAwayMaxSpeed; save.GrabJump.GrabJumpPushAwayMinSpeed = grabJump->GrabJumpPushAwayMinSpeed; save.GrabJump.GrabAllowedJumpAngle = grabJump->GrabAllowedJumpAngle; save.GrabJump.JumpVelocity = grabJump->JumpVelocity; save.GrabJump.TurnedLeft = grabJump->TurnedLeft; save.GrabJump.DeltaJumpYaw = grabJump->DeltaJumpYaw;
	}

	auto intoGrab = static_cast<Classes::UTdMove_IntoGrab *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_IntoGrab)]);
	if (intoGrab) {
		save.IntoGrab.SpeedModifier = intoGrab->SpeedModifier; save.IntoGrab.FrictionModifier = intoGrab->FrictionModifier; save.IntoGrab.bDebugMove = intoGrab->bDebugMove; save.IntoGrab.bTriggersCompliment = intoGrab->bTriggersCompliment; save.IntoGrab.bDisableCollision = intoGrab->bDisableCollision; save.IntoGrab.bShouldHolsterWeapon = intoGrab->bShouldHolsterWeapon; save.IntoGrab.bShouldUnzoom = intoGrab->bShouldUnzoom; save.IntoGrab.bIsTimedMove = intoGrab->bIsTimedMove; save.IntoGrab.bConstrainLook = intoGrab->bConstrainLook; save.IntoGrab.bUseAbsoluteYawConstraint = intoGrab->bUseAbsoluteYawConstraint; save.IntoGrab.bDisableActorCollision = intoGrab->bDisableActorCollision; save.IntoGrab.bLookAtTargetLocation = intoGrab->bLookAtTargetLocation; save.IntoGrab.bLookAtTargetAngle = intoGrab->bLookAtTargetAngle; save.IntoGrab.bDisableFaceRotation = intoGrab->bDisableFaceRotation; save.IntoGrab.bDisableControllerFacingPawnYawRotation = intoGrab->bDisableControllerFacingPawnYawRotation; save.IntoGrab.bAvoidLedges = intoGrab->bAvoidLedges; save.IntoGrab.bUsePreciseLocation = intoGrab->bUsePreciseLocation; save.IntoGrab.bReachedPreciseLocation = intoGrab->bReachedPreciseLocation; save.IntoGrab.bDebugPreciseLocation = intoGrab->bDebugPreciseLocation; save.IntoGrab.bUsePreciseRotation = intoGrab->bUsePreciseRotation; save.IntoGrab.bReachedPreciseRotation = intoGrab->bReachedPreciseRotation; save.IntoGrab.bDelayRotationAndLocationCallback = intoGrab->bDelayRotationAndLocationCallback; save.IntoGrab.bResetCameraLook = intoGrab->bResetCameraLook; save.IntoGrab.bUseCustomCollision = intoGrab->bUseCustomCollision; save.IntoGrab.bUseCameraCollision = intoGrab->bUseCameraCollision; save.IntoGrab.bTwoHandedFullBodyAnimations = intoGrab->bTwoHandedFullBodyAnimations; save.IntoGrab.bStickyAim = intoGrab->bStickyAim; save.IntoGrab.bStopAfterMove = intoGrab->bStopAfterMove; save.IntoGrab.bEnableFootPlacement = intoGrab->bEnableFootPlacement; save.IntoGrab.bEnableAgainstWall = intoGrab->bEnableAgainstWall; save.IntoGrab.bAllowPickup = intoGrab->bAllowPickup; save.IntoGrab.AiAimPenalty = intoGrab->AiAimPenalty; save.IntoGrab.AiAimOneShotPenalty = intoGrab->AiAimOneShotPenalty; save.IntoGrab.MovementGroup = intoGrab->MovementGroup; save.IntoGrab.FirstPersonDPG = intoGrab->FirstPersonDPG; save.IntoGrab.FirstPersonLowerBodyDPG = intoGrab->FirstPersonLowerBodyDPG; save.IntoGrab.PreciseLocationInterpMode = intoGrab->PreciseLocationInterpMode; save.IntoGrab.AimMode = intoGrab->AimMode; save.IntoGrab.DisableMovementTime = intoGrab->DisableMovementTime; save.IntoGrab.DisableLookTime = intoGrab->DisableLookTime; save.IntoGrab.LastCanDoMoveTime = intoGrab->LastCanDoMoveTime; save.IntoGrab.LastStopMoveTime = intoGrab->LastStopMoveTime; save.IntoGrab.MoveActiveTime = intoGrab->MoveActiveTime; save.IntoGrab.RedoMoveTime = intoGrab->RedoMoveTime; save.IntoGrab.PreciseLocationSpeed = intoGrab->PreciseLocationSpeed; save.IntoGrab.PreciseLocation = intoGrab->PreciseLocation; save.IntoGrab.PreciseRotationInterpolationTime = intoGrab->PreciseRotationInterpolationTime; save.IntoGrab.PreciseRotation = intoGrab->PreciseRotation; save.IntoGrab.LookAtTargetLocation = intoGrab->LookAtTargetLocation; save.IntoGrab.LookAtTargetAngle = intoGrab->LookAtTargetAngle; save.IntoGrab.LookAtTargetInterpolationTime = intoGrab->LookAtTargetInterpolationTime; save.IntoGrab.LookAtTargetDuration = intoGrab->LookAtTargetDuration; save.IntoGrab.CancelResetCameraLookTime = intoGrab->CancelResetCameraLookTime; save.IntoGrab.ResetCameraLookTime = intoGrab->ResetCameraLookTime; save.IntoGrab.MinLookConstraint = intoGrab->MinLookConstraint; save.IntoGrab.MaxLookConstraint = intoGrab->MaxLookConstraint; save.IntoGrab.CustomCollisionRadius = intoGrab->CustomCollisionRadius; save.IntoGrab.CustomCollisionHeight = intoGrab->CustomCollisionHeight; save.IntoGrab.WeaponInactivePitchAimingLimit = intoGrab->WeaponInactivePitchAimingLimit; save.IntoGrab.RootMotionScale = intoGrab->RootMotionScale; save.IntoGrab.RootOffset = intoGrab->RootOffset; save.IntoGrab.SwanNeckEnableAtPitch = intoGrab->SwanNeckEnableAtPitch; save.IntoGrab.SwanNeckForward = intoGrab->SwanNeckForward; save.IntoGrab.SwanNeckDown = intoGrab->SwanNeckDown; save.IntoGrab.AnimBlendTime = intoGrab->AnimBlendTime; save.IntoGrab.StickyAngle = intoGrab->StickyAngle; save.IntoGrab.StickyAimedModifier = intoGrab->StickyAimedModifier; save.IntoGrab.Timer = intoGrab->Timer; save.IntoGrab.PawnPhysics = intoGrab->PawnPhysics; save.IntoGrab.HandPlantExtentCheckHeight = intoGrab->HandPlantExtentCheckHeight; save.IntoGrab.HandPlantExtentCheckWidth = intoGrab->HandPlantExtentCheckWidth; save.IntoGrab.HandPlantCheckDistance = intoGrab->HandPlantCheckDistance; save.IntoGrab.HandPlantCheckHeight = intoGrab->HandPlantCheckHeight; save.IntoGrab.ContextMoveDistanceMultiplier = intoGrab->ContextMoveDistanceMultiplier; save.IntoGrab.bCheckForGrab = intoGrab->bCheckForGrab; save.IntoGrab.bCheckForVaultOver = intoGrab->bCheckForVaultOver; save.IntoGrab.bCheckForWallClimb = intoGrab->bCheckForWallClimb; save.IntoGrab.bCheckForEdgeInVelDir = intoGrab->bCheckForEdgeInVelDir; save.IntoGrab.bCheckExitToFalling = intoGrab->bCheckExitToFalling; save.IntoGrab.bCheckExitToUncontrolledFalling = intoGrab->bCheckExitToUncontrolledFalling; save.IntoGrab.bCheckForSoftLanding = intoGrab->bCheckForSoftLanding; save.IntoGrab.bDelayTimeCheckAutoMoves = intoGrab->bDelayTimeCheckAutoMoves; save.IntoGrab.ExitToFallingZSpeed = intoGrab->ExitToFallingZSpeed; save.IntoGrab.SoftLandingZSpeedThreshold = intoGrab->SoftLandingZSpeedThreshold; save.IntoGrab.TimeToSoftLandingThreshold = intoGrab->TimeToSoftLandingThreshold; save.IntoGrab.IntoGrabMaxAngle = intoGrab->IntoGrabMaxAngle; save.IntoGrab.IntoGrabAlignSpeed = intoGrab->IntoGrabAlignSpeed; save.IntoGrab.IntoGrabMinInitialAlignSpeed = intoGrab->IntoGrabMinInitialAlignSpeed; save.IntoGrab.GrabMinGrabableZNormal = intoGrab->GrabMinGrabableZNormal; save.IntoGrab.GrabDesiredLedgeOffset = intoGrab->GrabDesiredLedgeOffset; save.IntoGrab.MinGrabLedgeAdjustDistance = intoGrab->MinGrabLedgeAdjustDistance; save.IntoGrab.IntoGrabMaxDistance = intoGrab->IntoGrabMaxDistance; save.IntoGrab.IntoGrabZVelocityThreshold = intoGrab->IntoGrabZVelocityThreshold; save.IntoGrab.IntoGrabSpeed = intoGrab->IntoGrabSpeed; save.IntoGrab.HangFoldedDownwardSpeedLimit = intoGrab->HangFoldedDownwardSpeedLimit; save.IntoGrab.HangFoldedIntoGrabZSpeedThreshold = intoGrab->HangFoldedIntoGrabZSpeedThreshold; save.IntoGrab.HangFoldedIntoGrabSpeed2DThreshold = intoGrab->HangFoldedIntoGrabSpeed2DThreshold; save.IntoGrab.HangFoldedUpperDeltaDistance = intoGrab->HangFoldedUpperDeltaDistance; save.IntoGrab.HangFoldedLowerDeltaDistance = intoGrab->HangFoldedLowerDeltaDistance; save.IntoGrab.HangFoldedMaxDistance = intoGrab->HangFoldedMaxDistance; save.IntoGrab.HangImpactMinZSpeed = intoGrab->HangImpactMinZSpeed; save.IntoGrab.HangHardImpactMinZSpeed = intoGrab->HangHardImpactMinZSpeed; save.IntoGrab.bPrepareToGrab = intoGrab->bPrepareToGrab; save.IntoGrab.bSlopedLedge = intoGrab->bSlopedLedge;
	}

	auto crouch = static_cast<Classes::UTdMove_Crouch *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Crouch)]);
	if (crouch) {
		save.Crouch.SpeedModifier = crouch->SpeedModifier; save.Crouch.FrictionModifier = crouch->FrictionModifier; save.Crouch.bDebugMove = crouch->bDebugMove; save.Crouch.bTriggersCompliment = crouch->bTriggersCompliment; save.Crouch.bDisableCollision = crouch->bDisableCollision; save.Crouch.bShouldHolsterWeapon = crouch->bShouldHolsterWeapon; save.Crouch.bShouldUnzoom = crouch->bShouldUnzoom; save.Crouch.bIsTimedMove = crouch->bIsTimedMove; save.Crouch.bConstrainLook = crouch->bConstrainLook; save.Crouch.bUseAbsoluteYawConstraint = crouch->bUseAbsoluteYawConstraint; save.Crouch.bDisableActorCollision = crouch->bDisableActorCollision; save.Crouch.bLookAtTargetLocation = crouch->bLookAtTargetLocation; save.Crouch.bLookAtTargetAngle = crouch->bLookAtTargetAngle; save.Crouch.bDisableFaceRotation = crouch->bDisableFaceRotation; save.Crouch.bDisableControllerFacingPawnYawRotation = crouch->bDisableControllerFacingPawnYawRotation; save.Crouch.bAvoidLedges = crouch->bAvoidLedges; save.Crouch.bUsePreciseLocation = crouch->bUsePreciseLocation; save.Crouch.bReachedPreciseLocation = crouch->bReachedPreciseLocation; save.Crouch.bDebugPreciseLocation = crouch->bDebugPreciseLocation; save.Crouch.bUsePreciseRotation = crouch->bUsePreciseRotation; save.Crouch.bReachedPreciseRotation = crouch->bReachedPreciseRotation; save.Crouch.bDelayRotationAndLocationCallback = crouch->bDelayRotationAndLocationCallback; save.Crouch.bResetCameraLook = crouch->bResetCameraLook; save.Crouch.bUseCustomCollision = crouch->bUseCustomCollision; save.Crouch.bUseCameraCollision = crouch->bUseCameraCollision; save.Crouch.bTwoHandedFullBodyAnimations = crouch->bTwoHandedFullBodyAnimations; save.Crouch.bStickyAim = crouch->bStickyAim; save.Crouch.bStopAfterMove = crouch->bStopAfterMove; save.Crouch.bEnableFootPlacement = crouch->bEnableFootPlacement; save.Crouch.bEnableAgainstWall = crouch->bEnableAgainstWall; save.Crouch.bAllowPickup = crouch->bAllowPickup; save.Crouch.AiAimPenalty = crouch->AiAimPenalty; save.Crouch.AiAimOneShotPenalty = crouch->AiAimOneShotPenalty; save.Crouch.MovementGroup = crouch->MovementGroup; save.Crouch.FirstPersonDPG = crouch->FirstPersonDPG; save.Crouch.FirstPersonLowerBodyDPG = crouch->FirstPersonLowerBodyDPG; save.Crouch.PreciseLocationInterpMode = crouch->PreciseLocationInterpMode; save.Crouch.AimMode = crouch->AimMode; save.Crouch.DisableMovementTime = crouch->DisableMovementTime; save.Crouch.DisableLookTime = crouch->DisableLookTime; save.Crouch.LastCanDoMoveTime = crouch->LastCanDoMoveTime; save.Crouch.LastStopMoveTime = crouch->LastStopMoveTime; save.Crouch.MoveActiveTime = crouch->MoveActiveTime; save.Crouch.RedoMoveTime = crouch->RedoMoveTime; save.Crouch.PreciseLocationSpeed = crouch->PreciseLocationSpeed; save.Crouch.PreciseLocation = crouch->PreciseLocation; save.Crouch.PreciseRotationInterpolationTime = crouch->PreciseRotationInterpolationTime; save.Crouch.PreciseRotation = crouch->PreciseRotation; save.Crouch.LookAtTargetLocation = crouch->LookAtTargetLocation; save.Crouch.LookAtTargetAngle = crouch->LookAtTargetAngle; save.Crouch.LookAtTargetInterpolationTime = crouch->LookAtTargetInterpolationTime; save.Crouch.LookAtTargetDuration = crouch->LookAtTargetDuration; save.Crouch.CancelResetCameraLookTime = crouch->CancelResetCameraLookTime; save.Crouch.ResetCameraLookTime = crouch->ResetCameraLookTime; save.Crouch.MinLookConstraint = crouch->MinLookConstraint; save.Crouch.MaxLookConstraint = crouch->MaxLookConstraint; save.Crouch.CustomCollisionRadius = crouch->CustomCollisionRadius; save.Crouch.CustomCollisionHeight = crouch->CustomCollisionHeight; save.Crouch.WeaponInactivePitchAimingLimit = crouch->WeaponInactivePitchAimingLimit; save.Crouch.RootMotionScale = crouch->RootMotionScale; save.Crouch.RootOffset = crouch->RootOffset; save.Crouch.SwanNeckEnableAtPitch = crouch->SwanNeckEnableAtPitch; save.Crouch.SwanNeckForward = crouch->SwanNeckForward; save.Crouch.SwanNeckDown = crouch->SwanNeckDown; save.Crouch.AnimBlendTime = crouch->AnimBlendTime; save.Crouch.StickyAngle = crouch->StickyAngle; save.Crouch.StickyAimedModifier = crouch->StickyAimedModifier; save.Crouch.Timer = crouch->Timer; save.Crouch.PawnPhysics = crouch->PawnPhysics; save.Crouch.HandPlantExtentCheckHeight = crouch->HandPlantExtentCheckHeight; save.Crouch.HandPlantExtentCheckWidth = crouch->HandPlantExtentCheckWidth; save.Crouch.HandPlantCheckDistance = crouch->HandPlantCheckDistance; save.Crouch.HandPlantCheckHeight = crouch->HandPlantCheckHeight; save.Crouch.ContextMoveDistanceMultiplier = crouch->ContextMoveDistanceMultiplier; save.Crouch.bCheckForGrab = crouch->bCheckForGrab; save.Crouch.bCheckForVaultOver = crouch->bCheckForVaultOver; save.Crouch.bCheckForWallClimb = crouch->bCheckForWallClimb; save.Crouch.bCheckForEdgeInVelDir = crouch->bCheckForEdgeInVelDir; save.Crouch.bCheckExitToFalling = crouch->bCheckExitToFalling; save.Crouch.bCheckExitToUncontrolledFalling = crouch->bCheckExitToUncontrolledFalling; save.Crouch.bCheckForSoftLanding = crouch->bCheckForSoftLanding; save.Crouch.bDelayTimeCheckAutoMoves = crouch->bDelayTimeCheckAutoMoves; save.Crouch.ExitToFallingZSpeed = crouch->ExitToFallingZSpeed; save.Crouch.SoftLandingZSpeedThreshold = crouch->SoftLandingZSpeedThreshold; save.Crouch.TimeToSoftLandingThreshold = crouch->TimeToSoftLandingThreshold;
	}

	auto slide = static_cast<Classes::UTdMove_Slide *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Slide)]);
	if (slide) {
		save.Slide.SpeedModifier = slide->SpeedModifier; save.Slide.FrictionModifier = slide->FrictionModifier; save.Slide.bDebugMove = slide->bDebugMove; save.Slide.bTriggersCompliment = slide->bTriggersCompliment; save.Slide.bDisableCollision = slide->bDisableCollision; save.Slide.bShouldHolsterWeapon = slide->bShouldHolsterWeapon; save.Slide.bShouldUnzoom = slide->bShouldUnzoom; save.Slide.bIsTimedMove = slide->bIsTimedMove; save.Slide.bConstrainLook = slide->bConstrainLook; save.Slide.bUseAbsoluteYawConstraint = slide->bUseAbsoluteYawConstraint; save.Slide.bDisableActorCollision = slide->bDisableActorCollision; save.Slide.bLookAtTargetLocation = slide->bLookAtTargetLocation; save.Slide.bLookAtTargetAngle = slide->bLookAtTargetAngle; save.Slide.bDisableFaceRotation = slide->bDisableFaceRotation; save.Slide.bDisableControllerFacingPawnYawRotation = slide->bDisableControllerFacingPawnYawRotation; save.Slide.bAvoidLedges = slide->bAvoidLedges; save.Slide.bUsePreciseLocation = slide->bUsePreciseLocation; save.Slide.bReachedPreciseLocation = slide->bReachedPreciseLocation; save.Slide.bDebugPreciseLocation = slide->bDebugPreciseLocation; save.Slide.bUsePreciseRotation = slide->bUsePreciseRotation; save.Slide.bReachedPreciseRotation = slide->bReachedPreciseRotation; save.Slide.bDelayRotationAndLocationCallback = slide->bDelayRotationAndLocationCallback; save.Slide.bResetCameraLook = slide->bResetCameraLook; save.Slide.bUseCustomCollision = slide->bUseCustomCollision; save.Slide.bUseCameraCollision = slide->bUseCameraCollision; save.Slide.bTwoHandedFullBodyAnimations = slide->bTwoHandedFullBodyAnimations; save.Slide.bStickyAim = slide->bStickyAim; save.Slide.bStopAfterMove = slide->bStopAfterMove; save.Slide.bEnableFootPlacement = slide->bEnableFootPlacement; save.Slide.bEnableAgainstWall = slide->bEnableAgainstWall; save.Slide.bAllowPickup = slide->bAllowPickup; save.Slide.AiAimPenalty = slide->AiAimPenalty; save.Slide.AiAimOneShotPenalty = slide->AiAimOneShotPenalty; save.Slide.MovementGroup = slide->MovementGroup; save.Slide.FirstPersonDPG = slide->FirstPersonDPG; save.Slide.FirstPersonLowerBodyDPG = slide->FirstPersonLowerBodyDPG; save.Slide.PreciseLocationInterpMode = slide->PreciseLocationInterpMode; save.Slide.AimMode = slide->AimMode; save.Slide.DisableMovementTime = slide->DisableMovementTime; save.Slide.DisableLookTime = slide->DisableLookTime; save.Slide.LastCanDoMoveTime = slide->LastCanDoMoveTime; save.Slide.LastStopMoveTime = slide->LastStopMoveTime; save.Slide.MoveActiveTime = slide->MoveActiveTime; save.Slide.RedoMoveTime = slide->RedoMoveTime; save.Slide.PreciseLocationSpeed = slide->PreciseLocationSpeed; save.Slide.PreciseLocation = slide->PreciseLocation; save.Slide.PreciseRotationInterpolationTime = slide->PreciseRotationInterpolationTime; save.Slide.PreciseRotation = slide->PreciseRotation; save.Slide.LookAtTargetLocation = slide->LookAtTargetLocation; save.Slide.LookAtTargetAngle = slide->LookAtTargetAngle; save.Slide.LookAtTargetInterpolationTime = slide->LookAtTargetInterpolationTime; save.Slide.LookAtTargetDuration = slide->LookAtTargetDuration; save.Slide.CancelResetCameraLookTime = slide->CancelResetCameraLookTime; save.Slide.ResetCameraLookTime = slide->ResetCameraLookTime; save.Slide.MinLookConstraint = slide->MinLookConstraint; save.Slide.MaxLookConstraint = slide->MaxLookConstraint; save.Slide.CustomCollisionRadius = slide->CustomCollisionRadius; save.Slide.CustomCollisionHeight = slide->CustomCollisionHeight; save.Slide.WeaponInactivePitchAimingLimit = slide->WeaponInactivePitchAimingLimit; save.Slide.RootMotionScale = slide->RootMotionScale; save.Slide.RootOffset = slide->RootOffset; save.Slide.SwanNeckEnableAtPitch = slide->SwanNeckEnableAtPitch; save.Slide.SwanNeckForward = slide->SwanNeckForward; save.Slide.SwanNeckDown = slide->SwanNeckDown; save.Slide.AnimBlendTime = slide->AnimBlendTime; save.Slide.StickyAngle = slide->StickyAngle; save.Slide.StickyAimedModifier = slide->StickyAimedModifier; save.Slide.Timer = slide->Timer; save.Slide.SlideAbortSpeed = slide->SlideAbortSpeed; save.Slide.SlideAbortTime = slide->SlideAbortTime; save.Slide.MaxFloorInclineZ = slide->MaxFloorInclineZ; save.Slide.SlideAngleTarget = slide->SlideAngleTarget; save.Slide.bGoingInto = slide->bGoingInto; save.Slide.bRequestUncrouch = slide->bRequestUncrouch;
	}

	auto intoZipLine = static_cast<Classes::UTdMove_IntoZipLine *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_IntoZipLine)]);
	if (intoZipLine) {
		save.IntoZipLine.SpeedModifier = intoZipLine->SpeedModifier; save.IntoZipLine.FrictionModifier = intoZipLine->FrictionModifier; save.IntoZipLine.bDebugMove = intoZipLine->bDebugMove; save.IntoZipLine.bTriggersCompliment = intoZipLine->bTriggersCompliment; save.IntoZipLine.bDisableCollision = intoZipLine->bDisableCollision; save.IntoZipLine.bShouldHolsterWeapon = intoZipLine->bShouldHolsterWeapon; save.IntoZipLine.bShouldUnzoom = intoZipLine->bShouldUnzoom; save.IntoZipLine.bIsTimedMove = intoZipLine->bIsTimedMove; save.IntoZipLine.bConstrainLook = intoZipLine->bConstrainLook; save.IntoZipLine.bUseAbsoluteYawConstraint = intoZipLine->bUseAbsoluteYawConstraint; save.IntoZipLine.bDisableActorCollision = intoZipLine->bDisableActorCollision; save.IntoZipLine.bLookAtTargetLocation = intoZipLine->bLookAtTargetLocation; save.IntoZipLine.bLookAtTargetAngle = intoZipLine->bLookAtTargetAngle; save.IntoZipLine.bDisableFaceRotation = intoZipLine->bDisableFaceRotation; save.IntoZipLine.bDisableControllerFacingPawnYawRotation = intoZipLine->bDisableControllerFacingPawnYawRotation; save.IntoZipLine.bAvoidLedges = intoZipLine->bAvoidLedges; save.IntoZipLine.bUsePreciseLocation = intoZipLine->bUsePreciseLocation; save.IntoZipLine.bReachedPreciseLocation = intoZipLine->bReachedPreciseLocation; save.IntoZipLine.bDebugPreciseLocation = intoZipLine->bDebugPreciseLocation; save.IntoZipLine.bUsePreciseRotation = intoZipLine->bUsePreciseRotation; save.IntoZipLine.bReachedPreciseRotation = intoZipLine->bReachedPreciseRotation; save.IntoZipLine.bDelayRotationAndLocationCallback = intoZipLine->bDelayRotationAndLocationCallback; save.IntoZipLine.bResetCameraLook = intoZipLine->bResetCameraLook; save.IntoZipLine.bUseCustomCollision = intoZipLine->bUseCustomCollision; save.IntoZipLine.bUseCameraCollision = intoZipLine->bUseCameraCollision; save.IntoZipLine.bTwoHandedFullBodyAnimations = intoZipLine->bTwoHandedFullBodyAnimations; save.IntoZipLine.bStickyAim = intoZipLine->bStickyAim; save.IntoZipLine.bStopAfterMove = intoZipLine->bStopAfterMove; save.IntoZipLine.bEnableFootPlacement = intoZipLine->bEnableFootPlacement; save.IntoZipLine.bEnableAgainstWall = intoZipLine->bEnableAgainstWall; save.IntoZipLine.bAllowPickup = intoZipLine->bAllowPickup; save.IntoZipLine.AiAimPenalty = intoZipLine->AiAimPenalty; save.IntoZipLine.AiAimOneShotPenalty = intoZipLine->AiAimOneShotPenalty; save.IntoZipLine.MovementGroup = intoZipLine->MovementGroup; save.IntoZipLine.FirstPersonDPG = intoZipLine->FirstPersonDPG; save.IntoZipLine.FirstPersonLowerBodyDPG = intoZipLine->FirstPersonLowerBodyDPG; save.IntoZipLine.PreciseLocationInterpMode = intoZipLine->PreciseLocationInterpMode; save.IntoZipLine.AimMode = intoZipLine->AimMode; save.IntoZipLine.DisableMovementTime = intoZipLine->DisableMovementTime; save.IntoZipLine.DisableLookTime = intoZipLine->DisableLookTime; save.IntoZipLine.LastCanDoMoveTime = intoZipLine->LastCanDoMoveTime; save.IntoZipLine.LastStopMoveTime = intoZipLine->LastStopMoveTime; save.IntoZipLine.MoveActiveTime = intoZipLine->MoveActiveTime; save.IntoZipLine.RedoMoveTime = intoZipLine->RedoMoveTime; save.IntoZipLine.PreciseLocationSpeed = intoZipLine->PreciseLocationSpeed; save.IntoZipLine.PreciseLocation = intoZipLine->PreciseLocation; save.IntoZipLine.PreciseRotationInterpolationTime = intoZipLine->PreciseRotationInterpolationTime; save.IntoZipLine.PreciseRotation = intoZipLine->PreciseRotation; save.IntoZipLine.LookAtTargetLocation = intoZipLine->LookAtTargetLocation; save.IntoZipLine.LookAtTargetAngle = intoZipLine->LookAtTargetAngle; save.IntoZipLine.LookAtTargetInterpolationTime = intoZipLine->LookAtTargetInterpolationTime; save.IntoZipLine.LookAtTargetDuration = intoZipLine->LookAtTargetDuration; save.IntoZipLine.CancelResetCameraLookTime = intoZipLine->CancelResetCameraLookTime; save.IntoZipLine.ResetCameraLookTime = intoZipLine->ResetCameraLookTime; save.IntoZipLine.MinLookConstraint = intoZipLine->MinLookConstraint; save.IntoZipLine.MaxLookConstraint = intoZipLine->MaxLookConstraint; save.IntoZipLine.CustomCollisionRadius = intoZipLine->CustomCollisionRadius; save.IntoZipLine.CustomCollisionHeight = intoZipLine->CustomCollisionHeight; save.IntoZipLine.WeaponInactivePitchAimingLimit = intoZipLine->WeaponInactivePitchAimingLimit; save.IntoZipLine.RootMotionScale = intoZipLine->RootMotionScale; save.IntoZipLine.RootOffset = intoZipLine->RootOffset; save.IntoZipLine.SwanNeckEnableAtPitch = intoZipLine->SwanNeckEnableAtPitch; save.IntoZipLine.SwanNeckForward = intoZipLine->SwanNeckForward; save.IntoZipLine.SwanNeckDown = intoZipLine->SwanNeckDown; save.IntoZipLine.AnimBlendTime = intoZipLine->AnimBlendTime; save.IntoZipLine.StickyAngle = intoZipLine->StickyAngle; save.IntoZipLine.StickyAimedModifier = intoZipLine->StickyAimedModifier; save.IntoZipLine.Timer = intoZipLine->Timer; save.IntoZipLine.PawnPhysics = intoZipLine->PawnPhysics; save.IntoZipLine.HandPlantExtentCheckHeight = intoZipLine->HandPlantExtentCheckHeight; save.IntoZipLine.HandPlantExtentCheckWidth = intoZipLine->HandPlantExtentCheckWidth; save.IntoZipLine.HandPlantCheckDistance = intoZipLine->HandPlantCheckDistance; save.IntoZipLine.HandPlantCheckHeight = intoZipLine->HandPlantCheckHeight; save.IntoZipLine.ContextMoveDistanceMultiplier = intoZipLine->ContextMoveDistanceMultiplier; save.IntoZipLine.bCheckForGrab = intoZipLine->bCheckForGrab; save.IntoZipLine.bCheckForVaultOver = intoZipLine->bCheckForVaultOver; save.IntoZipLine.bCheckForWallClimb = intoZipLine->bCheckForWallClimb; save.IntoZipLine.bCheckForEdgeInVelDir = intoZipLine->bCheckForEdgeInVelDir; save.IntoZipLine.bCheckExitToFalling = intoZipLine->bCheckExitToFalling; save.IntoZipLine.bCheckExitToUncontrolledFalling = intoZipLine->bCheckExitToUncontrolledFalling; save.IntoZipLine.bCheckForSoftLanding = intoZipLine->bCheckForSoftLanding; save.IntoZipLine.bDelayTimeCheckAutoMoves = intoZipLine->bDelayTimeCheckAutoMoves; save.IntoZipLine.ExitToFallingZSpeed = intoZipLine->ExitToFallingZSpeed; save.IntoZipLine.SoftLandingZSpeedThreshold = intoZipLine->SoftLandingZSpeedThreshold; save.IntoZipLine.TimeToSoftLandingThreshold = intoZipLine->TimeToSoftLandingThreshold; save.IntoZipLine.HangOffset = intoZipLine->HangOffset; save.IntoZipLine.ZVelocityFallLimit = intoZipLine->ZVelocityFallLimit; save.IntoZipLine.IntoZiplineBlendInTime = intoZipLine->IntoZiplineBlendInTime; save.IntoZipLine.IntoZiplineBlendOutTime = intoZipLine->IntoZiplineBlendOutTime; save.IntoZipLine.EnterZipLineParam = intoZipLine->EnterZipLineParam; save.IntoZipLine.SavedInitial2DVelocity = intoZipLine->SavedInitial2DVelocity; save.IntoZipLine.SameZipLineRedoMoveTime = intoZipLine->SameZipLineRedoMoveTime;
	}

	auto zipLine = static_cast<Classes::UTdMove_ZipLine *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_ZipLine)]);
	if (zipLine) {
		save.ZipLine.SpeedModifier = zipLine->SpeedModifier; save.ZipLine.FrictionModifier = zipLine->FrictionModifier; save.ZipLine.bDebugMove = zipLine->bDebugMove; save.ZipLine.bTriggersCompliment = zipLine->bTriggersCompliment; save.ZipLine.bDisableCollision = zipLine->bDisableCollision; save.ZipLine.bShouldHolsterWeapon = zipLine->bShouldHolsterWeapon; save.ZipLine.bShouldUnzoom = zipLine->bShouldUnzoom; save.ZipLine.bIsTimedMove = zipLine->bIsTimedMove; save.ZipLine.bConstrainLook = zipLine->bConstrainLook; save.ZipLine.bUseAbsoluteYawConstraint = zipLine->bUseAbsoluteYawConstraint; save.ZipLine.bDisableActorCollision = zipLine->bDisableActorCollision; save.ZipLine.bLookAtTargetLocation = zipLine->bLookAtTargetLocation; save.ZipLine.bLookAtTargetAngle = zipLine->bLookAtTargetAngle; save.ZipLine.bDisableFaceRotation = zipLine->bDisableFaceRotation; save.ZipLine.bDisableControllerFacingPawnYawRotation = zipLine->bDisableControllerFacingPawnYawRotation; save.ZipLine.bAvoidLedges = zipLine->bAvoidLedges; save.ZipLine.bUsePreciseLocation = zipLine->bUsePreciseLocation; save.ZipLine.bReachedPreciseLocation = zipLine->bReachedPreciseLocation; save.ZipLine.bDebugPreciseLocation = zipLine->bDebugPreciseLocation; save.ZipLine.bUsePreciseRotation = zipLine->bUsePreciseRotation; save.ZipLine.bReachedPreciseRotation = zipLine->bReachedPreciseRotation; save.ZipLine.bDelayRotationAndLocationCallback = zipLine->bDelayRotationAndLocationCallback; save.ZipLine.bResetCameraLook = zipLine->bResetCameraLook; save.ZipLine.bUseCustomCollision = zipLine->bUseCustomCollision; save.ZipLine.bUseCameraCollision = zipLine->bUseCameraCollision; save.ZipLine.bTwoHandedFullBodyAnimations = zipLine->bTwoHandedFullBodyAnimations; save.ZipLine.bStickyAim = zipLine->bStickyAim; save.ZipLine.bStopAfterMove = zipLine->bStopAfterMove; save.ZipLine.bEnableFootPlacement = zipLine->bEnableFootPlacement; save.ZipLine.bEnableAgainstWall = zipLine->bEnableAgainstWall; save.ZipLine.bAllowPickup = zipLine->bAllowPickup; save.ZipLine.AiAimPenalty = zipLine->AiAimPenalty; save.ZipLine.AiAimOneShotPenalty = zipLine->AiAimOneShotPenalty; save.ZipLine.MovementGroup = zipLine->MovementGroup; save.ZipLine.FirstPersonDPG = zipLine->FirstPersonDPG; save.ZipLine.FirstPersonLowerBodyDPG = zipLine->FirstPersonLowerBodyDPG; save.ZipLine.PreciseLocationInterpMode = zipLine->PreciseLocationInterpMode; save.ZipLine.AimMode = zipLine->AimMode; save.ZipLine.DisableMovementTime = zipLine->DisableMovementTime; save.ZipLine.DisableLookTime = zipLine->DisableLookTime; save.ZipLine.LastCanDoMoveTime = zipLine->LastCanDoMoveTime; save.ZipLine.LastStopMoveTime = zipLine->LastStopMoveTime; save.ZipLine.MoveActiveTime = zipLine->MoveActiveTime; save.ZipLine.RedoMoveTime = zipLine->RedoMoveTime; save.ZipLine.PreciseLocationSpeed = zipLine->PreciseLocationSpeed; save.ZipLine.PreciseLocation = zipLine->PreciseLocation; save.ZipLine.PreciseRotationInterpolationTime = zipLine->PreciseRotationInterpolationTime; save.ZipLine.PreciseRotation = zipLine->PreciseRotation; save.ZipLine.LookAtTargetLocation = zipLine->LookAtTargetLocation; save.ZipLine.LookAtTargetAngle = zipLine->LookAtTargetAngle; save.ZipLine.LookAtTargetInterpolationTime = zipLine->LookAtTargetInterpolationTime; save.ZipLine.LookAtTargetDuration = zipLine->LookAtTargetDuration; save.ZipLine.CancelResetCameraLookTime = zipLine->CancelResetCameraLookTime; save.ZipLine.ResetCameraLookTime = zipLine->ResetCameraLookTime; save.ZipLine.MinLookConstraint = zipLine->MinLookConstraint; save.ZipLine.MaxLookConstraint = zipLine->MaxLookConstraint; save.ZipLine.CustomCollisionRadius = zipLine->CustomCollisionRadius; save.ZipLine.CustomCollisionHeight = zipLine->CustomCollisionHeight; save.ZipLine.WeaponInactivePitchAimingLimit = zipLine->WeaponInactivePitchAimingLimit; save.ZipLine.RootMotionScale = zipLine->RootMotionScale; save.ZipLine.RootOffset = zipLine->RootOffset; save.ZipLine.SwanNeckEnableAtPitch = zipLine->SwanNeckEnableAtPitch; save.ZipLine.SwanNeckForward = zipLine->SwanNeckForward; save.ZipLine.SwanNeckDown = zipLine->SwanNeckDown; save.ZipLine.AnimBlendTime = zipLine->AnimBlendTime; save.ZipLine.StickyAngle = zipLine->StickyAngle; save.ZipLine.StickyAimedModifier = zipLine->StickyAimedModifier; save.ZipLine.Timer = zipLine->Timer; save.ZipLine.PawnPhysics = zipLine->PawnPhysics; save.ZipLine.HandPlantExtentCheckHeight = zipLine->HandPlantExtentCheckHeight; save.ZipLine.HandPlantExtentCheckWidth = zipLine->HandPlantExtentCheckWidth; save.ZipLine.HandPlantCheckDistance = zipLine->HandPlantCheckDistance; save.ZipLine.HandPlantCheckHeight = zipLine->HandPlantCheckHeight; save.ZipLine.ContextMoveDistanceMultiplier = zipLine->ContextMoveDistanceMultiplier; save.ZipLine.bCheckForGrab = zipLine->bCheckForGrab; save.ZipLine.bCheckForVaultOver = zipLine->bCheckForVaultOver; save.ZipLine.bCheckForWallClimb = zipLine->bCheckForWallClimb; save.ZipLine.bCheckForEdgeInVelDir = zipLine->bCheckForEdgeInVelDir; save.ZipLine.bCheckExitToFalling = zipLine->bCheckExitToFalling; save.ZipLine.bCheckExitToUncontrolledFalling = zipLine->bCheckExitToUncontrolledFalling; save.ZipLine.bCheckForSoftLanding = zipLine->bCheckForSoftLanding; save.ZipLine.bDelayTimeCheckAutoMoves = zipLine->bDelayTimeCheckAutoMoves; save.ZipLine.ExitToFallingZSpeed = zipLine->ExitToFallingZSpeed; save.ZipLine.SoftLandingZSpeedThreshold = zipLine->SoftLandingZSpeedThreshold; save.ZipLine.TimeToSoftLandingThreshold = zipLine->TimeToSoftLandingThreshold; save.ZipLine.HangOffset = zipLine->HangOffset; save.ZipLine.MinZipVelocity = zipLine->MinZipVelocity; save.ZipLine.MinZipAcceleration = zipLine->MinZipAcceleration; save.ZipLine.CurrentParamOnCurve = zipLine->CurrentParamOnCurve; save.ZipLine.ZipFadeInTime = zipLine->ZipFadeInTime; save.ZipLine.ZipFadeOutTime = zipLine->ZipFadeOutTime; save.ZipLine.CurrentLookAtPoint = zipLine->CurrentLookAtPoint; save.ZipLine.bZipLineLookAssist = zipLine->bZipLineLookAssist; save.ZipLine.ZipLineStatus = zipLine->ZipLineStatus;
	}

	auto grabTransfer = static_cast<Classes::UTdMove_GrabTransfer *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_GrabTransfer)]);
	if (grabTransfer) {
		save.GrabTransfer.SpeedModifier = grabTransfer->SpeedModifier; save.GrabTransfer.FrictionModifier = grabTransfer->FrictionModifier; save.GrabTransfer.bDebugMove = grabTransfer->bDebugMove; save.GrabTransfer.bTriggersCompliment = grabTransfer->bTriggersCompliment; save.GrabTransfer.bDisableCollision = grabTransfer->bDisableCollision; save.GrabTransfer.bShouldHolsterWeapon = grabTransfer->bShouldHolsterWeapon; save.GrabTransfer.bShouldUnzoom = grabTransfer->bShouldUnzoom; save.GrabTransfer.bIsTimedMove = grabTransfer->bIsTimedMove; save.GrabTransfer.bConstrainLook = grabTransfer->bConstrainLook; save.GrabTransfer.bUseAbsoluteYawConstraint = grabTransfer->bUseAbsoluteYawConstraint; save.GrabTransfer.bDisableActorCollision = grabTransfer->bDisableActorCollision; save.GrabTransfer.bLookAtTargetLocation = grabTransfer->bLookAtTargetLocation; save.GrabTransfer.bLookAtTargetAngle = grabTransfer->bLookAtTargetAngle; save.GrabTransfer.bDisableFaceRotation = grabTransfer->bDisableFaceRotation; save.GrabTransfer.bDisableControllerFacingPawnYawRotation = grabTransfer->bDisableControllerFacingPawnYawRotation; save.GrabTransfer.bAvoidLedges = grabTransfer->bAvoidLedges; save.GrabTransfer.bUsePreciseLocation = grabTransfer->bUsePreciseLocation; save.GrabTransfer.bReachedPreciseLocation = grabTransfer->bReachedPreciseLocation; save.GrabTransfer.bDebugPreciseLocation = grabTransfer->bDebugPreciseLocation; save.GrabTransfer.bUsePreciseRotation = grabTransfer->bUsePreciseRotation; save.GrabTransfer.bReachedPreciseRotation = grabTransfer->bReachedPreciseRotation; save.GrabTransfer.bDelayRotationAndLocationCallback = grabTransfer->bDelayRotationAndLocationCallback; save.GrabTransfer.bResetCameraLook = grabTransfer->bResetCameraLook; save.GrabTransfer.bUseCustomCollision = grabTransfer->bUseCustomCollision; save.GrabTransfer.bUseCameraCollision = grabTransfer->bUseCameraCollision; save.GrabTransfer.bTwoHandedFullBodyAnimations = grabTransfer->bTwoHandedFullBodyAnimations; save.GrabTransfer.bStickyAim = grabTransfer->bStickyAim; save.GrabTransfer.bStopAfterMove = grabTransfer->bStopAfterMove; save.GrabTransfer.bEnableFootPlacement = grabTransfer->bEnableFootPlacement; save.GrabTransfer.bEnableAgainstWall = grabTransfer->bEnableAgainstWall; save.GrabTransfer.bAllowPickup = grabTransfer->bAllowPickup; save.GrabTransfer.AiAimPenalty = grabTransfer->AiAimPenalty; save.GrabTransfer.AiAimOneShotPenalty = grabTransfer->AiAimOneShotPenalty; save.GrabTransfer.MovementGroup = grabTransfer->MovementGroup; save.GrabTransfer.FirstPersonDPG = grabTransfer->FirstPersonDPG; save.GrabTransfer.FirstPersonLowerBodyDPG = grabTransfer->FirstPersonLowerBodyDPG; save.GrabTransfer.PreciseLocationInterpMode = grabTransfer->PreciseLocationInterpMode; save.GrabTransfer.AimMode = grabTransfer->AimMode; save.GrabTransfer.DisableMovementTime = grabTransfer->DisableMovementTime; save.GrabTransfer.DisableLookTime = grabTransfer->DisableLookTime; save.GrabTransfer.LastCanDoMoveTime = grabTransfer->LastCanDoMoveTime; save.GrabTransfer.LastStopMoveTime = grabTransfer->LastStopMoveTime; save.GrabTransfer.MoveActiveTime = grabTransfer->MoveActiveTime; save.GrabTransfer.RedoMoveTime = grabTransfer->RedoMoveTime; save.GrabTransfer.PreciseLocationSpeed = grabTransfer->PreciseLocationSpeed; save.GrabTransfer.PreciseLocation = grabTransfer->PreciseLocation; save.GrabTransfer.PreciseRotationInterpolationTime = grabTransfer->PreciseRotationInterpolationTime; save.GrabTransfer.PreciseRotation = grabTransfer->PreciseRotation; save.GrabTransfer.LookAtTargetLocation = grabTransfer->LookAtTargetLocation; save.GrabTransfer.LookAtTargetAngle = grabTransfer->LookAtTargetAngle; save.GrabTransfer.LookAtTargetInterpolationTime = grabTransfer->LookAtTargetInterpolationTime; save.GrabTransfer.LookAtTargetDuration = grabTransfer->LookAtTargetDuration; save.GrabTransfer.CancelResetCameraLookTime = grabTransfer->CancelResetCameraLookTime; save.GrabTransfer.ResetCameraLookTime = grabTransfer->ResetCameraLookTime; save.GrabTransfer.MinLookConstraint = grabTransfer->MinLookConstraint; save.GrabTransfer.MaxLookConstraint = grabTransfer->MaxLookConstraint; save.GrabTransfer.CustomCollisionRadius = grabTransfer->CustomCollisionRadius; save.GrabTransfer.CustomCollisionHeight = grabTransfer->CustomCollisionHeight; save.GrabTransfer.WeaponInactivePitchAimingLimit = grabTransfer->WeaponInactivePitchAimingLimit; save.GrabTransfer.RootMotionScale = grabTransfer->RootMotionScale; save.GrabTransfer.RootOffset = grabTransfer->RootOffset; save.GrabTransfer.SwanNeckEnableAtPitch = grabTransfer->SwanNeckEnableAtPitch; save.GrabTransfer.SwanNeckForward = grabTransfer->SwanNeckForward; save.GrabTransfer.SwanNeckDown = grabTransfer->SwanNeckDown; save.GrabTransfer.AnimBlendTime = grabTransfer->AnimBlendTime; save.GrabTransfer.StickyAngle = grabTransfer->StickyAngle; save.GrabTransfer.StickyAimedModifier = grabTransfer->StickyAimedModifier; save.GrabTransfer.Timer = grabTransfer->Timer; save.GrabTransfer.PawnPhysics = grabTransfer->PawnPhysics; save.GrabTransfer.HandPlantExtentCheckHeight = grabTransfer->HandPlantExtentCheckHeight; save.GrabTransfer.HandPlantExtentCheckWidth = grabTransfer->HandPlantExtentCheckWidth; save.GrabTransfer.HandPlantCheckDistance = grabTransfer->HandPlantCheckDistance; save.GrabTransfer.HandPlantCheckHeight = grabTransfer->HandPlantCheckHeight; save.GrabTransfer.ContextMoveDistanceMultiplier = grabTransfer->ContextMoveDistanceMultiplier; save.GrabTransfer.bCheckForGrab = grabTransfer->bCheckForGrab; save.GrabTransfer.bCheckForVaultOver = grabTransfer->bCheckForVaultOver; save.GrabTransfer.bCheckForWallClimb = grabTransfer->bCheckForWallClimb; save.GrabTransfer.bCheckForEdgeInVelDir = grabTransfer->bCheckForEdgeInVelDir; save.GrabTransfer.bCheckExitToFalling = grabTransfer->bCheckExitToFalling; save.GrabTransfer.bCheckExitToUncontrolledFalling = grabTransfer->bCheckExitToUncontrolledFalling; save.GrabTransfer.bCheckForSoftLanding = grabTransfer->bCheckForSoftLanding; save.GrabTransfer.bDelayTimeCheckAutoMoves = grabTransfer->bDelayTimeCheckAutoMoves; save.GrabTransfer.ExitToFallingZSpeed = grabTransfer->ExitToFallingZSpeed; save.GrabTransfer.SoftLandingZSpeedThreshold = grabTransfer->SoftLandingZSpeedThreshold; save.GrabTransfer.TimeToSoftLandingThreshold = grabTransfer->TimeToSoftLandingThreshold; save.GrabTransfer.Allowed2DTransferDistance = grabTransfer->Allowed2DTransferDistance; save.GrabTransfer.AllowedZTransferDistance = grabTransfer->AllowedZTransferDistance; save.GrabTransfer.TransferLocation = grabTransfer->TransferLocation; save.GrabTransfer.TransferNormal = grabTransfer->TransferNormal; save.GrabTransfer.TransferLookAtLocation = grabTransfer->TransferLookAtLocation; save.GrabTransfer.TransferLedgeNormal = grabTransfer->TransferLedgeNormal; save.GrabTransfer.TransferHint = grabTransfer->TransferHint; save.GrabTransfer.TransferMove = grabTransfer->TransferMove; save.GrabTransfer.TransferSpeed = grabTransfer->TransferSpeed; save.GrabTransfer.TransferDistance = grabTransfer->TransferDistance; save.GrabTransfer.bFitForGrab = grabTransfer->bFitForGrab;
	}

	auto coil = static_cast<Classes::UTdMove_Coil *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Coil)]);
	if (coil) {
		save.Coil.SpeedModifier = coil->SpeedModifier; save.Coil.FrictionModifier = coil->FrictionModifier; save.Coil.bDebugMove = coil->bDebugMove; save.Coil.bTriggersCompliment = coil->bTriggersCompliment; save.Coil.bDisableCollision = coil->bDisableCollision; save.Coil.bShouldHolsterWeapon = coil->bShouldHolsterWeapon; save.Coil.bShouldUnzoom = coil->bShouldUnzoom; save.Coil.bIsTimedMove = coil->bIsTimedMove; save.Coil.bConstrainLook = coil->bConstrainLook; save.Coil.bUseAbsoluteYawConstraint = coil->bUseAbsoluteYawConstraint; save.Coil.bDisableActorCollision = coil->bDisableActorCollision; save.Coil.bLookAtTargetLocation = coil->bLookAtTargetLocation; save.Coil.bLookAtTargetAngle = coil->bLookAtTargetAngle; save.Coil.bDisableFaceRotation = coil->bDisableFaceRotation; save.Coil.bDisableControllerFacingPawnYawRotation = coil->bDisableControllerFacingPawnYawRotation; save.Coil.bAvoidLedges = coil->bAvoidLedges; save.Coil.bUsePreciseLocation = coil->bUsePreciseLocation; save.Coil.bReachedPreciseLocation = coil->bReachedPreciseLocation; save.Coil.bDebugPreciseLocation = coil->bDebugPreciseLocation; save.Coil.bUsePreciseRotation = coil->bUsePreciseRotation; save.Coil.bReachedPreciseRotation = coil->bReachedPreciseRotation; save.Coil.bDelayRotationAndLocationCallback = coil->bDelayRotationAndLocationCallback; save.Coil.bResetCameraLook = coil->bResetCameraLook; save.Coil.bUseCustomCollision = coil->bUseCustomCollision; save.Coil.bUseCameraCollision = coil->bUseCameraCollision; save.Coil.bTwoHandedFullBodyAnimations = coil->bTwoHandedFullBodyAnimations; save.Coil.bStickyAim = coil->bStickyAim; save.Coil.bStopAfterMove = coil->bStopAfterMove; save.Coil.bEnableFootPlacement = coil->bEnableFootPlacement; save.Coil.bEnableAgainstWall = coil->bEnableAgainstWall; save.Coil.bAllowPickup = coil->bAllowPickup; save.Coil.AiAimPenalty = coil->AiAimPenalty; save.Coil.AiAimOneShotPenalty = coil->AiAimOneShotPenalty; save.Coil.MovementGroup = coil->MovementGroup; save.Coil.FirstPersonDPG = coil->FirstPersonDPG; save.Coil.FirstPersonLowerBodyDPG = coil->FirstPersonLowerBodyDPG; save.Coil.PreciseLocationInterpMode = coil->PreciseLocationInterpMode; save.Coil.AimMode = coil->AimMode; save.Coil.DisableMovementTime = coil->DisableMovementTime; save.Coil.DisableLookTime = coil->DisableLookTime; save.Coil.LastCanDoMoveTime = coil->LastCanDoMoveTime; save.Coil.LastStopMoveTime = coil->LastStopMoveTime; save.Coil.MoveActiveTime = coil->MoveActiveTime; save.Coil.RedoMoveTime = coil->RedoMoveTime; save.Coil.PreciseLocationSpeed = coil->PreciseLocationSpeed; save.Coil.PreciseLocation = coil->PreciseLocation; save.Coil.PreciseRotationInterpolationTime = coil->PreciseRotationInterpolationTime; save.Coil.PreciseRotation = coil->PreciseRotation; save.Coil.LookAtTargetLocation = coil->LookAtTargetLocation; save.Coil.LookAtTargetAngle = coil->LookAtTargetAngle; save.Coil.LookAtTargetInterpolationTime = coil->LookAtTargetInterpolationTime; save.Coil.LookAtTargetDuration = coil->LookAtTargetDuration; save.Coil.CancelResetCameraLookTime = coil->CancelResetCameraLookTime; save.Coil.ResetCameraLookTime = coil->ResetCameraLookTime; save.Coil.MinLookConstraint = coil->MinLookConstraint; save.Coil.MaxLookConstraint = coil->MaxLookConstraint; save.Coil.CustomCollisionRadius = coil->CustomCollisionRadius; save.Coil.CustomCollisionHeight = coil->CustomCollisionHeight; save.Coil.WeaponInactivePitchAimingLimit = coil->WeaponInactivePitchAimingLimit; save.Coil.RootMotionScale = coil->RootMotionScale; save.Coil.RootOffset = coil->RootOffset; save.Coil.SwanNeckEnableAtPitch = coil->SwanNeckEnableAtPitch; save.Coil.SwanNeckForward = coil->SwanNeckForward; save.Coil.SwanNeckDown = coil->SwanNeckDown; save.Coil.AnimBlendTime = coil->AnimBlendTime; save.Coil.StickyAngle = coil->StickyAngle; save.Coil.StickyAimedModifier = coil->StickyAimedModifier; save.Coil.Timer = coil->Timer; save.Coil.PawnPhysics = coil->PawnPhysics; save.Coil.HandPlantExtentCheckHeight = coil->HandPlantExtentCheckHeight; save.Coil.HandPlantExtentCheckWidth = coil->HandPlantExtentCheckWidth; save.Coil.HandPlantCheckDistance = coil->HandPlantCheckDistance; save.Coil.HandPlantCheckHeight = coil->HandPlantCheckHeight; save.Coil.ContextMoveDistanceMultiplier = coil->ContextMoveDistanceMultiplier; save.Coil.bCheckForGrab = coil->bCheckForGrab; save.Coil.bCheckForVaultOver = coil->bCheckForVaultOver; save.Coil.bCheckForWallClimb = coil->bCheckForWallClimb; save.Coil.bCheckForEdgeInVelDir = coil->bCheckForEdgeInVelDir; save.Coil.bCheckExitToFalling = coil->bCheckExitToFalling; save.Coil.bCheckExitToUncontrolledFalling = coil->bCheckExitToUncontrolledFalling; save.Coil.bCheckForSoftLanding = coil->bCheckForSoftLanding; save.Coil.bDelayTimeCheckAutoMoves = coil->bDelayTimeCheckAutoMoves; save.Coil.ExitToFallingZSpeed = coil->ExitToFallingZSpeed; save.Coil.SoftLandingZSpeedThreshold = coil->SoftLandingZSpeedThreshold; save.Coil.TimeToSoftLandingThreshold = coil->TimeToSoftLandingThreshold; save.Coil.HeightBoostDuration = coil->HeightBoostDuration; save.Coil.TotalHeightBoost = coil->TotalHeightBoost; save.Coil.CoilMinTriggerSpeed = coil->CoilMinTriggerSpeed; save.Coil.CoilTime = coil->CoilTime; save.Coil.HeightBoostLeft = coil->HeightBoostLeft;
	}

	auto meleeWallrun = static_cast<Classes::UTdMove_MeleeWallrun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_MeleeWallrun)]);
	if (meleeWallrun) {
		save.MeleeWallrun.SpeedModifier = meleeWallrun->SpeedModifier; save.MeleeWallrun.FrictionModifier = meleeWallrun->FrictionModifier; save.MeleeWallrun.bDebugMove = meleeWallrun->bDebugMove; save.MeleeWallrun.bTriggersCompliment = meleeWallrun->bTriggersCompliment; save.MeleeWallrun.bDisableCollision = meleeWallrun->bDisableCollision; save.MeleeWallrun.bShouldHolsterWeapon = meleeWallrun->bShouldHolsterWeapon; save.MeleeWallrun.bShouldUnzoom = meleeWallrun->bShouldUnzoom; save.MeleeWallrun.bIsTimedMove = meleeWallrun->bIsTimedMove; save.MeleeWallrun.bConstrainLook = meleeWallrun->bConstrainLook; save.MeleeWallrun.bUseAbsoluteYawConstraint = meleeWallrun->bUseAbsoluteYawConstraint; save.MeleeWallrun.bDisableActorCollision = meleeWallrun->bDisableActorCollision; save.MeleeWallrun.bLookAtTargetLocation = meleeWallrun->bLookAtTargetLocation; save.MeleeWallrun.bLookAtTargetAngle = meleeWallrun->bLookAtTargetAngle; save.MeleeWallrun.bDisableFaceRotation = meleeWallrun->bDisableFaceRotation; save.MeleeWallrun.bDisableControllerFacingPawnYawRotation = meleeWallrun->bDisableControllerFacingPawnYawRotation; save.MeleeWallrun.bAvoidLedges = meleeWallrun->bAvoidLedges; save.MeleeWallrun.bUsePreciseLocation = meleeWallrun->bUsePreciseLocation; save.MeleeWallrun.bReachedPreciseLocation = meleeWallrun->bReachedPreciseLocation; save.MeleeWallrun.bDebugPreciseLocation = meleeWallrun->bDebugPreciseLocation; save.MeleeWallrun.bUsePreciseRotation = meleeWallrun->bUsePreciseRotation; save.MeleeWallrun.bReachedPreciseRotation = meleeWallrun->bReachedPreciseRotation; save.MeleeWallrun.bDelayRotationAndLocationCallback = meleeWallrun->bDelayRotationAndLocationCallback; save.MeleeWallrun.bResetCameraLook = meleeWallrun->bResetCameraLook; save.MeleeWallrun.bUseCustomCollision = meleeWallrun->bUseCustomCollision; save.MeleeWallrun.bUseCameraCollision = meleeWallrun->bUseCameraCollision; save.MeleeWallrun.bTwoHandedFullBodyAnimations = meleeWallrun->bTwoHandedFullBodyAnimations; save.MeleeWallrun.bStickyAim = meleeWallrun->bStickyAim; save.MeleeWallrun.bStopAfterMove = meleeWallrun->bStopAfterMove; save.MeleeWallrun.bEnableFootPlacement = meleeWallrun->bEnableFootPlacement; save.MeleeWallrun.bEnableAgainstWall = meleeWallrun->bEnableAgainstWall; save.MeleeWallrun.bAllowPickup = meleeWallrun->bAllowPickup; save.MeleeWallrun.AiAimPenalty = meleeWallrun->AiAimPenalty; save.MeleeWallrun.AiAimOneShotPenalty = meleeWallrun->AiAimOneShotPenalty; save.MeleeWallrun.MovementGroup = meleeWallrun->MovementGroup; save.MeleeWallrun.FirstPersonDPG = meleeWallrun->FirstPersonDPG; save.MeleeWallrun.FirstPersonLowerBodyDPG = meleeWallrun->FirstPersonLowerBodyDPG; save.MeleeWallrun.PreciseLocationInterpMode = meleeWallrun->PreciseLocationInterpMode; save.MeleeWallrun.AimMode = meleeWallrun->AimMode; save.MeleeWallrun.DisableMovementTime = meleeWallrun->DisableMovementTime; save.MeleeWallrun.DisableLookTime = meleeWallrun->DisableLookTime; save.MeleeWallrun.LastCanDoMoveTime = meleeWallrun->LastCanDoMoveTime; save.MeleeWallrun.LastStopMoveTime = meleeWallrun->LastStopMoveTime; save.MeleeWallrun.MoveActiveTime = meleeWallrun->MoveActiveTime; save.MeleeWallrun.RedoMoveTime = meleeWallrun->RedoMoveTime; save.MeleeWallrun.PreciseLocationSpeed = meleeWallrun->PreciseLocationSpeed; save.MeleeWallrun.PreciseLocation = meleeWallrun->PreciseLocation; save.MeleeWallrun.PreciseRotationInterpolationTime = meleeWallrun->PreciseRotationInterpolationTime; save.MeleeWallrun.PreciseRotation = meleeWallrun->PreciseRotation; save.MeleeWallrun.LookAtTargetLocation = meleeWallrun->LookAtTargetLocation; save.MeleeWallrun.LookAtTargetAngle = meleeWallrun->LookAtTargetAngle; save.MeleeWallrun.LookAtTargetInterpolationTime = meleeWallrun->LookAtTargetInterpolationTime; save.MeleeWallrun.LookAtTargetDuration = meleeWallrun->LookAtTargetDuration; save.MeleeWallrun.CancelResetCameraLookTime = meleeWallrun->CancelResetCameraLookTime; save.MeleeWallrun.ResetCameraLookTime = meleeWallrun->ResetCameraLookTime; save.MeleeWallrun.MinLookConstraint = meleeWallrun->MinLookConstraint; save.MeleeWallrun.MaxLookConstraint = meleeWallrun->MaxLookConstraint; save.MeleeWallrun.CustomCollisionRadius = meleeWallrun->CustomCollisionRadius; save.MeleeWallrun.CustomCollisionHeight = meleeWallrun->CustomCollisionHeight; save.MeleeWallrun.WeaponInactivePitchAimingLimit = meleeWallrun->WeaponInactivePitchAimingLimit; save.MeleeWallrun.RootMotionScale = meleeWallrun->RootMotionScale; save.MeleeWallrun.RootOffset = meleeWallrun->RootOffset; save.MeleeWallrun.SwanNeckEnableAtPitch = meleeWallrun->SwanNeckEnableAtPitch; save.MeleeWallrun.SwanNeckForward = meleeWallrun->SwanNeckForward; save.MeleeWallrun.SwanNeckDown = meleeWallrun->SwanNeckDown; save.MeleeWallrun.AnimBlendTime = meleeWallrun->AnimBlendTime; save.MeleeWallrun.StickyAngle = meleeWallrun->StickyAngle; save.MeleeWallrun.StickyAimedModifier = meleeWallrun->StickyAimedModifier; save.MeleeWallrun.Timer = meleeWallrun->Timer; save.MeleeWallrun.PawnPhysics = meleeWallrun->PawnPhysics; save.MeleeWallrun.HandPlantExtentCheckHeight = meleeWallrun->HandPlantExtentCheckHeight; save.MeleeWallrun.HandPlantExtentCheckWidth = meleeWallrun->HandPlantExtentCheckWidth; save.MeleeWallrun.HandPlantCheckDistance = meleeWallrun->HandPlantCheckDistance; save.MeleeWallrun.HandPlantCheckHeight = meleeWallrun->HandPlantCheckHeight; save.MeleeWallrun.ContextMoveDistanceMultiplier = meleeWallrun->ContextMoveDistanceMultiplier; save.MeleeWallrun.bCheckForGrab = meleeWallrun->bCheckForGrab; save.MeleeWallrun.bCheckForVaultOver = meleeWallrun->bCheckForVaultOver; save.MeleeWallrun.bCheckForWallClimb = meleeWallrun->bCheckForWallClimb; save.MeleeWallrun.bCheckForEdgeInVelDir = meleeWallrun->bCheckForEdgeInVelDir; save.MeleeWallrun.bCheckExitToFalling = meleeWallrun->bCheckExitToFalling; save.MeleeWallrun.bCheckExitToUncontrolledFalling = meleeWallrun->bCheckExitToUncontrolledFalling; save.MeleeWallrun.bCheckForSoftLanding = meleeWallrun->bCheckForSoftLanding; save.MeleeWallrun.bDelayTimeCheckAutoMoves = meleeWallrun->bDelayTimeCheckAutoMoves; save.MeleeWallrun.ExitToFallingZSpeed = meleeWallrun->ExitToFallingZSpeed; save.MeleeWallrun.SoftLandingZSpeedThreshold = meleeWallrun->SoftLandingZSpeedThreshold; save.MeleeWallrun.TimeToSoftLandingThreshold = meleeWallrun->TimeToSoftLandingThreshold; save.MeleeWallrun.MeleeState = meleeWallrun->MeleeState; save.MeleeWallrun.bTargeting = meleeWallrun->bTargeting; save.MeleeWallrun.bHitDetection = meleeWallrun->bHitDetection; save.MeleeWallrun.TargetingRotationSpeed = meleeWallrun->TargetingRotationSpeed; save.MeleeWallrun.TargetingMaxDistance = meleeWallrun->TargetingMaxDistance; save.MeleeWallrun.HitDetectionStart = meleeWallrun->HitDetectionStart; save.MeleeWallrun.HitDetectionLastStart = meleeWallrun->HitDetectionLastStart; save.MeleeWallrun.TraceOffset = meleeWallrun->TraceOffset; save.MeleeWallrun.TraceExtent = meleeWallrun->TraceExtent; save.MeleeWallrun.MeleeDamage = meleeWallrun->MeleeDamage; save.MeleeWallrun.MaxMeleeDistance = meleeWallrun->MaxMeleeDistance; save.MeleeWallrun.MaxMeleeAngle = meleeWallrun->MaxMeleeAngle; save.MeleeWallrun.CanDoMoveTaserLimit = meleeWallrun->CanDoMoveTaserLimit; save.MeleeWallrun.WallrunNormal = meleeWallrun->WallrunNormal; save.MeleeWallrun.bLeft = meleeWallrun->bLeft;
	}

	auto wallClimb180TurnJump = static_cast<Classes::UTdMove_WallClimb180TurnJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallClimb180TurnJump)]);
	if (wallClimb180TurnJump) {
		save.WallClimb180TurnJump.SpeedModifier = wallClimb180TurnJump->SpeedModifier; save.WallClimb180TurnJump.FrictionModifier = wallClimb180TurnJump->FrictionModifier; save.WallClimb180TurnJump.bDebugMove = wallClimb180TurnJump->bDebugMove; save.WallClimb180TurnJump.bTriggersCompliment = wallClimb180TurnJump->bTriggersCompliment; save.WallClimb180TurnJump.bDisableCollision = wallClimb180TurnJump->bDisableCollision; save.WallClimb180TurnJump.bShouldHolsterWeapon = wallClimb180TurnJump->bShouldHolsterWeapon; save.WallClimb180TurnJump.bShouldUnzoom = wallClimb180TurnJump->bShouldUnzoom; save.WallClimb180TurnJump.bIsTimedMove = wallClimb180TurnJump->bIsTimedMove; save.WallClimb180TurnJump.bConstrainLook = wallClimb180TurnJump->bConstrainLook; save.WallClimb180TurnJump.bUseAbsoluteYawConstraint = wallClimb180TurnJump->bUseAbsoluteYawConstraint; save.WallClimb180TurnJump.bDisableActorCollision = wallClimb180TurnJump->bDisableActorCollision; save.WallClimb180TurnJump.bLookAtTargetLocation = wallClimb180TurnJump->bLookAtTargetLocation; save.WallClimb180TurnJump.bLookAtTargetAngle = wallClimb180TurnJump->bLookAtTargetAngle; save.WallClimb180TurnJump.bDisableFaceRotation = wallClimb180TurnJump->bDisableFaceRotation; save.WallClimb180TurnJump.bDisableControllerFacingPawnYawRotation = wallClimb180TurnJump->bDisableControllerFacingPawnYawRotation; save.WallClimb180TurnJump.bAvoidLedges = wallClimb180TurnJump->bAvoidLedges; save.WallClimb180TurnJump.bUsePreciseLocation = wallClimb180TurnJump->bUsePreciseLocation; save.WallClimb180TurnJump.bReachedPreciseLocation = wallClimb180TurnJump->bReachedPreciseLocation; save.WallClimb180TurnJump.bDebugPreciseLocation = wallClimb180TurnJump->bDebugPreciseLocation; save.WallClimb180TurnJump.bUsePreciseRotation = wallClimb180TurnJump->bUsePreciseRotation; save.WallClimb180TurnJump.bReachedPreciseRotation = wallClimb180TurnJump->bReachedPreciseRotation; save.WallClimb180TurnJump.bDelayRotationAndLocationCallback = wallClimb180TurnJump->bDelayRotationAndLocationCallback; save.WallClimb180TurnJump.bResetCameraLook = wallClimb180TurnJump->bResetCameraLook; save.WallClimb180TurnJump.bUseCustomCollision = wallClimb180TurnJump->bUseCustomCollision; save.WallClimb180TurnJump.bUseCameraCollision = wallClimb180TurnJump->bUseCameraCollision; save.WallClimb180TurnJump.bTwoHandedFullBodyAnimations = wallClimb180TurnJump->bTwoHandedFullBodyAnimations; save.WallClimb180TurnJump.bStickyAim = wallClimb180TurnJump->bStickyAim; save.WallClimb180TurnJump.bStopAfterMove = wallClimb180TurnJump->bStopAfterMove; save.WallClimb180TurnJump.bEnableFootPlacement = wallClimb180TurnJump->bEnableFootPlacement; save.WallClimb180TurnJump.bEnableAgainstWall = wallClimb180TurnJump->bEnableAgainstWall; save.WallClimb180TurnJump.bAllowPickup = wallClimb180TurnJump->bAllowPickup; save.WallClimb180TurnJump.AiAimPenalty = wallClimb180TurnJump->AiAimPenalty; save.WallClimb180TurnJump.AiAimOneShotPenalty = wallClimb180TurnJump->AiAimOneShotPenalty; save.WallClimb180TurnJump.MovementGroup = wallClimb180TurnJump->MovementGroup; save.WallClimb180TurnJump.FirstPersonDPG = wallClimb180TurnJump->FirstPersonDPG; save.WallClimb180TurnJump.FirstPersonLowerBodyDPG = wallClimb180TurnJump->FirstPersonLowerBodyDPG; save.WallClimb180TurnJump.PreciseLocationInterpMode = wallClimb180TurnJump->PreciseLocationInterpMode; save.WallClimb180TurnJump.AimMode = wallClimb180TurnJump->AimMode; save.WallClimb180TurnJump.DisableMovementTime = wallClimb180TurnJump->DisableMovementTime; save.WallClimb180TurnJump.DisableLookTime = wallClimb180TurnJump->DisableLookTime; save.WallClimb180TurnJump.LastCanDoMoveTime = wallClimb180TurnJump->LastCanDoMoveTime; save.WallClimb180TurnJump.LastStopMoveTime = wallClimb180TurnJump->LastStopMoveTime; save.WallClimb180TurnJump.MoveActiveTime = wallClimb180TurnJump->MoveActiveTime; save.WallClimb180TurnJump.RedoMoveTime = wallClimb180TurnJump->RedoMoveTime; save.WallClimb180TurnJump.PreciseLocationSpeed = wallClimb180TurnJump->PreciseLocationSpeed; save.WallClimb180TurnJump.PreciseLocation = wallClimb180TurnJump->PreciseLocation; save.WallClimb180TurnJump.PreciseRotationInterpolationTime = wallClimb180TurnJump->PreciseRotationInterpolationTime; save.WallClimb180TurnJump.PreciseRotation = wallClimb180TurnJump->PreciseRotation; save.WallClimb180TurnJump.LookAtTargetLocation = wallClimb180TurnJump->LookAtTargetLocation; save.WallClimb180TurnJump.LookAtTargetAngle = wallClimb180TurnJump->LookAtTargetAngle; save.WallClimb180TurnJump.LookAtTargetInterpolationTime = wallClimb180TurnJump->LookAtTargetInterpolationTime; save.WallClimb180TurnJump.LookAtTargetDuration = wallClimb180TurnJump->LookAtTargetDuration; save.WallClimb180TurnJump.CancelResetCameraLookTime = wallClimb180TurnJump->CancelResetCameraLookTime; save.WallClimb180TurnJump.ResetCameraLookTime = wallClimb180TurnJump->ResetCameraLookTime; save.WallClimb180TurnJump.MinLookConstraint = wallClimb180TurnJump->MinLookConstraint; save.WallClimb180TurnJump.MaxLookConstraint = wallClimb180TurnJump->MaxLookConstraint; save.WallClimb180TurnJump.CustomCollisionRadius = wallClimb180TurnJump->CustomCollisionRadius; save.WallClimb180TurnJump.CustomCollisionHeight = wallClimb180TurnJump->CustomCollisionHeight; save.WallClimb180TurnJump.WeaponInactivePitchAimingLimit = wallClimb180TurnJump->WeaponInactivePitchAimingLimit; save.WallClimb180TurnJump.RootMotionScale = wallClimb180TurnJump->RootMotionScale; save.WallClimb180TurnJump.RootOffset = wallClimb180TurnJump->RootOffset; save.WallClimb180TurnJump.SwanNeckEnableAtPitch = wallClimb180TurnJump->SwanNeckEnableAtPitch; save.WallClimb180TurnJump.SwanNeckForward = wallClimb180TurnJump->SwanNeckForward; save.WallClimb180TurnJump.SwanNeckDown = wallClimb180TurnJump->SwanNeckDown; save.WallClimb180TurnJump.AnimBlendTime = wallClimb180TurnJump->AnimBlendTime; save.WallClimb180TurnJump.StickyAngle = wallClimb180TurnJump->StickyAngle; save.WallClimb180TurnJump.StickyAimedModifier = wallClimb180TurnJump->StickyAimedModifier; save.WallClimb180TurnJump.Timer = wallClimb180TurnJump->Timer; save.WallClimb180TurnJump.PawnPhysics = wallClimb180TurnJump->PawnPhysics; save.WallClimb180TurnJump.HandPlantExtentCheckHeight = wallClimb180TurnJump->HandPlantExtentCheckHeight; save.WallClimb180TurnJump.HandPlantExtentCheckWidth = wallClimb180TurnJump->HandPlantExtentCheckWidth; save.WallClimb180TurnJump.HandPlantCheckDistance = wallClimb180TurnJump->HandPlantCheckDistance; save.WallClimb180TurnJump.HandPlantCheckHeight = wallClimb180TurnJump->HandPlantCheckHeight; save.WallClimb180TurnJump.ContextMoveDistanceMultiplier = wallClimb180TurnJump->ContextMoveDistanceMultiplier; save.WallClimb180TurnJump.bCheckForGrab = wallClimb180TurnJump->bCheckForGrab; save.WallClimb180TurnJump.bCheckForVaultOver = wallClimb180TurnJump->bCheckForVaultOver; save.WallClimb180TurnJump.bCheckForWallClimb = wallClimb180TurnJump->bCheckForWallClimb; save.WallClimb180TurnJump.bCheckForEdgeInVelDir = wallClimb180TurnJump->bCheckForEdgeInVelDir; save.WallClimb180TurnJump.bCheckExitToFalling = wallClimb180TurnJump->bCheckExitToFalling; save.WallClimb180TurnJump.bCheckExitToUncontrolledFalling = wallClimb180TurnJump->bCheckExitToUncontrolledFalling; save.WallClimb180TurnJump.bCheckForSoftLanding = wallClimb180TurnJump->bCheckForSoftLanding; save.WallClimb180TurnJump.bDelayTimeCheckAutoMoves = wallClimb180TurnJump->bDelayTimeCheckAutoMoves; save.WallClimb180TurnJump.ExitToFallingZSpeed = wallClimb180TurnJump->ExitToFallingZSpeed; save.WallClimb180TurnJump.SoftLandingZSpeedThreshold = wallClimb180TurnJump->SoftLandingZSpeedThreshold; save.WallClimb180TurnJump.TimeToSoftLandingThreshold = wallClimb180TurnJump->TimeToSoftLandingThreshold; save.WallClimb180TurnJump.JumpOffZHeight = wallClimb180TurnJump->JumpOffZHeight; save.WallClimb180TurnJump.JumpPushAwaySpeed = wallClimb180TurnJump->JumpPushAwaySpeed; save.WallClimb180TurnJump.JumpTimeWindow = wallClimb180TurnJump->JumpTimeWindow; save.WallClimb180TurnJump.bJumpingFromWall = wallClimb180TurnJump->bJumpingFromWall; save.WallClimb180TurnJump.WantedJumpDir = wallClimb180TurnJump->WantedJumpDir;
	}

	switch (save.Pawn.MovementState) {
		case Classes::EMovement::MOVE_Walking:
		case Classes::EMovement::MOVE_Falling:
		case Classes::EMovement::MOVE_Grabbing:
		case Classes::EMovement::MOVE_WallRunningRight:
		case Classes::EMovement::MOVE_WallRunningLeft:
		case Classes::EMovement::MOVE_WallClimbing:
		case Classes::EMovement::MOVE_SpringBoarding:
		case Classes::EMovement::MOVE_Jump:
		case Classes::EMovement::MOVE_WallRunJump:
		case Classes::EMovement::MOVE_GrabJump:
		case Classes::EMovement::MOVE_IntoGrab:
		case Classes::EMovement::MOVE_Crouch:
		case Classes::EMovement::MOVE_Slide:
		case Classes::EMovement::MOVE_IntoZipLine:
		case Classes::EMovement::MOVE_ZipLine:
		case Classes::EMovement::MOVE_GrabTransfer:
		case Classes::EMovement::MOVE_Coil:
		case Classes::EMovement::MOVE_MeleeWallrun:
		case Classes::EMovement::MOVE_WallClimb180TurnJump:
			break;
		default:
			save.Pawn.bCollideWorld = true;
			save.Pawn.bConstrainLook = false;
			save.Pawn.MovementState = Classes::EMovement::MOVE_Walking;
			save.Pawn.CollisionType = Classes::ECollisionType::COLLIDE_TouchAllButWeapons;
			save.Pawn.Physics = Classes::EPhysics::PHYS_Walking;
			save.Controller.bIgnoreLookInput = false;
			save.Controller.bIgnoreMoveInput = false;
			save.Controller.bIgnoreButtonInput = false;
			save.Controller.bIgnoreMovementFocus = false;
			break;
	}
}

static void Load(Trainer::Save &save, Classes::ATdPlayerPawn *pawn, Classes::ATdPlayerController *controller) {
	pawn->InitialState = "Walking";
	pawn->SetInitialState();
	controller->InitialState = "PlayerWalking";
	controller->SetInitialState();
	
	pawn->StopAllCustomAnimations(0.0f);
	pawn->SetMove(save.Pawn.MovementState, true, false);

	pawn->bExludeHandMoves = save.Pawn.bExludeHandMoves; pawn->bExludeFootMoves = save.Pawn.bExludeFootMoves; pawn->bPhysXMutatable = save.Pawn.bPhysXMutatable; pawn->bStatic = save.Pawn.bStatic; pawn->bHidden = save.Pawn.bHidden; pawn->bNoDelete = save.Pawn.bNoDelete; pawn->bDeleteMe = save.Pawn.bDeleteMe; pawn->bTicked = save.Pawn.bTicked; pawn->bOnlyOwnerSee = save.Pawn.bOnlyOwnerSee; pawn->bStasis = save.Pawn.bStasis; pawn->bWorldGeometry = save.Pawn.bWorldGeometry; pawn->bIgnoreRigidBodyPawns = save.Pawn.bIgnoreRigidBodyPawns; pawn->bOrientOnSlope = save.Pawn.bOrientOnSlope; pawn->bIgnoreEncroachers = save.Pawn.bIgnoreEncroachers; pawn->bPushedByEncroachers = save.Pawn.bPushedByEncroachers; pawn->bDestroyedByInterpActor = save.Pawn.bDestroyedByInterpActor; pawn->bRouteBeginPlayEvenIfStatic = save.Pawn.bRouteBeginPlayEvenIfStatic; pawn->bIsMoving = save.Pawn.bIsMoving; pawn->bAlwaysEncroachCheck = save.Pawn.bAlwaysEncroachCheck; pawn->bHasAlternateTargetLocation = save.Pawn.bHasAlternateTargetLocation; pawn->bNetTemporary = save.Pawn.bNetTemporary; pawn->bOnlyRelevantToOwner = save.Pawn.bOnlyRelevantToOwner; pawn->bNetDirty = save.Pawn.bNetDirty; pawn->bAlwaysRelevant = save.Pawn.bAlwaysRelevant; pawn->bReplicateInstigator = save.Pawn.bReplicateInstigator; pawn->bReplicateMovement = save.Pawn.bReplicateMovement; pawn->bSkipActorPropertyReplication = save.Pawn.bSkipActorPropertyReplication; pawn->bUpdateSimulatedPosition = save.Pawn.bUpdateSimulatedPosition; pawn->bTearOff = save.Pawn.bTearOff; pawn->bOnlyDirtyReplication = save.Pawn.bOnlyDirtyReplication; pawn->bDemoRecording = save.Pawn.bDemoRecording; pawn->bDemoOwner = save.Pawn.bDemoOwner; pawn->bForceDemoRelevant = save.Pawn.bForceDemoRelevant; pawn->bNetInitialRotation = save.Pawn.bNetInitialRotation; pawn->bReplicateRigidBodyLocation = save.Pawn.bReplicateRigidBodyLocation; pawn->bKillDuringLevelTransition = save.Pawn.bKillDuringLevelTransition; pawn->bExchangedRoles = save.Pawn.bExchangedRoles; pawn->bConsiderAllStaticMeshComponentsForStreaming = save.Pawn.bConsiderAllStaticMeshComponentsForStreaming; pawn->bIgnoreForAITraces = save.Pawn.bIgnoreForAITraces; pawn->bInteractable = save.Pawn.bInteractable; pawn->bLOIObject = save.Pawn.bLOIObject; pawn->bDebug = save.Pawn.bDebug; pawn->bPostRenderIfNotVisible = save.Pawn.bPostRenderIfNotVisible; pawn->bForceNetUpdate = save.Pawn.bForceNetUpdate; pawn->bPendingNetUpdate = save.Pawn.bPendingNetUpdate; pawn->bHardAttach = save.Pawn.bHardAttach; pawn->bIgnoreBaseRotation = save.Pawn.bIgnoreBaseRotation; pawn->bShadowParented = save.Pawn.bShadowParented; pawn->bCanBeAdheredTo = save.Pawn.bCanBeAdheredTo; pawn->bCanBeFrictionedTo = save.Pawn.bCanBeFrictionedTo; pawn->bHurtEntry = save.Pawn.bHurtEntry; pawn->bGameRelevant = save.Pawn.bGameRelevant; pawn->bMovable = save.Pawn.bMovable; pawn->bDestroyInPainVolume = save.Pawn.bDestroyInPainVolume; pawn->bCanBeDamaged = save.Pawn.bCanBeDamaged; pawn->bShouldBaseAtStartup = save.Pawn.bShouldBaseAtStartup; pawn->bPendingDelete = save.Pawn.bPendingDelete; pawn->bCanTeleport = save.Pawn.bCanTeleport; pawn->bAlwaysTick = save.Pawn.bAlwaysTick; pawn->bBlocksNavigation = save.Pawn.bBlocksNavigation; pawn->BlockRigidBody = save.Pawn.BlockRigidBody; pawn->bCollideWhenPlacing = save.Pawn.bCollideWhenPlacing; pawn->bCollideActors = save.Pawn.bCollideActors; pawn->bCollideWorld = save.Pawn.bCollideWorld; pawn->bCollideComplex = save.Pawn.bCollideComplex; pawn->bBlockActors = save.Pawn.bBlockActors; pawn->bProjTarget = save.Pawn.bProjTarget; pawn->bBlocksTeleport = save.Pawn.bBlocksTeleport; pawn->bNoEncroachCheck = save.Pawn.bNoEncroachCheck; pawn->bPhysRigidBodyOutOfWorldCheck = save.Pawn.bPhysRigidBodyOutOfWorldCheck; pawn->bComponentOutsideWorld = save.Pawn.bComponentOutsideWorld; pawn->bBounce = save.Pawn.bBounce; pawn->bJustTeleported = save.Pawn.bJustTeleported; pawn->bNetInitial = save.Pawn.bNetInitial; pawn->bNetOwner = save.Pawn.bNetOwner; pawn->bHiddenEd = save.Pawn.bHiddenEd; pawn->bHiddenEdGroup = save.Pawn.bHiddenEdGroup; pawn->bHiddenEdCustom = save.Pawn.bHiddenEdCustom; pawn->bEdShouldSnap = save.Pawn.bEdShouldSnap; pawn->bTempEditor = save.Pawn.bTempEditor; pawn->bPathColliding = save.Pawn.bPathColliding; pawn->bPathTemp = save.Pawn.bPathTemp; pawn->bScriptInitialized = save.Pawn.bScriptInitialized; pawn->bLockLocation = save.Pawn.bLockLocation; pawn->CustomTimeDilation = save.Pawn.CustomTimeDilation; pawn->Physics = save.Pawn.Physics; pawn->RemoteRole = save.Pawn.RemoteRole; pawn->Role = save.Pawn.Role; pawn->CollisionType = save.Pawn.CollisionType; pawn->TickGroup = save.Pawn.TickGroup; pawn->NetTag = save.Pawn.NetTag; pawn->NetUpdateTime = save.Pawn.NetUpdateTime; pawn->NetUpdateFrequency = save.Pawn.NetUpdateFrequency; pawn->NetPriority = save.Pawn.NetPriority; pawn->LastNetUpdateTime = save.Pawn.LastNetUpdateTime; pawn->LifeSpan = save.Pawn.LifeSpan; pawn->CreationTime = save.Pawn.CreationTime; pawn->LastRenderTime = save.Pawn.LastRenderTime; pawn->LatentFloat = save.Pawn.LatentFloat; pawn->Location = save.Pawn.Location; pawn->Rotation = save.Pawn.Rotation; pawn->Velocity = save.Pawn.Velocity; pawn->Acceleration = save.Pawn.Acceleration; pawn->AngularVelocity = save.Pawn.AngularVelocity; pawn->RelativeLocation = save.Pawn.RelativeLocation; pawn->RelativeRotation = save.Pawn.RelativeRotation; pawn->DrawScale = save.Pawn.DrawScale; pawn->DrawScale3D = save.Pawn.DrawScale3D; pawn->PrePivot = save.Pawn.PrePivot; pawn->OverlapTag = save.Pawn.OverlapTag; pawn->RotationRate = save.Pawn.RotationRate; pawn->DesiredRotation = save.Pawn.DesiredRotation; pawn->MinDistForNetRBCorrection = save.Pawn.MinDistForNetRBCorrection; pawn->MaxStepHeight = save.Pawn.MaxStepHeight; pawn->MaxJumpHeight = save.Pawn.MaxJumpHeight; pawn->WalkableFloorZ = save.Pawn.WalkableFloorZ; pawn->NetRelevancyTime = save.Pawn.NetRelevancyTime; pawn->bUpAndOut = save.Pawn.bUpAndOut; pawn->bIsWalking = save.Pawn.bIsWalking; pawn->bWantsToCrouch = save.Pawn.bWantsToCrouch; pawn->bIsCrouched = save.Pawn.bIsCrouched; pawn->bTryToUncrouch = save.Pawn.bTryToUncrouch; pawn->bCanCrouch = save.Pawn.bCanCrouch; pawn->bCrawler = save.Pawn.bCrawler; pawn->bReducedSpeed = save.Pawn.bReducedSpeed; pawn->bJumpCapable = save.Pawn.bJumpCapable; pawn->bCanJump = save.Pawn.bCanJump; pawn->bCanWalk = save.Pawn.bCanWalk; pawn->bCanSwim = save.Pawn.bCanSwim; pawn->bCanFly = save.Pawn.bCanFly; pawn->bCanClimbLadders = save.Pawn.bCanClimbLadders; pawn->bCanStrafe = save.Pawn.bCanStrafe; pawn->bAvoidLedges = save.Pawn.bAvoidLedges; pawn->bStopAtLedges = save.Pawn.bStopAtLedges; pawn->bSimulateGravity = save.Pawn.bSimulateGravity; pawn->bIgnoreForces = save.Pawn.bIgnoreForces; pawn->bCanWalkOffLedges = save.Pawn.bCanWalkOffLedges; pawn->bCanBeBaseForPawns = save.Pawn.bCanBeBaseForPawns; pawn->bSimGravityDisabled = save.Pawn.bSimGravityDisabled; pawn->bDirectHitWall = save.Pawn.bDirectHitWall; pawn->bPushesRigidBodies = save.Pawn.bPushesRigidBodies; pawn->bForceFloorCheck = save.Pawn.bForceFloorCheck; pawn->bForceKeepAnchor = save.Pawn.bForceKeepAnchor; pawn->bCanMantle = save.Pawn.bCanMantle; pawn->bCanClimbCeilings = save.Pawn.bCanClimbCeilings; pawn->bCanSwatTurn = save.Pawn.bCanSwatTurn; pawn->bCanLeap = save.Pawn.bCanLeap; pawn->bCanCoverSlip = save.Pawn.bCanCoverSlip; pawn->bDisplayPathErrors = save.Pawn.bDisplayPathErrors; pawn->bIsFemale = save.Pawn.bIsFemale; pawn->bCanPickupInventory = save.Pawn.bCanPickupInventory; pawn->bAmbientCreature = save.Pawn.bAmbientCreature; pawn->bLOSHearing = save.Pawn.bLOSHearing; pawn->bMuffledHearing = save.Pawn.bMuffledHearing; pawn->bDontPossess = save.Pawn.bDontPossess; pawn->bAutoFire = save.Pawn.bAutoFire; pawn->bRollToDesired = save.Pawn.bRollToDesired; pawn->bStationary = save.Pawn.bStationary; pawn->bCachedRelevant = save.Pawn.bCachedRelevant; pawn->bSpecialHUD = save.Pawn.bSpecialHUD; pawn->bNoWeaponFiring = save.Pawn.bNoWeaponFiring; pawn->bCanUse = save.Pawn.bCanUse; pawn->bModifyReachSpecCost = save.Pawn.bModifyReachSpecCost; pawn->bPathfindsAsVehicle = save.Pawn.bPathfindsAsVehicle; pawn->bRunPhysicsWithNoController = save.Pawn.bRunPhysicsWithNoController; pawn->bForceMaxAccel = save.Pawn.bForceMaxAccel; pawn->bForceRMVelocity = save.Pawn.bForceRMVelocity; pawn->bForceRegularVelocity = save.Pawn.bForceRegularVelocity; pawn->bPlayedDeath = save.Pawn.bPlayedDeath; pawn->UncrouchTime = save.Pawn.UncrouchTime; pawn->CrouchHeight = save.Pawn.CrouchHeight; pawn->CrouchRadius = save.Pawn.CrouchRadius; pawn->FullHeight = save.Pawn.FullHeight; pawn->NonPreferredVehiclePathMultiplier = save.Pawn.NonPreferredVehiclePathMultiplier; pawn->PathSearchType = save.Pawn.PathSearchType; pawn->RemoteViewPitch = save.Pawn.RemoteViewPitch; pawn->FlashCount = save.Pawn.FlashCount; pawn->FiringMode = save.Pawn.FiringMode; pawn->DesiredSpeed = save.Pawn.DesiredSpeed; pawn->MaxDesiredSpeed = save.Pawn.MaxDesiredSpeed; pawn->HearingThreshold = save.Pawn.HearingThreshold; pawn->Alertness = save.Pawn.Alertness; pawn->SightRadius = save.Pawn.SightRadius; pawn->PeripheralVision = save.Pawn.PeripheralVision; pawn->AvgPhysicsTime = save.Pawn.AvgPhysicsTime; pawn->Mass = save.Pawn.Mass; pawn->Buoyancy = save.Pawn.Buoyancy; pawn->MeleeRange = save.Pawn.MeleeRange; pawn->FindAnchorFailedTime = save.Pawn.FindAnchorFailedTime; pawn->LastValidAnchorTime = save.Pawn.LastValidAnchorTime; pawn->DestinationOffset = save.Pawn.DestinationOffset; pawn->NextPathRadius = save.Pawn.NextPathRadius; pawn->SerpentineDir = save.Pawn.SerpentineDir; pawn->SerpentineDist = save.Pawn.SerpentineDist; pawn->SerpentineTime = save.Pawn.SerpentineTime; pawn->SpawnTime = save.Pawn.SpawnTime; pawn->MaxPitchLimit = save.Pawn.MaxPitchLimit; pawn->GroundSpeed = save.Pawn.GroundSpeed; pawn->WaterSpeed = save.Pawn.WaterSpeed; pawn->AirSpeed = save.Pawn.AirSpeed; pawn->LadderSpeed = save.Pawn.LadderSpeed; pawn->AccelRate = save.Pawn.AccelRate; pawn->JumpZ = save.Pawn.JumpZ; pawn->OutofWaterZ = save.Pawn.OutofWaterZ; pawn->MaxOutOfWaterStepHeight = save.Pawn.MaxOutOfWaterStepHeight; pawn->AirControl = save.Pawn.AirControl; pawn->WalkingPct = save.Pawn.WalkingPct; pawn->CrouchedPct = save.Pawn.CrouchedPct; pawn->MaxFallSpeed = save.Pawn.MaxFallSpeed; pawn->AIMaxFallSpeedFactor = save.Pawn.AIMaxFallSpeedFactor; pawn->BaseEyeHeight = save.Pawn.BaseEyeHeight; pawn->EyeHeight = save.Pawn.EyeHeight; pawn->Floor = save.Pawn.Floor; pawn->SplashTime = save.Pawn.SplashTime; pawn->OldZ = save.Pawn.OldZ; pawn->Health = save.Pawn.Health; pawn->HealthMax = save.Pawn.HealthMax; pawn->BreathTime = save.Pawn.BreathTime; pawn->UnderWaterTime = save.Pawn.UnderWaterTime; pawn->LastPainTime = save.Pawn.LastPainTime; pawn->RMVelocity = save.Pawn.RMVelocity; pawn->noise1spot = save.Pawn.noise1spot; pawn->noise1time = save.Pawn.noise1time; pawn->noise1loudness = save.Pawn.noise1loudness; pawn->noise2spot = save.Pawn.noise2spot; pawn->noise2time = save.Pawn.noise2time; pawn->noise2loudness = save.Pawn.noise2loudness; pawn->SoundDampening = save.Pawn.SoundDampening; pawn->DamageScaling = save.Pawn.DamageScaling; pawn->LastStartTime = save.Pawn.LastStartTime; pawn->TakeHitLocation = save.Pawn.TakeHitLocation; pawn->TearOffMomentum = save.Pawn.TearOffMomentum; pawn->RBPushRadius = save.Pawn.RBPushRadius; pawn->RBPushStrength = save.Pawn.RBPushStrength; pawn->AlwaysRelevantDistanceSquared = save.Pawn.AlwaysRelevantDistanceSquared; pawn->VehicleCheckRadius = save.Pawn.VehicleCheckRadius; pawn->ViewPitchMin = save.Pawn.ViewPitchMin; pawn->ViewPitchMax = save.Pawn.ViewPitchMax; pawn->AllowedYawError = save.Pawn.AllowedYawError; pawn->FlashLocation = save.Pawn.FlashLocation; pawn->LastFiringFlashLocation = save.Pawn.LastFiringFlashLocation; pawn->ShotCount = save.Pawn.ShotCount; pawn->FailedLandingCount = save.Pawn.FailedLandingCount; pawn->bDisableSkelControlSpring = save.Pawn.bDisableSkelControlSpring; pawn->bCanUnCrouch = save.Pawn.bCanUnCrouch; pawn->bConstrainLook = save.Pawn.bConstrainLook; pawn->bGoingForward = save.Pawn.bGoingForward; pawn->bClimbLeftHand = save.Pawn.bClimbLeftHand; pawn->bClimbDownFast = save.Pawn.bClimbDownFast; pawn->bEnableFootPlacement = save.Pawn.bEnableFootPlacement; pawn->bMoveActionMax = save.Pawn.bMoveActionMax; pawn->bFoundLedgeExcludesHandMoves = save.Pawn.bFoundLedgeExcludesHandMoves; pawn->bFoundLedgeExcludesFootMoves = save.Pawn.bFoundLedgeExcludesFootMoves; pawn->bIsWallWalking = save.Pawn.bIsWallWalking; pawn->bFoundLedge = save.Pawn.bFoundLedge; pawn->bAllowMoveChange = save.Pawn.bAllowMoveChange; pawn->bSRPauseTimer = save.Pawn.bSRPauseTimer; pawn->bForceMaxAccelOneFrame = save.Pawn.bForceMaxAccelOneFrame; pawn->RollTriggerPressed = save.Pawn.RollTriggerPressed; pawn->bUncontrolledSlide = save.Pawn.bUncontrolledSlide; pawn->bIsPlayingSlideEffect = save.Pawn.bIsPlayingSlideEffect; pawn->bAlternateSound = save.Pawn.bAlternateSound; pawn->bCharacterInhaling = save.Pawn.bCharacterInhaling; pawn->bDisableCharacterSounds = save.Pawn.bDisableCharacterSounds; pawn->bTakeFallDamage = save.Pawn.bTakeFallDamage; pawn->bIsUsingRootMotion = save.Pawn.bIsUsingRootMotion; pawn->bIsUsingRootRotation = save.Pawn.bIsUsingRootRotation; pawn->bDebugDamage = save.Pawn.bDebugDamage; pawn->bDebugNetAnim = save.Pawn.bDebugNetAnim; pawn->bNoMoveAnims = save.Pawn.bNoMoveAnims; pawn->bDebugAcceleration = save.Pawn.bDebugAcceleration; pawn->bDebugJumping = save.Pawn.bDebugJumping; pawn->bDebugMovement = save.Pawn.bDebugMovement; pawn->bDebugPlotPath = save.Pawn.bDebugPlotPath; pawn->bDebugFootsteps = save.Pawn.bDebugFootsteps; pawn->bDebugSlapBack = save.Pawn.bDebugSlapBack; pawn->bDebugCharacterSounds = save.Pawn.bDebugCharacterSounds; pawn->bDebugBreathingSounds = save.Pawn.bDebugBreathingSounds; pawn->bDebugWeapons = save.Pawn.bDebugWeapons; pawn->bDebugMaterials = save.Pawn.bDebugMaterials; pawn->VelocityMagnitude2D = save.Pawn.VelocityMagnitude2D; pawn->VelocityMagnitude = save.Pawn.VelocityMagnitude; pawn->VelocityDir2D = save.Pawn.VelocityDir2D; pawn->VelocityDir = save.Pawn.VelocityDir; pawn->FaceRotationTimeLeft = save.Pawn.FaceRotationTimeLeft; pawn->BecameReadyTime = save.Pawn.BecameReadyTime; pawn->AmountTilUnarmed = save.Pawn.AmountTilUnarmed; pawn->GravityModifier = save.Pawn.GravityModifier; pawn->GravityModifierTimer = save.Pawn.GravityModifierTimer; pawn->AgainstWallState = save.Pawn.AgainstWallState; pawn->WeaponAnimState = save.Pawn.WeaponAnimState; pawn->AnimLockRefCount = save.Pawn.AnimLockRefCount; pawn->RootMotionRefCount = save.Pawn.RootMotionRefCount; pawn->CurrentGrabTurnType = save.Pawn.CurrentGrabTurnType; pawn->LadderType = save.Pawn.LadderType; pawn->AnimationMovementState = save.Pawn.AnimationMovementState; pawn->PendingAnimationMovementState = save.Pawn.PendingAnimationMovementState; pawn->OldMovementState = save.Pawn.OldMovementState; pawn->PendingMovementState = save.Pawn.PendingMovementState; pawn->MovementState = save.Pawn.MovementState; pawn->ReplicatedMovementState = save.Pawn.ReplicatedMovementState; pawn->AIAimOldMovementState = save.Pawn.AIAimOldMovementState; pawn->OverrideWalkingState = save.Pawn.OverrideWalkingState; pawn->PendingOverrideWalkingState = save.Pawn.PendingOverrideWalkingState; pawn->CurrentWalkingState = save.Pawn.CurrentWalkingState; pawn->ReplicateCustomAnimCount = save.Pawn.ReplicateCustomAnimCount; pawn->MoveActionHint = save.Pawn.MoveActionHint; pawn->ReloadCount = save.Pawn.ReloadCount; pawn->NoOfBreathingSounds = save.Pawn.NoOfBreathingSounds; pawn->AgainstWallLeftHand = save.Pawn.AgainstWallLeftHand; pawn->AgainstWallRightHand = save.Pawn.AgainstWallRightHand; pawn->AgainstWallNormal = save.Pawn.AgainstWallNormal; pawn->MinLookConstraint = save.Pawn.MinLookConstraint; pawn->MaxLookConstraint = save.Pawn.MaxLookConstraint; pawn->LegRotationSlowTimer = save.Pawn.LegRotationSlowTimer; pawn->LegRotation = save.Pawn.LegRotation; pawn->LegRotationSpeed = save.Pawn.LegRotationSpeed; pawn->GoBackLegAngleLimitMin = save.Pawn.GoBackLegAngleLimitMin; pawn->GoBackLegAngleLimitMax = save.Pawn.GoBackLegAngleLimitMax; pawn->LegAngleLimitFudge = save.Pawn.LegAngleLimitFudge; pawn->SneakVelocity = save.Pawn.SneakVelocity; pawn->WalkVelocity = save.Pawn.WalkVelocity; pawn->JogVelocity = save.Pawn.JogVelocity; pawn->RunVelocity = save.Pawn.RunVelocity; pawn->SprintVelocity = save.Pawn.SprintVelocity; pawn->AverageSpeed = save.Pawn.AverageSpeed; pawn->ASFilterTime = save.Pawn.ASFilterTime; pawn->ASPollInterval = save.Pawn.ASPollInterval; pawn->ASPollTimer = save.Pawn.ASPollTimer; pawn->ASPollSlots = save.Pawn.ASPollSlots; pawn->ASSlotPointer = save.Pawn.ASSlotPointer; pawn->ASDistanceAccum = save.Pawn.ASDistanceAccum; pawn->NewFloorSmooth = save.Pawn.NewFloorSmooth; pawn->SmoothOffset = save.Pawn.SmoothOffset; pawn->FootPlacementStoredRotation = save.Pawn.FootPlacementStoredRotation; pawn->TargetMeshTranslationZ = save.Pawn.TargetMeshTranslationZ; pawn->SlideStoppedTimeStamp = save.Pawn.SlideStoppedTimeStamp; pawn->MoveLocation = save.Pawn.MoveLocation; pawn->MoveNormal = save.Pawn.MoveNormal; pawn->MaxWallStepHeight = save.Pawn.MaxWallStepHeight; pawn->MoveLedgeLocation = save.Pawn.MoveLedgeLocation; pawn->MoveLedgeNormal = save.Pawn.MoveLedgeNormal; pawn->MoveLedgeResult = save.Pawn.MoveLedgeResult; pawn->LedgeFindExtent = save.Pawn.LedgeFindExtent; pawn->LedgeFindDistance = save.Pawn.LedgeFindDistance; pawn->LedgeFindDepth = save.Pawn.LedgeFindDepth; pawn->IllegalLedgeNormal = save.Pawn.IllegalLedgeNormal; pawn->bIllegalLedgeTimer = save.Pawn.bIllegalLedgeTimer; pawn->ActiveMoveTimer = save.Pawn.ActiveMoveTimer; pawn->RemoteViewYaw = save.Pawn.RemoteViewYaw; pawn->EvadeTimer = save.Pawn.EvadeTimer; pawn->SpeedMaxBaseVelocity = save.Pawn.SpeedMaxBaseVelocity; pawn->SpeedMinBaseVelocity = save.Pawn.SpeedMinBaseVelocity; pawn->SpeedStrafeVelocityAccelerationFactor = save.Pawn.SpeedStrafeVelocityAccelerationFactor; pawn->SpeedWalkVelocityAccelerationFactor = save.Pawn.SpeedWalkVelocityAccelerationFactor; pawn->SpeedSprintVelocityAccelerationFactor = save.Pawn.SpeedSprintVelocityAccelerationFactor; pawn->SpeedEnergyDecelerationTime = save.Pawn.SpeedEnergyDecelerationTime; pawn->SpeedEnergyDecelerationExponent = save.Pawn.SpeedEnergyDecelerationExponent; pawn->SpeedTurnDecelerationFactor = save.Pawn.SpeedTurnDecelerationFactor; pawn->SpeedSprintEnergy = save.Pawn.SpeedSprintEnergy; pawn->UpwardWalkFrictionScale = save.Pawn.UpwardWalkFrictionScale; pawn->DownwardWalkFrictionScale = save.Pawn.DownwardWalkFrictionScale; pawn->MinWalkFrictionModify = save.Pawn.MinWalkFrictionModify; pawn->MaxWalkFrictionModify = save.Pawn.MaxWalkFrictionModify; pawn->UpwardSlideFrictionScale = save.Pawn.UpwardSlideFrictionScale; pawn->DownwardSlideFrictionScale = save.Pawn.DownwardSlideFrictionScale; pawn->BrakingFrictionStrength = save.Pawn.BrakingFrictionStrength; pawn->SoftLockStrength = save.Pawn.SoftLockStrength; pawn->RollTriggerTime = save.Pawn.RollTriggerTime; pawn->UncontrolledSlideNormal = save.Pawn.UncontrolledSlideNormal; pawn->FallingUncontrolledHeight = save.Pawn.FallingUncontrolledHeight; pawn->EnterFallingHeight = save.Pawn.EnterFallingHeight; pawn->SlideEffectUpdateTimer = save.Pawn.SlideEffectUpdateTimer; pawn->CustomSoundInput = save.Pawn.CustomSoundInput; pawn->OverrideSynchPosOffset = save.Pawn.OverrideSynchPosOffset; pawn->StreakEffectOverride = save.Pawn.StreakEffectOverride; pawn->StreakEffectDirection = save.Pawn.StreakEffectDirection; pawn->PatchOne = save.Pawn.PatchOne; pawn->PatchTwo = save.Pawn.PatchTwo; pawn->PatchThree = save.Pawn.PatchThree; pawn->PhysicsHitReactionBlendTimer = save.Pawn.PhysicsHitReactionBlendTimer; pawn->PhysicsHitReactionBlendOut = save.Pawn.PhysicsHitReactionBlendOut; pawn->PhysicsHitReactionBlendInTime = save.Pawn.PhysicsHitReactionBlendInTime; pawn->PhysicsHitReactionBlendOutTime = save.Pawn.PhysicsHitReactionBlendOutTime; pawn->PhysicsHitReactionScale = save.Pawn.PhysicsHitReactionScale; pawn->LastDamageTaken = save.Pawn.LastDamageTaken; pawn->ArmorBulletsHead = save.Pawn.ArmorBulletsHead; pawn->ArmorBulletsBody = save.Pawn.ArmorBulletsBody; pawn->ArmorBulletsLegs = save.Pawn.ArmorBulletsLegs; pawn->ArmorMeleeHead = save.Pawn.ArmorMeleeHead; pawn->ArmorMeleeBody = save.Pawn.ArmorMeleeBody; pawn->ArmorMeleeLegs = save.Pawn.ArmorMeleeLegs; pawn->FootstepTraceLength = save.Pawn.FootstepTraceLength; pawn->FootstepTraceWidth = save.Pawn.FootstepTraceWidth; pawn->LastFlybyStamp = save.Pawn.LastFlybyStamp; pawn->MaxHealth = save.Pawn.MaxHealth; pawn->RegenerateDelay = save.Pawn.RegenerateDelay; pawn->RegenerateHealthPerSecond = save.Pawn.RegenerateHealthPerSecond; pawn->UnrealEngineFallDamageScale = save.Pawn.UnrealEngineFallDamageScale; pawn->TimeSinceLastDamage = save.Pawn.TimeSinceLastDamage; pawn->HealthFrac = save.Pawn.HealthFrac; pawn->TaserDamageLevel = save.Pawn.TaserDamageLevel; pawn->RegenerateFromTaserPerSecond = save.Pawn.RegenerateFromTaserPerSecond; pawn->TaserRegenerateDelay = save.Pawn.TaserRegenerateDelay; pawn->TimeSinceLastTaserDamage = save.Pawn.TimeSinceLastTaserDamage; pawn->StunDamageLevel = save.Pawn.StunDamageLevel; pawn->RegenerateFromStunPerSecond = save.Pawn.RegenerateFromStunPerSecond; pawn->MinTimeBeforeRemovingDeadBody = save.Pawn.MinTimeBeforeRemovingDeadBody; pawn->MaxTimeBeforeRemovingDeadBody = save.Pawn.MaxTimeBeforeRemovingDeadBody; pawn->MyPassengerSeatIndex = save.Pawn.MyPassengerSeatIndex; pawn->SlideFactor = save.Pawn.SlideFactor; pawn->LastDamage = save.Pawn.LastDamage; pawn->LastDamageTime = save.Pawn.LastDamageTime; pawn->NextDebugPlotTime = save.Pawn.NextDebugPlotTime; pawn->LastPlotLocation = save.Pawn.LastPlotLocation; pawn->LastJumpLocation = save.Pawn.LastJumpLocation; pawn->bHasMorphNodes = save.Pawn.bHasMorphNodes; pawn->bStuckOnGround = save.Pawn.bStuckOnGround; pawn->bPlayerDiedHoldingTheBag = save.Pawn.bPlayerDiedHoldingTheBag; pawn->bIsInShadowAlteringMoveState = save.Pawn.bIsInShadowAlteringMoveState; pawn->bEnableHairPhysics = save.Pawn.bEnableHairPhysics; pawn->bLockBase = save.Pawn.bLockBase; pawn->bCutsceneIsSkippable = save.Pawn.bCutsceneIsSkippable; pawn->FirstPersonDPG = save.Pawn.FirstPersonDPG; pawn->FirstPersonLowerBodyDPG = save.Pawn.FirstPersonLowerBodyDPG; pawn->VertigoEdgeProbingHeight = save.Pawn.VertigoEdgeProbingHeight; pawn->VertigoEdgeProbingDistance = save.Pawn.VertigoEdgeProbingDistance; pawn->VertigoEffectThreshold = save.Pawn.VertigoEffectThreshold; pawn->EdgeCheckMaxSpeed = save.Pawn.EdgeCheckMaxSpeed; pawn->EdgeCheckDistance = save.Pawn.EdgeCheckDistance; pawn->EdgeStopMinHeight = save.Pawn.EdgeStopMinHeight; pawn->LastEnemyHitTimeOut = save.Pawn.LastEnemyHitTimeOut; pawn->ReverbVolumeTimer = save.Pawn.ReverbVolumeTimer; pawn->ReverbVolumePollTime = save.Pawn.ReverbVolumePollTime; pawn->OcclusionDuckLevel = save.Pawn.OcclusionDuckLevel; pawn->OcclusionDuckFadeTime = save.Pawn.OcclusionDuckFadeTime; pawn->IndoorSoundGroupIndex = save.Pawn.IndoorSoundGroupIndex; pawn->IndoorMixGroupIndex = save.Pawn.IndoorMixGroupIndex; pawn->OutdoorMixGroupIndex = save.Pawn.OutdoorMixGroupIndex; pawn->MovementStringAllowedGap = save.Pawn.MovementStringAllowedGap; pawn->MovementStringGapTimer = save.Pawn.MovementStringGapTimer; pawn->PlayerBulletDamageMultiplier = save.Pawn.PlayerBulletDamageMultiplier; pawn->FocusLocation = save.Pawn.FocusLocation; pawn->PlayerCameraLocation = save.Pawn.PlayerCameraLocation; pawn->PlayerCameraRotation = save.Pawn.PlayerCameraRotation; pawn->DebugPlayerGraph = save.Pawn.DebugPlayerGraph; pawn->LastDebugGraphValue = save.Pawn.LastDebugGraphValue; pawn->SimulatedBadFPS = save.Pawn.SimulatedBadFPS; pawn->FocusLocationInterpolationSpeed = save.Pawn.FocusLocationInterpolationSpeed; pawn->LastResetTimeStamp = save.Pawn.LastResetTimeStamp;
	controller->bExludeHandMoves = save.Controller.bExludeHandMoves; controller->bExludeFootMoves = save.Controller.bExludeFootMoves; controller->bPhysXMutatable = save.Controller.bPhysXMutatable; controller->bStatic = save.Controller.bStatic; controller->bHidden = save.Controller.bHidden; controller->bNoDelete = save.Controller.bNoDelete; controller->bDeleteMe = save.Controller.bDeleteMe; controller->bTicked = save.Controller.bTicked; controller->bOnlyOwnerSee = save.Controller.bOnlyOwnerSee; controller->bStasis = save.Controller.bStasis; controller->bWorldGeometry = save.Controller.bWorldGeometry; controller->bIgnoreRigidBodyPawns = save.Controller.bIgnoreRigidBodyPawns; controller->bOrientOnSlope = save.Controller.bOrientOnSlope; controller->bIgnoreEncroachers = save.Controller.bIgnoreEncroachers; controller->bPushedByEncroachers = save.Controller.bPushedByEncroachers; controller->bDestroyedByInterpActor = save.Controller.bDestroyedByInterpActor; controller->bRouteBeginPlayEvenIfStatic = save.Controller.bRouteBeginPlayEvenIfStatic; controller->bIsMoving = save.Controller.bIsMoving; controller->bAlwaysEncroachCheck = save.Controller.bAlwaysEncroachCheck; controller->bHasAlternateTargetLocation = save.Controller.bHasAlternateTargetLocation; controller->bNetTemporary = save.Controller.bNetTemporary; controller->bOnlyRelevantToOwner = save.Controller.bOnlyRelevantToOwner; controller->bNetDirty = save.Controller.bNetDirty; controller->bAlwaysRelevant = save.Controller.bAlwaysRelevant; controller->bReplicateInstigator = save.Controller.bReplicateInstigator; controller->bReplicateMovement = save.Controller.bReplicateMovement; controller->bSkipActorPropertyReplication = save.Controller.bSkipActorPropertyReplication; controller->bUpdateSimulatedPosition = save.Controller.bUpdateSimulatedPosition; controller->bTearOff = save.Controller.bTearOff; controller->bOnlyDirtyReplication = save.Controller.bOnlyDirtyReplication; controller->bDemoRecording = save.Controller.bDemoRecording; controller->bDemoOwner = save.Controller.bDemoOwner; controller->bForceDemoRelevant = save.Controller.bForceDemoRelevant; controller->bNetInitialRotation = save.Controller.bNetInitialRotation; controller->bReplicateRigidBodyLocation = save.Controller.bReplicateRigidBodyLocation; controller->bKillDuringLevelTransition = save.Controller.bKillDuringLevelTransition; controller->bExchangedRoles = save.Controller.bExchangedRoles; controller->bConsiderAllStaticMeshComponentsForStreaming = save.Controller.bConsiderAllStaticMeshComponentsForStreaming; controller->bIgnoreForAITraces = save.Controller.bIgnoreForAITraces; controller->bInteractable = save.Controller.bInteractable; controller->bLOIObject = save.Controller.bLOIObject; controller->bDebug = save.Controller.bDebug; controller->bPostRenderIfNotVisible = save.Controller.bPostRenderIfNotVisible; controller->bForceNetUpdate = save.Controller.bForceNetUpdate; controller->bPendingNetUpdate = save.Controller.bPendingNetUpdate; controller->bHardAttach = save.Controller.bHardAttach; controller->bIgnoreBaseRotation = save.Controller.bIgnoreBaseRotation; controller->bShadowParented = save.Controller.bShadowParented; controller->bCanBeAdheredTo = save.Controller.bCanBeAdheredTo; controller->bCanBeFrictionedTo = save.Controller.bCanBeFrictionedTo; controller->bHurtEntry = save.Controller.bHurtEntry; controller->bGameRelevant = save.Controller.bGameRelevant; controller->bMovable = save.Controller.bMovable; controller->bDestroyInPainVolume = save.Controller.bDestroyInPainVolume; controller->bCanBeDamaged = save.Controller.bCanBeDamaged; controller->bShouldBaseAtStartup = save.Controller.bShouldBaseAtStartup; controller->bPendingDelete = save.Controller.bPendingDelete; controller->bCanTeleport = save.Controller.bCanTeleport; controller->bAlwaysTick = save.Controller.bAlwaysTick; controller->bBlocksNavigation = save.Controller.bBlocksNavigation; controller->BlockRigidBody = save.Controller.BlockRigidBody; controller->bCollideWhenPlacing = save.Controller.bCollideWhenPlacing; controller->bCollideActors = save.Controller.bCollideActors; controller->bCollideWorld = save.Controller.bCollideWorld; controller->bCollideComplex = save.Controller.bCollideComplex; controller->bBlockActors = save.Controller.bBlockActors; controller->bProjTarget = save.Controller.bProjTarget; controller->bBlocksTeleport = save.Controller.bBlocksTeleport; controller->bNoEncroachCheck = save.Controller.bNoEncroachCheck; controller->bPhysRigidBodyOutOfWorldCheck = save.Controller.bPhysRigidBodyOutOfWorldCheck; controller->bComponentOutsideWorld = save.Controller.bComponentOutsideWorld; controller->bBounce = save.Controller.bBounce; controller->bJustTeleported = save.Controller.bJustTeleported; controller->bNetInitial = save.Controller.bNetInitial; controller->bNetOwner = save.Controller.bNetOwner; controller->bHiddenEd = save.Controller.bHiddenEd; controller->bHiddenEdGroup = save.Controller.bHiddenEdGroup; controller->bHiddenEdCustom = save.Controller.bHiddenEdCustom; controller->bEdShouldSnap = save.Controller.bEdShouldSnap; controller->bTempEditor = save.Controller.bTempEditor; controller->bPathColliding = save.Controller.bPathColliding; controller->bPathTemp = save.Controller.bPathTemp; controller->bScriptInitialized = save.Controller.bScriptInitialized; controller->bLockLocation = save.Controller.bLockLocation; controller->CustomTimeDilation = save.Controller.CustomTimeDilation; controller->Physics = save.Controller.Physics; controller->RemoteRole = save.Controller.RemoteRole; controller->Role = save.Controller.Role; controller->CollisionType = save.Controller.CollisionType; controller->TickGroup = save.Controller.TickGroup; controller->NetTag = save.Controller.NetTag; controller->NetUpdateTime = save.Controller.NetUpdateTime; controller->NetUpdateFrequency = save.Controller.NetUpdateFrequency; controller->NetPriority = save.Controller.NetPriority; controller->LastNetUpdateTime = save.Controller.LastNetUpdateTime; controller->LifeSpan = save.Controller.LifeSpan; controller->CreationTime = save.Controller.CreationTime; controller->LastRenderTime = save.Controller.LastRenderTime; controller->LatentFloat = save.Controller.LatentFloat; controller->Location = save.Controller.Location; controller->Rotation = save.Controller.Rotation; controller->Velocity = save.Controller.Velocity; controller->Acceleration = save.Controller.Acceleration; controller->AngularVelocity = save.Controller.AngularVelocity; controller->RelativeLocation = save.Controller.RelativeLocation; controller->RelativeRotation = save.Controller.RelativeRotation; controller->DrawScale = save.Controller.DrawScale; controller->DrawScale3D = save.Controller.DrawScale3D; controller->PrePivot = save.Controller.PrePivot; controller->OverlapTag = save.Controller.OverlapTag; controller->RotationRate = save.Controller.RotationRate; controller->DesiredRotation = save.Controller.DesiredRotation; controller->MinDistForNetRBCorrection = save.Controller.MinDistForNetRBCorrection; controller->PlayerNum = save.Controller.PlayerNum; controller->bIsPlayer = save.Controller.bIsPlayer; controller->bGodMode = save.Controller.bGodMode; controller->bAffectedByHitEffects = save.Controller.bAffectedByHitEffects; controller->bSoaking = save.Controller.bSoaking; controller->bSlowerZAcquire = save.Controller.bSlowerZAcquire; controller->bForceStrafe = save.Controller.bForceStrafe; controller->bNotifyPostLanded = save.Controller.bNotifyPostLanded; controller->bNotifyApex = save.Controller.bNotifyApex; controller->bAdvancedTactics = save.Controller.bAdvancedTactics; controller->bCanDoSpecial = save.Controller.bCanDoSpecial; controller->bAdjusting = save.Controller.bAdjusting; controller->bPreparingMove = save.Controller.bPreparingMove; controller->bIgnoreMovementFocus = save.Controller.bIgnoreMovementFocus; controller->bLOSflag = save.Controller.bLOSflag; controller->bUsePlayerHearing = save.Controller.bUsePlayerHearing; controller->bNotifyFallingHitWall = save.Controller.bNotifyFallingHitWall; controller->bForceDesiredRotation = save.Controller.bForceDesiredRotation; controller->bPreciseDestination = save.Controller.bPreciseDestination; controller->bSeeFriendly = save.Controller.bSeeFriendly; controller->bUsingPathLanes = save.Controller.bUsingPathLanes; controller->bFire = save.Controller.bFire; controller->MinHitWall = save.Controller.MinHitWall; controller->MoveTimer = save.Controller.MoveTimer; controller->Destination = save.Controller.Destination; controller->FocalPoint = save.Controller.FocalPoint; controller->AdjustLoc = save.Controller.AdjustLoc; controller->CurrentPathDir = save.Controller.CurrentPathDir; controller->RouteDist = save.Controller.RouteDist; controller->LastRouteFind = save.Controller.LastRouteFind; controller->GroundPitchTime = save.Controller.GroundPitchTime; controller->ViewX = save.Controller.ViewX; controller->ViewY = save.Controller.ViewY; controller->ViewZ = save.Controller.ViewZ; controller->FailedReachTime = save.Controller.FailedReachTime; controller->FailedReachLocation = save.Controller.FailedReachLocation; controller->SightCounter = save.Controller.SightCounter; controller->RespawnPredictionTime = save.Controller.RespawnPredictionTime; controller->InUseNodeCostMultiplier = save.Controller.InUseNodeCostMultiplier; controller->HighJumpNodeCostModifier = save.Controller.HighJumpNodeCostModifier; controller->LaneOffset = save.Controller.LaneOffset; controller->OldBasedRotation = save.Controller.OldBasedRotation; controller->currentLaneSlot = save.Controller.currentLaneSlot; controller->pathMatesCount = save.Controller.pathMatesCount; controller->bFrozen = save.Controller.bFrozen; controller->bPressedJump = save.Controller.bPressedJump; controller->bDoubleJump = save.Controller.bDoubleJump; controller->bUpdatePosition = save.Controller.bUpdatePosition; controller->bUpdating = save.Controller.bUpdating; controller->bNeverSwitchOnPickup = save.Controller.bNeverSwitchOnPickup; controller->bCheatFlying = save.Controller.bCheatFlying; controller->bCameraPositionLocked = save.Controller.bCameraPositionLocked; controller->bShortConnectTimeOut = save.Controller.bShortConnectTimeOut; controller->bPendingDestroy = save.Controller.bPendingDestroy; controller->bWasSpeedHack = save.Controller.bWasSpeedHack; controller->bWasSaturated = save.Controller.bWasSaturated; controller->bDynamicNetSpeed = save.Controller.bDynamicNetSpeed; controller->bAimingHelp = save.Controller.bAimingHelp; controller->bCinematicMode = save.Controller.bCinematicMode; controller->bCinemaDisableInputMove = save.Controller.bCinemaDisableInputMove; controller->bCinemaDisableInputLook = save.Controller.bCinemaDisableInputLook; controller->bReplicateAllPawns = save.Controller.bReplicateAllPawns; controller->bIsUsingStreamingVolumes = save.Controller.bIsUsingStreamingVolumes; controller->bIsExternalUIOpen = save.Controller.bIsExternalUIOpen; controller->bIsControllerConnected = save.Controller.bIsControllerConnected; controller->bCheckSoundOcclusion = save.Controller.bCheckSoundOcclusion; controller->bLogHearSoundOverflow = save.Controller.bLogHearSoundOverflow; controller->bCheckRelevancyThroughPortals = save.Controller.bCheckRelevancyThroughPortals; controller->bReceivedUniqueId = save.Controller.bReceivedUniqueId; controller->bCanSeeLOI = save.Controller.bCanSeeLOI; controller->MaxResponseTime = save.Controller.MaxResponseTime; controller->WaitDelay = save.Controller.WaitDelay; controller->DoubleClickDir = save.Controller.DoubleClickDir; controller->bIgnoreMoveInput = save.Controller.bIgnoreMoveInput; controller->bIgnoreLookInput = save.Controller.bIgnoreLookInput; controller->bRun = save.Controller.bRun; controller->bDuck = save.Controller.bDuck; controller->NetPlayerIndex = save.Controller.NetPlayerIndex; controller->FOVAngle = save.Controller.FOVAngle; controller->DesiredFOV = save.Controller.DesiredFOV; controller->DefaultFOV = save.Controller.DefaultFOV; controller->LODDistanceFactor = save.Controller.LODDistanceFactor; controller->TargetViewRotation = save.Controller.TargetViewRotation; controller->TargetEyeHeight = save.Controller.TargetEyeHeight; controller->BlendedTargetViewRotation = save.Controller.BlendedTargetViewRotation; controller->LastAckedAccel = save.Controller.LastAckedAccel; controller->CurrentTimeStamp = save.Controller.CurrentTimeStamp; controller->LastUpdateTime = save.Controller.LastUpdateTime; controller->ServerTimeStamp = save.Controller.ServerTimeStamp; controller->TimeMargin = save.Controller.TimeMargin; controller->ClientUpdateTime = save.Controller.ClientUpdateTime; controller->MaxTimeMargin = save.Controller.MaxTimeMargin; controller->LastActiveTime = save.Controller.LastActiveTime; controller->ClientCap = save.Controller.ClientCap; controller->DynamicPingThreshold = save.Controller.DynamicPingThreshold; controller->LastPingUpdate = save.Controller.LastPingUpdate; controller->OldPing = save.Controller.OldPing; controller->LastSpeedHackLog = save.Controller.LastSpeedHackLog; controller->ProgressTimeOut = save.Controller.ProgressTimeOut; controller->GroundPitch = save.Controller.GroundPitch; controller->OldFloor = save.Controller.OldFloor; controller->FailedPathStart = save.Controller.FailedPathStart; controller->InteractDistance = save.Controller.InteractDistance; controller->LastBroadcastTime = save.Controller.LastBroadcastTime; controller->SpectatorCameraSpeed = save.Controller.SpectatorCameraSpeed; controller->MinRespawnDelay = save.Controller.MinRespawnDelay; controller->MaxConcurrentHearSounds = save.Controller.MaxConcurrentHearSounds; controller->InfiniteAmmo = save.Controller.InfiniteAmmo; controller->bDebugPostProcessFreeFlight = save.Controller.bDebugPostProcessFreeFlight; controller->bReleasedJump = save.Controller.bReleasedJump; controller->bLeftThumbStickPassedDeadZone = save.Controller.bLeftThumbStickPassedDeadZone; controller->bRightThumbStickPassedDeadZone = save.Controller.bRightThumbStickPassedDeadZone; controller->bDebugCloseCombat = save.Controller.bDebugCloseCombat; controller->bDisableSkipCutscenes = save.Controller.bDisableSkipCutscenes; controller->bReactionTime = save.Controller.bReactionTime; controller->bOverrideReactionTimeSettings = save.Controller.bOverrideReactionTimeSettings; controller->bJesusMode = save.Controller.bJesusMode; controller->bStefanMode = save.Controller.bStefanMode; controller->bIsWalking = save.Controller.bIsWalking; controller->bIsStopping = save.Controller.bIsStopping; controller->FailedToSpawn = save.Controller.FailedToSpawn; controller->bDisableLoadFromLastCheckpoint = save.Controller.bDisableLoadFromLastCheckpoint; controller->bDebugSoundMixGroups = save.Controller.bDebugSoundMixGroups; controller->bDebugSoundVelocity = save.Controller.bDebugSoundVelocity; controller->bDebugSoundReverbVolumes = save.Controller.bDebugSoundReverbVolumes; controller->ControllerTilt = save.Controller.ControllerTilt; controller->VisualizeControllerTilt = save.Controller.VisualizeControllerTilt; controller->bRopeburnDisarmSucceeded = save.Controller.bRopeburnDisarmSucceeded; controller->TimePressedJump = save.Controller.TimePressedJump; controller->JumpTapTime = save.Controller.JumpTapTime; controller->BagSearchTapTime = save.Controller.BagSearchTapTime; controller->LastEmoteMessageTime = save.Controller.LastEmoteMessageTime; controller->AllowedEmoteMessageInterval = save.Controller.AllowedEmoteMessageInterval; controller->TargetingPawnInterp = save.Controller.TargetingPawnInterp; controller->TargetingCutoffAngle = save.Controller.TargetingCutoffAngle; controller->TargetActorLocation = save.Controller.TargetActorLocation; controller->LookAtTimeDelay = save.Controller.LookAtTimeDelay; controller->MeleeLastAction = save.Controller.MeleeLastAction; controller->bIgnoreButtonInput = save.Controller.bIgnoreButtonInput; controller->CurrentSoundMode = save.Controller.CurrentSoundMode; controller->CachedWalkingState = save.Controller.CachedWalkingState; controller->CloseCombatMinRange = save.Controller.CloseCombatMinRange; controller->CloseCombatMaxRange = save.Controller.CloseCombatMaxRange; controller->CloseCombatRangeTime = save.Controller.CloseCombatRangeTime; controller->CloseCombatMaxAngle = save.Controller.CloseCombatMaxAngle; controller->CloseCombatPawnDistanceBias = save.Controller.CloseCombatPawnDistanceBias; controller->InputSize = save.Controller.InputSize; controller->InputMaxSprintRaduisLimit = save.Controller.InputMaxSprintRaduisLimit; controller->InputMaxSprintHeightLimit = save.Controller.InputMaxSprintHeightLimit; controller->InputMaxWalkRadiusLimit = save.Controller.InputMaxWalkRadiusLimit; controller->WallRunningAlignTime = save.Controller.WallRunningAlignTime; controller->WallRunningAlignYaw = save.Controller.WallRunningAlignYaw; controller->LOIIndex = save.Controller.LOIIndex; controller->ReactionTimeEnergy = save.Controller.ReactionTimeEnergy; controller->ReactionTimeSpawnLevel = save.Controller.ReactionTimeSpawnLevel; controller->ReactionTimeDrain = save.Controller.ReactionTimeDrain; controller->ReactionTimeMaxEffect = save.Controller.ReactionTimeMaxEffect; controller->ReactionTimeFadeIn = save.Controller.ReactionTimeFadeIn; controller->ReactionTimeFadeOut = save.Controller.ReactionTimeFadeOut; controller->ReactionTimeEnergyBuildRate = save.Controller.ReactionTimeEnergyBuildRate; controller->WallClimbingDodgeJumpThreshold = save.Controller.WallClimbingDodgeJumpThreshold; controller->WallRunningDodgeJumpThreshold = save.Controller.WallRunningDodgeJumpThreshold; controller->WalkCyclePart1 = save.Controller.WalkCyclePart1; controller->WalkCyclePart2 = save.Controller.WalkCyclePart2; controller->AccelerationTime = save.Controller.AccelerationTime; controller->StopAnimBlendIn = save.Controller.StopAnimBlendIn; controller->StopAnimBlendOut = save.Controller.StopAnimBlendOut; controller->StoppingVelocity = save.Controller.StoppingVelocity; controller->NextLocalEnemyToCheckLOS = save.Controller.NextLocalEnemyToCheckLOS; controller->LastEnemyNetSendTime = save.Controller.LastEnemyNetSendTime; controller->VehicleRotation = save.Controller.VehicleRotation; controller->DriverRotation = save.Controller.DriverRotation; controller->Team = save.Controller.Team; controller->StickySpeed = save.Controller.StickySpeed; controller->FOVZoomRate = save.Controller.FOVZoomRate; controller->FOVZoomDelay = save.Controller.FOVZoomDelay; controller->MouseX = save.Controller.MouseX; controller->MouseY = save.Controller.MouseY; controller->ActualAccelX = save.Controller.ActualAccelX; controller->ActualAccelY = save.Controller.ActualAccelY; controller->ActualAccelZ = save.Controller.ActualAccelZ; controller->SixAxisDisarmZ = save.Controller.SixAxisDisarmZ; controller->SixAxisDisarmY = save.Controller.SixAxisDisarmY; controller->SixAxisRollZ = save.Controller.SixAxisRollZ; controller->SixAxisRollY = save.Controller.SixAxisRollY; controller->DisarmTimeMultiplier = save.Controller.DisarmTimeMultiplier; controller->LastZAxisTilt = save.Controller.LastZAxisTilt; controller->LastYAxisTilt = save.Controller.LastYAxisTilt;

	auto walking = static_cast<Classes::UTdMove_Walking *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Walking)]);
	if (walking) {
		walking->SpeedModifier = save.Walking.SpeedModifier; walking->FrictionModifier = save.Walking.FrictionModifier; walking->bDebugMove = save.Walking.bDebugMove; walking->bTriggersCompliment = save.Walking.bTriggersCompliment; walking->bDisableCollision = save.Walking.bDisableCollision; walking->bShouldHolsterWeapon = save.Walking.bShouldHolsterWeapon; walking->bShouldUnzoom = save.Walking.bShouldUnzoom; walking->bIsTimedMove = save.Walking.bIsTimedMove; walking->bConstrainLook = save.Walking.bConstrainLook; walking->bUseAbsoluteYawConstraint = save.Walking.bUseAbsoluteYawConstraint; walking->bDisableActorCollision = save.Walking.bDisableActorCollision; walking->bLookAtTargetLocation = save.Walking.bLookAtTargetLocation; walking->bLookAtTargetAngle = save.Walking.bLookAtTargetAngle; walking->bDisableFaceRotation = save.Walking.bDisableFaceRotation; walking->bDisableControllerFacingPawnYawRotation = save.Walking.bDisableControllerFacingPawnYawRotation; walking->bAvoidLedges = save.Walking.bAvoidLedges; walking->bUsePreciseLocation = save.Walking.bUsePreciseLocation; walking->bReachedPreciseLocation = save.Walking.bReachedPreciseLocation; walking->bDebugPreciseLocation = save.Walking.bDebugPreciseLocation; walking->bUsePreciseRotation = save.Walking.bUsePreciseRotation; walking->bReachedPreciseRotation = save.Walking.bReachedPreciseRotation; walking->bDelayRotationAndLocationCallback = save.Walking.bDelayRotationAndLocationCallback; walking->bResetCameraLook = save.Walking.bResetCameraLook; walking->bUseCustomCollision = save.Walking.bUseCustomCollision; walking->bUseCameraCollision = save.Walking.bUseCameraCollision; walking->bTwoHandedFullBodyAnimations = save.Walking.bTwoHandedFullBodyAnimations; walking->bStickyAim = save.Walking.bStickyAim; walking->bStopAfterMove = save.Walking.bStopAfterMove; walking->bEnableFootPlacement = save.Walking.bEnableFootPlacement; walking->bEnableAgainstWall = save.Walking.bEnableAgainstWall; walking->bAllowPickup = save.Walking.bAllowPickup; walking->AiAimPenalty = save.Walking.AiAimPenalty; walking->AiAimOneShotPenalty = save.Walking.AiAimOneShotPenalty; walking->MovementGroup = save.Walking.MovementGroup; walking->FirstPersonDPG = save.Walking.FirstPersonDPG; walking->FirstPersonLowerBodyDPG = save.Walking.FirstPersonLowerBodyDPG; walking->PreciseLocationInterpMode = save.Walking.PreciseLocationInterpMode; walking->AimMode = save.Walking.AimMode; walking->DisableMovementTime = save.Walking.DisableMovementTime; walking->DisableLookTime = save.Walking.DisableLookTime; walking->LastCanDoMoveTime = save.Walking.LastCanDoMoveTime; walking->LastStopMoveTime = save.Walking.LastStopMoveTime; walking->MoveActiveTime = save.Walking.MoveActiveTime; walking->RedoMoveTime = save.Walking.RedoMoveTime; walking->PreciseLocationSpeed = save.Walking.PreciseLocationSpeed; walking->PreciseLocation = save.Walking.PreciseLocation; walking->PreciseRotationInterpolationTime = save.Walking.PreciseRotationInterpolationTime; walking->PreciseRotation = save.Walking.PreciseRotation; walking->LookAtTargetLocation = save.Walking.LookAtTargetLocation; walking->LookAtTargetAngle = save.Walking.LookAtTargetAngle; walking->LookAtTargetInterpolationTime = save.Walking.LookAtTargetInterpolationTime; walking->LookAtTargetDuration = save.Walking.LookAtTargetDuration; walking->CancelResetCameraLookTime = save.Walking.CancelResetCameraLookTime; walking->ResetCameraLookTime = save.Walking.ResetCameraLookTime; walking->MinLookConstraint = save.Walking.MinLookConstraint; walking->MaxLookConstraint = save.Walking.MaxLookConstraint; walking->CustomCollisionRadius = save.Walking.CustomCollisionRadius; walking->CustomCollisionHeight = save.Walking.CustomCollisionHeight; walking->WeaponInactivePitchAimingLimit = save.Walking.WeaponInactivePitchAimingLimit; walking->RootMotionScale = save.Walking.RootMotionScale; walking->RootOffset = save.Walking.RootOffset; walking->SwanNeckEnableAtPitch = save.Walking.SwanNeckEnableAtPitch; walking->SwanNeckForward = save.Walking.SwanNeckForward; walking->SwanNeckDown = save.Walking.SwanNeckDown; walking->AnimBlendTime = save.Walking.AnimBlendTime; walking->StickyAngle = save.Walking.StickyAngle; walking->StickyAimedModifier = save.Walking.StickyAimedModifier; walking->Timer = save.Walking.Timer; walking->PawnPhysics = save.Walking.PawnPhysics; walking->HandPlantExtentCheckHeight = save.Walking.HandPlantExtentCheckHeight; walking->HandPlantExtentCheckWidth = save.Walking.HandPlantExtentCheckWidth; walking->HandPlantCheckDistance = save.Walking.HandPlantCheckDistance; walking->HandPlantCheckHeight = save.Walking.HandPlantCheckHeight; walking->ContextMoveDistanceMultiplier = save.Walking.ContextMoveDistanceMultiplier; walking->bCheckForGrab = save.Walking.bCheckForGrab; walking->bCheckForVaultOver = save.Walking.bCheckForVaultOver; walking->bCheckForWallClimb = save.Walking.bCheckForWallClimb; walking->bCheckForEdgeInVelDir = save.Walking.bCheckForEdgeInVelDir; walking->bCheckExitToFalling = save.Walking.bCheckExitToFalling; walking->bCheckExitToUncontrolledFalling = save.Walking.bCheckExitToUncontrolledFalling; walking->bCheckForSoftLanding = save.Walking.bCheckForSoftLanding; walking->bDelayTimeCheckAutoMoves = save.Walking.bDelayTimeCheckAutoMoves; walking->ExitToFallingZSpeed = save.Walking.ExitToFallingZSpeed; walking->SoftLandingZSpeedThreshold = save.Walking.SoftLandingZSpeedThreshold; walking->TimeToSoftLandingThreshold = save.Walking.TimeToSoftLandingThreshold; walking->bIsPlayingIdleAnim = save.Walking.bIsPlayingIdleAnim; walking->TriggerIdleAnimMinTime = save.Walking.TriggerIdleAnimMinTime; walking->TriggerIdleAnimMaxTime = save.Walking.TriggerIdleAnimMaxTime;
	}

	auto falling = static_cast<Classes::UTdMove_Falling *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Falling)]);
	if (falling) {
		falling->SpeedModifier = save.Falling.SpeedModifier; falling->FrictionModifier = save.Falling.FrictionModifier; falling->bDebugMove = save.Falling.bDebugMove; falling->bTriggersCompliment = save.Falling.bTriggersCompliment; falling->bDisableCollision = save.Falling.bDisableCollision; falling->bShouldHolsterWeapon = save.Falling.bShouldHolsterWeapon; falling->bShouldUnzoom = save.Falling.bShouldUnzoom; falling->bIsTimedMove = save.Falling.bIsTimedMove; falling->bConstrainLook = save.Falling.bConstrainLook; falling->bUseAbsoluteYawConstraint = save.Falling.bUseAbsoluteYawConstraint; falling->bDisableActorCollision = save.Falling.bDisableActorCollision; falling->bLookAtTargetLocation = save.Falling.bLookAtTargetLocation; falling->bLookAtTargetAngle = save.Falling.bLookAtTargetAngle; falling->bDisableFaceRotation = save.Falling.bDisableFaceRotation; falling->bDisableControllerFacingPawnYawRotation = save.Falling.bDisableControllerFacingPawnYawRotation; falling->bAvoidLedges = save.Falling.bAvoidLedges; falling->bUsePreciseLocation = save.Falling.bUsePreciseLocation; falling->bReachedPreciseLocation = save.Falling.bReachedPreciseLocation; falling->bDebugPreciseLocation = save.Falling.bDebugPreciseLocation; falling->bUsePreciseRotation = save.Falling.bUsePreciseRotation; falling->bReachedPreciseRotation = save.Falling.bReachedPreciseRotation; falling->bDelayRotationAndLocationCallback = save.Falling.bDelayRotationAndLocationCallback; falling->bResetCameraLook = save.Falling.bResetCameraLook; falling->bUseCustomCollision = save.Falling.bUseCustomCollision; falling->bUseCameraCollision = save.Falling.bUseCameraCollision; falling->bTwoHandedFullBodyAnimations = save.Falling.bTwoHandedFullBodyAnimations; falling->bStickyAim = save.Falling.bStickyAim; falling->bStopAfterMove = save.Falling.bStopAfterMove; falling->bEnableFootPlacement = save.Falling.bEnableFootPlacement; falling->bEnableAgainstWall = save.Falling.bEnableAgainstWall; falling->bAllowPickup = save.Falling.bAllowPickup; falling->AiAimPenalty = save.Falling.AiAimPenalty; falling->AiAimOneShotPenalty = save.Falling.AiAimOneShotPenalty; falling->MovementGroup = save.Falling.MovementGroup; falling->FirstPersonDPG = save.Falling.FirstPersonDPG; falling->FirstPersonLowerBodyDPG = save.Falling.FirstPersonLowerBodyDPG; falling->PreciseLocationInterpMode = save.Falling.PreciseLocationInterpMode; falling->AimMode = save.Falling.AimMode; falling->DisableMovementTime = save.Falling.DisableMovementTime; falling->DisableLookTime = save.Falling.DisableLookTime; falling->LastCanDoMoveTime = save.Falling.LastCanDoMoveTime; falling->LastStopMoveTime = save.Falling.LastStopMoveTime; falling->MoveActiveTime = save.Falling.MoveActiveTime; falling->RedoMoveTime = save.Falling.RedoMoveTime; falling->PreciseLocationSpeed = save.Falling.PreciseLocationSpeed; falling->PreciseLocation = save.Falling.PreciseLocation; falling->PreciseRotationInterpolationTime = save.Falling.PreciseRotationInterpolationTime; falling->PreciseRotation = save.Falling.PreciseRotation; falling->LookAtTargetLocation = save.Falling.LookAtTargetLocation; falling->LookAtTargetAngle = save.Falling.LookAtTargetAngle; falling->LookAtTargetInterpolationTime = save.Falling.LookAtTargetInterpolationTime; falling->LookAtTargetDuration = save.Falling.LookAtTargetDuration; falling->CancelResetCameraLookTime = save.Falling.CancelResetCameraLookTime; falling->ResetCameraLookTime = save.Falling.ResetCameraLookTime; falling->MinLookConstraint = save.Falling.MinLookConstraint; falling->MaxLookConstraint = save.Falling.MaxLookConstraint; falling->CustomCollisionRadius = save.Falling.CustomCollisionRadius; falling->CustomCollisionHeight = save.Falling.CustomCollisionHeight; falling->WeaponInactivePitchAimingLimit = save.Falling.WeaponInactivePitchAimingLimit; falling->RootMotionScale = save.Falling.RootMotionScale; falling->RootOffset = save.Falling.RootOffset; falling->SwanNeckEnableAtPitch = save.Falling.SwanNeckEnableAtPitch; falling->SwanNeckForward = save.Falling.SwanNeckForward; falling->SwanNeckDown = save.Falling.SwanNeckDown; falling->AnimBlendTime = save.Falling.AnimBlendTime; falling->StickyAngle = save.Falling.StickyAngle; falling->StickyAimedModifier = save.Falling.StickyAimedModifier; falling->Timer = save.Falling.Timer; falling->PawnPhysics = save.Falling.PawnPhysics; falling->HandPlantExtentCheckHeight = save.Falling.HandPlantExtentCheckHeight; falling->HandPlantExtentCheckWidth = save.Falling.HandPlantExtentCheckWidth; falling->HandPlantCheckDistance = save.Falling.HandPlantCheckDistance; falling->HandPlantCheckHeight = save.Falling.HandPlantCheckHeight; falling->ContextMoveDistanceMultiplier = save.Falling.ContextMoveDistanceMultiplier; falling->bCheckForGrab = save.Falling.bCheckForGrab; falling->bCheckForVaultOver = save.Falling.bCheckForVaultOver; falling->bCheckForWallClimb = save.Falling.bCheckForWallClimb; falling->bCheckForEdgeInVelDir = save.Falling.bCheckForEdgeInVelDir; falling->bCheckExitToFalling = save.Falling.bCheckExitToFalling; falling->bCheckExitToUncontrolledFalling = save.Falling.bCheckExitToUncontrolledFalling; falling->bCheckForSoftLanding = save.Falling.bCheckForSoftLanding; falling->bDelayTimeCheckAutoMoves = save.Falling.bDelayTimeCheckAutoMoves; falling->ExitToFallingZSpeed = save.Falling.ExitToFallingZSpeed; falling->SoftLandingZSpeedThreshold = save.Falling.SoftLandingZSpeedThreshold; falling->TimeToSoftLandingThreshold = save.Falling.TimeToSoftLandingThreshold; falling->StickyAimAfterAirTime = save.Falling.StickyAimAfterAirTime; falling->AirTime = save.Falling.AirTime; falling->bCloseToGround = save.Falling.bCloseToGround; falling->PreviousMove = save.Falling.PreviousMove;
	}

	auto grabbing = static_cast<Classes::UTdMove_Grab *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Grabbing)]);
	if (grabbing) {
		grabbing->SpeedModifier = save.Grabbing.SpeedModifier; grabbing->FrictionModifier = save.Grabbing.FrictionModifier; grabbing->bDebugMove = save.Grabbing.bDebugMove; grabbing->bTriggersCompliment = save.Grabbing.bTriggersCompliment; grabbing->bDisableCollision = save.Grabbing.bDisableCollision; grabbing->bShouldHolsterWeapon = save.Grabbing.bShouldHolsterWeapon; grabbing->bShouldUnzoom = save.Grabbing.bShouldUnzoom; grabbing->bIsTimedMove = save.Grabbing.bIsTimedMove; grabbing->bConstrainLook = save.Grabbing.bConstrainLook; grabbing->bUseAbsoluteYawConstraint = save.Grabbing.bUseAbsoluteYawConstraint; grabbing->bDisableActorCollision = save.Grabbing.bDisableActorCollision; grabbing->bLookAtTargetLocation = save.Grabbing.bLookAtTargetLocation; grabbing->bLookAtTargetAngle = save.Grabbing.bLookAtTargetAngle; grabbing->bDisableFaceRotation = save.Grabbing.bDisableFaceRotation; grabbing->bDisableControllerFacingPawnYawRotation = save.Grabbing.bDisableControllerFacingPawnYawRotation; grabbing->bAvoidLedges = save.Grabbing.bAvoidLedges; grabbing->bUsePreciseLocation = save.Grabbing.bUsePreciseLocation; grabbing->bReachedPreciseLocation = save.Grabbing.bReachedPreciseLocation; grabbing->bDebugPreciseLocation = save.Grabbing.bDebugPreciseLocation; grabbing->bUsePreciseRotation = save.Grabbing.bUsePreciseRotation; grabbing->bReachedPreciseRotation = save.Grabbing.bReachedPreciseRotation; grabbing->bDelayRotationAndLocationCallback = save.Grabbing.bDelayRotationAndLocationCallback; grabbing->bResetCameraLook = save.Grabbing.bResetCameraLook; grabbing->bUseCustomCollision = save.Grabbing.bUseCustomCollision; grabbing->bUseCameraCollision = save.Grabbing.bUseCameraCollision; grabbing->bTwoHandedFullBodyAnimations = save.Grabbing.bTwoHandedFullBodyAnimations; grabbing->bStickyAim = save.Grabbing.bStickyAim; grabbing->bStopAfterMove = save.Grabbing.bStopAfterMove; grabbing->bEnableFootPlacement = save.Grabbing.bEnableFootPlacement; grabbing->bEnableAgainstWall = save.Grabbing.bEnableAgainstWall; grabbing->bAllowPickup = save.Grabbing.bAllowPickup; grabbing->AiAimPenalty = save.Grabbing.AiAimPenalty; grabbing->AiAimOneShotPenalty = save.Grabbing.AiAimOneShotPenalty; grabbing->MovementGroup = save.Grabbing.MovementGroup; grabbing->FirstPersonDPG = save.Grabbing.FirstPersonDPG; grabbing->FirstPersonLowerBodyDPG = save.Grabbing.FirstPersonLowerBodyDPG; grabbing->PreciseLocationInterpMode = save.Grabbing.PreciseLocationInterpMode; grabbing->AimMode = save.Grabbing.AimMode; grabbing->DisableMovementTime = save.Grabbing.DisableMovementTime; grabbing->DisableLookTime = save.Grabbing.DisableLookTime; grabbing->LastCanDoMoveTime = save.Grabbing.LastCanDoMoveTime; grabbing->LastStopMoveTime = save.Grabbing.LastStopMoveTime; grabbing->MoveActiveTime = save.Grabbing.MoveActiveTime; grabbing->RedoMoveTime = save.Grabbing.RedoMoveTime; grabbing->PreciseLocationSpeed = save.Grabbing.PreciseLocationSpeed; grabbing->PreciseLocation = save.Grabbing.PreciseLocation; grabbing->PreciseRotationInterpolationTime = save.Grabbing.PreciseRotationInterpolationTime; grabbing->PreciseRotation = save.Grabbing.PreciseRotation; grabbing->LookAtTargetLocation = save.Grabbing.LookAtTargetLocation; grabbing->LookAtTargetAngle = save.Grabbing.LookAtTargetAngle; grabbing->LookAtTargetInterpolationTime = save.Grabbing.LookAtTargetInterpolationTime; grabbing->LookAtTargetDuration = save.Grabbing.LookAtTargetDuration; grabbing->CancelResetCameraLookTime = save.Grabbing.CancelResetCameraLookTime; grabbing->ResetCameraLookTime = save.Grabbing.ResetCameraLookTime; grabbing->MinLookConstraint = save.Grabbing.MinLookConstraint; grabbing->MaxLookConstraint = save.Grabbing.MaxLookConstraint; grabbing->CustomCollisionRadius = save.Grabbing.CustomCollisionRadius; grabbing->CustomCollisionHeight = save.Grabbing.CustomCollisionHeight; grabbing->WeaponInactivePitchAimingLimit = save.Grabbing.WeaponInactivePitchAimingLimit; grabbing->RootMotionScale = save.Grabbing.RootMotionScale; grabbing->RootOffset = save.Grabbing.RootOffset; grabbing->SwanNeckEnableAtPitch = save.Grabbing.SwanNeckEnableAtPitch; grabbing->SwanNeckForward = save.Grabbing.SwanNeckForward; grabbing->SwanNeckDown = save.Grabbing.SwanNeckDown; grabbing->AnimBlendTime = save.Grabbing.AnimBlendTime; grabbing->StickyAngle = save.Grabbing.StickyAngle; grabbing->StickyAimedModifier = save.Grabbing.StickyAimedModifier; grabbing->Timer = save.Grabbing.Timer; grabbing->PawnPhysics = save.Grabbing.PawnPhysics; grabbing->HandPlantExtentCheckHeight = save.Grabbing.HandPlantExtentCheckHeight; grabbing->HandPlantExtentCheckWidth = save.Grabbing.HandPlantExtentCheckWidth; grabbing->HandPlantCheckDistance = save.Grabbing.HandPlantCheckDistance; grabbing->HandPlantCheckHeight = save.Grabbing.HandPlantCheckHeight; grabbing->ContextMoveDistanceMultiplier = save.Grabbing.ContextMoveDistanceMultiplier; grabbing->bCheckForGrab = save.Grabbing.bCheckForGrab; grabbing->bCheckForVaultOver = save.Grabbing.bCheckForVaultOver; grabbing->bCheckForWallClimb = save.Grabbing.bCheckForWallClimb; grabbing->bCheckForEdgeInVelDir = save.Grabbing.bCheckForEdgeInVelDir; grabbing->bCheckExitToFalling = save.Grabbing.bCheckExitToFalling; grabbing->bCheckExitToUncontrolledFalling = save.Grabbing.bCheckExitToUncontrolledFalling; grabbing->bCheckForSoftLanding = save.Grabbing.bCheckForSoftLanding; grabbing->bDelayTimeCheckAutoMoves = save.Grabbing.bDelayTimeCheckAutoMoves; grabbing->ExitToFallingZSpeed = save.Grabbing.ExitToFallingZSpeed; grabbing->SoftLandingZSpeedThreshold = save.Grabbing.SoftLandingZSpeedThreshold; grabbing->TimeToSoftLandingThreshold = save.Grabbing.TimeToSoftLandingThreshold; grabbing->GrabDesiredLedgeOffset = save.Grabbing.GrabDesiredLedgeOffset; grabbing->GrabMaxAngle = save.Grabbing.GrabMaxAngle; grabbing->GrabMinGrabableZNormal = save.Grabbing.GrabMinGrabableZNormal; grabbing->HangFreeZDistanceCheck = save.Grabbing.HangFreeZDistanceCheck; grabbing->RelativeExtent = save.Grabbing.RelativeExtent; grabbing->DistanceToWallFromFeet = save.Grabbing.DistanceToWallFromFeet; grabbing->StartTurningAngle = save.Grabbing.StartTurningAngle; grabbing->bIsWithinForwardView = save.Grabbing.bIsWithinForwardView; grabbing->bIsTurnedRight = save.Grabbing.bIsTurnedRight; grabbing->bSlopedLedge = save.Grabbing.bSlopedLedge; grabbing->bClimpUpFoldedActionReceived = save.Grabbing.bClimpUpFoldedActionReceived; grabbing->bRequestDropDown = save.Grabbing.bRequestDropDown; grabbing->bHangFreeVertigoEffect = save.Grabbing.bHangFreeVertigoEffect; grabbing->bGrabFromVerticalWallrun = save.Grabbing.bGrabFromVerticalWallrun; grabbing->bGrabFromHighZSpeed = save.Grabbing.bGrabFromHighZSpeed; grabbing->GrabType = save.Grabbing.GrabType; grabbing->PreviousGrabType = save.Grabbing.PreviousGrabType; grabbing->CurrentShimmyMove = save.Grabbing.CurrentShimmyMove; grabbing->CurrentFoldedType = save.Grabbing.CurrentFoldedType; grabbing->HangFreeMinLookContraint = save.Grabbing.HangFreeMinLookContraint; grabbing->HangFreeMaxLookContraint = save.Grabbing.HangFreeMaxLookContraint; grabbing->SlopeMinLookContraint = save.Grabbing.SlopeMinLookContraint; grabbing->SlopeMaxLookContraint = save.Grabbing.SlopeMaxLookContraint; grabbing->ShimmyAroundCornerMinLookContraint = save.Grabbing.ShimmyAroundCornerMinLookContraint; grabbing->ShimmyAroundCornerMaxLookContraint = save.Grabbing.ShimmyAroundCornerMaxLookContraint; grabbing->ShimmyAroundCornerFreeMinLookContraint = save.Grabbing.ShimmyAroundCornerFreeMinLookContraint; grabbing->ShimmyAroundCornerFreeMaxLookContraint = save.Grabbing.ShimmyAroundCornerFreeMaxLookContraint; grabbing->TargetYaw = save.Grabbing.TargetYaw; grabbing->TargetLocation = save.Grabbing.TargetLocation; grabbing->ShimmyVelocity = save.Grabbing.ShimmyVelocity; grabbing->ShimmyTime = save.Grabbing.ShimmyTime; grabbing->LastShimmyTimeSeconds = save.Grabbing.LastShimmyTimeSeconds; grabbing->DisableShimmyTime = save.Grabbing.DisableShimmyTime; grabbing->StartLookingAtLedgeTime = save.Grabbing.StartLookingAtLedgeTime; grabbing->StopLookingAtLedgeTime = save.Grabbing.StopLookingAtLedgeTime;
	}

	auto wallRunRight = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningRight)]);
	if (wallRunRight) {
		wallRunRight->SpeedModifier = save.WallRunRight.SpeedModifier; wallRunRight->FrictionModifier = save.WallRunRight.FrictionModifier; wallRunRight->bDebugMove = save.WallRunRight.bDebugMove; wallRunRight->bTriggersCompliment = save.WallRunRight.bTriggersCompliment; wallRunRight->bDisableCollision = save.WallRunRight.bDisableCollision; wallRunRight->bShouldHolsterWeapon = save.WallRunRight.bShouldHolsterWeapon; wallRunRight->bShouldUnzoom = save.WallRunRight.bShouldUnzoom; wallRunRight->bIsTimedMove = save.WallRunRight.bIsTimedMove; wallRunRight->bConstrainLook = save.WallRunRight.bConstrainLook; wallRunRight->bUseAbsoluteYawConstraint = save.WallRunRight.bUseAbsoluteYawConstraint; wallRunRight->bDisableActorCollision = save.WallRunRight.bDisableActorCollision; wallRunRight->bLookAtTargetLocation = save.WallRunRight.bLookAtTargetLocation; wallRunRight->bLookAtTargetAngle = save.WallRunRight.bLookAtTargetAngle; wallRunRight->bDisableFaceRotation = save.WallRunRight.bDisableFaceRotation; wallRunRight->bDisableControllerFacingPawnYawRotation = save.WallRunRight.bDisableControllerFacingPawnYawRotation; wallRunRight->bAvoidLedges = save.WallRunRight.bAvoidLedges; wallRunRight->bUsePreciseLocation = save.WallRunRight.bUsePreciseLocation; wallRunRight->bReachedPreciseLocation = save.WallRunRight.bReachedPreciseLocation; wallRunRight->bDebugPreciseLocation = save.WallRunRight.bDebugPreciseLocation; wallRunRight->bUsePreciseRotation = save.WallRunRight.bUsePreciseRotation; wallRunRight->bReachedPreciseRotation = save.WallRunRight.bReachedPreciseRotation; wallRunRight->bDelayRotationAndLocationCallback = save.WallRunRight.bDelayRotationAndLocationCallback; wallRunRight->bResetCameraLook = save.WallRunRight.bResetCameraLook; wallRunRight->bUseCustomCollision = save.WallRunRight.bUseCustomCollision; wallRunRight->bUseCameraCollision = save.WallRunRight.bUseCameraCollision; wallRunRight->bTwoHandedFullBodyAnimations = save.WallRunRight.bTwoHandedFullBodyAnimations; wallRunRight->bStickyAim = save.WallRunRight.bStickyAim; wallRunRight->bStopAfterMove = save.WallRunRight.bStopAfterMove; wallRunRight->bEnableFootPlacement = save.WallRunRight.bEnableFootPlacement; wallRunRight->bEnableAgainstWall = save.WallRunRight.bEnableAgainstWall; wallRunRight->bAllowPickup = save.WallRunRight.bAllowPickup; wallRunRight->AiAimPenalty = save.WallRunRight.AiAimPenalty; wallRunRight->AiAimOneShotPenalty = save.WallRunRight.AiAimOneShotPenalty; wallRunRight->MovementGroup = save.WallRunRight.MovementGroup; wallRunRight->FirstPersonDPG = save.WallRunRight.FirstPersonDPG; wallRunRight->FirstPersonLowerBodyDPG = save.WallRunRight.FirstPersonLowerBodyDPG; wallRunRight->PreciseLocationInterpMode = save.WallRunRight.PreciseLocationInterpMode; wallRunRight->AimMode = save.WallRunRight.AimMode; wallRunRight->DisableMovementTime = save.WallRunRight.DisableMovementTime; wallRunRight->DisableLookTime = save.WallRunRight.DisableLookTime; wallRunRight->LastCanDoMoveTime = save.WallRunRight.LastCanDoMoveTime; wallRunRight->LastStopMoveTime = save.WallRunRight.LastStopMoveTime; wallRunRight->MoveActiveTime = save.WallRunRight.MoveActiveTime; wallRunRight->RedoMoveTime = save.WallRunRight.RedoMoveTime; wallRunRight->PreciseLocationSpeed = save.WallRunRight.PreciseLocationSpeed; wallRunRight->PreciseLocation = save.WallRunRight.PreciseLocation; wallRunRight->PreciseRotationInterpolationTime = save.WallRunRight.PreciseRotationInterpolationTime; wallRunRight->PreciseRotation = save.WallRunRight.PreciseRotation; wallRunRight->LookAtTargetLocation = save.WallRunRight.LookAtTargetLocation; wallRunRight->LookAtTargetAngle = save.WallRunRight.LookAtTargetAngle; wallRunRight->LookAtTargetInterpolationTime = save.WallRunRight.LookAtTargetInterpolationTime; wallRunRight->LookAtTargetDuration = save.WallRunRight.LookAtTargetDuration; wallRunRight->CancelResetCameraLookTime = save.WallRunRight.CancelResetCameraLookTime; wallRunRight->ResetCameraLookTime = save.WallRunRight.ResetCameraLookTime; wallRunRight->MinLookConstraint = save.WallRunRight.MinLookConstraint; wallRunRight->MaxLookConstraint = save.WallRunRight.MaxLookConstraint; wallRunRight->CustomCollisionRadius = save.WallRunRight.CustomCollisionRadius; wallRunRight->CustomCollisionHeight = save.WallRunRight.CustomCollisionHeight; wallRunRight->WeaponInactivePitchAimingLimit = save.WallRunRight.WeaponInactivePitchAimingLimit; wallRunRight->RootMotionScale = save.WallRunRight.RootMotionScale; wallRunRight->RootOffset = save.WallRunRight.RootOffset; wallRunRight->SwanNeckEnableAtPitch = save.WallRunRight.SwanNeckEnableAtPitch; wallRunRight->SwanNeckForward = save.WallRunRight.SwanNeckForward; wallRunRight->SwanNeckDown = save.WallRunRight.SwanNeckDown; wallRunRight->AnimBlendTime = save.WallRunRight.AnimBlendTime; wallRunRight->StickyAngle = save.WallRunRight.StickyAngle; wallRunRight->StickyAimedModifier = save.WallRunRight.StickyAimedModifier; wallRunRight->Timer = save.WallRunRight.Timer; wallRunRight->PawnPhysics = save.WallRunRight.PawnPhysics; wallRunRight->HandPlantExtentCheckHeight = save.WallRunRight.HandPlantExtentCheckHeight; wallRunRight->HandPlantExtentCheckWidth = save.WallRunRight.HandPlantExtentCheckWidth; wallRunRight->HandPlantCheckDistance = save.WallRunRight.HandPlantCheckDistance; wallRunRight->HandPlantCheckHeight = save.WallRunRight.HandPlantCheckHeight; wallRunRight->ContextMoveDistanceMultiplier = save.WallRunRight.ContextMoveDistanceMultiplier; wallRunRight->bCheckForGrab = save.WallRunRight.bCheckForGrab; wallRunRight->bCheckForVaultOver = save.WallRunRight.bCheckForVaultOver; wallRunRight->bCheckForWallClimb = save.WallRunRight.bCheckForWallClimb; wallRunRight->bCheckForEdgeInVelDir = save.WallRunRight.bCheckForEdgeInVelDir; wallRunRight->bCheckExitToFalling = save.WallRunRight.bCheckExitToFalling; wallRunRight->bCheckExitToUncontrolledFalling = save.WallRunRight.bCheckExitToUncontrolledFalling; wallRunRight->bCheckForSoftLanding = save.WallRunRight.bCheckForSoftLanding; wallRunRight->bDelayTimeCheckAutoMoves = save.WallRunRight.bDelayTimeCheckAutoMoves; wallRunRight->ExitToFallingZSpeed = save.WallRunRight.ExitToFallingZSpeed; wallRunRight->SoftLandingZSpeedThreshold = save.WallRunRight.SoftLandingZSpeedThreshold; wallRunRight->TimeToSoftLandingThreshold = save.WallRunRight.TimeToSoftLandingThreshold; wallRunRight->WallRunningForwardCheckDistance = save.WallRunRight.WallRunningForwardCheckDistance; wallRunRight->WallRunningStrafeCheckDistance = save.WallRunRight.WallRunningStrafeCheckDistance; wallRunRight->WallRunningVerticalCheckDistance = save.WallRunRight.WallRunningVerticalCheckDistance; wallRunRight->WallRunningMinWallHeight = save.WallRunRight.WallRunningMinWallHeight; wallRunRight->WallRunningMinSpeed = save.WallRunRight.WallRunningMinSpeed; wallRunRight->WallRunningVelocityStartLimit = save.WallRunRight.WallRunningVelocityStartLimit; wallRunRight->WallRunningVelocityStopLimit = save.WallRunRight.WallRunningVelocityStopLimit; wallRunRight->WallRunningForwardMinStartAngle = save.WallRunRight.WallRunningForwardMinStartAngle; wallRunRight->WallRunningForwardMaxStartAngle = save.WallRunRight.WallRunningForwardMaxStartAngle; wallRunRight->WallRunningStrafeStartAngle = save.WallRunRight.WallRunningStrafeStartAngle; wallRunRight->WallRunningHorisontalFriction = save.WallRunRight.WallRunningHorisontalFriction; wallRunRight->WallRunningHorisontalInitialZHeight = save.WallRunRight.WallRunningHorisontalInitialZHeight; wallRunRight->WallRunningHorisontalAcceleration = save.WallRunRight.WallRunningHorisontalAcceleration; wallRunRight->WallRunningHorisontalDeceleration = save.WallRunRight.WallRunningHorisontalDeceleration; wallRunRight->WallRunningHorisontalAlignSpeed = save.WallRunRight.WallRunningHorisontalAlignSpeed; wallRunRight->WallRunningIntoWallrunBlendInTime = save.WallRunRight.WallRunningIntoWallrunBlendInTime; wallRunRight->WallRunningIntoWallrunBlendOutTime = save.WallRunRight.WallRunningIntoWallrunBlendOutTime; wallRunRight->PlayCameraHitWallEffect = save.WallRunRight.PlayCameraHitWallEffect; wallRunRight->bHasReachedWall = save.WallRunRight.bHasReachedWall; wallRunRight->bStartMovingIntoWall = save.WallRunRight.bStartMovingIntoWall; wallRunRight->bTurned90FromWall = save.WallRunRight.bTurned90FromWall; wallRunRight->bChangedConstraints = save.WallRunRight.bChangedConstraints; wallRunRight->WallRunningDelayPawnRotationTime = save.WallRunRight.WallRunningDelayPawnRotationTime; wallRunRight->WallRunningDistanceForIntoWall = save.WallRunRight.WallRunningDistanceForIntoWall; wallRunRight->WallRunningRotatePawnAlongWallTime = save.WallRunRight.WallRunningRotatePawnAlongWallTime; wallRunRight->WallRunningMoveToIntoPositionDegreeThreshold = save.WallRunRight.WallRunningMoveToIntoPositionDegreeThreshold; wallRunRight->MinimumVelocityIntoWall = save.WallRunRight.MinimumVelocityIntoWall; wallRunRight->MaximumVelocityIntoWall = save.WallRunRight.MaximumVelocityIntoWall; wallRunRight->WallrunStartUpperBodyAnimPlayRate = save.WallRunRight.WallrunStartUpperBodyAnimPlayRate; wallRunRight->LookAlongWallInterpolationTime = save.WallRunRight.LookAlongWallInterpolationTime; wallRunRight->WallRunningBeginSpeed = save.WallRunRight.WallRunningBeginSpeed; wallRunRight->NextMove = save.WallRunRight.NextMove; wallRunRight->WallNormal = save.WallRunRight.WallNormal; wallRunRight->PredictedWallHitLocation = save.WallRunRight.PredictedWallHitLocation; wallRunRight->IntoWallrunLocationTarget = save.WallRunRight.IntoWallrunLocationTarget; wallRunRight->ConsequtiveWallruns = save.WallRunRight.ConsequtiveWallruns; wallRunRight->MinContraintWorld = save.WallRunRight.MinContraintWorld; wallRunRight->MaxContraintWorld = save.WallRunRight.MaxContraintWorld;
	}

	auto wallRunLeft = static_cast<Classes::UTdMove_WallRun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunningLeft)]);
	if (wallRunLeft) {
		wallRunLeft->SpeedModifier = save.WallRunLeft.SpeedModifier; wallRunLeft->FrictionModifier = save.WallRunLeft.FrictionModifier; wallRunLeft->bDebugMove = save.WallRunLeft.bDebugMove; wallRunLeft->bTriggersCompliment = save.WallRunLeft.bTriggersCompliment; wallRunLeft->bDisableCollision = save.WallRunLeft.bDisableCollision; wallRunLeft->bShouldHolsterWeapon = save.WallRunLeft.bShouldHolsterWeapon; wallRunLeft->bShouldUnzoom = save.WallRunLeft.bShouldUnzoom; wallRunLeft->bIsTimedMove = save.WallRunLeft.bIsTimedMove; wallRunLeft->bConstrainLook = save.WallRunLeft.bConstrainLook; wallRunLeft->bUseAbsoluteYawConstraint = save.WallRunLeft.bUseAbsoluteYawConstraint; wallRunLeft->bDisableActorCollision = save.WallRunLeft.bDisableActorCollision; wallRunLeft->bLookAtTargetLocation = save.WallRunLeft.bLookAtTargetLocation; wallRunLeft->bLookAtTargetAngle = save.WallRunLeft.bLookAtTargetAngle; wallRunLeft->bDisableFaceRotation = save.WallRunLeft.bDisableFaceRotation; wallRunLeft->bDisableControllerFacingPawnYawRotation = save.WallRunLeft.bDisableControllerFacingPawnYawRotation; wallRunLeft->bAvoidLedges = save.WallRunLeft.bAvoidLedges; wallRunLeft->bUsePreciseLocation = save.WallRunLeft.bUsePreciseLocation; wallRunLeft->bReachedPreciseLocation = save.WallRunLeft.bReachedPreciseLocation; wallRunLeft->bDebugPreciseLocation = save.WallRunLeft.bDebugPreciseLocation; wallRunLeft->bUsePreciseRotation = save.WallRunLeft.bUsePreciseRotation; wallRunLeft->bReachedPreciseRotation = save.WallRunLeft.bReachedPreciseRotation; wallRunLeft->bDelayRotationAndLocationCallback = save.WallRunLeft.bDelayRotationAndLocationCallback; wallRunLeft->bResetCameraLook = save.WallRunLeft.bResetCameraLook; wallRunLeft->bUseCustomCollision = save.WallRunLeft.bUseCustomCollision; wallRunLeft->bUseCameraCollision = save.WallRunLeft.bUseCameraCollision; wallRunLeft->bTwoHandedFullBodyAnimations = save.WallRunLeft.bTwoHandedFullBodyAnimations; wallRunLeft->bStickyAim = save.WallRunLeft.bStickyAim; wallRunLeft->bStopAfterMove = save.WallRunLeft.bStopAfterMove; wallRunLeft->bEnableFootPlacement = save.WallRunLeft.bEnableFootPlacement; wallRunLeft->bEnableAgainstWall = save.WallRunLeft.bEnableAgainstWall; wallRunLeft->bAllowPickup = save.WallRunLeft.bAllowPickup; wallRunLeft->AiAimPenalty = save.WallRunLeft.AiAimPenalty; wallRunLeft->AiAimOneShotPenalty = save.WallRunLeft.AiAimOneShotPenalty; wallRunLeft->MovementGroup = save.WallRunLeft.MovementGroup; wallRunLeft->FirstPersonDPG = save.WallRunLeft.FirstPersonDPG; wallRunLeft->FirstPersonLowerBodyDPG = save.WallRunLeft.FirstPersonLowerBodyDPG; wallRunLeft->PreciseLocationInterpMode = save.WallRunLeft.PreciseLocationInterpMode; wallRunLeft->AimMode = save.WallRunLeft.AimMode; wallRunLeft->DisableMovementTime = save.WallRunLeft.DisableMovementTime; wallRunLeft->DisableLookTime = save.WallRunLeft.DisableLookTime; wallRunLeft->LastCanDoMoveTime = save.WallRunLeft.LastCanDoMoveTime; wallRunLeft->LastStopMoveTime = save.WallRunLeft.LastStopMoveTime; wallRunLeft->MoveActiveTime = save.WallRunLeft.MoveActiveTime; wallRunLeft->RedoMoveTime = save.WallRunLeft.RedoMoveTime; wallRunLeft->PreciseLocationSpeed = save.WallRunLeft.PreciseLocationSpeed; wallRunLeft->PreciseLocation = save.WallRunLeft.PreciseLocation; wallRunLeft->PreciseRotationInterpolationTime = save.WallRunLeft.PreciseRotationInterpolationTime; wallRunLeft->PreciseRotation = save.WallRunLeft.PreciseRotation; wallRunLeft->LookAtTargetLocation = save.WallRunLeft.LookAtTargetLocation; wallRunLeft->LookAtTargetAngle = save.WallRunLeft.LookAtTargetAngle; wallRunLeft->LookAtTargetInterpolationTime = save.WallRunLeft.LookAtTargetInterpolationTime; wallRunLeft->LookAtTargetDuration = save.WallRunLeft.LookAtTargetDuration; wallRunLeft->CancelResetCameraLookTime = save.WallRunLeft.CancelResetCameraLookTime; wallRunLeft->ResetCameraLookTime = save.WallRunLeft.ResetCameraLookTime; wallRunLeft->MinLookConstraint = save.WallRunLeft.MinLookConstraint; wallRunLeft->MaxLookConstraint = save.WallRunLeft.MaxLookConstraint; wallRunLeft->CustomCollisionRadius = save.WallRunLeft.CustomCollisionRadius; wallRunLeft->CustomCollisionHeight = save.WallRunLeft.CustomCollisionHeight; wallRunLeft->WeaponInactivePitchAimingLimit = save.WallRunLeft.WeaponInactivePitchAimingLimit; wallRunLeft->RootMotionScale = save.WallRunLeft.RootMotionScale; wallRunLeft->RootOffset = save.WallRunLeft.RootOffset; wallRunLeft->SwanNeckEnableAtPitch = save.WallRunLeft.SwanNeckEnableAtPitch; wallRunLeft->SwanNeckForward = save.WallRunLeft.SwanNeckForward; wallRunLeft->SwanNeckDown = save.WallRunLeft.SwanNeckDown; wallRunLeft->AnimBlendTime = save.WallRunLeft.AnimBlendTime; wallRunLeft->StickyAngle = save.WallRunLeft.StickyAngle; wallRunLeft->StickyAimedModifier = save.WallRunLeft.StickyAimedModifier; wallRunLeft->Timer = save.WallRunLeft.Timer; wallRunLeft->PawnPhysics = save.WallRunLeft.PawnPhysics; wallRunLeft->HandPlantExtentCheckHeight = save.WallRunLeft.HandPlantExtentCheckHeight; wallRunLeft->HandPlantExtentCheckWidth = save.WallRunLeft.HandPlantExtentCheckWidth; wallRunLeft->HandPlantCheckDistance = save.WallRunLeft.HandPlantCheckDistance; wallRunLeft->HandPlantCheckHeight = save.WallRunLeft.HandPlantCheckHeight; wallRunLeft->ContextMoveDistanceMultiplier = save.WallRunLeft.ContextMoveDistanceMultiplier; wallRunLeft->bCheckForGrab = save.WallRunLeft.bCheckForGrab; wallRunLeft->bCheckForVaultOver = save.WallRunLeft.bCheckForVaultOver; wallRunLeft->bCheckForWallClimb = save.WallRunLeft.bCheckForWallClimb; wallRunLeft->bCheckForEdgeInVelDir = save.WallRunLeft.bCheckForEdgeInVelDir; wallRunLeft->bCheckExitToFalling = save.WallRunLeft.bCheckExitToFalling; wallRunLeft->bCheckExitToUncontrolledFalling = save.WallRunLeft.bCheckExitToUncontrolledFalling; wallRunLeft->bCheckForSoftLanding = save.WallRunLeft.bCheckForSoftLanding; wallRunLeft->bDelayTimeCheckAutoMoves = save.WallRunLeft.bDelayTimeCheckAutoMoves; wallRunLeft->ExitToFallingZSpeed = save.WallRunLeft.ExitToFallingZSpeed; wallRunLeft->SoftLandingZSpeedThreshold = save.WallRunLeft.SoftLandingZSpeedThreshold; wallRunLeft->TimeToSoftLandingThreshold = save.WallRunLeft.TimeToSoftLandingThreshold; wallRunLeft->WallRunningForwardCheckDistance = save.WallRunLeft.WallRunningForwardCheckDistance; wallRunLeft->WallRunningStrafeCheckDistance = save.WallRunLeft.WallRunningStrafeCheckDistance; wallRunLeft->WallRunningVerticalCheckDistance = save.WallRunLeft.WallRunningVerticalCheckDistance; wallRunLeft->WallRunningMinWallHeight = save.WallRunLeft.WallRunningMinWallHeight; wallRunLeft->WallRunningMinSpeed = save.WallRunLeft.WallRunningMinSpeed; wallRunLeft->WallRunningVelocityStartLimit = save.WallRunLeft.WallRunningVelocityStartLimit; wallRunLeft->WallRunningVelocityStopLimit = save.WallRunLeft.WallRunningVelocityStopLimit; wallRunLeft->WallRunningForwardMinStartAngle = save.WallRunLeft.WallRunningForwardMinStartAngle; wallRunLeft->WallRunningForwardMaxStartAngle = save.WallRunLeft.WallRunningForwardMaxStartAngle; wallRunLeft->WallRunningStrafeStartAngle = save.WallRunLeft.WallRunningStrafeStartAngle; wallRunLeft->WallRunningHorisontalFriction = save.WallRunLeft.WallRunningHorisontalFriction; wallRunLeft->WallRunningHorisontalInitialZHeight = save.WallRunLeft.WallRunningHorisontalInitialZHeight; wallRunLeft->WallRunningHorisontalAcceleration = save.WallRunLeft.WallRunningHorisontalAcceleration; wallRunLeft->WallRunningHorisontalDeceleration = save.WallRunLeft.WallRunningHorisontalDeceleration; wallRunLeft->WallRunningHorisontalAlignSpeed = save.WallRunLeft.WallRunningHorisontalAlignSpeed; wallRunLeft->WallRunningIntoWallrunBlendInTime = save.WallRunLeft.WallRunningIntoWallrunBlendInTime; wallRunLeft->WallRunningIntoWallrunBlendOutTime = save.WallRunLeft.WallRunningIntoWallrunBlendOutTime; wallRunLeft->PlayCameraHitWallEffect = save.WallRunLeft.PlayCameraHitWallEffect; wallRunLeft->bHasReachedWall = save.WallRunLeft.bHasReachedWall; wallRunLeft->bStartMovingIntoWall = save.WallRunLeft.bStartMovingIntoWall; wallRunLeft->bTurned90FromWall = save.WallRunLeft.bTurned90FromWall; wallRunLeft->bChangedConstraints = save.WallRunLeft.bChangedConstraints; wallRunLeft->WallRunningDelayPawnRotationTime = save.WallRunLeft.WallRunningDelayPawnRotationTime; wallRunLeft->WallRunningDistanceForIntoWall = save.WallRunLeft.WallRunningDistanceForIntoWall; wallRunLeft->WallRunningRotatePawnAlongWallTime = save.WallRunLeft.WallRunningRotatePawnAlongWallTime; wallRunLeft->WallRunningMoveToIntoPositionDegreeThreshold = save.WallRunLeft.WallRunningMoveToIntoPositionDegreeThreshold; wallRunLeft->MinimumVelocityIntoWall = save.WallRunLeft.MinimumVelocityIntoWall; wallRunLeft->MaximumVelocityIntoWall = save.WallRunLeft.MaximumVelocityIntoWall; wallRunLeft->WallrunStartUpperBodyAnimPlayRate = save.WallRunLeft.WallrunStartUpperBodyAnimPlayRate; wallRunLeft->LookAlongWallInterpolationTime = save.WallRunLeft.LookAlongWallInterpolationTime; wallRunLeft->WallRunningBeginSpeed = save.WallRunLeft.WallRunningBeginSpeed; wallRunLeft->NextMove = save.WallRunLeft.NextMove; wallRunLeft->WallNormal = save.WallRunLeft.WallNormal; wallRunLeft->PredictedWallHitLocation = save.WallRunLeft.PredictedWallHitLocation; wallRunLeft->IntoWallrunLocationTarget = save.WallRunLeft.IntoWallrunLocationTarget; wallRunLeft->ConsequtiveWallruns = save.WallRunLeft.ConsequtiveWallruns; wallRunLeft->MinContraintWorld = save.WallRunLeft.MinContraintWorld; wallRunLeft->MaxContraintWorld = save.WallRunLeft.MaxContraintWorld;
	}

	auto wallClimbing = static_cast<Classes::UTdMove_WallClimb *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallClimbing)]);
	if (wallClimbing) {
		wallClimbing->SpeedModifier = save.WallClimbing.SpeedModifier; wallClimbing->FrictionModifier = save.WallClimbing.FrictionModifier; wallClimbing->bDebugMove = save.WallClimbing.bDebugMove; wallClimbing->bTriggersCompliment = save.WallClimbing.bTriggersCompliment; wallClimbing->bDisableCollision = save.WallClimbing.bDisableCollision; wallClimbing->bShouldHolsterWeapon = save.WallClimbing.bShouldHolsterWeapon; wallClimbing->bShouldUnzoom = save.WallClimbing.bShouldUnzoom; wallClimbing->bIsTimedMove = save.WallClimbing.bIsTimedMove; wallClimbing->bConstrainLook = save.WallClimbing.bConstrainLook; wallClimbing->bUseAbsoluteYawConstraint = save.WallClimbing.bUseAbsoluteYawConstraint; wallClimbing->bDisableActorCollision = save.WallClimbing.bDisableActorCollision; wallClimbing->bLookAtTargetLocation = save.WallClimbing.bLookAtTargetLocation; wallClimbing->bLookAtTargetAngle = save.WallClimbing.bLookAtTargetAngle; wallClimbing->bDisableFaceRotation = save.WallClimbing.bDisableFaceRotation; wallClimbing->bDisableControllerFacingPawnYawRotation = save.WallClimbing.bDisableControllerFacingPawnYawRotation; wallClimbing->bAvoidLedges = save.WallClimbing.bAvoidLedges; wallClimbing->bUsePreciseLocation = save.WallClimbing.bUsePreciseLocation; wallClimbing->bReachedPreciseLocation = save.WallClimbing.bReachedPreciseLocation; wallClimbing->bDebugPreciseLocation = save.WallClimbing.bDebugPreciseLocation; wallClimbing->bUsePreciseRotation = save.WallClimbing.bUsePreciseRotation; wallClimbing->bReachedPreciseRotation = save.WallClimbing.bReachedPreciseRotation; wallClimbing->bDelayRotationAndLocationCallback = save.WallClimbing.bDelayRotationAndLocationCallback; wallClimbing->bResetCameraLook = save.WallClimbing.bResetCameraLook; wallClimbing->bUseCustomCollision = save.WallClimbing.bUseCustomCollision; wallClimbing->bUseCameraCollision = save.WallClimbing.bUseCameraCollision; wallClimbing->bTwoHandedFullBodyAnimations = save.WallClimbing.bTwoHandedFullBodyAnimations; wallClimbing->bStickyAim = save.WallClimbing.bStickyAim; wallClimbing->bStopAfterMove = save.WallClimbing.bStopAfterMove; wallClimbing->bEnableFootPlacement = save.WallClimbing.bEnableFootPlacement; wallClimbing->bEnableAgainstWall = save.WallClimbing.bEnableAgainstWall; wallClimbing->bAllowPickup = save.WallClimbing.bAllowPickup; wallClimbing->AiAimPenalty = save.WallClimbing.AiAimPenalty; wallClimbing->AiAimOneShotPenalty = save.WallClimbing.AiAimOneShotPenalty; wallClimbing->MovementGroup = save.WallClimbing.MovementGroup; wallClimbing->FirstPersonDPG = save.WallClimbing.FirstPersonDPG; wallClimbing->FirstPersonLowerBodyDPG = save.WallClimbing.FirstPersonLowerBodyDPG; wallClimbing->PreciseLocationInterpMode = save.WallClimbing.PreciseLocationInterpMode; wallClimbing->AimMode = save.WallClimbing.AimMode; wallClimbing->DisableMovementTime = save.WallClimbing.DisableMovementTime; wallClimbing->DisableLookTime = save.WallClimbing.DisableLookTime; wallClimbing->LastCanDoMoveTime = save.WallClimbing.LastCanDoMoveTime; wallClimbing->LastStopMoveTime = save.WallClimbing.LastStopMoveTime; wallClimbing->MoveActiveTime = save.WallClimbing.MoveActiveTime; wallClimbing->RedoMoveTime = save.WallClimbing.RedoMoveTime; wallClimbing->PreciseLocationSpeed = save.WallClimbing.PreciseLocationSpeed; wallClimbing->PreciseLocation = save.WallClimbing.PreciseLocation; wallClimbing->PreciseRotationInterpolationTime = save.WallClimbing.PreciseRotationInterpolationTime; wallClimbing->PreciseRotation = save.WallClimbing.PreciseRotation; wallClimbing->LookAtTargetLocation = save.WallClimbing.LookAtTargetLocation; wallClimbing->LookAtTargetAngle = save.WallClimbing.LookAtTargetAngle; wallClimbing->LookAtTargetInterpolationTime = save.WallClimbing.LookAtTargetInterpolationTime; wallClimbing->LookAtTargetDuration = save.WallClimbing.LookAtTargetDuration; wallClimbing->CancelResetCameraLookTime = save.WallClimbing.CancelResetCameraLookTime; wallClimbing->ResetCameraLookTime = save.WallClimbing.ResetCameraLookTime; wallClimbing->MinLookConstraint = save.WallClimbing.MinLookConstraint; wallClimbing->MaxLookConstraint = save.WallClimbing.MaxLookConstraint; wallClimbing->CustomCollisionRadius = save.WallClimbing.CustomCollisionRadius; wallClimbing->CustomCollisionHeight = save.WallClimbing.CustomCollisionHeight; wallClimbing->WeaponInactivePitchAimingLimit = save.WallClimbing.WeaponInactivePitchAimingLimit; wallClimbing->RootMotionScale = save.WallClimbing.RootMotionScale; wallClimbing->RootOffset = save.WallClimbing.RootOffset; wallClimbing->SwanNeckEnableAtPitch = save.WallClimbing.SwanNeckEnableAtPitch; wallClimbing->SwanNeckForward = save.WallClimbing.SwanNeckForward; wallClimbing->SwanNeckDown = save.WallClimbing.SwanNeckDown; wallClimbing->AnimBlendTime = save.WallClimbing.AnimBlendTime; wallClimbing->StickyAngle = save.WallClimbing.StickyAngle; wallClimbing->StickyAimedModifier = save.WallClimbing.StickyAimedModifier; wallClimbing->Timer = save.WallClimbing.Timer; wallClimbing->PawnPhysics = save.WallClimbing.PawnPhysics; wallClimbing->HandPlantExtentCheckHeight = save.WallClimbing.HandPlantExtentCheckHeight; wallClimbing->HandPlantExtentCheckWidth = save.WallClimbing.HandPlantExtentCheckWidth; wallClimbing->HandPlantCheckDistance = save.WallClimbing.HandPlantCheckDistance; wallClimbing->HandPlantCheckHeight = save.WallClimbing.HandPlantCheckHeight; wallClimbing->ContextMoveDistanceMultiplier = save.WallClimbing.ContextMoveDistanceMultiplier; wallClimbing->bCheckForGrab = save.WallClimbing.bCheckForGrab; wallClimbing->bCheckForVaultOver = save.WallClimbing.bCheckForVaultOver; wallClimbing->bCheckForWallClimb = save.WallClimbing.bCheckForWallClimb; wallClimbing->bCheckForEdgeInVelDir = save.WallClimbing.bCheckForEdgeInVelDir; wallClimbing->bCheckExitToFalling = save.WallClimbing.bCheckExitToFalling; wallClimbing->bCheckExitToUncontrolledFalling = save.WallClimbing.bCheckExitToUncontrolledFalling; wallClimbing->bCheckForSoftLanding = save.WallClimbing.bCheckForSoftLanding; wallClimbing->bDelayTimeCheckAutoMoves = save.WallClimbing.bDelayTimeCheckAutoMoves; wallClimbing->ExitToFallingZSpeed = save.WallClimbing.ExitToFallingZSpeed; wallClimbing->SoftLandingZSpeedThreshold = save.WallClimbing.SoftLandingZSpeedThreshold; wallClimbing->TimeToSoftLandingThreshold = save.WallClimbing.TimeToSoftLandingThreshold; wallClimbing->WallClimbingVelocityStartLimit = save.WallClimbing.WallClimbingVelocityStartLimit; wallClimbing->WallClimbingVerticalStartAngle = save.WallClimbing.WallClimbingVerticalStartAngle; wallClimbing->WallClimbingVerticalFriction = save.WallClimbing.WallClimbingVerticalFriction; wallClimbing->WallClimbingMaxDistance2D = save.WallClimbing.WallClimbingMaxDistance2D; wallClimbing->AddOnSpeed2DHeight = save.WallClimbing.AddOnSpeed2DHeight; wallClimbing->AddOnSpeed2DMaxLimit = save.WallClimbing.AddOnSpeed2DMaxLimit; wallClimbing->AddOnSpeedZHeight = save.WallClimbing.AddOnSpeedZHeight; wallClimbing->AddOnSpeedZMaxLimit = save.WallClimbing.AddOnSpeedZMaxLimit; wallClimbing->WallClimbingGravity = save.WallClimbing.WallClimbingGravity; wallClimbing->MinLegdeZNormal = save.WallClimbing.MinLegdeZNormal; wallClimbing->MinWallHeight = save.WallClimbing.MinWallHeight; wallClimbing->MinUpwardsVelocityToDoubleJump = save.WallClimbing.MinUpwardsVelocityToDoubleJump; wallClimbing->MaxIntoWallClimbVelocityToDoubleJump = save.WallClimbing.MaxIntoWallClimbVelocityToDoubleJump; wallClimbing->bHasReachedWall = save.WallClimbing.bHasReachedWall; wallClimbing->bFoundPossibleHandPlant = save.WallClimbing.bFoundPossibleHandPlant; wallClimbing->bPerformedDoubleJump = save.WallClimbing.bPerformedDoubleJump; wallClimbing->LookAtEdgeAngle = save.WallClimbing.LookAtEdgeAngle; wallClimbing->PossibleEdgeDestination = save.WallClimbing.PossibleEdgeDestination; wallClimbing->IntoWallClimbSpeed = save.WallClimbing.IntoWallClimbSpeed; wallClimbing->GroundZLoc = save.WallClimbing.GroundZLoc;
	}

	auto springBoarding = static_cast<Classes::UTdMove_SpringBoard *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_SpringBoarding)]);
	if (springBoarding) {
		springBoarding->SpeedModifier = save.SpringBoarding.SpeedModifier; springBoarding->FrictionModifier = save.SpringBoarding.FrictionModifier; springBoarding->bDebugMove = save.SpringBoarding.bDebugMove; springBoarding->bTriggersCompliment = save.SpringBoarding.bTriggersCompliment; springBoarding->bDisableCollision = save.SpringBoarding.bDisableCollision; springBoarding->bShouldHolsterWeapon = save.SpringBoarding.bShouldHolsterWeapon; springBoarding->bShouldUnzoom = save.SpringBoarding.bShouldUnzoom; springBoarding->bIsTimedMove = save.SpringBoarding.bIsTimedMove; springBoarding->bConstrainLook = save.SpringBoarding.bConstrainLook; springBoarding->bUseAbsoluteYawConstraint = save.SpringBoarding.bUseAbsoluteYawConstraint; springBoarding->bDisableActorCollision = save.SpringBoarding.bDisableActorCollision; springBoarding->bLookAtTargetLocation = save.SpringBoarding.bLookAtTargetLocation; springBoarding->bLookAtTargetAngle = save.SpringBoarding.bLookAtTargetAngle; springBoarding->bDisableFaceRotation = save.SpringBoarding.bDisableFaceRotation; springBoarding->bDisableControllerFacingPawnYawRotation = save.SpringBoarding.bDisableControllerFacingPawnYawRotation; springBoarding->bAvoidLedges = save.SpringBoarding.bAvoidLedges; springBoarding->bUsePreciseLocation = save.SpringBoarding.bUsePreciseLocation; springBoarding->bReachedPreciseLocation = save.SpringBoarding.bReachedPreciseLocation; springBoarding->bDebugPreciseLocation = save.SpringBoarding.bDebugPreciseLocation; springBoarding->bUsePreciseRotation = save.SpringBoarding.bUsePreciseRotation; springBoarding->bReachedPreciseRotation = save.SpringBoarding.bReachedPreciseRotation; springBoarding->bDelayRotationAndLocationCallback = save.SpringBoarding.bDelayRotationAndLocationCallback; springBoarding->bResetCameraLook = save.SpringBoarding.bResetCameraLook; springBoarding->bUseCustomCollision = save.SpringBoarding.bUseCustomCollision; springBoarding->bUseCameraCollision = save.SpringBoarding.bUseCameraCollision; springBoarding->bTwoHandedFullBodyAnimations = save.SpringBoarding.bTwoHandedFullBodyAnimations; springBoarding->bStickyAim = save.SpringBoarding.bStickyAim; springBoarding->bStopAfterMove = save.SpringBoarding.bStopAfterMove; springBoarding->bEnableFootPlacement = save.SpringBoarding.bEnableFootPlacement; springBoarding->bEnableAgainstWall = save.SpringBoarding.bEnableAgainstWall; springBoarding->bAllowPickup = save.SpringBoarding.bAllowPickup; springBoarding->AiAimPenalty = save.SpringBoarding.AiAimPenalty; springBoarding->AiAimOneShotPenalty = save.SpringBoarding.AiAimOneShotPenalty; springBoarding->MovementGroup = save.SpringBoarding.MovementGroup; springBoarding->FirstPersonDPG = save.SpringBoarding.FirstPersonDPG; springBoarding->FirstPersonLowerBodyDPG = save.SpringBoarding.FirstPersonLowerBodyDPG; springBoarding->PreciseLocationInterpMode = save.SpringBoarding.PreciseLocationInterpMode; springBoarding->AimMode = save.SpringBoarding.AimMode; springBoarding->DisableMovementTime = save.SpringBoarding.DisableMovementTime; springBoarding->DisableLookTime = save.SpringBoarding.DisableLookTime; springBoarding->LastCanDoMoveTime = save.SpringBoarding.LastCanDoMoveTime; springBoarding->LastStopMoveTime = save.SpringBoarding.LastStopMoveTime; springBoarding->MoveActiveTime = save.SpringBoarding.MoveActiveTime; springBoarding->RedoMoveTime = save.SpringBoarding.RedoMoveTime; springBoarding->PreciseLocationSpeed = save.SpringBoarding.PreciseLocationSpeed; springBoarding->PreciseLocation = save.SpringBoarding.PreciseLocation; springBoarding->PreciseRotationInterpolationTime = save.SpringBoarding.PreciseRotationInterpolationTime; springBoarding->PreciseRotation = save.SpringBoarding.PreciseRotation; springBoarding->LookAtTargetLocation = save.SpringBoarding.LookAtTargetLocation; springBoarding->LookAtTargetAngle = save.SpringBoarding.LookAtTargetAngle; springBoarding->LookAtTargetInterpolationTime = save.SpringBoarding.LookAtTargetInterpolationTime; springBoarding->LookAtTargetDuration = save.SpringBoarding.LookAtTargetDuration; springBoarding->CancelResetCameraLookTime = save.SpringBoarding.CancelResetCameraLookTime; springBoarding->ResetCameraLookTime = save.SpringBoarding.ResetCameraLookTime; springBoarding->MinLookConstraint = save.SpringBoarding.MinLookConstraint; springBoarding->MaxLookConstraint = save.SpringBoarding.MaxLookConstraint; springBoarding->CustomCollisionRadius = save.SpringBoarding.CustomCollisionRadius; springBoarding->CustomCollisionHeight = save.SpringBoarding.CustomCollisionHeight; springBoarding->WeaponInactivePitchAimingLimit = save.SpringBoarding.WeaponInactivePitchAimingLimit; springBoarding->RootMotionScale = save.SpringBoarding.RootMotionScale; springBoarding->RootOffset = save.SpringBoarding.RootOffset; springBoarding->SwanNeckEnableAtPitch = save.SpringBoarding.SwanNeckEnableAtPitch; springBoarding->SwanNeckForward = save.SpringBoarding.SwanNeckForward; springBoarding->SwanNeckDown = save.SpringBoarding.SwanNeckDown; springBoarding->AnimBlendTime = save.SpringBoarding.AnimBlendTime; springBoarding->StickyAngle = save.SpringBoarding.StickyAngle; springBoarding->StickyAimedModifier = save.SpringBoarding.StickyAimedModifier; springBoarding->Timer = save.SpringBoarding.Timer; springBoarding->PawnPhysics = save.SpringBoarding.PawnPhysics; springBoarding->HandPlantExtentCheckHeight = save.SpringBoarding.HandPlantExtentCheckHeight; springBoarding->HandPlantExtentCheckWidth = save.SpringBoarding.HandPlantExtentCheckWidth; springBoarding->HandPlantCheckDistance = save.SpringBoarding.HandPlantCheckDistance; springBoarding->HandPlantCheckHeight = save.SpringBoarding.HandPlantCheckHeight; springBoarding->ContextMoveDistanceMultiplier = save.SpringBoarding.ContextMoveDistanceMultiplier; springBoarding->bCheckForGrab = save.SpringBoarding.bCheckForGrab; springBoarding->bCheckForVaultOver = save.SpringBoarding.bCheckForVaultOver; springBoarding->bCheckForWallClimb = save.SpringBoarding.bCheckForWallClimb; springBoarding->bCheckForEdgeInVelDir = save.SpringBoarding.bCheckForEdgeInVelDir; springBoarding->bCheckExitToFalling = save.SpringBoarding.bCheckExitToFalling; springBoarding->bCheckExitToUncontrolledFalling = save.SpringBoarding.bCheckExitToUncontrolledFalling; springBoarding->bCheckForSoftLanding = save.SpringBoarding.bCheckForSoftLanding; springBoarding->bDelayTimeCheckAutoMoves = save.SpringBoarding.bDelayTimeCheckAutoMoves; springBoarding->ExitToFallingZSpeed = save.SpringBoarding.ExitToFallingZSpeed; springBoarding->SoftLandingZSpeedThreshold = save.SpringBoarding.SoftLandingZSpeedThreshold; springBoarding->TimeToSoftLandingThreshold = save.SpringBoarding.TimeToSoftLandingThreshold; springBoarding->SpringBoardMaxHeight = save.SpringBoarding.SpringBoardMaxHeight; springBoarding->SpringBoardMinHeight = save.SpringBoarding.SpringBoardMinHeight; springBoarding->SpringBoardJumpZ = save.SpringBoarding.SpringBoardJumpZ; springBoarding->SpringBoardJumpXYAdd = save.SpringBoarding.SpringBoardJumpXYAdd; springBoarding->SpringBoardJumpXYMin = save.SpringBoarding.SpringBoardJumpXYMin; springBoarding->IntermediateFootPlantHeight = save.SpringBoarding.IntermediateFootPlantHeight; springBoarding->IntermediateFootPlantDistance = save.SpringBoarding.IntermediateFootPlantDistance; springBoarding->CheckDistanceTime = save.SpringBoarding.CheckDistanceTime; springBoarding->IntermediateFootPlantLedgeLocation = save.SpringBoarding.IntermediateFootPlantLedgeLocation; springBoarding->SpringBoardFootPlantLedgeLocation = save.SpringBoarding.SpringBoardFootPlantLedgeLocation; springBoarding->StepTime1 = save.SpringBoarding.StepTime1; springBoarding->StepTime2 = save.SpringBoarding.StepTime2; springBoarding->SpringBoardState = save.SpringBoarding.SpringBoardState; springBoarding->SavedInitialSpeed = save.SpringBoarding.SavedInitialSpeed;
	}

	auto jump = static_cast<Classes::UTdMove_Jump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Jump)]);
	if (jump) {
		jump->SpeedModifier = save.Jump.SpeedModifier; jump->FrictionModifier = save.Jump.FrictionModifier; jump->bDebugMove = save.Jump.bDebugMove; jump->bTriggersCompliment = save.Jump.bTriggersCompliment; jump->bDisableCollision = save.Jump.bDisableCollision; jump->bShouldHolsterWeapon = save.Jump.bShouldHolsterWeapon; jump->bShouldUnzoom = save.Jump.bShouldUnzoom; jump->bIsTimedMove = save.Jump.bIsTimedMove; jump->bConstrainLook = save.Jump.bConstrainLook; jump->bUseAbsoluteYawConstraint = save.Jump.bUseAbsoluteYawConstraint; jump->bDisableActorCollision = save.Jump.bDisableActorCollision; jump->bLookAtTargetLocation = save.Jump.bLookAtTargetLocation; jump->bLookAtTargetAngle = save.Jump.bLookAtTargetAngle; jump->bDisableFaceRotation = save.Jump.bDisableFaceRotation; jump->bDisableControllerFacingPawnYawRotation = save.Jump.bDisableControllerFacingPawnYawRotation; jump->bAvoidLedges = save.Jump.bAvoidLedges; jump->bUsePreciseLocation = save.Jump.bUsePreciseLocation; jump->bReachedPreciseLocation = save.Jump.bReachedPreciseLocation; jump->bDebugPreciseLocation = save.Jump.bDebugPreciseLocation; jump->bUsePreciseRotation = save.Jump.bUsePreciseRotation; jump->bReachedPreciseRotation = save.Jump.bReachedPreciseRotation; jump->bDelayRotationAndLocationCallback = save.Jump.bDelayRotationAndLocationCallback; jump->bResetCameraLook = save.Jump.bResetCameraLook; jump->bUseCustomCollision = save.Jump.bUseCustomCollision; jump->bUseCameraCollision = save.Jump.bUseCameraCollision; jump->bTwoHandedFullBodyAnimations = save.Jump.bTwoHandedFullBodyAnimations; jump->bStickyAim = save.Jump.bStickyAim; jump->bStopAfterMove = save.Jump.bStopAfterMove; jump->bEnableFootPlacement = save.Jump.bEnableFootPlacement; jump->bEnableAgainstWall = save.Jump.bEnableAgainstWall; jump->bAllowPickup = save.Jump.bAllowPickup; jump->AiAimPenalty = save.Jump.AiAimPenalty; jump->AiAimOneShotPenalty = save.Jump.AiAimOneShotPenalty; jump->MovementGroup = save.Jump.MovementGroup; jump->FirstPersonDPG = save.Jump.FirstPersonDPG; jump->FirstPersonLowerBodyDPG = save.Jump.FirstPersonLowerBodyDPG; jump->PreciseLocationInterpMode = save.Jump.PreciseLocationInterpMode; jump->AimMode = save.Jump.AimMode; jump->DisableMovementTime = save.Jump.DisableMovementTime; jump->DisableLookTime = save.Jump.DisableLookTime; jump->LastCanDoMoveTime = save.Jump.LastCanDoMoveTime; jump->LastStopMoveTime = save.Jump.LastStopMoveTime; jump->MoveActiveTime = save.Jump.MoveActiveTime; jump->RedoMoveTime = save.Jump.RedoMoveTime; jump->PreciseLocationSpeed = save.Jump.PreciseLocationSpeed; jump->PreciseLocation = save.Jump.PreciseLocation; jump->PreciseRotationInterpolationTime = save.Jump.PreciseRotationInterpolationTime; jump->PreciseRotation = save.Jump.PreciseRotation; jump->LookAtTargetLocation = save.Jump.LookAtTargetLocation; jump->LookAtTargetAngle = save.Jump.LookAtTargetAngle; jump->LookAtTargetInterpolationTime = save.Jump.LookAtTargetInterpolationTime; jump->LookAtTargetDuration = save.Jump.LookAtTargetDuration; jump->CancelResetCameraLookTime = save.Jump.CancelResetCameraLookTime; jump->ResetCameraLookTime = save.Jump.ResetCameraLookTime; jump->MinLookConstraint = save.Jump.MinLookConstraint; jump->MaxLookConstraint = save.Jump.MaxLookConstraint; jump->CustomCollisionRadius = save.Jump.CustomCollisionRadius; jump->CustomCollisionHeight = save.Jump.CustomCollisionHeight; jump->WeaponInactivePitchAimingLimit = save.Jump.WeaponInactivePitchAimingLimit; jump->RootMotionScale = save.Jump.RootMotionScale; jump->RootOffset = save.Jump.RootOffset; jump->SwanNeckEnableAtPitch = save.Jump.SwanNeckEnableAtPitch; jump->SwanNeckForward = save.Jump.SwanNeckForward; jump->SwanNeckDown = save.Jump.SwanNeckDown; jump->AnimBlendTime = save.Jump.AnimBlendTime; jump->StickyAngle = save.Jump.StickyAngle; jump->StickyAimedModifier = save.Jump.StickyAimedModifier; jump->Timer = save.Jump.Timer; jump->PawnPhysics = save.Jump.PawnPhysics; jump->HandPlantExtentCheckHeight = save.Jump.HandPlantExtentCheckHeight; jump->HandPlantExtentCheckWidth = save.Jump.HandPlantExtentCheckWidth; jump->HandPlantCheckDistance = save.Jump.HandPlantCheckDistance; jump->HandPlantCheckHeight = save.Jump.HandPlantCheckHeight; jump->ContextMoveDistanceMultiplier = save.Jump.ContextMoveDistanceMultiplier; jump->bCheckForGrab = save.Jump.bCheckForGrab; jump->bCheckForVaultOver = save.Jump.bCheckForVaultOver; jump->bCheckForWallClimb = save.Jump.bCheckForWallClimb; jump->bCheckForEdgeInVelDir = save.Jump.bCheckForEdgeInVelDir; jump->bCheckExitToFalling = save.Jump.bCheckExitToFalling; jump->bCheckExitToUncontrolledFalling = save.Jump.bCheckExitToUncontrolledFalling; jump->bCheckForSoftLanding = save.Jump.bCheckForSoftLanding; jump->bDelayTimeCheckAutoMoves = save.Jump.bDelayTimeCheckAutoMoves; jump->ExitToFallingZSpeed = save.Jump.ExitToFallingZSpeed; jump->SoftLandingZSpeedThreshold = save.Jump.SoftLandingZSpeedThreshold; jump->TimeToSoftLandingThreshold = save.Jump.TimeToSoftLandingThreshold; jump->BaseJumpZ = save.Jump.BaseJumpZ; jump->BaseJumpZHeavy = save.Jump.BaseJumpZHeavy; jump->JumpAddXY = save.Jump.JumpAddXY; jump->LongJumpSlowThreshold = save.Jump.LongJumpSlowThreshold; jump->LongJumpNormalThreshold = save.Jump.LongJumpNormalThreshold; jump->LongJumpFastThreshold = save.Jump.LongJumpFastThreshold; jump->JumpBlendInTime = save.Jump.JumpBlendInTime; jump->JumpBlendOutTime = save.Jump.JumpBlendOutTime; jump->JumpStillBlendOutTime = save.Jump.JumpStillBlendOutTime; jump->PreJumpMomentum = save.Jump.PreJumpMomentum; jump->WantedJumpVelocity = save.Jump.WantedJumpVelocity; jump->CanDoMoveTaserLimit = save.Jump.CanDoMoveTaserLimit;
	}

	auto wallRunJump = static_cast<Classes::UTdMove_WallrunJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallRunJump)]);
	if (wallRunJump) {
		wallRunJump->SpeedModifier = save.WallRunJump.SpeedModifier; wallRunJump->FrictionModifier = save.WallRunJump.FrictionModifier; wallRunJump->bDebugMove = save.WallRunJump.bDebugMove; wallRunJump->bTriggersCompliment = save.WallRunJump.bTriggersCompliment; wallRunJump->bDisableCollision = save.WallRunJump.bDisableCollision; wallRunJump->bShouldHolsterWeapon = save.WallRunJump.bShouldHolsterWeapon; wallRunJump->bShouldUnzoom = save.WallRunJump.bShouldUnzoom; wallRunJump->bIsTimedMove = save.WallRunJump.bIsTimedMove; wallRunJump->bConstrainLook = save.WallRunJump.bConstrainLook; wallRunJump->bUseAbsoluteYawConstraint = save.WallRunJump.bUseAbsoluteYawConstraint; wallRunJump->bDisableActorCollision = save.WallRunJump.bDisableActorCollision; wallRunJump->bLookAtTargetLocation = save.WallRunJump.bLookAtTargetLocation; wallRunJump->bLookAtTargetAngle = save.WallRunJump.bLookAtTargetAngle; wallRunJump->bDisableFaceRotation = save.WallRunJump.bDisableFaceRotation; wallRunJump->bDisableControllerFacingPawnYawRotation = save.WallRunJump.bDisableControllerFacingPawnYawRotation; wallRunJump->bAvoidLedges = save.WallRunJump.bAvoidLedges; wallRunJump->bUsePreciseLocation = save.WallRunJump.bUsePreciseLocation; wallRunJump->bReachedPreciseLocation = save.WallRunJump.bReachedPreciseLocation; wallRunJump->bDebugPreciseLocation = save.WallRunJump.bDebugPreciseLocation; wallRunJump->bUsePreciseRotation = save.WallRunJump.bUsePreciseRotation; wallRunJump->bReachedPreciseRotation = save.WallRunJump.bReachedPreciseRotation; wallRunJump->bDelayRotationAndLocationCallback = save.WallRunJump.bDelayRotationAndLocationCallback; wallRunJump->bResetCameraLook = save.WallRunJump.bResetCameraLook; wallRunJump->bUseCustomCollision = save.WallRunJump.bUseCustomCollision; wallRunJump->bUseCameraCollision = save.WallRunJump.bUseCameraCollision; wallRunJump->bTwoHandedFullBodyAnimations = save.WallRunJump.bTwoHandedFullBodyAnimations; wallRunJump->bStickyAim = save.WallRunJump.bStickyAim; wallRunJump->bStopAfterMove = save.WallRunJump.bStopAfterMove; wallRunJump->bEnableFootPlacement = save.WallRunJump.bEnableFootPlacement; wallRunJump->bEnableAgainstWall = save.WallRunJump.bEnableAgainstWall; wallRunJump->bAllowPickup = save.WallRunJump.bAllowPickup; wallRunJump->AiAimPenalty = save.WallRunJump.AiAimPenalty; wallRunJump->AiAimOneShotPenalty = save.WallRunJump.AiAimOneShotPenalty; wallRunJump->MovementGroup = save.WallRunJump.MovementGroup; wallRunJump->FirstPersonDPG = save.WallRunJump.FirstPersonDPG; wallRunJump->FirstPersonLowerBodyDPG = save.WallRunJump.FirstPersonLowerBodyDPG; wallRunJump->PreciseLocationInterpMode = save.WallRunJump.PreciseLocationInterpMode; wallRunJump->AimMode = save.WallRunJump.AimMode; wallRunJump->DisableMovementTime = save.WallRunJump.DisableMovementTime; wallRunJump->DisableLookTime = save.WallRunJump.DisableLookTime; wallRunJump->LastCanDoMoveTime = save.WallRunJump.LastCanDoMoveTime; wallRunJump->LastStopMoveTime = save.WallRunJump.LastStopMoveTime; wallRunJump->MoveActiveTime = save.WallRunJump.MoveActiveTime; wallRunJump->RedoMoveTime = save.WallRunJump.RedoMoveTime; wallRunJump->PreciseLocationSpeed = save.WallRunJump.PreciseLocationSpeed; wallRunJump->PreciseLocation = save.WallRunJump.PreciseLocation; wallRunJump->PreciseRotationInterpolationTime = save.WallRunJump.PreciseRotationInterpolationTime; wallRunJump->PreciseRotation = save.WallRunJump.PreciseRotation; wallRunJump->LookAtTargetLocation = save.WallRunJump.LookAtTargetLocation; wallRunJump->LookAtTargetAngle = save.WallRunJump.LookAtTargetAngle; wallRunJump->LookAtTargetInterpolationTime = save.WallRunJump.LookAtTargetInterpolationTime; wallRunJump->LookAtTargetDuration = save.WallRunJump.LookAtTargetDuration; wallRunJump->CancelResetCameraLookTime = save.WallRunJump.CancelResetCameraLookTime; wallRunJump->ResetCameraLookTime = save.WallRunJump.ResetCameraLookTime; wallRunJump->MinLookConstraint = save.WallRunJump.MinLookConstraint; wallRunJump->MaxLookConstraint = save.WallRunJump.MaxLookConstraint; wallRunJump->CustomCollisionRadius = save.WallRunJump.CustomCollisionRadius; wallRunJump->CustomCollisionHeight = save.WallRunJump.CustomCollisionHeight; wallRunJump->WeaponInactivePitchAimingLimit = save.WallRunJump.WeaponInactivePitchAimingLimit; wallRunJump->RootMotionScale = save.WallRunJump.RootMotionScale; wallRunJump->RootOffset = save.WallRunJump.RootOffset; wallRunJump->SwanNeckEnableAtPitch = save.WallRunJump.SwanNeckEnableAtPitch; wallRunJump->SwanNeckForward = save.WallRunJump.SwanNeckForward; wallRunJump->SwanNeckDown = save.WallRunJump.SwanNeckDown; wallRunJump->AnimBlendTime = save.WallRunJump.AnimBlendTime; wallRunJump->StickyAngle = save.WallRunJump.StickyAngle; wallRunJump->StickyAimedModifier = save.WallRunJump.StickyAimedModifier; wallRunJump->Timer = save.WallRunJump.Timer; wallRunJump->PawnPhysics = save.WallRunJump.PawnPhysics; wallRunJump->HandPlantExtentCheckHeight = save.WallRunJump.HandPlantExtentCheckHeight; wallRunJump->HandPlantExtentCheckWidth = save.WallRunJump.HandPlantExtentCheckWidth; wallRunJump->HandPlantCheckDistance = save.WallRunJump.HandPlantCheckDistance; wallRunJump->HandPlantCheckHeight = save.WallRunJump.HandPlantCheckHeight; wallRunJump->ContextMoveDistanceMultiplier = save.WallRunJump.ContextMoveDistanceMultiplier; wallRunJump->bCheckForGrab = save.WallRunJump.bCheckForGrab; wallRunJump->bCheckForVaultOver = save.WallRunJump.bCheckForVaultOver; wallRunJump->bCheckForWallClimb = save.WallRunJump.bCheckForWallClimb; wallRunJump->bCheckForEdgeInVelDir = save.WallRunJump.bCheckForEdgeInVelDir; wallRunJump->bCheckExitToFalling = save.WallRunJump.bCheckExitToFalling; wallRunJump->bCheckExitToUncontrolledFalling = save.WallRunJump.bCheckExitToUncontrolledFalling; wallRunJump->bCheckForSoftLanding = save.WallRunJump.bCheckForSoftLanding; wallRunJump->bDelayTimeCheckAutoMoves = save.WallRunJump.bDelayTimeCheckAutoMoves; wallRunJump->ExitToFallingZSpeed = save.WallRunJump.ExitToFallingZSpeed; wallRunJump->SoftLandingZSpeedThreshold = save.WallRunJump.SoftLandingZSpeedThreshold; wallRunJump->TimeToSoftLandingThreshold = save.WallRunJump.TimeToSoftLandingThreshold; wallRunJump->WallRunningPushAwaySpeedNoob = save.WallRunJump.WallRunningPushAwaySpeedNoob; wallRunJump->WallRunningPushAwaySpeedProAdd = save.WallRunJump.WallRunningPushAwaySpeedProAdd; wallRunJump->WallRunningPushForwardSpeedMin = save.WallRunJump.WallRunningPushForwardSpeedMin; wallRunJump->WallRunningJumpOffZHeightForward = save.WallRunJump.WallRunningJumpOffZHeightForward; wallRunJump->WallRunningJumpOffZHeightMaxAddTurned = save.WallRunJump.WallRunningJumpOffZHeightMaxAddTurned; wallRunJump->WallRunningJumpOffZSpeed = save.WallRunJump.WallRunningJumpOffZSpeed; wallRunJump->MinContraintWorld = save.WallRunJump.MinContraintWorld; wallRunJump->MaxContraintWorld = save.WallRunJump.MaxContraintWorld;
	}

	auto grabJump = static_cast<Classes::UTdMove_GrabJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_GrabJump)]);
	if (grabJump) {
		grabJump->SpeedModifier = save.GrabJump.SpeedModifier; grabJump->FrictionModifier = save.GrabJump.FrictionModifier; grabJump->bDebugMove = save.GrabJump.bDebugMove; grabJump->bTriggersCompliment = save.GrabJump.bTriggersCompliment; grabJump->bDisableCollision = save.GrabJump.bDisableCollision; grabJump->bShouldHolsterWeapon = save.GrabJump.bShouldHolsterWeapon; grabJump->bShouldUnzoom = save.GrabJump.bShouldUnzoom; grabJump->bIsTimedMove = save.GrabJump.bIsTimedMove; grabJump->bConstrainLook = save.GrabJump.bConstrainLook; grabJump->bUseAbsoluteYawConstraint = save.GrabJump.bUseAbsoluteYawConstraint; grabJump->bDisableActorCollision = save.GrabJump.bDisableActorCollision; grabJump->bLookAtTargetLocation = save.GrabJump.bLookAtTargetLocation; grabJump->bLookAtTargetAngle = save.GrabJump.bLookAtTargetAngle; grabJump->bDisableFaceRotation = save.GrabJump.bDisableFaceRotation; grabJump->bDisableControllerFacingPawnYawRotation = save.GrabJump.bDisableControllerFacingPawnYawRotation; grabJump->bAvoidLedges = save.GrabJump.bAvoidLedges; grabJump->bUsePreciseLocation = save.GrabJump.bUsePreciseLocation; grabJump->bReachedPreciseLocation = save.GrabJump.bReachedPreciseLocation; grabJump->bDebugPreciseLocation = save.GrabJump.bDebugPreciseLocation; grabJump->bUsePreciseRotation = save.GrabJump.bUsePreciseRotation; grabJump->bReachedPreciseRotation = save.GrabJump.bReachedPreciseRotation; grabJump->bDelayRotationAndLocationCallback = save.GrabJump.bDelayRotationAndLocationCallback; grabJump->bResetCameraLook = save.GrabJump.bResetCameraLook; grabJump->bUseCustomCollision = save.GrabJump.bUseCustomCollision; grabJump->bUseCameraCollision = save.GrabJump.bUseCameraCollision; grabJump->bTwoHandedFullBodyAnimations = save.GrabJump.bTwoHandedFullBodyAnimations; grabJump->bStickyAim = save.GrabJump.bStickyAim; grabJump->bStopAfterMove = save.GrabJump.bStopAfterMove; grabJump->bEnableFootPlacement = save.GrabJump.bEnableFootPlacement; grabJump->bEnableAgainstWall = save.GrabJump.bEnableAgainstWall; grabJump->bAllowPickup = save.GrabJump.bAllowPickup; grabJump->AiAimPenalty = save.GrabJump.AiAimPenalty; grabJump->AiAimOneShotPenalty = save.GrabJump.AiAimOneShotPenalty; grabJump->MovementGroup = save.GrabJump.MovementGroup; grabJump->FirstPersonDPG = save.GrabJump.FirstPersonDPG; grabJump->FirstPersonLowerBodyDPG = save.GrabJump.FirstPersonLowerBodyDPG; grabJump->PreciseLocationInterpMode = save.GrabJump.PreciseLocationInterpMode; grabJump->AimMode = save.GrabJump.AimMode; grabJump->DisableMovementTime = save.GrabJump.DisableMovementTime; grabJump->DisableLookTime = save.GrabJump.DisableLookTime; grabJump->LastCanDoMoveTime = save.GrabJump.LastCanDoMoveTime; grabJump->LastStopMoveTime = save.GrabJump.LastStopMoveTime; grabJump->MoveActiveTime = save.GrabJump.MoveActiveTime; grabJump->RedoMoveTime = save.GrabJump.RedoMoveTime; grabJump->PreciseLocationSpeed = save.GrabJump.PreciseLocationSpeed; grabJump->PreciseLocation = save.GrabJump.PreciseLocation; grabJump->PreciseRotationInterpolationTime = save.GrabJump.PreciseRotationInterpolationTime; grabJump->PreciseRotation = save.GrabJump.PreciseRotation; grabJump->LookAtTargetLocation = save.GrabJump.LookAtTargetLocation; grabJump->LookAtTargetAngle = save.GrabJump.LookAtTargetAngle; grabJump->LookAtTargetInterpolationTime = save.GrabJump.LookAtTargetInterpolationTime; grabJump->LookAtTargetDuration = save.GrabJump.LookAtTargetDuration; grabJump->CancelResetCameraLookTime = save.GrabJump.CancelResetCameraLookTime; grabJump->ResetCameraLookTime = save.GrabJump.ResetCameraLookTime; grabJump->MinLookConstraint = save.GrabJump.MinLookConstraint; grabJump->MaxLookConstraint = save.GrabJump.MaxLookConstraint; grabJump->CustomCollisionRadius = save.GrabJump.CustomCollisionRadius; grabJump->CustomCollisionHeight = save.GrabJump.CustomCollisionHeight; grabJump->WeaponInactivePitchAimingLimit = save.GrabJump.WeaponInactivePitchAimingLimit; grabJump->RootMotionScale = save.GrabJump.RootMotionScale; grabJump->RootOffset = save.GrabJump.RootOffset; grabJump->SwanNeckEnableAtPitch = save.GrabJump.SwanNeckEnableAtPitch; grabJump->SwanNeckForward = save.GrabJump.SwanNeckForward; grabJump->SwanNeckDown = save.GrabJump.SwanNeckDown; grabJump->AnimBlendTime = save.GrabJump.AnimBlendTime; grabJump->StickyAngle = save.GrabJump.StickyAngle; grabJump->StickyAimedModifier = save.GrabJump.StickyAimedModifier; grabJump->Timer = save.GrabJump.Timer; grabJump->PawnPhysics = save.GrabJump.PawnPhysics; grabJump->HandPlantExtentCheckHeight = save.GrabJump.HandPlantExtentCheckHeight; grabJump->HandPlantExtentCheckWidth = save.GrabJump.HandPlantExtentCheckWidth; grabJump->HandPlantCheckDistance = save.GrabJump.HandPlantCheckDistance; grabJump->HandPlantCheckHeight = save.GrabJump.HandPlantCheckHeight; grabJump->ContextMoveDistanceMultiplier = save.GrabJump.ContextMoveDistanceMultiplier; grabJump->bCheckForGrab = save.GrabJump.bCheckForGrab; grabJump->bCheckForVaultOver = save.GrabJump.bCheckForVaultOver; grabJump->bCheckForWallClimb = save.GrabJump.bCheckForWallClimb; grabJump->bCheckForEdgeInVelDir = save.GrabJump.bCheckForEdgeInVelDir; grabJump->bCheckExitToFalling = save.GrabJump.bCheckExitToFalling; grabJump->bCheckExitToUncontrolledFalling = save.GrabJump.bCheckExitToUncontrolledFalling; grabJump->bCheckForSoftLanding = save.GrabJump.bCheckForSoftLanding; grabJump->bDelayTimeCheckAutoMoves = save.GrabJump.bDelayTimeCheckAutoMoves; grabJump->ExitToFallingZSpeed = save.GrabJump.ExitToFallingZSpeed; grabJump->SoftLandingZSpeedThreshold = save.GrabJump.SoftLandingZSpeedThreshold; grabJump->TimeToSoftLandingThreshold = save.GrabJump.TimeToSoftLandingThreshold; grabJump->GrabJumpOffZHeight = save.GrabJump.GrabJumpOffZHeight; grabJump->GrabJumpPushAwayMaxSpeed = save.GrabJump.GrabJumpPushAwayMaxSpeed; grabJump->GrabJumpPushAwayMinSpeed = save.GrabJump.GrabJumpPushAwayMinSpeed; grabJump->GrabAllowedJumpAngle = save.GrabJump.GrabAllowedJumpAngle; grabJump->JumpVelocity = save.GrabJump.JumpVelocity; grabJump->TurnedLeft = save.GrabJump.TurnedLeft; grabJump->DeltaJumpYaw = save.GrabJump.DeltaJumpYaw;
	}

	auto intoGrab = static_cast<Classes::UTdMove_IntoGrab *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_IntoGrab)]);
	if (intoGrab) {
		intoGrab->SpeedModifier = save.IntoGrab.SpeedModifier; intoGrab->FrictionModifier = save.IntoGrab.FrictionModifier; intoGrab->bDebugMove = save.IntoGrab.bDebugMove; intoGrab->bTriggersCompliment = save.IntoGrab.bTriggersCompliment; intoGrab->bDisableCollision = save.IntoGrab.bDisableCollision; intoGrab->bShouldHolsterWeapon = save.IntoGrab.bShouldHolsterWeapon; intoGrab->bShouldUnzoom = save.IntoGrab.bShouldUnzoom; intoGrab->bIsTimedMove = save.IntoGrab.bIsTimedMove; intoGrab->bConstrainLook = save.IntoGrab.bConstrainLook; intoGrab->bUseAbsoluteYawConstraint = save.IntoGrab.bUseAbsoluteYawConstraint; intoGrab->bDisableActorCollision = save.IntoGrab.bDisableActorCollision; intoGrab->bLookAtTargetLocation = save.IntoGrab.bLookAtTargetLocation; intoGrab->bLookAtTargetAngle = save.IntoGrab.bLookAtTargetAngle; intoGrab->bDisableFaceRotation = save.IntoGrab.bDisableFaceRotation; intoGrab->bDisableControllerFacingPawnYawRotation = save.IntoGrab.bDisableControllerFacingPawnYawRotation; intoGrab->bAvoidLedges = save.IntoGrab.bAvoidLedges; intoGrab->bUsePreciseLocation = save.IntoGrab.bUsePreciseLocation; intoGrab->bReachedPreciseLocation = save.IntoGrab.bReachedPreciseLocation; intoGrab->bDebugPreciseLocation = save.IntoGrab.bDebugPreciseLocation; intoGrab->bUsePreciseRotation = save.IntoGrab.bUsePreciseRotation; intoGrab->bReachedPreciseRotation = save.IntoGrab.bReachedPreciseRotation; intoGrab->bDelayRotationAndLocationCallback = save.IntoGrab.bDelayRotationAndLocationCallback; intoGrab->bResetCameraLook = save.IntoGrab.bResetCameraLook; intoGrab->bUseCustomCollision = save.IntoGrab.bUseCustomCollision; intoGrab->bUseCameraCollision = save.IntoGrab.bUseCameraCollision; intoGrab->bTwoHandedFullBodyAnimations = save.IntoGrab.bTwoHandedFullBodyAnimations; intoGrab->bStickyAim = save.IntoGrab.bStickyAim; intoGrab->bStopAfterMove = save.IntoGrab.bStopAfterMove; intoGrab->bEnableFootPlacement = save.IntoGrab.bEnableFootPlacement; intoGrab->bEnableAgainstWall = save.IntoGrab.bEnableAgainstWall; intoGrab->bAllowPickup = save.IntoGrab.bAllowPickup; intoGrab->AiAimPenalty = save.IntoGrab.AiAimPenalty; intoGrab->AiAimOneShotPenalty = save.IntoGrab.AiAimOneShotPenalty; intoGrab->MovementGroup = save.IntoGrab.MovementGroup; intoGrab->FirstPersonDPG = save.IntoGrab.FirstPersonDPG; intoGrab->FirstPersonLowerBodyDPG = save.IntoGrab.FirstPersonLowerBodyDPG; intoGrab->PreciseLocationInterpMode = save.IntoGrab.PreciseLocationInterpMode; intoGrab->AimMode = save.IntoGrab.AimMode; intoGrab->DisableMovementTime = save.IntoGrab.DisableMovementTime; intoGrab->DisableLookTime = save.IntoGrab.DisableLookTime; intoGrab->LastCanDoMoveTime = save.IntoGrab.LastCanDoMoveTime; intoGrab->LastStopMoveTime = save.IntoGrab.LastStopMoveTime; intoGrab->MoveActiveTime = save.IntoGrab.MoveActiveTime; intoGrab->RedoMoveTime = save.IntoGrab.RedoMoveTime; intoGrab->PreciseLocationSpeed = save.IntoGrab.PreciseLocationSpeed; intoGrab->PreciseLocation = save.IntoGrab.PreciseLocation; intoGrab->PreciseRotationInterpolationTime = save.IntoGrab.PreciseRotationInterpolationTime; intoGrab->PreciseRotation = save.IntoGrab.PreciseRotation; intoGrab->LookAtTargetLocation = save.IntoGrab.LookAtTargetLocation; intoGrab->LookAtTargetAngle = save.IntoGrab.LookAtTargetAngle; intoGrab->LookAtTargetInterpolationTime = save.IntoGrab.LookAtTargetInterpolationTime; intoGrab->LookAtTargetDuration = save.IntoGrab.LookAtTargetDuration; intoGrab->CancelResetCameraLookTime = save.IntoGrab.CancelResetCameraLookTime; intoGrab->ResetCameraLookTime = save.IntoGrab.ResetCameraLookTime; intoGrab->MinLookConstraint = save.IntoGrab.MinLookConstraint; intoGrab->MaxLookConstraint = save.IntoGrab.MaxLookConstraint; intoGrab->CustomCollisionRadius = save.IntoGrab.CustomCollisionRadius; intoGrab->CustomCollisionHeight = save.IntoGrab.CustomCollisionHeight; intoGrab->WeaponInactivePitchAimingLimit = save.IntoGrab.WeaponInactivePitchAimingLimit; intoGrab->RootMotionScale = save.IntoGrab.RootMotionScale; intoGrab->RootOffset = save.IntoGrab.RootOffset; intoGrab->SwanNeckEnableAtPitch = save.IntoGrab.SwanNeckEnableAtPitch; intoGrab->SwanNeckForward = save.IntoGrab.SwanNeckForward; intoGrab->SwanNeckDown = save.IntoGrab.SwanNeckDown; intoGrab->AnimBlendTime = save.IntoGrab.AnimBlendTime; intoGrab->StickyAngle = save.IntoGrab.StickyAngle; intoGrab->StickyAimedModifier = save.IntoGrab.StickyAimedModifier; intoGrab->Timer = save.IntoGrab.Timer; intoGrab->PawnPhysics = save.IntoGrab.PawnPhysics; intoGrab->HandPlantExtentCheckHeight = save.IntoGrab.HandPlantExtentCheckHeight; intoGrab->HandPlantExtentCheckWidth = save.IntoGrab.HandPlantExtentCheckWidth; intoGrab->HandPlantCheckDistance = save.IntoGrab.HandPlantCheckDistance; intoGrab->HandPlantCheckHeight = save.IntoGrab.HandPlantCheckHeight; intoGrab->ContextMoveDistanceMultiplier = save.IntoGrab.ContextMoveDistanceMultiplier; intoGrab->bCheckForGrab = save.IntoGrab.bCheckForGrab; intoGrab->bCheckForVaultOver = save.IntoGrab.bCheckForVaultOver; intoGrab->bCheckForWallClimb = save.IntoGrab.bCheckForWallClimb; intoGrab->bCheckForEdgeInVelDir = save.IntoGrab.bCheckForEdgeInVelDir; intoGrab->bCheckExitToFalling = save.IntoGrab.bCheckExitToFalling; intoGrab->bCheckExitToUncontrolledFalling = save.IntoGrab.bCheckExitToUncontrolledFalling; intoGrab->bCheckForSoftLanding = save.IntoGrab.bCheckForSoftLanding; intoGrab->bDelayTimeCheckAutoMoves = save.IntoGrab.bDelayTimeCheckAutoMoves; intoGrab->ExitToFallingZSpeed = save.IntoGrab.ExitToFallingZSpeed; intoGrab->SoftLandingZSpeedThreshold = save.IntoGrab.SoftLandingZSpeedThreshold; intoGrab->TimeToSoftLandingThreshold = save.IntoGrab.TimeToSoftLandingThreshold; intoGrab->IntoGrabMaxAngle = save.IntoGrab.IntoGrabMaxAngle; intoGrab->IntoGrabAlignSpeed = save.IntoGrab.IntoGrabAlignSpeed; intoGrab->IntoGrabMinInitialAlignSpeed = save.IntoGrab.IntoGrabMinInitialAlignSpeed; intoGrab->GrabMinGrabableZNormal = save.IntoGrab.GrabMinGrabableZNormal; intoGrab->GrabDesiredLedgeOffset = save.IntoGrab.GrabDesiredLedgeOffset; intoGrab->MinGrabLedgeAdjustDistance = save.IntoGrab.MinGrabLedgeAdjustDistance; intoGrab->IntoGrabMaxDistance = save.IntoGrab.IntoGrabMaxDistance; intoGrab->IntoGrabZVelocityThreshold = save.IntoGrab.IntoGrabZVelocityThreshold; intoGrab->IntoGrabSpeed = save.IntoGrab.IntoGrabSpeed; intoGrab->HangFoldedDownwardSpeedLimit = save.IntoGrab.HangFoldedDownwardSpeedLimit; intoGrab->HangFoldedIntoGrabZSpeedThreshold = save.IntoGrab.HangFoldedIntoGrabZSpeedThreshold; intoGrab->HangFoldedIntoGrabSpeed2DThreshold = save.IntoGrab.HangFoldedIntoGrabSpeed2DThreshold; intoGrab->HangFoldedUpperDeltaDistance = save.IntoGrab.HangFoldedUpperDeltaDistance; intoGrab->HangFoldedLowerDeltaDistance = save.IntoGrab.HangFoldedLowerDeltaDistance; intoGrab->HangFoldedMaxDistance = save.IntoGrab.HangFoldedMaxDistance; intoGrab->HangImpactMinZSpeed = save.IntoGrab.HangImpactMinZSpeed; intoGrab->HangHardImpactMinZSpeed = save.IntoGrab.HangHardImpactMinZSpeed; intoGrab->bPrepareToGrab = save.IntoGrab.bPrepareToGrab; intoGrab->bSlopedLedge = save.IntoGrab.bSlopedLedge;
	}

	auto crouch = static_cast<Classes::UTdMove_Crouch *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Crouch)]);
	if (crouch) {
		crouch->SpeedModifier = save.Crouch.SpeedModifier; crouch->FrictionModifier = save.Crouch.FrictionModifier; crouch->bDebugMove = save.Crouch.bDebugMove; crouch->bTriggersCompliment = save.Crouch.bTriggersCompliment; crouch->bDisableCollision = save.Crouch.bDisableCollision; crouch->bShouldHolsterWeapon = save.Crouch.bShouldHolsterWeapon; crouch->bShouldUnzoom = save.Crouch.bShouldUnzoom; crouch->bIsTimedMove = save.Crouch.bIsTimedMove; crouch->bConstrainLook = save.Crouch.bConstrainLook; crouch->bUseAbsoluteYawConstraint = save.Crouch.bUseAbsoluteYawConstraint; crouch->bDisableActorCollision = save.Crouch.bDisableActorCollision; crouch->bLookAtTargetLocation = save.Crouch.bLookAtTargetLocation; crouch->bLookAtTargetAngle = save.Crouch.bLookAtTargetAngle; crouch->bDisableFaceRotation = save.Crouch.bDisableFaceRotation; crouch->bDisableControllerFacingPawnYawRotation = save.Crouch.bDisableControllerFacingPawnYawRotation; crouch->bAvoidLedges = save.Crouch.bAvoidLedges; crouch->bUsePreciseLocation = save.Crouch.bUsePreciseLocation; crouch->bReachedPreciseLocation = save.Crouch.bReachedPreciseLocation; crouch->bDebugPreciseLocation = save.Crouch.bDebugPreciseLocation; crouch->bUsePreciseRotation = save.Crouch.bUsePreciseRotation; crouch->bReachedPreciseRotation = save.Crouch.bReachedPreciseRotation; crouch->bDelayRotationAndLocationCallback = save.Crouch.bDelayRotationAndLocationCallback; crouch->bResetCameraLook = save.Crouch.bResetCameraLook; crouch->bUseCustomCollision = save.Crouch.bUseCustomCollision; crouch->bUseCameraCollision = save.Crouch.bUseCameraCollision; crouch->bTwoHandedFullBodyAnimations = save.Crouch.bTwoHandedFullBodyAnimations; crouch->bStickyAim = save.Crouch.bStickyAim; crouch->bStopAfterMove = save.Crouch.bStopAfterMove; crouch->bEnableFootPlacement = save.Crouch.bEnableFootPlacement; crouch->bEnableAgainstWall = save.Crouch.bEnableAgainstWall; crouch->bAllowPickup = save.Crouch.bAllowPickup; crouch->AiAimPenalty = save.Crouch.AiAimPenalty; crouch->AiAimOneShotPenalty = save.Crouch.AiAimOneShotPenalty; crouch->MovementGroup = save.Crouch.MovementGroup; crouch->FirstPersonDPG = save.Crouch.FirstPersonDPG; crouch->FirstPersonLowerBodyDPG = save.Crouch.FirstPersonLowerBodyDPG; crouch->PreciseLocationInterpMode = save.Crouch.PreciseLocationInterpMode; crouch->AimMode = save.Crouch.AimMode; crouch->DisableMovementTime = save.Crouch.DisableMovementTime; crouch->DisableLookTime = save.Crouch.DisableLookTime; crouch->LastCanDoMoveTime = save.Crouch.LastCanDoMoveTime; crouch->LastStopMoveTime = save.Crouch.LastStopMoveTime; crouch->MoveActiveTime = save.Crouch.MoveActiveTime; crouch->RedoMoveTime = save.Crouch.RedoMoveTime; crouch->PreciseLocationSpeed = save.Crouch.PreciseLocationSpeed; crouch->PreciseLocation = save.Crouch.PreciseLocation; crouch->PreciseRotationInterpolationTime = save.Crouch.PreciseRotationInterpolationTime; crouch->PreciseRotation = save.Crouch.PreciseRotation; crouch->LookAtTargetLocation = save.Crouch.LookAtTargetLocation; crouch->LookAtTargetAngle = save.Crouch.LookAtTargetAngle; crouch->LookAtTargetInterpolationTime = save.Crouch.LookAtTargetInterpolationTime; crouch->LookAtTargetDuration = save.Crouch.LookAtTargetDuration; crouch->CancelResetCameraLookTime = save.Crouch.CancelResetCameraLookTime; crouch->ResetCameraLookTime = save.Crouch.ResetCameraLookTime; crouch->MinLookConstraint = save.Crouch.MinLookConstraint; crouch->MaxLookConstraint = save.Crouch.MaxLookConstraint; crouch->CustomCollisionRadius = save.Crouch.CustomCollisionRadius; crouch->CustomCollisionHeight = save.Crouch.CustomCollisionHeight; crouch->WeaponInactivePitchAimingLimit = save.Crouch.WeaponInactivePitchAimingLimit; crouch->RootMotionScale = save.Crouch.RootMotionScale; crouch->RootOffset = save.Crouch.RootOffset; crouch->SwanNeckEnableAtPitch = save.Crouch.SwanNeckEnableAtPitch; crouch->SwanNeckForward = save.Crouch.SwanNeckForward; crouch->SwanNeckDown = save.Crouch.SwanNeckDown; crouch->AnimBlendTime = save.Crouch.AnimBlendTime; crouch->StickyAngle = save.Crouch.StickyAngle; crouch->StickyAimedModifier = save.Crouch.StickyAimedModifier; crouch->Timer = save.Crouch.Timer; crouch->PawnPhysics = save.Crouch.PawnPhysics; crouch->HandPlantExtentCheckHeight = save.Crouch.HandPlantExtentCheckHeight; crouch->HandPlantExtentCheckWidth = save.Crouch.HandPlantExtentCheckWidth; crouch->HandPlantCheckDistance = save.Crouch.HandPlantCheckDistance; crouch->HandPlantCheckHeight = save.Crouch.HandPlantCheckHeight; crouch->ContextMoveDistanceMultiplier = save.Crouch.ContextMoveDistanceMultiplier; crouch->bCheckForGrab = save.Crouch.bCheckForGrab; crouch->bCheckForVaultOver = save.Crouch.bCheckForVaultOver; crouch->bCheckForWallClimb = save.Crouch.bCheckForWallClimb; crouch->bCheckForEdgeInVelDir = save.Crouch.bCheckForEdgeInVelDir; crouch->bCheckExitToFalling = save.Crouch.bCheckExitToFalling; crouch->bCheckExitToUncontrolledFalling = save.Crouch.bCheckExitToUncontrolledFalling; crouch->bCheckForSoftLanding = save.Crouch.bCheckForSoftLanding; crouch->bDelayTimeCheckAutoMoves = save.Crouch.bDelayTimeCheckAutoMoves; crouch->ExitToFallingZSpeed = save.Crouch.ExitToFallingZSpeed; crouch->SoftLandingZSpeedThreshold = save.Crouch.SoftLandingZSpeedThreshold; crouch->TimeToSoftLandingThreshold = save.Crouch.TimeToSoftLandingThreshold;
	}

	auto slide = static_cast<Classes::UTdMove_Slide *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Slide)]);
	if (slide) {
		slide->SpeedModifier = save.Slide.SpeedModifier; slide->FrictionModifier = save.Slide.FrictionModifier; slide->bDebugMove = save.Slide.bDebugMove; slide->bTriggersCompliment = save.Slide.bTriggersCompliment; slide->bDisableCollision = save.Slide.bDisableCollision; slide->bShouldHolsterWeapon = save.Slide.bShouldHolsterWeapon; slide->bShouldUnzoom = save.Slide.bShouldUnzoom; slide->bIsTimedMove = save.Slide.bIsTimedMove; slide->bConstrainLook = save.Slide.bConstrainLook; slide->bUseAbsoluteYawConstraint = save.Slide.bUseAbsoluteYawConstraint; slide->bDisableActorCollision = save.Slide.bDisableActorCollision; slide->bLookAtTargetLocation = save.Slide.bLookAtTargetLocation; slide->bLookAtTargetAngle = save.Slide.bLookAtTargetAngle; slide->bDisableFaceRotation = save.Slide.bDisableFaceRotation; slide->bDisableControllerFacingPawnYawRotation = save.Slide.bDisableControllerFacingPawnYawRotation; slide->bAvoidLedges = save.Slide.bAvoidLedges; slide->bUsePreciseLocation = save.Slide.bUsePreciseLocation; slide->bReachedPreciseLocation = save.Slide.bReachedPreciseLocation; slide->bDebugPreciseLocation = save.Slide.bDebugPreciseLocation; slide->bUsePreciseRotation = save.Slide.bUsePreciseRotation; slide->bReachedPreciseRotation = save.Slide.bReachedPreciseRotation; slide->bDelayRotationAndLocationCallback = save.Slide.bDelayRotationAndLocationCallback; slide->bResetCameraLook = save.Slide.bResetCameraLook; slide->bUseCustomCollision = save.Slide.bUseCustomCollision; slide->bUseCameraCollision = save.Slide.bUseCameraCollision; slide->bTwoHandedFullBodyAnimations = save.Slide.bTwoHandedFullBodyAnimations; slide->bStickyAim = save.Slide.bStickyAim; slide->bStopAfterMove = save.Slide.bStopAfterMove; slide->bEnableFootPlacement = save.Slide.bEnableFootPlacement; slide->bEnableAgainstWall = save.Slide.bEnableAgainstWall; slide->bAllowPickup = save.Slide.bAllowPickup; slide->AiAimPenalty = save.Slide.AiAimPenalty; slide->AiAimOneShotPenalty = save.Slide.AiAimOneShotPenalty; slide->MovementGroup = save.Slide.MovementGroup; slide->FirstPersonDPG = save.Slide.FirstPersonDPG; slide->FirstPersonLowerBodyDPG = save.Slide.FirstPersonLowerBodyDPG; slide->PreciseLocationInterpMode = save.Slide.PreciseLocationInterpMode; slide->AimMode = save.Slide.AimMode; slide->DisableMovementTime = save.Slide.DisableMovementTime; slide->DisableLookTime = save.Slide.DisableLookTime; slide->LastCanDoMoveTime = save.Slide.LastCanDoMoveTime; slide->LastStopMoveTime = save.Slide.LastStopMoveTime; slide->MoveActiveTime = save.Slide.MoveActiveTime; slide->RedoMoveTime = save.Slide.RedoMoveTime; slide->PreciseLocationSpeed = save.Slide.PreciseLocationSpeed; slide->PreciseLocation = save.Slide.PreciseLocation; slide->PreciseRotationInterpolationTime = save.Slide.PreciseRotationInterpolationTime; slide->PreciseRotation = save.Slide.PreciseRotation; slide->LookAtTargetLocation = save.Slide.LookAtTargetLocation; slide->LookAtTargetAngle = save.Slide.LookAtTargetAngle; slide->LookAtTargetInterpolationTime = save.Slide.LookAtTargetInterpolationTime; slide->LookAtTargetDuration = save.Slide.LookAtTargetDuration; slide->CancelResetCameraLookTime = save.Slide.CancelResetCameraLookTime; slide->ResetCameraLookTime = save.Slide.ResetCameraLookTime; slide->MinLookConstraint = save.Slide.MinLookConstraint; slide->MaxLookConstraint = save.Slide.MaxLookConstraint; slide->CustomCollisionRadius = save.Slide.CustomCollisionRadius; slide->CustomCollisionHeight = save.Slide.CustomCollisionHeight; slide->WeaponInactivePitchAimingLimit = save.Slide.WeaponInactivePitchAimingLimit; slide->RootMotionScale = save.Slide.RootMotionScale; slide->RootOffset = save.Slide.RootOffset; slide->SwanNeckEnableAtPitch = save.Slide.SwanNeckEnableAtPitch; slide->SwanNeckForward = save.Slide.SwanNeckForward; slide->SwanNeckDown = save.Slide.SwanNeckDown; slide->AnimBlendTime = save.Slide.AnimBlendTime; slide->StickyAngle = save.Slide.StickyAngle; slide->StickyAimedModifier = save.Slide.StickyAimedModifier; slide->Timer = save.Slide.Timer; slide->SlideAbortSpeed = save.Slide.SlideAbortSpeed; slide->SlideAbortTime = save.Slide.SlideAbortTime; slide->MaxFloorInclineZ = save.Slide.MaxFloorInclineZ; slide->SlideAngleTarget = save.Slide.SlideAngleTarget; slide->bGoingInto = save.Slide.bGoingInto; slide->bRequestUncrouch = save.Slide.bRequestUncrouch;
	}

	auto intoZipLine = static_cast<Classes::UTdMove_IntoZipLine *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_IntoZipLine)]);
	if (intoZipLine) {
		intoZipLine->SpeedModifier = save.IntoZipLine.SpeedModifier; intoZipLine->FrictionModifier = save.IntoZipLine.FrictionModifier; intoZipLine->bDebugMove = save.IntoZipLine.bDebugMove; intoZipLine->bTriggersCompliment = save.IntoZipLine.bTriggersCompliment; intoZipLine->bDisableCollision = save.IntoZipLine.bDisableCollision; intoZipLine->bShouldHolsterWeapon = save.IntoZipLine.bShouldHolsterWeapon; intoZipLine->bShouldUnzoom = save.IntoZipLine.bShouldUnzoom; intoZipLine->bIsTimedMove = save.IntoZipLine.bIsTimedMove; intoZipLine->bConstrainLook = save.IntoZipLine.bConstrainLook; intoZipLine->bUseAbsoluteYawConstraint = save.IntoZipLine.bUseAbsoluteYawConstraint; intoZipLine->bDisableActorCollision = save.IntoZipLine.bDisableActorCollision; intoZipLine->bLookAtTargetLocation = save.IntoZipLine.bLookAtTargetLocation; intoZipLine->bLookAtTargetAngle = save.IntoZipLine.bLookAtTargetAngle; intoZipLine->bDisableFaceRotation = save.IntoZipLine.bDisableFaceRotation; intoZipLine->bDisableControllerFacingPawnYawRotation = save.IntoZipLine.bDisableControllerFacingPawnYawRotation; intoZipLine->bAvoidLedges = save.IntoZipLine.bAvoidLedges; intoZipLine->bUsePreciseLocation = save.IntoZipLine.bUsePreciseLocation; intoZipLine->bReachedPreciseLocation = save.IntoZipLine.bReachedPreciseLocation; intoZipLine->bDebugPreciseLocation = save.IntoZipLine.bDebugPreciseLocation; intoZipLine->bUsePreciseRotation = save.IntoZipLine.bUsePreciseRotation; intoZipLine->bReachedPreciseRotation = save.IntoZipLine.bReachedPreciseRotation; intoZipLine->bDelayRotationAndLocationCallback = save.IntoZipLine.bDelayRotationAndLocationCallback; intoZipLine->bResetCameraLook = save.IntoZipLine.bResetCameraLook; intoZipLine->bUseCustomCollision = save.IntoZipLine.bUseCustomCollision; intoZipLine->bUseCameraCollision = save.IntoZipLine.bUseCameraCollision; intoZipLine->bTwoHandedFullBodyAnimations = save.IntoZipLine.bTwoHandedFullBodyAnimations; intoZipLine->bStickyAim = save.IntoZipLine.bStickyAim; intoZipLine->bStopAfterMove = save.IntoZipLine.bStopAfterMove; intoZipLine->bEnableFootPlacement = save.IntoZipLine.bEnableFootPlacement; intoZipLine->bEnableAgainstWall = save.IntoZipLine.bEnableAgainstWall; intoZipLine->bAllowPickup = save.IntoZipLine.bAllowPickup; intoZipLine->AiAimPenalty = save.IntoZipLine.AiAimPenalty; intoZipLine->AiAimOneShotPenalty = save.IntoZipLine.AiAimOneShotPenalty; intoZipLine->MovementGroup = save.IntoZipLine.MovementGroup; intoZipLine->FirstPersonDPG = save.IntoZipLine.FirstPersonDPG; intoZipLine->FirstPersonLowerBodyDPG = save.IntoZipLine.FirstPersonLowerBodyDPG; intoZipLine->PreciseLocationInterpMode = save.IntoZipLine.PreciseLocationInterpMode; intoZipLine->AimMode = save.IntoZipLine.AimMode; intoZipLine->DisableMovementTime = save.IntoZipLine.DisableMovementTime; intoZipLine->DisableLookTime = save.IntoZipLine.DisableLookTime; intoZipLine->LastCanDoMoveTime = save.IntoZipLine.LastCanDoMoveTime; intoZipLine->LastStopMoveTime = save.IntoZipLine.LastStopMoveTime; intoZipLine->MoveActiveTime = save.IntoZipLine.MoveActiveTime; intoZipLine->RedoMoveTime = save.IntoZipLine.RedoMoveTime; intoZipLine->PreciseLocationSpeed = save.IntoZipLine.PreciseLocationSpeed; intoZipLine->PreciseLocation = save.IntoZipLine.PreciseLocation; intoZipLine->PreciseRotationInterpolationTime = save.IntoZipLine.PreciseRotationInterpolationTime; intoZipLine->PreciseRotation = save.IntoZipLine.PreciseRotation; intoZipLine->LookAtTargetLocation = save.IntoZipLine.LookAtTargetLocation; intoZipLine->LookAtTargetAngle = save.IntoZipLine.LookAtTargetAngle; intoZipLine->LookAtTargetInterpolationTime = save.IntoZipLine.LookAtTargetInterpolationTime; intoZipLine->LookAtTargetDuration = save.IntoZipLine.LookAtTargetDuration; intoZipLine->CancelResetCameraLookTime = save.IntoZipLine.CancelResetCameraLookTime; intoZipLine->ResetCameraLookTime = save.IntoZipLine.ResetCameraLookTime; intoZipLine->MinLookConstraint = save.IntoZipLine.MinLookConstraint; intoZipLine->MaxLookConstraint = save.IntoZipLine.MaxLookConstraint; intoZipLine->CustomCollisionRadius = save.IntoZipLine.CustomCollisionRadius; intoZipLine->CustomCollisionHeight = save.IntoZipLine.CustomCollisionHeight; intoZipLine->WeaponInactivePitchAimingLimit = save.IntoZipLine.WeaponInactivePitchAimingLimit; intoZipLine->RootMotionScale = save.IntoZipLine.RootMotionScale; intoZipLine->RootOffset = save.IntoZipLine.RootOffset; intoZipLine->SwanNeckEnableAtPitch = save.IntoZipLine.SwanNeckEnableAtPitch; intoZipLine->SwanNeckForward = save.IntoZipLine.SwanNeckForward; intoZipLine->SwanNeckDown = save.IntoZipLine.SwanNeckDown; intoZipLine->AnimBlendTime = save.IntoZipLine.AnimBlendTime; intoZipLine->StickyAngle = save.IntoZipLine.StickyAngle; intoZipLine->StickyAimedModifier = save.IntoZipLine.StickyAimedModifier; intoZipLine->Timer = save.IntoZipLine.Timer; intoZipLine->PawnPhysics = save.IntoZipLine.PawnPhysics; intoZipLine->HandPlantExtentCheckHeight = save.IntoZipLine.HandPlantExtentCheckHeight; intoZipLine->HandPlantExtentCheckWidth = save.IntoZipLine.HandPlantExtentCheckWidth; intoZipLine->HandPlantCheckDistance = save.IntoZipLine.HandPlantCheckDistance; intoZipLine->HandPlantCheckHeight = save.IntoZipLine.HandPlantCheckHeight; intoZipLine->ContextMoveDistanceMultiplier = save.IntoZipLine.ContextMoveDistanceMultiplier; intoZipLine->bCheckForGrab = save.IntoZipLine.bCheckForGrab; intoZipLine->bCheckForVaultOver = save.IntoZipLine.bCheckForVaultOver; intoZipLine->bCheckForWallClimb = save.IntoZipLine.bCheckForWallClimb; intoZipLine->bCheckForEdgeInVelDir = save.IntoZipLine.bCheckForEdgeInVelDir; intoZipLine->bCheckExitToFalling = save.IntoZipLine.bCheckExitToFalling; intoZipLine->bCheckExitToUncontrolledFalling = save.IntoZipLine.bCheckExitToUncontrolledFalling; intoZipLine->bCheckForSoftLanding = save.IntoZipLine.bCheckForSoftLanding; intoZipLine->bDelayTimeCheckAutoMoves = save.IntoZipLine.bDelayTimeCheckAutoMoves; intoZipLine->ExitToFallingZSpeed = save.IntoZipLine.ExitToFallingZSpeed; intoZipLine->SoftLandingZSpeedThreshold = save.IntoZipLine.SoftLandingZSpeedThreshold; intoZipLine->TimeToSoftLandingThreshold = save.IntoZipLine.TimeToSoftLandingThreshold; intoZipLine->HangOffset = save.IntoZipLine.HangOffset; intoZipLine->ZVelocityFallLimit = save.IntoZipLine.ZVelocityFallLimit; intoZipLine->IntoZiplineBlendInTime = save.IntoZipLine.IntoZiplineBlendInTime; intoZipLine->IntoZiplineBlendOutTime = save.IntoZipLine.IntoZiplineBlendOutTime; intoZipLine->EnterZipLineParam = save.IntoZipLine.EnterZipLineParam; intoZipLine->SavedInitial2DVelocity = save.IntoZipLine.SavedInitial2DVelocity; intoZipLine->SameZipLineRedoMoveTime = save.IntoZipLine.SameZipLineRedoMoveTime;
	}

	auto zipLine = static_cast<Classes::UTdMove_ZipLine *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_ZipLine)]);
	if (zipLine) {
		zipLine->SpeedModifier = save.ZipLine.SpeedModifier; zipLine->FrictionModifier = save.ZipLine.FrictionModifier; zipLine->bDebugMove = save.ZipLine.bDebugMove; zipLine->bTriggersCompliment = save.ZipLine.bTriggersCompliment; zipLine->bDisableCollision = save.ZipLine.bDisableCollision; zipLine->bShouldHolsterWeapon = save.ZipLine.bShouldHolsterWeapon; zipLine->bShouldUnzoom = save.ZipLine.bShouldUnzoom; zipLine->bIsTimedMove = save.ZipLine.bIsTimedMove; zipLine->bConstrainLook = save.ZipLine.bConstrainLook; zipLine->bUseAbsoluteYawConstraint = save.ZipLine.bUseAbsoluteYawConstraint; zipLine->bDisableActorCollision = save.ZipLine.bDisableActorCollision; zipLine->bLookAtTargetLocation = save.ZipLine.bLookAtTargetLocation; zipLine->bLookAtTargetAngle = save.ZipLine.bLookAtTargetAngle; zipLine->bDisableFaceRotation = save.ZipLine.bDisableFaceRotation; zipLine->bDisableControllerFacingPawnYawRotation = save.ZipLine.bDisableControllerFacingPawnYawRotation; zipLine->bAvoidLedges = save.ZipLine.bAvoidLedges; zipLine->bUsePreciseLocation = save.ZipLine.bUsePreciseLocation; zipLine->bReachedPreciseLocation = save.ZipLine.bReachedPreciseLocation; zipLine->bDebugPreciseLocation = save.ZipLine.bDebugPreciseLocation; zipLine->bUsePreciseRotation = save.ZipLine.bUsePreciseRotation; zipLine->bReachedPreciseRotation = save.ZipLine.bReachedPreciseRotation; zipLine->bDelayRotationAndLocationCallback = save.ZipLine.bDelayRotationAndLocationCallback; zipLine->bResetCameraLook = save.ZipLine.bResetCameraLook; zipLine->bUseCustomCollision = save.ZipLine.bUseCustomCollision; zipLine->bUseCameraCollision = save.ZipLine.bUseCameraCollision; zipLine->bTwoHandedFullBodyAnimations = save.ZipLine.bTwoHandedFullBodyAnimations; zipLine->bStickyAim = save.ZipLine.bStickyAim; zipLine->bStopAfterMove = save.ZipLine.bStopAfterMove; zipLine->bEnableFootPlacement = save.ZipLine.bEnableFootPlacement; zipLine->bEnableAgainstWall = save.ZipLine.bEnableAgainstWall; zipLine->bAllowPickup = save.ZipLine.bAllowPickup; zipLine->AiAimPenalty = save.ZipLine.AiAimPenalty; zipLine->AiAimOneShotPenalty = save.ZipLine.AiAimOneShotPenalty; zipLine->MovementGroup = save.ZipLine.MovementGroup; zipLine->FirstPersonDPG = save.ZipLine.FirstPersonDPG; zipLine->FirstPersonLowerBodyDPG = save.ZipLine.FirstPersonLowerBodyDPG; zipLine->PreciseLocationInterpMode = save.ZipLine.PreciseLocationInterpMode; zipLine->AimMode = save.ZipLine.AimMode; zipLine->DisableMovementTime = save.ZipLine.DisableMovementTime; zipLine->DisableLookTime = save.ZipLine.DisableLookTime; zipLine->LastCanDoMoveTime = save.ZipLine.LastCanDoMoveTime; zipLine->LastStopMoveTime = save.ZipLine.LastStopMoveTime; zipLine->MoveActiveTime = save.ZipLine.MoveActiveTime; zipLine->RedoMoveTime = save.ZipLine.RedoMoveTime; zipLine->PreciseLocationSpeed = save.ZipLine.PreciseLocationSpeed; zipLine->PreciseLocation = save.ZipLine.PreciseLocation; zipLine->PreciseRotationInterpolationTime = save.ZipLine.PreciseRotationInterpolationTime; zipLine->PreciseRotation = save.ZipLine.PreciseRotation; zipLine->LookAtTargetLocation = save.ZipLine.LookAtTargetLocation; zipLine->LookAtTargetAngle = save.ZipLine.LookAtTargetAngle; zipLine->LookAtTargetInterpolationTime = save.ZipLine.LookAtTargetInterpolationTime; zipLine->LookAtTargetDuration = save.ZipLine.LookAtTargetDuration; zipLine->CancelResetCameraLookTime = save.ZipLine.CancelResetCameraLookTime; zipLine->ResetCameraLookTime = save.ZipLine.ResetCameraLookTime; zipLine->MinLookConstraint = save.ZipLine.MinLookConstraint; zipLine->MaxLookConstraint = save.ZipLine.MaxLookConstraint; zipLine->CustomCollisionRadius = save.ZipLine.CustomCollisionRadius; zipLine->CustomCollisionHeight = save.ZipLine.CustomCollisionHeight; zipLine->WeaponInactivePitchAimingLimit = save.ZipLine.WeaponInactivePitchAimingLimit; zipLine->RootMotionScale = save.ZipLine.RootMotionScale; zipLine->RootOffset = save.ZipLine.RootOffset; zipLine->SwanNeckEnableAtPitch = save.ZipLine.SwanNeckEnableAtPitch; zipLine->SwanNeckForward = save.ZipLine.SwanNeckForward; zipLine->SwanNeckDown = save.ZipLine.SwanNeckDown; zipLine->AnimBlendTime = save.ZipLine.AnimBlendTime; zipLine->StickyAngle = save.ZipLine.StickyAngle; zipLine->StickyAimedModifier = save.ZipLine.StickyAimedModifier; zipLine->Timer = save.ZipLine.Timer; zipLine->PawnPhysics = save.ZipLine.PawnPhysics; zipLine->HandPlantExtentCheckHeight = save.ZipLine.HandPlantExtentCheckHeight; zipLine->HandPlantExtentCheckWidth = save.ZipLine.HandPlantExtentCheckWidth; zipLine->HandPlantCheckDistance = save.ZipLine.HandPlantCheckDistance; zipLine->HandPlantCheckHeight = save.ZipLine.HandPlantCheckHeight; zipLine->ContextMoveDistanceMultiplier = save.ZipLine.ContextMoveDistanceMultiplier; zipLine->bCheckForGrab = save.ZipLine.bCheckForGrab; zipLine->bCheckForVaultOver = save.ZipLine.bCheckForVaultOver; zipLine->bCheckForWallClimb = save.ZipLine.bCheckForWallClimb; zipLine->bCheckForEdgeInVelDir = save.ZipLine.bCheckForEdgeInVelDir; zipLine->bCheckExitToFalling = save.ZipLine.bCheckExitToFalling; zipLine->bCheckExitToUncontrolledFalling = save.ZipLine.bCheckExitToUncontrolledFalling; zipLine->bCheckForSoftLanding = save.ZipLine.bCheckForSoftLanding; zipLine->bDelayTimeCheckAutoMoves = save.ZipLine.bDelayTimeCheckAutoMoves; zipLine->ExitToFallingZSpeed = save.ZipLine.ExitToFallingZSpeed; zipLine->SoftLandingZSpeedThreshold = save.ZipLine.SoftLandingZSpeedThreshold; zipLine->TimeToSoftLandingThreshold = save.ZipLine.TimeToSoftLandingThreshold; zipLine->HangOffset = save.ZipLine.HangOffset; zipLine->MinZipVelocity = save.ZipLine.MinZipVelocity; zipLine->MinZipAcceleration = save.ZipLine.MinZipAcceleration; zipLine->CurrentParamOnCurve = save.ZipLine.CurrentParamOnCurve; zipLine->ZipFadeInTime = save.ZipLine.ZipFadeInTime; zipLine->ZipFadeOutTime = save.ZipLine.ZipFadeOutTime; zipLine->CurrentLookAtPoint = save.ZipLine.CurrentLookAtPoint; zipLine->bZipLineLookAssist = save.ZipLine.bZipLineLookAssist; zipLine->ZipLineStatus = save.ZipLine.ZipLineStatus;
	}

	auto grabTransfer = static_cast<Classes::UTdMove_GrabTransfer *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_GrabTransfer)]);
	if (grabTransfer) {
		grabTransfer->SpeedModifier = save.GrabTransfer.SpeedModifier; grabTransfer->FrictionModifier = save.GrabTransfer.FrictionModifier; grabTransfer->bDebugMove = save.GrabTransfer.bDebugMove; grabTransfer->bTriggersCompliment = save.GrabTransfer.bTriggersCompliment; grabTransfer->bDisableCollision = save.GrabTransfer.bDisableCollision; grabTransfer->bShouldHolsterWeapon = save.GrabTransfer.bShouldHolsterWeapon; grabTransfer->bShouldUnzoom = save.GrabTransfer.bShouldUnzoom; grabTransfer->bIsTimedMove = save.GrabTransfer.bIsTimedMove; grabTransfer->bConstrainLook = save.GrabTransfer.bConstrainLook; grabTransfer->bUseAbsoluteYawConstraint = save.GrabTransfer.bUseAbsoluteYawConstraint; grabTransfer->bDisableActorCollision = save.GrabTransfer.bDisableActorCollision; grabTransfer->bLookAtTargetLocation = save.GrabTransfer.bLookAtTargetLocation; grabTransfer->bLookAtTargetAngle = save.GrabTransfer.bLookAtTargetAngle; grabTransfer->bDisableFaceRotation = save.GrabTransfer.bDisableFaceRotation; grabTransfer->bDisableControllerFacingPawnYawRotation = save.GrabTransfer.bDisableControllerFacingPawnYawRotation; grabTransfer->bAvoidLedges = save.GrabTransfer.bAvoidLedges; grabTransfer->bUsePreciseLocation = save.GrabTransfer.bUsePreciseLocation; grabTransfer->bReachedPreciseLocation = save.GrabTransfer.bReachedPreciseLocation; grabTransfer->bDebugPreciseLocation = save.GrabTransfer.bDebugPreciseLocation; grabTransfer->bUsePreciseRotation = save.GrabTransfer.bUsePreciseRotation; grabTransfer->bReachedPreciseRotation = save.GrabTransfer.bReachedPreciseRotation; grabTransfer->bDelayRotationAndLocationCallback = save.GrabTransfer.bDelayRotationAndLocationCallback; grabTransfer->bResetCameraLook = save.GrabTransfer.bResetCameraLook; grabTransfer->bUseCustomCollision = save.GrabTransfer.bUseCustomCollision; grabTransfer->bUseCameraCollision = save.GrabTransfer.bUseCameraCollision; grabTransfer->bTwoHandedFullBodyAnimations = save.GrabTransfer.bTwoHandedFullBodyAnimations; grabTransfer->bStickyAim = save.GrabTransfer.bStickyAim; grabTransfer->bStopAfterMove = save.GrabTransfer.bStopAfterMove; grabTransfer->bEnableFootPlacement = save.GrabTransfer.bEnableFootPlacement; grabTransfer->bEnableAgainstWall = save.GrabTransfer.bEnableAgainstWall; grabTransfer->bAllowPickup = save.GrabTransfer.bAllowPickup; grabTransfer->AiAimPenalty = save.GrabTransfer.AiAimPenalty; grabTransfer->AiAimOneShotPenalty = save.GrabTransfer.AiAimOneShotPenalty; grabTransfer->MovementGroup = save.GrabTransfer.MovementGroup; grabTransfer->FirstPersonDPG = save.GrabTransfer.FirstPersonDPG; grabTransfer->FirstPersonLowerBodyDPG = save.GrabTransfer.FirstPersonLowerBodyDPG; grabTransfer->PreciseLocationInterpMode = save.GrabTransfer.PreciseLocationInterpMode; grabTransfer->AimMode = save.GrabTransfer.AimMode; grabTransfer->DisableMovementTime = save.GrabTransfer.DisableMovementTime; grabTransfer->DisableLookTime = save.GrabTransfer.DisableLookTime; grabTransfer->LastCanDoMoveTime = save.GrabTransfer.LastCanDoMoveTime; grabTransfer->LastStopMoveTime = save.GrabTransfer.LastStopMoveTime; grabTransfer->MoveActiveTime = save.GrabTransfer.MoveActiveTime; grabTransfer->RedoMoveTime = save.GrabTransfer.RedoMoveTime; grabTransfer->PreciseLocationSpeed = save.GrabTransfer.PreciseLocationSpeed; grabTransfer->PreciseLocation = save.GrabTransfer.PreciseLocation; grabTransfer->PreciseRotationInterpolationTime = save.GrabTransfer.PreciseRotationInterpolationTime; grabTransfer->PreciseRotation = save.GrabTransfer.PreciseRotation; grabTransfer->LookAtTargetLocation = save.GrabTransfer.LookAtTargetLocation; grabTransfer->LookAtTargetAngle = save.GrabTransfer.LookAtTargetAngle; grabTransfer->LookAtTargetInterpolationTime = save.GrabTransfer.LookAtTargetInterpolationTime; grabTransfer->LookAtTargetDuration = save.GrabTransfer.LookAtTargetDuration; grabTransfer->CancelResetCameraLookTime = save.GrabTransfer.CancelResetCameraLookTime; grabTransfer->ResetCameraLookTime = save.GrabTransfer.ResetCameraLookTime; grabTransfer->MinLookConstraint = save.GrabTransfer.MinLookConstraint; grabTransfer->MaxLookConstraint = save.GrabTransfer.MaxLookConstraint; grabTransfer->CustomCollisionRadius = save.GrabTransfer.CustomCollisionRadius; grabTransfer->CustomCollisionHeight = save.GrabTransfer.CustomCollisionHeight; grabTransfer->WeaponInactivePitchAimingLimit = save.GrabTransfer.WeaponInactivePitchAimingLimit; grabTransfer->RootMotionScale = save.GrabTransfer.RootMotionScale; grabTransfer->RootOffset = save.GrabTransfer.RootOffset; grabTransfer->SwanNeckEnableAtPitch = save.GrabTransfer.SwanNeckEnableAtPitch; grabTransfer->SwanNeckForward = save.GrabTransfer.SwanNeckForward; grabTransfer->SwanNeckDown = save.GrabTransfer.SwanNeckDown; grabTransfer->AnimBlendTime = save.GrabTransfer.AnimBlendTime; grabTransfer->StickyAngle = save.GrabTransfer.StickyAngle; grabTransfer->StickyAimedModifier = save.GrabTransfer.StickyAimedModifier; grabTransfer->Timer = save.GrabTransfer.Timer; grabTransfer->PawnPhysics = save.GrabTransfer.PawnPhysics; grabTransfer->HandPlantExtentCheckHeight = save.GrabTransfer.HandPlantExtentCheckHeight; grabTransfer->HandPlantExtentCheckWidth = save.GrabTransfer.HandPlantExtentCheckWidth; grabTransfer->HandPlantCheckDistance = save.GrabTransfer.HandPlantCheckDistance; grabTransfer->HandPlantCheckHeight = save.GrabTransfer.HandPlantCheckHeight; grabTransfer->ContextMoveDistanceMultiplier = save.GrabTransfer.ContextMoveDistanceMultiplier; grabTransfer->bCheckForGrab = save.GrabTransfer.bCheckForGrab; grabTransfer->bCheckForVaultOver = save.GrabTransfer.bCheckForVaultOver; grabTransfer->bCheckForWallClimb = save.GrabTransfer.bCheckForWallClimb; grabTransfer->bCheckForEdgeInVelDir = save.GrabTransfer.bCheckForEdgeInVelDir; grabTransfer->bCheckExitToFalling = save.GrabTransfer.bCheckExitToFalling; grabTransfer->bCheckExitToUncontrolledFalling = save.GrabTransfer.bCheckExitToUncontrolledFalling; grabTransfer->bCheckForSoftLanding = save.GrabTransfer.bCheckForSoftLanding; grabTransfer->bDelayTimeCheckAutoMoves = save.GrabTransfer.bDelayTimeCheckAutoMoves; grabTransfer->ExitToFallingZSpeed = save.GrabTransfer.ExitToFallingZSpeed; grabTransfer->SoftLandingZSpeedThreshold = save.GrabTransfer.SoftLandingZSpeedThreshold; grabTransfer->TimeToSoftLandingThreshold = save.GrabTransfer.TimeToSoftLandingThreshold; grabTransfer->Allowed2DTransferDistance = save.GrabTransfer.Allowed2DTransferDistance; grabTransfer->AllowedZTransferDistance = save.GrabTransfer.AllowedZTransferDistance; grabTransfer->TransferLocation = save.GrabTransfer.TransferLocation; grabTransfer->TransferNormal = save.GrabTransfer.TransferNormal; grabTransfer->TransferLookAtLocation = save.GrabTransfer.TransferLookAtLocation; grabTransfer->TransferLedgeNormal = save.GrabTransfer.TransferLedgeNormal; grabTransfer->TransferHint = save.GrabTransfer.TransferHint; grabTransfer->TransferMove = save.GrabTransfer.TransferMove; grabTransfer->TransferSpeed = save.GrabTransfer.TransferSpeed; grabTransfer->TransferDistance = save.GrabTransfer.TransferDistance; grabTransfer->bFitForGrab = save.GrabTransfer.bFitForGrab;
	}

	auto coil = static_cast<Classes::UTdMove_Coil *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_Coil)]);
	if (coil) {
		coil->SpeedModifier = save.Coil.SpeedModifier; coil->FrictionModifier = save.Coil.FrictionModifier; coil->bDebugMove = save.Coil.bDebugMove; coil->bTriggersCompliment = save.Coil.bTriggersCompliment; coil->bDisableCollision = save.Coil.bDisableCollision; coil->bShouldHolsterWeapon = save.Coil.bShouldHolsterWeapon; coil->bShouldUnzoom = save.Coil.bShouldUnzoom; coil->bIsTimedMove = save.Coil.bIsTimedMove; coil->bConstrainLook = save.Coil.bConstrainLook; coil->bUseAbsoluteYawConstraint = save.Coil.bUseAbsoluteYawConstraint; coil->bDisableActorCollision = save.Coil.bDisableActorCollision; coil->bLookAtTargetLocation = save.Coil.bLookAtTargetLocation; coil->bLookAtTargetAngle = save.Coil.bLookAtTargetAngle; coil->bDisableFaceRotation = save.Coil.bDisableFaceRotation; coil->bDisableControllerFacingPawnYawRotation = save.Coil.bDisableControllerFacingPawnYawRotation; coil->bAvoidLedges = save.Coil.bAvoidLedges; coil->bUsePreciseLocation = save.Coil.bUsePreciseLocation; coil->bReachedPreciseLocation = save.Coil.bReachedPreciseLocation; coil->bDebugPreciseLocation = save.Coil.bDebugPreciseLocation; coil->bUsePreciseRotation = save.Coil.bUsePreciseRotation; coil->bReachedPreciseRotation = save.Coil.bReachedPreciseRotation; coil->bDelayRotationAndLocationCallback = save.Coil.bDelayRotationAndLocationCallback; coil->bResetCameraLook = save.Coil.bResetCameraLook; coil->bUseCustomCollision = save.Coil.bUseCustomCollision; coil->bUseCameraCollision = save.Coil.bUseCameraCollision; coil->bTwoHandedFullBodyAnimations = save.Coil.bTwoHandedFullBodyAnimations; coil->bStickyAim = save.Coil.bStickyAim; coil->bStopAfterMove = save.Coil.bStopAfterMove; coil->bEnableFootPlacement = save.Coil.bEnableFootPlacement; coil->bEnableAgainstWall = save.Coil.bEnableAgainstWall; coil->bAllowPickup = save.Coil.bAllowPickup; coil->AiAimPenalty = save.Coil.AiAimPenalty; coil->AiAimOneShotPenalty = save.Coil.AiAimOneShotPenalty; coil->MovementGroup = save.Coil.MovementGroup; coil->FirstPersonDPG = save.Coil.FirstPersonDPG; coil->FirstPersonLowerBodyDPG = save.Coil.FirstPersonLowerBodyDPG; coil->PreciseLocationInterpMode = save.Coil.PreciseLocationInterpMode; coil->AimMode = save.Coil.AimMode; coil->DisableMovementTime = save.Coil.DisableMovementTime; coil->DisableLookTime = save.Coil.DisableLookTime; coil->LastCanDoMoveTime = save.Coil.LastCanDoMoveTime; coil->LastStopMoveTime = save.Coil.LastStopMoveTime; coil->MoveActiveTime = save.Coil.MoveActiveTime; coil->RedoMoveTime = save.Coil.RedoMoveTime; coil->PreciseLocationSpeed = save.Coil.PreciseLocationSpeed; coil->PreciseLocation = save.Coil.PreciseLocation; coil->PreciseRotationInterpolationTime = save.Coil.PreciseRotationInterpolationTime; coil->PreciseRotation = save.Coil.PreciseRotation; coil->LookAtTargetLocation = save.Coil.LookAtTargetLocation; coil->LookAtTargetAngle = save.Coil.LookAtTargetAngle; coil->LookAtTargetInterpolationTime = save.Coil.LookAtTargetInterpolationTime; coil->LookAtTargetDuration = save.Coil.LookAtTargetDuration; coil->CancelResetCameraLookTime = save.Coil.CancelResetCameraLookTime; coil->ResetCameraLookTime = save.Coil.ResetCameraLookTime; coil->MinLookConstraint = save.Coil.MinLookConstraint; coil->MaxLookConstraint = save.Coil.MaxLookConstraint; coil->CustomCollisionRadius = save.Coil.CustomCollisionRadius; coil->CustomCollisionHeight = save.Coil.CustomCollisionHeight; coil->WeaponInactivePitchAimingLimit = save.Coil.WeaponInactivePitchAimingLimit; coil->RootMotionScale = save.Coil.RootMotionScale; coil->RootOffset = save.Coil.RootOffset; coil->SwanNeckEnableAtPitch = save.Coil.SwanNeckEnableAtPitch; coil->SwanNeckForward = save.Coil.SwanNeckForward; coil->SwanNeckDown = save.Coil.SwanNeckDown; coil->AnimBlendTime = save.Coil.AnimBlendTime; coil->StickyAngle = save.Coil.StickyAngle; coil->StickyAimedModifier = save.Coil.StickyAimedModifier; coil->Timer = save.Coil.Timer; coil->PawnPhysics = save.Coil.PawnPhysics; coil->HandPlantExtentCheckHeight = save.Coil.HandPlantExtentCheckHeight; coil->HandPlantExtentCheckWidth = save.Coil.HandPlantExtentCheckWidth; coil->HandPlantCheckDistance = save.Coil.HandPlantCheckDistance; coil->HandPlantCheckHeight = save.Coil.HandPlantCheckHeight; coil->ContextMoveDistanceMultiplier = save.Coil.ContextMoveDistanceMultiplier; coil->bCheckForGrab = save.Coil.bCheckForGrab; coil->bCheckForVaultOver = save.Coil.bCheckForVaultOver; coil->bCheckForWallClimb = save.Coil.bCheckForWallClimb; coil->bCheckForEdgeInVelDir = save.Coil.bCheckForEdgeInVelDir; coil->bCheckExitToFalling = save.Coil.bCheckExitToFalling; coil->bCheckExitToUncontrolledFalling = save.Coil.bCheckExitToUncontrolledFalling; coil->bCheckForSoftLanding = save.Coil.bCheckForSoftLanding; coil->bDelayTimeCheckAutoMoves = save.Coil.bDelayTimeCheckAutoMoves; coil->ExitToFallingZSpeed = save.Coil.ExitToFallingZSpeed; coil->SoftLandingZSpeedThreshold = save.Coil.SoftLandingZSpeedThreshold; coil->TimeToSoftLandingThreshold = save.Coil.TimeToSoftLandingThreshold; coil->HeightBoostDuration = save.Coil.HeightBoostDuration; coil->TotalHeightBoost = save.Coil.TotalHeightBoost; coil->CoilMinTriggerSpeed = save.Coil.CoilMinTriggerSpeed; coil->CoilTime = save.Coil.CoilTime; coil->HeightBoostLeft = save.Coil.HeightBoostLeft;
	}

	auto meleeWallrun = static_cast<Classes::UTdMove_MeleeWallrun *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_MeleeWallrun)]);
	if (meleeWallrun) {
		meleeWallrun->SpeedModifier = save.MeleeWallrun.SpeedModifier; meleeWallrun->FrictionModifier = save.MeleeWallrun.FrictionModifier; meleeWallrun->bDebugMove = save.MeleeWallrun.bDebugMove; meleeWallrun->bTriggersCompliment = save.MeleeWallrun.bTriggersCompliment; meleeWallrun->bDisableCollision = save.MeleeWallrun.bDisableCollision; meleeWallrun->bShouldHolsterWeapon = save.MeleeWallrun.bShouldHolsterWeapon; meleeWallrun->bShouldUnzoom = save.MeleeWallrun.bShouldUnzoom; meleeWallrun->bIsTimedMove = save.MeleeWallrun.bIsTimedMove; meleeWallrun->bConstrainLook = save.MeleeWallrun.bConstrainLook; meleeWallrun->bUseAbsoluteYawConstraint = save.MeleeWallrun.bUseAbsoluteYawConstraint; meleeWallrun->bDisableActorCollision = save.MeleeWallrun.bDisableActorCollision; meleeWallrun->bLookAtTargetLocation = save.MeleeWallrun.bLookAtTargetLocation; meleeWallrun->bLookAtTargetAngle = save.MeleeWallrun.bLookAtTargetAngle; meleeWallrun->bDisableFaceRotation = save.MeleeWallrun.bDisableFaceRotation; meleeWallrun->bDisableControllerFacingPawnYawRotation = save.MeleeWallrun.bDisableControllerFacingPawnYawRotation; meleeWallrun->bAvoidLedges = save.MeleeWallrun.bAvoidLedges; meleeWallrun->bUsePreciseLocation = save.MeleeWallrun.bUsePreciseLocation; meleeWallrun->bReachedPreciseLocation = save.MeleeWallrun.bReachedPreciseLocation; meleeWallrun->bDebugPreciseLocation = save.MeleeWallrun.bDebugPreciseLocation; meleeWallrun->bUsePreciseRotation = save.MeleeWallrun.bUsePreciseRotation; meleeWallrun->bReachedPreciseRotation = save.MeleeWallrun.bReachedPreciseRotation; meleeWallrun->bDelayRotationAndLocationCallback = save.MeleeWallrun.bDelayRotationAndLocationCallback; meleeWallrun->bResetCameraLook = save.MeleeWallrun.bResetCameraLook; meleeWallrun->bUseCustomCollision = save.MeleeWallrun.bUseCustomCollision; meleeWallrun->bUseCameraCollision = save.MeleeWallrun.bUseCameraCollision; meleeWallrun->bTwoHandedFullBodyAnimations = save.MeleeWallrun.bTwoHandedFullBodyAnimations; meleeWallrun->bStickyAim = save.MeleeWallrun.bStickyAim; meleeWallrun->bStopAfterMove = save.MeleeWallrun.bStopAfterMove; meleeWallrun->bEnableFootPlacement = save.MeleeWallrun.bEnableFootPlacement; meleeWallrun->bEnableAgainstWall = save.MeleeWallrun.bEnableAgainstWall; meleeWallrun->bAllowPickup = save.MeleeWallrun.bAllowPickup; meleeWallrun->AiAimPenalty = save.MeleeWallrun.AiAimPenalty; meleeWallrun->AiAimOneShotPenalty = save.MeleeWallrun.AiAimOneShotPenalty; meleeWallrun->MovementGroup = save.MeleeWallrun.MovementGroup; meleeWallrun->FirstPersonDPG = save.MeleeWallrun.FirstPersonDPG; meleeWallrun->FirstPersonLowerBodyDPG = save.MeleeWallrun.FirstPersonLowerBodyDPG; meleeWallrun->PreciseLocationInterpMode = save.MeleeWallrun.PreciseLocationInterpMode; meleeWallrun->AimMode = save.MeleeWallrun.AimMode; meleeWallrun->DisableMovementTime = save.MeleeWallrun.DisableMovementTime; meleeWallrun->DisableLookTime = save.MeleeWallrun.DisableLookTime; meleeWallrun->LastCanDoMoveTime = save.MeleeWallrun.LastCanDoMoveTime; meleeWallrun->LastStopMoveTime = save.MeleeWallrun.LastStopMoveTime; meleeWallrun->MoveActiveTime = save.MeleeWallrun.MoveActiveTime; meleeWallrun->RedoMoveTime = save.MeleeWallrun.RedoMoveTime; meleeWallrun->PreciseLocationSpeed = save.MeleeWallrun.PreciseLocationSpeed; meleeWallrun->PreciseLocation = save.MeleeWallrun.PreciseLocation; meleeWallrun->PreciseRotationInterpolationTime = save.MeleeWallrun.PreciseRotationInterpolationTime; meleeWallrun->PreciseRotation = save.MeleeWallrun.PreciseRotation; meleeWallrun->LookAtTargetLocation = save.MeleeWallrun.LookAtTargetLocation; meleeWallrun->LookAtTargetAngle = save.MeleeWallrun.LookAtTargetAngle; meleeWallrun->LookAtTargetInterpolationTime = save.MeleeWallrun.LookAtTargetInterpolationTime; meleeWallrun->LookAtTargetDuration = save.MeleeWallrun.LookAtTargetDuration; meleeWallrun->CancelResetCameraLookTime = save.MeleeWallrun.CancelResetCameraLookTime; meleeWallrun->ResetCameraLookTime = save.MeleeWallrun.ResetCameraLookTime; meleeWallrun->MinLookConstraint = save.MeleeWallrun.MinLookConstraint; meleeWallrun->MaxLookConstraint = save.MeleeWallrun.MaxLookConstraint; meleeWallrun->CustomCollisionRadius = save.MeleeWallrun.CustomCollisionRadius; meleeWallrun->CustomCollisionHeight = save.MeleeWallrun.CustomCollisionHeight; meleeWallrun->WeaponInactivePitchAimingLimit = save.MeleeWallrun.WeaponInactivePitchAimingLimit; meleeWallrun->RootMotionScale = save.MeleeWallrun.RootMotionScale; meleeWallrun->RootOffset = save.MeleeWallrun.RootOffset; meleeWallrun->SwanNeckEnableAtPitch = save.MeleeWallrun.SwanNeckEnableAtPitch; meleeWallrun->SwanNeckForward = save.MeleeWallrun.SwanNeckForward; meleeWallrun->SwanNeckDown = save.MeleeWallrun.SwanNeckDown; meleeWallrun->AnimBlendTime = save.MeleeWallrun.AnimBlendTime; meleeWallrun->StickyAngle = save.MeleeWallrun.StickyAngle; meleeWallrun->StickyAimedModifier = save.MeleeWallrun.StickyAimedModifier; meleeWallrun->Timer = save.MeleeWallrun.Timer; meleeWallrun->PawnPhysics = save.MeleeWallrun.PawnPhysics; meleeWallrun->HandPlantExtentCheckHeight = save.MeleeWallrun.HandPlantExtentCheckHeight; meleeWallrun->HandPlantExtentCheckWidth = save.MeleeWallrun.HandPlantExtentCheckWidth; meleeWallrun->HandPlantCheckDistance = save.MeleeWallrun.HandPlantCheckDistance; meleeWallrun->HandPlantCheckHeight = save.MeleeWallrun.HandPlantCheckHeight; meleeWallrun->ContextMoveDistanceMultiplier = save.MeleeWallrun.ContextMoveDistanceMultiplier; meleeWallrun->bCheckForGrab = save.MeleeWallrun.bCheckForGrab; meleeWallrun->bCheckForVaultOver = save.MeleeWallrun.bCheckForVaultOver; meleeWallrun->bCheckForWallClimb = save.MeleeWallrun.bCheckForWallClimb; meleeWallrun->bCheckForEdgeInVelDir = save.MeleeWallrun.bCheckForEdgeInVelDir; meleeWallrun->bCheckExitToFalling = save.MeleeWallrun.bCheckExitToFalling; meleeWallrun->bCheckExitToUncontrolledFalling = save.MeleeWallrun.bCheckExitToUncontrolledFalling; meleeWallrun->bCheckForSoftLanding = save.MeleeWallrun.bCheckForSoftLanding; meleeWallrun->bDelayTimeCheckAutoMoves = save.MeleeWallrun.bDelayTimeCheckAutoMoves; meleeWallrun->ExitToFallingZSpeed = save.MeleeWallrun.ExitToFallingZSpeed; meleeWallrun->SoftLandingZSpeedThreshold = save.MeleeWallrun.SoftLandingZSpeedThreshold; meleeWallrun->TimeToSoftLandingThreshold = save.MeleeWallrun.TimeToSoftLandingThreshold; meleeWallrun->MeleeState = save.MeleeWallrun.MeleeState; meleeWallrun->bTargeting = save.MeleeWallrun.bTargeting; meleeWallrun->bHitDetection = save.MeleeWallrun.bHitDetection; meleeWallrun->TargetingRotationSpeed = save.MeleeWallrun.TargetingRotationSpeed; meleeWallrun->TargetingMaxDistance = save.MeleeWallrun.TargetingMaxDistance; meleeWallrun->HitDetectionStart = save.MeleeWallrun.HitDetectionStart; meleeWallrun->HitDetectionLastStart = save.MeleeWallrun.HitDetectionLastStart; meleeWallrun->TraceOffset = save.MeleeWallrun.TraceOffset; meleeWallrun->TraceExtent = save.MeleeWallrun.TraceExtent; meleeWallrun->MeleeDamage = save.MeleeWallrun.MeleeDamage; meleeWallrun->MaxMeleeDistance = save.MeleeWallrun.MaxMeleeDistance; meleeWallrun->MaxMeleeAngle = save.MeleeWallrun.MaxMeleeAngle; meleeWallrun->CanDoMoveTaserLimit = save.MeleeWallrun.CanDoMoveTaserLimit; meleeWallrun->WallrunNormal = save.MeleeWallrun.WallrunNormal; meleeWallrun->bLeft = save.MeleeWallrun.bLeft;
	}

	auto wallClimb180TurnJump = static_cast<Classes::UTdMove_WallClimb180TurnJump *>(pawn->Moves[static_cast<size_t>(Classes::EMovement::MOVE_WallClimb180TurnJump)]);
	if (wallClimb180TurnJump) {
		wallClimb180TurnJump->SpeedModifier = save.WallClimb180TurnJump.SpeedModifier; wallClimb180TurnJump->FrictionModifier = save.WallClimb180TurnJump.FrictionModifier; wallClimb180TurnJump->bDebugMove = save.WallClimb180TurnJump.bDebugMove; wallClimb180TurnJump->bTriggersCompliment = save.WallClimb180TurnJump.bTriggersCompliment; wallClimb180TurnJump->bDisableCollision = save.WallClimb180TurnJump.bDisableCollision; wallClimb180TurnJump->bShouldHolsterWeapon = save.WallClimb180TurnJump.bShouldHolsterWeapon; wallClimb180TurnJump->bShouldUnzoom = save.WallClimb180TurnJump.bShouldUnzoom; wallClimb180TurnJump->bIsTimedMove = save.WallClimb180TurnJump.bIsTimedMove; wallClimb180TurnJump->bConstrainLook = save.WallClimb180TurnJump.bConstrainLook; wallClimb180TurnJump->bUseAbsoluteYawConstraint = save.WallClimb180TurnJump.bUseAbsoluteYawConstraint; wallClimb180TurnJump->bDisableActorCollision = save.WallClimb180TurnJump.bDisableActorCollision; wallClimb180TurnJump->bLookAtTargetLocation = save.WallClimb180TurnJump.bLookAtTargetLocation; wallClimb180TurnJump->bLookAtTargetAngle = save.WallClimb180TurnJump.bLookAtTargetAngle; wallClimb180TurnJump->bDisableFaceRotation = save.WallClimb180TurnJump.bDisableFaceRotation; wallClimb180TurnJump->bDisableControllerFacingPawnYawRotation = save.WallClimb180TurnJump.bDisableControllerFacingPawnYawRotation; wallClimb180TurnJump->bAvoidLedges = save.WallClimb180TurnJump.bAvoidLedges; wallClimb180TurnJump->bUsePreciseLocation = save.WallClimb180TurnJump.bUsePreciseLocation; wallClimb180TurnJump->bReachedPreciseLocation = save.WallClimb180TurnJump.bReachedPreciseLocation; wallClimb180TurnJump->bDebugPreciseLocation = save.WallClimb180TurnJump.bDebugPreciseLocation; wallClimb180TurnJump->bUsePreciseRotation = save.WallClimb180TurnJump.bUsePreciseRotation; wallClimb180TurnJump->bReachedPreciseRotation = save.WallClimb180TurnJump.bReachedPreciseRotation; wallClimb180TurnJump->bDelayRotationAndLocationCallback = save.WallClimb180TurnJump.bDelayRotationAndLocationCallback; wallClimb180TurnJump->bResetCameraLook = save.WallClimb180TurnJump.bResetCameraLook; wallClimb180TurnJump->bUseCustomCollision = save.WallClimb180TurnJump.bUseCustomCollision; wallClimb180TurnJump->bUseCameraCollision = save.WallClimb180TurnJump.bUseCameraCollision; wallClimb180TurnJump->bTwoHandedFullBodyAnimations = save.WallClimb180TurnJump.bTwoHandedFullBodyAnimations; wallClimb180TurnJump->bStickyAim = save.WallClimb180TurnJump.bStickyAim; wallClimb180TurnJump->bStopAfterMove = save.WallClimb180TurnJump.bStopAfterMove; wallClimb180TurnJump->bEnableFootPlacement = save.WallClimb180TurnJump.bEnableFootPlacement; wallClimb180TurnJump->bEnableAgainstWall = save.WallClimb180TurnJump.bEnableAgainstWall; wallClimb180TurnJump->bAllowPickup = save.WallClimb180TurnJump.bAllowPickup; wallClimb180TurnJump->AiAimPenalty = save.WallClimb180TurnJump.AiAimPenalty; wallClimb180TurnJump->AiAimOneShotPenalty = save.WallClimb180TurnJump.AiAimOneShotPenalty; wallClimb180TurnJump->MovementGroup = save.WallClimb180TurnJump.MovementGroup; wallClimb180TurnJump->FirstPersonDPG = save.WallClimb180TurnJump.FirstPersonDPG; wallClimb180TurnJump->FirstPersonLowerBodyDPG = save.WallClimb180TurnJump.FirstPersonLowerBodyDPG; wallClimb180TurnJump->PreciseLocationInterpMode = save.WallClimb180TurnJump.PreciseLocationInterpMode; wallClimb180TurnJump->AimMode = save.WallClimb180TurnJump.AimMode; wallClimb180TurnJump->DisableMovementTime = save.WallClimb180TurnJump.DisableMovementTime; wallClimb180TurnJump->DisableLookTime = save.WallClimb180TurnJump.DisableLookTime; wallClimb180TurnJump->LastCanDoMoveTime = save.WallClimb180TurnJump.LastCanDoMoveTime; wallClimb180TurnJump->LastStopMoveTime = save.WallClimb180TurnJump.LastStopMoveTime; wallClimb180TurnJump->MoveActiveTime = save.WallClimb180TurnJump.MoveActiveTime; wallClimb180TurnJump->RedoMoveTime = save.WallClimb180TurnJump.RedoMoveTime; wallClimb180TurnJump->PreciseLocationSpeed = save.WallClimb180TurnJump.PreciseLocationSpeed; wallClimb180TurnJump->PreciseLocation = save.WallClimb180TurnJump.PreciseLocation; wallClimb180TurnJump->PreciseRotationInterpolationTime = save.WallClimb180TurnJump.PreciseRotationInterpolationTime; wallClimb180TurnJump->PreciseRotation = save.WallClimb180TurnJump.PreciseRotation; wallClimb180TurnJump->LookAtTargetLocation = save.WallClimb180TurnJump.LookAtTargetLocation; wallClimb180TurnJump->LookAtTargetAngle = save.WallClimb180TurnJump.LookAtTargetAngle; wallClimb180TurnJump->LookAtTargetInterpolationTime = save.WallClimb180TurnJump.LookAtTargetInterpolationTime; wallClimb180TurnJump->LookAtTargetDuration = save.WallClimb180TurnJump.LookAtTargetDuration; wallClimb180TurnJump->CancelResetCameraLookTime = save.WallClimb180TurnJump.CancelResetCameraLookTime; wallClimb180TurnJump->ResetCameraLookTime = save.WallClimb180TurnJump.ResetCameraLookTime; wallClimb180TurnJump->MinLookConstraint = save.WallClimb180TurnJump.MinLookConstraint; wallClimb180TurnJump->MaxLookConstraint = save.WallClimb180TurnJump.MaxLookConstraint; wallClimb180TurnJump->CustomCollisionRadius = save.WallClimb180TurnJump.CustomCollisionRadius; wallClimb180TurnJump->CustomCollisionHeight = save.WallClimb180TurnJump.CustomCollisionHeight; wallClimb180TurnJump->WeaponInactivePitchAimingLimit = save.WallClimb180TurnJump.WeaponInactivePitchAimingLimit; wallClimb180TurnJump->RootMotionScale = save.WallClimb180TurnJump.RootMotionScale; wallClimb180TurnJump->RootOffset = save.WallClimb180TurnJump.RootOffset; wallClimb180TurnJump->SwanNeckEnableAtPitch = save.WallClimb180TurnJump.SwanNeckEnableAtPitch; wallClimb180TurnJump->SwanNeckForward = save.WallClimb180TurnJump.SwanNeckForward; wallClimb180TurnJump->SwanNeckDown = save.WallClimb180TurnJump.SwanNeckDown; wallClimb180TurnJump->AnimBlendTime = save.WallClimb180TurnJump.AnimBlendTime; wallClimb180TurnJump->StickyAngle = save.WallClimb180TurnJump.StickyAngle; wallClimb180TurnJump->StickyAimedModifier = save.WallClimb180TurnJump.StickyAimedModifier; wallClimb180TurnJump->Timer = save.WallClimb180TurnJump.Timer; wallClimb180TurnJump->PawnPhysics = save.WallClimb180TurnJump.PawnPhysics; wallClimb180TurnJump->HandPlantExtentCheckHeight = save.WallClimb180TurnJump.HandPlantExtentCheckHeight; wallClimb180TurnJump->HandPlantExtentCheckWidth = save.WallClimb180TurnJump.HandPlantExtentCheckWidth; wallClimb180TurnJump->HandPlantCheckDistance = save.WallClimb180TurnJump.HandPlantCheckDistance; wallClimb180TurnJump->HandPlantCheckHeight = save.WallClimb180TurnJump.HandPlantCheckHeight; wallClimb180TurnJump->ContextMoveDistanceMultiplier = save.WallClimb180TurnJump.ContextMoveDistanceMultiplier; wallClimb180TurnJump->bCheckForGrab = save.WallClimb180TurnJump.bCheckForGrab; wallClimb180TurnJump->bCheckForVaultOver = save.WallClimb180TurnJump.bCheckForVaultOver; wallClimb180TurnJump->bCheckForWallClimb = save.WallClimb180TurnJump.bCheckForWallClimb; wallClimb180TurnJump->bCheckForEdgeInVelDir = save.WallClimb180TurnJump.bCheckForEdgeInVelDir; wallClimb180TurnJump->bCheckExitToFalling = save.WallClimb180TurnJump.bCheckExitToFalling; wallClimb180TurnJump->bCheckExitToUncontrolledFalling = save.WallClimb180TurnJump.bCheckExitToUncontrolledFalling; wallClimb180TurnJump->bCheckForSoftLanding = save.WallClimb180TurnJump.bCheckForSoftLanding; wallClimb180TurnJump->bDelayTimeCheckAutoMoves = save.WallClimb180TurnJump.bDelayTimeCheckAutoMoves; wallClimb180TurnJump->ExitToFallingZSpeed = save.WallClimb180TurnJump.ExitToFallingZSpeed; wallClimb180TurnJump->SoftLandingZSpeedThreshold = save.WallClimb180TurnJump.SoftLandingZSpeedThreshold; wallClimb180TurnJump->TimeToSoftLandingThreshold = save.WallClimb180TurnJump.TimeToSoftLandingThreshold; wallClimb180TurnJump->JumpOffZHeight = save.WallClimb180TurnJump.JumpOffZHeight; wallClimb180TurnJump->JumpPushAwaySpeed = save.WallClimb180TurnJump.JumpPushAwaySpeed; wallClimb180TurnJump->JumpTimeWindow = save.WallClimb180TurnJump.JumpTimeWindow; wallClimb180TurnJump->bJumpingFromWall = save.WallClimb180TurnJump.bJumpingFromWall; wallClimb180TurnJump->WantedJumpDir = save.WallClimb180TurnJump.WantedJumpDir;
	}
}

static void OnTick(float) {
	auto pawn = Engine::GetPlayerPawn();
	if (!pawn) {
		return;
	}

	auto controller = Engine::GetPlayerController();
	if (!controller) {
		return;
	}

	static Trainer::Save save;
	if (Engine::IsKeyDown(0x34)) {
		Save(save, pawn, controller);
	}

	if (Engine::IsKeyDown(0x35)) {
		Load(save, pawn, controller);
	}
}

bool Trainer::Initialize() {
	Engine::OnTick(OnTick);

	return true;
}

std::string Trainer::GetName() {
	return "Trainer";
}