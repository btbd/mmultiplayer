#pragma once

// Mirror's Edge (1.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.AnimNode
// 0x0080 (0x00BC - 0x003C)
class UAnimNode : public UObject
{
public:
	struct FName                                       ClassName;                                                // 0x003C(0x0008) (Edit, EditConst)
	class USkeletalMeshComponent*                      SkelComponent;                                            // 0x0044(0x0004) (ExportObject, Transient, Component, EditInline)
	TArray<class UAnimNodeBlendBase*>                  ParentNodes;                                              // 0x0048(0x000C) (Transient, NeedCtorLink)
	struct FName                                       NodeName;                                                 // 0x0054(0x0008) (Edit)
	TArray<struct FBoneAtom>                           CachedBoneAtoms;                                          // 0x005C(0x000C) (Transient, NeedCtorLink)
	struct FBoneAtom                                   CachedRootMotionDelta;                                    // 0x0068(0x0020) (Transient)
	int                                                bCachedHasRootMotion;                                     // 0x0088(0x0004) (Transient)
	unsigned long                                      bRelevant : 1;                                            // 0x008C(0x0004) (Const, Transient)
	unsigned long                                      bJustBecameRelevant : 1;                                  // 0x008C(0x0004) (Const, Transient)
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bTickDuringPausedAnims : 1;                               // 0x008C(0x0004) (Edit)
	int                                                NodeTickTag;                                              // 0x0090(0x0004) (Const, Transient)
	int                                                NodeCachedAtomsTag;                                       // 0x0094(0x0004) (Const, Transient)
	float                                              NodeTotalWeight;                                          // 0x0098(0x0004) (Const)
	float                                              TotalWeightAccumulator;                                   // 0x009C(0x0004) (Const, Transient)
	int                                                DrawWidth;                                                // 0x00A0(0x0004)
	int                                                DrawHeight;                                               // 0x00A4(0x0004)
	int                                                NodePosX;                                                 // 0x00A8(0x0004)
	int                                                NodePosY;                                                 // 0x00AC(0x0004)
	int                                                OutDrawY;                                                 // 0x00B0(0x0004)
	int                                                InstanceVersionNumber;                                    // 0x00B4(0x0004) (Const)
	int                                                SearchTag;                                                // 0x00B8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNode");
		return ptr;
	}


	void StopAnim();
	void PlayAnim(bool bLoop, float Rate, float StartTime);
	class UAnimNode* FindAnimNode(const struct FName& InNodeName);
	void EditorProfileUpdated(const struct FName& ProfileName);
	void OnCeaseRelevant();
	void OnBecomeRelevant();
	void OnInit();
};


// Class Engine.Actor
// 0x0184 (0x01C0 - 0x003C)
class AActor : public UObject
{
public:
	unsigned long                                      bExludeHandMoves : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bExludeFootMoves : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPhysXMutatable : 1;                                      // 0x003C(0x0004) (Edit)
	unsigned long                                      bStatic : 1;                                              // 0x003C(0x0004) (Const)
	unsigned long                                      bHidden : 1;                                              // 0x003C(0x0004) (Edit, Const, Net)
	unsigned long                                      bNoDelete : 1;                                            // 0x003C(0x0004) (Const)
	unsigned long                                      bDeleteMe : 1;                                            // 0x003C(0x0004) (Const)
	unsigned long                                      bTicked : 1;                                              // 0x003C(0x0004) (Const, Transient)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x003C(0x0004) (Const)
	unsigned long                                      bStasis : 1;                                              // 0x003C(0x0004)
	unsigned long                                      bWorldGeometry : 1;                                       // 0x003C(0x0004)
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                                // 0x003C(0x0004)
	unsigned long                                      bOrientOnSlope : 1;                                       // 0x003C(0x0004)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x003C(0x0004) (Const)
	unsigned long                                      bPushedByEncroachers : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bDestroyedByInterpActor : 1;                              // 0x003C(0x0004)
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                          // 0x003C(0x0004) (Const)
	unsigned long                                      bIsMoving : 1;                                            // 0x003C(0x0004) (Const)
	unsigned long                                      bAlwaysEncroachCheck : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bHasAlternateTargetLocation : 1;                          // 0x003C(0x0004)
	unsigned long                                      bNetTemporary : 1;                                        // 0x003C(0x0004) (Const)
	unsigned long                                      bOnlyRelevantToOwner : 1;                                 // 0x003C(0x0004) (Const)
	unsigned long                                      bNetDirty : 1;                                            // 0x003C(0x0004) (Transient)
	unsigned long                                      bAlwaysRelevant : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bReplicateInstigator : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bReplicateMovement : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bSkipActorPropertyReplication : 1;                        // 0x003C(0x0004)
	unsigned long                                      bUpdateSimulatedPosition : 1;                             // 0x003C(0x0004)
	unsigned long                                      bTearOff : 1;                                             // 0x003C(0x0004) (Net)
	unsigned long                                      bOnlyDirtyReplication : 1;                                // 0x003C(0x0004)
	unsigned long                                      bDemoRecording : 1;                                       // 0x003C(0x0004) (Transient)
	unsigned long                                      bDemoOwner : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bForceDemoRelevant : 1;                                   // 0x0040(0x0004)
	unsigned long                                      bNetInitialRotation : 1;                                  // 0x0040(0x0004) (Const)
	unsigned long                                      bReplicateRigidBodyLocation : 1;                          // 0x0040(0x0004)
	unsigned long                                      bKillDuringLevelTransition : 1;                           // 0x0040(0x0004)
	unsigned long                                      bExchangedRoles : 1;                                      // 0x0040(0x0004) (Const)
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1;         // 0x0040(0x0004) (Edit)
	unsigned long                                      bIgnoreForAITraces : 1;                                   // 0x0040(0x0004) (Edit)
	unsigned long                                      bInteractable : 1;                                        // 0x0040(0x0004) (Edit)
	unsigned long                                      bLOIObject : 1;                                           // 0x0040(0x0004) (Edit, Const)
	unsigned long                                      bDebug : 1;                                               // 0x0040(0x0004) (Edit)
	unsigned long                                      bPostRenderIfNotVisible : 1;                              // 0x0040(0x0004)
	unsigned long                                      bForceNetUpdate : 1;                                      // 0x0040(0x0004) (Transient)
	unsigned long                                      bPendingNetUpdate : 1;                                    // 0x0040(0x0004) (Const, Transient)
	unsigned long                                      bHardAttach : 1;                                          // 0x0040(0x0004) (Edit, Const, Net)
	unsigned long                                      bIgnoreBaseRotation : 1;                                  // 0x0040(0x0004) (Edit)
	unsigned long                                      bShadowParented : 1;                                      // 0x0040(0x0004) (Edit)
	unsigned long                                      bCanBeAdheredTo : 1;                                      // 0x0040(0x0004)
	unsigned long                                      bCanBeFrictionedTo : 1;                                   // 0x0040(0x0004)
	unsigned long                                      bHurtEntry : 1;                                           // 0x0040(0x0004)
	unsigned long                                      bGameRelevant : 1;                                        // 0x0040(0x0004)
	unsigned long                                      bMovable : 1;                                             // 0x0040(0x0004) (Const)
	unsigned long                                      bDestroyInPainVolume : 1;                                 // 0x0040(0x0004)
	unsigned long                                      bCanBeDamaged : 1;                                        // 0x0040(0x0004)
	unsigned long                                      bShouldBaseAtStartup : 1;                                 // 0x0040(0x0004)
	unsigned long                                      bPendingDelete : 1;                                       // 0x0040(0x0004)
	unsigned long                                      bCanTeleport : 1;                                         // 0x0040(0x0004)
	unsigned long                                      bAlwaysTick : 1;                                          // 0x0040(0x0004) (Const)
	unsigned long                                      bBlocksNavigation : 1;                                    // 0x0040(0x0004) (Edit)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x0040(0x0004) (Edit, Const, Transient)
	unsigned long                                      bCollideWhenPlacing : 1;                                  // 0x0040(0x0004)
	unsigned long                                      bCollideActors : 1;                                       // 0x0040(0x0004) (Const, Net)
	unsigned long                                      bCollideWorld : 1;                                        // 0x0040(0x0004) (Net)
	unsigned long                                      bCollideComplex : 1;                                      // 0x0044(0x0004) (Edit)
	unsigned long                                      bBlockActors : 1;                                         // 0x0044(0x0004) (Net)
	unsigned long                                      bProjTarget : 1;                                          // 0x0044(0x0004) (Net)
	unsigned long                                      bBlocksTeleport : 1;                                      // 0x0044(0x0004)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x0044(0x0004) (Edit)
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                        // 0x0044(0x0004) (Edit)
	unsigned long                                      bComponentOutsideWorld : 1;                               // 0x0044(0x0004) (Const)
	unsigned long                                      bBounce : 1;                                              // 0x0044(0x0004)
	unsigned long                                      bJustTeleported : 1;                                      // 0x0044(0x0004) (Const)
	unsigned long                                      bNetInitial : 1;                                          // 0x0044(0x0004) (Const)
	unsigned long                                      bNetOwner : 1;                                            // 0x0044(0x0004) (Const, Net)
	unsigned long                                      bHiddenEd : 1;                                            // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bHiddenEdGroup : 1;                                       // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bHiddenEdCustom : 1;                                      // 0x0044(0x0004) (Const)
	unsigned long                                      bEdShouldSnap : 1;                                        // 0x0044(0x0004) (Edit)
	unsigned long                                      bTempEditor : 1;                                          // 0x0044(0x0004) (Const, Transient)
	unsigned long                                      bPathColliding : 1;                                       // 0x0044(0x0004) (Edit)
	unsigned long                                      bPathTemp : 1;                                            // 0x0044(0x0004) (Transient)
	unsigned long                                      bScriptInitialized : 1;                                   // 0x0044(0x0004)
	unsigned long                                      bLockLocation : 1;                                        // 0x0044(0x0004) (Edit)
	TArray<class UActorComponent*>                     Components;                                               // 0x0048(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UActorComponent*>                     AllComponents;                                            // 0x0054(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	struct FRenderCommandFence                         DetachFence;                                              // 0x0060(0x0004) (Const, Native)
	float                                              CustomTimeDilation;                                       // 0x0064(0x0004)
	TEnumAsByte<EPhysics>                              Physics;                                                  // 0x0068(0x0001) (Edit, Const, Net)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0069(0x0001) (Net)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x006A(0x0001) (Net)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x006B(0x0001) (Edit, Const, Transient)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x006C(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	class AActor*                                      Owner;                                                    // 0x0070(0x0004) (Const, Net)
	class AActor*                                      Base;                                                     // 0x0074(0x0004) (Edit, Const, Net)
	TArray<struct FTimerData>                          Timers;                                                   // 0x0078(0x000C) (Const, NeedCtorLink)
	int                                                NetTag;                                                   // 0x0084(0x0004) (Const, Transient)
	float                                              NetUpdateTime;                                            // 0x0088(0x0004) (Const)
	float                                              NetUpdateFrequency;                                       // 0x008C(0x0004)
	float                                              NetPriority;                                              // 0x0090(0x0004)
	float                                              LastNetUpdateTime;                                        // 0x0094(0x0004) (Const, Transient)
	class APawn*                                       Instigator;                                               // 0x0098(0x0004) (Net)
	class AWorldInfo*                                  WorldInfo;                                                // 0x009C(0x0004) (Const, Transient)
	float                                              LifeSpan;                                                 // 0x00A0(0x0004)
	float                                              CreationTime;                                             // 0x00A4(0x0004) (Const)
	float                                              LastRenderTime;                                           // 0x00A8(0x0004) (Transient)
	struct FName                                       Tag;                                                      // 0x00AC(0x0008) (Edit)
	struct FName                                       InitialState;                                             // 0x00B4(0x0008)
	struct FName                                       Group;                                                    // 0x00BC(0x0008) (Edit)
	TArray<class AActor*>                              Touching;                                                 // 0x00C4(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class AActor*>                              Children;                                                 // 0x00D0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LatentFloat;                                              // 0x00DC(0x0004) (Const)
	class UAnimNodeSequence*                           LatentSeqNode;                                            // 0x00E0(0x0004) (Const)
	class APhysicsVolume*                              PhysicsVolume;                                            // 0x00E4(0x0004) (Const, Transient)
	struct FVector                                     Location;                                                 // 0x00E8(0x000C) (Edit, Const, Net)
	struct FRotator                                    Rotation;                                                 // 0x00F4(0x000C) (Edit, Const, Net)
	struct FVector                                     Velocity;                                                 // 0x0100(0x000C) (Net)
	struct FVector                                     Acceleration;                                             // 0x010C(0x000C)
	struct FVector                                     AngularVelocity;                                          // 0x0118(0x000C) (Const, Transient)
	class USkeletalMeshComponent*                      BaseSkelComponent;                                        // 0x0124(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       BaseBoneName;                                             // 0x0128(0x0008) (Edit)
	TArray<class AActor*>                              Attached;                                                 // 0x0130(0x000C) (Const, NeedCtorLink)
	struct FVector                                     RelativeLocation;                                         // 0x013C(0x000C) (Const, Net)
	struct FRotator                                    RelativeRotation;                                         // 0x0148(0x000C) (Const, Net)
	float                                              DrawScale;                                                // 0x0154(0x0004) (Edit, Const, Net)
	struct FVector                                     DrawScale3D;                                              // 0x0158(0x000C) (Edit, Const)
	struct FVector                                     PrePivot;                                                 // 0x0164(0x000C) (Edit, Const)
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x0170(0x0004) (Edit, ExportObject, Component, EditInline)
	int                                                OverlapTag;                                               // 0x0174(0x0004) (Native)
	struct FRotator                                    RotationRate;                                             // 0x0178(0x000C) (Edit)
	struct FRotator                                    DesiredRotation;                                          // 0x0184(0x000C) (Edit)
	class AActor*                                      PendingTouch;                                             // 0x0190(0x0004)
	float                                              MinDistForNetRBCorrection;                                // 0x0194(0x0004) (Edit)
	class UClass*                                      MessageClass;                                             // 0x0198(0x0004)
	TArray<class UClass*>                              SupportedEvents;                                          // 0x019C(0x000C) (Const, NeedCtorLink)
	TArray<class USequenceEvent*>                      GeneratedEvents;                                          // 0x01A8(0x000C) (Const, NeedCtorLink)
	TArray<class USeqAct_Latent*>                      LatentActions;                                            // 0x01B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void ActivateLOI();
	void AssignPlayerToLOI(class AActor* Player);
	void InitLOI();
	struct FGuid STATIC_GetPackageGuid(const struct FName& PackageName);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta);
	void RootMotionModeChanged(class USkeletalMeshComponent* SkelComp);
	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void SetHUDLocation(const struct FVector& NewHUDLocation);
	void OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void InterpolationChanged(class USeqAct_Interp* InterpAction);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction);
	void PickedUpBy(class APawn* P);
	void SpawnedByKismet();
	struct FVector GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc);
	void FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation);
	void NotifyLocalPlayerTeamReceived();
	struct FString GetLocationStringFor(class APlayerReplicationInfo* PRI);
	unsigned char ScriptGetTeamNum();
	unsigned char GetTeamNum();
	void PawnBaseDied();
	bool IsPlayerOwned();
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	bool IsStationary();
	class UFaceFXAsset* GetActorFaceFXAsset();
	bool IsActorPlayingFaceFXAnim();
	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName);
	void FinishAnimControl();
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void OnAnimPlay(class UAnimNodeSequence* SeqNode);
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnMakeNoise(class USeqAct_MakeNoise* Action);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnAttachToActor(class USeqAct_AttachToActor* Action);
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnChangeCollision(class USeqAct_ChangeCollision* Action);
	void OnSetPhysics(class USeqAct_SetPhysics* Action);
	void OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnHealDamage(class USeqAct_HealDamage* Action);
	void OnCauseDamage(class USeqAct_CauseDamage* Action);
	void ShutDown();
	void SetNetUpdateTime(float NewUpdateTime);
	void ForceNetRelevant();
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction);
	bool FindEventsOfClass(class UClass* EventClass, bool bIncludeDisabled, TArray<class USequenceEvent*>* out_EventList);
	bool ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool bTest, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, TArray<class USequenceEvent*>* ActivatedEvents);
	bool TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents);
	float TimeSince(float Time);
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float CullDistance);
	bool CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation, float CullDistance);
	bool CanSplash();
	void PlayTeleportEffect(bool bOut, bool bSound);
	bool IsInPain();
	bool IsInVolume(class AVolume* aVolume);
	void Reset();
	class UAudioComponent* GetFaceFXAudioComponent();
	void ModifyHearSoundComponent(class UAudioComponent* AC);
	struct FString GetPhysicsName();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	struct FString GetDebugName();
	void SetGRI(class AGameReplicationInfo* GRI);
	void MatchStarting();
	struct FString STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void STATIC_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text);
	struct FString GetHumanReadableName();
	struct FString GetItemName(const struct FString& FullName);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void EndViewTarget(class APlayerController* PC);
	void BecomeViewTarget(class APlayerController* PC);
	bool CheckForErrors();
	void DebugFreezeGame();
	float GetGravityZ();
	void CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser);
	bool HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void KilledBy(class APawn* EventInstigator);
	bool HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
	bool StopsProjectile(class AProjectile* P);
	void NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt);
	void ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance);
	void SetInitialState();
	void PostBeginPlay();
	void BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void PreBeginPlay();
	bool FindActorsOfClass(class UClass* ActorClass, TArray<class AActor*>* out_Actors);
	void LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC);
	void AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent);
	void ComponentList(class UClass* BaseClass, class UActorComponent** out_Component);
	void OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** out_Actor);
	void CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class AActor** Actor);
	void VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** Actor);
	void VisibleActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, class AActor** Actor);
	void TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo);
	void TouchingActors(class UClass* BaseClass, class AActor** Actor);
	void BasedActors(class UClass* BaseClass, class AActor** Actor);
	void ChildActors(class UClass* BaseClass, class AActor** Actor);
	void DynamicActors(class UClass* BaseClass, class AActor** Actor);
	void AllActors(class UClass* BaseClass, class AActor** Actor);
	struct FString GetURLMap();
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool PreTeleport(class ATeleporter* InTeleporter);
	struct FVector GetDestination(class AController* C);
	bool SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, struct FVector* TossVelocity);
	bool PlayerCanSeeMe();
	void MakeNoise(float Loudness, const struct FName& NoiseType);
	void PlaySound(class USoundCue* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant, bool bPlayOnSelf);
	class UAudioComponent* CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf);
	float GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj);
	float GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj);
	bool IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj);
	void ClearTimer(const struct FName& inTimerFunc, class UObject* inObj);
	void SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj);
	void TornOff();
	bool Destroy();
	class AActor* Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail);
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
	void GetComponentsBoundingBox(struct FBox* ActorBox);
	bool IsOverlapping(class AActor* A);
	bool ContainsPoint(const struct FVector& Spot);
	bool FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation);
	bool FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet);
	bool PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent);
	bool TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo);
	class AActor* Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo);
	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void VolumeBasedDestroy(class APhysicsVolume* PV);
	bool UsedBy(class APawn* User);
	bool OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual);
	bool ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator* out_Rot);
	void RanInto(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void CollisionChanged();
	class AActor* SpecialHandling(class APawn* Other);
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	void BaseChange();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void UnTouch(class AActor* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Falling();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Timer();
	void Tick(float DeltaTime);
	void LostChild(class AActor* Other);
	void GainedChild(class AActor* Other);
	void Destroyed();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void DetachComponent(class UActorComponent* ExComponent);
	void AttachComponent(class UActorComponent* NewComponent);
	void UnClock(float* Time);
	void Clock(float* Time);
	void SetPhysics(TEnumAsByte<EPhysics> newPhysics);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetHidden(bool bNewHidden);
	void ChartData(const struct FString& DataName, float DataValue);
	void STATIC_DrawDebugArc(const struct FVector& Origin, const struct FVector& Up, const struct FVector& Forward, float Size, int Degrees, int ArcDegreesResolution, unsigned char R, unsigned char G, unsigned char B, bool bUseDistanceMarker, bool bPersistentLines);
	void STATIC_DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines);
	void STATIC_DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugSphereTime(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, float timeToLive);
	void STATIC_DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines);
	void STATIC_DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugBoxTime(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, float timeToLive);
	void STATIC_DrawDebugLineTime(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, float timeToLive);
	void STATIC_DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_FlushPersistentDebugLines();
	void SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd);
	void ReplicatedEvent(const struct FName& VarName);
	bool IsOwnedBy(class AActor* TestActor);
	class AActor* GetBaseMost();
	bool IsBasedOn(class AActor* TestActor);
	void FindBase();
	void SetOwner(class AActor* NewOwner);
	void SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName);
	float GetTerminalVelocity();
	void AutonomousPhysics(float DeltaSeconds);
	bool MoveSmooth(const struct FVector& Delta);
	void SetHardAttach(bool bNewHardAttach);
	bool SetRelativeLocation(const struct FVector& NewLocation);
	bool SetRelativeRotation(const struct FRotator& NewRotation);
	void SetZone(bool bForceRefresh);
	TEnumAsByte<EMoveDir> MovingWhichWay(float* Amount);
	bool SetRotation(const struct FRotator& NewRotation);
	bool SetLocation(const struct FVector& NewLocation);
	bool Move(const struct FVector& Delta);
	void SetDrawScale3D(const struct FVector& NewScale3D);
	void SetDrawScale(float NewScale);
	void SetCollisionType(TEnumAsByte<ECollisionType> NewCollisionType);
	void SetCollisionSize(float NewRadius, float NewHeight);
	void SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers);
	void FinishAnim(class UAnimNodeSequence* SeqNode);
	void Sleep(float Seconds);
	struct FString ConsoleCommand(const struct FString& Command, bool bWriteToLog);
	void ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly);
};


// Class Engine.NavigationPoint
// 0x0154 (0x0314 - 0x01C0)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                            // 0x01C0(0x0004) (Transient)
	unsigned long                                      bTransientEndPoint : 1;                                   // 0x01C0(0x0004) (Transient)
	unsigned long                                      bHideEditorPaths : 1;                                     // 0x01C0(0x0004) (Transient)
	unsigned long                                      bCanReach : 1;                                            // 0x01C0(0x0004) (Transient)
	unsigned long                                      bBlocked : 1;                                             // 0x01C0(0x0004) (Edit)
	unsigned long                                      bOneWayPath : 1;                                          // 0x01C0(0x0004) (Edit)
	unsigned long                                      bNeverUseStrafing : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bAlwaysUseStrafing : 1;                                   // 0x01C0(0x0004)
	unsigned long                                      bForceNoStrafing : 1;                                     // 0x01C0(0x0004) (Const)
	unsigned long                                      bAutoBuilt : 1;                                           // 0x01C0(0x0004) (Const)
	unsigned long                                      bSpecialMove : 1;                                         // 0x01C0(0x0004)
	unsigned long                                      bNoAutoConnect : 1;                                       // 0x01C0(0x0004)
	unsigned long                                      bNotBased : 1;                                            // 0x01C0(0x0004) (Const)
	unsigned long                                      bPathsChanged : 1;                                        // 0x01C0(0x0004) (Const)
	unsigned long                                      bDestinationOnly : 1;                                     // 0x01C0(0x0004)
	unsigned long                                      bSourceOnly : 1;                                          // 0x01C0(0x0004)
	unsigned long                                      bSpecialForced : 1;                                       // 0x01C0(0x0004)
	unsigned long                                      bMustBeReachable : 1;                                     // 0x01C0(0x0004)
	unsigned long                                      bBlockable : 1;                                           // 0x01C0(0x0004)
	unsigned long                                      bFlyingPreferred : 1;                                     // 0x01C0(0x0004)
	unsigned long                                      bMayCausePain : 1;                                        // 0x01C0(0x0004)
	unsigned long                                      bAlreadyVisited : 1;                                      // 0x01C0(0x0004) (Transient)
	unsigned long                                      bVehicleDestination : 1;                                  // 0x01C0(0x0004) (Edit)
	unsigned long                                      bMakeSourceOnly : 1;                                      // 0x01C0(0x0004) (Edit)
	unsigned long                                      bMustTouchToReach : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bCanWalkOnToReach : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bBuildLongPaths : 1;                                      // 0x01C0(0x0004)
	unsigned long                                      bBlockedForVehicles : 1;                                  // 0x01C0(0x0004) (Edit)
	unsigned long                                      bPreferredVehiclePath : 1;                                // 0x01C0(0x0004) (Edit)
	unsigned long                                      bIsSkippable : 1;                                         // 0x01C0(0x0004)
	unsigned long                                      bNeedsVelocityToTrigger : 1;                              // 0x01C0(0x0004)
	unsigned long                                      bIsSpecialMove : 1;                                       // 0x01C0(0x0004)
	unsigned long                                      bCanBePlayerNavigationPoint : 1;                          // 0x01C4(0x0004)
	unsigned long                                      bHasCrossLevelPaths : 1;                                  // 0x01C4(0x0004) (Const)
	struct FNavigationOctreeObject                     NavOctreeObject;                                          // 0x01C8(0x0034) (Const, Native, Transient)
	TArray<class UReachSpec*>                          PathList;                                                 // 0x01FC(0x000C) (Edit, Const, EditConst, DuplicateTransient, NeedCtorLink, EditInline)
	TArray<struct FNavReference>                       EditorProscribedPaths;                                    // 0x0208(0x000C) (DuplicateTransient, NeedCtorLink)
	TArray<struct FNavReference>                       EditorForcedPaths;                                        // 0x0214(0x000C) (DuplicateTransient, NeedCtorLink)
	TArray<class AVolume*>                             VolumeList;                                               // 0x0220(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	int                                                visitedWeight;                                            // 0x022C(0x0004)
	int                                                bestPathWeight;                                           // 0x0230(0x0004) (Const)
	class ANavigationPoint*                            nextNavigationPoint;                                      // 0x0234(0x0004) (Const)
	class ANavigationPoint*                            nextOrdered;                                              // 0x0238(0x0004) (Const)
	class ANavigationPoint*                            prevOrdered;                                              // 0x023C(0x0004) (Const)
	class ANavigationPoint*                            previousPath;                                             // 0x0240(0x0004) (Const)
	int                                                Cost;                                                     // 0x0244(0x0004)
	int                                                ExtraCost;                                                // 0x0248(0x0004) (Edit)
	int                                                TransientCost;                                            // 0x024C(0x0004) (Transient)
	int                                                FearCost;                                                 // 0x0250(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0254(0x003C) UNKNOWN PROPERTY: MapProperty Engine.NavigationPoint.CostArray
	class ADroppedPickup*                              InventoryCache;                                           // 0x0290(0x0004)
	float                                              InventoryDist;                                            // 0x0294(0x0004)
	float                                              LastDetourWeight;                                         // 0x0298(0x0004) (Const)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x029C(0x0004) (ExportObject, Component, EditInline)
	class AObjective*                                  NearestObjective;                                         // 0x02A0(0x0004)
	float                                              ObjectiveDistance;                                        // 0x02A4(0x0004)
	struct FCylinder                                   MaxPathSize;                                              // 0x02A8(0x0008) (Edit, Const, EditConst)
	struct FGuid                                       NavGuid;                                                  // 0x02B0(0x0010) (Edit, Const, EditConst, DuplicateTransient)
	class USpriteComponent*                            GoodSprite;                                               // 0x02C0(0x0004) (Const, ExportObject, Component, EditInline)
	class USpriteComponent*                            BadSprite;                                                // 0x02C4(0x0004) (Const, ExportObject, Component, EditInline)
	int                                                NetworkID;                                                // 0x02C8(0x0004) (Edit, Const, EditConst)
	class APawn*                                       AnchoredPawn;                                             // 0x02CC(0x0004) (Transient)
	float                                              LastAnchoredPawnTime;                                     // 0x02D0(0x0004) (Transient)
	struct FString                                     Abbrev;                                                   // 0x02D4(0x000C) (NeedCtorLink)
	float                                              IgnoreAsTaserSpotTimeStamp;                               // 0x02E0(0x0004)
	TArray<class ANavigationPoint*>                    CanSeeMePoints;                                           // 0x02E4(0x000C) (Edit, NeedCtorLink)
	TArray<class ANavigationPoint*>                    VisiblePoints;                                            // 0x02F0(0x000C) (Edit, NeedCtorLink)
	int                                                Visibility;                                               // 0x02FC(0x0004) (Edit)
	int                                                Exposure;                                                 // 0x0300(0x0004) (Edit)
	int                                                UsageCount;                                               // 0x0304(0x0004) (Transient)
	TArray<class AController*>                         Users;                                                    // 0x0308(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPoint");
		return ptr;
	}


	bool OnMatchingNetworks(class ANavigationPoint* Nav);
	void OnToggle(class USeqAct_Toggle* inAction);
	bool STATIC_GetAllNavInRadius(class AActor* chkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize, TArray<class ANavigationPoint*>* out_NavList);
	class ANavigationPoint* STATIC_GetNearestNavToPoint(class AActor* chkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList);
	class ANavigationPoint* STATIC_GetNearestNavToActor(class AActor* chkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist);
	bool IsAvailableTo(class AActor* chkActor);
	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	float DetourWeight(class APawn* Other, float PathWeight);
	bool Accept(class AActor* Incoming, class AActor* Source);
	int SpecialCost(class APawn* Seeker, class UReachSpec* Path);
	bool CanTeleport(class AActor* A);
	class UReachSpec* GetReachSpecTo(class ANavigationPoint* Nav);
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
	bool CanSee(class ANavigationPoint* Other);
	bool SeenFrom(class ANavigationPoint* Other);
	bool CanBeSeenFrom(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset);
	bool HasVisibilityTo(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset);
	void Unoccupy(class AController* OldUser);
	void Occupy(class AController* NewUser);
	int Usage();
};


// Class Engine.PathNode
// 0x0000 (0x0314 - 0x0314)
class APathNode : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode");
		return ptr;
	}

};


// Class Engine.CoverLink
// 0x0094 (0x03A8 - 0x0314)
class ACoverLink : public ANavigationPoint
{
public:
	TArray<struct FCoverSlot>                          Slots;                                                    // 0x0314(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class AController*>                         Claims;                                                   // 0x0320(0x000C) (NeedCtorLink)
	unsigned long                                      bDisabled : 1;                                            // 0x032C(0x0004) (Edit)
	unsigned long                                      bClaimAllSlots : 1;                                       // 0x032C(0x0004) (Edit)
	unsigned long                                      bAutoSort : 1;                                            // 0x032C(0x0004)
	unsigned long                                      bAutoAdjust : 1;                                          // 0x032C(0x0004) (Edit)
	unsigned long                                      bForceCoverActions : 1;                                   // 0x032C(0x0004) (Edit)
	unsigned long                                      bCircular : 1;                                            // 0x032C(0x0004)
	unsigned long                                      bLooped : 1;                                              // 0x032C(0x0004)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x032C(0x0004)
	unsigned long                                      bDynamicCover : 1;                                        // 0x032C(0x0004)
	unsigned long                                      bInvalidCover : 1;                                        // 0x032C(0x0004) (Transient)
	unsigned long                                      bDebug_FireLinks : 1;                                     // 0x032C(0x0004) (Edit)
	unsigned long                                      bDebug_ExposedLinks : 1;                                  // 0x032C(0x0004) (Edit)
	unsigned long                                      bDebug_DangerLinks : 1;                                   // 0x032C(0x0004) (Edit)
	float                                              MaxFireLinkDist;                                          // 0x0330(0x0004)
	struct FVector                                     CircularOrigin;                                           // 0x0334(0x000C) (Const)
	float                                              CircularRadius;                                           // 0x0340(0x0004) (Const)
	float                                              AlignDist;                                                // 0x0344(0x0004) (Const)
	float                                              StandHeight;                                              // 0x0348(0x0004) (Const)
	float                                              MidHeight;                                                // 0x034C(0x0004) (Const)
	float                                              LowHeight;                                                // 0x0350(0x0004) (Const)
	struct FCoverRange                                 LowCover;                                                 // 0x0354(0x0008) (Const)
	struct FCoverRange                                 MediumCover;                                              // 0x035C(0x0008) (Const)
	int                                                SideOffsetTraceHeight;                                    // 0x0364(0x0004) (Const)
	float                                              IvalidUntilThisTime;                                      // 0x0368(0x0004) (Transient)
	float                                              CornerDist;                                               // 0x036C(0x0004) (Const)
	float                                              FireFromCornerDist;                                       // 0x0370(0x0004) (Const)
	struct FVector                                     StandingLeanOffset;                                       // 0x0374(0x000C) (Const)
	struct FVector                                     CrouchLeanOffset;                                         // 0x0380(0x000C) (Const)
	struct FVector                                     PopupOffset;                                              // 0x038C(0x000C) (Const)
	float                                              SlipDist;                                                 // 0x0398(0x0004) (Const)
	float                                              TurnDist;                                                 // 0x039C(0x0004) (Const)
	float                                              DangerScale;                                              // 0x03A0(0x0004)
	class ACoverLink*                                  NextCoverLink;                                            // 0x03A4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverLink");
		return ptr;
	}


	struct FString GetDebugString(int SlotIdx);
	int AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate);
	bool GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverReference* out_Info);
	void OnToggle(class USeqAct_Toggle* inAction);
	bool IsEnabled();
	bool AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans);
	void OnModifyCover(class USeqAct_ModifyCover* Action);
	void SetSlotEnabled(int SlotIdx, bool bEnable);
	void SetDisabled(bool bNewDisabled);
	void GetSlotActions(int SlotIdx, TArray<TEnumAsByte<ECoverAction>>* Actions);
	bool HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks);
	bool GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<ECoverAction> ChkAction, TEnumAsByte<ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items);
	bool AllowLeftTransition(int SlotIdx);
	bool AllowRightTransition(int SlotIdx);
	bool IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool IsEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx);
	bool IsStationarySlot(int SlotIdx);
	bool IsValidClaim(class AController* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck);
	bool UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll);
	bool Claim(class AController* NewClaim, int SlotIdx);
	bool IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale);
	struct FVector GetSlotFireLocation(int SlotIdx, TEnumAsByte<ECoverAction> Action);
	class ACoverSlotMarker* GetSlotMarker(int SlotIdx);
	struct FVector GetSlotViewPoint(int SlotIdx, TEnumAsByte<ECoverType> Type, TEnumAsByte<ECoverAction> Action);
	struct FRotator GetSlotRotation(int SlotIdx, bool bForceUseOffset);
	struct FVector GetSlotLocation(int SlotIdx, bool bForceUseOffset);
};


// Class Engine.CoverSlotMarker
// 0x0008 (0x031C - 0x0314)
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                               // 0x0314(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverSlotMarker");
		return ptr;
	}


	bool IsValidClaim(class AController* ChkClaim, bool bSkipTeamCheck, bool bSkipOverlapCheck);
	struct FRotator GetSlotRotation();
	struct FVector GetSlotLocation();
	void PostBeginPlay();
};


// Class Engine.Engine
// 0x036C (0x03AC - 0x0040)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                                 // 0x0040(0x0004)
	struct FString                                     TinyFontName;                                             // 0x0044(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0004)
	struct FString                                     SmallFontName;                                            // 0x0054(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       MediumFont;                                               // 0x0060(0x0004)
	struct FString                                     MediumFontName;                                           // 0x0064(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       LargeFont;                                                // 0x0070(0x0004)
	struct FString                                     LargeFontName;                                            // 0x0074(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       SubtitleFont;                                             // 0x0080(0x0004)
	struct FString                                     SubtitleFontName;                                         // 0x0084(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x0090(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x009C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      ConsoleClass;                                             // 0x00A8(0x0004)
	struct FString                                     ConsoleClassName;                                         // 0x00AC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      GameViewportClientClass;                                  // 0x00B8(0x0004)
	struct FString                                     GameViewportClientClassName;                              // 0x00BC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      DataStoreClientClass;                                     // 0x00C8(0x0004)
	struct FString                                     DataStoreClientClassName;                                 // 0x00CC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      LocalPlayerClass;                                         // 0x00D8(0x0004)
	struct FString                                     LocalPlayerClassName;                                     // 0x00DC(0x000C) (Config, NeedCtorLink)
	class UMaterial*                                   DefaultMaterial;                                          // 0x00E8(0x0004)
	struct FString                                     DefaultMaterialName;                                      // 0x00EC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   WireframeMaterial;                                        // 0x00F8(0x0004)
	struct FString                                     WireframeMaterialName;                                    // 0x00FC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   EmissiveTexturedMaterial;                                 // 0x0108(0x0004)
	struct FString                                     EmissiveTexturedMaterialName;                             // 0x010C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   GeomMaterial;                                             // 0x0118(0x0004)
	struct FString                                     GeomMaterialName;                                         // 0x011C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   DefaultFogVolumeMaterial;                                 // 0x0128(0x0004)
	struct FString                                     DefaultFogVolumeMaterialName;                             // 0x012C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   TickMaterial;                                             // 0x0138(0x0004)
	struct FString                                     TickMaterialName;                                         // 0x013C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   CrossMaterial;                                            // 0x0148(0x0004)
	struct FString                                     CrossMaterialName;                                        // 0x014C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x0158(0x0004)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x015C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x0168(0x0004)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x016C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x0178(0x0004)
	struct FString                                     RemoveSurfaceMaterialName;                                // 0x017C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FColor>                              LightComplexityColors;                                    // 0x0188(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FColor>                              ShaderComplexityColors;                                   // 0x0194(0x000C) (Config, GlobalConfig, NeedCtorLink)
	unsigned long                                      bUsePixelShaderComplexity : 1;                            // 0x01A0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseAdditiveComplexity : 1;                               // 0x01A0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCaptureCharacterLighting : 1;                            // 0x01A0(0x0004) (Config)
	unsigned long                                      bUseSound : 1;                                            // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bUseTextureStreaming : 1;                                 // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                         // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bSubtitlesEnabled : 1;                                    // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bSubtitlesForcedOff : 1;                                  // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bForceStaticTerrain : 1;                                  // 0x01A0(0x0004) (Edit, Config)
	unsigned long                                      bKeepLighting : 1;                                        // 0x01A0(0x0004)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x01A0(0x0004) (Config)
	unsigned long                                      bUsePostProcessEffects : 1;                               // 0x01A0(0x0004) (Config)
	unsigned long                                      bOnScreenKismetWarnings : 1;                              // 0x01A0(0x0004) (Config)
	unsigned long                                      bEnableKismetLogging : 1;                                 // 0x01A0(0x0004) (Config)
	unsigned long                                      bAllowMatureLanguage : 1;                                 // 0x01A0(0x0004) (Config)
	unsigned long                                      bEnableVSMShadows : 1;                                    // 0x01A0(0x0004) (Config)
	unsigned long                                      bEnableBranchingPCFShadows : 1;                           // 0x01A0(0x0004) (Config)
	unsigned long                                      bAllowBetterModulatedShadows : 1;                         // 0x01A0(0x0004) (Config)
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;                     // 0x01A0(0x0004) (Config)
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                         // 0x01A0(0x0004) (Config)
	unsigned long                                      bPauseOnLossOfFocus : 1;                                  // 0x01A0(0x0004) (Config)
	unsigned long                                      bEnableColorClear : 1;                                    // 0x01A0(0x0004) (Const, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x01A4(0x0004) (Config, GlobalConfig)
	float                                              MaxPixelShaderOpaqueComplexityCount;                      // 0x01A8(0x0004) (Config, GlobalConfig)
	float                                              MaxVertexShaderComplexityCount;                           // 0x01AC(0x0004) (Config, GlobalConfig)
	float                                              MinTextureDensity;                                        // 0x01B0(0x0004) (Config, GlobalConfig)
	float                                              IdealTextureDensity;                                      // 0x01B4(0x0004) (Config, GlobalConfig)
	float                                              MaxTextureDensity;                                        // 0x01B8(0x0004) (Config, GlobalConfig)
	float                                              MinLightmapTextureDensity;                                // 0x01BC(0x0004) (Config, GlobalConfig)
	float                                              IdealLightmapTextureDensity;                              // 0x01C0(0x0004) (Config, GlobalConfig)
	float                                              MaxLightmapTextureDensity;                                // 0x01C4(0x0004) (Config, GlobalConfig)
	class UMaterial*                                   EditorBrushMaterial;                                      // 0x01C8(0x0004)
	struct FString                                     EditorBrushMaterialName;                                  // 0x01CC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x01D8(0x0004)
	struct FString                                     DefaultPhysMaterialName;                                  // 0x01DC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   TerrainErrorMaterial;                                     // 0x01E8(0x0004)
	struct FString                                     TerrainErrorMaterialName;                                 // 0x01EC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                TerrainMaterialMaxTextureCount;                           // 0x01F8(0x0004) (Config, GlobalConfig)
	int                                                TerrainTessellationCheckCount;                            // 0x01FC(0x0004) (Config, GlobalConfig)
	float                                              TerrainTessellationCheckDistance;                         // 0x0200(0x0004) (Config, GlobalConfig)
	class UClass*                                      OnlineSubsystemClass;                                     // 0x0204(0x0004)
	struct FString                                     DefaultOnlineSubsystemName;                               // 0x0208(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UPostProcessChain*                           DefaultPostProcess;                                       // 0x0214(0x0004)
	struct FString                                     DefaultPostProcessName;                                   // 0x0218(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                         // 0x0224(0x0004)
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;                     // 0x0228(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;                       // 0x0234(0x0004)
	struct FString                                     ThumbnailParticleSystemPostProcessName;                   // 0x0238(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                             // 0x0244(0x0004)
	struct FString                                     ThumbnailMaterialPostProcessName;                         // 0x0248(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           DefaultUIScenePostProcess;                                // 0x0254(0x0004)
	struct FString                                     DefaultUIScenePostProcessName;                            // 0x0258(0x000C) (Config, NeedCtorLink)
	class UMaterial*                                   DefaultUICaretMaterial;                                   // 0x0264(0x0004)
	struct FString                                     DefaultUICaretMaterialName;                               // 0x0268(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                         // 0x0274(0x0004)
	struct FString                                     SceneCaptureReflectActorMaterialName;                     // 0x0278(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                            // 0x0284(0x0004)
	struct FString                                     SceneCaptureCubeActorMaterialName;                        // 0x0288(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  RandomAngleTexture;                                       // 0x0294(0x0004)
	struct FString                                     RandomAngleTextureName;                                   // 0x0298(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  RandomNormalTexture;                                      // 0x02A4(0x0004)
	struct FString                                     RandomNormalTextureName;                                  // 0x02A8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x02B4(0x0004) (Edit, Config)
	class UClient*                                     Client;                                                   // 0x02B8(0x0004) (Const)
	TArray<class ULocalPlayer*>                        GamePlayers;                                              // 0x02BC(0x000C) (AlwaysInit, NeedCtorLink)
	class UGameViewportClient*                         GameViewport;                                             // 0x02C8(0x0004) (Const)
	TArray<struct FString>                             DeferredCommands;                                         // 0x02CC(0x000C) (AlwaysInit, NeedCtorLink)
	int                                                TickCycles;                                               // 0x02D8(0x0004)
	int                                                GameCycles;                                               // 0x02DC(0x0004)
	int                                                ClientCycles;                                             // 0x02E0(0x0004)
	class UDebugManager*                               DebugManager;                                             // 0x02E4(0x0004) (Const)
	struct FPointer                                    RemoteControlExec;                                        // 0x02E8(0x0004) (Native)
	struct FColor                                      C_WorldBox;                                               // 0x02EC(0x0004) (Edit)
	struct FColor                                      C_BrushWire;                                              // 0x02F0(0x0004) (Edit)
	struct FColor                                      C_AddWire;                                                // 0x02F4(0x0004) (Edit)
	struct FColor                                      C_SubtractWire;                                           // 0x02F8(0x0004) (Edit)
	struct FColor                                      C_SemiSolidWire;                                          // 0x02FC(0x0004) (Edit)
	struct FColor                                      C_NonSolidWire;                                           // 0x0300(0x0004) (Edit)
	struct FColor                                      C_WireBackground;                                         // 0x0304(0x0004) (Edit)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x0308(0x0004) (Edit)
	struct FColor                                      C_VolumeCollision;                                        // 0x030C(0x0004) (Edit)
	struct FColor                                      C_BSPCollision;                                           // 0x0310(0x0004) (Edit)
	struct FColor                                      C_OrthoBackground;                                        // 0x0314(0x0004) (Edit)
	struct FColor                                      C_Volume;                                                 // 0x0318(0x0004) (Edit)
	float                                              StreamingDistanceFactor;                                  // 0x031C(0x0004) (Edit)
	struct FString                                     ScoutClassName;                                           // 0x0320(0x000C) (Const, Config, NeedCtorLink)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x032C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x032D(0x0003) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x0330(0x000C) (NeedCtorLink)
	struct FString                                     TransitionGameType;                                       // 0x033C(0x000C) (NeedCtorLink)
	float                                              MeshLODRange;                                             // 0x0348(0x0004) (Config)
	float                                              ShadowFilterRadius;                                       // 0x034C(0x0004) (Config)
	float                                              DepthBias;                                                // 0x0350(0x0004) (Config)
	float                                              ModShadowFadeDistanceExponent;                            // 0x0354(0x0004) (Config)
	float                                              CameraRotationThreshold;                                  // 0x0358(0x0004) (Config)
	float                                              CameraTranslationThreshold;                               // 0x035C(0x0004) (Config)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0360(0x0004) (Config)
	float                                              PercentUnoccludedRequeries;                               // 0x0364(0x0004) (Config)
	float                                              ShadowVolumeLightRadiusThreshold;                         // 0x0368(0x0004) (Config)
	float                                              ShadowVolumePrimitiveScreenSpacePercentageThreshold;      // 0x036C(0x0004) (Config)
	int                                                MaxParticleResize;                                        // 0x0370(0x0004) (Config)
	int                                                MaxParticleResizeWarn;                                    // 0x0374(0x0004) (Config)
	class UMaterial*                                   TerrainCollisionMaterial;                                 // 0x0378(0x0004)
	struct FString                                     TerrainCollisionMaterialName;                             // 0x037C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                BeginUPTryCount;                                          // 0x0388(0x0004) (Config)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x038C(0x000C) (Transient, NeedCtorLink)
	struct FString                                     DynamicCoverMeshComponentName;                            // 0x0398(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              NetClientTicksPerSecond;                                  // 0x03A4(0x0004) (Config, GlobalConfig)
	class UTdLOIGroupManager*                          LOIGroupManager;                                          // 0x03A8(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}


	void DispatchExternalUIChange(bool bIsOpening);
	void STATIC_AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth, struct FLinearColor* TextColor);
	void STATIC_AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered, struct FLinearColor* TextColor);
	void STATIC_RemoveAllOverlays();
	void STATIC_StopMovie(bool bDelayStopUntilGameHasRendered);
	bool STATIC_PlayLoadMapMovie();
	struct FString STATIC_GetLastMovieName();
	class UAudioDevice* STATIC_GetAudioDevice();
	bool STATIC_IsSplitScreen();
	class UFont* STATIC_GetAdditionalFont(int AdditionalFontIndex);
	class UFont* STATIC_GetLargeFont();
	class UFont* STATIC_GetMediumFont();
	class UFont* STATIC_GetSmallFont();
	class UFont* STATIC_GetTinyFont();
	class AWorldInfo* STATIC_GetCurrentWorldInfo();
};


// Class Engine.GameEngine
// 0x0100 (0x04AC - 0x03AC)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                            // 0x03AC(0x0004)
	struct FURL                                        LastURL;                                                  // 0x03B0(0x0044) (NeedCtorLink)
	struct FURL                                        LastRemoteURL;                                            // 0x03F4(0x0044) (NeedCtorLink)
	TArray<struct FString>                             ServerActors;                                             // 0x0438(0x000C) (Config, NeedCtorLink)
	struct FString                                     TravelURL;                                                // 0x0444(0x000C) (NeedCtorLink)
	unsigned char                                      TravelType;                                               // 0x0450(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	unsigned long                                      bWorldWasLoadedThisTick : 1;                              // 0x0454(0x0004) (Transient)
	unsigned long                                      bShouldCommitPendingMapChange : 1;                        // 0x0454(0x0004) (Const)
	unsigned long                                      bShouldSkipLevelStartupEventOnMapCommit : 1;              // 0x0454(0x0004) (Const)
	unsigned long                                      bShouldSkipLevelBeginningEventOnMapCommit : 1;            // 0x0454(0x0004) (Const)
	unsigned long                                      bSmoothFrameRate : 1;                                     // 0x0454(0x0004) (Config)
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;                   // 0x0454(0x0004) (Config)
	class UOnlineSubsystem*                            OnlineSubsystem;                                          // 0x0458(0x0004)
	TArray<struct FName>                               LevelsToLoadForPendingMapChange;                          // 0x045C(0x000C) (Const, NeedCtorLink)
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                          // 0x0468(0x000C) (Const, NeedCtorLink)
	struct FString                                     PendingMapChangeFailureDescription;                       // 0x0474(0x000C) (Const, NeedCtorLink)
	float                                              MaxSmoothedFrameRate;                                     // 0x0480(0x0004) (Config)
	float                                              MinSmoothedFrameRate;                                     // 0x0484(0x0004) (Config)
	TArray<struct FLevelStreamingStatus>               PendingLevelStreamingStatusUpdates;                       // 0x0488(0x000C) (Const, NeedCtorLink)
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                        // 0x0494(0x000C) (Const, NeedCtorLink)
	TArray<struct FFullyLoadedPackagesInfo>            PackagesToFullyLoad;                                      // 0x04A0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}


	void DispatchExternalUIChange(bool bIsOpening);
	class UOnlineSubsystem* STATIC_GetOnlineSubsystem();
};


// Class Engine.Channel
// 0x002C (0x0068 - 0x003C)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x003C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0064 (0x00CC - 0x0068)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x64];                                      // 0x0068(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.ActorComponent
// 0x000D (0x0055 - 0x0048)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                                    // 0x0048(0x0004) (Const, Native, Transient)
	class AActor*                                      Owner;                                                    // 0x004C(0x0004) (Const, Transient)
	unsigned long                                      bAttached : 1;                                            // 0x0050(0x0004) (Const, Native, Transient)
	unsigned long                                      bTickInEditor : 1;                                        // 0x0050(0x0004) (Const)
	unsigned long                                      bNeedsReattach : 1;                                       // 0x0050(0x0004) (Const, Transient)
	unsigned long                                      bNeedsUpdateTransform : 1;                                // 0x0050(0x0004) (Const, Transient)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x0054(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}


	void ForceUpdate(bool bTransformOnly);
	void SetComponentRBFixed(bool bFixed);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
};


// Class Engine.ActorFactory
// 0x0028 (0x0064 - 0x003C)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                                       // 0x003C(0x0004)
	struct FString                                     MenuName;                                                 // 0x0040(0x000C) (NeedCtorLink)
	int                                                MenuPriority;                                             // 0x004C(0x0004) (Config)
	class UClass*                                      NewActorClass;                                            // 0x0050(0x0004)
	unsigned long                                      bPlaceable : 1;                                           // 0x0054(0x0004)
	unsigned long                                      bSpawnInSameLevel : 1;                                    // 0x0054(0x0004) (Edit)
	struct FString                                     SpecificGameName;                                         // 0x0058(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactory");
		return ptr;
	}

};


// Class Engine.ActorFactoryAI
// 0x0028 (0x008C - 0x0064)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                          // 0x0064(0x0004) (Edit)
	class UClass*                                      PawnClass;                                                // 0x0068(0x0004) (Edit)
	struct FString                                     PawnName;                                                 // 0x006C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bGiveDefaultInventory : 1;                                // 0x0078(0x0004) (Edit)
	TArray<class UClass*>                              InventoryList;                                            // 0x007C(0x000C) (Edit, NeedCtorLink)
	int                                                TeamIndex;                                                // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAI");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                          // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSound");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                            // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.ActorFactoryArchetype
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                           // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryArchetype");
		return ptr;
	}

};


// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryCoverLink : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryCoverLink");
		return ptr;
	}

};


// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x0079 - 0x0064)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x0064(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x0068(0x000C) (Edit)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x0074(0x0004) (Edit)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0074(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0074(0x0004) (Edit)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0074(0x0004) (Edit)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x0078(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDynamicSM");
		return ptr;
	}

};


// Class Engine.ActorFactoryEmitter
// 0x0008 (0x006C - 0x0064)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                           // 0x0064(0x0004) (Edit)
	class UParticleSystemComponent*                    ParticleSystemPhysX;                                      // 0x0068(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryEmitter");
		return ptr;
	}

};


// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                                      // 0x0064(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x0068(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                          // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLensFlare");
		return ptr;
	}

};


// Class Engine.ActorFactoryLight
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryLight : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLight");
		return ptr;
	}

};


// Class Engine.ActorFactoryMover
// 0x0000 (0x0079 - 0x0079)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryMover");
		return ptr;
	}

};


// Class Engine.ActorFactoryPathNode
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryPathNode : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPathNode");
		return ptr;
	}

};


// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x0088 - 0x0064)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0064(0x0004) (Edit)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0068(0x0004) (Edit)
	unsigned long                                      bStartAwake : 1;                                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x006C(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x006C(0x0004) (Edit)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x006C(0x0004) (Edit)
	struct FVector                                     InitialVelocity;                                          // 0x0070(0x000C) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x007C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPhysicsAsset");
		return ptr;
	}

};


// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPlayerStart");
		return ptr;
	}

};


// Class Engine.ActorFactoryRigidBody
// 0x001C (0x0095 - 0x0079)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	unsigned long                                      bStartAwake : 1;                                          // 0x007C(0x0004) (Edit)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x007C(0x0004) (Edit)
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                           // 0x007C(0x0004) (Edit)
	struct FVector                                     InitialVelocity;                                          // 0x0080(0x000C) (Edit)
	class UDistributionVector*                         AdditionalVelocity;                                       // 0x008C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDistributionVector*                         InitialAngularVelocity;                                   // 0x0090(0x0004) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0094(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryRigidBody");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0064(0x0004) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0068(0x0004) (Edit)
	struct FName                                       AnimSequenceName;                                         // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x0074 - 0x0064)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x0064(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x0068(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryTrigger
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryTrigger : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryTrigger");
		return ptr;
	}

};


// Class Engine.ActorFactoryVehicle
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                             // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryVehicle");
		return ptr;
	}

};


// Class Engine.ReachSpec
// 0x005C (0x0098 - 0x003C)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                          // 0x003C(0x0004) (Const, Native, Transient, EditConst)
	int                                                Distance;                                                 // 0x0040(0x0004)
	struct FVector                                     Direction;                                                // 0x0044(0x000C)
	class ANavigationPoint*                            Start;                                                    // 0x0050(0x0004) (Edit, Const, EditConst)
	struct FNavReference                               End;                                                      // 0x0054(0x0014) (Edit, Const, EditConst)
	int                                                CollisionRadius;                                          // 0x0068(0x0004) (Edit, Const, EditConst)
	int                                                CollisionHeight;                                          // 0x006C(0x0004) (Edit, Const, EditConst)
	int                                                reachFlags;                                               // 0x0070(0x0004)
	int                                                MaxLandingVelocity;                                       // 0x0074(0x0004)
	unsigned char                                      bPruned;                                                  // 0x0078(0x0001)
	unsigned char                                      PathColorIndex;                                           // 0x0079(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	unsigned long                                      bAddToNavigationOctree : 1;                               // 0x007C(0x0004) (Const, EditConst)
	unsigned long                                      bCanCutCorners : 1;                                       // 0x007C(0x0004)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x007C(0x0004)
	unsigned long                                      bSkipPrune : 1;                                           // 0x007C(0x0004) (Const)
	TArray<class UClass*>                              PruneSpecList;                                            // 0x0080(0x000C) (Const, NeedCtorLink)
	struct FName                                       ForcedPathSizeName;                                       // 0x008C(0x0008)
	class AActor*                                      BlockedBy;                                                // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReachSpec");
		return ptr;
	}


	bool IsBlockedFor(class APawn* P);
	int CostFor(class APawn* P);
};


// Class Engine.AdvancedReachSpec
// 0x0000 (0x0098 - 0x0098)
class UAdvancedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AdvancedReachSpec");
		return ptr;
	}

};


// Class Engine.PostProcessEffect
// 0x0025 (0x0061 - 0x003C)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      bShowInGame : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bUseWorldSettings : 1;                                    // 0x003C(0x0004) (Edit)
	unsigned long                                      bAffectsLightingOnly : 1;                                 // 0x003C(0x0004)
	struct FName                                       EffectName;                                               // 0x0040(0x0008) (Edit)
	int                                                NodePosY;                                                 // 0x0048(0x0004)
	int                                                NodePosX;                                                 // 0x004C(0x0004)
	int                                                DrawWidth;                                                // 0x0050(0x0004)
	int                                                DrawHeight;                                               // 0x0054(0x0004)
	int                                                OutDrawY;                                                 // 0x0058(0x0004)
	int                                                InDrawY;                                                  // 0x005C(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              SceneDPG;                                                 // 0x0060(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessEffect");
		return ptr;
	}

};


// Class Engine.AmbientOcclusionEffect
// 0x0057 (0x00B8 - 0x0061)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FLinearColor                                OcclusionColor;                                           // 0x0064(0x0010) (Edit)
	float                                              OcclusionPower;                                           // 0x0074(0x0004) (Edit)
	float                                              OcclusionScale;                                           // 0x0078(0x0004) (Edit)
	float                                              OcclusionBias;                                            // 0x007C(0x0004) (Edit)
	float                                              MinOcclusion;                                             // 0x0080(0x0004) (Edit)
	float                                              OcclusionRadius;                                          // 0x0084(0x0004) (Edit)
	float                                              OcclusionAttenuation;                                     // 0x0088(0x0004) (Edit)
	float                                              HaloDistanceThreshold;                                    // 0x008C(0x0004) (Edit)
	float                                              HaloOcclusion;                                            // 0x0090(0x0004) (Edit)
	TEnumAsByte<EAmbientOcclusionQuality>              OcclusionQuality;                                         // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	float                                              OcclusionFadeoutMinDistance;                              // 0x0098(0x0004) (Edit)
	float                                              OcclusionFadeoutMaxDistance;                              // 0x009C(0x0004) (Edit)
	float                                              EdgeDistanceThreshold;                                    // 0x00A0(0x0004) (Edit)
	float                                              EdgeDistanceScale;                                        // 0x00A4(0x0004) (Edit)
	float                                              FilterDistanceScale;                                      // 0x00A8(0x0004) (Edit)
	int                                                FilterSize;                                               // 0x00AC(0x0004) (Edit)
	float                                              HistoryDistanceThreshold;                                 // 0x00B0(0x0004) (Edit)
	float                                              HistoryConvergenceTime;                                   // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientOcclusionEffect");
		return ptr;
	}

};


// Class Engine.Brush
// 0x0024 (0x01E4 - 0x01C0)
class ABrush : public AActor
{
public:
	TEnumAsByte<ECsgOper>                              CsgOper;                                                  // 0x01C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C1(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x01C4(0x0004) (Edit)
	int                                                PolyFlags;                                                // 0x01C8(0x0004)
	unsigned long                                      bColored : 1;                                             // 0x01CC(0x0004) (Edit)
	unsigned long                                      bSolidWhenSelected : 1;                                   // 0x01CC(0x0004)
	class UModel*                                      Brush;                                                    // 0x01D0(0x0004) (Const, ExportObject)
	class UBrushComponent*                             BrushComponent;                                           // 0x01D4(0x0004) (Const, ExportObject, EditConst, Component, EditInline)
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x01D8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.Volume
// 0x0018 (0x01FC - 0x01E4)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                          // 0x01E4(0x0004)
	int                                                LocationPriority;                                         // 0x01E8(0x0004) (Edit)
	struct FString                                     LocationName;                                             // 0x01EC(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bForcePawnWalk : 1;                                       // 0x01F8(0x0004) (Edit)
	unsigned long                                      bProcessAllActors : 1;                                    // 0x01F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}


	void ProcessActorSetVolume(class AActor* Other);
	void CollisionChanged();
	void OnToggle(class USeqAct_Toggle* Action);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	struct FString GetLocationStringFor(class APlayerReplicationInfo* PRI);
	void PostBeginPlay();
	bool Encompasses(class AActor* Other);
};


// Class Engine.PostProcessVolume
// 0x09DC (0x0BD8 - 0x01FC)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x01FC(0x0004) (Edit)
	struct FPostProcessSettings                        Settings;                                                 // 0x0200(0x02BC) (Edit, NeedCtorLink)
	unsigned long                                      bOverrideSKUSpecificCurveModifier : 1;                    // 0x04BC(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x04BC(0x0004) (Edit, Net)
	struct FTdPostProcessModifier                      PostProcessSettingsModifierXbox360;                       // 0x04C0(0x025C) (Edit, NeedCtorLink)
	struct FTdPostProcessModifier                      PostProcessSettingsModifierPS3;                           // 0x071C(0x025C) (Edit, NeedCtorLink)
	struct FTdPostProcessModifier                      PostProcessSettingsModifierPC;                            // 0x0978(0x025C) (Edit, NeedCtorLink)
	class APostProcessVolume*                          NextLowerPriorityVolume;                                  // 0x0BD4(0x0004) (Const, Transient, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.Camera
// 0x03B4 (0x0574 - 0x01C0)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x01C0(0x0004)
	struct FName                                       CameraStyle;                                              // 0x01C4(0x0008)
	float                                              DefaultFOV;                                               // 0x01CC(0x0004)
	unsigned long                                      bLockedFOV : 1;                                           // 0x01D0(0x0004)
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x01D0(0x0004)
	unsigned long                                      bEnableFading : 1;                                        // 0x01D0(0x0004)
	unsigned long                                      bCamOverridePostProcess : 1;                              // 0x01D0(0x0004)
	unsigned long                                      bEnableColorScaling : 1;                                  // 0x01D0(0x0004)
	unsigned long                                      bEnableColorScaleInterp : 1;                              // 0x01D0(0x0004)
	float                                              LockedFOV;                                                // 0x01D4(0x0004)
	float                                              ConstrainedAspectRatio;                                   // 0x01D8(0x0004)
	float                                              DefaultAspectRatio;                                       // 0x01DC(0x0004)
	struct FColor                                      FadeColor;                                                // 0x01E0(0x0004)
	float                                              FadeAmount;                                               // 0x01E4(0x0004)
	struct FPostProcessSettings                        CamPostProcessSettings;                                   // 0x01E8(0x02BC) (NeedCtorLink)
	struct FVector                                     ColorScale;                                               // 0x04A4(0x000C)
	struct FVector                                     DesiredColorScale;                                        // 0x04B0(0x000C)
	struct FVector                                     OriginalColorScale;                                       // 0x04BC(0x000C)
	float                                              ColorScaleInterpDuration;                                 // 0x04C8(0x0004)
	float                                              ColorScaleInterpStartTime;                                // 0x04CC(0x0004)
	struct FTCameraCache                               CameraCache;                                              // 0x04D0(0x0020)
	struct FTViewTarget                                ViewTarget;                                               // 0x04F0(0x002C)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x051C(0x002C)
	float                                              BlendTimeToGo;                                            // 0x0548(0x0004)
	struct FViewTargetTransitionParams                 BlendParams;                                              // 0x054C(0x000C)
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x0558(0x000C) (NeedCtorLink)
	float                                              FreeCamDistance;                                          // 0x0564(0x0004)
	struct FVector                                     FreeCamOffset;                                            // 0x0568(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Camera");
		return ptr;
	}


	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool AllowPawnRotation();
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void CheckViewTarget(struct FTViewTarget* VT);
	void FillCameraCache(struct FTPOV* NewPOV);
	struct FTPOV BlendViewTargets(float Alpha, struct FTViewTarget* A, struct FTViewTarget* B);
	void UpdateCamera(float DeltaTime);
	void SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime);
	void GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot);
	void SetFOV(float NewFOV);
	float GetFOVAngle();
	void InitializeFor(class APlayerController* PC);
};


// Class Engine.AnimatedCamera
// 0x0040 (0x05B4 - 0x0574)
class AAnimatedCamera : public ACamera
{
public:
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x0574(0x0004)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x0594(0x000C) (NeedCtorLink)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x05A0(0x000C) (NeedCtorLink)
	class ADynamicCameraActor*                         AnimCameraActor;                                          // 0x05AC(0x0004) (Transient)
	class ADynamicCameraActor*                         AccumulatorCameraActor;                                   // 0x05B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimatedCamera");
		return ptr;
	}


	void StopCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	bool PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration);
	void ApplyCameraModifiersNative(float DeltaTime, struct FTPOV* OutPOV);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void Destroyed();
	void PostBeginPlay();
};


// Class Engine.LightComponent
// 0x012F (0x0184 - 0x0055)
class ULightComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FPointer                                    SceneInfo;                                                // 0x0058(0x0004) (Const, Native, Transient, NoImport)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FMatrix                                     WorldToLight;                                             // 0x0060(0x0040) (Const, Native, Transient)
	struct FMatrix                                     LightToWorld;                                             // 0x00A0(0x0040) (Const, Native, Transient)
	struct FGuid                                       LightGuid;                                                // 0x00E0(0x0010) (Const, DuplicateTransient)
	struct FGuid                                       LightmapGuid;                                             // 0x00F0(0x0010) (Const, DuplicateTransient)
	float                                              Brightness;                                               // 0x0100(0x0004) (Edit, Const)
	struct FColor                                      LightColor;                                               // 0x0104(0x0004) (Edit, Const)
	class ULightFunction*                              Function;                                                 // 0x0108(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastShadows : 1;                                          // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastStaticShadows : 1;                                    // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastDynamicShadows : 1;                                   // 0x010C(0x0004) (Edit)
	unsigned long                                      bCastCompositeShadow : 1;                                 // 0x010C(0x0004) (Edit)
	unsigned long                                      RequireDynamicShadows : 1;                                // 0x010C(0x0004) (Const, Deprecated)
	unsigned long                                      bForceDynamicLight : 1;                                   // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      UseDirectLightMap : 1;                                    // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;                   // 0x010C(0x0004) (Const)
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;                    // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;     // 0x010C(0x0004) (Edit, Const)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0110(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	TArray<struct FName>                               OtherLevelsToAffect;                                      // 0x0114(0x000C) (Edit, Const, NeedCtorLink)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0120(0x0004) (Edit, Const)
	unsigned long                                      bUseVolumes : 1;                                          // 0x0124(0x0004) (Edit)
	TArray<class ABrush*>                              InclusionVolumes;                                         // 0x0128(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class ABrush*>                              ExclusionVolumes;                                         // 0x0134(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FPointer>                            InclusionConvexVolumes;                                   // 0x0140(0x000C) (Const, Native)
	TArray<struct FPointer>                            ExclusionConvexVolumes;                                   // 0x014C(0x000C) (Const, Native)
	TEnumAsByte<ELightAffectsClassification>           LightAffectsClassification;                               // 0x0158(0x0001) (Edit, Const, EditConst)
	TEnumAsByte<ELightShadowMode>                      LightShadowMode;                                          // 0x0159(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x2];                                       // 0x015A(0x0002) MISSED OFFSET
	struct FLinearColor                                ModShadowColor;                                           // 0x015C(0x0010) (Edit)
	float                                              ModShadowFadeoutTime;                                     // 0x016C(0x0004) (Edit)
	float                                              ModShadowFadeoutExponent;                                 // 0x0170(0x0004) (Edit)
	int                                                LightListIndex;                                           // 0x0174(0x0004) (Const, Native, DuplicateTransient)
	TEnumAsByte<EShadowProjectionTechnique>            ShadowProjectionTechnique;                                // 0x0178(0x0001) (Edit)
	TEnumAsByte<EShadowFilterQuality>                  ShadowFilterQuality;                                      // 0x0179(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x2];                                       // 0x017A(0x0002) MISSED OFFSET
	int                                                MinShadowResolution;                                      // 0x017C(0x0004) (Edit)
	int                                                MaxShadowResolution;                                      // 0x0180(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}


	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
	void UpdateColorAndBrightness();
	struct FVector GetDirection();
	struct FVector GetOrigin();
	void SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction);
	void SetEnabled(bool bSetEnabled);
};


// Class Engine.PrimitiveComponent
// 0x0167 (0x01BC - 0x0055)
class UPrimitiveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FPointer                                    SceneInfo;                                                // 0x0058(0x0004) (Const, Native, Transient)
	int                                                DetachFence;                                              // 0x005C(0x0004) (Const, Native)
	float                                              LocalToWorldDeterminant;                                  // 0x0060(0x0004) (Const, Native, Transient)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0064(0x000C) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                             // 0x0070(0x0040) (Const, Native, Transient)
	int                                                MotionBlurInfoIndex;                                      // 0x00B0(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            DecalList;                                                // 0x00B4(0x000C) (Const, Native, NoImport)
	int                                                Tag;                                                      // 0x00C0(0x0004) (Const, Native, Transient)
	class UPrimitiveComponent*                         ShadowParent;                                             // 0x00C4(0x0004) (Const, ExportObject, Component, EditInline)
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                                       // 0x00C8(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x00CC(0x001C) (Const, Native, Transient)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x00E8(0x0004) (Const, ExportObject, Component, EditInline)
	float                                              CullDistance;                                             // 0x00EC(0x0004) (Edit, Const, NoExport)
	float                                              CachedCullDistance;                                       // 0x00F0(0x0004) (Edit, EditConst)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x00F4(0x0001) (Edit, Const)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x00F5(0x0001) (Const)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x00F6(0x0001) (Edit, Const)
	unsigned char                                      UnknownData02[0x1];                                       // 0x00F7(0x0001) MISSED OFFSET
	float                                              MotionBlurScale;                                          // 0x00F8(0x0004) (Edit)
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x00FC(0x0004) (Const)
	unsigned long                                      bAllowCullDistanceVolume : 1;                             // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      HiddenGame : 1;                                           // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      HiddenEditor : 1;                                         // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bOwnerNoSeeWithShadow : 1;                                // 0x00FC(0x0004)
	unsigned long                                      bRenderInLiteMirror : 1;                                  // 0x00FC(0x0004)
	unsigned long                                      bForceOcclusionTest : 1;                                  // 0x00FC(0x0004)
	unsigned long                                      bIsTransparentToPlayerAndAI : 1;                          // 0x00FC(0x0004) (Const)
	unsigned long                                      bDenyHandMoves : 1;                                       // 0x00FC(0x0004) (Const)
	unsigned long                                      bDenyFootMoves : 1;                                       // 0x00FC(0x0004) (Const)
	unsigned long                                      bOwnerNoSee : 1;                                          // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreOwnerHidden : 1;                                   // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bUseAsOccluder : 1;                                       // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUseAsOccluderAlways : 1;                                 // 0x00FC(0x0004) (Edit)
	unsigned long                                      bAllowApproximateOcclusion : 1;                           // 0x00FC(0x0004) (Edit)
	unsigned long                                      bForceMipStreaming : 1;                                   // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDecals : 1;                                       // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                         // 0x00FC(0x0004) (Edit, Const)
	unsigned long                                      bIsRefreshingDecals : 1;                                  // 0x00FC(0x0004) (Const, Native, Transient)
	unsigned long                                      bAcceptsFoliage : 1;                                      // 0x00FC(0x0004) (Edit, Const)
	int                                                TranslucencySortPriority;                                 // 0x0100(0x0004) (Edit)
	unsigned long                                      CastShadow : 1;                                           // 0x0104(0x0004) (Edit)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x0104(0x0004) (Edit, Const)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0104(0x0004) (Edit)
	unsigned long                                      bCastHiddenShadow : 1;                                    // 0x0104(0x0004) (Edit)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x0104(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x0104(0x0004) (Edit, Const)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0108(0x0004) (Edit, Const)
	unsigned long                                      bUsePrecomputedShadows : 1;                               // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;                      // 0x010C(0x0004) (Edit)
	unsigned long                                      CollideActors : 1;                                        // 0x010C(0x0004) (Const)
	unsigned long                                      BlockActors : 1;                                          // 0x010C(0x0004) (Const)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x010C(0x0004) (Const)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x010C(0x0004) (Const)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      RigidBodyIgnorePawns : 1;                                 // 0x010C(0x0004) (Const)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0110(0x0001) (Edit, Const)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                                    // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bDisableAllRigidBody : 1;                                 // 0x0118(0x0004) (Edit, Const)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0118(0x0004) (Edit, Const)
	unsigned long                                      bFluidDrain : 1;                                          // 0x0118(0x0004) (Edit, Const)
	unsigned long                                      bFluidTwoWay : 1;                                         // 0x0118(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreRadialImpulse : 1;                                 // 0x0118(0x0004) (Edit)
	unsigned long                                      bIgnoreRadialForce : 1;                                   // 0x0118(0x0004) (Edit)
	unsigned long                                      bIgnoreForceField : 1;                                    // 0x0118(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0118(0x0004) (Edit, Const)
	unsigned long                                      AlwaysLoadOnClient : 1;                                   // 0x0118(0x0004) (Const)
	unsigned long                                      AlwaysLoadOnServer : 1;                                   // 0x0118(0x0004) (Const)
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                        // 0x0118(0x0004) (Edit)
	unsigned long                                      bWasSNFiltered : 1;                                       // 0x0118(0x0004) (Const, Native, Transient)
	TArray<int>                                        OctreeNodes;                                              // 0x011C(0x000C) (Const, Native, Transient)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x0128(0x0004) (Edit, Const)
	class URB_BodyInstance*                            BodyInstance;                                             // 0x012C(0x0004) (Const, Native)
	unsigned char                                      RBDominanceGroup;                                         // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0131(0x000F) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                                      // 0x0140(0x0040) (Const, Native, Transient)
	struct FVector                                     Translation;                                              // 0x0180(0x000C) (Edit, Const)
	struct FRotator                                    Rotation;                                                 // 0x018C(0x000C) (Edit, Const)
	float                                              Scale;                                                    // 0x0198(0x0004) (Edit, Const)
	struct FVector                                     Scale3D;                                                  // 0x019C(0x000C) (Edit, Const)
	unsigned long                                      AbsoluteTranslation : 1;                                  // 0x01A8(0x0004) (Edit, Const)
	unsigned long                                      AbsoluteRotation : 1;                                     // 0x01A8(0x0004) (Edit, Const)
	unsigned long                                      AbsoluteScale : 1;                                        // 0x01A8(0x0004) (Edit, Const)
	float                                              LastSubmitTime;                                           // 0x01AC(0x0004) (Const, Transient)
	float                                              LastRenderTime;                                           // 0x01B0(0x0004) (Transient)
	unsigned long                                      PendingRenderCommandExecution : 1;                        // 0x01B4(0x0004) (Transient)
	float                                              ScriptRigidBodyCollisionThreshold;                        // 0x01B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}


	struct FRotator GetRotation();
	struct FVector GetPosition();
	void SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale);
	void SetScale3D(const struct FVector& NewScale3D);
	void SetScale(float NewScale);
	void SetRotation(const struct FRotator& NewRotation);
	void SetTranslation(const struct FVector& NewTranslation);
	void SetActorCollision(bool NewCollideActors, bool NewBlockActors);
	void SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent);
	void SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup);
	void SetDepthPriorityGroup(TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup);
	void SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels);
	void SetCullDistance(float NewCullDistance);
	void SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment);
	void SetShadowParent(class UPrimitiveComponent* NewShadowParent);
	void SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden);
	void SetOwnerNoSeeWithShadow(bool bNewOwnerNoSeeWithShadow);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetHidden(bool NewHidden);
	void SetRBDominanceGroup(unsigned char InDomGroup);
	class URB_BodyInstance* GetRootBodyInstance();
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetRBChannel(TEnumAsByte<ERBCollisionChannel> Channel);
	void SetRBCollidesWithChannel(TEnumAsByte<ERBCollisionChannel> Channel, bool bNewCollides);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	bool RigidBodyIsAwake(const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	void WakeRigidBody(const struct FName& BoneName);
	void SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName);
	void SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName);
	void SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff);
	void AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.ArrowComponent
// 0x0008 (0x01C4 - 0x01BC)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x01BC(0x0004) (Edit)
	float                                              ArrowSize;                                                // 0x01C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x0183 (0x01D8 - 0x0055)
class UAudioComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class USoundCue*                                   SoundCue;                                                 // 0x0058(0x0004) (Edit)
	class USoundNode*                                  CueFirstNode;                                             // 0x005C(0x0004) (Const, Native)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x0060(0x000C) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bUseOwnerLocation : 1;                                    // 0x006C(0x0004)
	unsigned long                                      bAutoPlay : 1;                                            // 0x006C(0x0004)
	unsigned long                                      bAutoDestroy : 1;                                         // 0x006C(0x0004)
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                              // 0x006C(0x0004)
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                         // 0x006C(0x0004)
	unsigned long                                      bWasOccluded : 1;                                         // 0x006C(0x0004) (Transient)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x006C(0x0004) (Transient)
	unsigned long                                      bWasPlaying : 1;                                          // 0x006C(0x0004) (Transient)
	unsigned long                                      bApplyEffects : 1;                                        // 0x006C(0x0004) (Const, Native)
	unsigned long                                      bAlwaysPlay : 1;                                          // 0x006C(0x0004) (Native)
	unsigned long                                      bUberAlwaysPlay : 1;                                      // 0x006C(0x0004) (Native)
	unsigned long                                      bAllowSpatialization : 1;                                 // 0x006C(0x0004)
	unsigned long                                      bIsUISound : 1;                                           // 0x006C(0x0004)
	unsigned long                                      bIsMusic : 1;                                             // 0x006C(0x0004) (Transient)
	unsigned long                                      bNoReverb : 1;                                            // 0x006C(0x0004) (Transient)
	unsigned long                                      bFinished : 1;                                            // 0x006C(0x0004) (Transient)
	unsigned long                                      bIgnoreForFlushing : 1;                                   // 0x006C(0x0004) (Transient)
	TArray<struct FPointer>                            WaveInstances;                                            // 0x0070(0x000C) (Const, Native, DuplicateTransient)
	TArray<unsigned char>                              SoundNodeData;                                            // 0x007C(0x000C) (Const, Native, DuplicateTransient)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0088(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                                    // 0x00C4(0x003C) (Const, Native, DuplicateTransient)
	struct FPointer                                    Listener;                                                 // 0x0100(0x0004) (Const, Native, DuplicateTransient)
	float                                              PlaybackTime;                                             // 0x0104(0x0004) (Const, Native, DuplicateTransient)
	class APortalVolume*                               PortalVolume;                                             // 0x0108(0x0004) (Const, Native, DuplicateTransient)
	struct FVector                                     Location;                                                 // 0x010C(0x000C) (Native, DuplicateTransient)
	struct FVector                                     ComponentLocation;                                        // 0x0118(0x000C) (Const, Native, DuplicateTransient)
	struct FVector                                     LocationOffset;                                           // 0x0124(0x000C) (Native, DuplicateTransient)
	unsigned long                                      bDebugOffset : 1;                                         // 0x0130(0x0004)
	float                                              SubtitlePriority;                                         // 0x0134(0x0004) (Native)
	float                                              FadeInStartTime;                                          // 0x0138(0x0004)
	float                                              FadeInStopTime;                                           // 0x013C(0x0004)
	float                                              FadeInTargetVolume;                                       // 0x0140(0x0004)
	float                                              FadeOutStartTime;                                         // 0x0144(0x0004)
	float                                              FadeOutStopTime;                                          // 0x0148(0x0004)
	float                                              FadeOutTargetVolume;                                      // 0x014C(0x0004)
	float                                              AdjustVolumeStartTime;                                    // 0x0150(0x0004)
	float                                              AdjustVolumeStopTime;                                     // 0x0154(0x0004)
	float                                              AdjustVolumeTargetVolume;                                 // 0x0158(0x0004)
	float                                              CurrAdjustVolumeTargetVolume;                             // 0x015C(0x0004)
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                          // 0x0160(0x0004) (Const, Native)
	struct FVector                                     CurrentLocation;                                          // 0x0164(0x000C) (Const, Native)
	float                                              CurrentVolume;                                            // 0x0170(0x0004) (Const, Native)
	float                                              CurrentPitch;                                             // 0x0174(0x0004) (Const, Native)
	float                                              CurrentHighFrequencyGain;                                 // 0x0178(0x0004) (Const, Native)
	int                                                CurrentUseSpatialization;                                 // 0x017C(0x0004) (Const, Native)
	int                                                CurrentUseSeamlessLooping;                                // 0x0180(0x0004) (Const, Native)
	float                                              CurrentVolumeMultiplier;                                  // 0x0184(0x0004) (Const, Native)
	float                                              CurrentPitchMultiplier;                                   // 0x0188(0x0004) (Const, Native)
	float                                              CurrentVoiceCenterChannelVolume;                          // 0x018C(0x0004) (Const, Native)
	float                                              CurrentVoiceRadioVolume;                                  // 0x0190(0x0004) (Const, Native)
	float                                              VolumeMultiplier;                                         // 0x0194(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x0198(0x0004) (Edit)
	float                                              CurrentHighFrequencyGainMultiplier;                       // 0x019C(0x0004) (Const, Native)
	float                                              LowPassMultiplier;                                        // 0x01A0(0x0004) (Edit)
	float                                              AdjustLowPassStartTime;                                   // 0x01A4(0x0004) (Transient)
	float                                              AdjustLowPassStopTime;                                    // 0x01A8(0x0004) (Transient)
	float                                              AdjustLowPassTargetLevel;                                 // 0x01AC(0x0004) (Transient)
	float                                              CurrAdjustLowPassLevel;                                   // 0x01B0(0x0004) (Transient)
	float                                              OcclusionVolumeDuckLevel;                                 // 0x01B4(0x0004) (Edit)
	float                                              OcclusionFilterDuckLevel;                                 // 0x01B8(0x0004) (Edit)
	float                                              OcclusionFadeTime;                                        // 0x01BC(0x0004) (Edit)
	float                                              OcclusionCheckInterval;                                   // 0x01C0(0x0004) (Edit)
	float                                              LastOcclusionCheckTime;                                   // 0x01C4(0x0004) (Transient)
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                                       // 0x01C8(0x0004) (Const, ExportObject, Component, EditInline)
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                              // 0x01CC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}


	void OcclusionChanged(bool bNowOccluded);
	void OnAudioFinished(class UAudioComponent* AC);
	void ResetToDefaults();
	void SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void AdjustLowPassFiltering(float AdjustLowPassDuration, float AdjustLowPassLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	bool IsPlaying();
	void Stop();
	void Play();
};


// Class Engine.Ladder
// 0x0008 (0x031C - 0x0314)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                                 // 0x0314(0x0004)
	class ALadder*                                     LadderList;                                               // 0x0318(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Ladder");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
};


// Class Engine.AutoLadder
// 0x0000 (0x031C - 0x031C)
class AAutoLadder : public ALadder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoLadder");
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0004 (0x0200 - 0x01FC)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bClampFluid : 1;                                          // 0x01FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}

};


// Class Engine.BloomEffect
// 0x0000 (0x0061 - 0x0061)
class UBloomEffect : public UPostProcessEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BloomEffect");
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0018 (0x0054 - 0x003C)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x003C(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x0048(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}

};


// Class Engine.KMeshProps
// 0x0040 (0x007C - 0x003C)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                                 // 0x003C(0x000C) (Edit)
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0048(0x0034) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KMeshProps");
		return ptr;
	}

};


// Class Engine.BrushComponent
// 0x004C (0x0208 - 0x01BC)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x01BC(0x0004) (Const)
	struct FKAggregateGeom                             BrushAggGeom;                                             // 0x01C0(0x0034) (NeedCtorLink)
	struct FPointer                                    BrushPhysDesc;                                            // 0x01F4(0x0004) (Const, Native, Transient, NoImport)
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                                      // 0x01F8(0x000C) (Const, Native, Transient, NoImport)
	int                                                CachedPhysBrushDataVersion;                               // 0x0204(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}

};


// Class Engine.CameraActor
// 0x02D0 (0x0490 - 0x01C0)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x01C0(0x0004) (Edit)
	unsigned long                                      bCamOverridePostProcess : 1;                              // 0x01C0(0x0004) (Edit)
	float                                              AspectRatio;                                              // 0x01C4(0x0004) (Edit, Net)
	float                                              FOVAngle;                                                 // 0x01C8(0x0004) (Edit, Net)
	struct FPostProcessSettings                        CamOverridePostProcess;                                   // 0x01CC(0x02BC) (Edit, NeedCtorLink)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0488(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x048C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}


	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void GetCameraView(float DeltaTime, struct FTPOV* OutPOV);
};


// Class Engine.CameraAnim
// 0x0008 (0x0044 - 0x003C)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x003C(0x0004)
	float                                              AnimLength;                                               // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x0038 (0x0074 - 0x003C)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x003C(0x0004)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0040(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              CurTime;                                                  // 0x0044(0x0004) (Transient)
	unsigned long                                      bLooping : 1;                                             // 0x0048(0x0004) (Transient)
	unsigned long                                      bFinished : 1;                                            // 0x0048(0x0004) (Transient)
	unsigned long                                      bBlendingIn : 1;                                          // 0x0048(0x0004) (Transient)
	unsigned long                                      bBlendingOut : 1;                                         // 0x0048(0x0004) (Transient)
	float                                              BlendInTime;                                              // 0x004C(0x0004)
	float                                              BlendOutTime;                                             // 0x0050(0x0004)
	float                                              CurBlendInTime;                                           // 0x0054(0x0004) (Transient)
	float                                              CurBlendOutTime;                                          // 0x0058(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x005C(0x0004)
	float                                              PlayScale;                                                // 0x0060(0x0004)
	float                                              CurrentBlendWeight;                                       // 0x0064(0x0004)
	float                                              RemainingTime;                                            // 0x0068(0x0004) (Transient)
	class UInterpTrackMove*                            MoveTrack;                                                // 0x006C(0x0004)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}


	void Stop(bool bImmediate);
	void AdvanceAnim(float DeltaTime, bool bJump);
	void Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration);
};


// Class Engine.CameraConeComponent
// 0x0000 (0x01BC - 0x01BC)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraConeComponent");
		return ptr;
	}

};


// Class Engine.CameraMode
// 0x0000 (0x003C - 0x003C)
class UCameraMode : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraMode");
		return ptr;
	}


	bool AllowPawnRotation();
	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
};


// Class Engine.CameraModifier
// 0x0008 (0x0044 - 0x003C)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bPendingDisable : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bDebug : 1;                                               // 0x003C(0x0004) (Edit)
	class ACamera*                                     CameraOwner;                                              // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}


	bool ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void ToggleModifier();
	void EnableModifier();
	void DisableModifier();
	bool IsDisabled();
	bool RemoveCameraModifier(class ACamera* Camera);
	bool AddCameraModifier(class ACamera* Camera);
	bool ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV);
	void Init();
};


// Class Engine.Canvas
// 0x004C (0x0088 - 0x003C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                                     // 0x003C(0x0004)
	float                                              OrgX;                                                     // 0x0040(0x0004)
	float                                              OrgY;                                                     // 0x0044(0x0004)
	float                                              ClipX;                                                    // 0x0048(0x0004)
	float                                              ClipY;                                                    // 0x004C(0x0004)
	float                                              CurX;                                                     // 0x0050(0x0004)
	float                                              CurY;                                                     // 0x0054(0x0004)
	float                                              CurYL;                                                    // 0x0058(0x0004)
	struct FColor                                      DrawColor;                                                // 0x005C(0x0004)
	unsigned long                                      bCenter : 1;                                              // 0x0060(0x0004)
	unsigned long                                      bNoSmooth : 1;                                            // 0x0060(0x0004)
	int                                                SizeX;                                                    // 0x0064(0x0004) (Const)
	int                                                SizeY;                                                    // 0x0068(0x0004) (Const)
	struct FPointer                                    Canvas;                                                   // 0x006C(0x0004) (Const, Native)
	struct FPointer                                    SceneView;                                                // 0x0070(0x0004) (Const, Native)
	struct FPlane                                      ColorModulate;                                            // 0x0074(0x0010)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	void DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture2D* Tex, float U, float V, float UL, float VL);
	void DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture2D* LineTexture, float U, float V, float UL, float VL);
	void Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	void DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY);
	void DrawRotatedTile(class UTexture2D* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY);
	void SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A);
	void DrawBox(float Width, float Height);
	void DrawRect(float RectX, float RectY, class UTexture2D* Tex);
	void DrawIconSection(const struct FCanvasIcon& Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale);
	void DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale);
	struct FCanvasIcon MakeIcon(class UTexture2D* Texture, float U, float V, float UL, float VL);
	void DrawTexture(class UTexture2D* Tex, float Scale);
	void SetClip(float X, float Y);
	void SetOrigin(float X, float Y);
	void SetPos(float PosX, float PosY);
	void Reset(bool bKeepOrigin);
	void DrawColorizedTile(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor);
	void DrawTileStretched(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor);
	void PopTransform();
	void PushTranslationMatrix(const struct FVector& TranslationVector);
	struct FVector Project(const struct FVector& Location);
	void DrawTileClipped(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL);
	void DrawTextRA(const struct FString& Text, bool CR);
	void DrawTextClipped(const struct FString& Text, bool bCheckHotKey, float XScale, float YScale);
	void DrawText(const struct FString& Text, bool CR, float XScale, float YScale);
	void TextSize(const struct FString& String, float* XL, float* YL);
	void StrLen(const struct FString& String, float* XL, float* YL);
	void DrawMaterialTileClipped(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL);
	void DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL);
	void DrawTile(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL);
};


// Class Engine.CeilingReachSpec
// 0x0000 (0x0098 - 0x0098)
class UCeilingReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CeilingReachSpec");
		return ptr;
	}

};


// Class Engine.Download
// 0x0A34 (0x0A70 - 0x003C)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA34];                                     // 0x003C(0x0A34) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Download");
		return ptr;
	}

};


// Class Engine.ChannelDownload
// 0x0004 (0x0A74 - 0x0A70)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A70(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChannelDownload");
		return ptr;
	}

};


// Class Engine.Controller
// 0x010C (0x02CC - 0x01C0)
class AController : public AActor
{
public:
	class APawn*                                       Pawn;                                                     // 0x01C0(0x0004) (Net)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x01C4(0x0004) (Net)
	int                                                PlayerNum;                                                // 0x01C8(0x0004) (Const)
	class AController*                                 NextController;                                           // 0x01CC(0x0004) (Const)
	unsigned long                                      bIsPlayer : 1;                                            // 0x01D0(0x0004)
	unsigned long                                      bGodMode : 1;                                             // 0x01D0(0x0004)
	unsigned long                                      bAffectedByHitEffects : 1;                                // 0x01D0(0x0004)
	unsigned long                                      bSoaking : 1;                                             // 0x01D0(0x0004)
	unsigned long                                      bSlowerZAcquire : 1;                                      // 0x01D0(0x0004)
	unsigned long                                      bForceStrafe : 1;                                         // 0x01D0(0x0004)
	unsigned long                                      bNotifyPostLanded : 1;                                    // 0x01D0(0x0004)
	unsigned long                                      bNotifyApex : 1;                                          // 0x01D0(0x0004)
	unsigned long                                      bAdvancedTactics : 1;                                     // 0x01D0(0x0004)
	unsigned long                                      bCanDoSpecial : 1;                                        // 0x01D0(0x0004)
	unsigned long                                      bAdjusting : 1;                                           // 0x01D0(0x0004)
	unsigned long                                      bPreparingMove : 1;                                       // 0x01D0(0x0004)
	unsigned long                                      bIgnoreMovementFocus : 1;                                 // 0x01D0(0x0004)
	unsigned long                                      bLOSflag : 1;                                             // 0x01D0(0x0004) (Const)
	unsigned long                                      bUsePlayerHearing : 1;                                    // 0x01D0(0x0004)
	unsigned long                                      bNotifyFallingHitWall : 1;                                // 0x01D0(0x0004)
	unsigned long                                      bForceDesiredRotation : 1;                                // 0x01D0(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x01D0(0x0004)
	unsigned long                                      bSeeFriendly : 1;                                         // 0x01D0(0x0004)
	unsigned long                                      bUsingPathLanes : 1;                                      // 0x01D0(0x0004)
	unsigned char                                      bFire;                                                    // 0x01D4(0x0001) (Input)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	float                                              MinHitWall;                                               // 0x01D8(0x0004)
	float                                              MoveTimer;                                                // 0x01DC(0x0004)
	class AActor*                                      MoveTarget;                                               // 0x01E0(0x0004)
	struct FVector                                     Destination;                                              // 0x01E4(0x000C)
	struct FVector                                     FocalPoint;                                               // 0x01F0(0x000C)
	class AActor*                                      Focus;                                                    // 0x01FC(0x0004)
	class AActor*                                      GoalList[0x4];                                            // 0x0200(0x0004)
	struct FVector                                     AdjustLoc;                                                // 0x0210(0x000C)
	class ANavigationPoint*                            StartSpot;                                                // 0x021C(0x0004)
	TArray<class ANavigationPoint*>                    RouteCache;                                               // 0x0220(0x000C) (NeedCtorLink)
	class UReachSpec*                                  CurrentPath;                                              // 0x022C(0x0004)
	class UReachSpec*                                  NextRoutePath;                                            // 0x0230(0x0004)
	struct FVector                                     CurrentPathDir;                                           // 0x0234(0x000C)
	class AActor*                                      RouteGoal;                                                // 0x0240(0x0004)
	float                                              RouteDist;                                                // 0x0244(0x0004)
	float                                              LastRouteFind;                                            // 0x0248(0x0004)
	class AInterpActor*                                PendingMover;                                             // 0x024C(0x0004)
	float                                              GroundPitchTime;                                          // 0x0250(0x0004)
	struct FVector                                     ViewX;                                                    // 0x0254(0x000C)
	struct FVector                                     ViewY;                                                    // 0x0260(0x000C)
	struct FVector                                     ViewZ;                                                    // 0x026C(0x000C)
	class APawn*                                       ShotTarget;                                               // 0x0278(0x0004)
	class AActor*                                      LastFailedReach;                                          // 0x027C(0x0004) (Const)
	float                                              FailedReachTime;                                          // 0x0280(0x0004) (Const)
	struct FVector                                     FailedReachLocation;                                      // 0x0284(0x000C) (Const)
	float                                              SightCounter;                                             // 0x0290(0x0004)
	float                                              RespawnPredictionTime;                                    // 0x0294(0x0004)
	float                                              InUseNodeCostMultiplier;                                  // 0x0298(0x0004)
	int                                                HighJumpNodeCostModifier;                                 // 0x029C(0x0004)
	class APawn*                                       Enemy;                                                    // 0x02A0(0x0004)
	class AActor*                                      Target;                                                   // 0x02A4(0x0004) (Deprecated)
	TArray<struct FVisiblePortalInfo>                  VisiblePortals;                                           // 0x02A8(0x000C) (NeedCtorLink)
	float                                              LaneOffset;                                               // 0x02B4(0x0004)
	struct FRotator                                    OldBasedRotation;                                         // 0x02B8(0x000C) (Const)
	int                                                currentLaneSlot;                                          // 0x02C4(0x0004)
	int                                                pathMatesCount;                                           // 0x02C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	void SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType);
	void CurrentLevelUnloaded();
	class AActor* GetRouteGoalAfter(int RouteIdx);
	bool IsInCombat();
	bool IsSpectating();
	class AController* GetKillerController();
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void NotifyAddInventory(class AInventory* NewItem);
	void OnCauseDamage(class USeqAct_CauseDamage* Action);
	bool NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx);
	void NotifyCoverAdjusted();
	void NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx);
	void OnToggleAffectedByHitEffects(class USeqAct_ToggleAffectedByHitEffects* inAction);
	void OnToggleGodMode(class USeqAct_ToggleGodMode* inAction);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnMakeNoise(class USeqAct_MakeNoise* Action);
	bool IsDead();
	struct FString GetHumanReadableName();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void StopLatentExecution();
	bool InLatentExecution(int LatentActionNumber);
	void NotifyMissedJump();
	void NotifyJumpApex();
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	bool NotifyHeadVolumeChange(class APhysicsVolume* NewVolume);
	void NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume);
	bool LandingShake();
	bool IsAimingAt(class AActor* ATarget, float Epsilon);
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	bool HandlePathObstruction(class AActor* BlockedBy);
	void UnderLift(class ALiftCenter* Lift);
	bool MoverFinished();
	void WaitForMover(class AInterpActor* M);
	bool AllowDetourTo(class ANavigationPoint* N);
	void MayFall();
	void EndClimbLadder();
	void LongFall();
	void WaitForLanding(float waitDuration);
	bool PickWallAdjust(const struct FVector& HitNormal);
	void MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget);
	bool ActorReachable(class AActor* anActor);
	bool PointReachable(const struct FVector& aPoint);
	class AActor* FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class ANavigationPoint* FindRandomDest();
	class AActor* FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class AActor* FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class AActor* FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial);
	void FinishRotation();
	void SetupSpecialPathAbilities();
	void MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk);
	void MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, bool bShouldWalk);
	void EnemyNotVisible();
	void SeeMonster(class APawn* Seen);
	void SeePlayer(class APawn* Seen);
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType);
	class APawn* PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* bestDist);
	bool CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation);
	bool CanSee(class APawn* Other);
	bool LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc);
	void NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon);
	void ClientSetWeapon(class UClass* WeaponClass);
	void ClientSwitchToBestWeapon(bool bForceNewWeapon);
	void SwitchToBestWeapon(bool bForceNewWeapon);
	void ReceiveProjectileWarning(class AProjectile* Proj);
	void ReceiveWarning(class APawn* Shooter, float projSpeed, const struct FVector& FireDir);
	void CheckNearMiss(class APawn* Shooter, class AWeapon* W, const struct FVector& WeapLoc, const struct FVector& LineDir, const struct FVector& HitLocation);
	void InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void HandlePickup(class AInventory* Inv);
	void RoundHasEnded(class AActor* EndRoundFocus);
	void StopFiring();
	bool FireWeaponAt(class AActor* inActor);
	float RatePickup(class AActor* PickupHolder, class UClass* inPickup);
	void WarnProjExplode(class AProjectile* Proj);
	void NotifyProjLanded(class AProjectile* Proj);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn);
	void GameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void SetCharacter(const struct FString& inCharacter);
	void ServerGivePawn();
	void ServerRestartPlayer();
	unsigned char GetTeamNum();
	void InitPlayerReplicationInfo();
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void EnemyJustTeleported();
	bool BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint);
	void Restart(bool bVehicleTransition);
	void CleanupPRI();
	void Destroyed();
	void NotifyPostLanded();
	bool GamePlayEndedState();
	void PawnDied(class APawn* inPawn);
	void UnPossess();
	void UpdateSex();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void OnPossess(class USeqAct_Possess* inAction);
	void ReplicatedEvent(const struct FName& VarName);
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void Reset();
	void PostBeginPlay();
	void RouteCache_RemoveIndex(int InIndex, int Count);
	void RouteCache_RemoveItem(class ANavigationPoint* Nav);
	void RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx);
	void RouteCache_AddItem(class ANavigationPoint* Nav);
	void RouteCache_Empty();
	bool IsLocalPlayerController();
};


// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MusicTrackDataStructures");
		return ptr;
	}

};


// Class Engine.OnlineSubsystem
// 0x005C (0x0098 - 0x003C)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	TScriptInterface<class UOnlineAccountInterface>    AccountInterface;                                         // 0x0040(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x0048(0x0008)
	TScriptInterface<class UOnlinePlayerInterfaceEx>   PlayerInterfaceEx;                                        // 0x0050(0x0008)
	TScriptInterface<class UOnlineSystemInterface>     SystemInterface;                                          // 0x0058(0x0008)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0060(0x0008)
	TScriptInterface<class UOnlineContentInterface>    ContentInterface;                                         // 0x0068(0x0008)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x0070(0x0008)
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x0078(0x0008)
	TScriptInterface<class UOnlineNewsInterface>       NewsInterface;                                            // 0x0080(0x0008)
	TScriptInterface<class UOnlinePlayGroupInterface>  PlayGroupInterface;                                       // 0x0088(0x0008)
	TScriptInterface<class UOnlineFileLockerInterface> FileLockerInterface;                                      // 0x0090(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSubsystem");
		return ptr;
	}


	bool STATIC_StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId);
	struct FString STATIC_UniqueNetIdToString(struct FUniqueNetId* IdToConvert);
	bool SetNewsInterface(class UObject* NewInterface);
	bool SetStatsInterface(class UObject* NewInterface);
	bool SetVoiceInterface(class UObject* NewInterface);
	bool SetContentInterface(class UObject* NewInterface);
	bool SetGameInterface(class UObject* NewInterface);
	bool SetSystemInterface(class UObject* NewInterface);
	bool SetPlayerInterfaceEx(class UObject* NewInterface);
	bool SetPlayerInterface(class UObject* NewInterface);
	bool SetAccountInterface(class UObject* NewInterface);
	bool Init();
};


// Class Engine.PlayerController
// 0x025C (0x0528 - 0x02CC)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x02CC(0x0004) (Const)
	class ACamera*                                     PlayerCamera;                                             // 0x02D0(0x0004)
	class UClass*                                      CameraClass;                                              // 0x02D4(0x0004) (Const)
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x02D8(0x0004)
	class UClass*                                      DebugCameraControllerClass;                               // 0x02DC(0x0004)
	class UClass*                                      PlayerOwnerDataStoreClass;                                // 0x02E0(0x0004) (Const)
	class UPlayerOwnerDataStore*                       CurrentPlayerData;                                        // 0x02E4(0x0004)
	class UUIDataStore_PlayerSettings*                 CurrentPlayerSettings;                                    // 0x02E8(0x0004)
	unsigned long                                      bFrozen : 1;                                              // 0x02EC(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x02EC(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x02EC(0x0004)
	unsigned long                                      bUpdatePosition : 1;                                      // 0x02EC(0x0004)
	unsigned long                                      bUpdating : 1;                                            // 0x02EC(0x0004)
	unsigned long                                      bNeverSwitchOnPickup : 1;                                 // 0x02EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCheatFlying : 1;                                         // 0x02EC(0x0004)
	unsigned long                                      bCameraPositionLocked : 1;                                // 0x02EC(0x0004)
	unsigned long                                      bShortConnectTimeOut : 1;                                 // 0x02EC(0x0004)
	unsigned long                                      bPendingDestroy : 1;                                      // 0x02EC(0x0004) (Const)
	unsigned long                                      bWasSpeedHack : 1;                                        // 0x02EC(0x0004)
	unsigned long                                      bWasSaturated : 1;                                        // 0x02EC(0x0004) (Const)
	unsigned long                                      bDynamicNetSpeed : 1;                                     // 0x02EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAimingHelp : 1;                                          // 0x02EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCinematicMode : 1;                                       // 0x02EC(0x0004)
	unsigned long                                      bCinemaDisableInputMove : 1;                              // 0x02EC(0x0004)
	unsigned long                                      bCinemaDisableInputLook : 1;                              // 0x02EC(0x0004)
	unsigned long                                      bReplicateAllPawns : 1;                                   // 0x02EC(0x0004)
	unsigned long                                      bIsUsingStreamingVolumes : 1;                             // 0x02EC(0x0004)
	unsigned long                                      bIsExternalUIOpen : 1;                                    // 0x02EC(0x0004)
	unsigned long                                      bIsControllerConnected : 1;                               // 0x02EC(0x0004)
	unsigned long                                      bCheckSoundOcclusion : 1;                                 // 0x02EC(0x0004)
	unsigned long                                      bLogHearSoundOverflow : 1;                                // 0x02EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                        // 0x02EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bReceivedUniqueId : 1;                                    // 0x02EC(0x0004)
	unsigned long                                      bCanSeeLOI : 1;                                           // 0x02EC(0x0004) (Transient)
	float                                              MaxResponseTime;                                          // 0x02F0(0x0004)
	float                                              WaitDelay;                                                // 0x02F4(0x0004)
	class APawn*                                       AcknowledgedPawn;                                         // 0x02F8(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickDir;                                           // 0x02FC(0x0001)
	unsigned char                                      bIgnoreMoveInput;                                         // 0x02FD(0x0001)
	unsigned char                                      bIgnoreLookInput;                                         // 0x02FE(0x0001)
	unsigned char                                      bRun;                                                     // 0x02FF(0x0001) (Input)
	unsigned char                                      bDuck;                                                    // 0x0300(0x0001) (Input)
	unsigned char                                      NetPlayerIndex;                                           // 0x0301(0x0001) (Const, DuplicateTransient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0302(0x0002) MISSED OFFSET
	class AActor*                                      ViewTarget;                                               // 0x0304(0x0004) (Const)
	class APlayerReplicationInfo*                      RealViewTarget;                                           // 0x0308(0x0004)
	float                                              FOVAngle;                                                 // 0x030C(0x0004)
	float                                              DesiredFOV;                                               // 0x0310(0x0004)
	float                                              DefaultFOV;                                               // 0x0314(0x0004)
	float                                              LODDistanceFactor;                                        // 0x0318(0x0004) (Const)
	struct FRotator                                    TargetViewRotation;                                       // 0x031C(0x000C) (Net)
	float                                              TargetEyeHeight;                                          // 0x0328(0x0004) (Net)
	struct FRotator                                    BlendedTargetViewRotation;                                // 0x032C(0x000C)
	class AHUD*                                        myHUD;                                                    // 0x0338(0x0004)
	class UClass*                                      SavedMoveClass;                                           // 0x033C(0x0004)
	class USavedMove*                                  SavedMoves;                                               // 0x0340(0x0004)
	class USavedMove*                                  FreeMoves;                                                // 0x0344(0x0004)
	class USavedMove*                                  PendingMove;                                              // 0x0348(0x0004)
	struct FVector                                     LastAckedAccel;                                           // 0x034C(0x000C)
	float                                              CurrentTimeStamp;                                         // 0x0358(0x0004)
	float                                              LastUpdateTime;                                           // 0x035C(0x0004)
	float                                              ServerTimeStamp;                                          // 0x0360(0x0004)
	float                                              TimeMargin;                                               // 0x0364(0x0004)
	float                                              ClientUpdateTime;                                         // 0x0368(0x0004)
	float                                              MaxTimeMargin;                                            // 0x036C(0x0004)
	float                                              LastActiveTime;                                           // 0x0370(0x0004)
	int                                                ClientCap;                                                // 0x0374(0x0004)
	float                                              DynamicPingThreshold;                                     // 0x0378(0x0004) (Config, GlobalConfig)
	float                                              LastPingUpdate;                                           // 0x037C(0x0004)
	float                                              OldPing;                                                  // 0x0380(0x0004)
	float                                              LastSpeedHackLog;                                         // 0x0384(0x0004)
	struct FClientAdjustment                           PendingAdjustment;                                        // 0x0388(0x0034)
	struct FString                                     ProgressMessage[0x2];                                     // 0x03BC(0x000C) (NeedCtorLink)
	float                                              ProgressTimeOut;                                          // 0x03D4(0x0004)
	struct FString                                     QuickSaveString;                                          // 0x03D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoPauseMessage;                                           // 0x03E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ViewingFrom;                                              // 0x03F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OwnCamera;                                                // 0x03FC(0x000C) (Const, Localized, NeedCtorLink)
	int                                                GroundPitch;                                              // 0x0408(0x0004)
	struct FVector                                     OldFloor;                                                 // 0x040C(0x000C)
	class UCheatManager*                               CheatManager;                                             // 0x0418(0x0004) (Transient)
	class UClass*                                      CheatClass;                                               // 0x041C(0x0004)
	class UPlayerInput*                                PlayerInput;                                              // 0x0420(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      InputClass;                                               // 0x0424(0x0004)
	struct FVector                                     FailedPathStart;                                          // 0x0428(0x000C) (Const)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0434(0x0004) (ExportObject, Component, EditInline)
	struct FString                                     ForceFeedbackManagerClassName;                            // 0x0438(0x000C) (Config, NeedCtorLink)
	class UForceFeedbackManager*                       ForceFeedbackManager;                                     // 0x0444(0x0004) (Transient)
	TArray<class UInteraction*>                        Interactions;                                             // 0x0448(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUniqueNetId>                        VoiceMuteList;                                            // 0x0454(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        GameplayVoiceMuteList;                                    // 0x0460(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        VoicePacketFilter;                                        // 0x046C(0x000C) (NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0478(0x0004)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x047C(0x0008)
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                         // 0x0484(0x0004)
	float                                              InteractDistance;                                         // 0x0488(0x0004) (Config)
	TArray<struct FInputMatchRequest>                  InputRequests;                                            // 0x048C(0x000C) (NeedCtorLink)
	float                                              LastBroadcastTime;                                        // 0x0498(0x0004)
	struct FString                                     LastBroadcastString[0x4];                                 // 0x049C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               PendingMapChangeLevelNames;                               // 0x04CC(0x000C) (NeedCtorLink)
	class ACoverReplicator*                            MyCoverReplicator;                                        // 0x04D8(0x0004)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x04DC(0x000C) (NeedCtorLink)
	float                                              SpectatorCameraSpeed;                                     // 0x04E8(0x0004)
	class UNetConnection*                              PendingSwapConnection;                                    // 0x04EC(0x0004) (Const, DuplicateTransient)
	float                                              MinRespawnDelay;                                          // 0x04F0(0x0004)
	int                                                MaxConcurrentHearSounds;                                  // 0x04F4(0x0004) (Config, GlobalConfig)
	TArray<class UAudioComponent*>                     HearSoundActiveComponents;                                // 0x04F8(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UAudioComponent*>                     HearSoundPoolComponents;                                  // 0x0504(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class AActor*>                              HiddenActors;                                             // 0x0510(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x051C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	void PathClear();
	void PathChild(int Cnt);
	void PathStep(int Cnt);
	void SoakPause(class APawn* P);
	void IncrementNumberOfMatchesPlayed();
	bool CanViewUserCreatedContent();
	void ServerRegisterClientStatGuid(const struct FString& StatGuid);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	void ClientRegisterHostStatGuid(const struct FString& StatGuid);
	void EnableDebugCamera();
	void RemoveDebugText(class AActor* SrcActor);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck);
	void DrawDebugTextList(class UCanvas* Canvas, float RenderDelta);
	void SendToConsole(const struct FString& Command);
	void ConsoleKey(const struct FName& Key);
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClientAdjustMusicTrackVolume(class USeqAct_CrossFadeMusicTracks* MusicAction, float AdjustVolumeDuration, float AdjustVolumeLevel);
	void ClientFadeOutMusicTrack(class USeqAct_CrossFadeMusicTracks* MusicAction, float FadeOutTime, float FadeOutVolumeLevel);
	void ClientCrossFadeMusicTrack_PlayTrack(class USeqAct_CrossFadeMusicTracks* MusicAction, const struct FMusicTrackStruct& MusicTrack);
	void ServerSendMusicInfo();
	void ClientStartNetworkedVoice();
	void ClientStopNetworkedVoice();
	void ClientSetHostUniqueId(const struct FUniqueNetId& InHostId);
	void ClientWriteOnlinePlayerScores();
	void ClientArbitratedMatchEnded();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void NotifyInviteFailed();
	void OnInviteJoinComplete(bool bWasSuccessful);
	void OnDestroyForInviteComplete(bool bWasSuccessful);
	void OnEndForInviteComplete(bool bWasSuccessful);
	void ClearInviteDelegates();
	bool CanAllPlayersPlayOnline();
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);
	void OnGameInviteAccepted(class UOnlineGameSettings* GameInviteSettings);
	void ServerWritenArbitrationEndGameData();
	void ClientWriteArbitrationEndGameData(class UClass* OnlineStatsWriteClass);
	void ServerRegisteredForArbitration(bool bWasSuccessful);
	void OnArbitrationRegisterComplete(bool bWasSuccessful);
	void ClientRegisterForArbitration();
	void ClientWasKicked();
	void NotifyConnectionError(const struct FString& Message, const struct FString& Title);
	bool IsShowingSubtitles();
	void SetShowSubtitles(bool bValue);
	void NotifyDirectorControl(bool bNowControlling);
	void ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientMutePlayer(const struct FUniqueNetId& PlayerNetId);
	class APlayerController* STATIC_GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId);
	void ClientSetOnlineStatus();
	void SeamlessTravelFrom(class APlayerController* OldPC);
	void SeamlessTravelTo(class APlayerController* NewPC);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	bool IsPlayerMuted(struct FUniqueNetId* Sender);
	class UUIInteraction* GetUIController();
	void SaveActorConfig(const struct FName& actorName);
	void SaveClassConfig(const struct FString& ClassName);
	void ClientSetBlockOnAsyncLoading();
	void ClientFlushLevelStreaming();
	void ClientCommitMapChange(bool bShouldSkipLevelStartupEvent, bool bShouldSkipLevelBeginningEvent);
	void DelayedPrepareMapChange();
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void ClientForceGarbageCollection();
	void OnConsoleCommand(class USeqAct_ConsoleCommand* inAction);
	void ResetPlayerMovementInput();
	bool IsLookInputIgnored();
	void IgnoreLookInput(bool bNewLookInput);
	bool IsMoveInputIgnored();
	void IgnoreMoveInput(bool bNewMoveInput);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bSwitchSoundMode);
	void OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action);
	void CameraShake(float Duration, const struct FVector& newRotAmplitude, const struct FVector& newRotFrequency, const struct FVector& newLocAmplitude, const struct FVector& newLocFrequency, float newFOVAmplitude, float newFOVFrequency);
	void ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);
	void ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);
	void OnForceFeedback(class USeqAct_ForceFeedback* Action);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ListCE();
	void ListConsoleEvents();
	void CE(const struct FName& EventName);
	void CauseEvent(const struct FName& EventName);
	void ServerCauseEvent(const struct FName& EventName);
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);
	void OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientIgnoreMoveInput(bool bIgnore);
	void OnToggleInput(class USeqAct_ToggleInput* inAction);
	void DrawHUD(class AHUD* H);
	bool CanRestartPlayer();
	void ServerViewSelf();
	bool ViewAPlayer(int Dir);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerSetSpectatorLocation(const struct FVector& NewLoc);
	bool IsSpectating();
	void CheckJumpOrDuck();
	void ClearDoubleClick();
	struct FRotator LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax);
	void ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation);
	void UpdateRotation(float DeltaTime);
	void ViewShake(float DeltaTime);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void SpawnPlayerCamera();
	void ServerVerifyViewTarget();
	class AActor* GetViewTarget();
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	bool IsLocalPlayerController();
	float GetFOVAngle();
	void AdjustFOV(float DeltaTime);
	bool NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	float AimHelpDot(bool bInstantHit);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void CameraLookAtFinished(class USeqAct_CameraLookAt* Action);
	bool AimingHelp(bool bInstantHit);
	void PlayerMove(float DeltaTime);
	void PlayerTick(float DeltaTime);
	void NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void GameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientRestart(class APawn* NewPawn);
	void EnterStartState();
	bool HasClientLoadedCurrentWorld();
	void NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest);
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void Restart(bool bVehicleTransition);
	void ClientSetProgressTime(float T);
	void SetProgressTime(float T);
	void ClientSetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title);
	void SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title);
	void ClientClearProgressMessages();
	void ClearProgressMessages();
	void SwitchLevel(const struct FString& URL);
	void ServerChangeTeam(int N);
	void ChangeTeam(const struct FString& TeamName);
	void SwitchTeam();
	void ServerChangeName(const struct FString& S);
	void SetName(const struct FString& S);
	void ServerSuicide();
	void Suicide();
	bool TriggerInteracted();
	bool FindVehicleToDrive();
	bool PerformedUseAction();
	void ServerUse();
	void Use();
	void GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList);
	void StopAltFire(unsigned char FireModeNum);
	void StartAltFire(unsigned char FireModeNum);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void NextWeapon();
	void PrevWeapon();
	void ServerThrowWeapon();
	void ThrowWeapon();
	void UTrace();
	void ServerUTrace();
	void ConditionalPause(bool bDesiredPauseState);
	void ShowMenu();
	void ServerPause();
	void Pause();
	bool IsPaused();
	void DebugPause();
	bool SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate);
	bool CanUnpause();
	void QuickLoad();
	void QuickSave();
	void LocalTravel(const struct FString& URL);
	void RestartLevel();
	void ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign);
	void Speech(const struct FName& Type, int Index, const struct FString& Callsign);
	void ServerRestartGame();
	void HandleWalking();
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot);
	int CompressAccel(int C);
	class USavedMove* GetFreeMove();
	void ClientUpdatePosition();
	void ClearAckedMoves();
	void ServerUpdatePing(int NewPing);
	void UpdateStateFromAdjustment(const struct FName& NewState);
	void LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	void UpdatePing(float TimeStamp);
	void ServerSetNetSpeed(int NewSpeed);
	void ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase);
	void ClientAckGoodMove(float TimeStamp);
	void ClientCapBandwidth(int Cap);
	void ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot);
	void ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot);
	void ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View);
	void SendClientAdjustment();
	void ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View);
	void OldServerMove(float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags);
	void DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View);
	void ForceDeathUpdate();
	void ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char messageID);
	bool UsingFirstPersonCamera();
	void ResetCameraMode();
	void SetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ServerCamera(const struct FName& NewMode);
	void Camera(const struct FName& NewMode);
	void PreClientTravel();
	void ServerTeamSay(const struct FString& msg);
	void TeamSay(const struct FString& msg);
	void ServerSay(const struct FString& msg);
	void Say(const struct FString& msg);
	bool AllowTextMessage(const struct FString& msg);
	void ServerMutate(const struct FString& MutateString);
	void Mutate(const struct FString& MutateString);
	void FOV(float F);
	void ResetFOV();
	void SetFOV(float NewFOV);
	void FixFOV();
	void Destroyed();
	void ClearOnlineDelegates();
	void PlayBeepSound();
	void TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName);
	void Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime);
	void Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization);
	void ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded);
	class UAudioComponent* GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation);
	void HearSoundFinished(class UAudioComponent* AC);
	void ClientPlaySound(class USoundCue* ASound);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void CleanupPRI();
	void HandlePickup(class AInventory* Inv);
	void ClientSetHUD(class UClass* newHUDType, class UClass* newScoringType);
	void PawnDied(class APawn* P);
	void UnPossess();
	void ServerAcknowledgePossession(class APawn* P);
	void AcknowledgePossession(class APawn* P);
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void GivePawn(class APawn* NewPawn);
	void AskForPawn();
	void ClientGotoState(const struct FName& NewState, const struct FName& NewLabel);
	bool IsMouseAvailable();
	bool IsKeyboardAvailable();
	void SetUseTiltForwardAndBack(bool bActive);
	void SetOnlyUseControllerTiltInput(bool bActive);
	void SetControllerTiltActive(bool bActive);
	void SetControllerTiltDesiredIfAvailable(bool bActive);
	bool IsControllerTiltActive();
	float GetRumbleScale();
	void SetRumbleScale(float ScaleBy);
	void SetPlayerDataProvider(class UPlayerDataProvider* DataProvider);
	void OnProfileReadComplete(bool bSucceeded);
	void UnregisterPlayerDataStores();
	void RegisterPlayerDataStores();
	void ClientInitializeDataStores();
	void ServerSetUniquePlayerId(const struct FUniqueNetId& UniqueId, bool bWasInvited);
	void InitUniquePlayerId();
	void ReplicatedEvent(const struct FName& VarName);
	void InitInputSystem();
	void CleanOutSavedMoves();
	void ClientReset();
	void Reset();
	void SpawnDefaultHUD();
	void EnableCheats();
	void AddCheats();
	void KickWarning();
	void ServerGivePawn();
	void ServerShortTimeout();
	void ResetTimeMargin();
	void PreRender(class UCanvas* Canvas);
	void ReceivedPlayer();
	void PostBeginPlay();
	class ACoverReplicator* SpawnCoverReplicator();
	bool CanUnpauseControllerConnected();
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void FellOutOfWorld(class UClass* dmgType);
	bool CanUnpauseExternalUI();
	void OnExternalUIChanged(bool bIsOpening);
	void OnLoadLevels(bool bUnload);
	void CleanUpAudioComponents();
	int FindStairRotation(float DeltaTime);
	bool CheckSpeedHack(float DeltaTime);
	void ServerProcessConvolve(const struct FString& C, int H);
	void ClientConvolve(const struct FString& C, int H);
	void SetAudioGroupVolume(const struct FName& GroupName, float Volume);
	void SetAllowMatureLanguage(bool bAllowMatureLanguge);
	struct FString PasteFromClipboard();
	void CopyToClipboard(const struct FString& Text);
	struct FString GetDefaultURL(const struct FString& Option);
	void UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default);
	void ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	struct FString ConsoleCommand(const struct FString& Command, bool bWriteToLog);
	struct FString GetServerNetworkAddress();
	struct FString GetPlayerNetworkAddress();
	void SetNetSpeed(int NewSpeed);
	void ClientDrawCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines);
};


// Class Engine.CheatManager
// 0x0000 (0x003C - 0x003C)
class UCheatManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void TestLevel();
	void ToggleDebugCamera();
	void StreamLevelOut(const struct FName& PackageName);
	void OnlyLoadLevel(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible);
	void AllWeapons();
	void Loaded();
	void ViewClass(class UClass* aClass);
	void ViewBot();
	void ViewFlag();
	void ViewActor(const struct FName& actorName);
	void ViewPlayer(const struct FString& S);
	void ViewSelf(bool bQuiet);
	void RememberSpot();
	void PlayersOnly();
	class AWeapon* GiveWeapon(const struct FString& WeaponClassStr);
	void Summon(const struct FString& ClassName);
	void Avatar(const struct FName& ClassName);
	void KillPawns();
	void KillAllPawns(class UClass* aClass);
	void KillAll(class UClass* aClass);
	void SetSpeed(float F);
	void SetGravity(float F);
	void SetJumpZ(float F);
	void SloMo(float T);
	void AffectedByHitEffects();
	void God();
	void AllAmmo();
	void Ghost();
	void Walk();
	void Fly();
	void Amphibious();
	void EndPath();
	void ChangeSize(float F);
	struct FRotator GetFRotatorFromString(const struct FString& InStr);
	struct FVector GetFVectorFromString(const struct FString& InStr);
	void BugIt(const struct FString& ScreenShotDescription);
	void BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation);
	void BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation);
	void BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll);
	void Teleport();
	void KillViewedActor();
	void WriteToLog(const struct FString& Param);
	void FreezeFrame(float delay);
	void ListDynamicActors();
};


// Class Engine.Checkpoint
// 0x0004 (0x0318 - 0x0314)
class ACheckpoint : public ANavigationPoint
{
public:
	class URequestedTextureResources*                  CheckpointTextureResources;                               // 0x0314(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Checkpoint");
		return ptr;
	}

};


// Class Engine.Player
// 0x0024 (0x0060 - 0x003C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x003C(0x0004) (Const, Native, NoExport)
	class APlayerController*                           Actor;                                                    // 0x0040(0x0004) (Const, Transient)
	int                                                CurrentNetSpeed;                                          // 0x0044(0x0004) (Const)
	int                                                ConfiguredInternetSpeed;                                  // 0x0048(0x0004) (Config, GlobalConfig)
	int                                                ConfiguredLanSpeed;                                       // 0x004C(0x0004) (Config, GlobalConfig)
	float                                              PP_DesaturationMultiplier;                                // 0x0050(0x0004) (Config)
	float                                              PP_HighlightsMultiplier;                                  // 0x0054(0x0004) (Config)
	float                                              PP_MidTonesMultiplier;                                    // 0x0058(0x0004) (Config)
	float                                              PP_ShadowsMultiplier;                                     // 0x005C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}


	void SwitchController(class APlayerController* PC);
};


// Class Engine.NetConnection
// 0x4F48 (0x4FA8 - 0x0060)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x4F48];                                    // 0x0060(0x4F48) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.ChildConnection
// 0x0004 (0x4FAC - 0x4FA8)
class UChildConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x4FA8(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}

};


// Class Engine.Client
// 0x0018 (0x0054 - 0x003C)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                                      // 0x0040(0x0004) (Config)
	float                                              DisplayGamma;                                             // 0x0044(0x0004) (Config)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0048(0x0004) MISSED OFFSET
	float                                              InitialButtonRepeatDelay;                                 // 0x004C(0x0004) (Config)
	float                                              ButtonRepeatDelay;                                        // 0x0050(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Client");
		return ptr;
	}

};


// Class Engine.Keypoint
// 0x0000 (0x01C0 - 0x01C0)
class AKeypoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Keypoint");
		return ptr;
	}

};


// Class Engine.ClipMarker
// 0x0000 (0x01C0 - 0x01C0)
class AClipMarker : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClipMarker");
		return ptr;
	}

};


// Class Engine.ClipPadEntry
// 0x0018 (0x0054 - 0x003C)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Text;                                                     // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClipPadEntry");
		return ptr;
	}

};


// Class Engine.CodecMovie
// 0x0004 (0x0040 - 0x003C)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                         // 0x003C(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovie");
		return ptr;
	}

};


// Class Engine.CodecMovieBink
// 0x0020 (0x0060 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieBink");
		return ptr;
	}

};


// Class Engine.CodecMovieFallback
// 0x0004 (0x0044 - 0x0040)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                              // 0x0040(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieFallback");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0014 (0x007C - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0068(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.Info
// 0x0000 (0x01C0 - 0x01C0)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}

};


// Class Engine.CoverGroup
// 0x0014 (0x01D4 - 0x01C0)
class ACoverGroup : public AInfo
{
public:
	TArray<struct FNavReference>                       CoverLinkRefs;                                            // 0x01C0(0x000C) (Edit, NeedCtorLink)
	float                                              AutoSelectRadius;                                         // 0x01CC(0x0004) (Edit)
	float                                              AutoSelectHeight;                                         // 0x01D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroup");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	bool Contains(class ACoverLink* Link);
	void ToggleGroup();
	void DisableGroup();
	void EnableGroup();
};


// Class Engine.ForcedReachSpec
// 0x0000 (0x0098 - 0x0098)
class UForcedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForcedReachSpec");
		return ptr;
	}

};


// Class Engine.CoverSlipReachSpec
// 0x0001 (0x0099 - 0x0098)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0098(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverSlipReachSpec");
		return ptr;
	}

};


// Class Engine.CrowdReplicationActor
// 0x000C (0x01CC - 0x01C0)
class ACrowdReplicationActor : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                                  // 0x01C0(0x0004) (Net)
	unsigned long                                      bSpawningActive : 1;                                      // 0x01C4(0x0004) (Net)
	int                                                DestroyAllCount;                                          // 0x01C8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdReplicationActor");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.CullDistanceVolume
// 0x0010 (0x020C - 0x01FC)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x01FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bEnabled : 1;                                             // 0x0208(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}

};


// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0054 - 0x003C)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                                // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FPresetGeneratedPoint>               Points;                                                   // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}

};


// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CustomPropertyItemHandler");
		return ptr;
	}

};


// Class Engine.CylinderComponent
// 0x0010 (0x01CC - 0x01BC)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                          // 0x01BC(0x0004) (Edit, Const, ExportObject)
	float                                              CollisionRadius;                                          // 0x01C0(0x0004) (Edit, Const, ExportObject)
	struct FColor                                      CylinderColor;                                            // 0x01C4(0x0004) (Edit, Const)
	unsigned long                                      bDrawBoundingBox : 1;                                     // 0x01C8(0x0004) (Const)
	unsigned long                                      bDrawNonColliding : 1;                                    // 0x01C8(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CylinderComponent");
		return ptr;
	}


	void SetCylinderSize(float NewRadius, float NewHeight);
};


// Class Engine.DamageType
// 0x0050 (0x008C - 0x003C)
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                              // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     FemaleSuicide;                                            // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MaleSuicide;                                              // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bArmorStops : 1;                                          // 0x0060(0x0004) (Edit)
	unsigned long                                      bAlwaysGibs : 1;                                          // 0x0060(0x0004) (Edit)
	unsigned long                                      bNeverGibs : 1;                                           // 0x0060(0x0004) (Edit)
	unsigned long                                      bLocationalHit : 1;                                       // 0x0060(0x0004) (Edit)
	unsigned long                                      bCausesBlood : 1;                                         // 0x0060(0x0004) (Edit)
	unsigned long                                      bCausesBloodSplatterDecals : 1;                           // 0x0060(0x0004) (Edit)
	unsigned long                                      bKUseOwnDeathVel : 1;                                     // 0x0060(0x0004) (Edit)
	unsigned long                                      bCausedByWorld : 1;                                       // 0x0060(0x0004)
	unsigned long                                      bExtraMomentumZ : 1;                                      // 0x0060(0x0004)
	unsigned long                                      bCausesFracture : 1;                                      // 0x0060(0x0004) (Edit)
	unsigned long                                      bIgnoreDriverDamageMult : 1;                              // 0x0060(0x0004)
	unsigned long                                      bDontHurtInstigator : 1;                                  // 0x0060(0x0004)
	unsigned long                                      bKRadialImpulse : 1;                                      // 0x0060(0x0004) (Edit)
	unsigned long                                      bRadialDamageVelChange : 1;                               // 0x0060(0x0004) (Edit)
	float                                              GibModifier;                                              // 0x0064(0x0004) (Edit)
	float                                              KDamageImpulse;                                           // 0x0068(0x0004) (Edit)
	float                                              KDeathVel;                                                // 0x006C(0x0004) (Edit)
	float                                              KDeathUpKick;                                             // 0x0070(0x0004) (Edit)
	float                                              KImpulseRadius;                                           // 0x0074(0x0004) (Edit)
	float                                              RadialDamageImpulse;                                      // 0x0078(0x0004) (Edit)
	float                                              VehicleDamageScaling;                                     // 0x007C(0x0004)
	float                                              VehicleMomentumScaling;                                   // 0x0080(0x0004)
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                        // 0x0084(0x0004)
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                         // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}


	float STATIC_VehicleDamageScalingFor(class AVehicle* V);
	struct FString STATIC_SuicideMessage(class APlayerReplicationInfo* Victim);
	struct FString STATIC_DeathMessage(class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim);
};


// Class Engine.DebugManager
// 0x0008 (0x0044 - 0x003C)
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                          // 0x003C(0x0004)
	unsigned long                                      bNoDecalCulling : 1;                                      // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugManager");
		return ptr;
	}

};


// Class Engine.PhysicsVolume
// 0x003C (0x0238 - 0x01FC)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                             // 0x01FC(0x000C) (Edit)
	unsigned long                                      bVelocityAffectsWalking : 1;                              // 0x0208(0x0004) (Edit)
	unsigned long                                      bPainCausing : 1;                                         // 0x0208(0x0004) (Edit)
	unsigned long                                      BACKUP_bPainCausing : 1;                                  // 0x0208(0x0004)
	unsigned long                                      bDestructive : 1;                                         // 0x0208(0x0004) (Edit)
	unsigned long                                      bNoInventory : 1;                                         // 0x0208(0x0004) (Edit)
	unsigned long                                      bMoveProjectiles : 1;                                     // 0x0208(0x0004) (Edit)
	unsigned long                                      bBounceVelocity : 1;                                      // 0x0208(0x0004) (Edit)
	unsigned long                                      bNeutralZone : 1;                                         // 0x0208(0x0004) (Edit)
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                            // 0x0208(0x0004) (Edit)
	unsigned long                                      bPhysicsOnContact : 1;                                    // 0x0208(0x0004) (Edit)
	unsigned long                                      bWaterVolume : 1;                                         // 0x0208(0x0004)
	float                                              GroundFriction;                                           // 0x020C(0x0004) (Edit)
	float                                              TerminalVelocity;                                         // 0x0210(0x0004) (Edit)
	float                                              DamagePerSec;                                             // 0x0214(0x0004) (Edit)
	class UClass*                                      DamageType;                                               // 0x0218(0x0004) (Edit)
	int                                                Priority;                                                 // 0x021C(0x0004) (Edit)
	float                                              FluidFriction;                                            // 0x0220(0x0004) (Edit)
	float                                              RigidBodyDamping;                                         // 0x0224(0x0004) (Edit)
	float                                              MaxDampingForce;                                          // 0x0228(0x0004) (Edit)
	class AInfo*                                       PainTimer;                                                // 0x022C(0x0004)
	class AController*                                 DamageInstigator;                                         // 0x0230(0x0004)
	class APhysicsVolume*                              NextPhysicsVolume;                                        // 0x0234(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}


	void OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action);
	void NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC);
	void ModifyPlayer(class APawn* PlayerPawn);
	void CausePainTo(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void TimerPop(class AVolumeTimer* T);
	void OnToggle(class USeqAct_Toggle* inAction);
	void PawnLeavingVolume(class APawn* Other);
	void PawnEnteredVolume(class APawn* Other);
	void ActorLeavingVolume(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
	void PhysicsChangedFor(class AActor* Other);
	void Reset();
	void PostBeginPlay();
	float GetGravityZ();
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0238 - 0x0238)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}


	void Destroyed();
};


// Class Engine.LevelBase
// 0x0054 (0x0090 - 0x003C)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x54];                                      // 0x003C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBase");
		return ptr;
	}

};


// Class Engine.PendingLevel
// 0x0030 (0x00C0 - 0x0090)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingLevel");
		return ptr;
	}

};


// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		return ptr;
	}

};


// Class Engine.DemoRecConnection
// 0x0000 (0x4FA8 - 0x4FA8)
class UDemoRecConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecConnection");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0120 (0x0160 - 0x0040)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x0040(0x0024) MISSED OFFSET
	float                                              ConnectionTimeout;                                        // 0x0064(0x0004) (Config)
	float                                              InitialConnectTimeout;                                    // 0x0068(0x0004) (Config)
	float                                              KeepAliveTime;                                            // 0x006C(0x0004) (Config)
	float                                              RelevantTimeout;                                          // 0x0070(0x0004) (Config)
	float                                              SpawnPrioritySeconds;                                     // 0x0074(0x0004) (Config)
	float                                              ServerTravelPause;                                        // 0x0078(0x0004) (Config)
	int                                                MaxClientRate;                                            // 0x007C(0x0004) (Config)
	int                                                MaxInternetClientRate;                                    // 0x0080(0x0004) (Config)
	int                                                NetServerMaxTickRate;                                     // 0x0084(0x0004) (Config)
	unsigned long                                      bClampListenServerTickRate : 1;                           // 0x0088(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0088(0x0001)
	unsigned long                                      AllowDownloads : 1;                                       // 0x008C(0x0004) (Config)
	unsigned char                                      UnknownData02[0x14];                                      // 0x0090(0x0014) MISSED OFFSET
	int                                                MaxDownloadSize;                                          // 0x00A4(0x0004) (Config)
	TArray<struct FString>                             DownloadManagers;                                         // 0x00A8(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData03[0x88];                                      // 0x00B4(0x0088) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x013C(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0148(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.DemoRecDriver
// 0x00A0 (0x0200 - 0x0160)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0160(0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                                       // 0x0188(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData01[0x6C];                                      // 0x0194(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecDriver");
		return ptr;
	}

};


// Class Engine.Light
// 0x0014 (0x01D4 - 0x01C0)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	struct FColor                                      BakerColor;                                               // 0x01C4(0x0004) (Edit)
	float                                              BakerBrightness;                                          // 0x01C8(0x0004) (Edit)
	unsigned long                                      bUseBakerColorAndBrightness : 1;                          // 0x01CC(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x01CC(0x0004) (Net)
	float                                              SampleFactor;                                             // 0x01D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.DirectionalLight
// 0x0000 (0x01D4 - 0x01D4)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}

};


// Class Engine.DirectionalLightComponent
// 0x0010 (0x0194 - 0x0184)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              SoftShadowAngle;                                          // 0x0184(0x0004) (Edit)
	int                                                Photons;                                                  // 0x0188(0x0004) (Edit)
	float                                              PhotonIntensity;                                          // 0x018C(0x0004) (Edit)
	float                                              TraceDistance;                                            // 0x0190(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}

};


// Class Engine.DirectionalLightToggleable
// 0x0000 (0x01D4 - 0x01D4)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightToggleable");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0004 (0x0054 - 0x0050)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x006D - 0x0054)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0054(0x0008) (Edit)
	float                                              MinInput;                                                 // 0x005C(0x0004) (Edit)
	float                                              MaxInput;                                                 // 0x0060(0x0004) (Edit)
	float                                              MinOutput;                                                // 0x0064(0x0004) (Edit)
	float                                              MaxOutput;                                                // 0x0068(0x0004) (Edit)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x006C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0058 - 0x0050)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0050(0x0004) (Edit)
	float                                              Max;                                                      // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0011 (0x0061 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0050(0x000C) (Edit)
	unsigned long                                      bLockAxes : 1;                                            // 0x005C(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0060(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0065 - 0x0050)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bLockAxes : 1;                                            // 0x0060(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0064(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x003E (0x009F - 0x0061)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FName                                       ParameterName;                                            // 0x0064(0x0008) (Edit)
	struct FVector                                     MinInput;                                                 // 0x006C(0x000C) (Edit)
	struct FVector                                     MaxInput;                                                 // 0x0078(0x000C) (Edit)
	struct FVector                                     MinOutput;                                                // 0x0084(0x000C) (Edit)
	struct FVector                                     MaxOutput;                                                // 0x0090(0x000C) (Edit)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x009C(0x0001) (Edit, ExportObject, Component)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0020 (0x0070 - 0x0050)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0050(0x000C) (Edit)
	struct FVector                                     Min;                                                      // 0x005C(0x000C) (Edit)
	unsigned long                                      bLockAxes : 1;                                            // 0x0068(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0068(0x0004) (Edit)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x006C(0x0001) (Edit)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x006D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0069 - 0x0050)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bLockAxes1 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bLockAxes2 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0060(0x0004) (Edit)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0064(0x0001) (Edit)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0066(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}

};


// Class Engine.DOFEffect
// 0x003F (0x00A0 - 0x0061)
class UDOFEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              FalloffExponent;                                          // 0x0064(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x0068(0x0004) (Edit)
	float                                              MaxNearBlurAmount;                                        // 0x006C(0x0004) (Edit)
	float                                              MaxFarBlurAmount;                                         // 0x0070(0x0004) (Edit)
	struct FColor                                      ModulateBlurColor;                                        // 0x0074(0x0004) (Edit)
	unsigned long                                      bAutofocus : 1;                                           // 0x0078(0x0004) (Edit)
	float                                              AutofocusSpeedUp;                                         // 0x007C(0x0004) (Edit)
	float                                              AutofocusSpeedDown;                                       // 0x0080(0x0004) (Edit)
	float                                              AutofocusMaxDistance;                                     // 0x0084(0x0004) (Edit)
	TEnumAsByte<EFocusType>                            FocusType;                                                // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              FocusInnerRadius;                                         // 0x008C(0x0004) (Edit)
	float                                              FocusDistance;                                            // 0x0090(0x0004) (Edit)
	struct FVector                                     FocusPosition;                                            // 0x0094(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFEffect");
		return ptr;
	}

};


// Class Engine.DOFAndBloomEffect
// 0x0004 (0x00A4 - 0x00A0)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                               // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFAndBloomEffect");
		return ptr;
	}

};


// Class Engine.DoorMarker
// 0x0010 (0x0324 - 0x0314)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                                   // 0x0314(0x0004) (Edit)
	TEnumAsByte<EDoorType>                             DoorType;                                                 // 0x0318(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0319(0x0003) MISSED OFFSET
	class AActor*                                      DoorTrigger;                                              // 0x031C(0x0004) (Edit)
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                           // 0x0320(0x0004) (Edit)
	unsigned long                                      bInitiallyClosed : 1;                                     // 0x0320(0x0004) (Edit)
	unsigned long                                      bBlockedWhenClosed : 1;                                   // 0x0320(0x0004) (Edit)
	unsigned long                                      bDoorOpen : 1;                                            // 0x0320(0x0004)
	unsigned long                                      bTempDisabledCollision : 1;                               // 0x0320(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DoorMarker");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	bool ProceedWithMove(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void MoverClosed();
	void MoverOpened();
	void PostBeginPlay();
};


// Class Engine.DrawBoxComponent
// 0x0018 (0x01D4 - 0x01BC)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                                 // 0x01BC(0x0004) (Edit)
	class UMaterial*                                   BoxMaterial;                                              // 0x01C0(0x0004) (Edit)
	struct FVector                                     BoxExtent;                                                // 0x01C4(0x000C) (Edit)
	unsigned long                                      bDrawWireBox : 1;                                         // 0x01D0(0x0004) (Edit)
	unsigned long                                      bDrawLitBox : 1;                                          // 0x01D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawBoxComponent");
		return ptr;
	}

};


// Class Engine.DrawCapsuleComponent
// 0x0014 (0x01D0 - 0x01BC)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                             // 0x01BC(0x0004) (Edit)
	class UMaterial*                                   CapsuleMaterial;                                          // 0x01C0(0x0004) (Edit)
	float                                              CapsuleHeight;                                            // 0x01C4(0x0004) (Edit)
	float                                              CapsuleRadius;                                            // 0x01C8(0x0004) (Edit)
	unsigned long                                      bDrawWireCapsule : 1;                                     // 0x01CC(0x0004) (Edit)
	unsigned long                                      bDrawLitCapsule : 1;                                      // 0x01CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCapsuleComponent");
		return ptr;
	}

};


// Class Engine.DrawConeComponent
// 0x0010 (0x01CC - 0x01BC)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                                // 0x01BC(0x0004) (Edit)
	float                                              ConeRadius;                                               // 0x01C0(0x0004) (Edit)
	float                                              ConeAngle;                                                // 0x01C4(0x0004) (Edit)
	int                                                ConeSides;                                                // 0x01C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawConeComponent");
		return ptr;
	}

};


// Class Engine.DrawCylinderComponent
// 0x0020 (0x01DC - 0x01BC)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                            // 0x01BC(0x0004) (Edit)
	class UMaterial*                                   CylinderMaterial;                                         // 0x01C0(0x0004) (Edit)
	float                                              CylinderRadius;                                           // 0x01C4(0x0004) (Edit)
	float                                              CylinderTopRadius;                                        // 0x01C8(0x0004) (Edit)
	float                                              CylinderHeight;                                           // 0x01CC(0x0004) (Edit)
	float                                              CylinderHeightOffset;                                     // 0x01D0(0x0004) (Edit)
	int                                                CylinderSides;                                            // 0x01D4(0x0004) (Edit)
	unsigned long                                      bDrawWireCylinder : 1;                                    // 0x01D8(0x0004) (Edit)
	unsigned long                                      bDrawLitCylinder : 1;                                     // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCylinderComponent");
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0018 (0x01D4 - 0x01BC)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                             // 0x01BC(0x0004) (Edit)
	float                                              FrustumAngle;                                             // 0x01C0(0x0004) (Edit)
	float                                              FrustumAspectRatio;                                       // 0x01C4(0x0004) (Edit)
	float                                              FrustumStartDist;                                         // 0x01C8(0x0004) (Edit)
	float                                              FrustumEndDist;                                           // 0x01CC(0x0004) (Edit)
	class UTexture*                                    Texture;                                                  // 0x01D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}

};


// Class Engine.DrawLightConeComponent
// 0x0000 (0x01CC - 0x01CC)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightConeComponent");
		return ptr;
	}

};


// Class Engine.DrawSphereComponent
// 0x0014 (0x01D0 - 0x01BC)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                              // 0x01BC(0x0004) (Edit)
	class UMaterial*                                   SphereMaterial;                                           // 0x01C0(0x0004) (Edit)
	float                                              SphereRadius;                                             // 0x01C4(0x0004) (Edit)
	int                                                SphereSides;                                              // 0x01C8(0x0004) (Edit)
	unsigned long                                      bDrawWireSphere : 1;                                      // 0x01CC(0x0004) (Edit)
	unsigned long                                      bDrawLitSphere : 1;                                       // 0x01CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}

};


// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x01D0 - 0x01D0)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightRadiusComponent");
		return ptr;
	}

};


// Class Engine.DrawQuadComponent
// 0x000C (0x01C8 - 0x01BC)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                                  // 0x01BC(0x0004) (Edit)
	float                                              Width;                                                    // 0x01C0(0x0004) (Edit)
	float                                              Height;                                                   // 0x01C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawQuadComponent");
		return ptr;
	}

};


// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x01D0 - 0x01D0)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSoundRadiusComponent");
		return ptr;
	}

};


// Class Engine.DroppedPickup
// 0x0010 (0x01D0 - 0x01C0)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x01C0(0x0004)
	class UClass*                                      InventoryClass;                                           // 0x01C4(0x0004) (Net)
	class ANavigationPoint*                            PickupCache;                                              // 0x01C8(0x0004)
	unsigned long                                      bFadeOut : 1;                                             // 0x01CC(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DroppedPickup");
		return ptr;
	}


	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	float DetourWeight(class APawn* Other, float PathWeight);
	void EncroachedBy(class AActor* Other);
	void SetPickupParticles(class UParticleSystemComponent* PickupParticles);
	void SetPickupMesh(class UPrimitiveComponent* PickupMesh);
	void Reset();
	void ReplicatedEvent(const struct FName& VarName);
	void Destroyed();
	void RemoveFromNavigation();
	void AddToNavigation();
};


// Class Engine.DynamicAnchor
// 0x0004 (0x0318 - 0x0314)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                              // 0x0314(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicAnchor");
		return ptr;
	}

};


// Class Engine.DynamicBlockingVolume
// 0x0000 (0x0200 - 0x0200)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicBlockingVolume");
		return ptr;
	}

};


// Class Engine.DynamicCameraActor
// 0x0000 (0x0490 - 0x0490)
class ADynamicCameraActor : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicCameraActor");
		return ptr;
	}

};


// Class Engine.LightEnvironmentComponent
// 0x000B (0x0060 - 0x0055)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	float                                              LastRenderTime;                                           // 0x005C(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightEnvironmentComponent");
		return ptr;
	}


	void SetEnabled(bool bNewEnabled);
};


// Class Engine.DynamicLightEnvironmentComponent
// 0x0060 (0x00C0 - 0x0060)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                                    // 0x0060(0x0004) (Const, Native, Transient)
	float                                              InvisibleUpdateTime;                                      // 0x0064(0x0004) (Edit)
	float                                              MinTimeBetweenFullUpdates;                                // 0x0068(0x0004) (Edit)
	int                                                NumVolumeVisibilitySamples;                               // 0x006C(0x0004) (Edit)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x0070(0x0010) (Edit)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x0080(0x000C) (Edit)
	struct FLinearColor                                AmbientGlow;                                              // 0x008C(0x0010) (Edit)
	float                                              LightDesaturation;                                        // 0x009C(0x0004) (Edit)
	float                                              LightDistance;                                            // 0x00A0(0x0004) (Edit)
	float                                              ShadowDistance;                                           // 0x00A4(0x0004) (Edit)
	unsigned long                                      bCastShadows : 1;                                         // 0x00A8(0x0004) (Edit)
	unsigned long                                      bDynamic : 1;                                             // 0x00A8(0x0004) (Edit)
	unsigned long                                      bSynthesizePointLight : 1;                                // 0x00A8(0x0004) (Edit)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x00A8(0x0004) (Edit)
	float                                              ModShadowFadeoutTime;                                     // 0x00AC(0x0004) (Edit)
	float                                              ModShadowFadeoutExponent;                                 // 0x00B0(0x0004) (Edit)
	TEnumAsByte<EShadowFilterQuality>                  ShadowFilterQuality;                                      // 0x00B4(0x0001) (Edit)
	TEnumAsByte<ELightShadowMode>                      LightShadowMode;                                          // 0x00B5(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00B6(0x0002) MISSED OFFSET
	float                                              BouncedLightingIntensity;                                 // 0x00B8(0x0004) (Edit)
	float                                              BouncedLightingDesaturation;                              // 0x00BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicLightEnvironmentComponent");
		return ptr;
	}

};


// Class Engine.DynamicSMActor
// 0x0038 (0x01F8 - 0x01C0)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01C4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UStaticMesh*                                 ReplicatedMesh;                                           // 0x01C8(0x0004) (Net)
	class UMaterialInterface*                          ReplicatedMaterial;                                       // 0x01CC(0x0004) (Net)
	struct FVector                                     ReplicatedMeshTranslation;                                // 0x01D0(0x000C) (Net)
	struct FRotator                                    ReplicatedMeshRotation;                                   // 0x01DC(0x000C) (Net)
	struct FVector                                     ReplicatedMeshScale3D;                                    // 0x01E8(0x000C) (Net)
	unsigned long                                      bPawnCanBaseOn : 1;                                       // 0x01F4(0x0004) (Edit)
	unsigned long                                      bSafeBaseIfAsleep : 1;                                    // 0x01F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor");
		return ptr;
	}


	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	bool CanBasePawn(class APawn* P);
	void SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnSetStaticMesh(class USeqAct_SetStaticMesh* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.EdCoordSystem
// 0x0050 (0x008C - 0x003C)
class UEdCoordSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                                        // 0x0040(0x0040) (Edit)
	struct FString                                     Desc;                                                     // 0x0080(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdCoordSystem");
		return ptr;
	}

};


// Class Engine.EmitterPool
// 0x0058 (0x0218 - 0x01C0)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                              // 0x01C0(0x0004) (ExportObject, Component, EditInline)
	TArray<class UParticleSystemComponent*>            PoolComponents;                                           // 0x01C4(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UParticleSystemComponent*>            ActiveComponents;                                         // 0x01D0(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxActiveEffects;                                         // 0x01DC(0x0004) (Config)
	unsigned long                                      bLogPoolOverflow : 1;                                     // 0x01E0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLogPoolOverflowList : 1;                                 // 0x01E0(0x0004) (Config, GlobalConfig)
	TArray<struct FEmitterBaseInfo>                    RelativePSCs;                                             // 0x01E4(0x000C) (Component, NeedCtorLink)
	float                                              SMC_MIC_ReductionTime;                                    // 0x01F0(0x0004)
	float                                              SMC_MIC_CurrentReductionTime;                             // 0x01F4(0x0004) (Transient)
	int                                                IdealStaticMeshComponents;                                // 0x01F8(0x0004)
	int                                                IdealMaterialInstanceConstants;                           // 0x01FC(0x0004)
	TArray<class UStaticMeshComponent*>                FreeSMComponents;                                         // 0x0200(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UMaterialInstanceConstant*>           FreeMatInstConsts;                                        // 0x020C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterPool");
		return ptr;
	}


	class UParticleSystemComponent* SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate);
	void ResetPool();
	class UParticleSystemComponent* SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor);
	class UParticleSystemComponent* GetPooledComponent(class UParticleSystem* EmitterTemplate);
	class UMaterialInstanceConstant* GetFreeMatInstConsts(bool bCreateNewObject);
	void FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC);
	class UStaticMeshComponent* GetFreeStaticMeshComponent(bool bCreateNewObject);
	void FreeStaticMeshComponents(class UParticleSystemComponent* PSC);
	void ReturnToPool(class UParticleSystemComponent* PSC);
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class Engine.FaceFXAnimSet
// 0x0030 (0x006C - 0x003C)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                                       // 0x003C(0x0004) (Edit, Const)
	struct FPointer                                    InternalFaceFXAnimSet;                                    // 0x0040(0x0004) (Const, Native)
	TArray<unsigned char>                              RawFaceFXAnimSetBytes;                                    // 0x0044(0x000C) (Const, Native)
	TArray<unsigned char>                              RawFaceFXMiniSessionBytes;                                // 0x0050(0x000C) (Const, Native)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x005C(0x000C) (NeedCtorLink)
	int                                                NumLoadErrors;                                            // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAnimSet");
		return ptr;
	}

};


// Class Engine.FaceFXAsset
// 0x0048 (0x0084 - 0x003C)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (Const)
	struct FPointer                                    FaceFXActor;                                              // 0x0040(0x0004) (Const, Native)
	TArray<unsigned char>                              RawFaceFXActorBytes;                                      // 0x0044(0x000C) (Const, Native)
	TArray<unsigned char>                              RawFaceFXSessionBytes;                                    // 0x0050(0x000C) (Const, Native)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x005C(0x000C) (Edit, NeedCtorLink)
	TArray<class UFaceFXAnimSet*>                      MountedFaceFXAnimSets;                                    // 0x0068(0x000C) (Transient, NeedCtorLink)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x0074(0x000C) (NeedCtorLink)
	int                                                NumLoadErrors;                                            // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAsset");
		return ptr;
	}


	void UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
	void MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
};


// Class Engine.FileChannel
// 0x0210 (0x0278 - 0x0068)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x210];                                     // 0x0068(0x0210) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileChannel");
		return ptr;
	}

};


// Class Engine.FileWriter
// 0x0011 (0x01D1 - 0x01C0)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                               // 0x01C0(0x0004) (Const, Native)
	struct FString                                     Filename;                                                 // 0x01C4(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EFWFileType>                           FileType;                                                 // 0x01D0(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileWriter");
		return ptr;
	}


	void Destroyed();
	void Logf(const struct FString& logString);
	void CloseFile();
	bool OpenFile(const struct FString& InFilename, TEnumAsByte<EFWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp);
};


// Class Engine.FileLog
// 0x0000 (0x01D1 - 0x01D1)
class AFileLog : public AFileWriter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileLog");
		return ptr;
	}


	void CloseLog();
	void OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique);
};


// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x0098 - 0x0098)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FloorToCeilingReachSpec");
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x008C (0x00C8 - 0x003C)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x003C(0x008C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}

};


// Class Engine.Font
// 0x0114 (0x0150 - 0x003C)
class UFont : public UObject
{
public:
	TArray<struct FFontCharacter>                      Characters;                                               // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0054(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                               // 0x0090(0x0004)
	int                                                Kerning;                                                  // 0x0094(0x0004) (Edit)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0098(0x008C) (Edit, NeedCtorLink)
	int                                                NumCharacters;                                            // 0x0124(0x0004) (Transient)
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x000C) (Transient, NeedCtorLink)
	TArray<struct FFontKerningPair>                    KerningPairs;                                             // 0x0134(0x000C) (Native)
	TArray<int>                                        KerningPairPageStarts;                                    // 0x0140(0x000C) (Native)
	unsigned long                                      bHasKerningPairs : 1;                                     // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}


	float GetMaxCharHeight();
	float GetAuthoredViewportHeight(float ViewportHeight);
	float GetScalingFactor(float HeightTest);
	int GetResolutionPageIndex(float HeightTest);
};


// Class Engine.ForceFeedbackManager
// 0x0014 (0x0050 - 0x003C)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bIsPaused : 1;                                            // 0x003C(0x0004)
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x0040(0x0004)
	int                                                CurrentSample;                                            // 0x0044(0x0004)
	float                                              ElapsedTime;                                              // 0x0048(0x0004)
	float                                              ScaleAllWaveformsBy;                                      // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackManager");
		return ptr;
	}


	void PauseWaveform(bool bPause);
	void StopForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform);
	void PlayForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform);
};


// Class Engine.ForceFeedbackWaveform
// 0x0010 (0x004C - 0x003C)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                           // 0x003C(0x0004) (Edit)
	TArray<struct FWaveformSample>                     Samples;                                                  // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackWaveform");
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x00BC (0x00F8 - 0x003C)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x003C(0x000C) MISSED OFFSET
	TArray<struct FStaticMeshLODInfo>                  LODInfo;                                                  // 0x0048(0x000C) (Edit, EditFixedSize, Native)
	float                                              LODDistanceRatio;                                         // 0x0054(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0058(0x0014) MISSED OFFSET
	int                                                LightMapResolution;                                       // 0x006C(0x0004) (Edit)
	int                                                LightMapCoordinateIndex;                                  // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0074(0x0018) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                                // 0x008C(0x0004) (Edit, EditInline)
	unsigned char                                      UnknownData03[0x34];                                      // 0x0090(0x0034) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                               // 0x00C4(0x0004) (Edit)
	unsigned long                                      UnknownData04 : 31;                                       // 0x00C4(0x0001)
	unsigned long                                      UseSimpleBoxCollision : 1;                                // 0x00C8(0x0004) (Edit)
	unsigned long                                      UnknownData05 : 31;                                       // 0x00C8(0x0001)
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                          // 0x00CC(0x0004) (Edit)
	unsigned long                                      UnknownData06 : 31;                                       // 0x00CC(0x0001)
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                        // 0x00D0(0x0004) (Edit)
	unsigned long                                      UnknownData07 : 31;                                       // 0x00D0(0x0001)
	unsigned long                                      UseFullPrecisionUVs : 1;                                  // 0x00D4(0x0004) (Edit)
	unsigned long                                      UnknownData08 : 31;                                       // 0x00D4(0x0001)
	unsigned long                                      bNeedsCPUAccess : 1;                                      // 0x00D8(0x0004) (Edit, EditConst)
	unsigned long                                      UnknownData09 : 31;                                       // 0x00D8(0x0001)
	unsigned long                                      bDeferredProcessing : 1;                                  // 0x00DC(0x0004) (Edit)
	unsigned char                                      UnknownData10[0x18];                                      // 0x00E0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}

};


// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Surface");
		return ptr;
	}


	float GetSurfaceHeight();
	float GetSurfaceWidth();
};


// Class Engine.MaterialInterface
// 0x0020 (0x005C - 0x003C)
class UMaterialInterface : public USurface
{
public:
	struct FColor                                      BakerColor;                                               // 0x003C(0x0004) (Edit)
	float                                              BakerBleedBounceAmount;                                   // 0x0040(0x0004) (Edit)
	float                                              BakerBleedEmissiveAmount;                                 // 0x0044(0x0004) (Edit)
	float                                              BakerAlpha;                                               // 0x0048(0x0004) (Edit)
	class UTexture*                                    BakerAlphaTexture;                                        // 0x004C(0x0004) (Edit)
	struct FString                                     PreviewMesh;                                              // 0x0050(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}


	bool GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue);
	bool GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue);
	bool GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue);
	bool GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue);
	bool GetScalarParameterValue(const struct FName& ParameterName, float* OutValue);
	bool GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage);
	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetMaterial();
};


// Class Engine.RB_BodySetup
// 0x004C (0x00C8 - 0x007C)
class URB_BodySetup : public UKMeshProps
{
public:
	TEnumAsByte<ESleepFamily>                          SleepFamily;                                              // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0080(0x0008) (Edit, EditConst)
	unsigned long                                      bFixed : 1;                                               // 0x0088(0x0004) (Edit)
	unsigned long                                      bNoCollision : 1;                                         // 0x0088(0x0004) (Edit)
	unsigned long                                      bBlockZeroExtent : 1;                                     // 0x0088(0x0004) (Edit)
	unsigned long                                      bBlockNonZeroExtent : 1;                                  // 0x0088(0x0004) (Edit)
	unsigned long                                      bEnableContinuousCollisionDetection : 1;                  // 0x0088(0x0004) (Edit)
	unsigned long                                      bAlwaysFullAnimWeight : 1;                                // 0x0088(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x008C(0x0004) (Edit)
	float                                              MassScale;                                                // 0x0090(0x0004) (Edit)
	TArray<struct FPointer>                            CollisionGeom;                                            // 0x0094(0x000C) (Const, Native)
	TArray<struct FVector>                             CollisionGeomScale3D;                                     // 0x00A0(0x000C) (Const, Native)
	TArray<struct FVector>                             PreCachedPhysScale;                                       // 0x00AC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FKCachedConvexData>                  PreCachedPhysData;                                        // 0x00B8(0x000C) (Const, Native)
	int                                                PreCachedPhysDataVersion;                                 // 0x00C4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodySetup");
		return ptr;
	}

};


// Class Engine.FracturedStaticMesh
// 0x006C (0x0164 - 0x00F8)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F8(0x0004) MISSED OFFSET
	class UStaticMesh*                                 SourceCoreMesh;                                           // 0x00FC(0x0004) (Edit, EditConst)
	float                                              CoreMeshScale;                                            // 0x0100(0x0004) (Edit, EditConst)
	unsigned char                                      UnknownData01[0x24];                                      // 0x0104(0x0024) MISSED OFFSET
	class UParticleSystem*                             FragmentDestroyEffect;                                    // 0x0128(0x0004) (Edit)
	float                                              FragmentDestroyEffectScale;                               // 0x012C(0x0004) (Edit)
	float                                              FragmentHealthScale;                                      // 0x0130(0x0004) (Edit)
	float                                              ChunkLinVel;                                              // 0x0134(0x0004) (Edit)
	float                                              ChunkAngVel;                                              // 0x0138(0x0004) (Edit)
	float                                              ChunkLinHorizontalScale;                                  // 0x013C(0x0004) (Edit)
	float                                              ExplosionVelScale;                                        // 0x0140(0x0004) (Edit)
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;                      // 0x0144(0x0004) (Edit)
	unsigned long                                      UnknownData02 : 31;                                       // 0x0144(0x0001)
	unsigned long                                      bFixIsolatedChunks : 1;                                   // 0x0148(0x0004) (Edit)
	float                                              MinConnectionSupportArea;                                 // 0x014C(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x14];                                      // 0x0150(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x00A8 (0x00E4 - 0x003C)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x003C(0x0001) (Edit)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x003D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	float                                              UpdateTime_FPS;                                           // 0x0040(0x0004) (Edit)
	float                                              UpdateTime_Delta;                                         // 0x0044(0x0004)
	float                                              WarmupTime;                                               // 0x0048(0x0004) (Edit)
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x004C(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0058(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FRotator                                    ThumbnailAngle;                                           // 0x005C(0x000C)
	float                                              ThumbnailDistance;                                        // 0x0068(0x0004)
	float                                              ThumbnailWarmup;                                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bLit : 1;                                                 // 0x0070(0x0004)
	unsigned long                                      bRegenerateLODDuplicate : 1;                              // 0x0070(0x0004)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x0070(0x0004) (Edit)
	unsigned long                                      bShouldResetPeakCounts : 1;                               // 0x0070(0x0004)
	unsigned long                                      bHasPhysics : 1;                                          // 0x0070(0x0004) (Transient)
	unsigned long                                      bUseRealtimeThumbnail : 1;                                // 0x0070(0x0004) (Edit)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x0070(0x0004)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0074(0x0004) (ExportObject)
	float                                              LODDistanceCheckTime;                                     // 0x0078(0x0004) (Edit)
	TArray<float>                                      LODDistances;                                             // 0x007C(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	int                                                EditorLODSetting;                                         // 0x0088(0x0004)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x008C(0x001C) (Edit)
	float                                              SecondsBeforeInactive;                                    // 0x00A8(0x0004) (Edit)
	struct FString                                     FloorMesh;                                                // 0x00AC(0x000C) (NeedCtorLink)
	struct FVector                                     FloorPosition;                                            // 0x00B8(0x000C)
	struct FRotator                                    FloorRotation;                                            // 0x00C4(0x000C)
	float                                              FloorScale;                                               // 0x00D0(0x0004)
	struct FVector                                     FloorScale3D;                                             // 0x00D4(0x000C)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}


	bool SetLODDistance(int LODLevelIndex, float InDistance);
	void SetCurrentLODMethod(TEnumAsByte<EParticleSystemLODMethod> InMethod);
	float GetLODDistance(int LODLevelIndex);
	int GetLODLevelCount();
	TEnumAsByte<EParticleSystemLODMethod> GetCurrentLODMethod();
};


// Class Engine.GameInfo
// 0x017C (0x033C - 0x01C0)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      TdPaused : 1;                                             // 0x01C0(0x0004)
	unsigned long                                      bEnableLOI : 1;                                           // 0x01C0(0x0004) (Const)
	unsigned long                                      bRestartLevel : 1;                                        // 0x01C0(0x0004)
	unsigned long                                      bPauseable : 1;                                           // 0x01C0(0x0004)
	unsigned long                                      bTeamGame : 1;                                            // 0x01C0(0x0004)
	unsigned long                                      bGameEnded : 1;                                           // 0x01C0(0x0004)
	unsigned long                                      bOverTime : 1;                                            // 0x01C0(0x0004)
	unsigned long                                      bDelayedStart : 1;                                        // 0x01C0(0x0004)
	unsigned long                                      bWaitingToStartMatch : 1;                                 // 0x01C0(0x0004)
	unsigned long                                      bChangeLevels : 1;                                        // 0x01C0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAlreadyChanged : 1;                                      // 0x01C0(0x0004)
	unsigned long                                      bLoggingGame : 1;                                         // 0x01C0(0x0004)
	unsigned long                                      bAdminCanPause : 1;                                       // 0x01C0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bGameRestarted : 1;                                       // 0x01C0(0x0004)
	unsigned long                                      bLevelChange : 1;                                         // 0x01C0(0x0004)
	unsigned long                                      bKickLiveIdlers : 1;                                      // 0x01C0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUsingArbitration : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                         // 0x01C0(0x0004)
	unsigned long                                      bNeedsEndGameHandshake : 1;                               // 0x01C0(0x0004)
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                          // 0x01C0(0x0004)
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                            // 0x01C0(0x0004)
	unsigned long                                      bFixedPlayerStart : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bAutomatedPerfTesting : 1;                                // 0x01C0(0x0004)
	unsigned long                                      bAutoContinueToNextRound : 1;                             // 0x01C0(0x0004)
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                        // 0x01C0(0x0004)
	unsigned long                                      bAutomatedTestingWithOpen : 1;                            // 0x01C0(0x0004)
	unsigned long                                      bDoingAFlyThrough : 1;                                    // 0x01C0(0x0004)
	unsigned long                                      bCheckingForFragmentation : 1;                            // 0x01C0(0x0004)
	unsigned long                                      bCheckingForMemLeaks : 1;                                 // 0x01C0(0x0004)
	unsigned long                                      bDoingMemStartupStats : 1;                                // 0x01C0(0x0004)
	unsigned long                                      bDoFearCostFallOff : 1;                                   // 0x01C0(0x0004)
	unsigned long                                      bUseSeamlessTravel : 1;                                   // 0x01C0(0x0004)
	unsigned long                                      bHasNetworkError : 1;                                     // 0x01C4(0x0004)
	unsigned long                                      bRequiresPushToTalk : 1;                                  // 0x01C4(0x0004) (Const)
	float                                              SavedGameSpeed;                                           // 0x01C8(0x0004)
	float                                              PauseGameSpeed;                                           // 0x01CC(0x0004) (Const)
	int                                                AutomatedPerfRemainingTime;                               // 0x01D0(0x0004)
	int                                                AutomatedTestingMapIndex;                                 // 0x01D4(0x0004)
	TArray<struct FString>                             AutomatedMapTestingList;                                  // 0x01D8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                NumAutomatedMapTestingCycles;                             // 0x01E4(0x0004) (Config, GlobalConfig)
	int                                                NumberOfMatchesPlayed;                                    // 0x01E8(0x0004)
	int                                                NumMapListCyclesDone;                                     // 0x01EC(0x0004)
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;             // 0x01F0(0x000C) (NeedCtorLink)
	struct FString                                     AutomatedMapTestingTransitionMap;                         // 0x01FC(0x000C) (NeedCtorLink)
	struct FString                                     BugLocString;                                             // 0x0208(0x000C) (NeedCtorLink)
	struct FString                                     BugRotString;                                             // 0x0214(0x000C) (NeedCtorLink)
	TArray<class APlayerController*>                   PendingArbitrationPCs;                                    // 0x0220(0x000C) (NeedCtorLink)
	TArray<class APlayerController*>                   ArbitrationPCs;                                           // 0x022C(0x000C) (NeedCtorLink)
	float                                              ArbitrationHandshakeTimeout;                              // 0x0238(0x0004) (Config, GlobalConfig)
	float                                              GameDifficulty;                                           // 0x023C(0x0004) (Config, GlobalConfig)
	int                                                GoreLevel;                                                // 0x0240(0x0004) (Config, GlobalConfig)
	float                                              GameSpeed;                                                // 0x0244(0x0004)
	class UClass*                                      DefaultPawnClass;                                         // 0x0248(0x0004)
	class UClass*                                      ScoreBoardType;                                           // 0x024C(0x0004)
	class UClass*                                      HUDType;                                                  // 0x0250(0x0004)
	int                                                MaxSpectators;                                            // 0x0254(0x0004) (Config, GlobalConfig)
	int                                                MaxSpectatorsAllowed;                                     // 0x0258(0x0004)
	int                                                NumSpectators;                                            // 0x025C(0x0004)
	int                                                MaxPlayers;                                               // 0x0260(0x0004) (Config, GlobalConfig)
	int                                                MaxPlayersAllowed;                                        // 0x0264(0x0004)
	int                                                NumPlayers;                                               // 0x0268(0x0004)
	int                                                NumBots;                                                  // 0x026C(0x0004)
	int                                                NumTravellingPlayers;                                     // 0x0270(0x0004)
	int                                                CurrentID;                                                // 0x0274(0x0004)
	struct FString                                     DefaultPlayerName;                                        // 0x0278(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameName;                                                 // 0x0284(0x000C) (Const, Localized, NeedCtorLink)
	float                                              FearCostFallOff;                                          // 0x0290(0x0004)
	int                                                GoalScore;                                                // 0x0294(0x0004) (Config)
	int                                                MaxLives;                                                 // 0x0298(0x0004) (Config)
	int                                                TimeLimit;                                                // 0x029C(0x0004) (Config)
	class UClass*                                      DeathMessageClass;                                        // 0x02A0(0x0004)
	class UClass*                                      GameMessageClass;                                         // 0x02A4(0x0004)
	class AMutator*                                    BaseMutator;                                              // 0x02A8(0x0004)
	class UClass*                                      AccessControlClass;                                       // 0x02AC(0x0004)
	class AAccessControl*                              AccessControl;                                            // 0x02B0(0x0004)
	class AGameRules*                                  GameRulesModifiers;                                       // 0x02B4(0x0004)
	class UClass*                                      BroadcastHandlerClass;                                    // 0x02B8(0x0004)
	class ABroadcastHandler*                           BroadcastHandler;                                         // 0x02BC(0x0004)
	class UClass*                                      PlayerControllerClass;                                    // 0x02C0(0x0004)
	class UClass*                                      PlayerReplicationInfoClass;                               // 0x02C4(0x0004)
	struct FString                                     DialogueManagerClass;                                     // 0x02C8(0x000C) (NeedCtorLink)
	class ADialogueManager*                            DialogueManager;                                          // 0x02D4(0x0004)
	class UClass*                                      GameReplicationInfoClass;                                 // 0x02D8(0x0004) (Edit)
	class AGameReplicationInfo*                        GameReplicationInfo;                                      // 0x02DC(0x0004)
	float                                              MaxIdleTime;                                              // 0x02E0(0x0004) (Config, GlobalConfig)
	float                                              MaxTimeMargin;                                            // 0x02E4(0x0004) (Config, GlobalConfig)
	float                                              TimeMarginSlack;                                          // 0x02E8(0x0004) (Config, GlobalConfig)
	float                                              MinTimeMargin;                                            // 0x02EC(0x0004) (Config, GlobalConfig)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x02F0(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     Pausers;                                                  // 0x02FC(0x000C) (NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0308(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x030C(0x0008)
	class UOnlineGameSettings*                         GameSettings;                                             // 0x0314(0x0004)
	class UClass*                                      OnlineStatsWriteClass;                                    // 0x0318(0x0004)
	class ACoverReplicator*                            CoverReplicatorBase;                                      // 0x031C(0x0004)
	class UClass*                                      OnlineGameSettingsClass;                                  // 0x0320(0x0004) (Const)
	struct FString                                     ServerOptions;                                            // 0x0324(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x0330(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfo");
		return ptr;
	}


	bool STATIC_IsPhysXEnhanced();
	void SetPlayerStart(const struct FString& StartLocation);
	void IncrementNumberOfMatchesPlayed();
	void IncrementAutomatedTestingMapIndex();
	void CloseAutomatedMapTestTimer();
	void StartAutomatedMapTestTimer();
	void OnServerCreateComplete(bool bWasSuccessful);
	void RegisterServer();
	void OnLoginChange();
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void ClearAutoLoginDelegates();
	bool ProcessServerLogin();
	void MatineeCancelled();
	void RecalculateSkillRating();
	void UpdateGameplayMuteList(class APlayerController* PC);
	void NotifyArbitratedMatchEnd();
	void ServerWriteArbitrationEndGameData();
	void ProcessClientDataWriteCompletion(class APlayerController* PC);
	void ProcessEndGameHandshake();
	bool MatchIsInProgress();
	void ArbitrationRegistrationComplete(bool bWasSuccessful);
	void RegisterServerForArbitration();
	void StartArbitratedMatch();
	void StartArbitrationRegistration();
	void ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful);
	void UpdateGameSettingsCounts();
	void HandleSeamlessTravelPlayer(class AController** C);
	void UpdateGameSettings();
	void PostSeamlessTravel();
	void SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	bool FindInactivePRI(class APlayerController* PC);
	void AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC);
	void PostCommitMapChange();
	void PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName);
	bool AllowCheats(class APlayerController* P);
	bool STATIC_AllowMutator(const struct FString& MutatorClassName);
	bool STATIC_AllowReactionTime();
	bool PlayerCanRestart(class APlayerController* aPlayer);
	bool PlayerCanRestartGame(class APlayerController* aPlayer);
	void KillBots();
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	struct FString STATIC_ParseMessageString(class AController* Who, const struct FString& Message);
	void ModifyScoreKill(class AController* Killer, class AController* Other);
	void ScoreKill(class AController* Killer, class AController* Other);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int Score);
	void AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void EndLogging(const struct FString& Reason);
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void WriteOnlinePlayerScores();
	void WriteOnlineStats();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type);
	void Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type);
	void RestartGame();
	bool GetTravelType();
	struct FString GetNextAutomatedTestingMap();
	struct FString GetNextMap();
	void SendPlayer(class APlayerController* aPlayer, const struct FString& URL);
	unsigned char PickTeam(unsigned char Current, class AController* C);
	bool ChangeTeam(class AController* Other, int N, bool bNewTeam);
	void ChangeName(class AController* Other, const struct FString& S, bool bNameChange);
	void DiscardInventory(class APawn* Other, class AController* Killer);
	bool PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup);
	bool ShouldRespawn(class APickupFactory* Other);
	bool CheckRelevance(class AActor* Other);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	bool CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget);
	void KickBan(const struct FString& S);
	void Kick(const struct FString& S);
	struct FString STATIC_ParseKillMessage(const struct FString& KillerName, const struct FString& VictimName, const struct FString& DeathMessage);
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	bool PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void Mutate(const struct FString& MutateString, class APlayerController* Sender);
	void AddDefaultInventory(class APawn* P);
	void AcceptInventory(class APawn* PlayerPawn);
	void Logout(class AController* Exiting);
	void PreExit();
	void PostLogin(class APlayerController* NewPlayer);
	void ReplicateStreamingStatus(class APlayerController* PC);
	class UClass* GetDefaultPlayerClass(class AController* C);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void StartBots();
	void StartHumans();
	void OnStartOnlineGameComplete(bool bWasSuccessful);
	void StartOnlineGame();
	void StartMatch();
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, struct FString* ErrorMessage);
	bool AtCapacity(bool bSpectator);
	void PreLogin(const struct FString& Options, const struct FString& Address, struct FString* ErrorMessage);
	bool RequiresPassword();
	void ProcessServerTravel(const struct FString& URL, bool bAbsolute);
	struct FString GetBeaconText();
	void RemoveMutator(class AMutator* MutatorToRemove);
	void AddGameRules(class UClass* GRClass);
	void AddMutator(const struct FString& mutname, bool bUserAdded);
	void ParseAutomatedTestingOptions(const struct FString& Options);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& InKey);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	bool STATIC_GrabOption(struct FString* Options, struct FString* Result);
	void SetGameSpeed(float T);
	bool IsTdPaused();
	void TdPause();
	void DebugPause();
	void ClearPause();
	bool SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate);
	bool CanUnpause();
	bool CanOpenPauseMenu();
	int GetServerPort();
	int GetNumPlayers();
	struct FString GetNetworkNumber();
	void InitGameReplicationInfo();
	void KickIdler(class APlayerController* PC);
	void GameEnding();
	void NotifyNavigationChanged(class ANavigationPoint* N);
	void DoNavFearCostFallOff();
	void Timer();
	void ResetLevel();
	bool ShouldReset(class AActor* ActorToReset);
	void Reset();
	void PostBeginPlay();
	class ACoverReplicator* GetCoverReplicator();
	bool STATIC_UseLowGore(class AWorldInfo* WI);
	struct FString FindPlayerByID(int PlayerId);
	void PreBeginPlay();
};


// Class Engine.ReplicationInfo
// 0x0000 (0x01C0 - 0x01C0)
class AReplicationInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationInfo");
		return ptr;
	}

};


// Class Engine.GameReplicationInfo
// 0x0094 (0x0254 - 0x01C0)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                                // 0x01C0(0x0004) (Net)
	class UCurrentGameDataStore*                       CurrentGameData;                                          // 0x01C4(0x0004)
	unsigned long                                      bStopCountDown : 1;                                       // 0x01C8(0x0004) (Net)
	unsigned long                                      bMatchHasBegun : 1;                                       // 0x01C8(0x0004) (Net)
	unsigned long                                      bMatchIsOver : 1;                                         // 0x01C8(0x0004) (Net)
	unsigned long                                      bNeedsOnlineCleanup : 1;                                  // 0x01C8(0x0004)
	unsigned long                                      bIsArbitrated : 1;                                        // 0x01C8(0x0004) (Net)
	unsigned long                                      bTrackStats : 1;                                          // 0x01C8(0x0004) (Net)
	int                                                RemainingTime;                                            // 0x01CC(0x0004) (Net, DataBinding)
	int                                                ElapsedTime;                                              // 0x01D0(0x0004) (Net, DataBinding)
	int                                                RemainingMinute;                                          // 0x01D4(0x0004) (Net, DataBinding)
	float                                              SecondCount;                                              // 0x01D8(0x0004) (DataBinding)
	int                                                GoalScore;                                                // 0x01DC(0x0004) (Net, DataBinding)
	int                                                TimeLimit;                                                // 0x01E0(0x0004) (Net, DataBinding)
	int                                                MaxLives;                                                 // 0x01E4(0x0004) (Net, DataBinding)
	TArray<class ATeamInfo*>                           Teams;                                                    // 0x01E8(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     ServerName;                                               // 0x01F4(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink, DataBinding)
	struct FString                                     ShortName;                                                // 0x0200(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink, DataBinding)
	struct FString                                     AdminName;                                                // 0x020C(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink, DataBinding)
	struct FString                                     AdminEmail;                                               // 0x0218(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink, DataBinding)
	int                                                ServerRegion;                                             // 0x0224(0x0004) (Edit, Net, Config, GlobalConfig, DataBinding)
	struct FString                                     MessageOfTheDay;                                          // 0x0228(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink, DataBinding)
	class AActor*                                      Winner;                                                   // 0x0234(0x0004) (Net, DataBinding)
	TArray<class APlayerReplicationInfo*>              PRIArray;                                                 // 0x0238(0x000C) (NeedCtorLink)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x0244(0x000C) (NeedCtorLink)
	int                                                MatchID;                                                  // 0x0250(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameReplicationInfo");
		return ptr;
	}


	bool ShouldShowGore();
	bool PreventPause();
	bool IsCoopMultiplayerGame();
	bool AllowViewTargetSwitching();
	bool IsMultiplayerGame();
	void OnlineSession_EndSession(bool bForced);
	void OnlineSession_EndMatch();
	void OnlineSession_StartMatch();
	TScriptInterface<class UOnlineGameInterface> GetOnlineGameInterface();
	void EndGame();
	void StartMatch();
	void CleanupGameDataStore();
	void InitializeGameDataStore();
	void ReplicatedEvent(const struct FName& VarName);
	void SortPRIArray();
	bool InOrder(class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2);
	void GetPRIArray(TArray<class APlayerReplicationInfo*>* pris);
	void SetTeam(int Index, class ATeamInfo* TI);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void AddPRI(class APlayerReplicationInfo* PRI);
	class APlayerReplicationInfo* FindPlayerByID(int PlayerId);
	bool OnSameTeam(class AActor* A, class AActor* B);
	void Timer();
	void Destroyed();
	void Reset();
	void PostBeginPlay();
};


// Class Engine.GameViewportClient
// 0x00C4 (0x0100 - 0x003C)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FExec;                                            // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    Viewport;                                                 // 0x0044(0x0004) (Const)
	struct FPointer                                    ViewportFrame;                                            // 0x0048(0x0004) (Const)
	TArray<class UInteraction*>                        GlobalInteractions;                                       // 0x004C(0x000C) (AlwaysInit, NeedCtorLink)
	class UClass*                                      UIControllerClass;                                        // 0x0058(0x0004)
	class UUIInteraction*                              UIController;                                             // 0x005C(0x0004)
	class UConsole*                                    ViewportConsole;                                          // 0x0060(0x0004)
	struct FQWord                                      ShowFlags;                                                // 0x0064(0x0008) (Const)
	struct FString                                     LoadingMessage;                                           // 0x006C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SavingMessage;                                            // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectingMessage;                                        // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PausedMessage;                                            // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PrecachingMessage;                                        // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bShowTitleSafeZone : 1;                                   // 0x00A8(0x0004)
	unsigned long                                      bDisplayingUIMouseCursor : 1;                             // 0x00A8(0x0004) (Transient)
	unsigned long                                      bUIMouseCaptureOverride : 1;                              // 0x00A8(0x0004) (Transient)
	unsigned long                                      bDisableWorldRendering : 1;                               // 0x00A8(0x0004)
	struct FTitleSafeZoneArea                          TitleSafeZone;                                            // 0x00AC(0x0010)
	TArray<struct FSplitscreenData>                    SplitscreenInfo;                                          // 0x00BC(0x000C) (NeedCtorLink)
	TEnumAsByte<ESplitScreenType>                      SplitscreenType;                                          // 0x00C8(0x0001)
	TEnumAsByte<ESplitScreenType>                      Default2PSplitType;                                       // 0x00C9(0x0001) (Const)
	TEnumAsByte<ESplitScreenType>                      Default3PSplitType;                                       // 0x00CA(0x0001) (Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00CB(0x0001) MISSED OFFSET
	struct FVector2D                                   SubtitleMinRegion;                                        // 0x00CC(0x0008) (Config)
	struct FVector2D                                   SubtitleMaxRegion;                                        // 0x00D4(0x0008) (Config)
	struct FScriptDelegate                             __HandleInputKey__Delegate;                               // 0x00DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                              // 0x00E8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleInputChar__Delegate;                              // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}


	void RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer);
	void AddLocalPlayer(class ULocalPlayer* NewPlayer);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message);
	void DrawTransition(class UCanvas* Canvas);
	void PostRender(class UCanvas* Canvas);
	void DrawTitleSafeArea(class UCanvas* Canvas);
	void Tick(float DeltaTime);
	void CalculatePixelCenter(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float* out_CenterX, float* out_CenterY);
	float CalculateDeadZone(class ULocalPlayer* LPlayer, TEnumAsByte<ESafeZoneType> SZType, class UCanvas* Canvas, bool bUseMaxPercent);
	void CalculateSafeZoneValues(class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent, float* out_Horizontal, float* out_Vertical);
	void GetPixelSizeOfScreen(class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height);
	bool HasRightSafeZone(int LocalPlayerIndex);
	bool HasLeftSafeZone(int LocalPlayerIndex);
	bool HasBottomSafeZone(int LocalPlayerIndex);
	bool HasTopSafeZone(int LocalPlayerIndex);
	int ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer);
	bool GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos);
	void LayoutPlayers();
	void SetSplitscreenConfiguration(TEnumAsByte<ESplitScreenType> SplitType);
	void GameSessionEnded();
	int InsertInteraction(class UInteraction* NewInteraction, int InIndex);
	bool Init(struct FString* OutError);
	void SetConsoleTarget(int PlayerIndex);
	void ShowTitleSafeArea();
	void SetSplit(int Mode);
	void DebugRemovePlayer(int ControllerId);
	void SSSwapControllers();
	void DebugCreatePlayer(int ControllerId);
	class ULocalPlayer* FindPlayerByControllerId(int ControllerId);
	bool RemovePlayer(class ULocalPlayer* ExPlayer);
	class ULocalPlayer* CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError);
	bool IsFullScreenViewport();
	void GetViewportSize(struct FVector2D* out_ViewportSize);
	struct FString ConsoleCommand(const struct FString& Command);
	bool HandleInputChar(int ControllerId, const struct FString& Unicode);
	bool HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
};


// Class Engine.GravityVolume
// 0x0004 (0x023C - 0x0238)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                                 // 0x0238(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GravityVolume");
		return ptr;
	}

};


// Class Engine.GuidCache
// 0x0048 (0x0084 - 0x003C)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x003C(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GuidCache");
		return ptr;
	}

};


// Class Engine.HeightFogComponent
// 0x001F (0x0074 - 0x0055)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	float                                              Height;                                                   // 0x005C(0x0004) (Const)
	float                                              Density;                                                  // 0x0060(0x0004) (Edit, Const)
	float                                              LightBrightness;                                          // 0x0064(0x0004) (Edit, Const)
	struct FColor                                      LightColor;                                               // 0x0068(0x0004) (Edit, Const)
	float                                              ExtinctionDistance;                                       // 0x006C(0x0004) (Edit, Const)
	float                                              StartDistance;                                            // 0x0070(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFogComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.HUD
// 0x0284 (0x0444 - 0x01C0)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                               // 0x01C0(0x0004) (Const)
	struct FColor                                      GreenColor;                                               // 0x01C4(0x0004) (Const)
	struct FColor                                      RedColor;                                                 // 0x01C8(0x0004) (Const)
	class APlayerController*                           PlayerOwner;                                              // 0x01CC(0x0004)
	class AHUD*                                        HudOwner;                                                 // 0x01D0(0x0004)
	class APlayerReplicationInfo*                      ViewedInfo;                                               // 0x01D4(0x0004)
	float                                              ProgressFadeTime;                                         // 0x01D8(0x0004)
	struct FColor                                      MOTDColor;                                                // 0x01DC(0x0004)
	class AScoreBoard*                                 ScoreBoard;                                               // 0x01E0(0x0004)
	unsigned long                                      LostFocusPaused : 1;                                      // 0x01E4(0x0004) (Transient)
	unsigned long                                      bShowHUD : 1;                                             // 0x01E4(0x0004) (Config)
	unsigned long                                      bShowScores : 1;                                          // 0x01E4(0x0004)
	unsigned long                                      bShowDebugInfo : 1;                                       // 0x01E4(0x0004)
	unsigned long                                      bShowBadConnectionAlert : 1;                              // 0x01E4(0x0004) (Edit)
	unsigned long                                      bMessageBeep : 1;                                         // 0x01E4(0x0004) (Config, GlobalConfig)
	float                                              HudCanvasScale;                                           // 0x01E8(0x0004) (Config, GlobalConfig)
	TArray<struct FConsoleMessage>                     ConsoleMessages;                                          // 0x01EC(0x000C) (NeedCtorLink)
	struct FColor                                      ConsoleColor;                                             // 0x01F8(0x0004) (Const)
	int                                                ConsoleMessageCount;                                      // 0x01FC(0x0004) (Config, GlobalConfig)
	int                                                ConsoleFontSize;                                          // 0x0200(0x0004) (Config, GlobalConfig)
	int                                                MessageFontOffset;                                        // 0x0204(0x0004) (Config, GlobalConfig)
	int                                                MaxHUDAreaMessageCount;                                   // 0x0208(0x0004)
	struct FHudLocalizedMessage                        LocalMessages[0x8];                                       // 0x020C(0x0040) (Edit, Transient, NeedCtorLink)
	float                                              ConsoleMessagePosX;                                       // 0x040C(0x0004) (Edit)
	float                                              ConsoleMessagePosY;                                       // 0x0410(0x0004) (Edit)
	class UCanvas*                                     Canvas;                                                   // 0x0414(0x0004)
	float                                              LastHUDRenderTime;                                        // 0x0418(0x0004) (Transient)
	float                                              RenderDelta;                                              // 0x041C(0x0004) (Transient)
	float                                              SizeX;                                                    // 0x0420(0x0004) (Transient)
	float                                              SizeY;                                                    // 0x0424(0x0004) (Transient)
	float                                              CenterX;                                                  // 0x0428(0x0004) (Transient)
	float                                              CenterY;                                                  // 0x042C(0x0004) (Transient)
	float                                              RatioX;                                                   // 0x0430(0x0004) (Transient)
	float                                              RatioY;                                                   // 0x0434(0x0004) (Transient)
	TArray<struct FName>                               DebugDisplay;                                             // 0x0438(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void OnLostFocusPause(bool Enable);
	void PlayerOwnerDied();
	struct FColor STATIC_GetRYGColorRamp(float Pct);
	class UFont* STATIC_GetFontSizeIndex(int FontSize);
	void DisplayLocalMessages();
	void DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY);
	void DrawMessage(int I, float PosY, float* DX, float* DY);
	void GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage);
	void AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject);
	void LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject);
	void AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime);
	void DisplayConsoleMessages();
	void Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime);
	void ClearMessage(struct FHudLocalizedMessage* M);
	void DisplayBadConnectionAlert();
	void DisplayProgressMessage();
	void DrawEngineHUD();
	void DrawDemoHUD();
	void DrawHUD();
	void PostRender();
	void PreCalcValues();
	void DrawRoute(class APawn* Target);
	void FXStop(class UClass* aClass);
	void FXPlay(class UClass* aClass, const struct FString& FXAnimPath);
	bool ShouldDisplayDebug(const struct FName& DebugType);
	void ShowDebug(const struct FName& DebugType);
	void SetShowScores(bool bNewValue);
	void ShowScores();
	void ShowHUD();
	void ToggleHUD();
	void Destroyed();
	void SpawnScoreBoard(class UClass* ScoringType);
	void PostBeginPlay();
	void Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor);
	void Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor);
};


// Class Engine.InternetInfo
// 0x0000 (0x01C0 - 0x01C0)
class AInternetInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InternetInfo");
		return ptr;
	}


	struct FString GetBeaconText(int I);
	struct FString GetBeaconAddress(int I);
};


// Class Engine.InterpActor
// 0x004C (0x0244 - 0x01F8)
class AInterpActor : public ADynamicSMActor
{
public:
	class ANavigationPoint*                            MyMarker;                                                 // 0x01F8(0x0004)
	unsigned long                                      bMonitorMover : 1;                                        // 0x01FC(0x0004)
	unsigned long                                      bMonitorZVelocity : 1;                                    // 0x01FC(0x0004)
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                        // 0x01FC(0x0004) (Edit)
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;                     // 0x01FC(0x0004) (Edit)
	unsigned long                                      bStopOnEncroach : 1;                                      // 0x01FC(0x0004) (Edit)
	unsigned long                                      bIsStickyWhenAimedAt : 1;                                 // 0x01FC(0x0004) (Edit)
	unsigned long                                      LOIUse2DDistance : 1;                                     // 0x01FC(0x0004) (Edit, Const)
	float                                              MaxZVelocity;                                             // 0x0200(0x0004)
	float                                              StayOpenTime;                                             // 0x0204(0x0004)
	class USoundCue*                                   OpenSound;                                                // 0x0208(0x0004) (Edit)
	class USoundCue*                                   OpeningAmbientSound;                                      // 0x020C(0x0004) (Edit)
	class USoundCue*                                   OpenedSound;                                              // 0x0210(0x0004) (Edit)
	class USoundCue*                                   CloseSound;                                               // 0x0214(0x0004) (Edit)
	class USoundCue*                                   ClosingAmbientSound;                                      // 0x0218(0x0004) (Edit)
	class USoundCue*                                   ClosedSound;                                              // 0x021C(0x0004) (Edit)
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x0220(0x0004) (ExportObject, Component, EditInline)
	float                                              LOILookAtDelay;                                           // 0x0224(0x0004) (Edit, Const)
	float                                              LOIProximityDelay;                                        // 0x0228(0x0004) (Edit, Const)
	float                                              LOIMinDuration;                                           // 0x022C(0x0004) (Edit, Const)
	float                                              LOIDistance;                                              // 0x0230(0x0004) (Edit, Const)
	TArray<struct FName>                               LOIGroups;                                                // 0x0234(0x000C) (Edit, Const, NeedCtorLink)
	class UTdLOIAddOnObject*                           TdLOIAddOn;                                               // 0x0240(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpActor");
		return ptr;
	}


	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void ActivateLOI();
	void AssignPlayerToLOI(class AActor* Player);
	void ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record);
	void InterpolationChanged(class USeqAct_Interp* InterpAction);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction);
	void PlayMovingSound(bool bClosing);
	void FinishedOpen();
	void Restart();
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	void RanInto(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void PostBeginPlay();
};


// Class Engine.InterpCurveEdSetup
// 0x0010 (0x004C - 0x003C)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x003C(0x000C) (NeedCtorLink)
	int                                                ActiveTab;                                                // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x001C (0x0058 - 0x003C)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    CurveEdVTable;                                            // 0x0040(0x0004) (Native, NoExport)
	class UClass*                                      TrackInstClass;                                           // 0x0044(0x0004)
	struct FString                                     TrackTitle;                                               // 0x0048(0x000C) (NeedCtorLink)
	unsigned long                                      bOnePerGroup : 1;                                         // 0x0054(0x0004)
	unsigned long                                      bDirGroupOnly : 1;                                        // 0x0054(0x0004)
	unsigned long                                      bDisableTrack : 1;                                        // 0x0054(0x0004)
	unsigned long                                      bIsAnimControlTrack : 1;                                  // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}

};


// Class Engine.Inventory
// 0x0050 (0x0210 - 0x01C0)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x01C0(0x0004) (Net)
	class AInventoryManager*                           InvManager;                                               // 0x01C4(0x0004) (Net)
	struct FString                                     ItemName;                                                 // 0x01C8(0x000C) (Const, Localized, NeedCtorLink, DataBinding)
	unsigned long                                      bRenderOverlays : 1;                                      // 0x01D4(0x0004)
	unsigned long                                      bReceiveOwnerEvents : 1;                                  // 0x01D4(0x0004)
	unsigned long                                      bDropOnDeath : 1;                                         // 0x01D4(0x0004)
	unsigned long                                      bDelayedSpawn : 1;                                        // 0x01D4(0x0004)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x01D4(0x0004)
	TEnumAsByte<EInventorySlot>                        InventorySlot;                                            // 0x01D8(0x0001) (Net, Transient)
	TEnumAsByte<EInventorySlot>                        DefaultInventorySlot;                                     // 0x01D9(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01DA(0x0002) MISSED OFFSET
	float                                              RespawnTime;                                              // 0x01DC(0x0004) (Edit)
	float                                              MaxDesireability;                                         // 0x01E0(0x0004)
	struct FString                                     PickupMessage;                                            // 0x01E4(0x000C) (Edit, Const, Localized, NeedCtorLink, DataBinding)
	class USoundCue*                                   PickupSound;                                              // 0x01F0(0x0004) (Edit)
	struct FString                                     PickupForce;                                              // 0x01F4(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      DroppedPickupClass;                                       // 0x0200(0x0004)
	class UPrimitiveComponent*                         DroppedPickupMesh;                                        // 0x0204(0x0004) (ExportObject, Component, EditInline)
	class UPrimitiveComponent*                         PickupFactoryMesh;                                        // 0x0208(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    DroppedPickupParticles;                                   // 0x020C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Inventory");
		return ptr;
	}


	void OwnerEvent(const struct FName& EventName);
	struct FString STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void ItemRemovedFromInvManager();
	void ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate);
	void GivenTo(class APawn* thisPawn, bool bDoNotActivate);
	void AnnouncePickup(class APawn* Other);
	void GiveTo(class APawn* Other);
	float STATIC_DetourWeight(class APawn* Other, float PathWeight);
	float STATIC_BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C);
	void Destroyed();
	struct FString GetHumanReadableName();
	void ActiveRenderOverlays(class AHUD* H);
	void RenderOverlays(class AHUD* H);
	void AssignToSlot(TEnumAsByte<EInventorySlot> Slot);
};


// Class Engine.InventoryManager
// 0x001C (0x01DC - 0x01C0)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                           // 0x01C0(0x0004) (Net)
	class AWeapon*                                     PendingWeapon;                                            // 0x01C4(0x0004)
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                              // 0x01C8(0x0004)
	unsigned long                                      bMustHoldWeapon : 1;                                      // 0x01CC(0x0004)
	TArray<int>                                        PendingFire;                                              // 0x01D0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryManager");
		return ptr;
	}


	void ClientSyncWeapon(class AWeapon* NewWeapon);
	void ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet);
	void ChangedWeapon();
	bool CancelWeaponChange();
	void ServerSetCurrentWeapon(class AWeapon* DesiredWeapon);
	void SetPendingWeapon(class AWeapon* DesiredWeapon);
	void SetCurrentWeapon(class AWeapon* DesiredWeapon);
	void NextWeapon();
	void PrevWeapon();
	void SwitchToBestWeapon(bool bForceADifferentWeapon);
	class AWeapon* GetBestWeapon(bool bForceADifferentWeapon);
	float GetWeaponRatingFor(class AWeapon* W);
	bool IsActiveWeapon(class AWeapon* ThisWeapon);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void DrawHUD(class AHUD* H);
	void OwnerEvent(const struct FName& EventName);
	int ModifyDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType);
	void DiscardInventory();
	void RemoveFromInventory(class AInventory* ItemToRemove);
	bool AddInventory(class AInventory* NewItem, bool bDoNotActivate);
	class AInventory* CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate);
	class AInventory* FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass);
	bool HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void Destroyed();
	void SetupFor(class APawn* P);
	void DumpWeaponStats();
	void InventoryActors(class UClass* BaseClass, class AInventory** Inv);
	void PostBeginPlay();
};


// Class Engine.KillZDamageType
// 0x0000 (0x008C - 0x008C)
class UKillZDamageType : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KillZDamageType");
		return ptr;
	}

};


// Class Engine.LadderReachSpec
// 0x0000 (0x0098 - 0x0098)
class ULadderReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderReachSpec");
		return ptr;
	}

};


// Class Engine.LadderVolume
// 0x0030 (0x0268 - 0x0238)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                                  // 0x0238(0x000C)
	struct FVector                                     LookDir;                                                  // 0x0244(0x000C)
	struct FVector                                     ClimbDir;                                                 // 0x0250(0x000C)
	class ALadder*                                     LadderList;                                               // 0x025C(0x0004) (Const)
	unsigned long                                      bNoPhysicalLadder : 1;                                    // 0x0260(0x0004) (Edit)
	unsigned long                                      bAutoPath : 1;                                            // 0x0260(0x0004) (Edit)
	unsigned long                                      bAllowLadderStrafing : 1;                                 // 0x0260(0x0004) (Edit)
	class APawn*                                       PendingClimber;                                           // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderVolume");
		return ptr;
	}


	void PhysicsChangedFor(class AActor* Other);
	void PawnLeavingVolume(class APawn* P);
	void PawnEnteredVolume(class APawn* P);
	bool InUse(class APawn* Ignored);
	void PostBeginPlay();
};


// Class Engine.Level
// 0x01A0 (0x0230 - 0x0090)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0x1A0];                                     // 0x0090(0x01A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x0040 (0x007C - 0x003C)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                              // 0x003C(0x0008) (Edit, Const, EditConst)
	class ULevel*                                      LoadedLevel;                                              // 0x0044(0x0004) (Const, Transient)
	struct FVector                                     Offset;                                                   // 0x0048(0x000C) (Edit, Const)
	struct FVector                                     OldOffset;                                                // 0x0054(0x000C) (Const)
	unsigned long                                      bIsVisible : 1;                                           // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bHasLoadRequestPending : 1;                               // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bHasUnloadRequestPending : 1;                             // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bShouldBeVisibleInEditor : 1;                             // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bBoundingBoxVisible : 1;                                  // 0x0060(0x0004) (Const)
	unsigned long                                      bLocked : 1;                                              // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bIsFullyStatic : 1;                                       // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bShouldBeLoaded : 1;                                      // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bShouldBeVisible : 1;                                     // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x0060(0x0004) (Transient)
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                        // 0x0060(0x0004) (Const, Transient)
	struct FColor                                      DrawColor;                                                // 0x0064(0x0004) (Edit, Const)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x0068(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x0074(0x0004) (Edit)
	float                                              LastVolumeUnloadRequestTime;                              // 0x0078(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}

};


// Class Engine.LevelStreamingDistance
// 0x0010 (0x008C - 0x007C)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                                   // 0x007C(0x000C) (Edit)
	float                                              MaxDistance;                                              // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingDistance");
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0000 (0x007C - 0x007C)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x007C - 0x007C)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0011 (0x020D - 0x01FC)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x01FC(0x000C) (Edit, Const, EditConst, NeedCtorLink, NoImport)
	unsigned long                                      bEditorPreVisOnly : 1;                                    // 0x0208(0x0004) (Edit)
	unsigned long                                      bDisabled : 1;                                            // 0x0208(0x0004) (Edit)
	TEnumAsByte<EStreamingVolumeUsage>                 Usage;                                                    // 0x020C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.LiftCenter
// 0x0020 (0x0334 - 0x0314)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                                   // 0x0314(0x0004)
	float                                              MaxDist2D;                                                // 0x0318(0x0004)
	struct FVector                                     LiftOffset;                                               // 0x031C(0x000C)
	unsigned long                                      bJumpLift : 1;                                            // 0x0328(0x0004)
	float                                              CollisionHeight;                                          // 0x032C(0x0004)
	class ATrigger*                                    LiftTrigger;                                              // 0x0330(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftCenter");
		return ptr;
	}


	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void PostBeginPlay();
};


// Class Engine.LiftExit
// 0x0008 (0x031C - 0x0314)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                             // 0x0314(0x0004) (Edit)
	unsigned long                                      bExitOnly : 1;                                            // 0x0318(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftExit");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	void WaitForLift(class APawn* Other);
	bool CanBeReachedFromLiftBy(class APawn* Other);
};


// Class Engine.LightFunction
// 0x0010 (0x004C - 0x003C)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                           // 0x003C(0x0004) (Edit, Const)
	struct FVector                                     Scale;                                                    // 0x0040(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightFunction");
		return ptr;
	}

};


// Class Engine.Texture
// 0x007C (0x00B8 - 0x003C)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                                 // 0x003C(0x0004) (Edit)
	unsigned long                                      RGBE : 1;                                                 // 0x003C(0x0004)
	unsigned long                                      CompressionNoAlpha : 1;                                   // 0x003C(0x0004) (Edit)
	unsigned long                                      CompressionNone : 1;                                      // 0x003C(0x0004)
	unsigned long                                      CompressionNoMipmaps : 1;                                 // 0x003C(0x0004)
	unsigned long                                      CompressionFullDynamicRange : 1;                          // 0x003C(0x0004) (Edit)
	unsigned long                                      DeferCompression : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      NeverStream : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bDitherMipMapAlpha : 1;                                   // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderR : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderG : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderB : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderA : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x003C(0x0004) (Const, Transient)
	unsigned long                                      bDeferredProcessing : 1;                                  // 0x003C(0x0004) (Transient)
	float                                              UnpackMin[0x4];                                           // 0x0040(0x0004) (Edit)
	float                                              UnpackMax[0x4];                                           // 0x0050(0x0004) (Edit)
	struct FUntypedBulkData_Mirror                     SourceArt;                                                // 0x0060(0x0030) (Const, Native)
	TEnumAsByte<ETexture_TextureCompressionSettings>   CompressionSettings;                                      // 0x0090(0x0001) (Edit)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0091(0x0001) (Edit)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0092(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0093(0x0001) MISSED OFFSET
	int                                                LODBias;                                                  // 0x0094(0x0004) (Edit)
	int                                                CachedCombinedLODBias;                                    // 0x0098(0x0004) (Transient)
	struct FString                                     SourceFilePath;                                           // 0x009C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x00A8(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FPointer                                    Resource;                                                 // 0x00B4(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0058 (0x0110 - 0x00B8)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                                     // 0x00B8(0x000C) (Const, Native)
	int                                                SizeX;                                                    // 0x00C4(0x0004) (Const)
	int                                                SizeY;                                                    // 0x00C8(0x0004) (Const)
	int                                                TurtleSizeX;                                              // 0x00CC(0x0004) (Const)
	int                                                TurtleSizeY;                                              // 0x00D0(0x0004) (Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00D4(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00D5(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00D6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00D7(0x0001) MISSED OFFSET
	int                                                CachedRequestedMips;                                      // 0x00D8(0x0004) (Transient)
	unsigned long                                      bIsStreamable : 1;                                        // 0x00DC(0x0004) (Const, Transient)
	unsigned long                                      bHasCancelationPending : 1;                               // 0x00DC(0x0004) (Const, Transient)
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;                  // 0x00DC(0x0004) (Const, Transient)
	unsigned long                                      bForceMiplevelsToBeResident : 1;                          // 0x00DC(0x0004) (Transient)
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x00DC(0x0004) (Edit, Const)
	float                                              TimeToForceMipLevelsToBeResident;                         // 0x00E0(0x0004) (Transient)
	struct FName                                       TextureFileCacheName;                                     // 0x00E4(0x0008)
	int                                                RequestedMips;                                            // 0x00EC(0x0004) (Const, Transient)
	int                                                ResidentMips;                                             // 0x00F0(0x0004) (Const, Transient)
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                            // 0x00F4(0x0004) (Const, Native, Transient)
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                                   // 0x00F8(0x000C) (Const, Native, DuplicateTransient, NoImport)
	int                                                MipTailBaseIdx;                                           // 0x0104(0x0004) (Const)
	struct FPointer                                    ResourceMem;                                              // 0x0108(0x0004) (Const, Native, Transient)
	int                                                FirstResourceMemMip;                                      // 0x010C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}

};


// Class Engine.LightMapTexture2D
// 0x0000 (0x0110 - 0x0110)
class ULightMapTexture2D : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}

};


// Class Engine.LightVolume
// 0x0000 (0x01FC - 0x01FC)
class ALightVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightVolume");
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0018 (0x01D4 - 0x01BC)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                           // 0x01BC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    FPrimitiveDrawInterfaceView;                              // 0x01C0(0x0004) (Const, Native, NoExport)
	TArray<struct FPointer>                            BatchedLines;                                             // 0x01C4(0x000C) (Const, Native, Transient)
	float                                              DefaultLifeTime;                                          // 0x01D0(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}

};


// Class Engine.LocalPlayer
// 0x05CC (0x062C - 0x0060)
class ULocalPlayer : public UPlayer
{
public:
	int                                                ControllerId;                                             // 0x0060(0x0004)
	class UGameViewportClient*                         ViewportClient;                                           // 0x0064(0x0004)
	struct FVector2D                                   Origin;                                                   // 0x0068(0x0008)
	struct FVector2D                                   Size;                                                     // 0x0070(0x0008)
	class UPostProcessChain*                           PlayerPostProcess;                                        // 0x0078(0x0004) (Const)
	TArray<class UPostProcessChain*>                   PlayerPostProcessChains;                                  // 0x007C(0x000C) (Const, NeedCtorLink)
	struct FPointer                                    ViewState;                                                // 0x0088(0x0004) (Const, Native)
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                                   // 0x008C(0x0008) (Const, Native, Transient)
	struct FVector                                     LastViewLocation;                                         // 0x0094(0x000C) (Transient)
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                            // 0x00A0(0x02C8) (Const, Transient, NeedCtorLink, NoImport)
	unsigned long                                      bOverridePostProcessSettings : 1;                         // 0x0368(0x0004)
	unsigned long                                      bSentSplitJoin : 1;                                       // 0x0368(0x0004) (Const, Transient, EditConst)
	struct FPostProcessSettings                        PostProcessSettingsOverride;                              // 0x036C(0x02BC) (NeedCtorLink)
	float                                              PPSettingsOverrideStartBlend;                             // 0x0628(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}


	void TouchPlayerPostProcessChain();
	class UPostProcessChain* GetPostProcessChain(int InIndex);
	bool RemoveAllPostProcessingChains();
	bool RemovePostProcessingChain(int InIndex);
	bool InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone);
	void SetControllerId(int NewControllerId);
	void ClearPostProcessSettingsOverride();
	void UpdateOverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings);
	void OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float StartBlendTime);
	bool GetActorVisibility(class AActor* TestActor);
	void SendSplitJoin();
	bool SpawnPlayActor(const struct FString& URL, struct FString* OutError);
};


// Class Engine.MantleMarker
// 0x0008 (0x031C - 0x0314)
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                               // 0x0314(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MantleMarker");
		return ptr;
	}

};


// Class Engine.MantleReachSpec
// 0x0000 (0x0098 - 0x0098)
class UMantleReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MantleReachSpec");
		return ptr;
	}

};


// Class Engine.MapInfo
// 0x0000 (0x003C - 0x003C)
class UMapInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapInfo");
		return ptr;
	}

};


// Class Engine.Material
// 0x0260 (0x02BC - 0x005C)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x005C(0x0004) (Edit)
	class UClass*                                      PhysicalMaterial;                                         // 0x0060(0x0004)
	struct FColorMaterialInput                         DiffuseColor;                                             // 0x0064(0x0024)
	struct FScalarMaterialInput                        DiffusePower;                                             // 0x0088(0x0024)
	struct FColorMaterialInput                         SpecularColor;                                            // 0x00AC(0x0024)
	struct FScalarMaterialInput                        SpecularPower;                                            // 0x00D0(0x0024)
	struct FVectorMaterialInput                        Normal;                                                   // 0x00F4(0x002C)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x0120(0x0024)
	struct FScalarMaterialInput                        Opacity;                                                  // 0x0144(0x0024)
	struct FScalarMaterialInput                        OpacityMask;                                              // 0x0168(0x0024)
	float                                              OpacityMaskClipValue;                                     // 0x018C(0x0004) (Edit)
	struct FVector2MaterialInput                       Distortion;                                               // 0x0190(0x0028)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x01B8(0x0001) (Edit)
	TEnumAsByte<EMaterialLightingModel>                LightingModel;                                            // 0x01B9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01BA(0x0002) MISSED OFFSET
	struct FColorMaterialInput                         CustomLighting;                                           // 0x01BC(0x0024)
	struct FScalarMaterialInput                        TwoSidedLightingMask;                                     // 0x01E0(0x0024)
	struct FColorMaterialInput                         TwoSidedLightingColor;                                    // 0x0204(0x0024)
	unsigned long                                      TwoSided : 1;                                             // 0x0228(0x0004) (Edit)
	unsigned long                                      bDisableDepthTest : 1;                                    // 0x0228(0x0004) (Edit)
	unsigned long                                      bUsedAsLightFunction : 1;                                 // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithFogVolumes : 1;                                  // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithSkeletalMesh : 1;                                // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithParticleSystem : 1;                              // 0x0228(0x0004) (Const)
	unsigned long                                      bUsedWithParticleSprites : 1;                             // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithBeamTrails : 1;                                  // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithParticleSubUV : 1;                               // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithFoliage : 1;                                     // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithSpeedTree : 1;                                   // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithStaticLighting : 1;                              // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithLensFlare : 1;                                   // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithGammaCorrection : 1;                             // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;                      // 0x0228(0x0004) (Edit, Const)
	unsigned long                                      Wireframe : 1;                                            // 0x0228(0x0004) (Edit)
	unsigned long                                      bIsFallbackMaterial : 1;                                  // 0x0228(0x0004) (Edit)
	unsigned long                                      bUsesDistortion : 1;                                      // 0x0228(0x0004)
	unsigned long                                      bUsesSceneColor : 1;                                      // 0x0228(0x0004)
	unsigned long                                      bIsMasked : 1;                                            // 0x0228(0x0004)
	unsigned long                                      bIsPreviewMaterial : 1;                                   // 0x0228(0x0004) (Transient, DuplicateTransient)
	unsigned long                                      bDeferredProcessing : 1;                                  // 0x0228(0x0004) (Transient)
	class UMaterial*                                   FallbackMaterial;                                         // 0x022C(0x0004) (Edit)
	struct FPointer                                    MaterialResources[0x2];                                   // 0x0230(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    DefaultMaterialInstances[0x2];                            // 0x0238(0x0004) (Const, Native, DuplicateTransient)
	int                                                EditorX;                                                  // 0x0240(0x0004)
	int                                                EditorY;                                                  // 0x0244(0x0004)
	int                                                EditorPitch;                                              // 0x0248(0x0004)
	int                                                EditorYaw;                                                // 0x024C(0x0004)
	TArray<class UMaterialExpression*>                 Expressions;                                              // 0x0250(0x000C) (NeedCtorLink)
	TArray<class UMaterialExpressionComment*>          EditorComments;                                           // 0x025C(0x000C) (NeedCtorLink)
	TArray<class UMaterialExpressionCompound*>         EditorCompounds;                                          // 0x0268(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0274(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x02B0(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}


	TArray<class UTexture*> GetTextures();
};


// Class Engine.MaterialEffect
// 0x0007 (0x0068 - 0x0061)
class UMaterialEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialEffect");
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x001C (0x0058 - 0x003C)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                                  // 0x003C(0x0004)
	int                                                EditorY;                                                  // 0x0040(0x0004)
	unsigned long                                      bRealtimePreview : 1;                                     // 0x0044(0x0004) (Edit)
	unsigned long                                      bIsParameterExpression : 1;                               // 0x0044(0x0004)
	class UMaterialExpressionCompound*                 Compound;                                                 // 0x0048(0x0004) (Const)
	struct FString                                     Desc;                                                     // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0004 (0x01C4 - 0x01C0)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x01C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x0010 (0x01D0 - 0x01C0)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                             // 0x01C0(0x0004) (Const, Net)
	unsigned long                                      bIsPlaying : 1;                                           // 0x01C4(0x0004) (Net)
	unsigned long                                      bReversePlayback : 1;                                     // 0x01C4(0x0004) (Net)
	unsigned long                                      bPaused : 1;                                              // 0x01C4(0x0004) (Net)
	float                                              PlayRate;                                                 // 0x01C8(0x0004) (Net)
	float                                              Position;                                                 // 0x01CC(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}


	void Update();
};


// Class Engine.MeshComponent
// 0x000C (0x01C8 - 0x01BC)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x01BC(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}


	TArray<class UMaterialInstanceConstant*> InitLOIMtrlInstances();
	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying(int ElementIndex);
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int ElementIndex);
	int GetNumElements();
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(int ElementIndex);
};


// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0040 - 0x003C)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                        // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockActors : 1;                                          // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      HiddenGame : 1;                                           // 0x003C(0x0004) (Edit)
	unsigned long                                      HiddenEditor : 1;                                         // 0x003C(0x0004) (Edit)
	unsigned long                                      CastShadow : 1;                                           // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponentFactory");
		return ptr;
	}

};


// Class Engine.MeshComponentFactory
// 0x000C (0x004C - 0x0040)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponentFactory");
		return ptr;
	}

};


// Class Engine.Model
// 0x0B70 (0x0BAC - 0x003C)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0xB70];                                     // 0x003C(0x0B70) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.ModelComponent
// 0x0030 (0x01EC - 0x01BC)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                                    // 0x01BC(0x0004) (Const, Native, Transient, NoExport)
	int                                                ZoneIndex;                                                // 0x01C0(0x0004) (Const, Native, Transient, NoExport)
	int                                                ComponentIndex;                                           // 0x01C4(0x0004) (Const, Native, Transient, NoExport)
	TArray<struct FPointer>                            Nodes;                                                    // 0x01C8(0x000C) (Const, Native, Transient, NoExport)
	TArray<struct FPointer>                            Edges;                                                    // 0x01D4(0x000C) (Const, Native, Transient, NoExport)
	TArray<struct FPointer>                            Elements;                                                 // 0x01E0(0x000C) (Const, Native, Transient, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}

};


// Class Engine.MotionBlurEffect
// 0x0017 (0x0078 - 0x0061)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              MaxVelocity;                                              // 0x0064(0x0004) (Edit)
	float                                              MotionBlurAmount;                                         // 0x0068(0x0004) (Edit)
	unsigned long                                      FullMotionBlur : 1;                                       // 0x006C(0x0004) (Edit)
	float                                              CameraRotationThreshold;                                  // 0x0070(0x0004) (Edit)
	float                                              CameraTranslationThreshold;                               // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MotionBlurEffect");
		return ptr;
	}

};


// Class Engine.MultiFont
// 0x000C (0x015C - 0x0150)
class UMultiFont : public UFont
{
public:
	TArray<float>                                      ResolutionTestTable;                                      // 0x0150(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MultiFont");
		return ptr;
	}


	int GetResolutionTestTableIndex(float HeightTest);
};


// Class Engine.Mutator
// 0x0014 (0x01D4 - 0x01C0)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                              // 0x01C0(0x0004)
	TArray<struct FString>                             GroupNames;                                               // 0x01C4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUserAdded : 1;                                           // 0x01D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mutator");
		return ptr;
	}


	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void InitMutator(const struct FString& Options, struct FString* ErrorMessage);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	void NotifyLogin(class AController* NewPlayer);
	void NotifyLogout(class AController* Exiting);
	struct FString ParseChatPercVar(class AController* Who, const struct FString& Cmd);
	void GetServerPlayers(struct FServerResponseLine* ServerState);
	void GetServerDetails(struct FServerResponseLine* ServerState);
	bool CheckReplacement(class AActor* Other);
	bool CheckRelevance(class AActor* Other);
	bool IsRelevant(class AActor* Other);
	bool AlwaysKeep(class AActor* Other);
	void AddMutator(class AMutator* M);
	void ModifyPlayer(class APawn* Other);
	void ModifyLogin(struct FString* Portal, struct FString* Options);
	void Mutate(const struct FString& MutateString, class APlayerController* Sender);
	void Destroyed();
	bool MutatorIsAllowed();
	void PreBeginPlay();
};


// Class Engine.NetPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UNetPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetPendingLevel");
		return ptr;
	}

};


// Class Engine.Note
// 0x000C (0x01CC - 0x01C0)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                                     // 0x01C0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.Objective
// 0x0000 (0x0314 - 0x0314)
class AObjective : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Objective");
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x000C (0x0048 - 0x003C)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}

};


// Class Engine.Settings
// 0x0030 (0x006C - 0x003C)
class USettings : public UObject
{
public:
	TArray<struct FLocalizedStringSetting>             LocalizedSettings;                                        // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FLocalizedStringSettingMetaData>     LocalizedSettingsMappings;                                // 0x0054(0x000C) (NeedCtorLink)
	TArray<struct FSettingsPropertyPropertyMetaData>   PropertyMappings;                                         // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Settings");
		return ptr;
	}


	void UpdateFromURL(class AGameInfo* Game, struct FString* URL);
	void BuildURL(struct FString* URL);
	void AppendContextsToURL(struct FString* URL);
	void AppendPropertiesToURL(struct FString* URL);
	void AppendDataBindingsToURL(struct FString* URL);
	void GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings);
	void GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps);
	bool GetRangedPropertyValue(int PropertyId, float* OutValue);
	bool SetRangedPropertyValue(int PropertyId, float NewValue);
	bool GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt);
	bool GetPropertyMappingType(int PropertyId, TEnumAsByte<EPropertyValueMappingType>* OutType);
	bool HasStringSetting(int SettingId);
	bool HasProperty(int PropertyId);
	void UpdateProperties(bool bShouldAddIfMissing, TArray<struct FSettingsProperty>* Props);
	void UpdateStringSettings(bool bShouldAddIfMissing, TArray<struct FLocalizedStringSetting>* Settings);
	TEnumAsByte<ESettingsDataType> GetPropertyType(int PropertyId);
	bool GetStringProperty(int PropertyId, struct FString* Value);
	void SetStringProperty(int PropertyId, const struct FString& Value);
	bool GetIntProperty(int PropertyId, int* Value);
	void SetIntProperty(int PropertyId, int Value);
	bool GetFloatProperty(int PropertyId, float* Value);
	void SetFloatProperty(int PropertyId, float Value);
	bool SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue);
	struct FString GetPropertyAsStringByName(const struct FName& PropertyName);
	struct FString GetPropertyAsString(int PropertyId);
	struct FString GetPropertyColumnHeader(int PropertyId);
	struct FName GetPropertyName(int PropertyId);
	bool GetPropertyId(const struct FName& PropertyName, int* PropertyId);
	bool SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue);
	struct FName GetStringSettingValueNameByName(const struct FName& StringSettingName);
	struct FName GetStringSettingValueName(int StringSettingId, int ValueIndex);
	bool IsWildcardStringSetting(int StringSettingId);
	struct FString GetStringSettingColumnHeader(int StringSettingId);
	struct FName GetStringSettingName(int StringSettingId);
	bool GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId);
	bool GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex);
	void SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd);
	bool GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values);
	bool GetStringSettingValue(int StringSettingId, int* ValueIndex);
	void SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd);
	void STATIC_GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2);
	void STATIC_GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob);
	int STATIC_GetSettingsDataInt(struct FSettingsData* Data);
	float STATIC_GetSettingsDataFloat(struct FSettingsData* Data);
	struct FString STATIC_GetSettingsDataString(struct FSettingsData* Data);
	void STATIC_EmptySettingsData(struct FSettingsData* Data);
	void STATIC_SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy);
	void STATIC_SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob);
	void STATIC_SetSettingsDataDateTime(int InInt1, int InInt2, struct FSettingsData* Data);
	void STATIC_SetSettingsDataInt(int InInt, struct FSettingsData* Data);
	void STATIC_SetSettingsDataFloat(float InFloat, struct FSettingsData* Data);
	void STATIC_SetSettingsDataString(const struct FString& InString, struct FSettingsData* Data);
};


// Class Engine.OnlineGameSearch
// 0x0060 (0x00CC - 0x006C)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                         // 0x006C(0x0004)
	struct FLocalizedStringSetting                     Query;                                                    // 0x0070(0x000C)
	unsigned long                                      bIsLanQuery : 1;                                          // 0x007C(0x0004) (DataBinding)
	unsigned long                                      bIsListPlayQuery : 1;                                     // 0x007C(0x0004) (DataBinding)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x007C(0x0004) (DataBinding)
	unsigned long                                      bIsSearchInProgress : 1;                                  // 0x007C(0x0004) (Const)
	unsigned long                                      bIsListPlaySearchInProgress : 1;                          // 0x007C(0x0004) (Const)
	int                                                NumListPlayServersAvailable;                              // 0x0080(0x0004) (DataBinding)
	int                                                NumGoldOnlyListPlayServersAvailable;                      // 0x0084(0x0004) (DataBinding)
	int                                                NumJoinableListPlayServersAvailable;                      // 0x0088(0x0004) (DataBinding)
	class UClass*                                      GameSettingsClass;                                        // 0x008C(0x0004)
	TArray<struct FOnlineGameSearchResult>             Results;                                                  // 0x0090(0x000C) (Const, NeedCtorLink)
	TArray<struct FNamedObjectProperty>                NamedProperties;                                          // 0x009C(0x000C) (NeedCtorLink)
	struct FOnlineGameSearchQuery                      FilterQuery;                                              // 0x00A8(0x0018) (Const, NeedCtorLink)
	struct FString                                     AdditionalSearchCriteria;                                 // 0x00C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSearch");
		return ptr;
	}

};


// Class Engine.OnlineGameSettings
// 0x003C (0x00A8 - 0x006C)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                                     // 0x006C(0x0004) (DataBinding)
	int                                                NumPrivateConnections;                                    // 0x0070(0x0004) (DataBinding)
	int                                                NumOpenPublicConnections;                                 // 0x0074(0x0004) (DataBinding)
	int                                                NumOpenPrivateConnections;                                // 0x0078(0x0004) (DataBinding)
	unsigned char                                      ServerNonce[0x8];                                         // 0x007C(0x0001) (Const)
	int                                                MaxSearchResults;                                         // 0x0084(0x0004)
	unsigned long                                      bShouldAdvertise : 1;                                     // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bIsLanMatch : 1;                                          // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bUsesStats : 1;                                           // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bAllowJoinInProgress : 1;                                 // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bAllowInvites : 1;                                        // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bUsesPresence : 1;                                        // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bAllowJoinViaPresence : 1;                                // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bWasFromInvite : 1;                                       // 0x0088(0x0004) (Const)
	unsigned long                                      bIsDedicated : 1;                                         // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bIsListPlay : 1;                                          // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bIsGoldOnlyListPlay : 1;                                  // 0x0088(0x0004) (DataBinding)
	struct FString                                     OwningPlayerName;                                         // 0x008C(0x000C) (NeedCtorLink, DataBinding)
	struct FUniqueNetId                                OwningPlayerId;                                           // 0x0098(0x0008)
	int                                                PingInMs;                                                 // 0x00A0(0x0004) (DataBinding)
	float                                              AverageSkillRating;                                       // 0x00A4(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSettings");
		return ptr;
	}

};


// Class Engine.OnlineProfileSettings
// 0x0041 (0x007D - 0x003C)
class UOnlineProfileSettings : public UObject
{
public:
	int                                                VersionNumber;                                            // 0x003C(0x0004) (Const)
	TArray<int>                                        ProfileSettingIds;                                        // 0x0040(0x000C) (NeedCtorLink)
	TArray<struct FOnlineProfileSetting>               ProfileSettings;                                          // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FOnlineProfileSetting>               DefaultSettings;                                          // 0x0058(0x000C) (NeedCtorLink)
	TArray<struct FIdToStringMapping>                  OwnerMappings;                                            // 0x0064(0x000C) (Const, NeedCtorLink)
	TArray<struct FSettingsPropertyPropertyMetaData>   ProfileMappings;                                          // 0x0070(0x000C) (NeedCtorLink)
	TEnumAsByte<EOnlineProfileAsyncState>              AsyncState;                                               // 0x007C(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineProfileSettings");
		return ptr;
	}


	bool IsProfileSettingEnabled(const struct FName& FieldName, int Index);
	bool GetRangedProfileSettingValue(int ProfileId, float* OutValue);
	bool SetRangedProfileSettingValue(int ProfileId, float NewValue);
	bool GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt);
	bool GetProfileSettingMappingType(int ProfileId, TEnumAsByte<EPropertyValueMappingType>* OutType);
	void SetDefaultVersionNumber();
	int GetVersionNumber();
	void AppendVersionToSettings();
	void AppendVersionToReadIds();
	void ScriptSetToDefaults();
	void SetToDefaults();
	bool SetProfileSettingValueFloat(int ProfileSettingId, float Value);
	bool SetProfileSettingValueInt(int ProfileSettingId, int Value);
	bool SetProfileSettingValueId(int ProfileSettingId, int Value);
	bool GetProfileSettingValueFloat(int ProfileSettingId, float* Value);
	bool GetProfileSettingValueInt(int ProfileSettingId, int* Value);
	bool GetProfileSettingValueId(int ProfileSettingId, int* ValueId);
	bool SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue);
	bool SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue);
	bool GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value);
	bool GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values);
	struct FName GetProfileSettingValueName(int ProfileSettingId);
	bool GetProfileSettingValue(int ProfileSettingId, struct FString* Value);
	bool IsProfileSettingIdMapped(int ProfileSettingId);
	struct FString GetProfileSettingColumnHeader(int ProfileSettingId);
	struct FName GetProfileSettingName(int ProfileSettingId);
	bool GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId);
};


// Class Engine.OnlineStats
// 0x0018 (0x0054 - 0x003C)
class UOnlineStats : public UObject
{
public:
	TArray<struct FStringIdToStringMapping>            ViewIdMappings;                                           // 0x003C(0x000C) (Const, NeedCtorLink)
	TArray<struct FIdToStatKeyMapping>                 IdToStatKeyMappings;                                      // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStats");
		return ptr;
	}


	struct FString GetStatKey(int Id);
	struct FName GetViewName(int ViewId);
	bool GetViewId(const struct FName& ViewName, int* ViewId);
};


// Class Engine.OnlineStatsRead
// 0x0060 (0x00B4 - 0x0054)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                                   // 0x0054(0x0004) (Const)
	int                                                SortColumnId;                                             // 0x0058(0x0004) (Const)
	TArray<int>                                        ColumnIds;                                                // 0x005C(0x000C) (Const, NeedCtorLink)
	int                                                TotalRowsInView;                                          // 0x0068(0x0004) (Const)
	TArray<struct FOnlineStatsRow>                     Rows;                                                     // 0x006C(0x000C) (Const, NeedCtorLink)
	TArray<struct FColumnMetaData>                     ColumnMappings;                                           // 0x0078(0x000C) (Const, NeedCtorLink)
	struct FString                                     ViewName;                                                 // 0x0084(0x000C) (Const, NeedCtorLink)
	struct FStatPeriodFlags                            PeriodFlags;                                              // 0x0090(0x0004)
	int                                                PeriodPast;                                               // 0x0094(0x0004)
	TArray<TEnumAsByte<ESettingsDataType>>             ColumnTypes;                                              // 0x0098(0x000C) (NeedCtorLink)
	unsigned long                                      SortAscending : 1;                                        // 0x00A4(0x0004)
	struct FScriptDelegate                             __OnStatsReadComplete__Delegate;                          // 0x00A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsRead");
		return ptr;
	}


	void OnStatsReadComplete();
};


// Class Engine.OnlineStatsWrite
// 0x0044 (0x0098 - 0x0054)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray<struct FStringIdToStringMapping>            StatMappings;                                             // 0x0054(0x000C) (Const, NeedCtorLink)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0060(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ViewIds;                                                  // 0x006C(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ArbitratedViewIds;                                        // 0x0078(0x000C) (Const, NeedCtorLink)
	int                                                RatingId;                                                 // 0x0084(0x0004) (Const)
	struct FStatPeriodFlags                            PeriodFlags;                                              // 0x0088(0x0004)
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                         // 0x008C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsWrite");
		return ptr;
	}


	void DecrementIntStat(int StatId, int DecBy);
	void DecrementFloatStat(int StatId, float DecBy);
	void IncrementIntStat(int StatId, int IncBy);
	void IncrementFloatStat(int StatId, float IncBy);
	void SetIntStat(int StatId, int Value);
	void SetFloatStat(int StatId, float Value);
	struct FName GetStatName(int StatId);
	bool GetStatId(const struct FName& StatName, int* StatId);
	void OnStatsWriteComplete();
};


// Class Engine.PackageMapLevel
// 0x0004 (0x00C4 - 0x00C0)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C0(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapLevel");
		return ptr;
	}

};


// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapSeekFree");
		return ptr;
	}

};


// Class Engine.PathBlockingVolume
// 0x0000 (0x01FC - 0x01FC)
class APathBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathBlockingVolume");
		return ptr;
	}

};


// Class Engine.Pawn
// 0x0204 (0x03C4 - 0x01C0)
class APawn : public AActor
{
public:
	float                                              MaxStepHeight;                                            // 0x01C0(0x0004) (Const)
	float                                              MaxJumpHeight;                                            // 0x01C4(0x0004) (Const)
	float                                              WalkableFloorZ;                                           // 0x01C8(0x0004)
	class AController*                                 Controller;                                               // 0x01CC(0x0004) (Net)
	class APawn*                                       NextPawn;                                                 // 0x01D0(0x0004) (Const)
	float                                              NetRelevancyTime;                                         // 0x01D4(0x0004)
	class APlayerController*                           LastRealViewer;                                           // 0x01D8(0x0004)
	class AActor*                                      LastViewer;                                               // 0x01DC(0x0004)
	unsigned long                                      bUpAndOut : 1;                                            // 0x01E0(0x0004)
	unsigned long                                      bIsWalking : 1;                                           // 0x01E0(0x0004) (Net)
	unsigned long                                      bWantsToCrouch : 1;                                       // 0x01E0(0x0004)
	unsigned long                                      bIsCrouched : 1;                                          // 0x01E0(0x0004) (Const, Net)
	unsigned long                                      bTryToUncrouch : 1;                                       // 0x01E0(0x0004) (Const)
	unsigned long                                      bCanCrouch : 1;                                           // 0x01E0(0x0004) (Edit)
	unsigned long                                      bCrawler : 1;                                             // 0x01E0(0x0004)
	unsigned long                                      bReducedSpeed : 1;                                        // 0x01E0(0x0004) (Const)
	unsigned long                                      bJumpCapable : 1;                                         // 0x01E0(0x0004)
	unsigned long                                      bCanJump : 1;                                             // 0x01E0(0x0004)
	unsigned long                                      bCanWalk : 1;                                             // 0x01E0(0x0004)
	unsigned long                                      bCanSwim : 1;                                             // 0x01E0(0x0004)
	unsigned long                                      bCanFly : 1;                                              // 0x01E0(0x0004)
	unsigned long                                      bCanClimbLadders : 1;                                     // 0x01E0(0x0004)
	unsigned long                                      bCanStrafe : 1;                                           // 0x01E0(0x0004)
	unsigned long                                      bAvoidLedges : 1;                                         // 0x01E0(0x0004)
	unsigned long                                      bStopAtLedges : 1;                                        // 0x01E0(0x0004)
	unsigned long                                      bSimulateGravity : 1;                                     // 0x01E0(0x0004) (Const, Net)
	unsigned long                                      bIgnoreForces : 1;                                        // 0x01E0(0x0004)
	unsigned long                                      bCanWalkOffLedges : 1;                                    // 0x01E0(0x0004)
	unsigned long                                      bCanBeBaseForPawns : 1;                                   // 0x01E0(0x0004)
	unsigned long                                      bSimGravityDisabled : 1;                                  // 0x01E0(0x0004) (Const)
	unsigned long                                      bDirectHitWall : 1;                                       // 0x01E0(0x0004)
	unsigned long                                      bPushesRigidBodies : 1;                                   // 0x01E0(0x0004) (Const)
	unsigned long                                      bForceFloorCheck : 1;                                     // 0x01E0(0x0004)
	unsigned long                                      bForceKeepAnchor : 1;                                     // 0x01E0(0x0004)
	unsigned long                                      bCanMantle : 1;                                           // 0x01E0(0x0004) (Config)
	unsigned long                                      bCanClimbCeilings : 1;                                    // 0x01E0(0x0004)
	unsigned long                                      bCanSwatTurn : 1;                                         // 0x01E0(0x0004) (Config)
	unsigned long                                      bCanLeap : 1;                                             // 0x01E0(0x0004) (Config)
	unsigned long                                      bCanCoverSlip : 1;                                        // 0x01E0(0x0004) (Config)
	unsigned long                                      bDisplayPathErrors : 1;                                   // 0x01E0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bIsFemale : 1;                                            // 0x01E4(0x0004)
	unsigned long                                      bCanPickupInventory : 1;                                  // 0x01E4(0x0004)
	unsigned long                                      bAmbientCreature : 1;                                     // 0x01E4(0x0004)
	unsigned long                                      bLOSHearing : 1;                                          // 0x01E4(0x0004) (Edit)
	unsigned long                                      bMuffledHearing : 1;                                      // 0x01E4(0x0004) (Edit)
	unsigned long                                      bDontPossess : 1;                                         // 0x01E4(0x0004) (Edit)
	unsigned long                                      bAutoFire : 1;                                            // 0x01E4(0x0004)
	unsigned long                                      bRollToDesired : 1;                                       // 0x01E4(0x0004)
	unsigned long                                      bStationary : 1;                                          // 0x01E4(0x0004)
	unsigned long                                      bCachedRelevant : 1;                                      // 0x01E4(0x0004)
	unsigned long                                      bSpecialHUD : 1;                                          // 0x01E4(0x0004)
	unsigned long                                      bNoWeaponFiring : 1;                                      // 0x01E4(0x0004)
	unsigned long                                      bCanUse : 1;                                              // 0x01E4(0x0004)
	unsigned long                                      bModifyReachSpecCost : 1;                                 // 0x01E4(0x0004)
	unsigned long                                      bPathfindsAsVehicle : 1;                                  // 0x01E4(0x0004)
	unsigned long                                      bRunPhysicsWithNoController : 1;                          // 0x01E4(0x0004)
	unsigned long                                      bForceMaxAccel : 1;                                       // 0x01E4(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x01E4(0x0004)
	unsigned long                                      bForceRegularVelocity : 1;                                // 0x01E4(0x0004)
	unsigned long                                      bPlayedDeath : 1;                                         // 0x01E4(0x0004)
	float                                              UncrouchTime;                                             // 0x01E8(0x0004) (Const)
	float                                              CrouchHeight;                                             // 0x01EC(0x0004)
	float                                              CrouchRadius;                                             // 0x01F0(0x0004)
	int                                                FullHeight;                                               // 0x01F4(0x0004) (Const)
	float                                              NonPreferredVehiclePathMultiplier;                        // 0x01F8(0x0004)
	TEnumAsByte<EPathSearchType>                       PathSearchType;                                           // 0x01FC(0x0001)
	unsigned char                                      RemoteViewPitch;                                          // 0x01FD(0x0001) (Const, Net)
	unsigned char                                      FlashCount;                                               // 0x01FE(0x0001) (Net)
	unsigned char                                      FiringMode;                                               // 0x01FF(0x0001) (Net)
	class UPathConstraint*                             PathConstraintList;                                       // 0x0200(0x0004)
	class UPathGoalEvaluator*                          PathGoalList;                                             // 0x0204(0x0004)
	float                                              DesiredSpeed;                                             // 0x0208(0x0004)
	float                                              MaxDesiredSpeed;                                          // 0x020C(0x0004)
	float                                              HearingThreshold;                                         // 0x0210(0x0004) (Edit)
	float                                              Alertness;                                                // 0x0214(0x0004) (Edit)
	float                                              SightRadius;                                              // 0x0218(0x0004) (Edit)
	float                                              PeripheralVision;                                         // 0x021C(0x0004) (Edit)
	float                                              AvgPhysicsTime;                                           // 0x0220(0x0004) (Const)
	float                                              Mass;                                                     // 0x0224(0x0004)
	float                                              Buoyancy;                                                 // 0x0228(0x0004)
	float                                              MeleeRange;                                               // 0x022C(0x0004)
	class ANavigationPoint*                            Anchor;                                                   // 0x0230(0x0004) (Const)
	class ANavigationPoint*                            LastAnchor;                                               // 0x0234(0x0004) (Const)
	float                                              FindAnchorFailedTime;                                     // 0x0238(0x0004)
	float                                              LastValidAnchorTime;                                      // 0x023C(0x0004)
	float                                              DestinationOffset;                                        // 0x0240(0x0004)
	float                                              NextPathRadius;                                           // 0x0244(0x0004)
	struct FVector                                     SerpentineDir;                                            // 0x0248(0x000C)
	float                                              SerpentineDist;                                           // 0x0254(0x0004)
	float                                              SerpentineTime;                                           // 0x0258(0x0004)
	float                                              SpawnTime;                                                // 0x025C(0x0004)
	int                                                MaxPitchLimit;                                            // 0x0260(0x0004)
	float                                              GroundSpeed;                                              // 0x0264(0x0004) (Net)
	float                                              WaterSpeed;                                               // 0x0268(0x0004) (Net)
	float                                              AirSpeed;                                                 // 0x026C(0x0004) (Net)
	float                                              LadderSpeed;                                              // 0x0270(0x0004)
	float                                              AccelRate;                                                // 0x0274(0x0004) (Net)
	float                                              JumpZ;                                                    // 0x0278(0x0004) (Net)
	float                                              OutofWaterZ;                                              // 0x027C(0x0004)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0280(0x0004)
	float                                              AirControl;                                               // 0x0284(0x0004) (Net)
	float                                              WalkingPct;                                               // 0x0288(0x0004)
	float                                              CrouchedPct;                                              // 0x028C(0x0004)
	float                                              MaxFallSpeed;                                             // 0x0290(0x0004)
	float                                              AIMaxFallSpeedFactor;                                     // 0x0294(0x0004)
	float                                              BaseEyeHeight;                                            // 0x0298(0x0004) (Edit)
	float                                              EyeHeight;                                                // 0x029C(0x0004) (Edit)
	struct FVector                                     Floor;                                                    // 0x02A0(0x000C)
	float                                              SplashTime;                                               // 0x02AC(0x0004)
	float                                              OldZ;                                                     // 0x02B0(0x0004)
	class APhysicsVolume*                              HeadVolume;                                               // 0x02B4(0x0004) (Transient)
	int                                                Health;                                                   // 0x02B8(0x0004) (Edit, Net)
	int                                                HealthMax;                                                // 0x02BC(0x0004) (Edit)
	float                                              BreathTime;                                               // 0x02C0(0x0004)
	float                                              UnderWaterTime;                                           // 0x02C4(0x0004)
	float                                              LastPainTime;                                             // 0x02C8(0x0004)
	struct FVector                                     RMVelocity;                                               // 0x02CC(0x000C)
	class USceneCaptureCharacterComponent*             SceneCapture;                                             // 0x02D8(0x0004) (ExportObject, Component, EditInline)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x02DC(0x0004) (Const, ExportObject, Component, EditInline)
	struct FVector                                     noise1spot;                                               // 0x02E0(0x000C) (Const)
	float                                              noise1time;                                               // 0x02EC(0x0004) (Const)
	class APawn*                                       noise1other;                                              // 0x02F0(0x0004) (Const)
	float                                              noise1loudness;                                           // 0x02F4(0x0004) (Const)
	struct FVector                                     noise2spot;                                               // 0x02F8(0x000C) (Const)
	float                                              noise2time;                                               // 0x0304(0x0004) (Const)
	class APawn*                                       noise2other;                                              // 0x0308(0x0004) (Const)
	float                                              noise2loudness;                                           // 0x030C(0x0004) (Const)
	float                                              SoundDampening;                                           // 0x0310(0x0004)
	float                                              DamageScaling;                                            // 0x0314(0x0004)
	struct FString                                     MenuName;                                                 // 0x0318(0x000C) (Const, Localized, NeedCtorLink)
	class UClass*                                      ControllerClass;                                          // 0x0324(0x0004)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x0328(0x0004) (Net)
	class ALadderVolume*                               OnLadder;                                                 // 0x032C(0x0004)
	struct FName                                       LandMovementState;                                        // 0x0330(0x0008)
	struct FName                                       WaterMovementState;                                       // 0x0338(0x0008)
	class APlayerStart*                                LastStartSpot;                                            // 0x0340(0x0004)
	float                                              LastStartTime;                                            // 0x0344(0x0004)
	struct FVector                                     TakeHitLocation;                                          // 0x0348(0x000C) (Net)
	class UClass*                                      HitDamageType;                                            // 0x0354(0x0004) (Net)
	struct FVector                                     TearOffMomentum;                                          // 0x0358(0x000C) (Net)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0364(0x0004) (Edit, ExportObject, Component, EditInline)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0368(0x0004) (ExportObject, Component, EditInline)
	float                                              RBPushRadius;                                             // 0x036C(0x0004) (Edit)
	float                                              RBPushStrength;                                           // 0x0370(0x0004) (Edit)
	class AVehicle*                                    DrivenVehicle;                                            // 0x0374(0x0004) (Net)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x0378(0x0004)
	float                                              VehicleCheckRadius;                                       // 0x037C(0x0004) (Edit)
	class AController*                                 LastHitBy;                                                // 0x0380(0x0004)
	float                                              ViewPitchMin;                                             // 0x0384(0x0004) (Edit)
	float                                              ViewPitchMax;                                             // 0x0388(0x0004) (Edit)
	int                                                AllowedYawError;                                          // 0x038C(0x0004)
	class UClass*                                      InventoryManagerClass;                                    // 0x0390(0x0004)
	class AInventoryManager*                           InvManager;                                               // 0x0394(0x0004) (Net)
	class AWeapon*                                     Weapon;                                                   // 0x0398(0x0004) (Edit)
	struct FVector                                     FlashLocation;                                            // 0x039C(0x000C) (Net)
	struct FVector                                     LastFiringFlashLocation;                                  // 0x03A8(0x000C)
	int                                                ShotCount;                                                // 0x03B4(0x0004)
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                             // 0x03B8(0x0004) (ExportObject, Component, EditInline)
	struct FPointer                                    PhysicsPushBody;                                          // 0x03BC(0x0004) (Const, Native)
	int                                                FailedLandingCount;                                       // 0x03C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	float GetWalkSpeed();
	float GetRunSpeed();
	void ClearPathStep();
	void DrawPathStep(class UCanvas* C);
	void IncrementPathChild(int Cnt, class UCanvas* C);
	void IncrementPathStep(int Cnt, class UCanvas* C);
	void AddGoalEvaluator(class UPathGoalEvaluator* Evaluator);
	void AddPathConstraint(class UPathConstraint* Constraint);
	void ClearConstraints();
	void SoakPause();
	void BecomeViewTarget(class APlayerController* PC);
	void AdjustCameraScale(bool bMoveCameraIn);
	void MessagePlayer(const struct FString& msg);
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float CullDistance);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	bool InCombat();
	bool PoweredUp();
	float GetDamageScaling();
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void SpawnedByKismet();
	bool IsStationary();
	struct FVector GetCollisionExtent();
	float GetCollisionHeight();
	float GetCollisionRadius();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void SetActiveWeapon(class AWeapon* NewWeapon);
	void TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity, class UClass* DamageType);
	void ThrowActiveWeapon(class UClass* DamageType);
	void DrawHUD(class AHUD* H);
	class AInventory* FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass);
	class AInventory* CreateInventory(class UClass* NewInvClass, bool bDoNotActivate);
	void AddDefaultInventory();
	void StopDriving(class AVehicle* V);
	void StartDriving(class AVehicle* V);
	bool CanThrowWeapon();
	void Suicide();
	class AVehicle* GetVehicleBase();
	void PlayLanded(float ImpactVel);
	bool CannotJumpNow();
	void PlayFootStepSound(int FootDown);
	void TornOff();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void TurnOff();
	void PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo);
	void PlayDyingSound();
	bool DoJump(bool bUpdating);
	bool CheckWaterJump(struct FVector* WallNormal);
	void TakeDrowningDamage();
	void BreathTimer();
	bool IsInPain();
	bool TouchingWaterVolume();
	void HeadVolumeChange(class APhysicsVolume* newHeadVolume);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Falling();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool IsSameTeam(class APawn* Other);
	class ATeamInfo* GetTeam();
	unsigned char GetTeamNum();
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	bool TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones);
	void PruneDamagedBoneList(TArray<struct FName>* Bones);
	bool HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* Momentum);
	void SetMovementPhysics();
	void Gasp();
	void OnGiveInventory(class USeqAct_GiveInventory* inAction);
	void OnAssignController(class USeqAct_AssignController* inAction);
	void SpawnDefaultController();
	void PostBeginPlay();
	void PreBeginPlay();
	void SetWeapon(class AWeapon* W);
	void Destroyed();
	void DetachFromController(bool bDestroyController);
	void CrushedBy(class APawn* OtherPawn);
	bool CanBeBaseForPawn(class APawn* aPawn);
	void BaseChange();
	void StuckOnPawn(class APawn* OtherPawn);
	void JumpOffPawn();
	void gibbedBy(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	void ClientSetRotation(const struct FRotator& NewRotation);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ClientRestart();
	void Restart();
	void TakeFallingDamage();
	void KilledBy(class APawn* EventInstigator);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void RestartPlayer();
	void StartCrouch(float HeightAdjust);
	void EndCrouch(float HeightAdjust);
	void ShouldCrouch(bool bCrouch);
	void UnCrouch();
	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void ModifyVelocity(float DeltaTime, const struct FVector& OldVelocity);
	void JumpOutOfWater(const struct FVector& jumpDir);
	void FinishedInterpolation();
	void ClientMessage(const struct FString& S, const struct FName& Type);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void HandlePickup(class AInventory* Inv);
	float AdjustedStrength();
	bool LineOfSightTo(class AActor* Other);
	void SetMoveTarget(class AActor* NewTarget);
	class AActor* GetMoveTarget();
	bool NearMoveTarget();
	bool AffectedByHitEffects();
	bool InGodMode();
	bool PawnCalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void SetViewRotation(const struct FRotator& NewRotation);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	bool InFreeCam();
	struct FRotator GetBaseAimRotation();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	struct FVector GetPawnViewLocation();
	struct FRotator GetViewRotation();
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	bool IsFirstPerson();
	bool WasPlayerPawn();
	bool IsPlayerPawn();
	bool IsLocallyControlled();
	bool IsHumanControlled();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ClimbLadder(class ALadderVolume* L);
	void EndClimbLadder(class ALadderVolume* OldLadder);
	bool CanSplash();
	bool GetIsWalkingFlagSet();
	void SetWalking(bool bNewIsWalking);
	float RangedAttackTime();
	bool RecommendLongRangedAttack();
	bool CanGrabLadder();
	void DropToGround();
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void UnPossessed();
	void UpdateControllerOnPossess(bool bVehicleTransition);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void NotifyTeamChanged();
	void PlayTeleportEffect(bool bOut, bool bSound);
	struct FString GetHumanReadableName();
	bool NeedToTurn(const struct FVector& targ);
	bool IsFiring();
	bool HasRangedAttack();
	bool FireOnRelease();
	bool TooCloseToAttack(class AActor* Other);
	bool CanAttack(class AActor* Other);
	unsigned char ChooseFireMode();
	bool BotFire(bool bFinished);
	void WeaponStoppedFiring(bool bViaReplication);
	void WeaponFired(bool bViaReplication, const struct FVector& HitLocation);
	void FlashLocationUpdated(bool bViaReplication);
	void FlashCountUpdated(bool bViaReplication);
	void ClearFlashLocation(class AWeapon* Who);
	void SetFlashLocation(class AWeapon* Who, unsigned char FireModeNum, const struct FVector& NewLoc);
	void ClearFlashCount(class AWeapon* Who);
	void IncrementFlashCount(class AWeapon* Who, unsigned char FireModeNum);
	void FiringModeUpdated(bool bViaReplication);
	void SetFiringMode(unsigned char FiringModeNum);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	class UTextureRenderTarget2D* CreateHemiTexture();
	bool StopFiring();
	void Reset();
	void PlayerChangedTeam();
	void SetBaseEyeheight();
	bool SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next);
	bool TermRagdoll();
	bool InitRagdoll();
	bool IsValidEnemy();
	int SpecialCostForPath(class UReachSpec* Path);
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
	void SetPushesRigidBodies(bool NewPush);
	void ForceCrouch();
	bool ReachedPoint(const struct FVector& Point, class AActor* NewAnchor);
	bool ReachedDestination(class AActor* Goal);
	class ANavigationPoint* GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist);
	void SetAnchor(class ANavigationPoint* NewAnchor);
	void SetRemoteViewPitch(int NewRemoteViewPitch);
	bool IsInvisible();
	bool IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy);
	bool IsValidTargetFor(class AController* C);
	bool SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, struct FVector* JumpVelocity);
	bool ValidAnchor();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.PickupFactory
// 0x001C (0x0330 - 0x0314)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                                 // 0x0314(0x0004)
	unsigned long                                      bPickupHidden : 1;                                        // 0x0314(0x0004) (Net)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x0314(0x0004)
	unsigned long                                      bIsSuperItem : 1;                                         // 0x0314(0x0004)
	class UClass*                                      InventoryType;                                            // 0x0318(0x0004) (Net)
	float                                              RespawnEffectTime;                                        // 0x031C(0x0004)
	float                                              MaxDesireability;                                         // 0x0320(0x0004)
	class UPrimitiveComponent*                         PickupMesh;                                               // 0x0324(0x0004) (ExportObject, Transient, Component, EditInline)
	class APickupFactory*                              ReplacementFactory;                                       // 0x0328(0x0004)
	class APickupFactory*                              OriginalFactory;                                          // 0x032C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PickupFactory");
		return ptr;
	}


	bool ShouldRespawn();
	void Destroyed();
	void SetPickupVisible();
	void SetPickupHidden();
	void RespawnEffect();
	float GetRespawnTime();
	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	bool ReadyToPickup(float MaxWait);
	void SpawnCopyFor(class APawn* Recipient);
	float DetourWeight(class APawn* Other, float PathWeight);
	void StartSleeping();
	void SetRespawn();
	bool CheckForErrors();
	void Reset();
	void STATIC_StaticPrecache(class AWorldInfo* W);
	void SetPickupMesh();
	void ShutDown();
	void SetInitialState();
	void InitializePickup();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.PlayerReplicationInfo
// 0x0098 (0x0258 - 0x01C0)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                                    // 0x01C0(0x0004) (Net, DataBinding)
	float                                              Deaths;                                                   // 0x01C4(0x0004) (Net, DataBinding)
	unsigned char                                      Ping;                                                     // 0x01C8(0x0001) (Net)
	unsigned char                                      PacketLoss;                                               // 0x01C9(0x0001) (Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01CA(0x0002) MISSED OFFSET
	class AActor*                                      PlayerLocationHint;                                       // 0x01CC(0x0004) (Net)
	int                                                NumLives;                                                 // 0x01D0(0x0004) (DataBinding)
	struct FString                                     PlayerName;                                               // 0x01D4(0x000C) (Net, NeedCtorLink, DataBinding)
	struct FString                                     PlayerAlias;                                              // 0x01E0(0x000C) (Net, NeedCtorLink, DataBinding)
	struct FString                                     OldName;                                                  // 0x01EC(0x000C) (NeedCtorLink)
	int                                                PlayerId;                                                 // 0x01F8(0x0004) (Net)
	class ATeamInfo*                                   Team;                                                     // 0x01FC(0x0004) (Net)
	int                                                TeamId;                                                   // 0x0200(0x0004) (Net)
	unsigned long                                      bAdmin : 1;                                               // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bIsFemale : 1;                                            // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bIsSpectator : 1;                                         // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bOnlySpectator : 1;                                       // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bWaitingPlayer : 1;                                       // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bReadyToPlay : 1;                                         // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bOutOfLives : 1;                                          // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bBot : 1;                                                 // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bHasFlag : 1;                                             // 0x0204(0x0004) (Net, DataBinding)
	unsigned long                                      bHasBeenWelcomed : 1;                                     // 0x0204(0x0004) (DataBinding)
	unsigned long                                      bIsInactive : 1;                                          // 0x0204(0x0004) (Net)
	unsigned long                                      bFromPreviousLevel : 1;                                   // 0x0204(0x0004)
	unsigned long                                      bControllerVibrationAllowed : 1;                          // 0x0204(0x0004) (Net)
	int                                                StartTime;                                                // 0x0208(0x0004) (Net)
	struct FString                                     StringDead;                                               // 0x020C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StringSpectating;                                         // 0x0218(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StringUnknown;                                            // 0x0224(0x000C) (Const, Localized, NeedCtorLink)
	int                                                Kills;                                                    // 0x0230(0x0004) (DataBinding)
	class UClass*                                      GameMessageClass;                                         // 0x0234(0x0004)
	float                                              ExactPing;                                                // 0x0238(0x0004)
	struct FString                                     SavedNetworkAddress;                                      // 0x023C(0x000C) (NeedCtorLink)
	struct FUniqueNetId                                UniqueId;                                                 // 0x0248(0x0008) (Net)
	struct FAutomatedTestingDatum                      AutomatedTestingData;                                     // 0x0250(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		return ptr;
	}


	void SetPlayerAlias(const struct FString& NewAlias);
	bool IsInvalidName();
	unsigned char GetTeamNum();
	bool IsLocalPlayerPRI();
	void BindPlayerOwnerDataProvider();
	void SeamlessTravelTo(class APlayerReplicationInfo* NewPRI);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void OverrideWith(class APlayerReplicationInfo* PRI);
	class APlayerReplicationInfo* Duplicate();
	void SetWaitingPlayer(bool B);
	void SetPlayerName(const struct FString& S);
	void Timer();
	void DisplayDebug(class AHUD* HUD, float* YL, float* YPos);
	void UpdatePlayerLocation();
	struct FString GetLocationName();
	struct FString GetHumanReadableName();
	void Reset();
	void Destroyed();
	bool ShouldBroadCastWelcomeMessage();
	void UpdatePing(float TimeStamp);
	void ReplicatedEvent(const struct FName& VarName);
	void ClientInitialize(class AController* C);
	void PostBeginPlay();
	struct FString GetPlayerAlias();
	bool AreUniqueNetIdsEqual(class APlayerReplicationInfo* OtherPRI);
};


// Class Engine.PlayerStart
// 0x0008 (0x031C - 0x0314)
class APlayerStart : public ANavigationPoint
{
public:
	class URequestedTextureResources*                  PlayerStartTextureResources;                              // 0x0314(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x0318(0x0004) (Edit)
	unsigned long                                      bPrimaryStart : 1;                                        // 0x0318(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.PointLight
// 0x0000 (0x01D4 - 0x01D4)
class APointLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}

};


// Class Engine.PointLightComponent
// 0x007C (0x0200 - 0x0184)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                                   // 0x0184(0x0004) (Edit)
	float                                              PointLightRadius;                                         // 0x0188(0x0004) (Edit)
	unsigned long                                      bUseBakerCutOffRadius : 1;                                // 0x018C(0x0004) (Edit)
	float                                              BakerCutOffRadius;                                        // 0x0190(0x0004) (Edit)
	int                                                Photons;                                                  // 0x0194(0x0004) (Edit)
	int                                                PhotonIntensity;                                          // 0x0198(0x0004) (Edit)
	float                                              Radius;                                                   // 0x019C(0x0004) (Edit)
	float                                              FalloffExponent;                                          // 0x01A0(0x0004) (Edit)
	float                                              ShadowFalloffExponent;                                    // 0x01A4(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01A8(0x0008) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                                      // 0x01B0(0x0040) (Const)
	struct FVector                                     Translation;                                              // 0x01F0(0x000C) (Edit, Const)
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                                       // 0x01FC(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}


	void SetTranslation(const struct FVector& NewTranslation);
};


// Class Engine.PointLightMovable
// 0x0000 (0x01D4 - 0x01D4)
class APointLightMovable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightMovable");
		return ptr;
	}

};


// Class Engine.PointLightToggleable
// 0x0000 (0x01D4 - 0x01D4)
class APointLightToggleable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightToggleable");
		return ptr;
	}

};


// Class Engine.PolyMarker
// 0x0000 (0x01C0 - 0x01C0)
class APolyMarker : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PolyMarker");
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x004C - 0x003C)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x003C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.PortalMarker
// 0x0004 (0x0318 - 0x0314)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                                 // 0x0314(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalMarker");
		return ptr;
	}


	bool CanTeleport(class AActor* A);
};


// Class Engine.SceneCaptureActor
// 0x0004 (0x01C4 - 0x01C0)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                             // 0x01C0(0x0004) (Edit, Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureReflectActor
// 0x000C (0x01D0 - 0x01C4)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x01C4(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                                      // 0x01C8(0x0004) (Transient)
	class AVolume*                                     ReflectionVolume;                                         // 0x01CC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectActor");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.SceneCapturePortalActor
// 0x0000 (0x01D0 - 0x01D0)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalActor");
		return ptr;
	}

};


// Class Engine.PortalTeleporter
// 0x0014 (0x01E4 - 0x01D0)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                             // 0x01D0(0x0004) (Edit)
	int                                                TextureResolutionX;                                       // 0x01D4(0x0004) (Edit)
	int                                                TextureResolutionY;                                       // 0x01D8(0x0004) (Edit)
	class APortalMarker*                               MyMarker;                                                 // 0x01DC(0x0004)
	unsigned long                                      bMovablePortal : 1;                                       // 0x01E0(0x0004) (Edit)
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                              // 0x01E0(0x0004)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalTeleporter");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	class UTextureRenderTarget2D* CreatePortalTexture();
	struct FVector TransformHitLocation(const struct FVector& HitLocation);
	struct FVector TransformVectorDir(const struct FVector& V);
	bool TransformActor(class AActor* A);
};


// Class Engine.PortalVolume
// 0x000C (0x0208 - 0x01FC)
class APortalVolume : public AVolume
{
public:
	TArray<class APortalTeleporter*>                   Portals;                                                  // 0x01FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalVolume");
		return ptr;
	}

};


// Class Engine.PostProcessChain
// 0x000C (0x0048 - 0x003C)
class UPostProcessChain : public UObject
{
public:
	TArray<class UPostProcessEffect*>                  Effects;                                                  // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessChain");
		return ptr;
	}


	class UPostProcessEffect* FindPostProcessEffect(const struct FName& EffectName);
};


// Class Engine.PotentialClimbWatcher
// 0x0000 (0x01C0 - 0x01C0)
class APotentialClimbWatcher : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PotentialClimbWatcher");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class Engine.Projectile
// 0x003C (0x01FC - 0x01C0)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                                    // 0x01C0(0x0004)
	float                                              MaxSpeed;                                                 // 0x01C4(0x0004)
	unsigned long                                      bSwitchToZeroCollision : 1;                               // 0x01C8(0x0004)
	unsigned long                                      bBlockedByInstigator : 1;                                 // 0x01C8(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x01C8(0x0004)
	unsigned long                                      bRotationFollowsVelocity : 1;                             // 0x01C8(0x0004)
	unsigned long                                      bNotBlockedByShield : 1;                                  // 0x01C8(0x0004)
	class AActor*                                      ZeroCollider;                                             // 0x01CC(0x0004)
	class UPrimitiveComponent*                         ZeroColliderComponent;                                    // 0x01D0(0x0004) (ExportObject, Component, EditInline)
	float                                              Damage;                                                   // 0x01D4(0x0004)
	float                                              DamageRadius;                                             // 0x01D8(0x0004)
	float                                              MomentumTransfer;                                         // 0x01DC(0x0004)
	class UClass*                                      MyDamageType;                                             // 0x01E0(0x0004)
	class USoundCue*                                   SpawnSound;                                               // 0x01E4(0x0004)
	class USoundCue*                                   ImpactSound;                                              // 0x01E8(0x0004)
	class AController*                                 InstigatorController;                                     // 0x01EC(0x0004)
	class AActor*                                      ImpactedActor;                                            // 0x01F0(0x0004)
	float                                              NetCullDistanceSquared;                                   // 0x01F4(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01F8(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Projectile");
		return ptr;
	}


	float STATIC_GetRange();
	float STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy);
	float GetTimeToLocation(const struct FVector& TargetLoc);
	void FellOutOfWorld(class UClass* dmgType);
	bool IsStationary();
	void RandSpin(float spinRate);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void EncroachedBy(class AActor* Other);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
	void Reset();
	bool CanSplash();
	unsigned char GetTeamNum();
	void Init(const struct FVector& Direction);
	void PostBeginPlay();
	void PreBeginPlay();
	bool EncroachingOn(class AActor* Other);
};


// Class Engine.ProscribedReachSpec
// 0x0000 (0x0098 - 0x0098)
class UProscribedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProscribedReachSpec");
		return ptr;
	}

};


// Class Engine.RequestedTextureResources
// 0x0048 (0x0084 - 0x003C)
class URequestedTextureResources : public UObject
{
public:
	struct FString                                     Filename;                                                 // 0x003C(0x000C) (Transient, NeedCtorLink)
	struct FMap_Mirror                                 TextureResourceInformation;                               // 0x0048(0x003C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RequestedTextureResources");
		return ptr;
	}

};


// Class Engine.ReverbVolume
// 0x0014 (0x0210 - 0x01FC)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x01FC(0x0004) (Edit)
	struct FReverbSettings                             Settings;                                                 // 0x0200(0x000C) (Edit)
	class AReverbVolume*                               NextLowerPriorityVolume;                                  // 0x020C(0x0004) (Const, Transient, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbVolume");
		return ptr;
	}

};


// Class Engine.Route
// 0x0010 (0x01D0 - 0x01C0)
class ARoute : public AInfo
{
public:
	TEnumAsByte<ERouteType>                            RouteType;                                                // 0x01C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C1(0x0003) MISSED OFFSET
	TArray<struct FNavReference>                       NavList;                                                  // 0x01C4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Route");
		return ptr;
	}

};


// Class Engine.SavedMove
// 0x009C (0x00D8 - 0x003C)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                                 // 0x003C(0x0004)
	float                                              TimeStamp;                                                // 0x0040(0x0004)
	float                                              Delta;                                                    // 0x0044(0x0004)
	unsigned long                                      bRun : 1;                                                 // 0x0048(0x0004)
	unsigned long                                      bDuck : 1;                                                // 0x0048(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x0048(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x0048(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x0048(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x0048(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickMove;                                          // 0x004C(0x0001)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x004D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	struct FVector                                     StartLocation;                                            // 0x0050(0x000C)
	struct FVector                                     StartRelativeLocation;                                    // 0x005C(0x000C)
	struct FVector                                     StartVelocity;                                            // 0x0068(0x000C)
	struct FVector                                     StartFloor;                                               // 0x0074(0x000C)
	struct FVector                                     SavedLocation;                                            // 0x0080(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x008C(0x000C)
	struct FVector                                     SavedRelativeLocation;                                    // 0x0098(0x000C)
	struct FVector                                     RMVelocity;                                               // 0x00A4(0x000C)
	struct FVector                                     Acceleration;                                             // 0x00B0(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x00BC(0x000C)
	class AActor*                                      StartBase;                                                // 0x00C8(0x0004)
	class AActor*                                      EndBase;                                                  // 0x00CC(0x0004)
	float                                              CustomTimeDilation;                                       // 0x00D0(0x0004)
	float                                              AccelDotThreshold;                                        // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SavedMove");
		return ptr;
	}


	TEnumAsByte<EDoubleClickDir> STATIC_SetFlags(unsigned char Flags, class APlayerController* PC);
	unsigned char CompressedFlags();
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void SetInitialPosition(class APawn* P);
	struct FVector GetStartLocation();
	bool IsImportantMove(const struct FVector& CompareAccel);
	void PostUpdate(class APlayerController* P);
	void Clear();
};


// Class Engine.SaveGameSummary
// 0x0014 (0x0050 - 0x003C)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                                // 0x003C(0x0008)
	struct FString                                     Description;                                              // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SaveGameSummary");
		return ptr;
	}

};


// Class Engine.SceneCapture2DActor
// 0x0004 (0x01C8 - 0x01C4)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x01C4(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureComponent
// 0x002B (0x0080 - 0x0055)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnableFog : 1;                                           // 0x0058(0x0004) (Edit)
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                           // 0x0058(0x0004)
	unsigned long                                      bNeedsSceneUpdate : 1;                                    // 0x0058(0x0004) (Const, Native, Transient)
	struct FColor                                      ClearColor;                                               // 0x005C(0x0004) (Edit)
	TEnumAsByte<ESceneCaptureViewMode>                 ViewMode;                                                 // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                SceneLOD;                                                 // 0x0064(0x0004) (Edit)
	float                                              FrameRate;                                                // 0x0068(0x0004) (Edit, Const)
	class UPostProcessChain*                           PostProcess;                                              // 0x006C(0x0004) (Edit)
	float                                              MaxUpdateDist;                                            // 0x0070(0x0004) (Edit)
	float                                              MaxStreamingUpdateDist;                                   // 0x0074(0x0004) (Edit)
	struct FPointer                                    CaptureInfo;                                              // 0x0078(0x0004) (Const, Native, Transient)
	struct FPointer                                    ViewState;                                                // 0x007C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}


	void SetFrameRate(float NewFrameRate);
};


// Class Engine.SceneCapture2DComponent
// 0x00A0 (0x0120 - 0x0080)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0080(0x0004) (Edit, Const)
	float                                              FieldOfView;                                              // 0x0084(0x0004) (Edit, Const)
	float                                              NearPlane;                                                // 0x0088(0x0004) (Edit, Const)
	float                                              FarPlane;                                                 // 0x008C(0x0004) (Edit, Const)
	unsigned long                                      bUpdateMatrices : 1;                                      // 0x0090(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0094(0x000C) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                               // 0x00A0(0x0040) (Const, Transient)
	struct FMatrix                                     ProjMatrix;                                               // 0x00E0(0x0040) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DComponent");
		return ptr;
	}


	void SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane);
};


// Class Engine.SceneCaptureCharacterComponent
// 0x00B0 (0x0130 - 0x0080)
class USceneCaptureCharacterComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0080(0x0004) (Edit, Const, Transient)
	class UTextureRenderTarget2D*                      RenderTarget1;                                            // 0x0084(0x0004) (Edit, Const, Transient)
	class UTextureRenderTarget2D*                      RenderTarget2;                                            // 0x0088(0x0004) (Edit, Const, Transient)
	float                                              FieldOfView;                                              // 0x008C(0x0004) (Edit, Const)
	float                                              NearPlane;                                                // 0x0090(0x0004) (Edit, Const)
	float                                              FarPlane;                                                 // 0x0094(0x0004) (Edit, Const)
	unsigned long                                      bUpdateMatrices : 1;                                      // 0x0098(0x0004)
	unsigned long                                      bHasEverCaptured : 1;                                     // 0x0098(0x0004) (Transient)
	float                                              LastRenderTime;                                           // 0x009C(0x0004) (Transient)
	struct FVector                                     LastRenderLocation;                                       // 0x00A0(0x000C) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                               // 0x00B0(0x0040) (Const, Transient)
	struct FMatrix                                     ProjMatrix;                                               // 0x00F0(0x0040) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCharacterComponent");
		return ptr;
	}


	void SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane);
};


// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x01CC - 0x01C4)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x01C4(0x0004) (Const, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                         // 0x01C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureCubeMapComponent
// 0x001C (0x009C - 0x0080)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                            // 0x0080(0x0004) (Edit)
	float                                              NearPlane;                                                // 0x0084(0x0004) (Edit)
	float                                              FarPlane;                                                 // 0x0088(0x0004) (Edit)
	unsigned long                                      bTdSpecialCubeMapLayout : 1;                              // 0x008C(0x0004) (Edit)
	struct FVector                                     WorldLocation;                                            // 0x0090(0x000C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapComponent");
		return ptr;
	}

};


// Class Engine.SceneCapturePortalComponent
// 0x000C (0x008C - 0x0080)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0080(0x0004) (Edit, Const)
	float                                              ScaleFOV;                                                 // 0x0084(0x0004) (Edit, Const)
	class AActor*                                      ViewDestination;                                          // 0x0088(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalComponent");
		return ptr;
	}


	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest);
};


// Class Engine.SceneCaptureReflectComponent
// 0x0010 (0x0090 - 0x0080)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0080(0x0004) (Edit)
	float                                              ScaleFOV;                                                 // 0x0084(0x0004) (Edit)
	float                                              FarCullingDistance;                                       // 0x0088(0x0004) (Edit)
	unsigned long                                      bLiteReflection : 1;                                      // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectComponent");
		return ptr;
	}

};


// Class Engine.Scout
// 0x0028 (0x03EC - 0x03C4)
class AScout : public APawn
{
public:
	TArray<struct FPathSizeInfo>                       PathSizes;                                                // 0x03C4(0x000C) (NeedCtorLink)
	float                                              TestJumpZ;                                                // 0x03D0(0x0004)
	float                                              TestGroundSpeed;                                          // 0x03D4(0x0004)
	float                                              TestMaxFallSpeed;                                         // 0x03D8(0x0004)
	float                                              TestFallSpeed;                                            // 0x03DC(0x0004)
	float                                              MaxLandingVelocity;                                       // 0x03E0(0x0004) (Const)
	int                                                MinNumPlayerStarts;                                       // 0x03E4(0x0004)
	class UClass*                                      DefaultReachSpecClass;                                    // 0x03E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scout");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerCommandlet");
		return ptr;
	}

};


// Class Engine.ShaderCache
// 0x00BC (0x00F8 - 0x003C)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0xBC];                                      // 0x003C(0x00BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShaderCache");
		return ptr;
	}

};


// Class Engine.ShadowMap1D
// 0x0040 (0x007C - 0x003C)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x003C(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap1D");
		return ptr;
	}

};


// Class Engine.ShadowMap2D
// 0x0024 (0x0060 - 0x003C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                                  // 0x003C(0x0004) (Const)
	struct FVector2D                                   CoordinateScale;                                          // 0x0040(0x0008) (Const)
	struct FVector2D                                   CoordinateBias;                                           // 0x0048(0x0008) (Const)
	struct FGuid                                       LightGuid;                                                // 0x0050(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap2D");
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0000 (0x0110 - 0x0110)
class UShadowMapTexture2D : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0230 (0x026C - 0x003C)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                                   // 0x003C(0x001C) (Const, Native)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0058(0x000C) (Edit, Const, Native)
	struct FVector                                     Origin;                                                   // 0x0064(0x000C) (Edit, Const, Native)
	struct FRotator                                    RotOrigin;                                                // 0x0070(0x000C) (Edit, Const, Native)
	TArray<int>                                        RefSkeleton;                                              // 0x007C(0x000C) (Const, Native)
	int                                                SkeletalDepth;                                            // 0x0088(0x0004) (Const, Native)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x008C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                                // 0x00C8(0x000C) (Const, Native)
	TArray<struct FMatrix>                             RefBasesInvMatrix;                                        // 0x00D4(0x000C) (Const, Native)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x00E0(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x00EC(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x00ED(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x00F0(0x000C) (NeedCtorLink)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x00FC(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	TArray<struct FName>                               PerPolyCollisionBones;                                    // 0x0108(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               AddToParentPerPolyCollisionBone;                          // 0x0114(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        PerPolyBoneKDOPs;                                         // 0x0120(0x000C) (Const, Native)
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                             // 0x012C(0x0004) (Edit)
	unsigned long                                      bUseSimpleLineCollision : 1;                              // 0x012C(0x0004) (Edit)
	unsigned long                                      bUseSimpleBoxCollision : 1;                               // 0x012C(0x0004) (Edit)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bUseFullPrecisionUVs : 1;                                 // 0x012C(0x0004) (Edit, Const)
	class UFaceFXAsset*                                FaceFXAsset;                                              // 0x0130(0x0004) (Edit)
	class UPhysicsAsset*                               BoundsPreviewAsset;                                       // 0x0134(0x0004) (Edit)
	int                                                LODBiasPC;                                                // 0x0138(0x0004) (Edit)
	int                                                LODBiasPS3;                                               // 0x013C(0x0004) (Edit)
	int                                                LODBiasXbox360;                                           // 0x0140(0x0004) (Edit)
	TArray<struct FPointer>                            ClothMesh;                                                // 0x0144(0x000C) (Const, Native, Transient)
	TArray<float>                                      ClothMeshScale;                                           // 0x0150(0x000C) (Const, Native, Transient)
	TArray<int>                                        ClothToGraphicsVertMap;                                   // 0x015C(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ClothWeldingMap;                                          // 0x0168(0x000C) (Const, NeedCtorLink)
	int                                                ClothWeldingDomain;                                       // 0x0174(0x0004) (Const)
	TArray<int>                                        ClothWeldedIndices;                                       // 0x0178(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bForceNoWelding : 1;                                      // 0x0184(0x0004) (Edit, Const)
	int                                                NumFreeClothVerts;                                        // 0x0188(0x0004) (Const)
	TArray<int>                                        ClothIndexBuffer;                                         // 0x018C(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               ClothBones;                                               // 0x0198(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bEnableClothBendConstraints : 1;                          // 0x01A4(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothDamping : 1;                                  // 0x01A4(0x0004) (Edit, Const)
	unsigned long                                      bUseClothCOMDamping : 1;                                  // 0x01A4(0x0004) (Edit, Const)
	float                                              ClothStretchStiffness;                                    // 0x01A8(0x0004) (Edit, Const)
	float                                              ClothBendStiffness;                                       // 0x01AC(0x0004) (Edit, Const)
	float                                              ClothDensity;                                             // 0x01B0(0x0004) (Edit, Const)
	float                                              ClothThickness;                                           // 0x01B4(0x0004) (Edit, Const)
	float                                              ClothDamping;                                             // 0x01B8(0x0004) (Edit, Const)
	int                                                ClothIterations;                                          // 0x01BC(0x0004) (Edit, Const)
	float                                              ClothFriction;                                            // 0x01C0(0x0004) (Edit, Const)
	float                                              ClothRelativeGridSpacing;                                 // 0x01C4(0x0004) (Edit, Const)
	float                                              ClothPressure;                                            // 0x01C8(0x0004) (Edit, Const)
	float                                              ClothCollisionResponseCoefficient;                        // 0x01CC(0x0004) (Edit, Const)
	float                                              ClothAttachmentResponseCoefficient;                       // 0x01D0(0x0004) (Edit, Const)
	float                                              ClothAttachmentTearFactor;                                // 0x01D4(0x0004) (Edit, Const)
	float                                              ClothSleepLinearVelocity;                                 // 0x01D8(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;                     // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothSelfCollision : 1;                            // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothPressure : 1;                                 // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothTwoWayCollision : 1;                          // 0x01DC(0x0004) (Edit, Const)
	TArray<struct FClothSpecialBoneInfo>               ClothSpecialBones;                                        // 0x01E0(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bEnableClothLineChecks : 1;                               // 0x01EC(0x0004) (Edit, Const)
	unsigned long                                      bClothMetal : 1;                                          // 0x01EC(0x0004) (Edit, Const)
	float                                              ClothMetalImpulseThreshold;                               // 0x01F0(0x0004) (Edit, Const)
	float                                              ClothMetalPenetrationDepth;                               // 0x01F4(0x0004) (Edit, Const)
	float                                              ClothMetalMaxDeformationDistance;                         // 0x01F8(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothTearing : 1;                                  // 0x01FC(0x0004) (Edit, Const)
	float                                              ClothTearFactor;                                          // 0x0200(0x0004) (Edit, Const)
	int                                                ClothTearReserve;                                         // 0x0204(0x0004) (Edit, Const)
	struct FMap_Mirror                                 ClothTornTriMap;                                          // 0x0208(0x003C) (Const, Native)
	TArray<unsigned long>                              GraphicsIndexIsCloth;                                     // 0x0244(0x000C) (Const, Native)
	int                                                ReleaseResourcesFence;                                    // 0x0250(0x0004) (Const, Native, Transient)
	struct FGuid                                       SkelMeshGUID;                                             // 0x0254(0x0010) (Const)
	int                                                NumUVSets;                                                // 0x0264(0x0004) (Edit, EditConst)
	unsigned long                                      bDeferredProcessing : 1;                                  // 0x0268(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}

};


// Class Engine.SkeletalMeshComponent
// 0x0288 (0x0450 - 0x01C8)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x01C8(0x0004) (Edit)
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                                  // 0x01CC(0x0004) (ExportObject, Component, EditInline)
	struct FMatrix                                     LocalToLegRotatedWorld;                                   // 0x01D0(0x0040)
	unsigned long                                      bUseLegRotationHack1 : 1;                                 // 0x0210(0x0004)
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x0214(0x0004) (Edit, Const)
	class UAnimNode*                                   Animations;                                               // 0x0218(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class UAnimNode*>                           AnimTickArray;                                            // 0x021C(0x000C) (Const, Transient, NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0228(0x0004) (Edit, Const)
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                                     // 0x022C(0x0004) (Const, ExportObject, Transient, NeedCtorLink, EditInline)
	float                                              PhysicsWeight;                                            // 0x0230(0x0004) (Edit)
	float                                              GlobalAnimRateScale;                                      // 0x0234(0x0004) (Edit)
	struct FPointer                                    MeshObject;                                               // 0x0238(0x0004) (Const, Native, Transient)
	struct FColor                                      WireframeColor;                                           // 0x023C(0x0004) (Edit)
	TArray<struct FMatrix>                             SpaceBases;                                               // 0x0240(0x000C) (Const, Native, Transient)
	TArray<struct FBoneAtom>                           LocalAtoms;                                               // 0x024C(0x000C) (Const, Native, Transient)
	TArray<unsigned char>                              RequiredBones;                                            // 0x0258(0x000C) (Const, Native, Transient)
	class USkeletalMeshComponent*                      ParentAnimComponent;                                      // 0x0264(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	TArray<int>                                        ParentBoneMap;                                            // 0x0268(0x000C) (Const, Native, Transient)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0274(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            TemporarySavedAnimSets;                                   // 0x0280(0x000C) (Const, Native, Transient)
	TArray<class UMorphTargetSet*>                     MorphSets;                                                // 0x028C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FActiveMorph>                        ActiveMorphs;                                             // 0x0298(0x000C) (NeedCtorLink)
	TArray<struct FAttachment>                         Attachments;                                              // 0x02A4(0x000C) (Const, Component, DuplicateTransient, NeedCtorLink)
	TArray<unsigned char>                              SkelControlIndex;                                         // 0x02B0(0x000C) (Const, Transient, NeedCtorLink)
	int                                                ForcedLodModel;                                           // 0x02BC(0x0004) (Edit)
	int                                                PredictedLODLevel;                                        // 0x02C0(0x0004)
	int                                                OldPredictedLODLevel;                                     // 0x02C4(0x0004)
	float                                              MaxDistanceFactor;                                        // 0x02C8(0x0004) (Const)
	int                                                bForceWireframe;                                          // 0x02CC(0x0004)
	int                                                bForceRefpose;                                            // 0x02D0(0x0004)
	int                                                bOldForceRefPose;                                         // 0x02D4(0x0004)
	int                                                bNoSkeletonUpdate;                                        // 0x02D8(0x0004)
	int                                                bDisplayBones;                                            // 0x02DC(0x0004)
	int                                                bShowPrePhysBones;                                        // 0x02E0(0x0004)
	int                                                bHideSkin;                                                // 0x02E4(0x0004)
	int                                                bForceRawOffset;                                          // 0x02E8(0x0004)
	int                                                bIgnoreControllers;                                       // 0x02EC(0x0004)
	int                                                bTransformFromAnimParent;                                 // 0x02F0(0x0004)
	int                                                TickTag;                                                  // 0x02F4(0x0004) (Const, Transient)
	int                                                CachedAtomsTag;                                           // 0x02F8(0x0004) (Const, Transient)
	int                                                bUseSingleBodyPhysics;                                    // 0x02FC(0x0004) (Const)
	int                                                bRequiredBonesUpToDate;                                   // 0x0300(0x0004) (Transient)
	float                                              MinDistFactorForKinematicUpdate;                          // 0x0304(0x0004)
	struct FName                                       PhysicsBlendZeroDriftBoneName;                            // 0x0308(0x0008)
	int                                                FramesPhysicsAsleep;                                      // 0x0310(0x0004) (Transient)
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;                      // 0x0314(0x0004)
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                           // 0x0314(0x0004)
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;                    // 0x0314(0x0004)
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;                   // 0x0314(0x0004) (Const)
	unsigned long                                      bForceDiscardRootMotion : 1;                              // 0x0314(0x0004) (Edit)
	unsigned long                                      bRootMotionModeChangeNotify : 1;                          // 0x0314(0x0004)
	unsigned long                                      bRootMotionExtractedNotify : 1;                           // 0x0314(0x0004)
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;               // 0x0314(0x0004) (Edit)
	unsigned long                                      bAnimTreeInitialised : 1;                                 // 0x0314(0x0004) (Const, Transient)
	unsigned long                                      bHasPhysicsAssetInstance : 1;                             // 0x0314(0x0004) (Edit, Const)
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;                   // 0x0314(0x0004) (Edit)
	unsigned long                                      bUpdateJointsFromAnimation : 1;                           // 0x0314(0x0004) (Edit)
	unsigned long                                      bSkelCompFixed : 1;                                       // 0x0314(0x0004) (Const)
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                              // 0x0314(0x0004) (Const)
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                        // 0x0314(0x0004) (Edit)
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                          // 0x0314(0x0004) (Edit)
	unsigned long                                      bPerBoneVolumeEffects : 1;                                // 0x0314(0x0004) (Edit)
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;                    // 0x0314(0x0004) (Edit)
	unsigned long                                      bUseRawData : 1;                                          // 0x0314(0x0004) (Const)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x0314(0x0004)
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;                   // 0x0314(0x0004)
	unsigned long                                      bPauseAnims : 1;                                          // 0x0314(0x0004)
	unsigned long                                      bChartDistanceFactor : 1;                                 // 0x0314(0x0004)
	unsigned long                                      bEnableLineCheckWithBounds : 1;                           // 0x0314(0x0004)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x0318(0x000C)
	unsigned long                                      bEnableClothSimulation : 1;                               // 0x0324(0x0004) (Edit, Const)
	unsigned long                                      bDisableClothCollision : 1;                               // 0x0324(0x0004) (Edit, Const)
	unsigned long                                      bClothFrozen : 1;                                         // 0x0324(0x0004) (Edit, Const)
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;                      // 0x0324(0x0004) (Edit)
	unsigned long                                      bClothBaseVelClamp : 1;                                   // 0x0324(0x0004) (Edit)
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                          // 0x0324(0x0004) (Edit)
	unsigned long                                      bCacheAnimSequenceNodes : 1;                              // 0x0324(0x0004)
	unsigned long                                      bForceMeshObjectUpdates : 1;                              // 0x0324(0x0004)
	struct FVector                                     ClothExternalForce;                                       // 0x0328(0x000C) (Edit, Const)
	struct FVector                                     ClothWind;                                                // 0x0334(0x000C) (Edit)
	struct FVector                                     ClothBaseVelClampRange;                                   // 0x0340(0x000C) (Edit)
	float                                              ClothBlendWeight;                                         // 0x034C(0x0004) (Edit)
	float                                              ClothDynamicBlendWeight;                                  // 0x0350(0x0004)
	float                                              ClothMinBlendDistance;                                    // 0x0354(0x0004) (Edit)
	float                                              ClothMaxBlendDistance;                                    // 0x0358(0x0004) (Edit)
	struct FPointer                                    ClothSim;                                                 // 0x035C(0x0004) (Const, Native, Transient)
	int                                                SceneIndex;                                               // 0x0360(0x0004) (Const, Native, Transient)
	TArray<struct FVector>                             ClothMeshPosData;                                         // 0x0364(0x000C) (Const, NeedCtorLink)
	TArray<struct FVector>                             ClothMeshNormalData;                                      // 0x0370(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ClothMeshIndexData;                                       // 0x037C(0x000C) (Const, NeedCtorLink)
	int                                                NumClothMeshVerts;                                        // 0x0388(0x0004)
	int                                                NumClothMeshIndices;                                      // 0x038C(0x0004)
	TArray<int>                                        ClothMeshParentData;                                      // 0x0390(0x000C) (Const, NeedCtorLink)
	int                                                NumClothMeshParentIndices;                                // 0x039C(0x0004)
	TArray<struct FVector>                             ClothMeshWeldedPosData;                                   // 0x03A0(0x000C) (Const, Native, Transient)
	TArray<struct FVector>                             ClothMeshWeldedNormalData;                                // 0x03AC(0x000C) (Const, Native, Transient)
	TArray<int>                                        ClothMeshWeldedIndexData;                                 // 0x03B8(0x000C) (Const, Native, Transient)
	int                                                ClothDirtyBufferFlag;                                     // 0x03C4(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   ClothRBChannel;                                           // 0x03C8(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                               // 0x03CC(0x0004) (Edit, Const)
	float                                              ClothForceScale;                                          // 0x03D0(0x0004) (Edit, Const)
	unsigned long                                      bEnableValidBounds : 1;                                   // 0x03D4(0x0004) (Edit)
	struct FVector                                     ValidBoundsMin;                                           // 0x03D8(0x000C) (Edit)
	struct FVector                                     ValidBoundsMax;                                           // 0x03E4(0x000C) (Edit)
	float                                              ClothAttachmentTearFactor;                                // 0x03F0(0x0004) (Edit, Const)
	class UMaterial*                                   LimitMaterial;                                            // 0x03F4(0x0004)
	struct FBoneAtom                                   RootMotionDelta;                                          // 0x03F8(0x0020) (Const, Transient)
	struct FVector                                     RootMotionVelocity;                                       // 0x0418(0x000C) (Transient)
	struct FVector                                     RootBoneTranslation;                                      // 0x0424(0x000C) (Const, Transient)
	struct FVector                                     RootMotionAccelScale;                                     // 0x0430(0x000C)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x043C(0x0001) (Edit)
	TEnumAsByte<ERootMotionMode>                       PreviousRMM;                                              // 0x043D(0x0001) (Const)
	TEnumAsByte<ERootMotionMode>                       PendingRMM;                                               // 0x043E(0x0001)
	TEnumAsByte<ERootMotionMode>                       OldPendingRMM;                                            // 0x043F(0x0001)
	int                                                bRMMOneFrameDelay;                                        // 0x0440(0x0004) (Const)
	TEnumAsByte<ERootMotionRotationMode>               RootMotionRotationMode;                                   // 0x0444(0x0001) (Edit)
	TEnumAsByte<EFaceFXBlendMode>                      FaceFXBlendMode;                                          // 0x0445(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0446(0x0002) MISSED OFFSET
	struct FPointer                                    FaceFXActorInstance;                                      // 0x0448(0x0004) (Native, Transient)
	class UAudioComponent*                             CachedFaceFXAudioComp;                                    // 0x044C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}


	void StopAnim();
	void PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying);
	void SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration);
	void SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<EFaceFXRegOp> RegOp, float InterpDuration);
	float GetFaceFXRegister(const struct FString& RegName);
	void DeclareFaceFXRegister(const struct FString& RegName);
	bool IsPlayingFaceFXAnim();
	void StopFaceFXAnim();
	bool PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName);
	bool GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones);
	void UpdateAnimations();
	void ForceSkelUpdate();
	void UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport);
	void SetHasPhysicsAssetInstance(bool bHasInstance);
	class URB_BodyInstance* FindBodyInstanceNamed(const struct FName& BoneName);
	struct FName FindConstraintBoneName(int ConstraintIndex);
	int FindConstraintIndex(const struct FName& ConstraintName);
	void InitSkelControls();
	void UpdateParentBoneMap();
	void SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp);
	void SetAnimTreeTemplate(class UAnimTree* NewTemplate);
	struct FName FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector* BoneLocation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	struct FVector GetBoneAxis(const struct FName& BoneName, TEnumAsByte<EAxis> Axis);
	void GetBoneNames(TArray<struct FName>* BoneNames);
	struct FName GetParentBone(const struct FName& BoneName);
	struct FMatrix GetBoneMatrix(int BoneIndex);
	int MatchRefBone(const struct FName& BoneName);
	struct FVector GetBoneLocation(const struct FName& BoneName, int Space);
	struct FQuat GetBoneQuaternion(const struct FName& BoneName, int Space);
	class UMorphNodeBase* FindMorphNode(const struct FName& InNodeName);
	class USkelControlBase* FindSkelControl(const struct FName& InControlName);
	void AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node);
	class UAnimNode* FindAnimNode(const struct FName& InNodeName);
	class UMorphTarget* FindMorphTarget(const struct FName& MorphTargetName);
	float GetAnimLength(const struct FName& AnimSeqName);
	float GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration);
	void RestoreSavedAnimSets();
	void SaveAnimSets();
	class UAnimSequence* FindAnimSequence(const struct FName& AnimSeqName);
	void SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax);
	void EnableClothValidBounds(bool IfEnableClothValidBounds);
	void AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable);
	void SetClothVelocity(const struct FVector& VelocityOffSet);
	void SetClothPosition(const struct FVector& ClothOffSet);
	void SetClothSleep(bool IfClothSleep);
	void SetClothThickness(float ClothThickness);
	void SetClothTearFactor(float ClothTearFactor);
	void SetClothStretchingStiffness(float ClothStretchingStiffness);
	void SetClothSolverIterations(int ClothSolverIterations);
	void SetClothSleepLinearVelocity(float ClothSleepLinearVelocity);
	void SetClothPressure(float ClothPressure);
	void SetClothFriction(float ClothFriction);
	void SetClothFlags(int ClothFlags);
	void SetClothDampingCoefficient(float ClothDampingCoefficient);
	void SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient);
	void SetClothBendingStiffness(float ClothBendingStiffness);
	void SetClothAttachmentTearFactor(float ClothAttachTearFactor);
	void SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient);
	float GetClothThickness();
	float GetClothTearFactor();
	float GetClothStretchingStiffness();
	int GetClothSolverIterations();
	float GetClothSleepLinearVelocity();
	float GetClothPressure();
	float GetClothFriction();
	int GetClothFlags();
	float GetClothDampingCoefficient();
	float GetClothCollisionResponseCoefficient();
	float GetClothBendingStiffness();
	float GetClothAttachmentTearFactor();
	float GetClothAttachmentResponseCoefficient();
	void AddImpulseAtClothPos(const struct FVector& Position, const struct FVector& Impulse, float Radius);
	void ResetClothVertsToRefPose();
	void SetAttachClothVertsToBaseBody(bool bAttachVerts);
	void SetClothExternalForce(const struct FVector& InForce);
	void UpdateClothParams();
	void SetClothFrozen(bool bNewFrozen);
	void SetEnableClothSimulation(bool bInEnable);
	void SetForceRefPose(bool bNewForceRefPose);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases);
	void AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent);
	bool IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName);
	class UActorComponent* FindComponentAttachedToBone(const struct FName& InBoneName);
	class USkeletalMeshSocket* GetSocketByName(const struct FName& InSocketName);
	bool GetSocketWorldLocationAndRotation(const struct FName& InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation);
	void AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName);
	void DetachComponent(class UActorComponent* Component);
	void AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale);
};


// Class Engine.SkeletalMeshSocket
// 0x0040 (0x007C - 0x003C)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x003C(0x0008) (Edit, Const, EditConst)
	struct FName                                       BoneName;                                                 // 0x0044(0x0008) (Edit, Const, EditConst)
	struct FVector                                     RelativeLocation;                                         // 0x004C(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0058(0x000C) (Edit)
	struct FVector                                     RelativeScale;                                            // 0x0064(0x000C) (Edit)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0070(0x0004) (Edit)
	class USkeletalMeshComponent*                      PreviewSkelComp;                                          // 0x0074(0x0004) (Edit, Const, ExportObject, Transient, EditConst, Component, EditInline)
	class UStaticMesh*                                 PreviewStaticMesh;                                        // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}

};


// Class Engine.SkyLight
// 0x0000 (0x01D4 - 0x01D4)
class ASkyLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}

};


// Class Engine.SkyLightComponent
// 0x0008 (0x018C - 0x0184)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                          // 0x0184(0x0004) (Edit, Const)
	struct FColor                                      LowerColor;                                               // 0x0188(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}

};


// Class Engine.SkyLightToggleable
// 0x0000 (0x01D4 - 0x01D4)
class ASkyLightToggleable : public ASkyLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightToggleable");
		return ptr;
	}

};


// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x0099 - 0x0098)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0098(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlotToSlotReachSpec");
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x00BC (0x00F8 - 0x003C)
class USoundCue : public UObject
{
public:
	struct FName                                       SoundGroup;                                               // 0x003C(0x0008)
	class USoundNode*                                  FirstNode;                                                // 0x0044(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0048(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                                       // 0x0084(0x0004) (Transient)
	float                                              VolumeMultiplier;                                         // 0x0088(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x008C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0090(0x0004)
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x0094(0x0004) (Edit)
	struct FString                                     FaceFXGroupName;                                          // 0x0098(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FaceFXAnimName;                                           // 0x00A4(0x000C) (Edit, NeedCtorLink)
	int                                                MaxConcurrentPlayCount;                                   // 0x00B0(0x0004) (Edit)
	float                                              timeToLive;                                               // 0x00B4(0x0004) (Edit)
	int                                                AbsoluteMaxConcurrentPlayCount;                           // 0x00B8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00BC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.CurrentPlayInstances

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}


	float GetCueDuration();
};


// Class Engine.SoundNode
// 0x0010 (0x004C - 0x003C)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                           // 0x003C(0x0004) (Const, Native)
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0040(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0054 - 0x004C)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}

};


// Class Engine.SpeechRecognition
// 0x0088 (0x00C4 - 0x003C)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                                 // 0x003C(0x000C) (Edit, NeedCtorLink)
	float                                              ConfidenceThreshhold;                                     // 0x0048(0x0004) (Edit)
	TArray<struct FRecogVocabulary>                    Vocabularies;                                             // 0x004C(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              VoiceData;                                                // 0x0058(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              WorkingVoiceData;                                         // 0x0064(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              UserData;                                                 // 0x0070(0x000C) (NeedCtorLink)
	struct FRecogUserData                              InstanceData[0x4];                                        // 0x007C(0x0010) (NeedCtorLink)
	unsigned long                                      bDirty : 1;                                               // 0x00BC(0x0004) (Transient, DuplicateTransient)
	unsigned long                                      bInitialised : 1;                                         // 0x00BC(0x0004) (Transient, DuplicateTransient)
	struct FPointer                                    FnxVoiceData;                                             // 0x00C0(0x0004) (Const, Native, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeechRecognition");
		return ptr;
	}

};


// Class Engine.SphericalHarmonicLightComponent
// 0x006C (0x01F0 - 0x0184)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                               // 0x0184(0x006C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphericalHarmonicLightComponent");
		return ptr;
	}

};


// Class Engine.SpotLight
// 0x0000 (0x01D4 - 0x01D4)
class ASpotLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}

};


// Class Engine.SpotLightComponent
// 0x0014 (0x0214 - 0x0200)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                           // 0x0200(0x0004) (Edit)
	float                                              OuterConeAngle;                                           // 0x0204(0x0004) (Edit)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x0208(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x020C(0x0004) (Const, ExportObject, Component, EditInline)
	float                                              SpotLightPenumbraAngle;                                   // 0x0210(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}

};


// Class Engine.SpotLightMovable
// 0x0000 (0x01D4 - 0x01D4)
class ASpotLightMovable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightMovable");
		return ptr;
	}

};


// Class Engine.SpotLightToggleable
// 0x0000 (0x01D4 - 0x01D4)
class ASpotLightToggleable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightToggleable");
		return ptr;
	}

};


// Class Engine.SpriteComponent
// 0x000C (0x01C8 - 0x01BC)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x01BC(0x0004) (Edit)
	unsigned long                                      bIsScreenSizeScaled : 1;                                  // 0x01C0(0x0004) (Edit)
	float                                              ScreenSize;                                               // 0x01C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpriteComponent");
		return ptr;
	}

};


// Class Engine.StaticLightCollectionActor
// 0x0010 (0x01E4 - 0x01D4)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray<class ULightComponent*>                     LightComponents;                                          // 0x01D4(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxLightComponents;                                       // 0x01E0(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticLightCollectionActor");
		return ptr;
	}

};


// Class Engine.StaticMeshActorBase
// 0x0000 (0x01C0 - 0x01C0)
class AStaticMeshActorBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActorBase");
		return ptr;
	}

};


// Class Engine.StaticMeshActor
// 0x0044 (0x0204 - 0x01C0)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	float                                              LOIProximityDelay;                                        // 0x01C4(0x0004) (Edit, Const)
	float                                              LOILookAtDelay;                                           // 0x01C8(0x0004) (Edit, Const)
	float                                              LOIMinDuration;                                           // 0x01CC(0x0004) (Edit, Const)
	float                                              LOIDistance;                                              // 0x01D0(0x0004) (Edit, Const)
	struct FVector                                     LOIDirection;                                             // 0x01D4(0x000C) (Edit, Const)
	float                                              LOIAngle;                                                 // 0x01E0(0x0004) (Edit, Const)
	struct FVector                                     LOIOffset;                                                // 0x01E4(0x000C) (Edit, Const)
	unsigned long                                      LOIUse2DDistance : 1;                                     // 0x01F0(0x0004) (Edit, Const)
	unsigned long                                      bForceSlowGIForAlpha : 1;                                 // 0x01F0(0x0004) (Edit, Const)
	TArray<struct FName>                               LOIGroups;                                                // 0x01F4(0x000C) (Edit, Const, NeedCtorLink)
	class UTdLOIAddOnStaticMeshActor*                  TdLOIAddOn;                                               // 0x0200(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}


	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void ActivateLOI();
	void AssignPlayerToLOI(class AActor* Player);
	void PreBeginPlay();
};


// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x01D0 - 0x01C0)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray<class UStaticMeshComponent*>                StaticMeshComponents;                                     // 0x01C0(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxStaticMeshComponents;                                  // 0x01CC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshCollectionActor");
		return ptr;
	}

};


// Class Engine.StaticMeshComponent
// 0x0040 (0x0208 - 0x01C8)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x01C8(0x0004)
	int                                                PreviousLODLevel;                                         // 0x01CC(0x0004)
	class UStaticMesh*                                 StaticMesh;                                               // 0x01D0(0x0004) (Edit, Const)
	struct FColor                                      WireframeColor;                                           // 0x01D4(0x0004) (Edit)
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x01D8(0x0004) (Edit)
	unsigned long                                      bOverrideLightMapResolution : 1;                          // 0x01D8(0x0004) (Edit, Const)
	int                                                OverriddenLightMapResolution;                             // 0x01DC(0x0004) (Edit, Const)
	int                                                SubDivisionStepSize;                                      // 0x01E0(0x0004) (Edit, Const)
	int                                                MinSubDivisions;                                          // 0x01E4(0x0004) (Edit, Const)
	int                                                MaxSubDivisions;                                          // 0x01E8(0x0004) (Edit, Const)
	unsigned long                                      bUseSubDivisions : 1;                                     // 0x01EC(0x0004) (Edit, Const)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x01F0(0x000C) (Const, NeedCtorLink)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x01FC(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}


	void DisableRBCollisionWithSMC(class UStaticMeshComponent* OtherSMC, bool bDisabled);
	bool SetStaticMesh(class UStaticMesh* NewMesh);
};


// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0050 - 0x004C)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponentFactory");
		return ptr;
	}

};


// Class Engine.SwatTurnReachSpec
// 0x0001 (0x0099 - 0x0098)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0098(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SwatTurnReachSpec");
		return ptr;
	}

};


// Class Engine.TeamInfo
// 0x001C (0x01DC - 0x01C0)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                                 // 0x01C0(0x000C) (Const, Net, Localized, NeedCtorLink, DataBinding)
	int                                                Size;                                                     // 0x01CC(0x0004) (DataBinding)
	float                                              Score;                                                    // 0x01D0(0x0004) (Net, DataBinding)
	int                                                TeamIndex;                                                // 0x01D4(0x0004) (Net, DataBinding)
	struct FColor                                      TeamColor;                                                // 0x01D8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamInfo");
		return ptr;
	}


	unsigned char GetTeamNum();
	struct FColor GetTextColor();
	struct FColor GetHUDColor();
	struct FString GetHumanReadableName();
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	void Destroyed();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.Teleporter
// 0x0028 (0x033C - 0x0314)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                                      // 0x0314(0x000C) (Edit, Net, NeedCtorLink)
	struct FName                                       ProductRequired;                                          // 0x0320(0x0008) (Edit)
	unsigned long                                      bChangesVelocity : 1;                                     // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bChangesYaw : 1;                                          // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bReversesX : 1;                                           // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bReversesY : 1;                                           // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bReversesZ : 1;                                           // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bEnabled : 1;                                             // 0x0328(0x0004) (Edit, Net)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x0328(0x0004) (Edit)
	struct FVector                                     TargetVelocity;                                           // 0x032C(0x000C) (Edit, Net)
	float                                              LastFired;                                                // 0x0338(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Teleporter");
		return ptr;
	}


	class AActor* SpecialHandling(class APawn* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool Accept(class AActor* Incoming, class AActor* Source);
	void PostBeginPlay();
	bool CanTeleport(class AActor* A);
};


// Class Engine.TeleportReachSpec
// 0x0000 (0x0098 - 0x0098)
class UTeleportReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeleportReachSpec");
		return ptr;
	}

};


// Class Engine.Texture2DComposite
// 0x0010 (0x00C8 - 0x00B8)
class UTexture2DComposite : public UTexture
{
public:
	TArray<struct FSourceTexture2DRegion>              SourceRegions;                                            // 0x00B8(0x000C) (NeedCtorLink)
	int                                                MaxTextureSize;                                           // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DComposite");
		return ptr;
	}


	void ResetSourceRegions();
	void UpdateCompositeTexture(int NumMipsToGenerate);
	bool SourceTexturesFullyStreamedIn();
};


// Class Engine.TextureCube
// 0x002C (0x00E4 - 0x00B8)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00B8(0x0004) (Const, Transient)
	int                                                SizeY;                                                    // 0x00BC(0x0004) (Const, Transient)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00C0(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	int                                                NumMips;                                                  // 0x00C4(0x0004) (Const, Transient)
	unsigned long                                      bIsCubemapValid : 1;                                      // 0x00C8(0x0004) (Const, Transient)
	class UTexture2D*                                  FacePosX;                                                 // 0x00CC(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegX;                                                 // 0x00D0(0x0004) (Edit, Const)
	class UTexture2D*                                  FacePosY;                                                 // 0x00D4(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegY;                                                 // 0x00D8(0x0004) (Edit, Const)
	class UTexture2D*                                  FacePosZ;                                                 // 0x00DC(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegZ;                                                 // 0x00E0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}

};


// Class Engine.TextureFlipBook
// 0x0040 (0x0150 - 0x0110)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0110(0x0004) (Const, Native, NoExport)
	float                                              TimeIntoMovie;                                            // 0x0114(0x0004) (Const, Transient)
	float                                              TimeSinceLastFrame;                                       // 0x0118(0x0004) (Const, Transient)
	float                                              HorizontalScale;                                          // 0x011C(0x0004) (Const, Transient)
	float                                              VerticalScale;                                            // 0x0120(0x0004) (Const, Transient)
	unsigned long                                      bPaused : 1;                                              // 0x0124(0x0004) (Const)
	unsigned long                                      bStopped : 1;                                             // 0x0124(0x0004) (Const)
	unsigned long                                      bLooping : 1;                                             // 0x0124(0x0004) (Edit)
	unsigned long                                      bAutoPlay : 1;                                            // 0x0124(0x0004) (Edit)
	int                                                HorizontalImages;                                         // 0x0128(0x0004) (Edit)
	int                                                VerticalImages;                                           // 0x012C(0x0004) (Edit)
	TEnumAsByte<ETextureFlipBookMethod>                FBMethod;                                                 // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              FrameRate;                                                // 0x0134(0x0004) (Edit)
	float                                              FrameTime;                                                // 0x0138(0x0004)
	int                                                CurrentRow;                                               // 0x013C(0x0004) (Const, Transient)
	int                                                CurrentColumn;                                            // 0x0140(0x0004) (Const, Transient)
	float                                              RenderOffsetU;                                            // 0x0144(0x0004) (Const, Transient)
	float                                              RenderOffsetV;                                            // 0x0148(0x0004) (Const, Transient)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x014C(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureFlipBook");
		return ptr;
	}


	void SetCurrentFrame(int Row, int Col);
	void Stop();
	void Pause();
	void Play();
};


// Class Engine.TextureMovie
// 0x004C (0x0104 - 0x00B8)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00B8(0x0004) (Const)
	int                                                SizeY;                                                    // 0x00BC(0x0004) (Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00C0(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00C1(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00C2(0x0001) (Edit)
	TEnumAsByte<EMovieStreamSource>                    MovieStreamSource;                                        // 0x00C3(0x0001) (Edit)
	class UClass*                                      DecoderClass;                                             // 0x00C4(0x0004) (Const)
	class UCodecMovie*                                 Decoder;                                                  // 0x00C8(0x0004) (Const, Transient)
	unsigned long                                      Paused : 1;                                               // 0x00CC(0x0004) (Const)
	unsigned long                                      Stopped : 1;                                              // 0x00CC(0x0004) (Const)
	unsigned long                                      Looping : 1;                                              // 0x00CC(0x0004) (Edit)
	unsigned long                                      AutoPlay : 1;                                             // 0x00CC(0x0004) (Edit)
	struct FUntypedBulkData_Mirror                     Data;                                                     // 0x00D0(0x0030) (Const, Native)
	struct FPointer                                    ReleaseCodecFence;                                        // 0x0100(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureMovie");
		return ptr;
	}


	void Stop();
	void Pause();
	void Play();
};


// Class Engine.TextureRenderTarget
// 0x0004 (0x00BC - 0x00B8)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                                     // 0x00B8(0x0004) (Transient)
	unsigned long                                      bNeedsTwoCopies : 1;                                      // 0x00B8(0x0004) (Edit)
	unsigned long                                      bRenderOnce : 1;                                          // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x001C (0x00D8 - 0x00BC)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00BC(0x0004) (Edit, Const)
	int                                                SizeY;                                                    // 0x00C0(0x0004) (Edit, Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00C4(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00C5(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00C6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00C7(0x0001) MISSED OFFSET
	struct FLinearColor                                ClearColor;                                               // 0x00C8(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}


	class UTextureRenderTarget2D* STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce);
};


// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00C1 - 0x00BC)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00BC(0x0004) (Edit)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00C0(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}

};


// Class Engine.Trigger
// 0x000C (0x01CC - 0x01C0)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bRecentlyTriggered : 1;                                   // 0x01C4(0x0004)
	float                                              AITriggerDelay;                                           // 0x01C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record);
	bool StopsProjectile(class AProjectile* P);
	void UnTrigger();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.TriggerVolume
// 0x0000 (0x01FC - 0x01FC)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	void PostBeginPlay();
};


// Class Engine.UberPostProcessEffect
// 0x0028 (0x00CC - 0x00A4)
class UUberPostProcessEffect : public UDOFAndBloomEffect
{
public:
	struct FVector                                     SceneShadows;                                             // 0x00A4(0x000C) (Edit)
	struct FVector                                     SceneHighLights;                                          // 0x00B0(0x000C) (Edit)
	struct FVector                                     SceneMidTones;                                            // 0x00BC(0x000C) (Edit)
	float                                              SceneDesaturation;                                        // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UberPostProcessEffect");
		return ptr;
	}

};


// Class Engine.Vehicle
// 0x0074 (0x0438 - 0x03C4)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                                   // 0x03C4(0x0004) (Net)
	unsigned long                                      bDriving : 1;                                             // 0x03C8(0x0004) (Net)
	unsigned long                                      bDriverIsVisible : 1;                                     // 0x03C8(0x0004)
	unsigned long                                      bAttachDriver : 1;                                        // 0x03C8(0x0004)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x03C8(0x0004)
	unsigned long                                      bSeparateTurretFocus : 1;                                 // 0x03C8(0x0004)
	unsigned long                                      bFollowLookDir : 1;                                       // 0x03C8(0x0004)
	unsigned long                                      bHasHandbrake : 1;                                        // 0x03C8(0x0004)
	unsigned long                                      bScriptedRise : 1;                                        // 0x03C8(0x0004)
	unsigned long                                      bAvoidReversing : 1;                                      // 0x03C8(0x0004)
	unsigned long                                      bRetryPathfindingWithDriver : 1;                          // 0x03C8(0x0004)
	unsigned long                                      bIgnoreStallZ : 1;                                        // 0x03C8(0x0004) (Edit)
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                           // 0x03C8(0x0004)
	TArray<struct FVector>                             ExitPositions;                                            // 0x03CC(0x000C) (Edit, NeedCtorLink)
	float                                              ExitRadius;                                               // 0x03D8(0x0004)
	struct FVector                                     ExitOffset;                                               // 0x03DC(0x000C)
	float                                              Steering;                                                 // 0x03E8(0x0004) (Edit)
	float                                              Throttle;                                                 // 0x03EC(0x0004) (Edit)
	float                                              Rise;                                                     // 0x03F0(0x0004) (Edit)
	struct FVector                                     TargetLocationAdjustment;                                 // 0x03F4(0x000C)
	float                                              DriverDamageMult;                                         // 0x0400(0x0004)
	float                                              MomentumMult;                                             // 0x0404(0x0004) (Edit)
	class UClass*                                      CrushedDamageType;                                        // 0x0408(0x0004)
	float                                              MinCrushSpeed;                                            // 0x040C(0x0004)
	float                                              ForceCrushPenetration;                                    // 0x0410(0x0004)
	unsigned char                                      StuckCount;                                               // 0x0414(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0415(0x0003) MISSED OFFSET
	float                                              ThrottleTime;                                             // 0x0418(0x0004)
	float                                              StuckTime;                                                // 0x041C(0x0004)
	float                                              OldSteering;                                              // 0x0420(0x0004)
	float                                              OnlySteeringStartTime;                                    // 0x0424(0x0004)
	float                                              OldThrottle;                                              // 0x0428(0x0004)
	float                                              AIMoveCheckTime;                                          // 0x042C(0x0004) (Const)
	float                                              VehicleMovingTime;                                        // 0x0430(0x0004)
	float                                              TurnTime;                                                 // 0x0434(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Vehicle");
		return ptr;
	}


	void NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ReplicatedEvent(const struct FName& VarName);
	void DrivingStatusChanged();
	void HandleDeadVehicleDriver();
	void SetDriving(bool B);
	struct FVector GetEntryLocation();
	void CrushedBy(class APawn* OtherPawn);
	bool EncroachingOn(class AActor* Other);
	class AController* GetCollisionDamageInstigator();
	void EncroachedBy(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DriverDied();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ThrowActiveWeapon(class UClass* DamageType);
	void AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void UnPossessed();
	bool TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround);
	bool FindAutoExit(class APawn* ExitingDriver);
	bool PlaceExitingDriver(class APawn* ExitingDriver);
	void DriverLeft();
	void SetInputs(float InForward, float InStrafe, float InUp);
	bool DriverLeave(bool bForceLeave);
	bool ContinueOnFoot();
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P);
	void EntryAnnouncement(class AController* C);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	bool DriverEnter(class APawn* P);
	bool TryToDrive(class APawn* P);
	bool AnySeatAvailable();
	bool CanEnterVehicle(class APawn* P);
	void Destroyed_HandleDriver();
	void Destroyed();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void PostBeginPlay();
	void SetBaseEyeheight();
	void PlayerChangedTeam();
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser);
	struct FVector GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc);
	void Suicide();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void NotifyTeamChanged();
};


// Class Engine.VoiceChannel
// 0x000C (0x0074 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0068(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.VolumePathNode
// 0x0008 (0x031C - 0x0314)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                           // 0x0314(0x0004) (Edit)
	float                                              StartingHeight;                                           // 0x0318(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumePathNode");
		return ptr;
	}

};


// Class Engine.WallTransReachSpec
// 0x0000 (0x0098 - 0x0098)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WallTransReachSpec");
		return ptr;
	}

};


// Class Engine.Weapon
// 0x00AC (0x02BC - 0x0210)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                          // 0x0210(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	TArray<struct FName>                               FiringStatesArray;                                        // 0x0214(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<EWeaponFireType>>               WeaponFireTypes;                                          // 0x0220(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              WeaponProjectiles;                                        // 0x022C(0x000C) (NeedCtorLink)
	TArray<float>                                      FireInterval;                                             // 0x0238(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      Spread;                                                   // 0x0244(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      InstantHitDamage;                                         // 0x0250(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      InstantHitMomentum;                                       // 0x025C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              InstantHitDamageTypes;                                    // 0x0268(0x000C) (NeedCtorLink)
	float                                              EquipTime;                                                // 0x0274(0x0004) (Edit)
	float                                              PutDownTime;                                              // 0x0278(0x0004) (Edit)
	struct FVector                                     FireOffset;                                               // 0x027C(0x000C) (Edit)
	unsigned long                                      bWeaponPutDown : 1;                                       // 0x0288(0x0004)
	unsigned long                                      bCanThrow : 1;                                            // 0x0288(0x0004)
	unsigned long                                      bInstantHit : 1;                                          // 0x0288(0x0004)
	unsigned long                                      bMeleeWeapon : 1;                                         // 0x0288(0x0004)
	float                                              WeaponRange;                                              // 0x028C(0x0004) (Edit)
	float                                              ClothImpulseRadius;                                       // 0x0290(0x0004) (Edit)
	float                                              ClothImpulseScale;                                        // 0x0294(0x0004) (Edit)
	class UMeshComponent*                              Mesh;                                                     // 0x0298(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              DefaultAnimSpeed;                                         // 0x029C(0x0004) (Edit)
	float                                              Priority;                                                 // 0x02A0(0x0004) (Config, DataBinding)
	class AAIController*                               AIController;                                             // 0x02A4(0x0004)
	TArray<unsigned char>                              ShouldFireOnRelease;                                      // 0x02A8(0x000C) (NeedCtorLink)
	float                                              AIRating;                                                 // 0x02B4(0x0004)
	float                                              CachedMaxRange;                                           // 0x02B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Weapon");
		return ptr;
	}


	bool StillFiring(unsigned char FireMode);
	bool ShouldRefire();
	void NotifyWeaponFinishedFiring(unsigned char FireMode);
	void NotifyWeaponFired(unsigned char FireMode);
	void HandleFinishedFiring();
	bool TryPutDown();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	struct FVector GetMuzzleLoc();
	void CustomFire();
	class AProjectile* ProjectileFire();
	void ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact);
	void InstantFire();
	bool PassThroughDamage(class AActor* HitActor, const struct FTraceHitInfo& HitInfo);
	struct FImpactInfo CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, TArray<struct FImpactInfo>* ImpactList);
	class AActor* GetTraceOwner();
	float GetTraceRange();
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	void FireAmmunition();
	void FireModeUpdated(unsigned char FiringMode, bool bViaReplication);
	void SetCurrentFireMode(unsigned char FiringModeNum);
	void SendToFiringState(unsigned char FireModeNum);
	void ForceEndFire();
	void EndFire(unsigned char FireModeNum);
	void ServerStopFire(unsigned char FireModeNum);
	void StopFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	void ServerStartFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void WeaponCalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot);
	void ClientWeaponSet(bool bOptionalSet);
	float AdjustFOVAngle(float FOVAngle);
	void GetViewAxes(struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis);
	void DetachWeapon();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName);
	void ClearFlashLocation();
	void SetFlashLocation(const struct FVector& HitLocation);
	void ClearFlashCount();
	void IncrementFlashCount();
	void WeaponEmpty();
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void PutDownWeapon();
	void Activate();
	void TimeWeaponEquipping();
	void TimeWeaponPutDown();
	void RefireCheckTimer();
	void TimeWeaponFiring(unsigned char FireModeNum);
	float GetFireInterval(unsigned char FireModeNum);
	void PlayFiringSound();
	void StopFireEffects(unsigned char FireModeNum);
	void PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation);
	void StopWeaponAnimation();
	void PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh);
	void WeaponPlaySound(class USoundCue* Sound, float NoiseLoudness);
	class UAnimNodeSequence* GetWeaponAnimNodeSeq();
	bool FireOnRelease();
	float SuggestDefenseStyle();
	float SuggestAttackStyle();
	bool CanAttack(class AActor* Other);
	float RangedAttackTime();
	bool RecommendLongRangedAttack();
	bool FocusOnLeader(bool bLeaderFiring);
	bool RecommendRangedAttack();
	float GetWeaponRating();
	float GetAIRating();
	void GivenTo(class APawn* thisPawn, bool bDoNotActivate);
	float GetDamageRadius();
	float MaxRange();
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	class UClass* GetProjectileClass();
	void ClearPendingFire(int FireMode);
	void SetPendingFire(int FireMode);
	bool PendingFire(int FireMode);
	bool HasAnyAmmo();
	bool HasAmmo(unsigned char FireModeNum, int Amount);
	int AddAmmo(int Amount);
	void ConsumeAmmo(unsigned char FireModeNum);
	void WeaponLog(const struct FString& msg, const struct FString& FuncStr);
	void DumpWeaponDebugToLog();
	void GetWeaponDebug(TArray<struct FString>* DebugInfo);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool DenyClientWeaponSet();
	bool IsFiring();
	void ClientWeaponThrown();
	bool CanThrow();
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DoOverridePrevWeapon();
	bool DoOverrideNextWeapon();
	void HolderDied();
	bool IsActiveWeapon();
	void ItemRemovedFromInvManager();
	void Destroyed();
};


// Class Engine.WindDirectionalSourceComponent
// 0x0017 (0x006C - 0x0055)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FPointer                                    SceneProxy;                                               // 0x0058(0x0004) (Const, Native, Transient, NoImport)
	float                                              Strength;                                                 // 0x005C(0x0004) (Edit)
	float                                              Phase;                                                    // 0x0060(0x0004) (Edit)
	float                                              Frequency;                                                // 0x0064(0x0004) (Edit)
	float                                              Speed;                                                    // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}

};


// Class Engine.World
// 0x0218 (0x0254 - 0x003C)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x218];                                     // 0x003C(0x0218) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}

};


// Class Engine.ZoneInfo
// 0x0010 (0x01D0 - 0x01C0)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                                    // 0x01C0(0x0004) (Edit)
	float                                              SoftKill;                                                 // 0x01C4(0x0004) (Edit)
	class UClass*                                      KillZDamageType;                                          // 0x01C8(0x0004) (Edit)
	unsigned long                                      bSoftKillZ : 1;                                           // 0x01CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ZoneInfo");
		return ptr;
	}

};


// Class Engine.WorldInfo
// 0x0C3C (0x0E0C - 0x01D0)
class AWorldInfo : public AZoneInfo
{
public:
	unsigned long                                      UsePhotonMap : 1;                                         // 0x01D0(0x0004) (Edit)
	unsigned long                                      UseIBL : 1;                                               // 0x01D0(0x0004) (Edit)
	unsigned long                                      bReloadScriptLevels : 1;                                  // 0x01D0(0x0004) (Transient)
	unsigned long                                      bReloadScriptLevelsDone : 1;                              // 0x01D0(0x0004) (Transient)
	unsigned long                                      bRemoveRebuildLighting : 1;                               // 0x01D0(0x0004)
	unsigned long                                      bEnableUIPostProcessing : 1;                              // 0x01D0(0x0004)
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                        // 0x01D0(0x0004)
	unsigned long                                      bMapHasPathingErrors : 1;                                 // 0x01D0(0x0004)
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                        // 0x01D0(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x01D0(0x0004)
	unsigned long                                      bPlayersOnly : 1;                                         // 0x01D0(0x0004)
	unsigned long                                      bDropDetail : 1;                                          // 0x01D0(0x0004) (Transient)
	unsigned long                                      bAggressiveLOD : 1;                                       // 0x01D0(0x0004) (Transient)
	unsigned long                                      bStartup : 1;                                             // 0x01D0(0x0004)
	unsigned long                                      bPathsRebuilt : 1;                                        // 0x01D0(0x0004)
	unsigned long                                      bHasPathNodes : 1;                                        // 0x01D0(0x0004)
	unsigned long                                      bUseConsoleInput : 1;                                     // 0x01D0(0x0004) (Transient)
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                         // 0x01D0(0x0004) (Edit)
	unsigned long                                      bNoPathWarnings : 1;                                      // 0x01D0(0x0004) (Edit)
	unsigned long                                      bHighPriorityLoading : 1;                                 // 0x01D0(0x0004) (Net)
	unsigned long                                      bHighPriorityLoadingLocal : 1;                            // 0x01D0(0x0004)
	unsigned long                                      bPrimarySceneHW : 1;                                      // 0x01D0(0x0004) (Edit, EditConst)
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                        // 0x01D0(0x0004) (Edit)
	struct FVector                                     SkyColor;                                                 // 0x01D4(0x000C) (Edit)
	struct FString                                     IBLFileName;                                              // 0x01E0(0x000C) (Edit, NeedCtorLink)
	float                                              IBLIntensity;                                             // 0x01EC(0x0004) (Edit)
	struct FVector2D                                   CameraResolution;                                         // 0x01F0(0x0008) (Edit)
	struct FPostProcessSettings                        DefaultPostProcessSettings;                               // 0x01F8(0x02BC) (Edit, Config, NeedCtorLink)
	struct FTdPostProcessModifier                      DefaultPostProcessSettingsModifierXbox360;                // 0x04B4(0x025C) (Edit, NeedCtorLink)
	struct FTdPostProcessModifier                      DefaultPostProcessSettingsModifierPS3;                    // 0x0710(0x025C) (Edit, NeedCtorLink)
	struct FTdPostProcessModifier                      DefaultPostProcessSettingsModifierPC;                     // 0x096C(0x025C) (Edit, NeedCtorLink)
	float                                              SquintModeKernelSize;                                     // 0x0BC8(0x0004) (Edit, Config)
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                         // 0x0BCC(0x0004) (Const, Transient, NoImport)
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x0BD0(0x000C) (Edit, Config)
	class AReverbVolume*                               HighestPriorityReverbVolume;                              // 0x0BDC(0x0004) (Const, Transient, NoImport)
	TArray<class APortalVolume*>                       PortalVolumes;                                            // 0x0BE0(0x000C) (Const, Transient, NeedCtorLink, NoImport)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0BEC(0x000C) (Edit, Const, EditConst, NeedCtorLink, EditInline)
	class UBookMark*                                   BookMarks[0xA];                                           // 0x0BF8(0x0004) (Edit)
	TArray<class UClipPadEntry*>                       ClipPadEntries;                                           // 0x0C20(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              TimeDilation;                                             // 0x0C2C(0x0004) (Net)
	float                                              DemoPlayTimeDilation;                                     // 0x0C30(0x0004)
	float                                              TimeSeconds;                                              // 0x0C34(0x0004)
	float                                              RealTimeSeconds;                                          // 0x0C38(0x0004)
	float                                              AudioTimeSeconds;                                         // 0x0C3C(0x0004)
	float                                              DeltaSeconds;                                             // 0x0C40(0x0004) (Const, Transient)
	float                                              TdTimeDilation;                                           // 0x0C44(0x0004)
	float                                              SavedDeltaSeconds;                                        // 0x0C48(0x0004) (Const, Transient)
	float                                              PauseDelay;                                               // 0x0C4C(0x0004)
	float                                              RealTimeToUnPause;                                        // 0x0C50(0x0004)
	class APlayerReplicationInfo*                      Pauser;                                                   // 0x0C54(0x0004) (Net)
	struct FString                                     VisibleGroups;                                            // 0x0C58(0x000C) (NeedCtorLink)
	struct FString                                     SelectedGroups;                                           // 0x0C64(0x000C) (Transient, NeedCtorLink)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0C70(0x0004)
	class UTexture2D*                                  WireframeTexture;                                         // 0x0C74(0x0004)
	class UTexture2D*                                  WhiteSquareTexture;                                       // 0x0C78(0x0004)
	class UTexture2D*                                  LargeVertex;                                              // 0x0C7C(0x0004)
	class UTexture2D*                                  BSPVertex;                                                // 0x0C80(0x0004)
	class UTextureCube*                                CubeMapOverride;                                          // 0x0C84(0x0004) (Edit)
	float                                              PointLightRadiusGlobalModifyer;                           // 0x0C88(0x0004) (Edit)
	TArray<struct FString>                             DeferredExecs;                                            // 0x0C8C(0x000C) (NeedCtorLink)
	class AGameReplicationInfo*                        GRI;                                                      // 0x0C98(0x0004) (Transient)
	TEnumAsByte<ENetMode>                              NetMode;                                                  // 0x0C9C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C9D(0x0003) MISSED OFFSET
	struct FString                                     ComputerName;                                             // 0x0CA0(0x000C) (NeedCtorLink)
	struct FString                                     EngineVersion;                                            // 0x0CAC(0x000C) (NeedCtorLink)
	struct FString                                     MinNetVersion;                                            // 0x0CB8(0x000C) (NeedCtorLink)
	class AGameInfo*                                   Game;                                                     // 0x0CC4(0x0004)
	float                                              StallZ;                                                   // 0x0CC8(0x0004) (Edit)
	float                                              WorldGravityZ;                                            // 0x0CCC(0x0004) (Net, Transient)
	float                                              DefaultGravityZ;                                          // 0x0CD0(0x0004) (Const, Config, GlobalConfig)
	float                                              GlobalGravityZ;                                           // 0x0CD4(0x0004) (Edit)
	float                                              RBPhysicsGravityScaling;                                  // 0x0CD8(0x0004) (Config, GlobalConfig)
	class ANavigationPoint*                            NavigationPointList;                                      // 0x0CDC(0x0004) (Const, Transient)
	class AController*                                 ControllerList;                                           // 0x0CE0(0x0004) (Const)
	class APawn*                                       PawnList;                                                 // 0x0CE4(0x0004) (Const)
	class ACoverLink*                                  CoverList;                                                // 0x0CE8(0x0004) (Const, Transient)
	float                                              MoveRepSize;                                              // 0x0CEC(0x0004)
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x0CF0(0x000C) (Const, NeedCtorLink)
	struct FString                                     NextURL;                                                  // 0x0CFC(0x000C) (NeedCtorLink)
	float                                              NextSwitchCountdown;                                      // 0x0D08(0x0004)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0D0C(0x0004) (Edit)
	struct FVector                                     DefaultColorScale;                                        // 0x0D10(0x000C) (Edit)
	TArray<class UClass*>                              GameTypesSupportedOnThisMap;                              // 0x0D1C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               PreparingLevelNames;                                      // 0x0D28(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FName>                               CommittedLevelNames;                                      // 0x0D34(0x000C) (Const, Transient, NeedCtorLink)
	class USeqAct_CrossFadeMusicTracks*                LastMusicAction;                                          // 0x0D40(0x0004)
	struct FMusicTrackStruct                           LastMusicTrack;                                           // 0x0D44(0x0024)
	struct FString                                     Title;                                                    // 0x0D68(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Author;                                                   // 0x0D74(0x000C) (Edit, NeedCtorLink)
	class UMapInfo*                                    MyMapInfo;                                                // 0x0D80(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FString                                     EmitterPoolClassPath;                                     // 0x0D84(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class AEmitterPool*                                MyEmitterPool;                                            // 0x0D90(0x0004)
	struct FString                                     DecalManagerClassPath;                                    // 0x0D94(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class ADecalManager*                               MyDecalManager;                                           // 0x0DA0(0x0004)
	float                                              MaxPhysicsDeltaTime;                                      // 0x0DA4(0x0004) (Edit)
	struct FPhysXSceneTimings                          PhysicsTimings;                                           // 0x0DA8(0x003C) (Edit, EditInline)
	TArray<struct FCompartmentRunList>                 CompartmentRunFrames;                                     // 0x0DE4(0x000C) (Edit, EditConst, NeedCtorLink)
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                          // 0x0DF0(0x0004)
	struct FPhysXVerticalProperties                    VerticalProperties;                                       // 0x0DF4(0x0018) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldInfo");
		return ptr;
	}


	void DoMemoryTracking();
	bool IsPlayingDemo();
	bool IsRecordingDemo();
	TEnumAsByte<EDetailMode> GetDetailMode();
	struct FString GetMapName(bool bIncludePrefix);
	void SetMapInfo(class UMapInfo* NewMapInfo);
	class UMapInfo* GetMapInfo();
	void SetSeamlessTravelMidpointPause(bool bNowPaused);
	bool IsInSeamlessTravel();
	void SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid);
	void CommitMapChange(bool bShouldSkipLevelStartupEvent, bool bShouldSkipLevelBeginningEvent);
	bool IsMapChangeReady();
	bool IsPreparingMapChange();
	void PrepareMapChange(TArray<struct FName>* LevelNames);
	void NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents);
	void AllPawns(class UClass* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn** P);
	void AllControllers(class UClass* BaseClass, class AController** C);
	void NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs);
	void RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint** N);
	void AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N);
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
	void ThisIsNeverExecuted(class ADefaultPhysicsVolume* P);
	void ServerTravel(const struct FString& URL, bool bAbsolute);
	bool IsLOIEnabled();
	class UClass* GetGameClass();
	struct FString GetAddressURL();
	void VerifyNavList();
	void ForceGarbageCollection(bool bFullPurge);
	bool STATIC_IsPlayInEditor();
	bool STATIC_IsConsoleBuild(TEnumAsByte<EConsoleType> ConsoleType);
	bool STATIC_IsDemoBuild();
	struct FString GetLocalURL();
	void SetLevelRBGravity(const struct FVector& NewGrav);
	class USequence* GetGameSequence();
	float GetGravityZ();
	bool IsServer();
	void SetSceneExposureReset(bool B);
	struct FPostProcessSettings GetModifiedPostProcessSettings();
};


// Class Engine.AIController
// 0x0018 (0x02E4 - 0x02CC)
class AAIController : public AController
{
public:
	unsigned long                                      bHunting : 1;                                             // 0x02CC(0x0004)
	unsigned long                                      bAdjustFromWalls : 1;                                     // 0x02CC(0x0004)
	unsigned long                                      bReverseScriptedRoute : 1;                                // 0x02CC(0x0004)
	float                                              Skill;                                                    // 0x02D0(0x0004)
	class AActor*                                      ScriptedMoveTarget;                                       // 0x02D4(0x0004)
	class ARoute*                                      ScriptedRoute;                                            // 0x02D8(0x0004)
	int                                                ScriptedRouteIndex;                                       // 0x02DC(0x0004)
	class AActor*                                      ScriptedFocus;                                            // 0x02E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIController");
		return ptr;
	}


	bool CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum);
	bool ShouldAutoReload();
	bool ShouldRefire();
	void NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode);
	void NotifyWeaponFired(class AWeapon* W, unsigned char FireMode);
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* Action);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void SetTeam(int inTeamIdx);
	bool PriorityObjective();
	struct FName GetOrders();
	class AActor* GetOrderObject();
	void SetOrders(const struct FName& NewOrders, class AController* OrderGiver);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void Reset();
	void PreBeginPlay();
};


// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroupRenderingComponent");
		return ptr;
	}

};


// Class Engine.CoverMeshComponent
// 0x0024 (0x022C - 0x0208)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FCoverMeshes>                        Meshes;                                                   // 0x0208(0x000C) (NeedCtorLink)
	struct FVector                                     LocationOffset;                                           // 0x0214(0x000C)
	class UStaticMesh*                                 AutoAdjustOn;                                             // 0x0220(0x0004)
	class UStaticMesh*                                 AutoAdjustOff;                                            // 0x0224(0x0004)
	class UStaticMesh*                                 Disabled;                                                 // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverMeshComponent");
		return ptr;
	}

};


// Class Engine.PathGoalEvaluator
// 0x000C (0x0048 - 0x003C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                            // 0x003C(0x0004) (Const)
	class ANavigationPoint*                            GeneratedGoal;                                            // 0x0040(0x0004) (Const)
	int                                                MaxPathVisits;                                            // 0x0044(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathGoalEvaluator");
		return ptr;
	}

};


// Class Engine.Goal_AtActor
// 0x000C (0x0054 - 0x0048)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                                // 0x0048(0x0004)
	float                                              GoalDist;                                                 // 0x004C(0x0004)
	unsigned long                                      bKeepPartial : 1;                                         // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Goal_AtActor");
		return ptr;
	}


	bool STATIC_AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial);
};


// Class Engine.PathConstraint
// 0x0004 (0x0040 - 0x003C)
class UPathConstraint : public UObject
{
public:
	class UPathConstraint*                             NextConstraint;                                           // 0x003C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathConstraint");
		return ptr;
	}

};


// Class Engine.Path_AlongLine
// 0x000C (0x004C - 0x0040)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                                // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_AlongLine");
		return ptr;
	}


	bool STATIC_AlongLine(class APawn* P, const struct FVector& Dir);
};


// Class Engine.Path_TowardGoal
// 0x0004 (0x0044 - 0x0040)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                                // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_TowardGoal");
		return ptr;
	}


	bool STATIC_TowardGoal(class APawn* P, class AActor* Goal);
};


// Class Engine.PathRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathRenderingComponent");
		return ptr;
	}

};


// Class Engine.RouteRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RouteRenderingComponent");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x004E - 0x003C)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                              // 0x003C(0x000C) (NeedCtorLink)
	unsigned long                                      bNeedsSkeleton : 1;                                       // 0x0048(0x0004)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x004C(0x0001)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x004D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0000 (0x004E - 0x004E)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	int                                                MinKeys;                                                  // 0x0050(0x0004) (Edit)
	unsigned long                                      bStartAtSecondKey : 1;                                    // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0000 (0x004E - 0x004E)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RevertToRaw");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendBase
// 0x0010 (0x00CC - 0x00BC)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray<struct FAnimBlendChild>                     Children;                                                 // 0x00BC(0x000C) (ExportObject, EditFixedSize, NeedCtorLink, EditInline)
	unsigned long                                      bFixNumChildren : 1;                                      // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBase");
		return ptr;
	}


	void StopAnim();
	void PlayAnim(bool bLoop, float Rate, float StartTime);
};


// Class Engine.AnimNodeAimOffset
// 0x0048 (0x0114 - 0x00CC)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                                      // 0x00CC(0x0008) (Edit)
	struct FVector2D                                   AngleOffset;                                              // 0x00D4(0x0008) (Edit)
	unsigned long                                      bForceAimDir : 1;                                         // 0x00DC(0x0004) (Edit)
	unsigned long                                      bBakeFromAnimations : 1;                                  // 0x00DC(0x0004) (Edit)
	int                                                PassThroughAtOrAboveLOD;                                  // 0x00E0(0x0004) (Edit)
	TEnumAsByte<EAnimAimDir>                           ForcedAimDir;                                             // 0x00E4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	TArray<unsigned char>                              RequiredBones;                                            // 0x00E8(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        BoneToAimCpnt;                                            // 0x00F4(0x000C) (Transient, NeedCtorLink)
	class UAnimNodeAimOffset*                          TemplateNode;                                             // 0x0100(0x0004) (Transient)
	TArray<struct FAimOffsetProfile>                   Profiles;                                                 // 0x0104(0x000C) (Edit, EditConst, NeedCtorLink)
	int                                                CurrentProfileIndex;                                      // 0x0110(0x0004) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeAimOffset");
		return ptr;
	}


	void SetActiveProfileByIndex(int ProfileIndex);
	void SetActiveProfileByName(const struct FName& ProfileName);
};


// Class Engine.AnimNodeBlend
// 0x000C (0x00D8 - 0x00CC)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                             // 0x00CC(0x0004)
	float                                              Child2WeightTarget;                                       // 0x00D0(0x0004)
	float                                              BlendTimeToGo;                                            // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlend");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class Engine.AnimNodeBlendList
// 0x0018 (0x00E4 - 0x00CC)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray<float>                                      TargetWeight;                                             // 0x00CC(0x000C) (NeedCtorLink)
	float                                              BlendTimeToGo;                                            // 0x00D8(0x0004)
	int                                                ActiveChildIndex;                                         // 0x00DC(0x0004)
	unsigned long                                      bPlayActiveChild : 1;                                     // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendList");
		return ptr;
	}


	void SetActiveChild(int ChildIndex, float BlendTime);
};


// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x00FC - 0x00E4)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	TEnumAsByte<EBaseBlendType>                        Type;                                                     // 0x00E4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	struct FName                                       ActorTag;                                                 // 0x00E8(0x0008) (Edit)
	class UClass*                                      ActorClass;                                               // 0x00F0(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x00F4(0x0004) (Edit)
	class AActor*                                      CachedBase;                                               // 0x00F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByBase");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x00E4 - 0x00E4)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPhysics");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x00E4 - 0x00E4)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPosture");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendBySpeed
// 0x0024 (0x0108 - 0x00E4)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                                    // 0x00E4(0x0004)
	int                                                LastChannel;                                              // 0x00E8(0x0004)
	float                                              BlendUpTime;                                              // 0x00EC(0x0004) (Edit)
	float                                              BlendDownTime;                                            // 0x00F0(0x0004) (Edit)
	float                                              BlendDownPerc;                                            // 0x00F4(0x0004) (Edit)
	TArray<float>                                      Constraints;                                              // 0x00F8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendDirectional
// 0x000C (0x00D8 - 0x00CC)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                                      // 0x00CC(0x0004) (Edit)
	float                                              DirAngle;                                                 // 0x00D0(0x0004)
	int                                                SingleAnimAtOrAboveLOD;                                   // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendDirectional");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendMultiBone
// 0x0018 (0x00E4 - 0x00CC)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray<struct FChildBoneBlendInfo>                 BlendTargetList;                                          // 0x00CC(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              SourceRequiredBones;                                      // 0x00D8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendMultiBone");
		return ptr;
	}


	void SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease);
};


// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x0100 - 0x00D8)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                                // 0x00D8(0x0004) (Edit, Const)
	unsigned long                                      bOnlyJointsBelowParent : 1;                               // 0x00D8(0x0004) (Edit)
	TArray<struct FName>                               BranchStartBoneName;                                      // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      Child2PerBoneWeight;                                      // 0x00E8(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              LocalToCompReqBones;                                      // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendPerBone");
		return ptr;
	}

};


// Class Engine.AnimNodeCrossfader
// 0x0010 (0x00E8 - 0x00D8)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                                       // 0x00D8(0x0008) (Edit)
	unsigned long                                      bDontBlendOutOneShot : 1;                                 // 0x00E0(0x0004) (Const)
	float                                              PendingBlendOutTimeOneShot;                               // 0x00E4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeCrossfader");
		return ptr;
	}


	class UAnimNodeSequence* GetActiveChild();
	struct FName GetAnimName();
	void BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate);
	void PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate);
};


// Class Engine.AnimNodeMirror
// 0x0004 (0x00D0 - 0x00CC)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                                     // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeMirror");
		return ptr;
	}

};


// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x00E0 - 0x00D8)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x00D8(0x0004)
	float                                              CustomPendingBlendOutTime;                                // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodePlayCustomAnim");
		return ptr;
	}


	void SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const struct FName& AnimName);
	void StopCustomAnim(float BlendOutTime);
	void PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
	float PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
};


// Class Engine.AnimNodeRandom
// 0x0014 (0x00F8 - 0x00E4)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray<struct FRandomAnimInfo>                     RandomInfo;                                               // 0x00E4(0x000C) (Edit, EditFixedSize, NeedCtorLink, EditInline)
	class UAnimNodeSequence*                           PlayingSeqNode;                                           // 0x00F0(0x0004) (Transient)
	int                                                PendingChildIndex;                                        // 0x00F4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeRandom");
		return ptr;
	}

};


// Class Engine.AnimNodeScalePlayRate
// 0x0004 (0x00D0 - 0x00CC)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                             // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScalePlayRate");
		return ptr;
	}

};


// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x00D4 - 0x00D0)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                                // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScaleRateBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeSequence
// 0x0082 (0x013E - 0x00BC)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                              // 0x00BC(0x0008) (Edit, Const)
	float                                              Rate;                                                     // 0x00C4(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x00C8(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x00C8(0x0004) (Edit)
	unsigned long                                      bCauseActorAnimEnd : 1;                                   // 0x00C8(0x0004) (Edit)
	unsigned long                                      bCauseActorAnimPlay : 1;                                  // 0x00C8(0x0004) (Edit)
	unsigned long                                      bUseLegRotationHack2 : 1;                                 // 0x00C8(0x0004)
	unsigned long                                      bZeroRootRotation : 1;                                    // 0x00C8(0x0004) (Edit)
	unsigned long                                      bZeroRootTranslation : 1;                                 // 0x00C8(0x0004) (Edit)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x00C8(0x0004) (Edit)
	unsigned long                                      bNoNotifies : 1;                                          // 0x00C8(0x0004) (Edit)
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                          // 0x00C8(0x0004) (Edit)
	unsigned long                                      bIgnoreRootOffset : 1;                                    // 0x00C8(0x0004) (Edit)
	unsigned long                                      bIsIssuingNotifies : 1;                                   // 0x00C8(0x0004)
	unsigned long                                      bForceAlwaysSlave : 1;                                    // 0x00C8(0x0004) (Edit)
	unsigned long                                      bForceAlwaysMaster : 1;                                   // 0x00C8(0x0004) (Edit)
	unsigned long                                      bSynchronize : 1;                                         // 0x00C8(0x0004) (Edit, Const)
	unsigned long                                      bShowTimeLineSlider : 1;                                  // 0x00C8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FMatrix                                     AdjustForLegRotationSpaceHack;                            // 0x00D0(0x0040)
	float                                              CurrentTime;                                              // 0x0110(0x0004) (Edit, Const)
	float                                              PreviousTime;                                             // 0x0114(0x0004) (Const, Transient)
	class UAnimSequence*                               AnimSeq;                                                  // 0x0118(0x0004) (Const, Transient)
	int                                                AnimLinkupIndex;                                          // 0x011C(0x0004) (Const, Transient)
	float                                              NotifyWeightThreshold;                                    // 0x0120(0x0004) (Edit)
	struct FName                                       SynchGroupName;                                           // 0x0124(0x0008) (Edit, Const)
	float                                              SynchPosOffset;                                           // 0x012C(0x0004) (Edit)
	class UTexture2D*                                  DebugTrack;                                               // 0x0130(0x0004)
	class UTexture2D*                                  DebugCarat;                                               // 0x0134(0x0004)
	TEnumAsByte<ERootBoneAxis>                         RootBoneOption[0x3];                                      // 0x0138(0x0001) (Edit)
	TEnumAsByte<ERootRotationOption>                   RootRotationOption[0x3];                                  // 0x013B(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequence");
		return ptr;
	}


	float GetTimeLeft();
	float GetAnimPlaybackLength();
	float GetGlobalPlayRate();
	float FindNormalizedPositionFromGroupRelativePosition(float GroupRelativePosition);
	float GetNormalizedPosition();
	void SetPosition(float NewTime, bool bFireNotifies);
	void StopAnim();
	void PlayAnim(bool bLoop, float InRate, float StartTime);
	void SetAnim(const struct FName& Sequence);
};


// Class Engine.AnimNodeSequenceBlendBase
// 0x000E (0x014C - 0x013E)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x013E(0x0002) MISSED OFFSET
	TArray<struct FAnimBlendInfo>                      Anims;                                                    // 0x0140(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendBase");
		return ptr;
	}

};


// Class Engine.AnimNodeSequenceBlendByAim
// 0x0068 (0x01B4 - 0x014C)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                                      // 0x014C(0x0008) (Edit)
	struct FVector2D                                   HorizontalRange;                                          // 0x0154(0x0008) (Edit)
	struct FVector2D                                   VerticalRange;                                            // 0x015C(0x0008) (Edit)
	struct FVector2D                                   AngleOffset;                                              // 0x0164(0x0008) (Edit)
	struct FName                                       AnimName_LU;                                              // 0x016C(0x0008) (Edit)
	struct FName                                       AnimName_LC;                                              // 0x0174(0x0008) (Edit)
	struct FName                                       AnimName_LD;                                              // 0x017C(0x0008) (Edit)
	struct FName                                       AnimName_CU;                                              // 0x0184(0x0008) (Edit)
	struct FName                                       AnimName_CC;                                              // 0x018C(0x0008) (Edit)
	struct FName                                       AnimName_CD;                                              // 0x0194(0x0008) (Edit)
	struct FName                                       AnimName_RU;                                              // 0x019C(0x0008) (Edit)
	struct FName                                       AnimName_RC;                                              // 0x01A4(0x0008) (Edit)
	struct FName                                       AnimName_RD;                                              // 0x01AC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendByAim");
		return ptr;
	}

};


// Class Engine.AnimNodeSlot
// 0x0024 (0x00F0 - 0x00CC)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x00CC(0x0004) (Const)
	float                                              PendingBlendOutTime;                                      // 0x00D0(0x0004) (Const)
	int                                                CustomChildIndex;                                         // 0x00D4(0x0004) (Const)
	int                                                TargetChildIndex;                                         // 0x00D8(0x0004) (Const)
	TArray<float>                                      TargetWeight;                                             // 0x00DC(0x000C) (NeedCtorLink)
	float                                              BlendTimeToGo;                                            // 0x00E8(0x0004) (Const)
	class UAnimNodeSynch*                              SynchNode;                                                // 0x00EC(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSlot");
		return ptr;
	}


	void AddToSynchGroup(const struct FName& GroupName);
	void SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const struct FName& AnimName);
	void StopCustomAnim(float BlendOutTime);
	struct FName GetPlayedAnimation();
	void PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
	float PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
};


// Class Engine.AnimNodeSynch
// 0x000C (0x00D8 - 0x00CC)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray<struct FSynchGroup>                         Groups;                                                   // 0x00CC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSynch");
		return ptr;
	}


	void SetGroupRateScale(const struct FName& GroupName, float NewRateScale);
	float GetRelativePosition(const struct FName& GroupName);
	void ForceRelativePosition(const struct FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetMasterNodeOfGroup(const struct FName& GroupName);
	void RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName);
	void AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName);
};


// Class Engine.AnimNotify
// 0x0000 (0x003C - 0x003C)
class UAnimNotify : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}

};


// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                                 // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Footstep");
		return ptr;
	}

};


// Class Engine.AnimNotify_Script
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x003C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Script");
		return ptr;
	}

};


// Class Engine.AnimNotify_Scripted
// 0x0000 (0x003C - 0x003C)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.AnimNotify_Sound
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                                 // 0x003C(0x0004) (Edit)
	unsigned long                                      bFollowActor : 1;                                         // 0x0040(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0044(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Sound");
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x0078 (0x00B4 - 0x003C)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                             // 0x003C(0x0008)
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0044(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              SequenceLength;                                           // 0x0050(0x0004)
	int                                                NumFrames;                                                // 0x0054(0x0004)
	float                                              RateScale;                                                // 0x0058(0x0004) (Edit)
	unsigned long                                      bNoLoopingInterpolation : 1;                              // 0x005C(0x0004) (Edit)
	unsigned long                                      bIgnoreInitialRootOffset : 1;                             // 0x005C(0x0004) (Edit, Transient)
	unsigned long                                      bUsesHiMem : 1;                                           // 0x005C(0x0004) (Const, Native, Transient)
	TArray<struct FRawAnimSequenceTrack>               RawAnimData;                                              // 0x0060(0x000C) (Const, NeedCtorLink)
	TArray<struct FTranslationTrack>                   TranslationData;                                          // 0x006C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FRotationTrack>                      RotationData;                                             // 0x0078(0x000C) (Const, Transient, NeedCtorLink)
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                        // 0x0084(0x0004) (Edit, EditConst, EditInline)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x0088(0x0001) (Const)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x0089(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x008A(0x0002) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                                   // 0x008C(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              CompressedByteStream;                                     // 0x0098(0x000C) (Native)
	struct FPointer                                    CompressedOffsetPtr;                                      // 0x00A4(0x0004) (Const, Native, Transient)
	struct FPointer                                    CompressedStreamPtr;                                      // 0x00A8(0x0004) (Const, Native, Transient)
	int                                                CompressedStreamSize;                                     // 0x00AC(0x0004) (Const, Native, Transient)
	int                                                LapsMirror;                                               // 0x00B0(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}

};


// Class Engine.AnimSet
// 0x003C (0x0078 - 0x003C)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                                    // 0x003C(0x0004) (Edit)
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0040(0x000C) (NeedCtorLink)
	TArray<class UAnimSequence*>                       Sequences;                                                // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0058(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0064(0x000C) (Edit, NeedCtorLink)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}

};


// Class Engine.AnimTree
// 0x00B0 (0x017C - 0x00CC)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	TArray<struct FAnimGroup>                          AnimGroups;                                               // 0x00CC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               PrioritizedSkelBranches;                                  // 0x00D8(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              PriorityList;                                             // 0x00E4(0x000C) (NeedCtorLink)
	TArray<class UMorphNodeBase*>                      RootMorphNodes;                                           // 0x00F0(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FSkelControlListHead>                SkelControlLists;                                         // 0x00FC(0x000C) (ExportObject, NeedCtorLink, EditInline)
	int                                                MorphConnDrawY;                                           // 0x0108(0x0004)
	unsigned long                                      bBeingEdited : 1;                                         // 0x010C(0x0004) (Transient)
	float                                              PreviewPlayRate;                                          // 0x0110(0x0004) (Edit)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0114(0x0004) (Edit)
	TArray<class USkeletalMesh*>                       SocketSkelMesh;                                           // 0x0118(0x000C) (Edit, NeedCtorLink)
	TArray<class UStaticMesh*>                         SocketStaticMesh;                                         // 0x0124(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               SocketName;                                               // 0x0130(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            PreviewAnimSets;                                          // 0x013C(0x000C) (Edit, NeedCtorLink)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x0148(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     PreviewCamPos;                                            // 0x0154(0x000C)
	struct FRotator                                    PreviewCamRot;                                            // 0x0160(0x000C)
	struct FVector                                     PreviewFloorPos;                                          // 0x016C(0x000C)
	int                                                PreviewFloorYaw;                                          // 0x0178(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimTree");
		return ptr;
	}


	int GetGroupIndex(const struct FName& GroupName);
	void SetGroupRateScale(const struct FName& GroupName, float NewRateScale);
	float GetGroupRelativePosition(const struct FName& GroupName);
	void ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetGroupNotifyMaster(const struct FName& GroupName);
	class UAnimNodeSequence* GetGroupSynchMaster(const struct FName& GroupName);
	bool SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound);
	class UMorphNodeBase* FindMorphNode(const struct FName& InNodeName);
	class USkelControlBase* FindSkelControl(const struct FName& InControlName);
};


// Class Engine.CrowdAgent
// 0x007C (0x023C - 0x01C0)
class ACrowdAgent : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                                  // 0x01C0(0x0004)
	TEnumAsByte<EAgentMoveState>                       AgentState;                                               // 0x01C4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET
	float                                              EndActionTime;                                            // 0x01C8(0x0004)
	float                                              NextActionTime;                                           // 0x01CC(0x0004)
	float                                              VelDamping;                                               // 0x01D0(0x0004)
	struct FRotator                                    ToTargetRot;                                              // 0x01D4(0x000C)
	unsigned long                                      bRotateToTargetRot : 1;                                   // 0x01E0(0x0004)
	unsigned long                                      bHadNearbyTarget : 1;                                     // 0x01E0(0x0004)
	unsigned long                                      bTargetZPosInitialized : 1;                               // 0x01E0(0x0004)
	struct FVector                                     CurrentMoveTargetPos;                                     // 0x01E4(0x000C)
	float                                              InterpZTranslation;                                       // 0x01F0(0x0004)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x01F4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAnimNodeBlend*                              SpeedBlendNode;                                           // 0x01F8(0x0004)
	class UAnimNodeBlend*                              ActionBlendNode;                                          // 0x01FC(0x0004)
	class UAnimNodeSequence*                           ActionSeqNode;                                            // 0x0200(0x0004)
	class UAnimNodeSequence*                           WalkSeqNode;                                              // 0x0204(0x0004)
	class UAnimNodeSequence*                           RunSeqNode;                                               // 0x0208(0x0004)
	class UAnimTree*                                   AgentTree;                                                // 0x020C(0x0004)
	int                                                Health;                                                   // 0x0210(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0214(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	int                                                ConformTraceFrameCount;                                   // 0x0218(0x0004) (Transient)
	int                                                AwareUpdateFrameCount;                                    // 0x021C(0x0004) (Transient)
	TArray<class ACrowdAgent*>                         NearbyAgents;                                             // 0x0220(0x000C) (Transient, NeedCtorLink)
	TArray<class ACrowdAttractor*>                     RelevantAttractors;                                       // 0x022C(0x000C) (Transient, NeedCtorLink)
	class UReachSpec*                                  NearestPath;                                              // 0x0238(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdAgent");
		return ptr;
	}


	void SpawnActionEffect(const struct FVector& ActionTarget);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void PlayDeath();
};


// Class Engine.CrowdAttractor
// 0x0021 (0x01E1 - 0x01C0)
class ACrowdAttractor : public AActor
{
public:
	float                                              Attraction;                                               // 0x01C0(0x0004) (Edit)
	unsigned long                                      bAttractorEnabled : 1;                                    // 0x01C4(0x0004) (Edit)
	unsigned long                                      bAttractionFalloff : 1;                                   // 0x01C4(0x0004) (Edit)
	unsigned long                                      bActionAtThisAttractor : 1;                               // 0x01C4(0x0004) (Edit)
	unsigned long                                      bKillWhenReached : 1;                                     // 0x01C4(0x0004) (Edit)
	float                                              ActionRadiusScale;                                        // 0x01C8(0x0004) (Edit)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01CC(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              AttractionRadius;                                         // 0x01D0(0x0004)
	float                                              AttractionHeight;                                         // 0x01D4(0x0004)
	float                                              KillDist;                                                 // 0x01D8(0x0004) (Edit)
	class AActor*                                      ActionTarget;                                             // 0x01DC(0x0004) (Edit)
	TEnumAsByte<ECrowdAttractorMode>                   Mode;                                                     // 0x01E0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdAttractor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.MorphNodeBase
// 0x0024 (0x0060 - 0x003C)
class UMorphNodeBase : public UObject
{
public:
	struct FName                                       NodeName;                                                 // 0x003C(0x0008) (Edit)
	unsigned long                                      bDrawSlider : 1;                                          // 0x0044(0x0004)
	class USkeletalMeshComponent*                      SkelComponent;                                            // 0x0048(0x0004) (ExportObject, Component, EditInline)
	int                                                NodePosX;                                                 // 0x004C(0x0004)
	int                                                NodePosY;                                                 // 0x0050(0x0004)
	int                                                DrawWidth;                                                // 0x0054(0x0004)
	int                                                DrawHeight;                                               // 0x0058(0x0004)
	int                                                OutDrawY;                                                 // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeBase");
		return ptr;
	}

};


// Class Engine.MorphNodePose
// 0x0010 (0x0070 - 0x0060)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                                   // 0x0060(0x0004) (Transient)
	struct FName                                       MorphName;                                                // 0x0064(0x0008) (Edit)
	float                                              Weight;                                                   // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodePose");
		return ptr;
	}


	void SetMorphTarget(const struct FName& MorphTargetName);
};


// Class Engine.MorphNodeWeightBase
// 0x000C (0x006C - 0x0060)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray<struct FMorphNodeConn>                      NodeConns;                                                // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightBase");
		return ptr;
	}

};


// Class Engine.MorphNodeWeight
// 0x0004 (0x0070 - 0x006C)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                               // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeight");
		return ptr;
	}


	void SetNodeWeight(float NewWeight);
};


// Class Engine.MorphTarget
// 0x000C (0x0048 - 0x003C)
class UMorphTarget : public UObject
{
public:
	TArray<int>                                        MorphLODModels;                                           // 0x003C(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}

};


// Class Engine.MorphTargetSet
// 0x0010 (0x004C - 0x003C)
class UMorphTargetSet : public UObject
{
public:
	TArray<class UMorphTarget*>                        Targets;                                                  // 0x003C(0x000C) (NeedCtorLink)
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTargetSet");
		return ptr;
	}


	class UMorphTarget* FindMorphTarget(const struct FName& MorphTargetName);
};


// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphWeightSequence");
		return ptr;
	}

};


// Class Engine.SkelControlBase
// 0x0058 (0x0094 - 0x003C)
class USkelControlBase : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                            // 0x003C(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	struct FName                                       ControlName;                                              // 0x0040(0x0008) (Edit)
	float                                              ControlStrength;                                          // 0x0048(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x004C(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0050(0x0004) (Edit)
	float                                              StrengthTarget;                                           // 0x0054(0x0004)
	float                                              BlendTimeToGo;                                            // 0x0058(0x0004)
	unsigned long                                      bSetStrengthFromAnimNode : 1;                             // 0x005C(0x0004) (Edit)
	unsigned long                                      bInitializedCachedNodeList : 1;                           // 0x005C(0x0004) (Transient)
	unsigned long                                      bPropagateSetActive : 1;                                  // 0x005C(0x0004) (Edit)
	unsigned long                                      bIgnoreWhenNotRendered : 1;                               // 0x005C(0x0004) (Edit)
	unsigned long                                      bEnableEaseInOut : 1;                                     // 0x005C(0x0004) (Edit)
	TArray<struct FName>                               StrengthAnimNodeNameList;                                 // 0x0060(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimNode*>                           CachedNodeList;                                           // 0x006C(0x000C) (Transient, NeedCtorLink)
	float                                              BoneScale;                                                // 0x0078(0x0004) (Edit)
	int                                                ControlTickTag;                                           // 0x007C(0x0004)
	int                                                IgnoreAtOrAboveLOD;                                       // 0x0080(0x0004) (Edit)
	class USkelControlBase*                            NextControl;                                              // 0x0084(0x0004)
	int                                                ControlPosX;                                              // 0x0088(0x0004)
	int                                                ControlPosY;                                              // 0x008C(0x0004)
	int                                                DrawWidth;                                                // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlBase");
		return ptr;
	}


	void SetSkelControlStrength(float NewStrength, float InBlendTime);
	void SetSkelControlActive(bool bInActive);
};


// Class Engine.SkelControlLimb
// 0x0030 (0x00C4 - 0x0094)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                         // 0x0094(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     EffectorLocationSpace;                                    // 0x00A0(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     JointTargetLocationSpace;                                 // 0x00A1(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x00A2(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 JointAxis;                                                // 0x00A3(0x0001) (Edit)
	struct FName                                       EffectorSpaceBoneName;                                    // 0x00A4(0x0008) (Edit)
	struct FVector                                     JointTargetLocation;                                      // 0x00AC(0x000C) (Edit)
	struct FName                                       JointTargetSpaceBoneName;                                 // 0x00B8(0x0008) (Edit)
	unsigned long                                      bInvertBoneAxis : 1;                                      // 0x00C0(0x0004) (Edit)
	unsigned long                                      bInvertJointAxis : 1;                                     // 0x00C0(0x0004) (Edit)
	unsigned long                                      bMaintainEffectorRelRot : 1;                              // 0x00C0(0x0004) (Edit)
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;                       // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLimb");
		return ptr;
	}

};


// Class Engine.SkelControlFootPlacement
// 0x0024 (0x00E8 - 0x00C4)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                               // 0x00C4(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 FootUpAxis;                                               // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	struct FRotator                                    FootRotOffset;                                            // 0x00CC(0x000C) (Edit)
	unsigned long                                      bInvertFootUpAxis : 1;                                    // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOrientFootToGround : 1;                                  // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                           // 0x00D8(0x0004) (Edit)
	float                                              MaxUpAdjustment;                                          // 0x00DC(0x0004) (Edit)
	float                                              MaxDownAdjustment;                                        // 0x00E0(0x0004) (Edit)
	float                                              MaxFootOrientAdjust;                                      // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlFootPlacement");
		return ptr;
	}

};


// Class Engine.SkelControlLookAt
// 0x0070 (0x0104 - 0x0094)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                           // 0x0094(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     TargetLocationSpace;                                      // 0x00A0(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 LookAtAxis;                                               // 0x00A1(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 UpAxis;                                                   // 0x00A2(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     AllowRotationSpace;                                       // 0x00A3(0x0001) (Edit)
	struct FName                                       TargetSpaceBoneName;                                      // 0x00A4(0x0008) (Edit)
	unsigned long                                      bInvertLookAtAxis : 1;                                    // 0x00AC(0x0004) (Edit)
	unsigned long                                      bDefineUpAxis : 1;                                        // 0x00AC(0x0004) (Edit)
	unsigned long                                      bInvertUpAxis : 1;                                        // 0x00AC(0x0004) (Edit)
	unsigned long                                      bEnableLimit : 1;                                         // 0x00AC(0x0004) (Edit)
	unsigned long                                      bLimitBasedOnRefPose : 1;                                 // 0x00AC(0x0004) (Edit)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x00AC(0x0004) (Edit)
	unsigned long                                      bNotifyBeyondLimit : 1;                                   // 0x00AC(0x0004) (Edit)
	unsigned long                                      bShowLimit : 1;                                           // 0x00AC(0x0004) (Edit)
	unsigned long                                      bAllowRotationX : 1;                                      // 0x00AC(0x0004) (Edit)
	unsigned long                                      bAllowRotationY : 1;                                      // 0x00AC(0x0004) (Edit)
	unsigned long                                      bAllowRotationZ : 1;                                      // 0x00AC(0x0004) (Edit)
	float                                              TargetLocationInterpSpeed;                                // 0x00B0(0x0004) (Edit)
	struct FVector                                     DesiredTargetLocation;                                    // 0x00B4(0x000C)
	float                                              MaxAngle;                                                 // 0x00C0(0x0004) (Edit)
	float                                              DeadZoneAngle;                                            // 0x00C4(0x0004) (Edit)
	struct FName                                       AllowRotationOtherBoneName;                               // 0x00C8(0x0008) (Edit)
	float                                              LookAtAlpha;                                              // 0x00D0(0x0004) (Const, Transient)
	float                                              LookAtAlphaTarget;                                        // 0x00D4(0x0004) (Const, Transient)
	float                                              LookAtAlphaBlendTimeToGo;                                 // 0x00D8(0x0004) (Const, Transient)
	struct FVector                                     LimitLookDir;                                             // 0x00DC(0x000C) (Const, Transient)
	struct FVector                                     BaseLookDir;                                              // 0x00E8(0x000C) (Const, Transient)
	struct FVector                                     BaseBonePos;                                              // 0x00F4(0x000C) (Const, Transient)
	float                                              LastCalcTime;                                             // 0x0100(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLookAt");
		return ptr;
	}


	bool CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst);
	void SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime);
	void InterpolateTargetLocation(float DeltaTime);
	void SetTargetLocation(const struct FVector& NewTargetLocation);
};


// Class Engine.SkelControlSingleBone
// 0x0030 (0x00C4 - 0x0094)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                                    // 0x0094(0x0004) (Edit)
	unsigned long                                      bAddTranslation : 1;                                      // 0x0094(0x0004) (Edit)
	unsigned long                                      bApplyRotation : 1;                                       // 0x0094(0x0004) (Edit)
	unsigned long                                      bAddRotation : 1;                                         // 0x0094(0x0004) (Edit)
	struct FVector                                     BoneTranslation;                                          // 0x0098(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     BoneTranslationSpace;                                     // 0x00A4(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     BoneRotationSpace;                                        // 0x00A5(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET
	struct FName                                       TranslationSpaceBoneName;                                 // 0x00A8(0x0008) (Edit)
	struct FRotator                                    BoneRotation;                                             // 0x00B0(0x000C) (Edit)
	struct FName                                       RotationSpaceBoneName;                                    // 0x00BC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSingleBone");
		return ptr;
	}

};


// Class Engine.SkelControlSpline
// 0x0014 (0x00A8 - 0x0094)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                             // 0x0094(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 SplineBoneAxis;                                           // 0x0098(0x0001) (Edit)
	TEnumAsByte<ESplineControlRotMode>                 BoneRotMode;                                              // 0x0099(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	unsigned long                                      bInvertSplineBoneAxis : 1;                                // 0x009C(0x0004) (Edit)
	float                                              EndSplineTension;                                         // 0x00A0(0x0004) (Edit)
	float                                              StartSplineTension;                                       // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSpline");
		return ptr;
	}

};


// Class Engine.SkelControlTrail
// 0x0024 (0x00B8 - 0x0094)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                              // 0x0094(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 ChainBoneAxis;                                            // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned long                                      bInvertChainBoneAxis : 1;                                 // 0x009C(0x0004) (Edit)
	unsigned long                                      bLimitStretch : 1;                                        // 0x009C(0x0004) (Edit)
	unsigned long                                      bHadValidStrength : 1;                                    // 0x009C(0x0004)
	float                                              TrailRelaxation;                                          // 0x00A0(0x0004) (Edit)
	float                                              StretchLimit;                                             // 0x00A4(0x0004) (Edit)
	float                                              ThisTimstep;                                              // 0x00A8(0x0004)
	TArray<struct FVector>                             TrailBoneLocations;                                       // 0x00AC(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlTrail");
		return ptr;
	}

};


// Class Engine.SkelControlWheel
// 0x0018 (0x00DC - 0x00C4)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                        // 0x00C4(0x0004) (Edit, Transient)
	float                                              WheelMaxRenderDisplacement;                               // 0x00C8(0x0004) (Edit)
	float                                              WheelRoll;                                                // 0x00CC(0x0004) (Edit, Transient)
	TEnumAsByte<EAxis>                                 WheelRollAxis;                                            // 0x00D0(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 WheelSteeringAxis;                                        // 0x00D1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	float                                              WheelSteering;                                            // 0x00D4(0x0004) (Edit, Transient)
	unsigned long                                      bInvertWheelRoll : 1;                                     // 0x00D8(0x0004) (Edit)
	unsigned long                                      bInvertWheelSteering : 1;                                 // 0x00D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlWheel");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0034 (0x01F4 - 0x01C0)
class ASkeletalMeshActor : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x01C0(0x0004) (Edit, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01C4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UAudioComponent*                             FacialAudioComp;                                          // 0x01C8(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x01CC(0x0004) (Net)
	float                                              LOILookAtDelay;                                           // 0x01D0(0x0004) (Edit, Const)
	float                                              LOIProximityDelay;                                        // 0x01D4(0x0004) (Edit, Const)
	float                                              LOIMinDuration;                                           // 0x01D8(0x0004) (Edit, Const)
	float                                              LOIDistance;                                              // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      LOIUse2DDistance : 1;                                     // 0x01E0(0x0004) (Edit, Const)
	TArray<struct FName>                               LOIGroups;                                                // 0x01E4(0x000C) (Edit, Const, NeedCtorLink)
	class UTdLOIAddOnObject*                           TdLOIAddOn;                                               // 0x01F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}


	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void ActivateLOI();
	void AssignPlayerToLOI(class AActor* Player);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void ShutDown();
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnSetSkeletalMesh(class USeqAct_SetSkeletalMesh* Action);
	bool IsActorPlayingFaceFXAnim();
	class UFaceFXAsset* GetActorFaceFXAsset();
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	class UAudioComponent* GetFaceFXAudioComponent();
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName);
	void FinishAnimControl();
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x0200 - 0x01F4)
class ASkeletalMeshActorMAT : public ASkeletalMeshActor
{
public:
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x01F4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMAT");
		return ptr;
	}


	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void FinishAnimControl();
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void MAT_FinishAnimControl();
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
};


// Class Engine.ActorFactoryDecal
// 0x0004 (0x0068 - 0x0064)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDecal");
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0004 (0x01C4 - 0x01C0)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}

};


// Class Engine.DecalComponent
// 0x00EC (0x02A8 - 0x01BC)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x01BC(0x0004) (Edit)
	float                                              Width;                                                    // 0x01C0(0x0004) (Edit)
	float                                              Height;                                                   // 0x01C4(0x0004) (Edit)
	float                                              TileX;                                                    // 0x01C8(0x0004) (Edit)
	float                                              TileY;                                                    // 0x01CC(0x0004) (Edit)
	float                                              OffsetX;                                                  // 0x01D0(0x0004) (Edit)
	float                                              OffsetY;                                                  // 0x01D4(0x0004) (Edit)
	float                                              DecalRotation;                                            // 0x01D8(0x0004) (Edit)
	float                                              FieldOfView;                                              // 0x01DC(0x0004)
	float                                              NearPlane;                                                // 0x01E0(0x0004) (Edit)
	float                                              FarPlane;                                                 // 0x01E4(0x0004) (Edit)
	struct FVector                                     Location;                                                 // 0x01E8(0x000C)
	struct FRotator                                    Orientation;                                              // 0x01F4(0x000C)
	struct FVector                                     HitLocation;                                              // 0x0200(0x000C)
	struct FVector                                     HitNormal;                                                // 0x020C(0x000C)
	struct FVector                                     HitTangent;                                               // 0x0218(0x000C)
	struct FVector                                     HitBinormal;                                              // 0x0224(0x000C)
	unsigned long                                      bNoClip : 1;                                              // 0x0230(0x0004) (Edit)
	unsigned long                                      bStaticDecal : 1;                                         // 0x0230(0x0004) (Const)
	unsigned long                                      bNeverCull : 1;                                           // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnBackfaces : 1;                                  // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnHidden : 1;                                     // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnBSP : 1;                                        // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnStaticMeshes : 1;                               // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                             // 0x0230(0x0004) (Edit)
	unsigned long                                      bProjectOnTerrain : 1;                                    // 0x0230(0x0004) (Edit)
	unsigned long                                      bFlipBackfaceDirection : 1;                               // 0x0230(0x0004)
	class UPrimitiveComponent*                         HitComponent;                                             // 0x0234(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FName                                       HitBone;                                                  // 0x0238(0x0008) (Transient)
	int                                                HitNodeIndex;                                             // 0x0240(0x0004) (Transient)
	int                                                HitLevelIndex;                                            // 0x0244(0x0004) (Transient)
	TArray<int>                                        HitNodeIndices;                                           // 0x0248(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FDecalReceiver>                      DecalReceivers;                                           // 0x0254(0x000C) (Const, Component, DuplicateTransient, NeedCtorLink, NoImport)
	TArray<struct FPointer>                            StaticReceivers;                                          // 0x0260(0x000C) (Const, Native, Transient, DuplicateTransient, NoImport)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x026C(0x0004) (Const, Native, Transient, DuplicateTransient)
	TArray<struct FPlane>                              Planes;                                                   // 0x0270(0x000C) (Transient, NeedCtorLink)
	float                                              DepthBias;                                                // 0x027C(0x0004) (Edit)
	float                                              SlopeScaleDepthBias;                                      // 0x0280(0x0004) (Edit)
	int                                                SortOrder;                                                // 0x0284(0x0004) (Edit)
	float                                              BackfaceAngle;                                            // 0x0288(0x0004) (Edit)
	TEnumAsByte<EFilterMode>                           FilterMode;                                               // 0x028C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x028D(0x0003) MISSED OFFSET
	TArray<class AActor*>                              Filter;                                                   // 0x0290(0x000C) (Edit, NeedCtorLink)
	TArray<class UPrimitiveComponent*>                 ReceiverImages;                                           // 0x029C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}


	void ResetToDefaults();
};


// Class Engine.DecalManager
// 0x0028 (0x01E8 - 0x01C0)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                            // 0x01C0(0x0004) (ExportObject, Component, EditInline)
	TArray<class UDecalComponent*>                     PoolDecals;                                               // 0x01C4(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxActiveDecals;                                          // 0x01D0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLogPoolOverflow : 1;                                     // 0x01D4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLogPoolOverflowList : 1;                                 // 0x01D4(0x0004) (Config, GlobalConfig)
	float                                              DecalLifeSpan;                                            // 0x01D8(0x0004) (Config, GlobalConfig)
	TArray<struct FActiveDecalInfo>                    ActiveDecals;                                             // 0x01DC(0x000C) (Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalManager");
		return ptr;
	}


	class UDecalComponent* SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan);
	void ResetPool();
	bool CanSpawnDecals();
	void DecalFinished(class UDecalComponent* Decal);
	bool STATIC_AreDynamicDecalsEnabled();
};


// Class Engine.DecalMaterial
// 0x0000 (0x02BC - 0x02BC)
class UDecalMaterial : public UMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalMaterial");
		return ptr;
	}

};


// Class Engine.FogVolumeDensityComponent
// 0x0027 (0x007C - 0x0055)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	struct FLinearColor                                ApproxFogLightColor;                                      // 0x005C(0x0010) (Edit)
	float                                              StartDistance;                                            // 0x006C(0x0004) (Edit)
	TArray<class AActor*>                              FogVolumeActors;                                          // 0x0070(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00A4 - 0x007C)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x007C(0x0004) (Edit)
	struct FVector                                     ConeVertex;                                               // 0x0080(0x000C) (Edit)
	float                                              ConeRadius;                                               // 0x008C(0x0004) (Edit)
	struct FVector                                     ConeAxis;                                                 // 0x0090(0x000C) (Edit)
	float                                              ConeMaxAngle;                                             // 0x009C(0x0004) (Edit)
	class UDrawLightConeComponent*                     PreviewCone;                                              // 0x00A0(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeDensityInfo
// 0x0008 (0x01C8 - 0x01C0)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                         // 0x01C0(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01C4(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityInfo");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x01C8 - 0x01C8)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x0080 - 0x007C)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                                  // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x01C8 - 0x01C8)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0014 (0x0090 - 0x007C)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                                      // 0x007C(0x0004) (Edit)
	struct FPlane                                      HalfspacePlane;                                           // 0x0080(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x01C8 - 0x01C8)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x0094 - 0x007C)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x007C(0x0004) (Edit)
	struct FVector                                     SphereCenter;                                             // 0x0080(0x000C) (Edit)
	float                                              SphereRadius;                                             // 0x008C(0x0004) (Edit)
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                                      // 0x0090(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x01C8 - 0x01C8)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityInfo");
		return ptr;
	}

};


// Class Engine.FracturedStaticMeshComponent
// 0x002C (0x0234 - 0x0208)
class UFracturedStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct FIndirectArray_Mirror                       LODResources;                                             // 0x0208(0x000C) (Const, Native)
	TArray<unsigned char>                              VisibleFragments;                                         // 0x0214(0x000C) (Const, NeedCtorLink)
	TArray<struct FFracturedElementRanges>             ElementRanges;                                            // 0x0220(0x000C) (Const, NeedCtorLink)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                                    // 0x022C(0x0004) (Const, Native, Transient)
	unsigned long                                      bUseVisibleVertsForBounds : 1;                            // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshComponent");
		return ptr;
	}


	TArray<struct FFragmentGroup> GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea);
	int GetCoreFragmentIndex();
	int GetNumFragments();
	struct FVector GetFragmentAverageExteriorNormal(int FragmentIndex);
	struct FBox GetFragmentBox(int FragmentIndex);
	bool IsRootFragment(int FragmentIndex);
	bool IsFragmentDestroyable(int FragmentIndex);
	bool IsFragmentVisible(int FragmentIndex);
	TArray<unsigned char> GetVisibleFragments();
	void SetVisibleFragments(TArray<unsigned char> VisibilityFactors);
	bool SetStaticMesh(class UStaticMesh* NewMesh);
};


// Class Engine.FracturedStaticMeshActor
// 0x0010 (0x01D0 - 0x01C0)
class AFracturedStaticMeshActor : public AActor
{
public:
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                             // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	TArray<int>                                        ChunkHealth;                                              // 0x01C4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshActor");
		return ptr;
	}


	void BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength);
	void Explode();
	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	TArray<unsigned char> BreakOffIsolatedIslands(TArray<unsigned char> FragmentVis, TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart);
	void ResetHealth();
	void PostBeginPlay();
	void RecreatePhysState();
	class AFracturedStaticMeshPart* SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel);
	class AFracturedStaticMeshPart* SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel);
};


// Class Engine.FracturedStaticMeshPart
// 0x0008 (0x01D8 - 0x01D0)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01D0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UParticleSystemComponent*                    ParticleComponent;                                        // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshPart");
		return ptr;
	}


	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
};


// Class Engine.InterpFilter
// 0x000C (0x0048 - 0x003C)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0004 (0x004C - 0x0048)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                          // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x000C (0x0054 - 0x0048)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray<class UInterpGroup*>                        GroupsToInclude;                                          // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x002C (0x0068 - 0x003C)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0040(0x000C) (ExportObject, NeedCtorLink)
	struct FName                                       GroupName;                                                // 0x004C(0x0008)
	struct FColor                                      GroupColor;                                               // 0x0054(0x0004) (Edit)
	TArray<class UAnimSet*>                            GroupAnimSets;                                            // 0x0058(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCollapsed : 1;                                           // 0x0064(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0064(0x0004) (Transient)
	unsigned long                                      bIsFolder : 1;                                            // 0x0064(0x0004)
	unsigned long                                      bIsParented : 1;                                          // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0068 - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0014 (0x0050 - 0x003C)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x003C(0x0004)
	class AActor*                                      GroupActor;                                               // 0x0040(0x0004)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0014 (0x006C - 0x0058)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0058(0x0010) (NeedCtorLink)
	float                                              CurveTension;                                             // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x008C - 0x006C)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x006C(0x000C) (NeedCtorLink)
	struct FName                                       SlotName;                                                 // 0x0078(0x0008) (Edit, EditConst)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x0080(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0014 (0x006C - 0x0058)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0058(0x0010) (NeedCtorLink)
	float                                              CurveTension;                                             // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x006C(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x006C - 0x006C)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x000C (0x0064 - 0x0058)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0058(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0010 (0x0068 - 0x0058)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0058(0x000C) (NeedCtorLink)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x0064(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x0064(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFaceFX
// 0x001C (0x0074 - 0x0058)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                           // 0x0058(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFaceFXTrackKey>                     FaceFXSeqs;                                               // 0x0064(0x000C) (NeedCtorLink)
	class UFaceFXAsset*                                CachedActorFXAsset;                                       // 0x0070(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0004 (0x0070 - 0x006C)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                         // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x006C(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                                   // 0x003C(0x0004)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                                // 0x0044(0x0004)
	struct FColor                                      ResetColor;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                         // 0x003C(0x0004) (Transient)
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                                // 0x0044(0x0004)
	float                                              ResetFloat;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0074 (0x00B0 - 0x003C)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x003C(0x000C)
	struct FRotator                                    ResetRotation;                                            // 0x0048(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                                // 0x0060(0x0040)
	struct FQuat                                       InitialQuat;                                              // 0x00A0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0040(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                              // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0054 - 0x0044)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                               // 0x0044(0x0004)
	struct FVector                                     ResetVector;                                              // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                            // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0042 (0x009A - 0x0058)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0058(0x0010) (NeedCtorLink)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0068(0x0010) (NeedCtorLink)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x0078(0x000C) (NeedCtorLink)
	struct FName                                       LookAtGroupName;                                          // 0x0084(0x0008) (Edit)
	float                                              LinCurveTension;                                          // 0x008C(0x0004) (Edit)
	float                                              AngCurveTension;                                          // 0x0090(0x0004) (Edit)
	unsigned long                                      bUseQuatInterpolation : 1;                                // 0x0094(0x0004) (Edit)
	unsigned long                                      bShowArrowAtKeys : 1;                                     // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableMovement : 1;                                     // 0x0094(0x0004) (Edit)
	unsigned long                                      bShowTranslationOnCurveEd : 1;                            // 0x0094(0x0004) (Edit)
	unsigned long                                      bShowRotationOnCurveEd : 1;                               // 0x0094(0x0004) (Edit)
	unsigned long                                      bHide3DTrack : 1;                                         // 0x0094(0x0004) (Edit)
	TEnumAsByte<EInterpTrackMoveFrame>                 MoveFrame;                                                // 0x0098(0x0001) (Edit, EditConst)
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x0099(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}

};


// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x006C - 0x006C)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0010 (0x007C - 0x006C)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x006C(0x000C) (NeedCtorLink)
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                           // 0x0078(0x0004) (Edit)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0010 (0x0068 - 0x0058)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0058(0x000C) (NeedCtorLink)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0064(0x0004) (Edit)
	unsigned long                                      bActivateSystemEachUpdate : 1;                            // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct FName                                       ParamName;                                                // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0074 - 0x006C)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x006C(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x0040 (0x0098 - 0x0058)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0058(0x001C)
	struct FExpressionInput                            Height;                                                   // 0x0074(0x001C)
	float                                              HeightRatio;                                              // 0x0090(0x0004) (Edit)
	float                                              ReferencePlane;                                           // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x0054 (0x00AC - 0x0058)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	struct FExpressionInput                            Min;                                                      // 0x0074(0x001C)
	struct FExpressionInput                            Max;                                                      // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                                     // 0x0058(0x0004)
	int                                                PosY;                                                     // 0x005C(0x0004)
	int                                                SizeX;                                                    // 0x0060(0x0004)
	int                                                SizeY;                                                    // 0x0064(0x0004)
	struct FString                                     Text;                                                     // 0x0068(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	unsigned long                                      R : 1;                                                    // 0x0074(0x0004) (Edit)
	unsigned long                                      G : 1;                                                    // 0x0074(0x0004) (Edit)
	unsigned long                                      B : 1;                                                    // 0x0074(0x0004) (Edit)
	unsigned long                                      A : 1;                                                    // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCompound
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray<class UMaterialExpression*>                 MaterialExpressions;                                      // 0x0058(0x000C) (Const, NeedCtorLink)
	struct FString                                     Caption;                                                  // 0x0064(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bExpanded : 1;                                            // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCompound");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0004 (0x005C - 0x0058)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0060 - 0x0058)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0058(0x0004) (Edit)
	float                                              G;                                                        // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0064 - 0x0058)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0058(0x0004) (Edit)
	float                                              G;                                                        // 0x005C(0x0004) (Edit)
	float                                              B;                                                        // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0068 - 0x0058)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0058(0x0004) (Edit)
	float                                              G;                                                        // 0x005C(0x0004) (Edit)
	float                                              B;                                                        // 0x0060(0x0004) (Edit)
	float                                              A;                                                        // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantClamp
// 0x0024 (0x007C - 0x0058)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	float                                              Min;                                                      // 0x0074(0x0004) (Edit)
	float                                              Max;                                                      // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	float                                              Period;                                                   // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0058(0x0004) (Edit)
	struct FExpressionInput                            Coordinates;                                              // 0x005C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0024 (0x009C - 0x0078)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0078(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x007C(0x0004) (Edit)
	struct FExpressionInput                            Bias;                                                     // 0x0080(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0040 (0x0098 - 0x0058)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0058(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x005C(0x0004) (Edit)
	struct FExpressionInput                            Alpha;                                                    // 0x0060(0x001C)
	struct FExpressionInput                            Bias;                                                     // 0x007C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedAlpha");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x005C (0x00B4 - 0x0058)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0058(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x005C(0x0004) (Edit)
	struct FExpressionInput                            RGB;                                                      // 0x0060(0x001C)
	struct FExpressionInput                            Alpha;                                                    // 0x007C(0x001C)
	struct FExpressionInput                            Bias;                                                     // 0x0098(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0048 (0x00A0 - 0x0058)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	struct FExpressionInput                            Percent;                                                  // 0x0074(0x001C)
	struct FLinearColor                                LuminanceFactors;                                         // 0x0090(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x005C - 0x0058)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x0078 - 0x0078)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFlipBookSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x0060 - 0x0058)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0058(0x0004) (Edit)
	int                                                FontTexturePage;                                          // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x0078 - 0x0060)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0060(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x0068(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                                 // 0x0058(0x0004) (Edit)
	struct FExpressionInput                            Normal;                                                   // 0x005C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x008C (0x00E4 - 0x0058)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x0090(0x001C)
	struct FExpressionInput                            AEqualsB;                                                 // 0x00AC(0x001C)
	struct FExpressionInput                            ALessThanB;                                               // 0x00C8(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareIntensity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareOcclusion");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRadialDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRayDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareSourceDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x0054 (0x00AC - 0x0058)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)
	struct FExpressionInput                            Alpha;                                                    // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x0078 - 0x0078)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0040 (0x0098 - 0x0058)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0058(0x001C)
	struct FExpressionInput                            Time;                                                     // 0x0074(0x001C)
	float                                              SpeedX;                                                   // 0x0090(0x0004) (Edit)
	float                                              SpeedY;                                                   // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0070 - 0x0058)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0058(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x0060(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x0078 - 0x0078)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x005C - 0x0058)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0058(0x001C)
	struct FExpressionInput                            Exponent;                                                 // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0044 (0x009C - 0x0058)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0058(0x001C)
	struct FExpressionInput                            Time;                                                     // 0x0074(0x001C)
	float                                              CenterX;                                                  // 0x0090(0x0004) (Edit)
	float                                              CenterY;                                                  // 0x0094(0x0004) (Edit)
	float                                              Speed;                                                    // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x0074 - 0x0070)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0058(0x001C)
	unsigned long                                      bNormalize : 1;                                           // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0024 (0x007C - 0x0058)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0058(0x001C)
	TEnumAsByte<ESceneTextureType>                     SceneTextureType;                                         // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	unsigned long                                      ScreenAlign : 1;                                          // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x005C - 0x0058)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                          // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0020 (0x0078 - 0x0058)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	float                                              Period;                                                   // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x001C (0x0074 - 0x0058)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0024 (0x0094 - 0x0070)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x001C)
	unsigned long                                      DefaultR : 1;                                             // 0x008C(0x0004) (Edit)
	unsigned long                                      DefaultG : 1;                                             // 0x008C(0x0004) (Edit)
	unsigned long                                      DefaultB : 1;                                             // 0x008C(0x0004) (Edit)
	unsigned long                                      DefaultA : 1;                                             // 0x008C(0x0004) (Edit)
	struct FPointer                                    InstanceOverride;                                         // 0x0090(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x0070(0x0004) (Edit)
	unsigned long                                      ExtendedCaptionDisplay : 1;                               // 0x0070(0x0004) (Edit)
	struct FExpressionInput                            A;                                                        // 0x0074(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0090(0x001C)
	struct FPointer                                    InstanceOverride;                                         // 0x00AC(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0038 (0x0090 - 0x0058)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0068 - 0x0058)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0058(0x0004) (Edit)
	float                                              Tiling;                                                   // 0x005C(0x0004) (Deprecated)
	float                                              UTiling;                                                  // 0x0060(0x0004) (Edit)
	float                                              VTiling;                                                  // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x0090 - 0x0078)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0078(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x0080(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0090 - 0x0090)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0090 - 0x0090)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x0090 - 0x0090)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMovie");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x0090 - 0x0090)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0004 (0x005C - 0x0058)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                         // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x001D (0x0075 - 0x0058)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x0074(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x001D (0x0075 - 0x0058)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	TEnumAsByte<EMaterialPositionTransform>            TransformType;                                            // 0x0074(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0070(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0058 - 0x0058)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialInstance
// 0x0030 (0x008C - 0x005C)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x005C(0x0004) (Edit)
	class UMaterialInterface*                          Parent;                                                   // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bHasStaticPermutationResource : 1;                        // 0x0064(0x0004)
	unsigned long                                      bStaticPermutationDirty : 1;                              // 0x0064(0x0004) (Native, Transient)
	unsigned long                                      BakerColorOverride : 1;                                   // 0x0064(0x0004)
	unsigned long                                      BakerBleedBounceAmountOverride : 1;                       // 0x0064(0x0004)
	unsigned long                                      BakerBleedEmissiveAmountOverride : 1;                     // 0x0064(0x0004)
	unsigned long                                      BakerAlphaOverride : 1;                                   // 0x0064(0x0004)
	unsigned long                                      BakerAlphaTextureOverride : 1;                            // 0x0064(0x0004)
	unsigned long                                      ReentrantFlag : 1;                                        // 0x0064(0x0004) (Const, Native)
	struct FPointer                                    StaticParameters[0x2];                                    // 0x0068(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    StaticPermutationResources[0x2];                          // 0x0070(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    Resources[0x2];                                           // 0x0078(0x0004) (Const, Native, DuplicateTransient)
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x0080(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}


	void ClearParameterValues();
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveFloat& Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.MaterialInstanceConstant
// 0x0030 (0x00BC - 0x008C)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x008C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0098(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x00A4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x00B0(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}


	void ClearParameterValues();
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.MaterialInstanceTimeVarying
// 0x0038 (0x00C4 - 0x008C)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                                     // 0x008C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0090(0x0004) (Transient)
	TArray<struct FFontParameterValueOverTime>         FontParameterValues;                                      // 0x0094(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FScalarParameterValueOverTime>       ScalarParameterValues;                                    // 0x00A0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FTextureParameterValueOverTime>      TextureParameterValues;                                   // 0x00AC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FVectorParameterValueOverTime>       VectorParameterValues;                                    // 0x00B8(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceTimeVarying");
		return ptr;
	}


	void ClearParameterValues();
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	void SetVectorStartTime(const struct FName& ParameterName, float Value);
	void SetVectorCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveVector& Value);
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetDuration(float Value);
	void SetScalarStartTime(const struct FName& ParameterName, float Value);
	void SetScalarCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveFloat& Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x006D - 0x006D)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x009F - 0x009F)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0008 (0x01C8 - 0x01C0)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bDestroyOnSystemFinish : 1;                               // 0x01C4(0x0004)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x01C4(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha);
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void OnToggle(class USeqAct_Toggle* Action);
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
};


// Class Engine.ParticleEmitter
// 0x0094 (0x00D0 - 0x003C)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x003C(0x0008) (Edit)
	unsigned long                                      UseLocalSpace : 1;                                        // 0x0044(0x0004) (Deprecated)
	unsigned long                                      KillOnDeactivate : 1;                                     // 0x0044(0x0004) (Deprecated)
	unsigned long                                      bKillOnCompleted : 1;                                     // 0x0044(0x0004) (Deprecated)
	unsigned long                                      ScaleUV : 1;                                              // 0x0044(0x0004) (Deprecated)
	unsigned long                                      DirectUV : 1;                                             // 0x0044(0x0004) (Deprecated)
	unsigned long                                      bEnabled : 1;                                             // 0x0044(0x0004) (Deprecated)
	unsigned long                                      ConvertedModules : 1;                                     // 0x0044(0x0004)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0048(0x001C) (Component, NeedCtorLink, Deprecated)
	float                                              EmitterDuration;                                          // 0x0064(0x0004) (Deprecated)
	int                                                EmitterLoops;                                             // 0x0068(0x0004) (Deprecated)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x006C(0x0001) (Deprecated)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x006D(0x0001) (Deprecated)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x006E(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006F(0x0001) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0070(0x000C) (ExportObject, NeedCtorLink, NoClear, Deprecated)
	int                                                SubImages_Horizontal;                                     // 0x007C(0x0004) (Deprecated)
	int                                                SubImages_Vertical;                                       // 0x0080(0x0004) (Deprecated)
	float                                              RandomImageTime;                                          // 0x0084(0x0004) (Deprecated)
	int                                                RandomImageChanges;                                       // 0x0088(0x0004) (Deprecated)
	int                                                SubUVDataOffset;                                          // 0x008C(0x0004) (Transient)
	struct FColor                                      EmitterEditorColor;                                       // 0x0090(0x0004) (Deprecated)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0094(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x00A0(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class UParticleModule*                             TypeDataModule;                                           // 0x00AC(0x0004) (ExportObject)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x00B0(0x000C) (Native)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x00BC(0x000C) (Native)
	int                                                PeakActiveParticles;                                      // 0x00C8(0x0004)
	int                                                InitialAllocationCount;                                   // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0058 (0x0094 - 0x003C)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x003C(0x0004) (Const)
	int                                                LevelSetting;                                             // 0x0040(0x0004) (Const, Deprecated)
	unsigned long                                      bEnabled : 1;                                             // 0x0044(0x0004)
	unsigned long                                      ConvertedModules : 1;                                     // 0x0044(0x0004)
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0048(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x004C(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class UParticleModule*                             TypeDataModule;                                           // 0x0058(0x0004) (ExportObject)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x005C(0x0004) (ExportObject)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x000C) (Native)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x006C(0x000C) (Native)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0078(0x000C) (Native)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0084(0x000C) (Native)
	int                                                PeakActiveParticles;                                      // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0018 (0x0054 - 0x003C)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                         // 0x003C(0x0004)
	unsigned long                                      bUpdateModule : 1;                                        // 0x003C(0x0004)
	unsigned long                                      bCurvesAsColor : 1;                                       // 0x003C(0x0004)
	unsigned long                                      b3DDrawMode : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bSupported3DDrawMode : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x003C(0x0004)
	unsigned long                                      bEditable : 1;                                            // 0x003C(0x0004)
	unsigned long                                      LODDuplicate : 1;                                         // 0x003C(0x0004)
	struct FColor                                      ModuleEditorColor;                                        // 0x0040(0x0004) (Edit)
	unsigned char                                      LODValidity;                                              // 0x0044(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TArray<struct FName>                               IdenticalIgnoreProperties;                                // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x001C (0x0070 - 0x0054)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0070 - 0x0054)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x00A4 - 0x0054)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0054(0x000C) (Edit)
	struct FVector                                     EndPoint1;                                                // 0x0060(0x000C) (Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0088(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x00A0 - 0x0054)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0054(0x0008) (Edit, ExportObject, NoClear)
	struct FRawDistributionFloat                       Range;                                                    // 0x005C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bStrengthByDistance : 1;                                  // 0x0078(0x0004) (Edit)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x0078(0x0004) (Edit)
	unsigned long                                      bRenewSource : 1;                                         // 0x0078(0x0004) (Edit)
	unsigned long                                      bInheritSourceVel : 1;                                    // 0x0078(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x00AC - 0x0054)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                                    // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      StrengthByDistance : 1;                                   // 0x00A8(0x0004) (Edit)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x00A8(0x0004) (Edit)
	unsigned long                                      bOverrideVelocity : 1;                                    // 0x00A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00BC - 0x0054)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x0058(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x005C(0x001C) (Edit, Component, NeedCtorLink)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x0078(0x0004) (Edit)
	struct FRawDistributionVector                      Tangent;                                                  // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsoluteTangent : 1;                                     // 0x0098(0x0004) (Edit)
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x009C(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00A0(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      bNRScaleEmitterTime : 1;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bSmooth : 1;                                              // 0x0054(0x0004) (Edit)
	unsigned long                                      bNoiseLock : 1;                                           // 0x0054(0x0004) (Const)
	unsigned long                                      bOscillate : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseNoiseTangents : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bTargetNoise : 1;                                         // 0x0054(0x0004) (Edit)
	unsigned long                                      bApplyNoiseScale : 1;                                     // 0x0054(0x0004) (Edit)
	int                                                Frequency;                                                // 0x0058(0x0004) (Edit)
	int                                                Frequency_LowRange;                                       // 0x005C(0x0004) (Edit)
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x0098(0x001C) (Edit, Component, NeedCtorLink)
	float                                              NoiseLockRadius;                                          // 0x00B4(0x0004) (Edit)
	float                                              NoiseLockTime;                                            // 0x00B8(0x0004) (Edit)
	float                                              NoiseTension;                                             // 0x00BC(0x0004) (Edit)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x00C0(0x001C) (Edit, Component, NeedCtorLink)
	int                                                NoiseTessellation;                                        // 0x00DC(0x0004) (Edit)
	float                                              FrequencyDistance;                                        // 0x00E0(0x0004) (Edit)
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x00E4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00B8 - 0x0054)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0054(0x0001) (Edit)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x0055(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0058(0x0008) (Edit)
	unsigned long                                      bSourceAbsolute : 1;                                      // 0x0060(0x0004) (Edit)
	unsigned long                                      bLockSource : 1;                                          // 0x0060(0x0004) (Edit)
	unsigned long                                      bLockSourceTangent : 1;                                   // 0x0060(0x0004) (Edit)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x0060(0x0004) (Edit)
	struct FRawDistributionVector                      Source;                                                   // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      SourceTangent;                                            // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x009C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00BC - 0x0054)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0054(0x0001) (Edit)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x0055(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0058(0x0008) (Edit)
	struct FRawDistributionVector                      Target;                                                   // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bTargetAbsolute : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bLockTarget : 1;                                          // 0x007C(0x0004) (Edit)
	unsigned long                                      bLockTargetTangent : 1;                                   // 0x007C(0x0004) (Edit)
	unsigned long                                      bLockTargetStength : 1;                                   // 0x007C(0x0004) (Edit)
	struct FRawDistributionVector                      TargetTangent;                                            // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x009C(0x001C) (Edit, Component, NeedCtorLink)
	float                                              LockRadius;                                               // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x009C (0x00F0 - 0x0054)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned long                                      bApplyPhysics : 1;                                        // 0x00AC(0x0004) (Edit)
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                            // 0x00AC(0x0004) (Edit)
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x00AC(0x0004) (Edit)
	unsigned long                                      bDropDetail : 1;                                          // 0x00AC(0x0004) (Edit)
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x00B0(0x001C) (Edit, Component, NeedCtorLink)
	float                                              DirScalar;                                                // 0x00CC(0x0004) (Edit)
	float                                              VerticalFudgeFactor;                                      // 0x00D0(0x0004) (Edit)
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x00D4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bClampAlpha : 1;                                          // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0060 - 0x0054)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                               // 0x0054(0x0008) (Edit)
	struct FColor                                      DefaultColor;                                             // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bClampAlpha : 1;                                          // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0090 - 0x0054)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bEmitterTime : 1;                                         // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x003C (0x0090 - 0x0054)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsolute : 1;                                            // 0x008C(0x0004) (Edit)
	unsigned long                                      bKillInside : 1;                                          // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsolute : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      bFloor : 1;                                               // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x001C (0x0070 - 0x0054)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x001C (0x0070 - 0x0054)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0070 (0x00C4 - 0x0054)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      Direction;                                                // 0x00A8(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x006C - 0x0054)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0054(0x0008) (Edit, ExportObject, NoClear)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	unsigned long                                      InheritSourceVelocity : 1;                                // 0x0060(0x0004) (Edit)
	unsigned long                                      bInheritSourceRotation : 1;                               // 0x0060(0x0004) (Edit)
	float                                              InheritSourceVelocityScale;                               // 0x0064(0x0004) (Edit)
	float                                              InheritSourceRotationScale;                               // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x005C - 0x0054)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0054(0x0008) (Edit, ExportObject, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0090 - 0x0054)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      Positive_Y : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      Positive_Z : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      Negative_X : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      Negative_Y : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      Negative_Z : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      SurfaceOnly : 1;                                          // 0x0054(0x0004) (Edit)
	unsigned long                                      Velocity : 1;                                             // 0x0054(0x0004) (Edit)
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0058(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0074(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x00CD - 0x0090)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                                       // 0x0090(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0094(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x00B0(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x00CC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x00AC - 0x0090)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0090(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x006C - 0x0054)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray<struct FName>                               MaterialParameters;                                       // 0x0054(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  DefaultMaterials;                                         // 0x0060(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0060 - 0x0054)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0054(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0070 - 0x0054)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                                      // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0064 (0x00BC - 0x0058)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x005C(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x0078(0x0004) (Edit)
	struct FRawDistributionVector                      RotationAmount;                                           // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               RotationOptions;                                          // 0x0098(0x0004) (Edit)
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x009C(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0055 - 0x0054)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x005C (0x00B0 - 0x0054)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0054(0x0004) (Edit)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x0058(0x0001) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0059(0x0001)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x005A(0x0001) (Edit)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x005B(0x0001) (Edit)
	unsigned long                                      bUseLocalSpace : 1;                                       // 0x005C(0x0004) (Edit)
	unsigned long                                      bKillOnDeactivate : 1;                                    // 0x005C(0x0004) (Edit)
	unsigned long                                      bKillOnCompleted : 1;                                     // 0x005C(0x0004) (Edit)
	unsigned long                                      bRequiresSorting : 1;                                     // 0x005C(0x0004) (Edit)
	unsigned long                                      bEmitterDurationUseRange : 1;                             // 0x005C(0x0004) (Edit)
	unsigned long                                      bDurationRecalcEachLoop : 1;                              // 0x005C(0x0004) (Edit)
	unsigned long                                      bDelayFirstLoopOnly : 1;                                  // 0x005C(0x0004) (Edit)
	unsigned long                                      bScaleUV : 1;                                             // 0x005C(0x0004) (Edit)
	unsigned long                                      bDirectUV : 1;                                            // 0x005C(0x0004)
	unsigned long                                      bUseMaxDrawCount : 1;                                     // 0x005C(0x0004) (Edit)
	float                                              EmitterDuration;                                          // 0x0060(0x0004) (Edit)
	float                                              EmitterDurationLow;                                       // 0x0064(0x0004) (Edit)
	int                                                EmitterLoops;                                             // 0x0068(0x0004) (Edit)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x006C(0x001C) (Component, NeedCtorLink)
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0088(0x000C) (ExportObject, NeedCtorLink, NoClear)
	float                                              EmitterDelay;                                             // 0x0094(0x0004) (Edit)
	int                                                SubImages_Horizontal;                                     // 0x0098(0x0004) (Edit)
	int                                                SubImages_Vertical;                                       // 0x009C(0x0004) (Edit)
	float                                              RandomImageTime;                                          // 0x00A0(0x0004)
	int                                                RandomImageChanges;                                       // 0x00A4(0x0004) (Edit)
	int                                                MaxDrawCount;                                             // 0x00A8(0x0004) (Edit)
	struct FColor                                      EmitterEditorColor;                                       // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      Scale : 1;                                                // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0070 - 0x0054)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                                       // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      EnableX : 1;                                              // 0x0070(0x0004) (Edit)
	unsigned long                                      EnableY : 1;                                              // 0x0070(0x0004) (Edit)
	unsigned long                                      EnableZ : 1;                                              // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bProcessBurstList : 1;                                    // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x0048 (0x00A0 - 0x0058)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x0058(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0074(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0094(0x000C) (Edit, ExportObject, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0028 (0x0080 - 0x0058)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x0058(0x0004) (Edit)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x005C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0078(0x0004) (Edit)
	float                                              MovementTolerance;                                        // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x008C - 0x0054)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      SubUVSize;                                                // 0x0070(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0070 - 0x0054)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                           // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVSelect");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0090 - 0x0054)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0054(0x0001) (Edit)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0055(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0058(0x0008) (Edit)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x007C(0x0004) (Edit)
	unsigned long                                      bInheritRotation : 1;                                     // 0x007C(0x0004) (Edit)
	int                                                SourceOffsetCount;                                        // 0x0080(0x0004) (Edit)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0084(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x005C - 0x0054)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                         // 0x0054(0x0004) (Edit, ExportObject, Component, NoClear, EditInline)
	float                                              MinSpawnVelocity;                                         // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrailTaperMethod>                     TaperMethod;                                              // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0058(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailTaper");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00F0 - 0x0054)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeamMethod>                           BeamMethod;                                               // 0x0054(0x0001) (Edit)
	TEnumAsByte<EBeamEndPointMethod>                   EndPointMethod;                                           // 0x0055(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x0058(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      EndPoint;                                                 // 0x0074(0x001C) (Edit, Component, NeedCtorLink)
	int                                                TessellationFactor;                                       // 0x0090(0x0004) (Edit)
	struct FRawDistributionFloat                       EmitterStrength;                                          // 0x0094(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00B0(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      EndPointDirection;                                        // 0x00CC(0x001C) (Edit, Component, NeedCtorLink)
	int                                                TextureTile;                                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x00EC(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x007C (0x00D0 - 0x0054)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0054(0x0001) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x0055(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	int                                                TextureTile;                                              // 0x0058(0x0004) (Edit)
	float                                              TextureTileDistance;                                      // 0x005C(0x0004) (Edit)
	int                                                Sheets;                                                   // 0x0060(0x0004) (Edit)
	int                                                MaxBeamCount;                                             // 0x0064(0x0004) (Edit)
	float                                              Speed;                                                    // 0x0068(0x0004) (Edit)
	int                                                InterpolationPoints;                                      // 0x006C(0x0004) (Edit)
	unsigned long                                      bAlwaysOn : 1;                                            // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0070(0x0004) (Edit)
	struct FName                                       BranchParentName;                                         // 0x0074(0x0008) (Edit)
	struct FRawDistributionFloat                       Distance;                                                 // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0098(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00B4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0009 (0x005D - 0x0054)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      CastShadows : 1;                                          // 0x0058(0x0004) (Edit)
	unsigned long                                      DoCollisions : 1;                                         // 0x0058(0x0004) (Edit)
	unsigned long                                      bOverrideMaterial : 1;                                    // 0x0058(0x0004) (Edit)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x005C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x0068 - 0x0054)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0054(0x0004) (Edit)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x0058(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0023 (0x0080 - 0x005D)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0060(0x0004) (Edit)
	TEnumAsByte<EPhysXMeshRotationMethod>              PhysXRotationMethod;                                      // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              FluidRotationCoefficient;                                 // 0x0068(0x0004) (Edit)
	struct FPointer                                    RenderInstance;                                           // 0x006C(0x0004) (Native)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x0070(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMeshPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0084 - 0x0054)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                                       // 0x0054(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0054(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0054(0x0004) (Edit)
	unsigned long                                      Tapered : 1;                                              // 0x0054(0x0004) (Edit)
	unsigned long                                      SpawnByDistance : 1;                                      // 0x0054(0x0004) (Edit)
	int                                                TessellationFactor;                                       // 0x0058(0x0004) (Edit)
	struct FRawDistributionFloat                       Tension;                                                  // 0x005C(0x001C) (Edit, Component, NeedCtorLink)
	struct FVector                                     SpawnDistance;                                            // 0x0078(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                                       // 0x0054(0x0004) (Edit)
	float                                              TessellationFactorDistance;                               // 0x0058(0x0004)
	float                                              TessellationStrength;                                     // 0x005C(0x0004) (Edit)
	int                                                TextureTile;                                              // 0x0060(0x0004) (Edit)
	int                                                Sheets;                                                   // 0x0064(0x0004)
	int                                                MaxTrailCount;                                            // 0x0068(0x0004) (Edit)
	int                                                MaxParticleInTrailCount;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail2");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberBase
// 0x000C (0x0060 - 0x0054)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray<struct FName>                               RequiredModules;                                          // 0x0054(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x0108 - 0x0060)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0098(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00B4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00D0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00EC(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0124 - 0x0060)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0098(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00B4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00D0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00EC(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0108(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLIL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x017C - 0x0060)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0098(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00B4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00D0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00EC(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0108(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0124(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      SizeLifeMultiplier;                                       // 0x0140(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	unsigned long                                      SizeMultiplyX : 1;                                        // 0x015C(0x0004) (Edit)
	unsigned long                                      SizeMultiplyY : 1;                                        // 0x015C(0x0004) (Edit)
	unsigned long                                      SizeMultiplyZ : 1;                                        // 0x015C(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0160(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00E8 - 0x0060)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                              // 0x0060(0x0004) (Edit)
	float                                              LifetimeMax;                                              // 0x0064(0x0004) (Edit)
	struct FVector                                     StartSizeMin;                                             // 0x0068(0x000C) (Edit)
	struct FVector                                     StartSizeMax;                                             // 0x0074(0x000C) (Edit)
	struct FVector                                     StartVelocityMin;                                         // 0x0080(0x000C) (Edit)
	struct FVector                                     StartVelocityMax;                                         // 0x008C(0x000C) (Edit)
	float                                              StartVelocityRadialMin;                                   // 0x0098(0x0004) (Edit)
	float                                              StartVelocityRadialMax;                                   // 0x009C(0x0004) (Edit)
	struct FVector                                     ColorOverLife;                                            // 0x00A0(0x000C) (Edit)
	float                                              AlphaOverLife;                                            // 0x00AC(0x0004) (Edit)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00B0(0x0004) (Edit)
	unsigned long                                      bPositive_X : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bNegative_X : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00B0(0x0004) (Edit)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00B0(0x0004) (Edit)
	unsigned long                                      bVelocity : 1;                                            // 0x00B0(0x0004) (Edit)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00B0(0x0004) (Edit)
	float                                              PC_VelocityScale;                                         // 0x00B4(0x0004) (Edit)
	struct FVector                                     PC_StartLocation;                                         // 0x00B8(0x000C) (Edit)
	float                                              PC_StartRadius;                                           // 0x00C4(0x0004) (Edit)
	float                                              PC_StartHeight;                                           // 0x00C8(0x0004) (Edit)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	struct FVector                                     StartLocationMin;                                         // 0x00D0(0x000C) (Edit)
	struct FVector                                     StartLocationMax;                                         // 0x00DC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainDrops");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0180 - 0x0060)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                            // 0x0098(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyX : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00B4(0x0004) (Edit)
	unsigned long                                      bPositive_X : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bNegative_X : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00B4(0x0004) (Edit)
	unsigned long                                      bVelocity : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00B4(0x0004) (Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00B8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_VelocityScale;                                         // 0x00D4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      PC_StartLocation;                                         // 0x00F0(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartRadius;                                           // 0x010C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartHeight;                                           // 0x0128(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x0144(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0148(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0164(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainImpacts");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x010C - 0x0060)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                            // 0x0098(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyX : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00B4(0x0004) (Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00B8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00D4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00F0(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashA");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x010C - 0x0060)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0098(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00B4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00D0(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00EC(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x00F0(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashB");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0000 (0x0054 - 0x0054)
class UParticleModuleVelocityBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0038 (0x008C - 0x0054)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0070(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0070 - 0x0054)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x0074 - 0x0054)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      Absolute : 1;                                             // 0x0070(0x0004) (Edit, ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x00D0 - 0x00D0)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}

};


// Class Engine.ParticleSystemComponent
// 0x0080 (0x023C - 0x01BC)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x01BC(0x0004) (Edit, Const)
	TArray<struct FPointer>                            EmitterInstances;                                         // 0x01C0(0x000C) (Const, Native, Transient)
	TArray<class UStaticMeshComponent*>                SMComponents;                                             // 0x01CC(0x000C) (Const, ExportObject, Transient, Component, DuplicateTransient, NeedCtorLink, EditInline)
	TArray<class UMaterialInterface*>                  SMMaterialInterfaces;                                     // 0x01D8(0x000C) (Const, Transient, DuplicateTransient, NeedCtorLink)
	unsigned long                                      bAutoActivate : 1;                                        // 0x01E4(0x0004) (Edit)
	unsigned long                                      bWasCompleted : 1;                                        // 0x01E4(0x0004) (Const)
	unsigned long                                      bSuppressSpawning : 1;                                    // 0x01E4(0x0004) (Const)
	unsigned long                                      bWasDeactivated : 1;                                      // 0x01E4(0x0004) (Const)
	unsigned long                                      bResetOnDetach : 1;                                       // 0x01E4(0x0004) (Edit)
	unsigned long                                      bUpdateOnDedicatedServer : 1;                             // 0x01E4(0x0004)
	unsigned long                                      bJustAttached : 1;                                        // 0x01E4(0x0004)
	unsigned long                                      bIsActive : 1;                                            // 0x01E4(0x0004) (Transient)
	unsigned long                                      bWarmingUp : 1;                                           // 0x01E4(0x0004)
	unsigned long                                      bIsCachedInPool : 1;                                      // 0x01E4(0x0004)
	unsigned long                                      bOverrideLODMethod : 1;                                   // 0x01E4(0x0004) (Edit)
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x01E4(0x0004)
	unsigned long                                      bUpdateComponentInTick : 1;                               // 0x01E4(0x0004)
	unsigned long                                      bDeferredBeamUpdate : 1;                                  // 0x01E4(0x0004)
	unsigned long                                      bForcedInActive : 1;                                      // 0x01E4(0x0004) (Transient)
	unsigned long                                      bIsWarmingUp : 1;                                         // 0x01E4(0x0004) (Transient)
	unsigned long                                      bIsViewRelevanceDirty : 1;                                // 0x01E4(0x0004) (Transient)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x01E8(0x000C) (Edit, NeedCtorLink, EditInline)
	struct FVector                                     OldPosition;                                              // 0x01F4(0x000C)
	struct FVector                                     PartSysVelocity;                                          // 0x0200(0x000C)
	float                                              WarmupTime;                                               // 0x020C(0x0004)
	int                                                LODLevel;                                                 // 0x0210(0x0004)
	float                                              SecondsBeforeInactive;                                    // 0x0214(0x0004) (Edit)
	int                                                EditorLODLevel;                                           // 0x0218(0x0004)
	float                                              AccumTickTime;                                            // 0x021C(0x0004) (Transient)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0220(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	TArray<struct FMaterialViewRelevance>              CachedViewRelevanceFlags;                                 // 0x0224(0x000C) (Const, Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                             // 0x0230(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}


	void ResetToDefaults();
	void SetActive(bool bNowActive);
	void ClearParameter(const struct FName& ParameterName, TEnumAsByte<EParticleSysParamType> ParameterType);
	bool GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial);
	bool GetActorParameter(const struct FName& InName, class AActor** OutActor);
	bool GetColorParameter(const struct FName& InName, struct FColor* OutColor);
	bool GetVectorParameter(const struct FName& InName, struct FVector* OutVector);
	bool GetFloatParameter(const struct FName& InName, float* OutFloat);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	int GetEditorLODLevel();
	int GetLODLevel();
	void SetEditorLODLevel(int InLODLevel);
	void SetLODLevel(int InLODLevel);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamDistance(int EmitterIndex, float Distance);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetBeamTessellationFactor(int EmitterIndex, float NewFactor);
	void SetBeamType(int EmitterIndex, int NewMethod);
	void RewindEmitterInstances();
	void RewindEmitterInstance(int EmitterIndex);
	void SetKillOnCompleted(int EmitterIndex, bool bKill);
	void SetKillOnDeactivate(int EmitterIndex, bool bKill);
	bool GetSkipUpdateDynamicDataDuringTick();
	void SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick);
	void KillParticlesForced();
	void DeactivateSystem();
	void ActivateSystem(bool bFlagAsJustAttached);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void OnSystemFinished(class UParticleSystemComponent* PSystem);
};


// Class Engine.PhysXParticleSystem
// 0x0058 (0x0094 - 0x003C)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                             // 0x003C(0x0004) (Edit)
	float                                              CollisionDistance;                                        // 0x0040(0x0004) (Edit)
	float                                              RestitutionWithStaticShapes;                              // 0x0044(0x0004) (Edit)
	float                                              RestitutionWithDynamicShapes;                             // 0x0048(0x0004) (Edit)
	float                                              FrictionWithStaticShapes;                                 // 0x004C(0x0004) (Edit)
	float                                              FrictionWithDynamicShapes;                                // 0x0050(0x0004) (Edit)
	unsigned long                                      bDynamicCollision : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bDisableGravity : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bStaticCollision : 1;                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      bTwoWayCollision : 1;                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      bDestroy : 1;                                             // 0x0054(0x0004) (Transient)
	unsigned long                                      bSyncFailed : 1;                                          // 0x0054(0x0004) (Transient)
	unsigned long                                      bIsInGame : 1;                                            // 0x0054(0x0004) (Transient)
	float                                              MaxMotionDistance;                                        // 0x0058(0x0004) (Edit)
	float                                              Damping;                                                  // 0x005C(0x0004) (Edit)
	struct FVector                                     ExternalAcceleration;                                     // 0x0060(0x000C) (Edit)
	TEnumAsByte<ESimulationMethod>                     SimulationMethod;                                         // 0x006C(0x0001) (Edit)
	TEnumAsByte<EPacketSizeMultiplier>                 PacketSizeMultiplier;                                     // 0x006D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	float                                              RestParticleDistance;                                     // 0x0070(0x0004) (Edit)
	float                                              RestDensity;                                              // 0x0074(0x0004) (Edit)
	float                                              KernelRadiusMultiplier;                                   // 0x0078(0x0004) (Edit)
	float                                              Stiffness;                                                // 0x007C(0x0004) (Edit)
	float                                              Viscosity;                                                // 0x0080(0x0004) (Edit)
	float                                              CollisionResponseCoefficient;                             // 0x0084(0x0004) (Edit)
	int                                                ParticleReserve;                                          // 0x0088(0x0004) (Edit)
	struct FPointer                                    CascadeScene;                                             // 0x008C(0x0004) (Native)
	struct FPointer                                    PSys;                                                     // 0x0090(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXParticleSystem");
		return ptr;
	}

};


// Class Engine.KActor
// 0x00A0 (0x0298 - 0x01F8)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x01F8(0x0004) (Edit)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x01F8(0x0004) (Edit, Net)
	unsigned long                                      bCurrentSlide : 1;                                        // 0x01F8(0x0004)
	unsigned long                                      bSlideActive : 1;                                         // 0x01F8(0x0004)
	unsigned long                                      LOIUse2DDistance : 1;                                     // 0x01F8(0x0004) (Edit, Const)
	class UParticleSystemComponent*                    ImpactEffectComponent;                                    // 0x01FC(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             ImpactSoundComponent;                                     // 0x0200(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             ImpactSoundComponent2;                                    // 0x0204(0x0004) (ExportObject, Component, EditInline)
	float                                              LastImpactTime;                                           // 0x0208(0x0004)
	class UParticleSystemComponent*                    SlideEffectComponent;                                     // 0x020C(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             SlideSoundComponent;                                      // 0x0210(0x0004) (ExportObject, Component, EditInline)
	float                                              LastSlideTime;                                            // 0x0214(0x0004)
	struct FRigidBodyState                             RBState;                                                  // 0x0218(0x0038) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x0250(0x0004) (Const, Native)
	float                                              DrawScaleX;                                               // 0x0254(0x0004) (Net)
	float                                              DrawScaleY;                                               // 0x0258(0x0004) (Net)
	float                                              DrawScaleZ;                                               // 0x025C(0x0004) (Net)
	struct FVector                                     InitialLocation;                                          // 0x0260(0x000C)
	struct FRotator                                    InitialRotation;                                          // 0x026C(0x000C)
	float                                              LOILookAtDelay;                                           // 0x0278(0x0004) (Edit, Const)
	float                                              LOIProximityDelay;                                        // 0x027C(0x0004) (Edit, Const)
	float                                              LOIMinDuration;                                           // 0x0280(0x0004) (Edit, Const)
	float                                              LOIDistance;                                              // 0x0284(0x0004) (Edit, Const)
	TArray<struct FName>                               LOIGroups;                                                // 0x0288(0x000C) (Edit, Const, NeedCtorLink)
	class UTdLOIAddOnObject*                           TdLOIAddOn;                                               // 0x0294(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActor");
		return ptr;
	}


	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void ActivateLOI();
	void AssignPlayerToLOI(class AActor* Player);
	void Reset();
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser);
	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo);
	void ReplicatedEvent(const struct FName& VarName);
	void SetPhysicalCollisionProperties();
	void FellOutOfWorld(class UClass* dmgType);
	void PostBeginPlay();
	void ResolveRBState();
	class UPhysicalMaterial* GetKActorPhysMaterial();
};


// Class Engine.KActorSpawnable
// 0x0000 (0x0298 - 0x0298)
class AKActorSpawnable : public AKActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActorSpawnable");
		return ptr;
	}


	void ResetComponents();
	void Recycle();
	void Initialize();
};


// Class Engine.KAsset
// 0x0014 (0x01D4 - 0x01C0)
class AKAsset : public AActor
{
public:
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x01C4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x01C8(0x0004) (Edit)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x01C8(0x0004) (Edit)
	unsigned long                                      bBlockPawns : 1;                                          // 0x01C8(0x0004) (Edit)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x01CC(0x0004) (Net)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x01D0(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAsset");
		return ptr;
	}


	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser);
	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.PhysicalMaterial
// 0x005C (0x0098 - 0x003C)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                            // 0x003C(0x0004) (Transient)
	float                                              Friction;                                                 // 0x0040(0x0004) (Edit)
	float                                              Restitution;                                              // 0x0044(0x0004) (Edit)
	unsigned long                                      bForceConeFriction : 1;                                   // 0x0048(0x0004) (Edit)
	unsigned long                                      bEnableAnisotropicFriction : 1;                           // 0x0048(0x0004) (Edit)
	struct FVector                                     AnisoFrictionDir;                                         // 0x004C(0x000C) (Edit)
	float                                              FrictionV;                                                // 0x0058(0x0004) (Edit)
	float                                              Density;                                                  // 0x005C(0x0004) (Edit)
	float                                              AngularDamping;                                           // 0x0060(0x0004) (Edit)
	float                                              LinearDamping;                                            // 0x0064(0x0004) (Edit)
	float                                              MagneticResponse;                                         // 0x0068(0x0004) (Edit)
	float                                              WindResponse;                                             // 0x006C(0x0004) (Edit)
	float                                              ImpactThreshold;                                          // 0x0070(0x0004) (Edit)
	float                                              ImpactReFireDelay;                                        // 0x0074(0x0004) (Edit)
	class UParticleSystem*                             ImpactEffect;                                             // 0x0078(0x0004) (Edit)
	class USoundCue*                                   ImpactSound;                                              // 0x007C(0x0004) (Edit)
	float                                              SlideThreshold;                                           // 0x0080(0x0004) (Edit)
	float                                              SlideReFireDelay;                                         // 0x0084(0x0004) (Edit)
	class UParticleSystem*                             SlideEffect;                                              // 0x0088(0x0004) (Edit)
	class USoundCue*                                   SlideSound;                                               // 0x008C(0x0004) (Edit)
	class UPhysicalMaterial*                           Parent;                                                   // 0x0090(0x0004) (Edit)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                 // 0x0094(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}


	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty(class UClass* DesiredClass);
};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x0020 (0x005C - 0x003C)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (Const)
	TArray<class URB_BodySetup*>                       BodySetup;                                                // 0x0040(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class URB_ConstraintSetup*>                 ConstraintSetup;                                          // 0x004C(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	class UPhysicsAssetInstance*                       DefaultInstance;                                          // 0x0058(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}

};


// Class Engine.PhysicsAssetInstance
// 0x0074 (0x00B0 - 0x003C)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004) (Const, Transient)
	int                                                RootBodyIndex;                                            // 0x0040(0x0004) (Const, Transient)
	TArray<class URB_BodyInstance*>                    Bodies;                                                   // 0x0044(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class URB_ConstraintInstance*>              Constraints;                                              // 0x0050(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	struct FMap_Mirror                                 CollisionDisableTable;                                    // 0x005C(0x003C) (Const, Native)
	float                                              LinearSpringScale;                                        // 0x0098(0x0004) (Const)
	float                                              LinearDampingScale;                                       // 0x009C(0x0004) (Const)
	float                                              LinearForceLimitScale;                                    // 0x00A0(0x0004) (Const)
	float                                              AngularSpringScale;                                       // 0x00A4(0x0004) (Const)
	float                                              AngularDampingScale;                                      // 0x00A8(0x0004) (Const)
	float                                              AngularForceLimitScale;                                   // 0x00AC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAssetInstance");
		return ptr;
	}


	class URB_ConstraintInstance* FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset);
	class URB_BodyInstance* FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset);
	void SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh);
	void SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh);
	void SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement);
	void SetAllBodiesFixed(bool bNewFixed);
	float GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh);
	void SetAllMotorsAngularDriveStrength(float InAngularSpringStrength, float InAngularDampingStrength, float InAngularForceLimitStrength, class USkeletalMeshComponent* SkelMeshComp);
	void SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale);
	void SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale);
};


// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0040 - 0x003C)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                                       // 0x003C(0x0004) (Native, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsLODVerticalEmitter");
		return ptr;
	}

};


// Class Engine.RB_BodyInstance
// 0x0054 (0x0090 - 0x003C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x003C(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                BodyIndex;                                                // 0x0040(0x0004) (Const)
	struct FVector                                     Velocity;                                                 // 0x0044(0x000C)
	struct FVector                                     PreviousVelocity;                                         // 0x0050(0x000C)
	int                                                SceneIndex;                                               // 0x005C(0x0004) (Const, Native)
	struct FPointer                                    BodyData;                                                 // 0x0060(0x0004) (Const, Native)
	struct FPointer                                    BoneSpring;                                               // 0x0064(0x0004) (Const, Native)
	struct FPointer                                    BoneSpringKinActor;                                       // 0x0068(0x0004) (Const, Native)
	unsigned long                                      bEnableBoneSpringLinear : 1;                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bEnableBoneSpringAngular : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bDisableOnOverextension : 1;                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bTeleportOnOverextension : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bUseKinActorForBoneSpring : 1;                            // 0x006C(0x0004) (Edit)
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bOnlyCollideWithPawns : 1;                                // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bEnableCollisionResponse : 1;                             // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bPushBody : 1;                                            // 0x006C(0x0004) (Edit, Const)
	float                                              BoneLinearSpring;                                         // 0x0070(0x0004) (Edit, Const)
	float                                              BoneLinearDamping;                                        // 0x0074(0x0004) (Edit, Const)
	float                                              BoneAngularSpring;                                        // 0x0078(0x0004) (Edit, Const)
	float                                              BoneAngularDamping;                                       // 0x007C(0x0004) (Edit, Const)
	float                                              OverextensionThreshold;                                   // 0x0080(0x0004) (Edit)
	float                                              CustomGravityFactor;                                      // 0x0084(0x0004) (Edit)
	float                                              LastEffectPlayedTime;                                     // 0x0088(0x0004) (Transient)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x008C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodyInstance");
		return ptr;
	}


	void EnableCollisionResponse(bool bEnableResponse);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	void SetBoneSpringTarget(bool bTeleport, struct FMatrix* InBoneTarget);
	void SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping);
	void EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget);
	struct FVector GetUnrealWorldAngularVelocity();
	struct FVector GetUnrealWorldVelocity();
	struct FMatrix GetUnrealWorldTM();
	bool IsValidBodyInstance();
	bool IsFixed();
	void SetFixed(bool bNewFixed);
};


// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x0100 - 0x003C)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                                // 0x003C(0x0008) (Edit, Const)
	struct FName                                       ConstraintBone1;                                          // 0x0044(0x0008) (Edit)
	struct FName                                       ConstraintBone2;                                          // 0x004C(0x0008) (Edit)
	struct FVector                                     Pos1;                                                     // 0x0054(0x000C)
	struct FVector                                     PriAxis1;                                                 // 0x0060(0x000C)
	struct FVector                                     SecAxis1;                                                 // 0x006C(0x000C)
	struct FVector                                     Pos2;                                                     // 0x0078(0x000C)
	struct FVector                                     PriAxis2;                                                 // 0x0084(0x000C)
	struct FVector                                     SecAxis2;                                                 // 0x0090(0x000C)
	struct FVector                                     PulleyPivot1;                                             // 0x009C(0x000C)
	struct FVector                                     PulleyPivot2;                                             // 0x00A8(0x000C)
	unsigned long                                      bEnableProjection : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bLinearLimitSoft : 1;                                     // 0x00B4(0x0004) (Edit)
	unsigned long                                      bLinearBreakable : 1;                                     // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSwingLimited : 1;                                        // 0x00B4(0x0004) (Edit)
	unsigned long                                      bTwistLimited : 1;                                        // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSwingLimitSoft : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bTwistLimitSoft : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bAngularBreakable : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsPulley : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bMaintainMinDistance : 1;                                 // 0x00B4(0x0004) (Edit)
	struct FLinearDOFSetup                             LinearXSetup;                                             // 0x00B8(0x0008) (Edit)
	struct FLinearDOFSetup                             LinearYSetup;                                             // 0x00C0(0x0008) (Edit)
	struct FLinearDOFSetup                             LinearZSetup;                                             // 0x00C8(0x0008) (Edit)
	float                                              LinearLimitStiffness;                                     // 0x00D0(0x0004) (Edit)
	float                                              LinearLimitDamping;                                       // 0x00D4(0x0004) (Edit)
	float                                              LinearBreakThreshold;                                     // 0x00D8(0x0004) (Edit)
	float                                              Swing1LimitAngle;                                         // 0x00DC(0x0004) (Edit)
	float                                              Swing2LimitAngle;                                         // 0x00E0(0x0004) (Edit)
	float                                              TwistLimitAngle;                                          // 0x00E4(0x0004) (Edit)
	float                                              SwingLimitStiffness;                                      // 0x00E8(0x0004) (Edit)
	float                                              SwingLimitDamping;                                        // 0x00EC(0x0004) (Edit)
	float                                              TwistLimitStiffness;                                      // 0x00F0(0x0004) (Edit)
	float                                              TwistLimitDamping;                                        // 0x00F4(0x0004) (Edit)
	float                                              AngularBreakThreshold;                                    // 0x00F8(0x0004) (Edit)
	float                                              PulleyRatio;                                              // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintSetup");
		return ptr;
	}

};


// Class Engine.RB_BSJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointSetup");
		return ptr;
	}

};


// Class Engine.RB_ConstraintActor
// 0x001C (0x01DC - 0x01C0)
class ARB_ConstraintActor : public AActor
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x01C0(0x0004) (Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x01C4(0x0004) (Edit)
	class URB_ConstraintSetup*                         ConstraintSetup;                                          // 0x01C8(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	class URB_ConstraintInstance*                      ConstraintInstance;                                       // 0x01CC(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bDisableCollision : 1;                                    // 0x01D0(0x0004) (Edit, Const)
	unsigned long                                      bUpdateActor1RefFrame : 1;                                // 0x01D0(0x0004) (Edit)
	unsigned long                                      bUpdateActor2RefFrame : 1;                                // 0x01D0(0x0004) (Edit)
	class AActor*                                      PulleyPivotActor1;                                        // 0x01D4(0x0004) (Edit)
	class AActor*                                      PulleyPivotActor2;                                        // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActor");
		return ptr;
	}


	void OnDestroy(class USeqAct_Destroy* Action);
	void TermConstraint();
	void InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold);
	void SetDisableCollision(bool NewDisableCollision);
};


// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x01C0 - 0x01BC)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                            // 0x01BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintDrawComponent");
		return ptr;
	}

};


// Class Engine.RB_ConstraintInstance
// 0x0068 (0x00A4 - 0x003C)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004) (Const, Transient)
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x0040(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                ConstraintIndex;                                          // 0x0044(0x0004) (Const)
	int                                                SceneIndex;                                               // 0x0048(0x0004) (Const, Native)
	unsigned long                                      bInHardware : 1;                                          // 0x004C(0x0004) (Const, Native)
	unsigned long                                      bLinearXPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearXVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearYPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearYVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearZPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearZVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSwingPositionDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSwingVelocityDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTwistPositionDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTwistVelocityDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAngularSlerpDrive : 1;                                   // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTerminated : 1;                                          // 0x004C(0x0004)
	struct FPointer                                    ConstraintData;                                           // 0x0050(0x0004) (Const, Native)
	struct FVector                                     LinearPositionTarget;                                     // 0x0054(0x000C) (Edit, Const)
	struct FVector                                     LinearVelocityTarget;                                     // 0x0060(0x000C) (Edit, Const)
	float                                              LinearDriveSpring;                                        // 0x006C(0x0004) (Edit, Const)
	float                                              LinearDriveDamping;                                       // 0x0070(0x0004) (Edit, Const)
	float                                              LinearDriveForceLimit;                                    // 0x0074(0x0004) (Edit, Const)
	struct FQuat                                       AngularPositionTarget;                                    // 0x0078(0x0010) (Edit, Const)
	struct FVector                                     AngularVelocityTarget;                                    // 0x0088(0x000C) (Edit, Const)
	float                                              AngularDriveSpring;                                       // 0x0094(0x0004) (Edit, Const)
	float                                              AngularDriveDamping;                                      // 0x0098(0x0004) (Edit, Const)
	float                                              AngularDriveForceLimit;                                   // 0x009C(0x0004) (Edit, Const)
	struct FPointer                                    DummyKinActor;                                            // 0x00A0(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintInstance");
		return ptr;
	}


	void MoveKinActorTransform(struct FMatrix* NewTM);
	void SetLinearLimitSize(float NewLimitSize);
	void SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularPositionTarget(const struct FQuat& InPosTarget);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	void SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	struct FVector GetConstraintLocation();
	void TermConstraint();
	void InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* inOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1);
};


// Class Engine.RB_CylindricalForceActor
// 0x0034 (0x01F4 - 0x01C0)
class ARB_CylindricalForceActor : public AActor
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                          // 0x01C0(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              RadialStrength;                                           // 0x01C4(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x01C8(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x01CC(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x01D0(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x01D4(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x01D8(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x01DC(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x01E0(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x01E4(0x0004) (Edit)
	unsigned long                                      bForceActive : 1;                                         // 0x01E8(0x0004) (Edit, Net)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x01E8(0x0004) (Edit)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x01E8(0x0004) (Edit)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x01E8(0x0004) (Edit)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x01E8(0x0004) (Edit)
	int                                                ForceFieldChannel;                                        // 0x01EC(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01F0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_CylindricalForceActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_DistanceJointSetup");
		return ptr;
	}

};


// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x0200 - 0x01FC)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                        // 0x01FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ForceFieldExcludeVolume");
		return ptr;
	}

};


// Class Engine.RB_Handle
// 0x0053 (0x00A8 - 0x0055)
class URB_Handle : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x0058(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       GrabbedBoneName;                                          // 0x005C(0x0008)
	int                                                SceneIndex;                                               // 0x0064(0x0004) (Const, Native, Transient)
	unsigned long                                      bInHardware : 1;                                          // 0x0068(0x0004) (Const, Native, Transient)
	unsigned long                                      bRotationConstrained : 1;                                 // 0x0068(0x0004) (Const, Native, Transient)
	unsigned long                                      bInterpolating : 1;                                       // 0x0068(0x0004)
	struct FPointer                                    HandleData;                                               // 0x006C(0x0004) (Const, Native, Transient)
	struct FPointer                                    KinActorData;                                             // 0x0070(0x0004) (Const, Native, Transient)
	float                                              LinearDamping;                                            // 0x0074(0x0004) (Edit)
	float                                              LinearStiffness;                                          // 0x0078(0x0004) (Edit)
	float                                              AngularDamping;                                           // 0x007C(0x0004) (Edit)
	float                                              AngularStiffness;                                         // 0x0080(0x0004) (Edit)
	struct FVector                                     Destination;                                              // 0x0084(0x000C)
	struct FVector                                     StepSize;                                                 // 0x0090(0x000C)
	struct FVector                                     Location;                                                 // 0x009C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Handle");
		return ptr;
	}


	struct FQuat GetOrientation();
	void SetOrientation(const struct FQuat& NewOrientation);
	void UpdateSmoothLocation(struct FVector* NewLocation);
	void SetSmoothLocation(const struct FVector& NewLocation, float MoveTime);
	void SetLocation(const struct FVector& NewLocation);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
};


// Class Engine.RB_HingeSetup
// 0x0000 (0x0100 - 0x0100)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeSetup");
		return ptr;
	}

};


// Class Engine.RB_LineImpulseActor
// 0x0011 (0x01D1 - 0x01C0)
class ARB_LineImpulseActor : public AActor
{
public:
	float                                              ImpulseStrength;                                          // 0x01C0(0x0004) (Edit)
	float                                              ImpulseRange;                                             // 0x01C4(0x0004) (Edit)
	unsigned long                                      bVelChange : 1;                                           // 0x01C8(0x0004) (Edit)
	unsigned long                                      bStopAtFirstHit : 1;                                      // 0x01C8(0x0004) (Edit)
	class UArrowComponent*                             Arrow;                                                    // 0x01CC(0x0004) (ExportObject, Component, EditInline)
	unsigned char                                      ImpulseCount;                                             // 0x01D0(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_LineImpulseActor");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
	void FireLineImpulse();
};


// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticSetup");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointSetup");
		return ptr;
	}

};


// Class Engine.RB_RadialForceActor
// 0x0024 (0x01E4 - 0x01C0)
class ARB_RadialForceActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x01C0(0x0004) (ExportObject, Component, EditInline)
	float                                              ForceStrength;                                            // 0x01C4(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x01C8(0x0004) (Edit)
	float                                              SwirlStrength;                                            // 0x01CC(0x0004) (Edit)
	float                                              SpinTorque;                                               // 0x01D0(0x0004) (Edit)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x01D4(0x0001) (Edit, ExportObject, Component)
	TEnumAsByte<ERadialForceType>                      RadialForceMode;                                          // 0x01D5(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01D6(0x0002) MISSED OFFSET
	unsigned long                                      bForceActive : 1;                                         // 0x01D8(0x0004) (Edit, Net)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x01D8(0x0004) (Edit)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x01D8(0x0004) (Edit)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x01D8(0x0004) (Edit)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x01D8(0x0004) (Edit)
	int                                                ForceFieldChannel;                                        // 0x01DC(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01E0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialForceActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x01C9 - 0x01C0)
class ARB_RadialImpulseActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x01C0(0x0004) (ExportObject, Component, EditInline)
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                         // 0x01C4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned char                                      ImpulseCount;                                             // 0x01C8(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseActor");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x01D0 - 0x01BC)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	TEnumAsByte<ERadialImpulseFalloff>                 ImpulseFalloff;                                           // 0x01BC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01BD(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x01C0(0x0004) (Edit)
	float                                              ImpulseRadius;                                            // 0x01C4(0x0004) (Edit)
	unsigned long                                      bVelChange : 1;                                           // 0x01C8(0x0004) (Edit)
	class UDrawSphereComponent*                        PreviewSphere;                                            // 0x01CC(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseComponent");
		return ptr;
	}


	void FireImpulse(const struct FVector& Origin);
};


// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_SkelJointSetup");
		return ptr;
	}

};


// Class Engine.RB_Spring
// 0x0053 (0x00A8 - 0x0055)
class URB_Spring : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         Component1;                                               // 0x0058(0x0004) (Const, ExportObject, Component, EditInline)
	struct FName                                       BoneName1;                                                // 0x005C(0x0008) (Const)
	class UPrimitiveComponent*                         Component2;                                               // 0x0064(0x0004) (Const, ExportObject, Component, EditInline)
	struct FName                                       BoneName2;                                                // 0x0068(0x0008) (Const)
	int                                                SceneIndex;                                               // 0x0070(0x0004) (Const, Native)
	unsigned long                                      bInHardware : 1;                                          // 0x0074(0x0004) (Const, Native)
	unsigned long                                      bEnableForceMassRatio : 1;                                // 0x0074(0x0004) (Edit)
	struct FPointer                                    SpringData;                                               // 0x0078(0x0004) (Const, Native)
	float                                              TimeSinceActivation;                                      // 0x007C(0x0004) (Const, Native)
	float                                              MinBodyMass;                                              // 0x0080(0x0004) (Const)
	float                                              SpringSaturateDist;                                       // 0x0084(0x0004) (Edit)
	float                                              SpringMaxForce;                                           // 0x0088(0x0004) (Edit)
	float                                              MaxForceMassRatio;                                        // 0x008C(0x0004) (Edit)
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                                  // 0x0090(0x0010) (Edit, NeedCtorLink)
	float                                              DampSaturateVel;                                          // 0x00A0(0x0004) (Edit)
	float                                              DampMaxForce;                                             // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Spring");
		return ptr;
	}


	void Clear();
	void SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2);
};


// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0100 - 0x0100)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_StayUprightSetup");
		return ptr;
	}

};


// Class Engine.RB_Thruster
// 0x0008 (0x01C8 - 0x01C0)
class ARB_Thruster : public AActor
{
public:
	unsigned long                                      bThrustEnabled : 1;                                       // 0x01C0(0x0004) (Edit)
	float                                              ThrustStrength;                                           // 0x01C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Thruster");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.SVehicle
// 0x0110 (0x0548 - 0x0438)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                                   // 0x0438(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	TArray<class USVehicleWheel*>                      Wheels;                                                   // 0x043C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FVector                                     COMOffset;                                                // 0x0448(0x000C) (Edit)
	struct FVector                                     InertiaTensorMultiplier;                                  // 0x0454(0x000C) (Edit)
	unsigned long                                      bStayUpright : 1;                                         // 0x0460(0x0004) (Edit)
	unsigned long                                      bUseSuspensionAxis : 1;                                   // 0x0460(0x0004)
	unsigned long                                      bUpdateWheelShapes : 1;                                   // 0x0460(0x0004)
	unsigned long                                      bVehicleOnGround : 1;                                     // 0x0460(0x0004) (Const)
	unsigned long                                      bVehicleOnWater : 1;                                      // 0x0460(0x0004) (Const)
	unsigned long                                      bIsInverted : 1;                                          // 0x0460(0x0004) (Const)
	unsigned long                                      bChassisTouchingGround : 1;                               // 0x0460(0x0004) (Const)
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;                    // 0x0460(0x0004) (Const)
	unsigned long                                      bCanFlip : 1;                                             // 0x0460(0x0004)
	unsigned long                                      bFlipRight : 1;                                           // 0x0460(0x0004)
	unsigned long                                      bIsUprighting : 1;                                        // 0x0460(0x0004)
	unsigned long                                      bOutputHandbrake : 1;                                     // 0x0460(0x0004)
	unsigned long                                      bHoldingDownHandbrake : 1;                                // 0x0460(0x0004)
	float                                              StayUprightRollResistAngle;                               // 0x0464(0x0004) (Edit)
	float                                              StayUprightPitchResistAngle;                              // 0x0468(0x0004) (Edit)
	float                                              StayUprightStiffness;                                     // 0x046C(0x0004) (Edit)
	float                                              StayUprightDamping;                                       // 0x0470(0x0004) (Edit)
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                               // 0x0474(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                            // 0x0478(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              HeavySuspensionShiftPercent;                              // 0x047C(0x0004)
	float                                              MaxSpeed;                                                 // 0x0480(0x0004) (Edit)
	float                                              MaxAngularVelocity;                                       // 0x0484(0x0004) (Edit)
	float                                              TimeOffGround;                                            // 0x0488(0x0004) (Const)
	float                                              UprightLiftStrength;                                      // 0x048C(0x0004) (Edit)
	float                                              UprightTorqueStrength;                                    // 0x0490(0x0004) (Edit)
	float                                              UprightTime;                                              // 0x0494(0x0004) (Edit)
	float                                              UprightStartTime;                                         // 0x0498(0x0004)
	class UAudioComponent*                             EngineSound;                                              // 0x049C(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UAudioComponent*                             SquealSound;                                              // 0x04A0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class USoundCue*                                   CollisionSound;                                           // 0x04A4(0x0004) (Edit)
	class USoundCue*                                   EnterVehicleSound;                                        // 0x04A8(0x0004) (Edit)
	class USoundCue*                                   ExitVehicleSound;                                         // 0x04AC(0x0004) (Edit)
	float                                              CollisionIntervalSecs;                                    // 0x04B0(0x0004) (Edit)
	float                                              SquealThreshold;                                          // 0x04B4(0x0004) (Edit, Const)
	float                                              SquealLatThreshold;                                       // 0x04B8(0x0004) (Edit, Const)
	float                                              LatAngleVolumeMult;                                       // 0x04BC(0x0004) (Edit, Const)
	float                                              EngineStartOffsetSecs;                                    // 0x04C0(0x0004) (Edit, Const)
	float                                              EngineStopOffsetSecs;                                     // 0x04C4(0x0004) (Edit, Const)
	float                                              LastCollisionSoundTime;                                   // 0x04C8(0x0004)
	float                                              OutputBrake;                                              // 0x04CC(0x0004)
	float                                              OutputGas;                                                // 0x04D0(0x0004)
	float                                              OutputSteering;                                           // 0x04D4(0x0004)
	float                                              OutputRise;                                               // 0x04D8(0x0004)
	float                                              ForwardVel;                                               // 0x04DC(0x0004)
	int                                                NumPoweredWheels;                                         // 0x04E0(0x0004)
	struct FVector                                     BaseOffset;                                               // 0x04E4(0x000C) (Edit)
	float                                              CamDist;                                                  // 0x04F0(0x0004) (Edit)
	int                                                DriverViewPitch;                                          // 0x04F4(0x0004)
	int                                                DriverViewYaw;                                            // 0x04F8(0x0004)
	struct FVehicleState                               VState;                                                   // 0x04FC(0x0044) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x0540(0x0004) (Const, Native)
	float                                              RadialImpulseScaling;                                     // 0x0544(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicle");
		return ptr;
	}


	void GetSVehicleDebug(TArray<struct FString>* DebugInfo);
	float HermiteEval(float Slip);
	void DisplayWheelsDebug(class AHUD* HUD, float YL);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PostTeleport(class ATeleporter* OutTeleporter);
	void SuspensionHeavyShift(float Delta);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void DrivingStatusChanged();
	void VehiclePlayExitSound();
	void VehiclePlayEnterSound();
	void StopEngineSoundTimed();
	void StopEngineSound();
	void StartEngineSoundTimed();
	void StartEngineSound();
	bool HasWheelsOnGround();
	bool TryToDrive(class APawn* P);
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser);
	void StopVehicleSounds();
	void TurnOff();
	void Destroyed();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
	void SetWheelCollision(int WheelNum, bool bCollision);
};


// Class Engine.SVehicleSimBase
// 0x003B (0x0090 - 0x0055)
class USVehicleSimBase : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              WheelSuspensionStiffness;                                 // 0x0058(0x0004) (Edit)
	float                                              WheelSuspensionDamping;                                   // 0x005C(0x0004) (Edit)
	float                                              WheelSuspensionBias;                                      // 0x0060(0x0004) (Edit)
	float                                              WheelLongExtremumSlip;                                    // 0x0064(0x0004) (Edit)
	float                                              WheelLongExtremumValue;                                   // 0x0068(0x0004) (Edit)
	float                                              WheelLongAsymptoteSlip;                                   // 0x006C(0x0004) (Edit)
	float                                              WheelLongAsymptoteValue;                                  // 0x0070(0x0004) (Edit)
	float                                              WheelLatExtremumSlip;                                     // 0x0074(0x0004) (Edit)
	float                                              WheelLatExtremumValue;                                    // 0x0078(0x0004) (Edit)
	float                                              WheelLatAsymptoteSlip;                                    // 0x007C(0x0004) (Edit)
	float                                              WheelLatAsymptoteValue;                                   // 0x0080(0x0004) (Edit)
	float                                              WheelInertia;                                             // 0x0084(0x0004) (Edit)
	unsigned long                                      bWheelSpeedOverride : 1;                                  // 0x0088(0x0004) (Edit)
	unsigned long                                      bClampedFrictionModel : 1;                                // 0x0088(0x0004) (Edit)
	unsigned long                                      bAutoDrive : 1;                                           // 0x0088(0x0004) (Edit)
	float                                              AutoDriveSteer;                                           // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimBase");
		return ptr;
	}

};


// Class Engine.SVehicleSimCar
// 0x0034 (0x00C4 - 0x0090)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                                       // 0x0090(0x0004) (Edit)
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                                       // 0x0094(0x0010) (Edit, NeedCtorLink)
	float                                              SteerSpeed;                                               // 0x00A4(0x0004) (Edit)
	float                                              ReverseThrottle;                                          // 0x00A8(0x0004) (Edit)
	float                                              EngineBrakeFactor;                                        // 0x00AC(0x0004) (Edit)
	float                                              MaxBrakeTorque;                                           // 0x00B0(0x0004) (Edit)
	float                                              StopThreshold;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsDriving : 1;                                           // 0x00B8(0x0004)
	float                                              ActualSteering;                                           // 0x00BC(0x0004)
	float                                              TimeSinceThrottle;                                        // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimCar");
		return ptr;
	}

};


// Class Engine.SVehicleSimTank
// 0x0030 (0x00F4 - 0x00C4)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                             // 0x00C4(0x0004)
	float                                              RightTrackVel;                                            // 0x00C8(0x0004)
	float                                              LeftTrackTorque;                                          // 0x00CC(0x0004)
	float                                              RightTrackTorque;                                         // 0x00D0(0x0004)
	float                                              MaxEngineTorque;                                          // 0x00D4(0x0004) (Edit)
	float                                              EngineDamping;                                            // 0x00D8(0x0004) (Edit)
	float                                              InsideTrackTorqueFactor;                                  // 0x00DC(0x0004) (Edit)
	float                                              SteeringLatStiffnessFactor;                               // 0x00E0(0x0004) (Edit)
	float                                              TurnInPlaceThrottle;                                      // 0x00E4(0x0004) (Edit)
	float                                              TurnMaxGripReduction;                                     // 0x00E8(0x0004) (Edit)
	float                                              TurnGripScaleRate;                                        // 0x00EC(0x0004) (Edit)
	unsigned long                                      bTurnInPlaceOnSteer : 1;                                  // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimTank");
		return ptr;
	}

};


// Class Engine.SVehicleWheel
// 0x00CC (0x0114 - 0x0048)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                                    // 0x0048(0x0004) (Edit)
	float                                              MotorTorque;                                              // 0x004C(0x0004) (Edit)
	float                                              BrakeTorque;                                              // 0x0050(0x0004) (Edit)
	float                                              ChassisTorque;                                            // 0x0054(0x0004) (Edit)
	unsigned long                                      bPoweredWheel : 1;                                        // 0x0058(0x0004) (Edit)
	unsigned long                                      bHoverWheel : 1;                                          // 0x0058(0x0004) (Edit)
	unsigned long                                      bCollidesVehicles : 1;                                    // 0x0058(0x0004) (Edit)
	unsigned long                                      bCollidesPawns : 1;                                       // 0x0058(0x0004) (Edit)
	unsigned long                                      bIsSquealing : 1;                                         // 0x0058(0x0004)
	unsigned long                                      bWheelOnGround : 1;                                       // 0x0058(0x0004)
	float                                              SteerFactor;                                              // 0x005C(0x0004) (Edit)
	struct FName                                       SkelControlName;                                          // 0x0060(0x0008) (Edit)
	class USkelControlWheel*                           WheelControl;                                             // 0x0068(0x0004)
	struct FName                                       BoneName;                                                 // 0x006C(0x0008) (Edit)
	struct FVector                                     BoneOffset;                                               // 0x0074(0x000C) (Edit)
	float                                              WheelRadius;                                              // 0x0080(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x0084(0x0004) (Edit)
	float                                              SuspensionSpeed;                                          // 0x0088(0x0004) (Edit)
	class UParticleSystem*                             WheelParticleSystem;                                      // 0x008C(0x0004) (Edit)
	TEnumAsByte<EWheelSide>                            Side;                                                     // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              LongSlipFactor;                                           // 0x0094(0x0004) (Edit)
	float                                              LatSlipFactor;                                            // 0x0098(0x0004) (Edit)
	float                                              HandbrakeLongSlipFactor;                                  // 0x009C(0x0004) (Edit)
	float                                              HandbrakeLatSlipFactor;                                   // 0x00A0(0x0004) (Edit)
	float                                              ParkedSlipFactor;                                         // 0x00A4(0x0004) (Edit)
	struct FVector                                     WheelPosition;                                            // 0x00A8(0x000C)
	float                                              SpinVel;                                                  // 0x00B4(0x0004)
	float                                              LongSlipRatio;                                            // 0x00B8(0x0004)
	float                                              LatSlipAngle;                                             // 0x00BC(0x0004)
	struct FVector                                     ContactNormal;                                            // 0x00C0(0x000C)
	struct FVector                                     LongDirection;                                            // 0x00CC(0x000C)
	struct FVector                                     LatDirection;                                             // 0x00D8(0x000C)
	float                                              ContactForce;                                             // 0x00E4(0x0004)
	float                                              LongImpulse;                                              // 0x00E8(0x0004)
	float                                              LatImpulse;                                               // 0x00EC(0x0004)
	float                                              DesiredSuspensionPosition;                                // 0x00F0(0x0004)
	float                                              SuspensionPosition;                                       // 0x00F4(0x0004)
	float                                              CurrentRotation;                                          // 0x00F8(0x0004)
	struct FPointer                                    WheelShape;                                               // 0x00FC(0x0004) (Const, Transient)
	int                                                WheelMaterialIndex;                                       // 0x0100(0x0004) (Const, Transient)
	class UClass*                                      WheelPSCClass;                                            // 0x0104(0x0004)
	class UParticleSystemComponent*                    WheelParticleComp;                                        // 0x0108(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       SlipParticleParamName;                                    // 0x010C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleWheel");
		return ptr;
	}

};


// Class Engine.Prefab
// 0x0024 (0x0060 - 0x003C)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                            // 0x003C(0x0004) (Const)
	TArray<class UObject*>                             PrefabArchetypes;                                         // 0x0040(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             RemovedArchetypes;                                        // 0x004C(0x000C) (Const, NeedCtorLink)
	class USequence*                                   PrefabSequence;                                           // 0x0058(0x0004) (Const)
	class UTexture2D*                                  PrefabPreview;                                            // 0x005C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Prefab");
		return ptr;
	}

};


// Class Engine.PrefabInstance
// 0x00BC (0x027C - 0x01C0)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                           // 0x01C0(0x0004) (Const)
	int                                                TemplateVersion;                                          // 0x01C4(0x0004) (Const)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x01C8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class USequence*                                   SequenceInstance;                                         // 0x0204(0x0004) (Const)
	int                                                PI_PackageVersion;                                        // 0x0208(0x0004) (Const)
	int                                                PI_LicenseePackageVersion;                                // 0x020C(0x0004) (Const)
	TArray<unsigned char>                              PI_Bytes;                                                 // 0x0210(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_CompleteObjects;                                       // 0x021C(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_ReferencedObjects;                                     // 0x0228(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             PI_SavedNames;                                            // 0x0234(0x000C) (Const, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0240(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabInstance");
		return ptr;
	}

};


// Class Engine.SequenceObject
// 0x0048 (0x0084 - 0x003C)
class USequenceObject : public UObject
{
public:
	int                                                ObjClassVersion;                                          // 0x003C(0x0004) (Const)
	int                                                ObjInstanceVersion;                                       // 0x0040(0x0004) (Const)
	class USequence*                                   ParentSequence;                                           // 0x0044(0x0004) (Const, NoImport)
	int                                                ObjPosX;                                                  // 0x0048(0x0004)
	int                                                ObjPosY;                                                  // 0x004C(0x0004)
	struct FString                                     ObjName;                                                  // 0x0050(0x000C) (NeedCtorLink)
	struct FString                                     ObjCategory;                                              // 0x005C(0x000C) (NeedCtorLink)
	struct FColor                                      ObjColor;                                                 // 0x0068(0x0004)
	struct FString                                     ObjComment;                                               // 0x006C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bDeletable : 1;                                           // 0x0078(0x0004)
	unsigned long                                      bDrawFirst : 1;                                           // 0x0078(0x0004)
	unsigned long                                      bDrawLast : 1;                                            // 0x0078(0x0004)
	unsigned long                                      bOutputObjCommentToScreen : 1;                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bSuppressAutoComment : 1;                                 // 0x0078(0x0004) (Edit)
	int                                                DrawWidth;                                                // 0x007C(0x0004)
	int                                                DrawHeight;                                               // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceObject");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
	bool IsValidLevelSequenceObject();
	class AWorldInfo* GetWorldInfo();
	void ScriptLog(const struct FString& LogText, bool bWarning);
};


// Class Engine.SequenceVariable
// 0x0008 (0x008C - 0x0084)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                                  // 0x0084(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceVariable");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.InterpData
// 0x003C (0x00C8 - 0x008C)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                             // 0x008C(0x0004)
	float                                              PathBuildTime;                                            // 0x0090(0x0004)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x0094(0x000C) (ExportObject, NeedCtorLink)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x00A0(0x0004) (ExportObject)
	TArray<class UInterpFilter*>                       InterpFilters;                                            // 0x00A4(0x000C) (NeedCtorLink)
	class UInterpFilter*                               SelectedFilter;                                           // 0x00B0(0x0004)
	TArray<class UInterpFilter*>                       DefaultFilters;                                           // 0x00B4(0x000C) (Transient, NeedCtorLink)
	float                                              EdSectionStart;                                           // 0x00C0(0x0004)
	float                                              EdSectionEnd;                                             // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}

};


// Class Engine.SequenceOp
// 0x0040 (0x00C4 - 0x0084)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bActive : 1;                                              // 0x0084(0x0004)
	unsigned long                                      bLatentExecution : 1;                                     // 0x0084(0x0004) (Const)
	unsigned long                                      bAutoActivateOutputLinks : 1;                             // 0x0084(0x0004)
	TArray<struct FSeqOpInputLink>                     InputLinks;                                               // 0x0088(0x000C) (NeedCtorLink)
	TArray<struct FSeqOpOutputLink>                    OutputLinks;                                              // 0x0094(0x000C) (NeedCtorLink)
	TArray<struct FSeqVarLink>                         VariableLinks;                                            // 0x00A0(0x000C) (NeedCtorLink)
	TArray<struct FSeqEventLink>                       EventLinks;                                               // 0x00AC(0x000C) (NeedCtorLink)
	int                                                PlayerIndex;                                              // 0x00B8(0x0004) (Transient, NoImport)
	int                                                ActivateCount;                                            // 0x00BC(0x0004) (Transient)
	int                                                SearchTag;                                                // 0x00C0(0x0004) (Const, Transient, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceOp");
		return ptr;
	}


	class AController* GetController(class AActor* TheActor);
	class APawn* GetPawn(class AActor* TheActor);
	void Reset();
	void PublishLinkedVariableValues();
	void PopulateLinkedVariableValues();
	void VersionUpdated(int OldVersion, int NewVersion);
	void Deactivated();
	void Activated();
	void LinkedVariables(class UClass* VarClass, const struct FString& inDesc, class USequenceVariable** OutVariable);
	void GetBoolVars(const struct FString& inDesc, TArray<unsigned char>* boolVars);
	void GetObjectVars(const struct FString& inDesc, TArray<class UObject*>* objVars);
	void GetLinkedObjects(class UClass* ObjectType, bool bRecurse, TArray<class USequenceObject*>* out_Objects);
	bool HasLinkedOps(bool bConsiderInputLinks);
};


// Class Engine.SequenceAction
// 0x0018 (0x00DC - 0x00C4)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                              // 0x00C4(0x0008)
	unsigned long                                      bCallHandler : 1;                                         // 0x00CC(0x0004)
	TArray<class UObject*>                             Targets;                                                  // 0x00D0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceAction");
		return ptr;
	}

};


// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x00DC(0x0004) (Edit)
	struct FName                                       EventName;                                                // 0x00E0(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActivateRemoteEvent");
		return ptr;
	}

};


// Class Engine.SeqAct_Latent
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray<class AActor*>                              LatentActors;                                             // 0x00DC(0x000C) (NeedCtorLink)
	unsigned long                                      bAborted : 1;                                             // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Latent");
		return ptr;
	}


	bool Update(float DeltaTime);
	void AbortFor(class AActor* latentActor);
};


// Class Engine.SeqAct_ActorFactory
// 0x002C (0x0118 - 0x00EC)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      bIsSpawning : 1;                                          // 0x00EC(0x0004)
	unsigned long                                      bCheckSpawnCollision : 1;                                 // 0x00EC(0x0004) (Edit)
	class UActorFactory*                               Factory;                                                  // 0x00F0(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TEnumAsByte<EPointSelection>                       PointSelection;                                           // 0x00F4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	TArray<class AActor*>                              SpawnPoints;                                              // 0x00F8(0x000C) (Edit, NeedCtorLink)
	int                                                SpawnCount;                                               // 0x0104(0x0004) (Edit)
	float                                              SpawnDelay;                                               // 0x0108(0x0004) (Edit)
	int                                                LastSpawnIdx;                                             // 0x010C(0x0004)
	int                                                SpawnedCount;                                             // 0x0110(0x0004)
	float                                              RemainingDelay;                                           // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactory");
		return ptr;
	}

};


// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x0118 - 0x0118)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactoryEx");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSequenceVariable");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00DC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_AddInt
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00DC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddInt");
		return ptr;
	}

};


// Class Engine.SeqAct_AIMoveToActor
// 0x0004 (0x00F0 - 0x00EC)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                                       // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIMoveToActor");
		return ptr;
	}

};


// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x00DC(0x0004) (Edit)
	class USoundNode*                                  ApplyNode;                                                // 0x00E0(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ApplySoundNode");
		return ptr;
	}

};


// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                                    // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToEvent");
		return ptr;
	}

};


// Class Engine.SeqAct_CameraFade
// 0x0024 (0x0100 - 0x00DC)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                                // 0x00DC(0x0004) (Edit)
	struct FVector2D                                   FadeAlpha;                                                // 0x00E0(0x0008) (Edit)
	float                                              FadeTime;                                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      bPersistFade : 1;                                         // 0x00EC(0x0004) (Edit)
	float                                              FadeTimeRemaining;                                        // 0x00F0(0x0004) (Transient)
	TArray<class ACamera*>                             CachedCameras;                                            // 0x00F4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraFade");
		return ptr;
	}

};


// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x0110 - 0x00DC)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                        // 0x00DC(0x0004) (Edit)
	unsigned long                                      bAlwaysFocus : 1;                                         // 0x00DC(0x0004) (Edit)
	unsigned long                                      bAdjustCamera : 1;                                        // 0x00DC(0x0004) (Deprecated)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x00DC(0x0004) (Edit)
	unsigned long                                      bIgnoreTrace : 1;                                         // 0x00DC(0x0004) (Edit)
	unsigned long                                      bAffectHead : 1;                                          // 0x00DC(0x0004) (Edit)
	unsigned long                                      bToggleGodMode : 1;                                       // 0x00DC(0x0004) (Edit)
	unsigned long                                      bLeaveCameraRotation : 1;                                 // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisableInput : 1;                                        // 0x00DC(0x0004) (Edit)
	unsigned long                                      bUsedTimer : 1;                                           // 0x00DC(0x0004)
	unsigned long                                      bCheckLineOfSight : 1;                                    // 0x00DC(0x0004) (Edit)
	struct FVector2D                                   InterpSpeedRange;                                         // 0x00E0(0x0008) (Edit)
	struct FVector2D                                   InFocusFOV;                                               // 0x00E8(0x0008) (Edit)
	struct FName                                       FocusBoneName;                                            // 0x00F0(0x0008) (Edit)
	struct FString                                     TextDisplay;                                              // 0x00F8(0x000C) (Edit, NeedCtorLink)
	float                                              TotalTime;                                                // 0x0104(0x0004) (Edit)
	float                                              CameraFOV;                                                // 0x0108(0x0004) (Edit)
	float                                              RemainingTime;                                            // 0x010C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraLookAt");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                                    // 0x00DC(0x0004)
	float                                              FloatResult;                                              // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToInt
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                            // 0x00DC(0x0004) (Edit)
	float                                              Value;                                                    // 0x00E0(0x0004)
	int                                                IntResult;                                                // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToInt");
		return ptr;
	}

};


// Class Engine.SeqAct_CauseDamage
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                               // 0x00DC(0x0004) (Edit)
	float                                              Momentum;                                                 // 0x00E0(0x0004) (Edit)
	float                                              DamageAmount;                                             // 0x00E4(0x0004) (Edit)
	class AActor*                                      Instigator;                                               // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CauseDamage");
		return ptr;
	}

};


// Class Engine.SeqAct_CauseDamageRadial
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_CauseDamageRadial : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                               // 0x00DC(0x0004) (Edit)
	float                                              Momentum;                                                 // 0x00E0(0x0004) (Edit)
	float                                              DamageAmount;                                             // 0x00E4(0x0004) (Edit)
	float                                              DamageRadius;                                             // 0x00E8(0x0004) (Edit)
	unsigned long                                      bDamageFalloff : 1;                                       // 0x00EC(0x0004) (Edit)
	class AActor*                                      Instigator;                                               // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CauseDamageRadial");
		return ptr;
	}

};


// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00E1 - 0x00DC)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                                       // 0x00DC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bBlockActors : 1;                                         // 0x00DC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00DC(0x0004) (Edit, Const, EditConst)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x00E0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ChangeCollision");
		return ptr;
	}

};


// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CommitMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_CrossFadeMusicTracks
// 0x0044 (0x0130 - 0x00EC)
class USeqAct_CrossFadeMusicTracks : public USeqAct_Latent
{
public:
	struct FName                                       TrackBankName;                                            // 0x00EC(0x0008) (Edit)
	struct FName                                       CurrTrackType;                                            // 0x00F4(0x0008)
	class UAudioComponent*                             CurrPlayingTrack;                                         // 0x00FC(0x0004) (ExportObject, Component, EditInline)
	float                                              AdjustVolumeDuration;                                     // 0x0100(0x0004)
	float                                              AdjustVolumeLevel;                                        // 0x0104(0x0004)
	float                                              NextTrackToPlayAt;                                        // 0x0108(0x0004)
	struct FMusicTrackStruct                           NextTrackToPlay;                                          // 0x010C(0x0024)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CrossFadeMusicTracks");
		return ptr;
	}


	void STATIC_StopAllMusicManagerSounds();
	void ClientSideCrossFadeTrackImmediately(struct FMusicTrackStruct* TrackToPlay);
	void CrossFadeTrack(struct FMusicTrackStruct* TrackToPlay);
};


// Class Engine.SeqAct_CrowdSpawner
// 0x01E8 (0x02D4 - 0x00EC)
class USeqAct_CrowdSpawner : public USeqAct_Latent
{
public:
	unsigned long                                      bSpawningActive : 1;                                      // 0x00EC(0x0004)
	unsigned long                                      bConformToBSP : 1;                                        // 0x00EC(0x0004) (Edit)
	unsigned long                                      bConformToWorld : 1;                                      // 0x00EC(0x0004) (Edit)
	unsigned long                                      bLineSpawner : 1;                                         // 0x00EC(0x0004) (Edit)
	unsigned long                                      bSpawnAtEdge : 1;                                         // 0x00EC(0x0004) (Edit)
	unsigned long                                      bFlockScaleUniform : 1;                                   // 0x00EC(0x0004) (Edit)
	unsigned long                                      bDrawDebugInfo : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      bEnableCrowdLightEnvironment : 1;                         // 0x00EC(0x0004) (Edit)
	float                                              ConformTraceDist;                                         // 0x00F0(0x0004) (Edit)
	int                                                ConformTraceInterval;                                     // 0x00F4(0x0004) (Edit)
	struct FVector                                     CollisionBoxScaling;                                      // 0x00F8(0x000C) (Edit)
	TArray<class ACrowdAttractor*>                     AssignedMoveTargets;                                      // 0x0104(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              SpawnLocs;                                                // 0x0110(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              SafeSpawnLocs;                                            // 0x011C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FRandomCrowdAgentData>               RandomAgents;                                             // 0x0128(0x000C) (Edit, NeedCtorLink)
	float                                              RespawnHiddenTime;                                        // 0x0134(0x0004) (Edit)
	TArray<float>                                      SpawnLocsHiddenTimes;                                     // 0x0138(0x000C) (Transient, NeedCtorLink)
	class APlayerController*                           CachedPC;                                                 // 0x0144(0x0004) (Transient)
	float                                              HalfCameraFOVCosine;                                      // 0x0148(0x0004) (Transient)
	int                                                TotalSpawnNum;                                            // 0x014C(0x0004) (Transient)
	float                                              SpawnRate;                                                // 0x0150(0x0004) (Edit)
	int                                                SpawnNum;                                                 // 0x0154(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0158(0x0004) (Edit)
	float                                              Remainder;                                                // 0x015C(0x0004)
	class UClass*                                      AgentClass;                                               // 0x0160(0x0004)
	class UClass*                                      CrowdNodeClass;                                           // 0x0164(0x0004)
	float                                              AwareRadius;                                              // 0x0168(0x0004) (Edit)
	int                                                AwareUpdateInterval;                                      // 0x016C(0x0004) (Edit)
	float                                              AvoidOtherStrength;                                       // 0x0170(0x0004) (Edit)
	float                                              AvoidOtherRadius;                                         // 0x0174(0x0004) (Edit)
	float                                              MatchVelStrength;                                         // 0x0178(0x0004) (Edit)
	float                                              ToPathStrength;                                           // 0x017C(0x0004) (Edit)
	float                                              FollowPathStrength;                                       // 0x0180(0x0004) (Edit)
	float                                              PathDistance;                                             // 0x0184(0x0004) (Edit)
	float                                              ToAttractorStrength;                                      // 0x0188(0x0004) (Edit)
	float                                              MinVelDamping;                                            // 0x018C(0x0004) (Edit)
	float                                              MaxVelDamping;                                            // 0x0190(0x0004) (Edit)
	struct FRawDistributionFloat                       ActionDuration;                                           // 0x0194(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       ActionInterval;                                           // 0x01B0(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TargetActionInterval;                                     // 0x01CC(0x001C) (Edit, Component, NeedCtorLink)
	TArray<struct FName>                               ActionAnimNames;                                          // 0x01E8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               TargetActionAnimNames;                                    // 0x01F4(0x000C) (NeedCtorLink)
	TArray<struct FCrowdTargetActionInfo>              TargetActions;                                            // 0x0200(0x000C) (Edit, NeedCtorLink)
	struct FName                                       SpawnAnimName;                                            // 0x020C(0x0008) (Edit)
	TArray<struct FName>                               DeathAnimNames;                                           // 0x0214(0x000C) (Edit, NeedCtorLink)
	float                                              ActionBlendTime;                                          // 0x0220(0x0004) (Edit)
	float                                              ReActionDelay;                                            // 0x0224(0x0004) (Edit)
	float                                              RotateToTargetSpeed;                                      // 0x0228(0x0004) (Edit)
	float                                              SpeedBlendStart;                                          // 0x022C(0x0004) (Edit)
	float                                              SpeedBlendEnd;                                            // 0x0230(0x0004) (Edit)
	float                                              AnimVelRate;                                              // 0x0234(0x0004) (Edit)
	float                                              MaxYawRate;                                               // 0x0238(0x0004) (Edit)
	class USkeletalMesh*                               FlockMesh;                                                // 0x023C(0x0004)
	TArray<class USkeletalMesh*>                       FlockMeshes;                                              // 0x0240(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  RandomMaterials;                                          // 0x024C(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     FlockMeshMinScale3D;                                      // 0x0258(0x000C) (Edit)
	struct FVector                                     FlockMeshMaxScale3D;                                      // 0x0264(0x000C) (Edit)
	TArray<class UAnimSet*>                            FlockAnimSets;                                            // 0x0270(0x000C) (Edit, NeedCtorLink)
	struct FName                                       WalkAnimName;                                             // 0x027C(0x0008)
	TArray<struct FName>                               WalkAnimNames;                                            // 0x0284(0x000C) (Edit, NeedCtorLink)
	struct FName                                       RunAnimName;                                              // 0x0290(0x0008)
	TArray<struct FName>                               RunAnimNames;                                             // 0x0298(0x000C) (Edit, NeedCtorLink)
	class UAnimTree*                                   FlockAnimTree;                                            // 0x02A4(0x0004) (Edit)
	int                                                Health;                                                   // 0x02A8(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveDeathEffect;                                     // 0x02AC(0x0004) (Edit)
	float                                              ExplosiveDeathEffectScale;                                // 0x02B0(0x0004) (Edit)
	TArray<class ACrowdAgent*>                         SpawnedList;                                              // 0x02B4(0x000C) (NeedCtorLink)
	struct FLightingChannelContainer                   FlockLighting;                                            // 0x02C0(0x0004) (Edit)
	TArray<struct FCrowdAttachmentList>                Attachments;                                              // 0x02C4(0x000C) (Edit, NeedCtorLink)
	class ACrowdReplicationActor*                      RepActor;                                                 // 0x02D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CrowdSpawner");
		return ptr;
	}


	class ACrowdAgent* SpawnAgent(class AActor* SpawnLoc);
	void CreateAttachments(class ACrowdAgent* Agent);
	void Reset();
	void UpdateSpawning(float DeltaSeconds);
	void KillAgents();
};


// Class Engine.SeqAct_Delay
// 0x0014 (0x0100 - 0x00EC)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                         // 0x00EC(0x0004) (Const)
	float                                              DefaultDuration;                                          // 0x00F0(0x0004) (Const)
	float                                              Duration;                                                 // 0x00F4(0x0004) (Edit)
	float                                              LastUpdateTime;                                           // 0x00F8(0x0004) (Const)
	float                                              RemainingTime;                                            // 0x00FC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Delay");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x00FC - 0x00EC)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                                // 0x00EC(0x0004) (Edit)
	int                                                CurrentIdx;                                               // 0x00F0(0x0004) (Transient)
	float                                              SwitchDelay;                                              // 0x00F4(0x0004) (Transient)
	float                                              NextLinkTime;                                             // 0x00F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DelaySwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00DC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00DC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideInt");
		return ptr;
	}

};


// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                              // 0x00DC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FinishSequence");
		return ptr;
	}

};


// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x00EC - 0x00EC)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceGarbageCollection");
		return ptr;
	}

};


// Class Engine.SeqAct_ForceMaterialMipsResident
// 0x0020 (0x010C - 0x00EC)
class USeqAct_ForceMaterialMipsResident : public USeqAct_Latent
{
public:
	float                                              ForceDuration;                                            // 0x00EC(0x0004) (Edit)
	TArray<class UMaterialInterface*>                  ForceMaterials;                                           // 0x00F0(0x000C) (Edit, NeedCtorLink)
	float                                              RemainingTime;                                            // 0x00FC(0x0004)
	TArray<class UTexture2D*>                          ModifiedTextures;                                         // 0x0100(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceMaterialMipsResident");
		return ptr;
	}

};


// Class Engine.SeqAct_Gate
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x00DC(0x0004) (Edit)
	int                                                AutoCloseCount;                                           // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Gate");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                                 // 0x00DC(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetDistance");
		return ptr;
	}

};


// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                             // 0x00DC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetProperty");
		return ptr;
	}

};


// Class Engine.SeqAct_GetVelocity
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              Velocity;                                                 // 0x00DC(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetVelocity");
		return ptr;
	}

};


// Class Engine.SeqAct_Interp
// 0x0070 (0x015C - 0x00EC)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00EC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	float                                              PlayRate;                                                 // 0x0128(0x0004) (Edit)
	float                                              Position;                                                 // 0x012C(0x0004)
	float                                              ForceStartPosition;                                       // 0x0130(0x0004) (Edit)
	unsigned long                                      bIsPlaying : 1;                                           // 0x0134(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0134(0x0004)
	unsigned long                                      bIsBeingEdited : 1;                                       // 0x0134(0x0004) (Transient)
	unsigned long                                      bLooping : 1;                                             // 0x0134(0x0004) (Edit)
	unsigned long                                      bRewindOnPlay : 1;                                        // 0x0134(0x0004) (Edit)
	unsigned long                                      bNoResetOnRewind : 1;                                     // 0x0134(0x0004) (Edit)
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                              // 0x0134(0x0004) (Edit)
	unsigned long                                      bReversePlayback : 1;                                     // 0x0134(0x0004)
	unsigned long                                      bInterpForPathBuilding : 1;                               // 0x0134(0x0004) (Edit)
	unsigned long                                      bForceStartPos : 1;                                       // 0x0134(0x0004) (Edit)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x0134(0x0004) (Edit)
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                              // 0x0134(0x0004) (Edit)
	unsigned long                                      bIsSkippable : 1;                                         // 0x0134(0x0004) (Edit)
	TArray<class ACoverLink*>                          LinkedCover;                                              // 0x0138(0x000C) (Edit, NeedCtorLink)
	class UInterpData*                                 InterpData;                                               // 0x0144(0x0004) (ExportObject)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x0148(0x000C) (NeedCtorLink)
	class UClass*                                      ReplicatedActorClass;                                     // 0x0154(0x0004) (Const)
	class AMatineeActor*                               ReplicatedActor;                                          // 0x0158(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Interp");
		return ptr;
	}


	void Reset();
	void AddPlayerToDirectorTracks(class APlayerController* PC);
	void Stop();
	void SetPosition(float NewPosition, bool bJump);
};


// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                                  // 0x00DC(0x0004) (Edit)
	unsigned long                                      bObjectFound : 1;                                         // 0x00DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_IsInObjectList");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x00F0 - 0x00EC)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreamingBase");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x0100 - 0x00F0)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x00F0(0x0004) (Edit, Const)
	struct FName                                       LevelName;                                                // 0x00F4(0x0008) (Edit, Const)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x00FC - 0x00EC)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x00EC(0x0004) (Edit)
	struct FName                                       LevelName;                                                // 0x00F0(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelVisibility");
		return ptr;
	}

};


// Class Engine.SeqAct_Log
// 0x0014 (0x00F0 - 0x00DC)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                                      // 0x00DC(0x0004) (Edit)
	unsigned long                                      bIncludeObjComment : 1;                                   // 0x00DC(0x0004) (Edit)
	unsigned long                                      bIncludeTimeStamp : 1;                                    // 0x00DC(0x0004) (Edit)
	float                                              TargetDuration;                                           // 0x00E0(0x0004) (Edit)
	struct FVector                                     TargetOffset;                                             // 0x00E4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Log");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                         // 0x00DC(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x0100 - 0x00F0)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray<struct FLevelStreamingNameCombo>            Levels;                                                   // 0x00F0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUnloadAllOtherLevels : 1;                                // 0x00FC(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00FC(0x0004) (Transient)
	unsigned long                                      bUnloading : 1;                                           // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiLevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00DC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00DC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyInt");
		return ptr;
	}

};


// Class Engine.SeqAct_PlayCameraAnim
// 0x001C (0x0108 - 0x00EC)
class USeqAct_PlayCameraAnim : public USeqAct_Latent
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x00EC(0x0004) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x00F0(0x0004) (Edit)
	unsigned long                                      bRandomStartTime : 1;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      bStopped : 1;                                             // 0x00F0(0x0004) (Transient)
	float                                              BlendInTime;                                              // 0x00F4(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x00F8(0x0004) (Edit)
	float                                              Rate;                                                     // 0x00FC(0x0004) (Edit)
	float                                              IntensityScale;                                           // 0x0100(0x0004) (Edit)
	float                                              AnimTimeRemaining;                                        // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayCameraAnim");
		return ptr;
	}

};


// Class Engine.SeqAct_PlayFaceFXAnim
// 0x001C (0x00F8 - 0x00DC)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x00DC(0x0004) (Edit)
	struct FString                                     FaceFXGroupName;                                          // 0x00E0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FaceFXAnimName;                                           // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayFaceFXAnim");
		return ptr;
	}

};


// Class Engine.SeqAct_PlaySound
// 0x0020 (0x010C - 0x00EC)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x00EC(0x0004) (Edit)
	float                                              ExtraDelay;                                               // 0x00F0(0x0004) (Edit)
	float                                              SoundDuration;                                            // 0x00F4(0x0004) (Transient)
	float                                              FadeInTime;                                               // 0x00F8(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x00FC(0x0004) (Edit)
	float                                              VolumeMultiplier;                                         // 0x0100(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x0104(0x0004) (Edit)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0108(0x0004) (Edit)
	unsigned long                                      bStopped : 1;                                             // 0x0108(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlaySound");
		return ptr;
	}

};


// Class Engine.SeqAct_Possess
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                            // 0x00DC(0x0004) (Transient)
	unsigned long                                      bKillOldPawn : 1;                                         // 0x00E0(0x0004) (Edit)
	unsigned long                                      bTryToLeaveVehicle : 1;                                   // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Possess");
		return ptr;
	}

};


// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0104 - 0x00EC)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                            // 0x00EC(0x0008) (Edit)
	TArray<struct FName>                               InitiallyLoadedSecondaryLevelNames;                       // 0x00F4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsHighPriority : 1;                                      // 0x0100(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PrepareMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_Switch
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                                // 0x00DC(0x0004) (Edit)
	int                                                IncrementAmount;                                          // 0x00E0(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x00E4(0x0004) (Edit)
	unsigned long                                      bAutoDisableLinks : 1;                                    // 0x00E4(0x0004) (Edit)
	TArray<int>                                        Indices;                                                  // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Switch");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x0100 - 0x00F4)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray<int>                                        AutoDisabledIndices;                                      // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RandomSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray<struct FSwitchRange>                        Ranges;                                                   // 0x00DC(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RangeSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBlockRigidBody");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBool
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBool");
		return ptr;
	}

};


// Class Engine.SeqAct_SetCameraTarget
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                             // 0x00DC(0x0004) (Transient)
	struct FViewTargetTransitionParams                 TransitionParams;                                         // 0x00E0(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetCameraTarget");
		return ptr;
	}

};


// Class Engine.SeqAct_SetClothFrozen
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetClothFrozen : public USequenceAction
{
public:
	unsigned long                                      ParamValue : 1;                                           // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetClothFrozen");
		return ptr;
	}

};


// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0144 - 0x00EC)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                          // 0x00EC(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x00F0(0x0004) (Edit)
	float                                              MaxNearBlurAmount;                                        // 0x00F4(0x0004) (Edit)
	float                                              MaxFarBlurAmount;                                         // 0x00F8(0x0004) (Edit)
	struct FColor                                      ModulateBlurColor;                                        // 0x00FC(0x0004) (Edit)
	float                                              FocusInnerRadius;                                         // 0x0100(0x0004) (Edit)
	float                                              FocusDistance;                                            // 0x0104(0x0004) (Edit)
	struct FVector                                     FocusPosition;                                            // 0x0108(0x000C) (Edit)
	float                                              InterpolateSeconds;                                       // 0x0114(0x0004) (Edit)
	float                                              InterpolateElapsed;                                       // 0x0118(0x0004)
	float                                              OldFalloffExponent;                                       // 0x011C(0x0004)
	float                                              OldBlurKernelSize;                                        // 0x0120(0x0004)
	float                                              OldMaxNearBlurAmount;                                     // 0x0124(0x0004)
	float                                              OldMaxFarBlurAmount;                                      // 0x0128(0x0004)
	struct FColor                                      OldModulateBlurColor;                                     // 0x012C(0x0004)
	float                                              OldFocusInnerRadius;                                      // 0x0130(0x0004)
	float                                              OldFocusDistance;                                         // 0x0134(0x0004)
	struct FVector                                     OldFocusPosition;                                         // 0x0138(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDOFParams");
		return ptr;
	}

};


// Class Engine.SeqAct_SetFloat
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                                   // 0x00DC(0x0004)
	float                                              Value;                                                    // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_SetInt
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                                   // 0x00DC(0x0004)
	int                                                Value;                                                    // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetInt");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                              // 0x00DC(0x0004) (Edit)
	int                                                MaterialIndex;                                            // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMaterial");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00DC(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x00E0(0x0008) (Edit)
	float                                              ScalarValue;                                              // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstScalarParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00DC(0x0004) (Edit)
	class UTexture*                                    NewTexture;                                               // 0x00E0(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x00E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstTexParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x00F8 - 0x00DC)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00DC(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x00E0(0x0008) (Edit)
	struct FLinearColor                                VectorValue;                                              // 0x00E8(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstVectorParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x00FC - 0x00EC)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                         // 0x00EC(0x0004) (Edit)
	float                                              InterpolateSeconds;                                       // 0x00F0(0x0004) (Edit)
	float                                              InterpolateElapsed;                                       // 0x00F4(0x0004)
	float                                              OldMotionBlurAmount;                                      // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMotionBlurParams");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMusicTrack
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetMusicTrack : public USequenceAction
{
public:
	struct FName                                       TrackBankName;                                            // 0x00DC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMusicTrack");
		return ptr;
	}

};


// Class Engine.SeqAct_SetObject
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                             // 0x00DC(0x0004) (Edit)
	class UObject*                                     Value;                                                    // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetObject");
		return ptr;
	}

};


// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00DD - 0x00DC)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	TEnumAsByte<EPhysics>                              newPhysics;                                               // 0x00DC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetPhysics");
		return ptr;
	}

};


// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetRigidBodyIgnoreVehicles");
		return ptr;
	}

};


// Class Engine.SeqAct_SetString
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                                   // 0x00DC(0x000C) (NeedCtorLink)
	struct FString                                     Value;                                                    // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetString");
		return ptr;
	}

};


// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00DC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00DC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00E0(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x00E4(0x0004)
	int                                                IntResult;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractInt");
		return ptr;
	}

};


// Class Engine.SeqAct_Timer
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                           // 0x00DC(0x0004) (Transient)
	float                                              Time;                                                     // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Timer");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_Toggle
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_Toggle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Toggle");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ToggleDynamicChannel
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ToggleDynamicChannel : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleDynamicChannel");
		return ptr;
	}

};


// Class Engine.SeqAct_Trace
// 0x0030 (0x010C - 0x00DC)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                         // 0x00DC(0x0004) (Edit)
	unsigned long                                      bTraceWorld : 1;                                          // 0x00DC(0x0004) (Edit)
	struct FVector                                     TraceExtent;                                              // 0x00E0(0x000C) (Edit)
	struct FVector                                     StartOffset;                                              // 0x00EC(0x000C) (Edit)
	struct FVector                                     EndOffset;                                                // 0x00F8(0x000C) (Edit)
	class UObject*                                     HitObject;                                                // 0x0104(0x0004) (Edit, EditConst)
	float                                              Distance;                                                 // 0x0108(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Trace");
		return ptr;
	}

};


// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x00FC - 0x00EC)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray<struct FName>                               LevelNames;                                               // 0x00EC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_WaitForLevelsVisible");
		return ptr;
	}

};


// Class Engine.SequenceCondition
// 0x0000 (0x00C4 - 0x00C4)
class USequenceCondition : public USequenceOp
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceCondition");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqCond_CompareBool
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_CompareBool : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareBool");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00CC - 0x00C4)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                                   // 0x00C4(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00CC - 0x00C4)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                                   // 0x00C4(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareInt");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_CompareObject : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareObject");
		return ptr;
	}

};


// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_GetServerType : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_GetServerType");
		return ptr;
	}

};


// Class Engine.SeqCond_Increment
// 0x000C (0x00D0 - 0x00C4)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                          // 0x00C4(0x0004) (Edit)
	int                                                ValueA;                                                   // 0x00C8(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_Increment");
		return ptr;
	}

};


// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00D0 - 0x00C4)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                          // 0x00C4(0x0004) (Edit)
	float                                              ValueA;                                                   // 0x00C8(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IncrementFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsInCombat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00C8 - 0x00C4)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                        // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsLoggedIn");
		return ptr;
	}


	bool CheckLogins();
};


// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsSameTeam");
		return ptr;
	}

};


// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchBase");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00D0 - 0x00C4)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchClassInfo>                    ClassArray;                                               // 0x00C4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchClass");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchName
// 0x000C (0x00D0 - 0x00C4)
class USeqCond_SwitchName : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchNameCase>                     SupportedValues;                                          // 0x00C4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchName");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchObject
// 0x0010 (0x00D4 - 0x00C4)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchObjectCase>                   SupportedValues;                                          // 0x00C4(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      MetaClass;                                                // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchObject");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SequenceEvent
// 0x0030 (0x00F4 - 0x00C4)
class USequenceEvent : public USequenceOp
{
public:
	class AActor*                                      Originator;                                               // 0x00C4(0x0004)
	class AActor*                                      Instigator;                                               // 0x00C8(0x0004) (Transient)
	float                                              ActivationTime;                                           // 0x00CC(0x0004) (Transient)
	int                                                TriggerCount;                                             // 0x00D0(0x0004) (Transient)
	int                                                MaxTriggerCount;                                          // 0x00D4(0x0004) (Edit)
	float                                              ReTriggerDelay;                                           // 0x00D8(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x00DC(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x00DC(0x0004) (Edit)
	unsigned long                                      bRegistered : 1;                                          // 0x00DC(0x0004) (Transient)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x00DC(0x0004) (Edit, Const)
	unsigned char                                      Priority;                                                 // 0x00E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	int                                                MaxWidth;                                                 // 0x00E4(0x0004)
	TArray<struct FQueuedActivationInfo>               QueuedActivations;                                        // 0x00E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceEvent");
		return ptr;
	}


	void Toggled();
	void Reset();
	bool CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, TArray<int>* ActivateIndices);
	void RegisterEvent();
};


// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x00F8 - 0x00F4)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                         // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AISeeEnemy");
		return ptr;
	}

};


// Class Engine.SeqEvent_Console
// 0x0014 (0x0108 - 0x00F4)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                         // 0x00F4(0x0008) (Edit)
	struct FString                                     EventDesc;                                                // 0x00FC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Console");
		return ptr;
	}

};


// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ConstraintBroken");
		return ptr;
	}

};


// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Destroyed");
		return ptr;
	}

};


// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_GetInventory");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelBeginning");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelLoaded");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelStartup");
		return ptr;
	}

};


// Class Engine.SeqEvent_Mover
// 0x0004 (0x00F8 - 0x00F4)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                             // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Mover");
		return ptr;
	}


	void NotifyFinishedOpen();
	void NotifyDetached(class AActor* Other);
	void NotifyAttached(class AActor* Other);
	void NotifyEncroachingOn(class AActor* Hit);
	void RegisterEvent();
};


// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x00F8 - 0x00F4)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                              // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ProjectileLanded");
		return ptr;
	}

};


// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x0100 - 0x00F4)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                                // 0x00F4(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RemoteEvent");
		return ptr;
	}

};


// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x00F8 - 0x00F4)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                                     // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RigidBodyCollision");
		return ptr;
	}

};


// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SeeDeath");
		return ptr;
	}

};


// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x0100 - 0x00F4)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                               // 0x00F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SequenceActivated");
		return ptr;
	}

};


// Class Engine.SeqEvent_Touch
// 0x0028 (0x011C - 0x00F4)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x00F4(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoredClassProximityTypes;                               // 0x0100(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bForceOverlapping : 1;                                    // 0x010C(0x0004) (Edit)
	unsigned long                                      bUseInstigator : 1;                                       // 0x010C(0x0004) (Edit)
	unsigned long                                      bAllowDeadPawns : 1;                                      // 0x010C(0x0004) (Edit)
	TArray<class AActor*>                              TouchedList;                                              // 0x0110(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Touch");
		return ptr;
	}


	void NotifyTouchingPawnDied(class APawn* P);
	void Toggled();
	bool CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest);
	bool CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest);
};


// Class Engine.SeqEvent_Used
// 0x0018 (0x010C - 0x00F4)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                                       // 0x00F4(0x0004) (Edit)
	float                                              InteractDistance;                                         // 0x00F8(0x0004) (Edit)
	struct FString                                     InteractText;                                             // 0x00FC(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  InteractIcon;                                             // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Used");
		return ptr;
	}

};


// Class Engine.Sequence
// 0x0050 (0x0114 - 0x00C4)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                                  // 0x00C4(0x0004) (Const)
	TArray<class USequenceObject*>                     SequenceObjects;                                          // 0x00C8(0x000C) (Const, ExportObject, NeedCtorLink)
	TArray<class USequenceOp*>                         ActiveSequenceOps;                                        // 0x00D4(0x000C) (Const, NeedCtorLink)
	TArray<class USequence*>                           NestedSequences;                                          // 0x00E0(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class USequenceEvent*>                      UnregisteredEvents;                                       // 0x00EC(0x000C) (Const, NeedCtorLink)
	TArray<struct FActivateOp>                         DelayedActivatedOps;                                      // 0x00F8(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bEnabled : 1;                                             // 0x0104(0x0004) (Edit)
	int                                                DefaultViewX;                                             // 0x0108(0x0004)
	int                                                DefaultViewY;                                             // 0x010C(0x0004)
	float                                              DefaultViewZoom;                                          // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Sequence");
		return ptr;
	}


	void SetEnabled(bool bInEnabled);
	void Reset();
	void FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects);
};


// Class Engine.SequenceFrame
// 0x0020 (0x00A4 - 0x0084)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                                    // 0x0084(0x0004) (Edit)
	int                                                SizeY;                                                    // 0x0088(0x0004) (Edit)
	int                                                BorderWidth;                                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bDrawBox : 1;                                             // 0x0090(0x0004) (Edit)
	unsigned long                                      bFilled : 1;                                              // 0x0090(0x0004) (Edit)
	unsigned long                                      bTileFill : 1;                                            // 0x0090(0x0004) (Edit)
	struct FColor                                      BorderColor;                                              // 0x0094(0x0004) (Edit)
	struct FColor                                      FillColor;                                                // 0x0098(0x0004) (Edit)
	class UTexture2D*                                  FillTexture;                                              // 0x009C(0x0004) (Edit)
	class UMaterial*                                   FillMaterial;                                             // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrame");
		return ptr;
	}

};


// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00A4 - 0x00A4)
class USequenceFrameWrapped : public USequenceFrame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrameWrapped");
		return ptr;
	}

};


// Class Engine.SeqVar_Bool
// 0x0004 (0x0090 - 0x008C)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                                   // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Bool");
		return ptr;
	}

};


// Class Engine.SeqVar_External
// 0x0010 (0x009C - 0x008C)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x008C(0x0004)
	struct FString                                     VariableLabel;                                            // 0x0090(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_External");
		return ptr;
	}

};


// Class Engine.SeqVar_Float
// 0x0004 (0x0090 - 0x008C)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                               // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Float");
		return ptr;
	}

};


// Class Engine.SeqVar_Object
// 0x0010 (0x009C - 0x008C)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                                 // 0x008C(0x0004) (Edit)
	TArray<class UClass*>                              SupportedClasses;                                         // 0x0090(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Object");
		return ptr;
	}


	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValue();
};


// Class Engine.SeqVar_Group
// 0x0018 (0x00B4 - 0x009C)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                                // 0x009C(0x0008) (Edit)
	unsigned long                                      bCachedList : 1;                                          // 0x00A4(0x0004) (Transient)
	TArray<class UObject*>                             Actors;                                                   // 0x00A8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Group");
		return ptr;
	}

};


// Class Engine.SeqVar_Int
// 0x0004 (0x0090 - 0x008C)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                                 // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Int");
		return ptr;
	}

};


// Class Engine.SeqVar_MusicTrack
// 0x0024 (0x00C0 - 0x009C)
class USeqVar_MusicTrack : public USeqVar_Object
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                               // 0x009C(0x0024) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_MusicTrack");
		return ptr;
	}

};


// Class Engine.SeqVar_MusicTrackBank
// 0x000C (0x00A8 - 0x009C)
class USeqVar_MusicTrackBank : public USeqVar_Object
{
public:
	TArray<struct FMusicTrackStruct>                   MusicTrackBank;                                           // 0x009C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_MusicTrackBank");
		return ptr;
	}

};


// Class Engine.SeqVar_Name
// 0x0008 (0x0094 - 0x008C)
class USeqVar_Name : public USequenceVariable
{
public:
	struct FName                                       NameValue;                                                // 0x008C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Name");
		return ptr;
	}

};


// Class Engine.SeqVar_Named
// 0x0010 (0x009C - 0x008C)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x008C(0x0004)
	struct FName                                       FindVarName;                                              // 0x0090(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0098(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Named");
		return ptr;
	}

};


// Class Engine.SeqVar_ObjectList
// 0x000C (0x00A8 - 0x009C)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray<class UObject*>                             ObjList;                                                  // 0x009C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectList");
		return ptr;
	}


	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValue();
};


// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x00BC - 0x009C)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                           // 0x009C(0x0004)
	TArray<class UObject*>                             ContainedObjects;                                         // 0x00A0(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              ExcludeClassList;                                         // 0x00AC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCollidingOnly : 1;                                       // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectVolume");
		return ptr;
	}

};


// Class Engine.SeqVar_Player
// 0x0014 (0x00B0 - 0x009C)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray<class UObject*>                             Players;                                                  // 0x009C(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bAllPlayers : 1;                                          // 0x00A8(0x0004) (Edit)
	int                                                PlayerIdx;                                                // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Player");
		return ptr;
	}


	class UObject* GetObjectValue();
};


// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x0098 - 0x0090)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                                      // 0x0090(0x0004) (Edit)
	float                                              Max;                                                      // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomFloat");
		return ptr;
	}

};


// Class Engine.SeqVar_RandomInt
// 0x0008 (0x0098 - 0x0090)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                                      // 0x0090(0x0004) (Edit)
	int                                                Max;                                                      // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomInt");
		return ptr;
	}

};


// Class Engine.SeqVar_String
// 0x000C (0x0098 - 0x008C)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                                 // 0x008C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_String");
		return ptr;
	}

};


// Class Engine.SeqVar_Union
// 0x0028 (0x00B4 - 0x008C)
class USeqVar_Union : public USequenceVariable
{
public:
	TArray<class UClass*>                              SupportedVariableClasses;                                 // 0x008C(0x000C) (NeedCtorLink)
	int                                                IntValue;                                                 // 0x0098(0x0004) (Edit)
	int                                                BoolValue;                                                // 0x009C(0x0004) (Edit)
	float                                              FloatValue;                                               // 0x00A0(0x0004) (Edit)
	struct FString                                     StringValue;                                              // 0x00A4(0x000C) (Edit, NeedCtorLink)
	class UObject*                                     ObjectValue;                                              // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Union");
		return ptr;
	}

};


// Class Engine.SeqVar_Vector
// 0x000C (0x0098 - 0x008C)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                                // 0x008C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Vector");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x01C8 - 0x01C0)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                            // 0x01C0(0x0004) (Edit)
	unsigned long                                      bIsPlaying : 1;                                           // 0x01C0(0x0004)
	class UAudioComponent*                             AudioComponent;                                           // 0x01C4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimple
// 0x000C (0x01D4 - 0x01C8)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                        // 0x01C8(0x0004) (Edit, EditConst, EditInline)
	class USoundCue*                                   SoundCueInstance;                                         // 0x01CC(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)
	class USoundNodeAmbient*                           SoundNodeInstance;                                        // 0x01D0(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x01D4 - 0x01D4)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundNonLoop");
		return ptr;
	}

};


// Class Engine.DistributionFloatSoundParameter
// 0x0000 (0x006D - 0x006D)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbient
// 0x00B4 (0x0100 - 0x004C)
class USoundNodeAmbient : public USoundNode
{
public:
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       MinRadius;                                                // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       MaxRadius;                                                // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       LPFMinRadius;                                             // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       LPFMaxRadius;                                             // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bSpatialize : 1;                                          // 0x00C0(0x0004) (Edit)
	unsigned long                                      bAttenuate : 1;                                           // 0x00C0(0x0004) (Edit)
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                          // 0x00C0(0x0004) (Edit)
	class USoundNodeWave*                              Wave;                                                     // 0x00C4(0x0004) (Edit)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x00C8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x00E4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbient");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbientNonLoop
// 0x0028 (0x0128 - 0x0100)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	struct FRawDistributionFloat                       DelayTime;                                                // 0x0100(0x001C) (Edit, Component, NeedCtorLink)
	TArray<struct FAmbientSoundSlot>                   SoundSlots;                                               // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x007C (0x00C8 - 0x004C)
class USoundNodeAttenuation : public USoundNode
{
public:
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       MinRadius;                                                // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       MaxRadius;                                                // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	float                                              dBAttenuationAtMax;                                       // 0x0088(0x0004) (Edit)
	struct FRawDistributionFloat                       LPFMinRadius;                                             // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       LPFMaxRadius;                                             // 0x00A8(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bSpatialize : 1;                                          // 0x00C4(0x0004) (Edit)
	unsigned long                                      bAttenuate : 1;                                           // 0x00C4(0x0004) (Edit)
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                          // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x000C (0x0058 - 0x004C)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x001C (0x0068 - 0x004C)
class USoundNodeDelay : public USoundNode
{
public:
	struct FRawDistributionFloat                       DelayDuration;                                            // 0x004C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x0058 - 0x004C)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0020 (0x006C - 0x004C)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                                    // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       LoopCount;                                                // 0x0050(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x004C - 0x004C)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x000C (0x0058 - 0x004C)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulator : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x0068(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x0068(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0074 (0x00C0 - 0x004C)
class USoundNodeOscillator : public USoundNode
{
public:
	struct FRawDistributionFloat                       Amplitude;                                                // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Frequency;                                                // 0x0068(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Offset;                                                   // 0x0084(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Center;                                                   // 0x00A0(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bModulatePitch : 1;                                       // 0x00BC(0x0004) (Edit)
	unsigned long                                      bModulateVolume : 1;                                      // 0x00BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0020 (0x006C - 0x004C)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x004C(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	unsigned long                                      bRandomizeWithoutReplacement : 1;                         // 0x0058(0x0004) (Edit)
	TArray<unsigned long>                              HasBeenUsed;                                              // 0x005C(0x000C) (Transient, NeedCtorLink)
	int                                                NumRandomUsed;                                            // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}

};


// Class Engine.Terrain
// 0x00EC (0x02AC - 0x01C0)
class ATerrain : public AInfo
{
public:
	TArray<struct FTerrainHeight>                      Heights;                                                  // 0x01C0(0x000C) (Const, Native)
	TArray<struct FTerrainInfoData>                    InfoData;                                                 // 0x01CC(0x000C) (Const, Native)
	TArray<struct FTerrainLayer>                       Layers;                                                   // 0x01D8(0x000C) (Edit, Const, NeedCtorLink)
	int                                                NormalMapLayer;                                           // 0x01E4(0x0004) (Edit)
	TArray<struct FTerrainDecoLayer>                   DecoLayers;                                               // 0x01E8(0x000C) (Edit, Const, Component, NeedCtorLink)
	TArray<struct FAlphaMap>                           AlphaMaps;                                                // 0x01F4(0x000C) (Const, Native)
	TArray<class UTerrainComponent*>                   TerrainComponents;                                        // 0x0200(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                NumSectionsX;                                             // 0x020C(0x0004) (Const)
	int                                                NumSectionsY;                                             // 0x0210(0x0004) (Const)
	int                                                SectionSize;                                              // 0x0214(0x0004) (Const)
	TArray<struct ATerrain_FTerrainWeightedMaterial>   WeightedMaterials;                                        // 0x0218(0x000C) (Const, Native)
	TArray<class UTerrainWeightMapTexture*>            WeightedTextureMaps;                                      // 0x0224(0x000C) (Const, Native)
	TArray<unsigned char>                              CachedDisplacements;                                      // 0x0230(0x000C) (Const, Native)
	float                                              MaxCollisionDisplacement;                                 // 0x023C(0x0004) (Const, Native)
	int                                                MaxTesselationLevel;                                      // 0x0240(0x0004) (Edit)
	int                                                MinTessellationLevel;                                     // 0x0244(0x0004) (Edit)
	float                                              TesselationDistanceScale;                                 // 0x0248(0x0004) (Edit)
	int                                                TessellationCheckCount;                                   // 0x024C(0x0004) (Deprecated)
	float                                              TessellationCheckDistance;                                // 0x0250(0x0004) (Edit)
	float                                              TessellationCheckBorder;                                  // 0x0254(0x0004) (Deprecated)
	int                                                CollisionTesselationLevel;                                // 0x0258(0x0004) (Edit)
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[0x2];                              // 0x025C(0x000C) (Const, Native)
	int                                                NumVerticesX;                                             // 0x0274(0x0004) (Const)
	int                                                NumVerticesY;                                             // 0x0278(0x0004) (Const)
	int                                                NumPatchesX;                                              // 0x027C(0x0004) (Edit)
	int                                                NumPatchesY;                                              // 0x0280(0x0004) (Edit)
	int                                                MaxComponentSize;                                         // 0x0284(0x0004) (Edit)
	int                                                StaticLightingResolution;                                 // 0x0288(0x0004) (Edit)
	unsigned long                                      bIsOverridingLightResolution : 1;                         // 0x028C(0x0004) (Edit)
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;                    // 0x028C(0x0004) (Edit)
	unsigned long                                      bCastShadow : 1;                                          // 0x028C(0x0004) (Edit)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bBlockRigidBody : 1;                                      // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                            // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bMorphingEnabled : 1;                                     // 0x028C(0x0004) (Edit)
	unsigned long                                      bMorphingGradientsEnabled : 1;                            // 0x028C(0x0004) (Edit)
	unsigned long                                      bLocked : 1;                                              // 0x028C(0x0004)
	unsigned long                                      bHeightmapLocked : 1;                                     // 0x028C(0x0004)
	unsigned long                                      bShowingCollision : 1;                                    // 0x028C(0x0004)
	unsigned long                                      bShowWireframe : 1;                                       // 0x028C(0x0004) (Edit)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0290(0x0004) (Edit, Const)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0294(0x0004) (Const, Native)
	int                                                EditorTessellationLevel;                                  // 0x0298(0x0004) (Edit, Transient)
	TArray<struct FSelectedTerrainVertex>              SelectedVertices;                                         // 0x029C(0x000C) (Transient, NeedCtorLink)
	struct FColor                                      WireframeColor;                                           // 0x02A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Terrain");
		return ptr;
	}


	void PostBeginPlay();
	void CalcLayerBounds();
};


// Class Engine.TerrainComponent
// 0x0094 (0x0250 - 0x01BC)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x01BC(0x000C) (Const, NeedCtorLink)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x01C8(0x000C) (Const, NeedCtorLink)
	struct FPointer                                    TerrainObject;                                            // 0x01D4(0x0004) (Const, Native, Transient)
	int                                                SectionBaseX;                                             // 0x01D8(0x0004) (Const)
	int                                                SectionBaseY;                                             // 0x01DC(0x0004) (Const)
	int                                                SectionSizeX;                                             // 0x01E0(0x0004) (Const)
	int                                                SectionSizeY;                                             // 0x01E4(0x0004) (Const)
	int                                                TrueSectionSizeX;                                         // 0x01E8(0x0004) (Const)
	int                                                TrueSectionSizeY;                                         // 0x01EC(0x0004) (Const)
	struct FPointer                                    LightMap;                                                 // 0x01F0(0x0004) (Const, Native)
	TArray<int>                                        PatchBounds;                                              // 0x01F4(0x000C) (Const, Native, Transient)
	TArray<int>                                        PatchBatches;                                             // 0x0200(0x000C) (Const, Native, Transient)
	TArray<int>                                        BatchMaterials;                                           // 0x020C(0x000C) (Const, Native, Transient)
	int                                                FullBatch;                                                // 0x0218(0x0004) (Const, Native, Transient)
	struct FPointer                                    PatchBatchOffsets;                                        // 0x021C(0x0004) (Const, Native, Transient)
	struct FPointer                                    WorkingOffsets;                                           // 0x0220(0x0004) (Const, Native, Transient)
	struct FPointer                                    PatchBatchTriangles;                                      // 0x0224(0x0004) (Const, Native, Transient)
	struct FPointer                                    PatchCachedTessellationValues;                            // 0x0228(0x0004) (Const, Native, Transient)
	struct FPointer                                    TesselationLevels;                                        // 0x022C(0x0004) (Const, Native, Transient)
	struct FTerrainBVTree                              BVTree;                                                   // 0x0230(0x000C) (Const, Native, Transient)
	TArray<struct FVector>                             CollisionVertices;                                        // 0x023C(0x000C) (Const, Native, Transient)
	struct FPointer                                    RBHeightfield;                                            // 0x0248(0x0004) (Const, Native)
	unsigned long                                      bDisplayCollisionLevel : 1;                               // 0x024C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainComponent");
		return ptr;
	}

};


// Class Engine.TerrainLayerSetup
// 0x000C (0x0048 - 0x003C)
class UTerrainLayerSetup : public UObject
{
public:
	TArray<struct FTerrainFilteredMaterial>            Materials;                                                // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainLayerSetup");
		return ptr;
	}


	void PostBeginPlay();
	void SetMaterials(TArray<struct FTerrainFilteredMaterial> NewMaterials);
};


// Class Engine.TerrainMaterial
// 0x0070 (0x00AC - 0x003C)
class UTerrainMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                           // 0x0040(0x0040)
	TEnumAsByte<ETerrainMappingType>                   MappingType;                                              // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              MappingScale;                                             // 0x0084(0x0004) (Edit)
	float                                              MappingRotation;                                          // 0x0088(0x0004) (Edit)
	float                                              MappingPanU;                                              // 0x008C(0x0004) (Edit)
	float                                              MappingPanV;                                              // 0x0090(0x0004) (Edit)
	class UMaterialInterface*                          Material;                                                 // 0x0094(0x0004) (Edit)
	class UTexture2D*                                  DisplacementMap;                                          // 0x0098(0x0004) (Edit)
	float                                              DisplacementScale;                                        // 0x009C(0x0004) (Edit)
	TArray<struct FTerrainFoliageMesh>                 FoliageMeshes;                                            // 0x00A0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainMaterial");
		return ptr;
	}

};


// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x0120 - 0x0110)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                            // 0x0110(0x0004) (Const)
	TArray<struct FPointer>                            WeightedMaterials;                                        // 0x0114(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainWeightMapTexture");
		return ptr;
	}

};


// Class Engine.UIRoot
// 0x0000 (0x003C - 0x003C)
class UUIRoot : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIRoot");
		return ptr;
	}


	struct FString STATIC_ConvertWidgetIDToString(class UUIObject* SourceWidget);
	bool STATIC_GetDataStoreStringValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue);
	bool STATIC_GetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue);
	bool STATIC_SetDataStoreStringValue(const struct FString& InDataStoreMarkup, const struct FString& InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer);
	bool STATIC_SetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue);
	struct FMatrix STATIC_GetPrimitiveTransform(class UUIObject* Widget, bool bIncludeAnchorPosition, bool bIncudeRotation, bool bIncludeScale);
	void STATIC_SetMouseCaptureOverride(bool bCaptureMouse);
	bool STATIC_GetCursorSize(float* CursorXL, float* CursorYL);
	bool STATIC_GetCursorPosition(class UUIScene* Scene, int* CursorX, int* CursorY);
	TEnumAsByte<EUIOrientation> STATIC_GetFaceOrientation(TEnumAsByte<EUIWidgetFace> Face);
	class UGameUISceneClient* STATIC_GetSceneClient();
	class UUIInteraction* STATIC_GetCurrentUIController();
	bool STATIC_IsConsole(TEnumAsByte<EConsoleType> ConsoleType);
};


// Class Engine.Interaction
// 0x0030 (0x006C - 0x003C)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;                     // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;                    // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;                    // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInitialize__Delegate;                                 // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interaction");
		return ptr;
	}


	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyGameSessionEnded();
	void Initialized();
	void OnInitialize();
	void Init();
	void Tick(float DeltaTime);
	bool OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode);
	bool OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
};


// Class Engine.Console
// 0x0128 (0x0194 - 0x006C)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x006C(0x0004)
	class UUIScene*                                    LargeConsoleScene;                                        // 0x0070(0x0004)
	class UUIScene*                                    MiniConsoleScene;                                         // 0x0074(0x0004)
	class UUILabel*                                    ConsoleBufferText;                                        // 0x0078(0x0004)
	class UConsoleEntry*                               MiniConsoleInput;                                         // 0x007C(0x0004)
	class UConsoleEntry*                               LargeConsoleInput;                                        // 0x0080(0x0004)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0084(0x0004)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0088(0x0004)
	struct FName                                       ConsoleKey;                                               // 0x008C(0x0008) (Config, GlobalConfig)
	struct FName                                       TypeKey;                                                  // 0x0094(0x0008) (Config, GlobalConfig)
	int                                                MaxScrollbackSize;                                        // 0x009C(0x0004) (Config, GlobalConfig)
	TArray<struct FString>                             Scrollback;                                               // 0x00A0(0x000C) (NeedCtorLink)
	int                                                SBHead;                                                   // 0x00AC(0x0004)
	int                                                SBPos;                                                    // 0x00B0(0x0004)
	int                                                HistoryTop;                                               // 0x00B4(0x0004) (Config)
	int                                                HistoryBot;                                               // 0x00B8(0x0004) (Config)
	int                                                HistoryCur;                                               // 0x00BC(0x0004) (Config)
	struct FString                                     History[0x10];                                            // 0x00C0(0x000C) (Config, NeedCtorLink)
	struct FString                                     TypedStr;                                                 // 0x0180(0x000C) (NeedCtorLink)
	int                                                TypedStrPos;                                              // 0x018C(0x0004)
	unsigned long                                      bCaptureKeyInput : 1;                                     // 0x0190(0x0004) (Transient)
	unsigned long                                      bCtrl : 1;                                                // 0x0190(0x0004)
	unsigned long                                      bEnableUI : 1;                                            // 0x0190(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}


	void FlushPlayerInput();
	bool IsUIMiniConsoleOpen();
	bool IsUIConsoleOpen();
	bool InputChar(int ControllerId, const struct FString& Unicode);
	bool InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad);
	void PostRender_Console(class UCanvas* Canvas);
	void StartTyping(const struct FString& Text);
	void OutputText(const struct FString& Text);
	void OutputTextLine(const struct FString& Text);
	void ClearOutput();
	void ConsoleCommand(const struct FString& Command);
	void PurgeCommandFromHistory(const struct FString& Command);
	void SetCursorPos(int Position);
	void SetInputText(const struct FString& Text);
	void Initialized();
};


// Class Engine.DataStoreClient
// 0x003C (0x0078 - 0x003C)
class UDataStoreClient : public UUIRoot
{
public:
	TArray<struct FString>                             GlobalDataStoreClasses;                                   // 0x003C(0x000C) (Config, NeedCtorLink)
	TArray<class UUIDataStore*>                        GlobalDataStores;                                         // 0x0048(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             PlayerDataStoreClassNames;                                // 0x0054(0x000C) (Config, NeedCtorLink)
	TArray<class UClass*>                              PlayerDataStoreClasses;                                   // 0x0060(0x000C) (Const, NeedCtorLink)
	TArray<struct FPlayerDataStoreGroup>               PlayerDataStores;                                         // 0x006C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataStoreClient");
		return ptr;
	}


	void DebugDumpDataStoreInfo(bool bVerbose);
	void NotifyGameSessionEnded();
	class UClass* FindDataStoreClass(class UClass* RequiredMetaClass);
	int FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner);
	void GetAvailableDataStores(class UUIScene* CurrentScene, TArray<class UUIDataStore*>* out_DataStores);
	bool UnregisterDataStore(class UUIDataStore* DataStore);
	bool RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner);
	class UUIDataStore* CreateDataStore(class UClass* DataStoreClass);
	class UUIDataStore* FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner);
};


// Class Engine.Input
// 0x0078 (0x00E4 - 0x006C)
class UInput : public UInteraction
{
public:
	TArray<struct FKeyBind>                            Bindings;                                                 // 0x006C(0x000C) (Config, NeedCtorLink)
	TArray<struct FInputOverridePair>                  OverrideBindings;                                         // 0x0078(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               PressedKeys;                                              // 0x0084(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EInputEvent>                           CurrentEvent;                                             // 0x0090(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              CurrentDelta;                                             // 0x0094(0x0004) (Const)
	float                                              CurrentDeltaTime;                                         // 0x0098(0x0004) (Const)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x009C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray<struct FPointer>                            AxisArray;                                                // 0x00D8(0x000C) (Const, Native, AlwaysInit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Input");
		return ptr;
	}


	void SetBind(const struct FName& BindName, const struct FString& Command);
	struct FString GetBind(const struct FName& Key);
	void ResetInput();
};


// Class Engine.PlayerInput
// 0x008C (0x0170 - 0x00E4)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                        // 0x00E4(0x0004) (Const)
	unsigned long                                      bInvertMouse : 1;                                         // 0x00E4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bInvertTurn : 1;                                          // 0x00E4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bWasForward : 1;                                          // 0x00E4(0x0004)
	unsigned long                                      bWasBack : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bWasLeft : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bWasRight : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bEdgeForward : 1;                                         // 0x00E4(0x0004)
	unsigned long                                      bEdgeBack : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bEdgeLeft : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bEdgeRight : 1;                                           // 0x00E4(0x0004)
	unsigned long                                      bEnableMouseSmoothing : 1;                                // 0x00E4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableFOVScaling : 1;                                    // 0x00E4(0x0004)
	struct FName                                       LastAxisKeyName;                                          // 0x00E8(0x0008) (Const)
	float                                              DoubleClickTimer;                                         // 0x00F0(0x0004)
	float                                              DoubleClickTime;                                          // 0x00F4(0x0004) (Config, GlobalConfig)
	float                                              MouseSensitivity;                                         // 0x00F8(0x0004) (Config, GlobalConfig)
	float                                              aBaseX;                                                   // 0x00FC(0x0004) (Input)
	float                                              aBaseY;                                                   // 0x0100(0x0004) (Input)
	float                                              aBaseZ;                                                   // 0x0104(0x0004) (Input)
	float                                              aMouseX;                                                  // 0x0108(0x0004) (Input)
	float                                              aMouseY;                                                  // 0x010C(0x0004) (Input)
	float                                              aForward;                                                 // 0x0110(0x0004) (Input)
	float                                              aTurn;                                                    // 0x0114(0x0004) (Input)
	float                                              aStrafe;                                                  // 0x0118(0x0004) (Input)
	float                                              aUp;                                                      // 0x011C(0x0004) (Input)
	float                                              aLookUp;                                                  // 0x0120(0x0004) (Input)
	float                                              aPS3AccelX;                                               // 0x0124(0x0004) (Input)
	float                                              aPS3AccelY;                                               // 0x0128(0x0004) (Input)
	float                                              aPS3AccelZ;                                               // 0x012C(0x0004) (Input)
	float                                              aPS3Gyro;                                                 // 0x0130(0x0004) (Input)
	float                                              RawJoyUp;                                                 // 0x0134(0x0004) (Transient)
	float                                              RawJoyRight;                                              // 0x0138(0x0004) (Transient)
	float                                              RawJoyLookRight;                                          // 0x013C(0x0004) (Transient)
	float                                              RawJoyLookUp;                                             // 0x0140(0x0004) (Transient)
	float                                              MoveForwardSpeed;                                         // 0x0144(0x0004) (Edit, Config)
	float                                              MoveStrafeSpeed;                                          // 0x0148(0x0004) (Edit, Config)
	float                                              LookRightScale;                                           // 0x014C(0x0004) (Edit, Config)
	float                                              LookUpScale;                                              // 0x0150(0x0004) (Edit, Config)
	unsigned char                                      bStrafe;                                                  // 0x0154(0x0001) (Input)
	unsigned char                                      bXAxis;                                                   // 0x0155(0x0001) (Input)
	unsigned char                                      bYAxis;                                                   // 0x0156(0x0001) (Input)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0157(0x0001) MISSED OFFSET
	float                                              ZeroTime[0x2];                                            // 0x0158(0x0004)
	float                                              SmoothedMouse[0x2];                                       // 0x0160(0x0004)
	int                                                MouseSamples;                                             // 0x0168(0x0004)
	float                                              MouseSamplingTotal;                                       // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	float SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount);
	void ClearSmoothing();
	void SmartJump();
	void Jump();
	void ProcessInputMatching(float DeltaTime);
	TEnumAsByte<EDoubleClickDir> CheckForDoubleClickMove(float DeltaTime);
	void CatchDoubleClickInput();
	void PlayerInput(float DeltaTime);
	void AdjustMouseSensitivity(float FOVScale);
	void PostProcessInput(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void DrawHUD(class AHUD* H);
	void SetSensitivity(float F);
	bool InvertTurn();
	bool InvertMouse();
};


// Class Engine.PlayerManagerInteraction
// 0x0000 (0x006C - 0x006C)
class UPlayerManagerInteraction : public UInteraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerManagerInteraction");
		return ptr;
	}

};


// Class Engine.UIAnimation
// 0x0000 (0x003C - 0x003C)
class UUIAnimation : public UUIRoot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAnimation");
		return ptr;
	}

};


// Class Engine.UIScreenObject
// 0x0124 (0x0160 - 0x003C)
class UUIScreenObject : public UUIRoot
{
public:
	struct FUIScreenValue_Bounds                       Position;                                                 // 0x003C(0x001C) (Edit)
	float                                              ZDepth;                                                   // 0x0058(0x0004) (Edit)
	unsigned long                                      bHidden : 1;                                              // 0x005C(0x0004) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x005C(0x0004) (Transient)
	unsigned long                                      bNeverFocus : 1;                                          // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSupports3DPrimitives : 1;                                // 0x005C(0x0004) (Const)
	TArray<class UUIObject*>                           Children;                                                 // 0x0060(0x000C) (NeedCtorLink, NoImport)
	TArray<class UClass*>                              DefaultStates;                                            // 0x006C(0x000C) (Const, NeedCtorLink)
	class UClass*                                      InitialState;                                             // 0x0078(0x0004)
	TArray<class UUIState*>                            InactiveStates;                                           // 0x007C(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class UUIState*>                            StateStack;                                               // 0x0088(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FPlayerInteractionData>              FocusControls;                                            // 0x0094(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FUIFocusPropagationData>             FocusPropagation;                                         // 0x00A0(0x000C) (Edit, Transient, NeedCtorLink)
	unsigned char                                      PlayerInputMask;                                          // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	float                                              Opacity;                                                  // 0x00B0(0x0004) (Edit)
	class UUIComp_Event*                               EventProvider;                                            // 0x00B4(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       FocusedCue;                                               // 0x00B8(0x0008) (Edit)
	struct FName                                       MouseEnterCue;                                            // 0x00C0(0x0008) (Edit)
	struct FName                                       NavigateUpCue;                                            // 0x00C8(0x0008) (Edit)
	struct FName                                       NavigateDownCue;                                          // 0x00D0(0x0008) (Edit)
	struct FName                                       NavigateLeftCue;                                          // 0x00D8(0x0008) (Edit)
	struct FName                                       NavigateRightCue;                                         // 0x00E0(0x0008) (Edit)
	struct FScriptDelegate                             __NotifyActiveSkinChanged__Delegate;                      // 0x00E8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRawInputKey__Delegate;                                // 0x00F4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRawInputAxis__Delegate;                               // 0x0100(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProcessInputKey__Delegate;                            // 0x010C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProcessInputAxis__Delegate;                           // 0x0118(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __NotifyPositionChanged__Delegate;                        // 0x0124(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;                      // 0x0130(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __NotifyActiveStateChanged__Delegate;                     // 0x013C(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __NotifyVisibilityChanged__Delegate;                      // 0x0148(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPreRenderCallBack__Delegate;                          // 0x0154(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScreenObject");
		return ptr;
	}


	void LogCurrentState(int Indent);
	void OnSetControllerId(class UUIAction_SetControllerId* Action);
	void OnShowMembershipMarketplaceUI(class UUIAction_ShowMembershipMarketplaceUI* Action);
	void OnShowContentMarketplaceUI(class UUIAction_ShowContentMarketplaceUI* Action);
	void OnShowGamerCardUI(class UUIAction_ShowGamerCardUI* Action);
	void OnShowFeedbackUI(class UUIAction_ShowFeedbackUI* Action);
	void OnShowMessagesUI(class UUIAction_ShowMessagesUI* Action);
	void OnShowFriendInviteUI(class UUIAction_ShowFriendInviteUI* Action);
	void OnShowAchievementsUI(class UUIAction_ShowAchievementsUI* Action);
	void OnShowPlayersUI(class UUIAction_ShowPlayersUI* Action);
	void OnShowFriendsUI(class UUIAction_ShowFriendsUI* Action);
	TEnumAsByte<ENATType> GetNATType();
	bool CanPlayOnline(int ControllerId);
	bool HasLinkConnection();
	TEnumAsByte<ELoginStatus> GetLoginStatus(int ControllerId);
	int GetBestControllerId();
	void OnConsoleCommand(class UUIAction_ConsoleCommand* Action);
	bool DisableWidget(int PlayerIndex);
	bool EnableWidget(int PlayerIndex);
	void OnChangeVisibility(class UUIAction_ChangeVisibility* Action);
	class UUIScreenObject* GetParent();
	void GetSupportedUIActionKeyNames(TArray<struct FName>* out_KeyNames);
	void SetInputMask(unsigned char NewInputMask, bool bRecurse);
	void DisablePlayerInput(unsigned char PlayerIndex, bool bRecurse);
	void EnablePlayerInput(unsigned char PlayerIndex, bool bRecurse);
	bool IsHidden();
	bool IsVisible();
	void SetVisibility(bool bIsVisible);
	void PrivateSetVisibility(bool bVisible);
	bool IsLoggedIn(int ControllerId, bool bRequireOnlineLogin);
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);
	void RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
	void PostInitialize();
	void Initialized();
	struct FString GetWidgetPathName();
	float GetAspectRatioAutoScaleFactor(class UFont* BaseFont);
	struct FMatrix GetInverseCanvasToScreen();
	struct FMatrix GetCanvasToScreen();
	struct FVector PixelToCanvas(struct FVector2D* PixelPosition);
	struct FVector ScreenToCanvas(struct FVector4* ScreenPosition);
	struct FVector4 PixelToScreen(struct FVector2D* PixelPosition);
	struct FVector2D ScreenToPixel(struct FVector4* ScreenPosition);
	struct FVector4 CanvasToScreen(struct FVector* CanvasPosition);
	struct FVector DeProject(struct FVector* PixelPosition);
	struct FVector Project(struct FVector* CanvasPosition);
	void GetDockedWidgets(TEnumAsByte<EUIWidgetFace> SourceFace, TEnumAsByte<EUIWidgetFace> TargetFace, TArray<class UUIObject*>* out_DockedWidgets);
	struct FVector GetPositionVector(bool bIncludeParentPosition);
	float GetBounds(TEnumAsByte<EUIOrientation> Dimension, TEnumAsByte<EPositionEvalType> OutputType, bool bIgnoreDockPadding);
	float GetPosition(TEnumAsByte<EUIWidgetFace> Face, TEnumAsByte<EPositionEvalType> OutputType, bool bZeroOrigin, bool bIgnoreDockPadding);
	void SetPosition(float NewValue, TEnumAsByte<EUIWidgetFace> Face, TEnumAsByte<EPositionEvalType> InputType, bool bZeroOrigin);
	int GetBestPlayerIndex();
	int GetSupportedPlayerCount();
	int STATIC_GetActivePlayerCount();
	bool AcceptsPlayerInput(int PlayerIndex);
	bool IsPressed(int PlayerIndex);
	bool IsActive(int PlayerIndex);
	bool IsFocused(int PlayerIndex);
	bool IsEnabled(int PlayerIndex, bool bCheckOwnerChain);
	void OverrideLastFocusedControl(int PlayerIndex, class UUIObject* ChildToFocus);
	class UUIObject* GetLastFocusedControl(bool bRecurse, int PlayerIndex);
	class UUIObject* GetFocusedControl(bool bRecurse, int PlayerIndex);
	bool KillFocus(class UUIScreenObject* Sender, int PlayerIndex);
	bool SetFocusToChild(class UUIObject* ChildToFocus, int PlayerIndex);
	bool SetFocus(class UUIScreenObject* Sender, int PlayerIndex);
	bool CanPropagateFocusFor(class UUIObject* TestChild);
	bool CanAcceptFocus(int PlayerIndex);
	bool IsNeverFocused();
	bool NavigateFocus(class UUIScreenObject* Sender, TEnumAsByte<EUIWidgetFace> Direction, int PlayerIndex);
	bool PrevControl(class UUIScreenObject* Sender, int PlayerIndex);
	bool NextControl(class UUIScreenObject* Sender, int PlayerIndex);
	bool FocusLastControl(class UUIScreenObject* Sender, int PlayerIndex);
	bool FocusFirstControl(class UUIScreenObject* Sender, int PlayerIndex);
	bool IsHoldingShift(int ControllerId);
	bool IsHoldingAlt(int ControllerId);
	bool IsHoldingCtrl(int ControllerId);
	bool ConditionalPropagateEnabledState(int PlayerIndex, bool bForce);
	bool DeactivateStateByClass(class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved);
	bool DeactivateState(class UUIState* StateToRemove, int PlayerIndex);
	bool ActivateStateByClass(class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded);
	bool ActivateState(class UUIState* StateToActivate, int PlayerIndex);
	bool HasActiveStateOfClass(class UClass* StateClass, int PlayerIndex, int* StateIndex);
	class UUIState* GetCurrentState(int PlayerIndex);
	bool SetEnabled(bool bEnabled, int PlayerIndex);
	void FindEventsOfClass(class UClass* EventClassToFind, class UUIState* LimitScope, bool bExactClass, TArray<class UUIEvent*>* out_EventInstances);
	void ActivateEventByClass(int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, bool bActivateImmediately, TArray<int> IndicesToActivate, TArray<class UUIEvent*>* out_ActivatedEvents);
	float GetViewportHeight();
	float GetViewportWidth();
	bool GetViewportSize(struct FVector2D* out_ViewportSize);
	bool GetViewportOrigin(struct FVector2D* out_ViewportOrigin);
	float GetViewportScale();
	bool GetViewportOffset(struct FVector2D* out_ViewportOffset);
	void RebuildNavigationLinks();
	void RequestPrimitiveReview(bool bReinitializePrimitives, bool bReviewPrimitiveUsage);
	void RequestFormattingUpdate();
	void RequestSceneUpdate(bool bDockingStackChanged, bool bPositionsChanged, bool bNavLinksOutdated, bool bWidgetStylesChanged);
	int GetObjectCount();
	TArray<class UUIObject*> GetChildren(bool bRecurse, TArray<class UUIObject*> ExclusionSet);
	bool ContainsChildOfClass(class UClass* SearchClass, bool bRecurse);
	bool ContainsChild(class UUIObject* Child, bool bRecurse);
	int FindChildIndex(const struct FName& WidgetName);
	class UUIObject* FindChildUsingID(const struct FWIDGET_ID& WidgetID, bool bRecurse);
	class UUIObject* FindChild(const struct FName& WidgetName, bool bRecurse);
	bool ReplaceChild(class UUIObject* ExistingChild, class UUIObject* NewChild);
	TArray<class UUIObject*> RemoveChildren(TArray<class UUIObject*> ChildrenToRemove);
	bool RemoveChild(class UUIObject* ExistingChild, TArray<class UUIObject*> ExclusionSet);
	int InsertChild(class UUIObject* NewChild, int InsertIndex, bool bRenameExisting);
	void Initialize(class UUIScene* inOwnerScene, class UUIObject* inOwner);
	class UUIObject* CreateWidget(class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, const struct FName& WidgetName);
	bool STATIC_PlayUISound(const struct FName& SoundCueName, int PlayerIndex);
	class ULocalPlayer* GetPlayerOwner(int PlayerIndex);
	void InitializePlayerTracking();
	void RemovePlayerData(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void CreatePlayerData(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	bool IsInitialized();
	void OnPreRenderCallBack();
	void NotifyVisibilityChanged(class UUIScreenObject* SourceWidget, bool bIsVisible);
	void NotifyActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void NotifyResolutionChanged(struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize);
	void NotifyPositionChanged(class UUIScreenObject* Sender);
	bool OnProcessInputAxis(struct FSubscribedInputEventParameters* EventParms);
	bool OnProcessInputKey(struct FSubscribedInputEventParameters* EventParms);
	bool OnRawInputAxis(struct FInputEventParameters* EventParms);
	bool OnRawInputKey(struct FInputEventParameters* EventParms);
	void NotifyActiveSkinChanged();
};


// Class Engine.UIComponent
// 0x0000 (0x0048 - 0x0048)
class UUIComponent : public UComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComponent");
		return ptr;
	}

};


// Class Engine.UIComp_Event
// 0x0020 (0x0068 - 0x0048)
class UUIComp_Event : public UUIComponent
{
public:
	TArray<struct FDefaultEventSpecification>          DefaultEvents;                                            // 0x0048(0x000C) (NeedCtorLink)
	class UUISequence*                                 EventContainer;                                           // 0x0054(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIEvent_ProcessInput*                       InputProcessor;                                           // 0x0058(0x0004) (Transient)
	TArray<struct FName>                               DisabledEventAliases;                                     // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_Event");
		return ptr;
	}


	void UnregisterInputEvents(class UUIState* InputEventOwner, int PlayerIndex);
	void RegisterInputEvents(class UUIState* InputEventOwner, int PlayerIndex);
};


// Class Engine.UIEventContainer
// 0x0000 (0x003C - 0x003C)
class UUIEventContainer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEventContainer");
		return ptr;
	}


	void RemoveSequenceObjects(TArray<class USequenceObject*> ObjectsToRemove);
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);
	bool AddSequenceObject(class USequenceObject* NewObj, bool bRecurse);
	void GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events);
};


// Class Engine.UIInputConfiguration
// 0x0018 (0x0054 - 0x003C)
class UUIInputConfiguration : public UUIRoot
{
public:
	TArray<struct FUIInputAliasClassMap>               WidgetInputAliases;                                       // 0x003C(0x000C) (Const, Config, NeedCtorLink)
	TArray<struct FUIAxisEmulationDefinition>          AxisEmulationDefinitions;                                 // 0x0048(0x000C) (Const, Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIInputConfiguration");
		return ptr;
	}


	void LoadInputAliasClasses();
};


// Class Engine.UIInteraction
// 0x013C (0x01A8 - 0x006C)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x006C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;                    // 0x0070(0x0004) (Const, Native, NoExport)
	class UClass*                                      SceneClientClass;                                         // 0x0074(0x0004)
	class UGameUISceneClient*                          SceneClient;                                              // 0x0078(0x0004) (Const, Transient)
	struct FString                                     UISkinName;                                               // 0x007C(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               UISoundCueNames;                                          // 0x0088(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               SupportedDoubleClickKeys;                                 // 0x0094(0x000C) (Transient, NeedCtorLink)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x00A0(0x0004) (Const, Transient)
	class UUIInputConfiguration*                       UIInputConfig;                                            // 0x00A4(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00A8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.WidgetInputAliasLookupTable
	unsigned long                                      bProcessInput : 1;                                        // 0x00E4(0x0004) (Const, Transient)
	unsigned long                                      bDisableToolTips : 1;                                     // 0x00E4(0x0004) (Const, Config)
	unsigned long                                      bFocusOnActive : 1;                                       // 0x00E4(0x0004) (Const, Config)
	unsigned long                                      bCaptureUnprocessedInput : 1;                             // 0x00E4(0x0004) (Const, Config)
	unsigned long                                      bFocusedStateRules : 1;                                   // 0x00E4(0x0004) (Const, Config)
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;                       // 0x00E4(0x0004) (Const, Transient)
	float                                              UIJoystickDeadZone;                                       // 0x00E8(0x0004) (Const, Config)
	float                                              UIAxisMultiplier;                                         // 0x00EC(0x0004) (Const, Config)
	float                                              AxisRepeatDelay;                                          // 0x00F0(0x0004) (Const, Config)
	float                                              MouseButtonRepeatDelay;                                   // 0x00F4(0x0004) (Const, Config)
	float                                              DoubleClickTriggerSeconds;                                // 0x00F8(0x0004) (Const, Config)
	int                                                DoubleClickPixelTolerance;                                // 0x00FC(0x0004) (Const, Config)
	float                                              ToolTipInitialDelaySeconds;                               // 0x0100(0x0004) (Const, Config)
	float                                              ToolTipExpirationSeconds;                                 // 0x0104(0x0004) (Const, Config)
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                                    // 0x0108(0x0010) (Const, Transient)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0118(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[0x4];                                  // 0x0154(0x0014) (Transient)
	struct FPointer                                    CanvasScene;                                              // 0x01A4(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIInteraction");
		return ptr;
	}


	void NotifyGameSessionEnded();
	TEnumAsByte<ENATType> STATIC_GetNATType();
	bool STATIC_CanPlayOnline(int ControllerId);
	bool STATIC_IsLoggedIn(int ControllerId, bool bRequireOnlineLogin);
	bool STATIC_HasLinkConnection();
	TEnumAsByte<ELoginStatus> STATIC_GetLoginStatus(int ControllerId);
	class UUIScene* FindSceneByTag(const struct FName& SceneTag, class ULocalPlayer* SceneOwner);
	bool CloseScene(class UUIScene* Scene);
	bool MergeScene(class UUIScene* SourceScene, class UUIScene* SceneTarget);
	bool OpenScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene);
	class UUIScene* CreateScene(class UClass* SceneClass, const struct FName& SceneTag, class UUIScene* SceneTemplate);
	class UUIScene* GetTransientScene();
	void SetMousePosition(int NewMouseX, int NewMouseY);
	class UUIObject* CreateTransientWidget(class UClass* WidgetClass, const struct FName& WidgetTag, class UUIObject* Owner);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	bool PlayUISound(const struct FName& SoundCueName, int PlayerIndex);
	bool STATIC_IsMenuLevel(const struct FString& MapName);
	class UDataStoreClient* STATIC_GetDataStoreClient();
	int STATIC_GetPlayerControllerId(int PlayerIndex);
	int STATIC_GetPlayerIndex(int ControllerId);
	int STATIC_GetPlayerCount();
};


// Class Engine.UILayerBase
// 0x0000 (0x003C - 0x003C)
class UUILayerBase : public UUIRoot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILayerBase");
		return ptr;
	}

};


// Class Engine.UISceneClient
// 0x00BC (0x00F8 - 0x003C)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    RenderViewport;                                           // 0x0044(0x0004) (Const, Native, Transient)
	class UUISkin*                                     ActiveSkin;                                               // 0x0048(0x0004) (Transient)
	struct FIntPoint                                   MousePosition;                                            // 0x004C(0x0008) (Const, Transient)
	class UUIObject*                                   ActiveControl;                                            // 0x0054(0x0004) (Const, Transient)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x0058(0x0004) (Const, Transient)
	class UMaterialInstanceConstant*                   OpacityParameter;                                         // 0x005C(0x0004) (Transient)
	struct FName                                       OpacityParameterName;                                     // 0x0060(0x0008) (Const, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                           // 0x0070(0x0040) (Const, Transient)
	struct FMatrix                                     InvCanvasToScreen;                                        // 0x00B0(0x0040) (Const, Transient)
	class UPostProcessChain*                           UIScenePostProcess;                                       // 0x00F0(0x0004) (Transient)
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x00F4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISceneClient");
		return ptr;
	}


	class UUIScene* GetActiveScene();
	struct FMatrix GetInverseCanvasToScreen(class UUIObject* Widget);
	struct FMatrix GetCanvasToScreen(class UUIObject* Widget);
	void UpdateCanvasToScreen();
	bool ChangeMouseCursor(const struct FName& CursorName);
	void SetMousePosition(int NewMouseX, int NewMouseY);
	bool CloseScene(class UUIScene* Scene);
	bool OpenScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene);
	bool InitializeScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene);
	bool IsSceneInitialized(class UUIScene* Scene);
	bool IsUIActive(int Flags);
	bool ChangeActiveSkin(class UUISkin* NewActiveSkin);
};


// Class Engine.UIState
// 0x002A (0x0066 - 0x003C)
class UUIState : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                                // 0x003C(0x0004) (Const, Native, NoExport)
	class UUIStateSequence*                            StateSequence;                                            // 0x0040(0x0004) (ExportObject, NeedCtorLink, NoImport, EditInline)
	TArray<struct FInputKeyAction>                     StateInputActions;                                        // 0x0044(0x000C) (NeedCtorLink)
	TArray<struct FInputKeyAction>                     DisabledInputActions;                                     // 0x0050(0x000C) (NeedCtorLink)
	struct FName                                       MouseCursorName;                                          // 0x005C(0x0008) (Edit)
	unsigned char                                      PlayerIndexMask;                                          // 0x0064(0x0001) (Transient)
	unsigned char                                      StackPriority;                                            // 0x0065(0x0001) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState");
		return ptr;
	}


	void RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove);
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);
	bool AddSequenceObject(class USequenceObject* NewObj, bool bRecurse);
	void GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events);
	bool IsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex);
	void OnDeactivate(class UUIScreenObject* Target, int PlayerIndex, bool bPoppedState);
	void OnActivate(class UUIScreenObject* Target, int PlayerIndex, bool bPushedState);
	bool DeactivateState(class UUIScreenObject* Target, int PlayerIndex);
	bool ActivateState(class UUIScreenObject* Target, int PlayerIndex);
	bool IsActiveForPlayer(int PlayerIndex);
	bool IsWidgetClassSupported(class UClass* WidgetClass);
};


// Class Engine.UIState_Disabled
// 0x0000 (0x0066 - 0x0066)
class UUIState_Disabled : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Disabled");
		return ptr;
	}


	bool IsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex);
	bool ActivateState(class UUIScreenObject* Target, int PlayerIndex);
};


// Class Engine.UIState_Enabled
// 0x0000 (0x0066 - 0x0066)
class UUIState_Enabled : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Enabled");
		return ptr;
	}

};


// Class Engine.UIString
// 0x00A0 (0x00DC - 0x003C)
class UUIString : public UUIRoot
{
public:
	TArray<struct FPointer>                            Nodes;                                                    // 0x003C(0x000C) (Native, Transient)
	struct FUICombinedStyleData                        StringStyleData;                                          // 0x0048(0x008C) (Transient)
	struct FVector2D                                   StringExtent;                                             // 0x00D4(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIString");
		return ptr;
	}


	bool ContainsMarkup();
	void GetAutoScaleValue(const struct FVector2D& BoundingRegionSize, const struct FVector2D& StringSize, struct FVector2D* out_AutoScalePercent);
	struct FString GetValue(bool bReturnProcessedText);
	bool SetValue(const struct FString& InputString, bool bIgnoreMarkup);
};


// Class Engine.UIDataProvider
// 0x001C (0x0058 - 0x003C)
class UUIDataProvider : public UUIRoot
{
public:
	TEnumAsByte<EProviderAccessType>                   WriteAccessType;                                          // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ProviderChangedNotifies;                                  // 0x0040(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;                 // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider");
		return ptr;
	}


	bool GetFieldValueFromScript(const struct FString& FieldName, int ArrayIndex, struct FUIProviderFieldValue* FieldValue);
	struct FString GenerateFillerData(const struct FString& DataTag);
	struct FString GenerateScriptMarkupString(const struct FName& DataTag);
	bool SetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue);
	bool GetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue);
	void GetSupportedScriptFields(TArray<struct FUIDataProviderField>* out_Fields);
	void RemovePropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate);
	void AddPropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate);
	void NotifyPropertyChanged(const struct FName& PropTag);
	void OnDataProviderPropertyChange(class UUIDataProvider* SourceProvider, const struct FName& PropTag);
};


// Class Engine.UIDataStore
// 0x0020 (0x0078 - 0x0058)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                                      // 0x0058(0x0008)
	TArray<struct FScriptDelegate>                     RefreshSubscriberNotifies;                                // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;                      // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore");
		return ptr;
	}


	class UDataStoreClient* GetDataStoreClient();
	void OnCommit();
	void RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool NotifyGameSessionEnded();
	void SubscriberDetached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber);
	void SubscriberAttached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber);
	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
};


// Class Engine.UISkin
// 0x015C (0x01D4 - 0x0078)
class UUISkin : public UUIDataStore
{
public:
	TArray<class UUIStyle*>                            Styles;                                                   // 0x0078(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FString>                             StyleGroups;                                              // 0x0084(0x000C) (Const, NeedCtorLink)
	TArray<struct FUISoundCue>                         SoundCues;                                                // 0x0090(0x000C) (Const, NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x009C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleLookupTable
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00D8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleNameMap
	struct FLookupMap_Mirror                           StyleGroupMap;                                            // 0x0114(0x0048) (Const, Native, Transient)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x015C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.CursorMap
	unsigned char                                      UnknownData03[0x3C];                                      // 0x0198(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.SoundCueMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISkin");
		return ptr;
	}


	void GetStyleGroups(bool bIncludeInheritedGroups, TArray<struct FString>* StyleGroupArray);
	int FindStyleGroupIndex(const struct FString& StyleGroupName);
	struct FString GetStyleGroupAtIndex(int Index);
	bool RenameStyleGroup(const struct FString& OldStyleGroupName, const struct FString& NewStyleGroupName);
	bool RemoveStyleGroupName(const struct FString& StyleGroupName);
	bool AddStyleGroupName(const struct FString& StyleGroupName);
	bool IsInheritedGroupName(const struct FString& StyleGroupName);
	void GetSkinSoundCues(TArray<struct FUISoundCue>* out_SoundCues);
	bool GetUISoundCue(const struct FName& SoundCueName, class USoundCue** out_UISoundCue);
	bool RemoveUISoundCue(const struct FName& SoundCueName);
	bool AddUISoundCue(const struct FName& SoundCueName, class USoundCue* SoundToPlay);
	class UUITexture* GetCursorResource(const struct FName& CursorName);
	void GetAvailableStyles(bool bIncludeInheritedStyles, TArray<class UUIStyle*>* out_Styles);
};


// Class Engine.UIStyle
// 0x0070 (0x00AC - 0x003C)
class UUIStyle : public UUIRoot
{
public:
	struct FSTYLE_ID                                   StyleID;                                                  // 0x003C(0x0010)
	struct FName                                       StyleTag;                                                 // 0x004C(0x0008)
	struct FString                                     StyleName;                                                // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     StyleGroupName;                                           // 0x0060(0x000C) (Const, NeedCtorLink)
	class UClass*                                      StyleDataClass;                                           // 0x006C(0x0004) (Const)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0070(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIStyle.StateDataMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle");
		return ptr;
	}


	class UUIStyle_Data* GetDefaultStyle();
	class UUIStyle_Data* GetStyleForStateByClass(class UClass* StateClass);
	class UUIStyle_Data* GetStyleForState(class UUIState* StateObject);
};


// Class Engine.UIObject
// 0x027C (0x03DC - 0x0160)
class UUIObject : public UUIScreenObject
{
public:
	struct FWIDGET_ID                                  WidgetID;                                                 // 0x0160(0x0010) (NoImport)
	struct FName                                       WidgetTag;                                                // 0x0170(0x0008) (Edit, EditConst)
	class UUIObject*                                   Owner;                                                    // 0x0178(0x0004) (Const, DuplicateTransient)
	class UUIScene*                                    OwnerScene;                                               // 0x017C(0x0004) (Const, DuplicateTransient)
	struct FUIStyleReference                           PrimaryStyle;                                             // 0x0180(0x0020)
	struct FUINavigationData                           NavigationTargets;                                        // 0x01A0(0x0024) (Edit)
	int                                                TabIndex;                                                 // 0x01C4(0x0004) (Edit)
	struct FUIDockingSet                               DockTargets;                                              // 0x01C8(0x0038) (Edit, EditConst)
	float                                              RenderBounds[0x4];                                        // 0x0200(0x0004) (Edit, Const, Transient, EditConst)
	struct FVector2D                                   RenderBoundsVertices[0x4];                                // 0x0210(0x0008) (Edit, Const, Transient, EditConst)
	struct FUIRotation                                 Rotation;                                                 // 0x0230(0x0070) (Edit)
	struct FVector                                     RenderOffset;                                             // 0x02A0(0x000C) (Edit)
	int                                                PrivateFlags;                                             // 0x02AC(0x0004)
	struct FUIDataStoreBinding                         ToolTip;                                                  // 0x02B0(0x0030) (Edit, NeedCtorLink)
	struct FUIDataStoreBinding                         ContextMenuData;                                          // 0x02E0(0x0030) (Edit, EditConst, NeedCtorLink)
	class UUIObject*                                   AnimationParent;                                          // 0x0310(0x0004)
	struct FVector                                     AnimationPosition;                                        // 0x0314(0x000C) (Transient)
	TArray<struct FUIAnimSeqRef>                       AnimStack;                                                // 0x0320(0x000C) (Transient, NeedCtorLink)
	TArray<TScriptInterface<class UUIStyleResolver>>   StyleSubscribers;                                         // 0x032C(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bEnableActiveCursorUpdates : 1;                           // 0x0338(0x0004)
	unsigned long                                      bSupportsPrimaryStyle : 1;                                // 0x0338(0x0004) (Const)
	unsigned long                                      bDebugShowBounds : 1;                                     // 0x0338(0x0004) (Edit)
	struct FColor                                      DebugBoundsColor;                                         // 0x033C(0x0004) (Edit)
	struct FScriptDelegate                             __OnCreate__Delegate;                                     // 0x0340(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnValueChanged__Delegate;                               // 0x034C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRefreshSubscriberValue__Delegate;                     // 0x0358(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPressed__Delegate;                                    // 0x0364(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPressRepeat__Delegate;                                // 0x0370(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPressRelease__Delegate;                               // 0x037C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClicked__Delegate;                                    // 0x0388(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDoubleClick__Delegate;                                // 0x0394(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnQueryToolTip__Delegate;                               // 0x03A0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnOpenContextMenu__Delegate;                            // 0x03AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCloseContextMenu__Delegate;                           // 0x03B8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnContextMenuItemSelected__Delegate;                    // 0x03C4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUIAnimEnd__Delegate;                                  // 0x03D0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIObject");
		return ptr;
	}


	void OnUIAnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq);
	void UIAnimEnd(int SeqIndex);
	void ClearUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeq);
	void StopUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeq, bool bFinalize);
	void PlayUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeqTemplate, float PlaybackRate, bool bLoop, float InitialPosition);
	void AnimSetBottom(float NewBottom);
	void AnimSetRight(float NewRight);
	void AnimSetTop(float NewTop);
	void AnimSetLeft(float NewLeft);
	void AnimSetScale(float NewScale);
	void AnimSetRotation(const struct FRotator& NewRotation);
	void AnimSetRelPosition(const struct FVector& NewPosition, const struct FVector& InitialPosition);
	void AnimSetPosition(const struct FVector& NewPosition);
	void AnimSetColor(const struct FLinearColor& NewColor);
	void AnimSetVisibility(bool bIsVisible);
	void AnimSetOpacity(float NewOpacity);
	void OnSetDatastoreBinding(class UUIAction_SetDatastoreBinding* Action);
	void LogRenderBounds(int Indent);
	class UUIScreenObject* GetParent();
	class UUIObject* GetOwner();
	class UUIScene* GetScene();
	void TickAnim(float DeltaTime);
	bool SetWidgetStyleByName(const struct FName& StyleResolverTagToSet, const struct FName& StyleFriendlyName);
	int FindStyleSubscriberIndexById(const struct FName& StyleSubscriberId);
	int FindStyleSubscriberIndex(TScriptInterface<class UUIStyleResolver>* Subscriber);
	void RemoveStyleSubscriber(TScriptInterface<class UUIStyleResolver>* Subscriber);
	void AddStyleSubscriber(TScriptInterface<class UUIStyleResolver>* Subscriber);
	float GetPositionExtent(TEnumAsByte<EUIWidgetFace> Face, bool bIncludeRotation);
	void GetPositionExtents(bool bIncludeRotation, float* MinX, float* MaxX, float* MinY, float* MaxY);
	bool NeedsActiveCursorUpdates();
	void SetActiveCursorUpdate(bool bShouldReceiveCursorUpdates);
	void SetPrivateBehavior(int Behavior, bool Value, bool bRecurse);
	bool IsPrivateBehaviorSet(int Behavior);
	bool CanAcceptFocus(int PlayerIndex);
	bool SetForcedNavigationTarget(TEnumAsByte<EUIWidgetFace> Face, class UUIObject* NavTarget, bool bIsNullOverride);
	bool SetNavigationTarget(TEnumAsByte<EUIWidgetFace> Face, class UUIObject* NewNavTarget);
	bool IsDockedTo(class UUIScreenObject* TargetWidget, TEnumAsByte<EUIWidgetFace> SourceFace, TEnumAsByte<EUIWidgetFace> TargetFace);
	bool SetDockParameters(TEnumAsByte<EUIWidgetFace> SourceFace, class UUIScreenObject* Target, TEnumAsByte<EUIWidgetFace> TargetFace, float PaddingValue, TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType, bool bModifyPaddingScaleType);
	bool SetDockPadding(TEnumAsByte<EUIWidgetFace> SourceFace, float PaddingValue, TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType, bool bModifyPaddingScaleType);
	bool SetDockTarget(TEnumAsByte<EUIWidgetFace> SourceFace, class UUIScreenObject* Target, TEnumAsByte<EUIWidgetFace> TargetFace);
	bool IsContainedBy(class UUIObject* TestWidget);
	void NotifyValueChanged(int PlayerIndex, int NotifyFlags);
	struct FMatrix GetRotationMatrix(bool bIncludeParentRotations);
	struct FMatrix GenerateTransformMatrix(bool bIncludeParentTransforms);
	struct FVector GetAnchorPosition(bool bRelativeToWidget, bool bPixelSpace);
	void UpdateRotationMatrix();
	void RotateWidget(const struct FRotator& NewRotationAmount, bool bAccumulateRotation);
	void SetAnchorPosition(const struct FVector& NewAnchorPosition, TEnumAsByte<EPositionEvalType> InputType);
	bool HasTransform(bool bIncludeParentTransforms);
	struct FString GetToolTipValue();
	struct FString GenerateSceneDataStoreMarkup(const struct FString& Group);
	void ClearDefaultDataBinding(int BindingIndex);
	void GetDefaultDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	bool ResolveDefaultDataBinding(int BindingIndex);
	struct FString GetDefaultDataBinding(int BindingIndex);
	void SetDefaultDataBinding(const struct FString& MarkupText, int BindingIndex);
	void OnContextMenuItemSelected(class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex);
	bool OnCloseContextMenu(class UUIContextMenu* ContextMenu, int PlayerIndex);
	bool OnOpenContextMenu(class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu);
	bool OnQueryToolTip(class UUIObject* Sender, class UUIToolTip** CustomToolTip);
	void OnDoubleClick(class UUIScreenObject* EventObject, int PlayerIndex);
	bool OnClicked(class UUIScreenObject* EventObject, int PlayerIndex);
	void OnPressRelease(class UUIScreenObject* EventObject, int PlayerIndex);
	void OnPressRepeat(class UUIScreenObject* EventObject, int PlayerIndex);
	void OnPressed(class UUIScreenObject* EventObject, int PlayerIndex);
	bool OnRefreshSubscriberValue(class UUIObject* Sender, int BindingIndex);
	void OnValueChanged(class UUIObject* Sender, int PlayerIndex);
	void OnCreate(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer);
};


// Class Engine.ConsoleEntry
// 0x001C (0x03F8 - 0x03DC)
class UConsoleEntry : public UUIObject
{
public:
	class UUILabel*                                    ConsolePromptLabel;                                       // 0x03DC(0x0004)
	class UUIImage*                                    ConsolePromptBackground;                                  // 0x03E0(0x0004)
	class UUIEditBox*                                  InputBox;                                                 // 0x03E4(0x0004)
	class UUIImage*                                    LowerConsoleBorder;                                       // 0x03E8(0x0004)
	class UUIImage*                                    UpperConsoleBorder;                                       // 0x03EC(0x0004)
	int                                                CursorPosition;                                           // 0x03F0(0x0004) (Transient)
	unsigned long                                      bRenderCursor : 1;                                        // 0x03F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ConsoleEntry");
		return ptr;
	}


	void SetValue(const struct FString& NewValue);
	void SetupDockingLinks();
	void PostInitialize();
	void RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
};


// Class Engine.UIDataStore_GameState
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;                      // 0x0078(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameState");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void OnRefreshDataFieldValue();
};


// Class Engine.CurrentGameDataStore
// 0x0028 (0x00AC - 0x0084)
class UCurrentGameDataStore : public UUIDataStore_GameState
{
public:
	struct FGameDataProviderTypes                      ProviderTypes;                                            // 0x0084(0x000C) (Const)
	class UGameInfoDataProvider*                       GameData;                                                 // 0x0090(0x0004)
	TArray<class UPlayerDataProvider*>                 PlayerData;                                               // 0x0094(0x000C) (NeedCtorLink)
	TArray<class UTeamDataProvider*>                   TeamData;                                                 // 0x00A0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurrentGameDataStore");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void ClearDataProviders();
	class UTeamDataProvider* GetTeamDataProvider(class ATeamInfo* TI);
	class UPlayerDataProvider* GetPlayerDataProvider(class APlayerReplicationInfo* PRI);
	int FindTeamDataProviderIndex(class ATeamInfo* TI);
	int FindPlayerDataProviderIndex(class APlayerReplicationInfo* PRI);
	void RemoveTeamDataProvider(class ATeamInfo* TI);
	void AddTeamDataProvider(class ATeamInfo* TI);
	void RemovePlayerDataProvider(class APlayerReplicationInfo* PRI);
	void AddPlayerDataProvider(class APlayerReplicationInfo* PRI);
	void CreateGameDataProvider(class AGameReplicationInfo* GRI);
};


// Class Engine.UIPropertyDataProvider
// 0x000C (0x0064 - 0x0058)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray<class UClass*>                              ComplexPropertyTypes;                                     // 0x0058(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPropertyDataProvider");
		return ptr;
	}


	bool GetCustomPropertyValue(int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue);
};


// Class Engine.UIDynamicDataProvider
// 0x0008 (0x006C - 0x0064)
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	class UClass*                                      DataClass;                                                // 0x0064(0x0004) (Const)
	class UObject*                                     DataSource;                                               // 0x0068(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDynamicDataProvider");
		return ptr;
	}


	bool CleanupDataProvider();
	class UObject* GetDataSource();
	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);
	void ProviderInstanceUnbound(class UObject* DataSourceInstance);
	void ProviderInstanceBound(class UObject* DataSourceInstance);
	bool UnbindProviderInstance();
	bool BindProviderInstance(class UObject* DataSourceInstance);
};


// Class Engine.InventoryDataProvider
// 0x0000 (0x006C - 0x006C)
class UInventoryDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryDataProvider");
		return ptr;
	}

};


// Class Engine.WeaponDataProvider
// 0x0000 (0x006C - 0x006C)
class UWeaponDataProvider : public UInventoryDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WeaponDataProvider");
		return ptr;
	}

};


// Class Engine.CurrentWeaponDataProvider
// 0x0000 (0x006C - 0x006C)
class UCurrentWeaponDataProvider : public UWeaponDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurrentWeaponDataProvider");
		return ptr;
	}

};


// Class Engine.GameInfoDataProvider
// 0x0004 (0x0070 - 0x006C)
class UGameInfoDataProvider : public UUIDynamicDataProvider
{
public:
	class AGameReplicationInfo*                        GameDataSource;                                           // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfoDataProvider");
		return ptr;
	}


	void ProviderInstanceBound(class UObject* DataSourceInstance);
};


// Class Engine.GameUISceneClient
// 0x0090 (0x0188 - 0x00F8)
class UGameUISceneClient : public UUISceneClient
{
public:
	TArray<class UUIScene*>                            ActiveScenes;                                             // 0x00F8(0x000C) (Const, Transient, NeedCtorLink)
	class UUITexture*                                  CurrentMouseCursor;                                       // 0x0104(0x0004) (Const, Transient)
	unsigned long                                      bRenderCursor : 1;                                        // 0x0108(0x0004) (Const, Transient)
	unsigned long                                      bUpdateInputProcessingStatus : 1;                         // 0x0108(0x0004) (Const, Transient)
	unsigned long                                      bUpdateCursorRenderStatus : 1;                            // 0x0108(0x0004) (Const, Transient)
	unsigned long                                      bEnableDebugInput : 1;                                    // 0x0108(0x0004) (Config)
	unsigned long                                      bUpdatePausedStatus : 1;                                  // 0x0108(0x0004) (Const, Transient)
	unsigned long                                      bRenderDebugInfo : 1;                                     // 0x0108(0x0004) (Config)
	unsigned long                                      bRenderDebugInfoAtTop : 1;                                // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRenderActiveControlInfo : 1;                             // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRenderFocusedControlInfo : 1;                            // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRenderTargetControlInfo : 1;                             // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                            // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bInteractiveMode : 1;                                     // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisplayFullPaths : 1;                                    // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowWidgetPath : 1;                                      // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowRenderBounds : 1;                                    // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowCurrentState : 1;                                    // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowMousePos : 1;                                        // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bInputIntercepted : 1;                                    // 0x0108(0x0004) (Transient)
	unsigned long                                      bIgnoreInputIntercepted : 1;                              // 0x0108(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;                 // 0x0108(0x0004) (Config)
	unsigned long                                      bKillRestoreMenuProgression : 1;                          // 0x0108(0x0004) (Transient)
	float                                              LatestDeltaTime;                                          // 0x010C(0x0004) (Const, Transient)
	struct FDouble                                     DoubleClickStartTime;                                     // 0x0110(0x0008) (Const, Transient)
	struct FIntPoint                                   DoubleClickStartPosition;                                 // 0x0118(0x0008) (Const, Transient)
	class UTexture*                                    DefaultUITexture[0x3];                                    // 0x0120(0x0004) (Const, Transient)
	struct FMap_Mirror                                 InitialPressedKeys;                                       // 0x012C(0x003C) (Const, Native, Transient)
	float                                              OverlaySceneAlphaModulation;                              // 0x0168(0x0004) (Config)
	class UUIScreenObject*                             DebugTarget;                                              // 0x016C(0x0004) (Const, Transient)
	TArray<class UUIAnimationSeq*>                     AnimSequencePool;                                         // 0x0170(0x000C) (Transient, NeedCtorLink)
	TArray<class UUIObject*>                           AnimSubscribers;                                          // 0x017C(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameUISceneClient");
		return ptr;
	}


	class UUIAnimationSeq* AnimLookupSequence(const struct FName& SequenceName);
	void AnimUnSubscribe(class UUIObject* Target);
	void AnimSubscribe(class UUIObject* Target);
	void ShowMenuProgression();
	void ShowDataStores(bool bVerbose);
	void RefreshFormatting();
	void ShowDataStoreField(const struct FString& DataStoreMarkup);
	void CloseMenu(const struct FName& SceneName);
	void OpenMenu(const struct FString& MenuPath, int PlayerIndex);
	void CreateMenu(class UClass* SceneClass, int PlayerIndex);
	void ToggleDebugInput(bool bEnable);
	void ShowMenuStates();
	void ShowRenderBounds();
	void ShowDockingStacks();
	void RestoreMenuProgression(class UUIScene* BaseScene);
	void ClearMenuProgression();
	void SaveMenuProgression();
	class UUIScene* GetActiveScene();
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyLinkStatusChanged(bool bConnected);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void NotifyGameSessionEnded();
	bool CanShowToolTips();
	void ConditionalPause(bool bDesiredPauseState);
	void ActivateBGSaturation(bool bActive, int Mask);
	bool SetActiveControl(class UUIObject* NewActiveControl);
	bool CanUnpauseInternalUI();
	void RequestPausedUpdate();
	void RequestCursorRenderUpdate();
	void RequestInputProcessingUpdate();
	class UUIScene* FindSceneByTag(const struct FName& SceneTag, class ULocalPlayer* SceneOwner);
	class UUIObject* CreateTransientWidget(class UClass* WidgetClass, const struct FName& WidgetTag, class UUIObject* Owner);
	class UUIScene* CreateScene(class UClass* SceneClass, const struct FName& SceneTag, class UUIScene* SceneTemplate);
	class UUIScene* GetTransientScene();
	TEnumAsByte<ENetMode> STATIC_GetCurrentNetMode();
};


// Class Engine.PickupDataProvider
// 0x0000 (0x006C - 0x006C)
class UPickupDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PickupDataProvider");
		return ptr;
	}

};


// Class Engine.PlayerDataProvider
// 0x0000 (0x006C - 0x006C)
class UPlayerDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerDataProvider");
		return ptr;
	}

};


// Class Engine.PlayerOwnerDataProvider
// 0x0004 (0x0070 - 0x006C)
class UPlayerOwnerDataProvider : public UPlayerDataProvider
{
public:
	class UPlayerDataProvider*                         PlayerData;                                               // 0x006C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerOwnerDataProvider");
		return ptr;
	}


	bool CleanupDataProvider();
	void SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData);
};


// Class Engine.PlayerOwnerDataStore
// 0x0030 (0x00B4 - 0x0084)
class UPlayerOwnerDataStore : public UUIDataStore_GameState
{
public:
	struct FPlayerDataProviderTypes                    ProviderTypes;                                            // 0x0084(0x0010) (Const)
	class UPlayerOwnerDataProvider*                    PlayerData;                                               // 0x0094(0x0004)
	class UCurrentWeaponDataProvider*                  CurrentWeapon;                                            // 0x0098(0x0004)
	TArray<class UWeaponDataProvider*>                 WeaponList;                                               // 0x009C(0x000C) (NeedCtorLink)
	TArray<class UPowerupDataProvider*>                PowerupList;                                              // 0x00A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerOwnerDataStore");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void ClearDataProviders();
	void SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData);
};


// Class Engine.UISettingsProvider
// 0x0008 (0x006C - 0x0064)
class UUISettingsProvider : public UUIPropertyDataProvider
{
public:
	struct FName                                       ProviderTag;                                              // 0x0064(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISettingsProvider");
		return ptr;
	}


	bool CleanupDataProvider();
	bool OnModifiedProperty(const struct FName& PropertyName, class UUIObject* Widget);
	void SavePropertyValue(const struct FName& PropertyName, class UUIObject* Widget);
	void LoadPropertyValue(const struct FName& PropertyName, class UUIObject* Widget);
};


// Class Engine.UIDataStore_Settings
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Settings : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Settings");
		return ptr;
	}

};


// Class Engine.UIDataStore_PlayerSettings
// 0x0028 (0x00A0 - 0x0078)
class UUIDataStore_PlayerSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FString>                             PlayerSettingsProviderClassNames;                         // 0x0078(0x000C) (Const, Config, NeedCtorLink)
	TArray<class UClass*>                              PlayerSettingsProviderClasses;                            // 0x0084(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class UPlayerSettingsProvider*>             PlayerSettings;                                           // 0x0090(0x000C) (Transient, NeedCtorLink)
	int                                                PlayerIndex;                                              // 0x009C(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_PlayerSettings");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void ClearDataProviders();
	class ULocalPlayer* GetPlayerOwner();
};


// Class Engine.PlayerSettingsProvider
// 0x0000 (0x006C - 0x006C)
class UPlayerSettingsProvider : public UUISettingsProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerSettingsProvider");
		return ptr;
	}


	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.PowerupDataProvider
// 0x0000 (0x006C - 0x006C)
class UPowerupDataProvider : public UInventoryDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PowerupDataProvider");
		return ptr;
	}


	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);
};


// Class Engine.SceneDataStore
// 0x0010 (0x0088 - 0x0078)
class USceneDataStore : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004) (Const, Native, NoExport)
	class UUIScene*                                    OwnerScene;                                               // 0x0080(0x0004) (Const, Transient)
	class UUIDynamicFieldProvider*                     SceneDataProvider;                                        // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneDataStore");
		return ptr;
	}


	int FindCollectionValueIndex(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToFind);
	bool GetCollectionValue(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* out_Value);
	bool ClearCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag);
	bool ReplaceCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* NewValue);
	bool ReplaceCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* CurrentValue, struct FString* NewValue);
	bool RemoveCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag);
	bool RemoveCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToRemove);
	bool InsertCollectionValue(const struct FName& FieldName, int InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const struct FName& CellTag, struct FString* NewValue);
	bool SetCollectionValueArray(const struct FName& FieldName, bool bClearExisting, int InsertIndex, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* CollectionValues);
	bool GetCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* out_DataValueArray);
	bool ClearFields(bool bReinitializeRuntimeFields);
	int FindFieldIndex(const struct FName& FieldName, bool bSearchPersistentFields);
	bool RemoveField(const struct FName& FieldName);
	bool AddField(const struct FName& FieldName, TEnumAsByte<EUIDataProviderFieldType> FieldType, bool bPersistent, int* out_InsertPosition);
};


// Class Engine.UIDataStore_SessionSettings
// 0x0024 (0x009C - 0x0078)
class UUIDataStore_SessionSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FString>                             SessionSettingsProviderClassNames;                        // 0x0078(0x000C) (Const, Config, NeedCtorLink)
	TArray<class UClass*>                              SessionSettingsProviderClasses;                           // 0x0084(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class USessionSettingsProvider*>            SessionSettings;                                          // 0x0090(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_SessionSettings");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void ClearDataProviders();
};


// Class Engine.SessionSettingsProvider
// 0x000C (0x0078 - 0x006C)
class USessionSettingsProvider : public UUISettingsProvider
{
public:
	class UClass*                                      ProviderClientClass;                                      // 0x006C(0x0004) (Const)
	class UClass*                                      ProviderClientMetaClass;                                  // 0x0070(0x0004) (Const)
	class UClass*                                      ProviderClient;                                           // 0x0074(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SessionSettingsProvider");
		return ptr;
	}


	bool CleanupDataProvider();
	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);
	void ProviderClientUnbound(class UClass* DataSourceClass);
	void ProviderClientBound(class UClass* DataSourceClass);
	bool UnbindProviderClient();
	bool BindProviderClient(class UClass* DataSourceClass);
};


// Class Engine.TeamDataProvider
// 0x0000 (0x006C - 0x006C)
class UTeamDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamDataProvider");
		return ptr;
	}

};


// Class Engine.UIAnimationSeq
// 0x001C (0x0058 - 0x003C)
class UUIAnimationSeq : public UUIAnimation
{
public:
	struct FName                                       SeqName;                                                  // 0x003C(0x0008)
	float                                              SeqDuration;                                              // 0x0044(0x0004)
	TArray<struct FUIAnimTrack>                        Tracks;                                                   // 0x0048(0x000C) (NeedCtorLink)
	unsigned long                                      bAbsolutePositioning : 1;                                 // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAnimationSeq");
		return ptr;
	}


	void ApplyAnimation(class UUIObject* TargetWidget, int TrackIndex, float Position, int LFI, int NFI, const struct FUIAnimSeqRef& AnimRefInst);
};


// Class Engine.UIButton
// 0x000C (0x03E8 - 0x03DC)
class UUIButton : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x03DC(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	struct FName                                       ClickedCue;                                               // 0x03E0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIButton");
		return ptr;
	}


	void SetImage(class USurface* NewImage);
};


// Class Engine.UICheckbox
// 0x004C (0x0434 - 0x03E8)
class UUICheckbox : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03E8(0x0004) (Const, Native, NoExport)
	struct FName                                       CheckedCue;                                               // 0x03EC(0x0008) (Edit)
	struct FName                                       UncheckedCue;                                             // 0x03F4(0x0008) (Edit)
	struct FUIDataStoreBinding                         ValueDataSource;                                          // 0x03FC(0x0030) (Edit, NeedCtorLink)
	class UUIComp_DrawImage*                           CheckedImageComponent;                                    // 0x042C(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	unsigned long                                      bIsChecked : 1;                                           // 0x0430(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICheckbox");
		return ptr;
	}


	void OnSetBoolValue(class UUIAction_SetBoolValue* Action);
	void SetValue(bool bShouldBeChecked, int PlayerIndex);
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	bool IsChecked();
	void SetCheckImage(class USurface* NewImage);
};


// Class Engine.UIComboBox
// 0x008C (0x0468 - 0x03DC)
class UUIComboBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	class UClass*                                      ComboEditboxClass;                                        // 0x03E0(0x0004) (Const)
	class UClass*                                      ComboButtonClass;                                         // 0x03E4(0x0004) (Const)
	class UClass*                                      ComboListClass;                                           // 0x03E8(0x0004) (Const)
	class UUIEditBox*                                  ComboEditbox;                                             // 0x03EC(0x0004) (Edit, Const, NoClear, EditInline)
	class UUIToggleButton*                             ComboButton;                                              // 0x03F0(0x0004) (Edit, Const, NoClear, EditInline)
	class UUIList*                                     ComboList;                                                // 0x03F4(0x0004) (Edit, Const, NoClear, EditInline)
	class UUIComp_DrawCaption*                         CaptionRenderComponent;                                   // 0x03F8(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UUIComp_DrawImage*                           BackgroundRenderComponent;                                // 0x03FC(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	struct FUIDataStoreBinding                         CaptionDataSource;                                        // 0x0400(0x0030) (Edit, Const, EditConst, NeedCtorLink)
	struct FName                                       OpenList;                                                 // 0x0430(0x0008) (Edit)
	struct FName                                       DecrementCue;                                             // 0x0438(0x0008) (Edit)
	unsigned long                                      bLockSelectedItem : 1;                                    // 0x0440(0x0004) (Edit)
	unsigned long                                      bDockListToButton : 1;                                    // 0x0440(0x0004) (Edit)
	struct FScriptDelegate                             __CreateCustomComboEditbox__Delegate;                     // 0x0444(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CreateCustomComboButton__Delegate;                      // 0x0450(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CreateCustomComboList__Delegate;                        // 0x045C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComboBox");
		return ptr;
	}


	void OnGetTextValue(class UUIAction_GetTextValue* Action);
	void ListItemSelected(class UUIList* Sender, int PlayerIndex);
	void SelectedItemChanged(class UUIObject* Sender, int PlayerIndex);
	void EditboxTextChanged(class UUIObject* Sender, int PlayerIndex);
	bool ShowListClickHandler(class UUIScreenObject* EventObject, int PlayerIndex);
	void ButtonPressed(class UUIScreenObject* EventObject, int PlayerIndex);
	void EditboxPressed(class UUIScreenObject* EventObject, int PlayerIndex);
	void SetListDocking(bool bDockToButton);
	bool IsListDockedToButton();
	void SetEditboxText(const struct FString& NewText, int PlayerIndex, bool bListItemsOnly, bool bSkipNotification);
	void HideList(int PlayerIndex);
	void ShowList(int PlayerIndex);
	void SetVisibility(bool bIsVisible);
	void PostInitialize();
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	class UUIList* CreateCustomComboList(class UUIComboBox* ListOwner);
	class UUIToggleButton* CreateCustomComboButton(class UUIComboBox* ButtonOwner);
	class UUIEditBox* CreateCustomComboEditbox(class UUIComboBox* EditboxOwner);
};


// Class Engine.UIComp_AutoAlignment
// 0x0002 (0x004A - 0x0048)
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	TEnumAsByte<EUIAlignment>                          HorzAlignment;                                            // 0x0048(0x0001) (Edit)
	TEnumAsByte<EUIAlignment>                          VertAlignment;                                            // 0x0049(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_AutoAlignment");
		return ptr;
	}

};


// Class Engine.UIList
// 0x0288 (0x0664 - 0x03DC)
class UUIList : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	struct FUIScreenValue_Extent                       RowHeight;                                                // 0x03E0(0x0008) (Edit)
	struct FUIScreenValue_Extent                       MinColumnSize;                                            // 0x03E8(0x0008) (Edit)
	struct FUIScreenValue_Extent                       ColumnWidth;                                              // 0x03F0(0x0008) (Edit)
	struct FUIScreenValue_Extent                       HeaderCellPadding;                                        // 0x03F8(0x0008) (Edit)
	struct FUIScreenValue_Extent                       HeaderElementSpacing;                                     // 0x0400(0x0008) (Edit)
	struct FUIScreenValue_Extent                       CellSpacing;                                              // 0x0408(0x0008) (Edit)
	struct FUIScreenValue_Extent                       CellPadding;                                              // 0x0410(0x0008) (Edit)
	int                                                Index;                                                    // 0x0418(0x0004) (Transient)
	int                                                TopIndex;                                                 // 0x041C(0x0004) (Transient)
	int                                                MaxVisibleItems;                                          // 0x0420(0x0004) (Edit, Transient, EditConst, DuplicateTransient)
	int                                                ColumnCount;                                              // 0x0424(0x0004) (Edit)
	int                                                RowCount;                                                 // 0x0428(0x0004) (Edit)
	TEnumAsByte<ECellAutoSizeMode>                     ColumnAutoSizeMode;                                       // 0x042C(0x0001) (Edit)
	TEnumAsByte<ECellAutoSizeMode>                     RowAutoSizeMode;                                          // 0x042D(0x0001) (Edit)
	TEnumAsByte<ECellLinkType>                         CellLinkType;                                             // 0x042E(0x0001) (Edit)
	TEnumAsByte<EListWrapBehavior>                     WrapType;                                                 // 0x042F(0x0001) (Edit)
	unsigned long                                      bEnableMultiSelect : 1;                                   // 0x0430(0x0004) (Edit)
	unsigned long                                      bEnableVerticalScrollbar : 1;                             // 0x0430(0x0004) (Edit)
	unsigned long                                      bInitializeScrollbars : 1;                                // 0x0430(0x0004) (Transient)
	unsigned long                                      bAllowDisabledItemSelection : 1;                          // 0x0430(0x0004) (Edit)
	unsigned long                                      bSingleClickSubmission : 1;                               // 0x0430(0x0004) (Edit)
	unsigned long                                      bUpdateItemUnderCursor : 1;                               // 0x0430(0x0004) (Edit)
	unsigned long                                      bHoverStateOverridesSelected : 1;                         // 0x0430(0x0004) (Edit)
	unsigned long                                      bAllowColumnResizing : 1;                                 // 0x0430(0x0004) (Edit)
	unsigned long                                      bDisplayDataBindings : 1;                                 // 0x0430(0x0004) (Edit, Transient)
	unsigned long                                      bSortingList : 1;                                         // 0x0430(0x0004) (Const, Transient)
	class UUIScrollbar*                                VerticalScrollbar;                                        // 0x0434(0x0004)
	struct FUIStyleReference                           GlobalCellStyle[0x4];                                     // 0x0438(0x0020)
	struct FUIStyleReference                           ColumnHeaderStyle;                                        // 0x04B8(0x0020)
	struct FUIStyleReference                           ColumnHeaderBackgroundStyle[0x3];                         // 0x04D8(0x0020)
	struct FUIStyleReference                           ItemOverlayStyle[0x4];                                    // 0x0538(0x0020)
	int                                                ResizeColumn;                                             // 0x05B8(0x0004) (Const, Transient)
	int                                                SetIndexMutex;                                            // 0x05BC(0x0004) (Transient)
	int                                                ValueChangeNotificationMutex;                             // 0x05C0(0x0004) (Transient)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x05C4(0x0030) (Edit, NeedCtorLink)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x05F4(0x0008) (Const, Transient)
	TArray<int>                                        Items;                                                    // 0x05FC(0x000C) (Const, Transient, NeedCtorLink)
	TArray<int>                                        SelectedItems;                                            // 0x0608(0x000C) (Transient, NeedCtorLink)
	class UUIComp_ListElementSorter*                   SortComponent;                                            // 0x0614(0x0004) (Edit, ExportObject, Component, EditInline)
	class UUIComp_ListPresenter*                       CellDataComponent;                                        // 0x0618(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       SubmitDataSuccessCue;                                     // 0x061C(0x0008) (Edit)
	struct FName                                       SubmitDataFailedCue;                                      // 0x0624(0x0008) (Edit)
	struct FName                                       DecrementIndexCue;                                        // 0x062C(0x0008) (Edit)
	struct FName                                       IncrementIndexCue;                                        // 0x0634(0x0008) (Edit)
	struct FName                                       SortAscendingCue;                                         // 0x063C(0x0008) (Edit)
	struct FName                                       SortDescendingCue;                                        // 0x0644(0x0008) (Edit)
	struct FScriptDelegate                             __OnSubmitSelection__Delegate;                            // 0x064C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnListElementsSorted__Delegate;                         // 0x0658(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIList");
		return ptr;
	}


	bool ClearCellBinding();
	void OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void ClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex);
	bool ShouldRenderColumnHeaders();
	void EnableColumnHeaderRendering(bool bShouldRenderColHeaders);
	bool IsValueChangeNotificationEnabled();
	void DisableValueChangeNotification();
	void EnableValueChangeNotification();
	bool IsSetIndexEnabled();
	void DisableSetIndex();
	void EnableSetIndex();
	void DecrementAllMutexes(bool bDispatchUpdates);
	void IncrementAllMutexes();
	bool AllMutexesDisabled();
	void PostInitialize();
	void Initialized();
	void OnGetTextValue(class UUIAction_GetTextValue* Action);
	void OnSetListIndex(class UUIAction_SetListIndex* Action);
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	bool IsElementAutoSizingEnabled();
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	bool IsHotTrackingEnabled();
	void SetHotTracking(bool bShouldUpdateItemUnderCursor);
	bool CanSelectElement(int ElementIndex);
	bool IsElementEnabled(int ElementIndex);
	bool SetTopIndex(int NewTopIndex, bool bClampValue);
	bool SetIndex(int NewIndex, bool bClampValue, bool bSkipNotification);
	int FindItemIndex(const struct FString& ItemValue, int CellIndex);
	struct FString GetElementValue(int ElementIndex, int CellIndex);
	int GetCurrentItem();
	TArray<int> GetSelectedItems();
	int GetResizeColumn(struct FCellHitDetectionInfo* ClickedCell);
	int CalculateIndexFromCursorLocation(bool bRequireValidIndex);
	struct FVector2D GetClientRegion();
	float GetRowHeight(int RowIndex, bool bColHeader, bool bReturnUnformattedValue);
	float GetColumnWidth(int ColumnIndex, bool bColHeader, bool bReturnUnformattedValue);
	void SetRowCount(int NewRowCount);
	void SetColumnCount(int NewColumnCount);
	int GetTotalColumnCount();
	int GetTotalRowCount();
	int GetMaxNumVisibleColumns();
	int GetMaxNumVisibleRows();
	int GetMaxVisibleElementCount();
	int GetItemCount();
	int RemoveElement(int ElementToRemove);
	bool ScrollVertical(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed);
	void OnListElementsSorted(class UUIList* Sender);
	void OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
};


// Class Engine.UIComp_ListComponentBase
// 0x0000 (0x0048 - 0x0048)
class UUIComp_ListComponentBase : public UUIComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListComponentBase");
		return ptr;
	}

};


// Class Engine.UIComp_ListPresenter
// 0x00AC (0x00F4 - 0x0048)
class UUIComp_ListPresenter : public UUIComp_ListComponentBase
{
public:
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;                       // 0x0048(0x0004) (Const, Native, NoExport)
	struct FUIElementCellSchema                        ElementSchema;                                            // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FUIListItem>                         ListItems;                                                // 0x0058(0x000C) (Edit, Transient, EditConst, AlwaysInit, NeedCtorLink, NoImport, EditInline)
	unsigned long                                      bDisablePixelAligning : 1;                                // 0x0064(0x0004) (Edit)
	unsigned long                                      bDisplayColumnHeaders : 1;                                // 0x0064(0x0004) (Edit)
	unsigned long                                      bReapplyFormatting : 1;                                   // 0x0064(0x0004) (Transient)
	unsigned long                                      bOnlyDrawEveryOtherElementOverlay : 1;                    // 0x0064(0x0004) (Edit)
	class UUITexture*                                  ColumnHeaderBackground[0x3];                              // 0x0068(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline, EditInlineUse)
	class UUITexture*                                  ListItemOverlay[0x4];                                     // 0x0074(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline, EditInlineUse)
	struct FTextureCoordinates                         ColumnHeaderBackgroundCoordinates[0x3];                   // 0x0084(0x0010) (Edit)
	struct FTextureCoordinates                         ListItemOverlayCoordinates[0x4];                          // 0x00B4(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenter");
		return ptr;
	}


	int FindElementIndex(int DataSourceIndex);
	TScriptInterface<class UUIListElementCellProvider> GetCellSchemaProvider();
	bool ShouldAdjustListBounds(TEnumAsByte<EUIOrientation> Orientation);
	bool ShouldRenderColumnHeaders();
	void EnableColumnHeaderRendering(bool bShouldRenderColHeaders);
};


// Class Engine.UIComp_ListPresenterCascade
// 0x0000 (0x00F4 - 0x00F4)
class UUIComp_ListPresenterCascade : public UUIComp_ListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenterCascade");
		return ptr;
	}

};


// Class Engine.UIContextMenu
// 0x0014 (0x0678 - 0x0664)
class UUIContextMenu : public UUIList
{
public:
	class UUIObject*                                   InvokingWidget;                                           // 0x0664(0x0004) (Const, Transient)
	TArray<struct FContextMenuItem>                    MenuItems;                                                // 0x0668(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bResolvePosition : 1;                                     // 0x0674(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIContextMenu");
		return ptr;
	}


	int FindMenuItemIndex(class UUIObject* Widget, const struct FString& ItemToFind);
	bool GetMenuItem(class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem);
	bool GetAllMenuItems(class UUIObject* Widget, TArray<struct FString>* out_MenuItems);
	bool RemoveMenuItemAtIndex(class UUIObject* Widget, int IndexToRemove);
	bool RemoveMenuItem(class UUIObject* Widget, const struct FString& ItemToRemove);
	bool ClearMenuItems(class UUIObject* Widget);
	bool InsertMenuItem(class UUIObject* Widget, const struct FString& Item, int InsertIndex, bool bAllowDuplicates);
	bool SetMenuItems(class UUIObject* Widget, TArray<struct FString> NewMenuItems, bool bClearExisting, int InsertIndex);
	bool Close(int PlayerIndex);
	bool Open(int PlayerIndex);
	bool IsActiveContextMenu();
};


// Class Engine.UIComp_ContextMenuListPresenter
// 0x0000 (0x00F4 - 0x00F4)
class UUIComp_ContextMenuListPresenter : public UUIComp_ListPresenterCascade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ContextMenuListPresenter");
		return ptr;
	}

};


// Class Engine.UIComp_DrawComponents
// 0x0024 (0x006C - 0x0048)
class UUIComp_DrawComponents : public UUIComponent
{
public:
	TEnumAsByte<EFadeType>                             FadeType;                                                 // 0x0048(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              FadeAlpha;                                                // 0x004C(0x0004) (Edit, Transient)
	float                                              FadeTarget;                                               // 0x0050(0x0004) (Edit, Transient)
	float                                              FadeTime;                                                 // 0x0054(0x0004) (Edit, Transient)
	float                                              LastRenderTime;                                           // 0x0058(0x0004) (Transient)
	float                                              FadeRate;                                                 // 0x005C(0x0004) (Transient)
	struct FScriptDelegate                             __OnFadeComplete__Delegate;                               // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawComponents");
		return ptr;
	}


	void OnFadeComplete(class UUIComp_DrawComponents* Sender);
	void ResetFade();
	void Pulse(float MaxAlpha, float MinAlpha, float PulseRate);
	void Fade(float FromAlpha, float ToAlpha, float TargetFadeTime);
};


// Class Engine.UIComp_DrawString
// 0x0100 (0x016C - 0x006C)
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                                 // 0x006C(0x0004) (Const, Native, NoExport)
	TScriptInterface<class UUIDataStoreSubscriber>     SubscriberOwner;                                          // 0x0070(0x0008) (Transient)
	struct FName                                       StyleResolverTag;                                         // 0x0078(0x0008)
	class UUIString*                                   ValueString;                                              // 0x0080(0x0004) (Transient)
	class UClass*                                      StringClass;                                              // 0x0084(0x0004) (Const, Transient)
	struct FAutoSizeData                               AutoSizeParameters[0x2];                                  // 0x0088(0x001C) (Edit)
	struct FUIRenderingSubregion                       ClampRegion[0x2];                                         // 0x00C0(0x0018) (Edit)
	unsigned long                                      bDisablePixelAligning : 1;                                // 0x00F0(0x0004) (Edit)
	unsigned long                                      bIgnoreMarkup : 1;                                        // 0x00F0(0x0004) (Edit)
	unsigned long                                      bRefreshString : 1;                                       // 0x00F0(0x0004) (Edit, Transient)
	unsigned long                                      bReapplyFormatting : 1;                                   // 0x00F0(0x0004) (Transient)
	struct FUITextStyleOverride                        TextStyleCustomization;                                   // 0x00F4(0x0048) (Edit)
	struct FUIStyleReference                           StringStyle;                                              // 0x013C(0x0020)
	float                                              Padding[0x4];                                             // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawString");
		return ptr;
	}


	void SetAutoSizePadding(TEnumAsByte<EUIOrientation> Orientation, float NearValue, float FarValue, TEnumAsByte<EUIExtentEvalType> NearScaleType, TEnumAsByte<EUIExtentEvalType> FarScaleType);
	void EnableAutoSizing(TEnumAsByte<EUIOrientation> Orientation, bool bShouldEnable);
	bool IsAutoSizeEnabled(TEnumAsByte<EUIOrientation> Orientation);
	void SetAutoSizeExtent(TEnumAsByte<EUIOrientation> Orientation, float MinValue, float MaxValue, TEnumAsByte<EUIExtentEvalType> MinScaleType, TEnumAsByte<EUIExtentEvalType> MaxScaleType);
	bool NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName);
	bool SetStyleResolverTag(const struct FName& NewResolverTag);
	struct FName GetStyleResolverTag();
	bool GetFinalStringStyle(struct FUICombinedStyleData* FinalStyleData);
	class UUIStyle_Combo* GetAppliedStringStyle(class UUIState* DesiredMenuState);
	TEnumAsByte<ETextClipMode> GetWrapMode();
	void DisableCustomSpacingAdjust();
	void DisableCustomScale();
	void DisableCustomAutoScaling();
	void DisableCustomClipAlignment();
	void DisableCustomClipMode();
	void DisableCustomAlignment();
	void DisableCustomAttributes();
	void DisableCustomFont();
	void DisableCustomPadding();
	void DisableCustomOpacity();
	void DisableCustomColor();
	void SetSpacingAdjust(TEnumAsByte<EUIOrientation> Orientation, float NewSpacingAdjust);
	void SetScale(TEnumAsByte<EUIOrientation> Orientation, float NewScale);
	void SetAutoScaling(TEnumAsByte<ETextAutoScaleMode> NewAutoScaleMode, float NewMinScaleValue);
	void SetClipAlignment(TEnumAsByte<EUIAlignment> NewClipAlignment);
	void SetWrapMode(TEnumAsByte<ETextClipMode> NewClipMode);
	void SetAlignment(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIAlignment> NewAlignment);
	void SetAttributes(const struct FUITextAttributes& NewAttributes);
	void SetFont(class UFont* NewFont);
	void SetPadding(float HorizontalPadding, float VerticalPadding);
	void SetOpacity(float NewOpacity);
	void SetColor(const struct FLinearColor& NewColor);
	void SetSubregionAlignment(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIAlignment> NewValue);
	void SetSubregionOffset(TEnumAsByte<EUIOrientation> Orientation, float NewValue, TEnumAsByte<EUIExtentEvalType> EvalType);
	void SetSubregionSize(TEnumAsByte<EUIOrientation> Orientation, float NewValue, TEnumAsByte<EUIExtentEvalType> EvalType);
	void EnableSubregion(TEnumAsByte<EUIOrientation> Orientation, bool bShouldEnable);
	TEnumAsByte<EUIAlignment> GetSubregionAlignment(TEnumAsByte<EUIOrientation> Orientation);
	float GetSubregionOffset(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIExtentEvalType> OutputType);
	float GetSubregionSize(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIExtentEvalType> OutputType);
	bool IsSubregionEnabled(TEnumAsByte<EUIOrientation> Orientation);
	void RefreshValue();
	struct FString GetValue(bool bReturnProcessedText);
	void SetValue(const struct FString& NewText);
};


// Class Engine.UIComp_DrawCaption
// 0x0000 (0x016C - 0x016C)
class UUIComp_DrawCaption : public UUIComp_DrawString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawCaption");
		return ptr;
	}

};


// Class Engine.UIComp_DrawImage
// 0x008C (0x00F8 - 0x006C)
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                                 // 0x006C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;                       // 0x0070(0x0004) (Const, Native, NoExport)
	struct FName                                       StyleResolverTag;                                         // 0x0074(0x0008)
	class UUITexture*                                  ImageRef;                                                 // 0x007C(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline, EditInlineUse)
	struct FUIImageStyleOverride                       StyleCustomization;                                       // 0x0080(0x0054) (Edit)
	unsigned long                                      bDisablePixelAligning : 1;                                // 0x00D4(0x0004) (Edit)
	struct FUIStyleReference                           ImageStyle;                                               // 0x00D8(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawImage");
		return ptr;
	}


	bool NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName);
	bool SetStyleResolverTag(const struct FName& NewResolverTag);
	struct FName GetStyleResolverTag();
	class USurface* GetImage();
	void DisableCustomFormatting();
	void DisableCustomPadding();
	void DisableCustomOpacity();
	void DisableCustomColor();
	void DisableCustomCoordinates();
	void SetFormatting(TEnumAsByte<EUIOrientation> Orientation, const struct FUIImageAdjustmentData& NewFormattingData);
	void SetPadding(float HorizontalPadding, float VerticalPadding);
	void SetOpacity(float NewOpacity);
	void SetColor(const struct FLinearColor& NewColor);
	void SetCoordinates(const struct FTextureCoordinates& NewCoordinates);
	void SetImage(class USurface* NewImage);
	class UUIStyle_Image* GetAppliedImageStyle(class UUIState* DesiredMenuState);
};


// Class Engine.UIEditBox
// 0x0060 (0x043C - 0x03DC)
class UUIEditBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x03E0(0x0030) (Edit, NeedCtorLink)
	class UUIComp_DrawStringEditbox*                   StringRenderComponent;                                    // 0x0410(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0414(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	struct FString                                     InitialValue;                                             // 0x0418(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bReadOnly : 1;                                            // 0x0424(0x0004) (Edit)
	unsigned long                                      bPasswordMode : 1;                                        // 0x0424(0x0004) (Edit)
	int                                                MaxCharacters;                                            // 0x0428(0x0004) (Edit)
	TEnumAsByte<EEditBoxCharacterSet>                  CharacterSet;                                             // 0x042C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnSubmitText__Delegate;                                 // 0x0430(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEditBox");
		return ptr;
	}


	void OnGetTextValue(class UUIAction_GetTextValue* Action);
	void OnSetLabelText(class UUIAction_SetLabelText* Action);
	void IgnoreMarkup(bool bShouldIgnoreMarkup);
	void SetReadOnly(bool bShouldBeReadOnly);
	bool IsReadOnly();
	void Initialized();
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	int CalculateCaretPositionFromCursorLocation(int PlayerIndex);
	struct FString GetValue(bool bReturnUserText);
	void SetValue(const struct FString& NewText, int PlayerIndex, bool bSkipNotification);
	void SetBackgroundImage(class USurface* NewImage);
	bool OnSubmitText(class UUIEditBox* Sender, int PlayerIndex);
};


// Class Engine.UIComp_DrawStringEditbox
// 0x0060 (0x01CC - 0x016C)
class UUIComp_DrawStringEditbox : public UUIComp_DrawString
{
public:
	struct FString                                     UserText;                                                 // 0x016C(0x000C) (Transient, NeedCtorLink)
	struct FUIStringCaretParameters                    StringCaret;                                              // 0x0178(0x001C) (Edit)
	struct FUIStringSelectionRegion                    SelectionRegion;                                          // 0x0194(0x0008) (Transient)
	struct FLinearColor                                SelectionTextColor;                                       // 0x019C(0x0010) (Config)
	struct FLinearColor                                SelectionBackgroundColor;                                 // 0x01AC(0x0010) (Config)
	struct FPointer                                    CaretNode;                                                // 0x01BC(0x0004) (Const, Native, Transient)
	int                                                FirstCharacterPosition;                                   // 0x01C0(0x0004) (Const, Transient)
	unsigned long                                      bRecalculateFirstCharacter : 1;                           // 0x01C4(0x0004) (Const, Transient)
	float                                              CaretOffset;                                              // 0x01C8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawStringEditbox");
		return ptr;
	}


	struct FString GetSelectedText();
	bool GetSelectionRange(int* out_StartIndex, int* out_EndIndex);
	bool ClearSelection();
	bool SetSelectionEnd(int EndIndex);
	bool SetSelectionStart(int StartIndex);
	bool SetSelectionRange(int StartIndex, int EndIndex);
	int GetUserTextLength();
	bool SetUserText(const struct FString& NewValue);
};


// Class Engine.UIComp_DrawStringSlider
// 0x0000 (0x016C - 0x016C)
class UUIComp_DrawStringSlider : public UUIComp_DrawString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawStringSlider");
		return ptr;
	}

};


// Class Engine.UIComp_ListElementSorter
// 0x0014 (0x005C - 0x0048)
class UUIComp_ListElementSorter : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bAllowCompoundSorting : 1;                                // 0x0048(0x0004) (Edit)
	unsigned long                                      bReversePrimarySorting : 1;                               // 0x0048(0x0004) (Edit)
	unsigned long                                      bReverseSecondarySorting : 1;                             // 0x0048(0x0004) (Edit)
	int                                                InitialSortColumn;                                        // 0x004C(0x0004) (Edit)
	int                                                InitialSecondarySortColumn;                               // 0x0050(0x0004) (Edit)
	int                                                PrimarySortColumn;                                        // 0x0054(0x0004) (Edit, Const, Transient, EditConst)
	int                                                SecondarySortColumn;                                      // 0x0058(0x0004) (Edit, Const, Transient, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListElementSorter");
		return ptr;
	}


	bool ResortItems(bool bCaseSensitive);
	bool SortItems(int ColumnIndex, bool bSecondarySort, bool bCaseSensitive);
	void ResetSortColumns(bool bResort);
};


// Class Engine.UIComp_ListPresenterTree
// 0x0000 (0x00F4 - 0x00F4)
class UUIComp_ListPresenterTree : public UUIComp_ListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenterTree");
		return ptr;
	}

};


// Class Engine.UIConfigProvider
// 0x0000 (0x0058 - 0x0058)
class UUIConfigProvider : public UUIDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigProvider");
		return ptr;
	}

};


// Class Engine.UIConfigFileProvider
// 0x0018 (0x0070 - 0x0058)
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray<class UUIConfigSectionProvider*>            Sections;                                                 // 0x0058(0x000C) (Transient, NeedCtorLink)
	struct FString                                     ConfigFileName;                                           // 0x0064(0x000C) (Transient, NeedCtorLink, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigFileProvider");
		return ptr;
	}

};


// Class Engine.UIConfigSectionProvider
// 0x000C (0x0064 - 0x0058)
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                              // 0x0058(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigSectionProvider");
		return ptr;
	}

};


// Class Engine.UIContainer
// 0x0004 (0x03E0 - 0x03DC)
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                            // 0x03DC(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIContainer");
		return ptr;
	}

};


// Class Engine.UICustomSkin
// 0x003C (0x0210 - 0x01D4)
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x01D4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICustomSkin.WidgetStyleMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICustomSkin");
		return ptr;
	}

};


// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x005C - 0x0058)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	class ULocalPlayer*                                Player;                                                   // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerDataBase");
		return ptr;
	}


	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineClanMates
// 0x0004 (0x0060 - 0x005C)
class UUIDataProvider_OnlineClanMates : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineClanMates");
		return ptr;
	}


	void OnClanMatesReadComplete();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0058 (0x00B4 - 0x005C)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)
	TArray<struct FOnlineFriendMessage>                Messages;                                                 // 0x0060(0x000C) (NeedCtorLink)
	struct FString                                     SendingPlayerNameCol;                                     // 0x006C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsFriendInviteCol;                                       // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bWasAcceptedCol;                                          // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bWasDeniedCol;                                            // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MessageCol;                                               // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LastInviteFrom;                                           // 0x00A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriendMessages");
		return ptr;
	}


	void OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName);
	void OnLoginChange();
	void OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message);
	void OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message);
	void ReadMessages();
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineFriends
// 0x0064 (0x00C0 - 0x005C)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)
	TArray<struct FOnlineFriend>                       FriendsList;                                              // 0x0060(0x000C) (NeedCtorLink)
	struct FString                                     NickNameCol;                                              // 0x006C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PresenceInfoCol;                                          // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsOnlineCol;                                             // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingCol;                                            // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingThisGameCol;                                    // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsJoinableCol;                                           // 0x00A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bHasVoiceSupportCol;                                      // 0x00B4(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriends");
		return ptr;
	}


	void RefreshFriendsList();
	void OnLoginChange();
	void OnFriendsReadComplete(bool bWasSuccessful);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlinePlayers
// 0x0064 (0x00C0 - 0x005C)
class UUIDataProvider_OnlinePlayers : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)
	TArray<struct FOnlinePlayer>                       PlayersList;                                              // 0x0060(0x000C) (NeedCtorLink)
	struct FString                                     NickNameCol;                                              // 0x006C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PresenceInfoCol;                                          // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsOnlineCol;                                             // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingCol;                                            // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingThisGameCol;                                    // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsJoinableCol;                                           // 0x00A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bHasVoiceSupportCol;                                      // 0x00B4(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayers");
		return ptr;
	}


	void OnPlayersReadComplete();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x001C (0x0078 - 0x005C)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlineProfileSettings*                      Profile;                                                  // 0x005C(0x0004)
	struct FName                                       ProviderName;                                             // 0x0060(0x0008) (Const)
	unsigned long                                      bWasErrorLastRead : 1;                                    // 0x0068(0x0004)
	TArray<struct FProfileSettingsArrayProvider>       ProfileSettingsArrayProviders;                            // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettings");
		return ptr;
	}


	bool SaveProfileData();
	void OnLoginChange();
	void OnReadProfileComplete(bool bWasSuccessful);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineProfileSettingsArray
// 0x0030 (0x0088 - 0x0058)
class UUIDataProvider_OnlineProfileSettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0058(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)
	class UOnlineProfileSettings*                      ProfileSettings;                                          // 0x0060(0x0004)
	int                                                ProfileSettingId;                                         // 0x0064(0x0004)
	struct FName                                       ProfileSettingsName;                                      // 0x0068(0x0008)
	struct FString                                     ColumnHeaderText;                                         // 0x0070(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               Values;                                                   // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettingsArray");
		return ptr;
	}

};


// Class Engine.UIDataProvider_Settings
// 0x0014 (0x0080 - 0x006C)
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	class USettings*                                   Settings;                                                 // 0x006C(0x0004)
	TArray<struct FSettingsArrayProvider>              SettingsArrayProviders;                                   // 0x0070(0x000C) (NeedCtorLink)
	unsigned long                                      bIsAListRow : 1;                                          // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_Settings");
		return ptr;
	}

};


// Class Engine.UIDataProvider_SettingsArray
// 0x0030 (0x0088 - 0x0058)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0058(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004) (Const, Native, NoExport)
	class USettings*                                   Settings;                                                 // 0x0060(0x0004)
	int                                                SettingsId;                                               // 0x0064(0x0004)
	struct FName                                       SettingsName;                                             // 0x0068(0x0008)
	struct FString                                     ColumnHeaderText;                                         // 0x0070(0x000C) (Const, NeedCtorLink)
	TArray<struct FIdToStringMapping>                  Values;                                                   // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_SettingsArray");
		return ptr;
	}

};


// Class Engine.UIDataStore_Color
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Color : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Color");
		return ptr;
	}

};


// Class Engine.UIDataStore_Fonts
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Fonts");
		return ptr;
	}

};


// Class Engine.UIDataStore_GameResource
// 0x004C (0x00C4 - 0x0078)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	TArray<struct FGameResourceDataProvider>           ElementProviderTypes;                                     // 0x007C(0x000C) (Config, NeedCtorLink)
	struct FMultiMap_Mirror                            ListElementProviders;                                     // 0x0088(0x003C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameResource");
		return ptr;
	}

};


// Class Engine.UIDataStore_Gamma
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Gamma : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Gamma");
		return ptr;
	}

};


// Class Engine.UIDataStore_Images
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Images : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Images");
		return ptr;
	}

};


// Class Engine.UIDataStore_Remote
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Remote : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Remote");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlineGameSearch
// 0x0030 (0x00A8 - 0x0078)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004) (Const, Native, NoExport)
	struct FName                                       SearchResultsName;                                        // 0x0080(0x0008) (Const)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0088(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x008C(0x0008)
	TArray<struct FGameSearchCfg>                      GameSearchCfgList;                                        // 0x0094(0x000C) (Const, NeedCtorLink)
	int                                                SelectedIndex;                                            // 0x00A0(0x0004)
	int                                                ActiveSearchIndex;                                        // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSearch");
		return ptr;
	}


	void ClearAllSearchResults();
	void MoveToPrevious(bool bInvalidateExistingSearchResults);
	void MoveToNext(bool bInvalidateExistingSearchResults);
	void SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults);
	void SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults);
	int FindSearchConfigurationIndex(const struct FName& SearchTag);
	class UOnlineGameSearch* GetActiveGameSearch();
	class UOnlineGameSearch* GetCurrentGameSearch();
	void BuildSearchResults();
	bool ShowHostGamercard(unsigned char ControllerIndex, int ListIndex);
	bool GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result);
	void OnSearchComplete(bool bWasSuccessful);
	bool OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search);
	bool SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults);
	bool InvalidateCurrentSearchResults();
	void Init();
};


// Class Engine.UIDataStore_OnlineGameSettings
// 0x0010 (0x0088 - 0x0078)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FGameSettingsCfg>                    GameSettingsCfgList;                                      // 0x0078(0x000C) (Const, NeedCtorLink)
	int                                                SelectedIndex;                                            // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSettings");
		return ptr;
	}


	void MoveToPrevious();
	void MoveToNext();
	void SetCurrentByName(const struct FName& SettingsName);
	void SetCurrentByIndex(int NewIndex);
	class UUIDataProvider_Settings* GetCurrentProvider();
	class UOnlineGameSettings* GetCurrentGameSettings();
	bool CreateGame(unsigned char ControllerIndex);
};


// Class Engine.UIDataStore_OnlinePlayerData
// 0x0080 (0x00F8 - 0x0078)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                          // 0x007C(0x0004)
	class UUIDataProvider_OnlinePlayers*               PlayersProvider;                                          // 0x0080(0x0004)
	class UUIDataProvider_OnlineClanMates*             ClanMatesProvider;                                        // 0x0084(0x0004)
	class ULocalPlayer*                                Player;                                                   // 0x0088(0x0004)
	struct FString                                     PlayerNick;                                               // 0x008C(0x000C) (NeedCtorLink)
	int                                                NumNewDownloads;                                          // 0x0098(0x0004)
	int                                                NumTotalDownloads;                                        // 0x009C(0x0004)
	struct FString                                     ProfileSettingsClassName;                                 // 0x00A0(0x000C) (Config, NeedCtorLink)
	class UClass*                                      ProfileSettingsClass;                                     // 0x00AC(0x0004)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x00B0(0x0004)
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                                   // 0x00B4(0x0004)
	struct FString                                     FriendsProviderClassName;                                 // 0x00B8(0x000C) (Config, NeedCtorLink)
	class UClass*                                      FriendsProviderClass;                                     // 0x00C4(0x0004)
	struct FString                                     PlayersProviderClassName;                                 // 0x00C8(0x000C) (Config, NeedCtorLink)
	class UClass*                                      PlayersProviderClass;                                     // 0x00D4(0x0004)
	struct FString                                     ClanMatesProviderClassName;                               // 0x00D8(0x000C) (Config, NeedCtorLink)
	class UClass*                                      ClanMatesProviderClass;                                   // 0x00E4(0x0004)
	struct FString                                     FriendMessagesProviderClassName;                          // 0x00E8(0x000C) (Config, NeedCtorLink)
	class UClass*                                      FriendMessagesProviderClass;                              // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlinePlayerData");
		return ptr;
	}


	bool SaveProfileData();
	void OnDownloadableContentQueryDone(bool bWasSuccessful);
	void OnProviderChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag);
	void RegisterDelegates();
	void OnPlayerDataChange();
	void OnLoginChange();
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataStore_OnlineStats
// 0x0070 (0x00E8 - 0x0078)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004) (Const, Native, NoExport)
	TArray<class UClass*>                              StatsReadClasses;                                         // 0x0080(0x000C) (NeedCtorLink)
	struct FName                                       StatsReadName;                                            // 0x008C(0x0008) (Const)
	struct FPlayerNickMetaData                         PlayerNickData;                                           // 0x0094(0x0014) (Const, NeedCtorLink)
	struct FRankMetaData                               RankNameMetaData;                                         // 0x00A8(0x0014) (Const, NeedCtorLink)
	struct FName                                       TotalRowsName;                                            // 0x00BC(0x0008) (Const)
	TArray<class UOnlineStatsRead*>                    StatsReadObjects;                                         // 0x00C4(0x000C) (NeedCtorLink)
	class UOnlineStatsRead*                            StatsRead;                                                // 0x00D0(0x0004)
	TEnumAsByte<EStatsFetchType>                       CurrentReadType;                                          // 0x00D4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x00D8(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x00E0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineStats");
		return ptr;
	}


	void SortResultsByRank();
	void OnReadComplete(bool bWasSuccessful);
	bool ShowGamercard(unsigned char ConrollerIndex, int ListIndex);
	bool RefreshStats(unsigned char ControllerIndex);
	void SetStatsReadInfo();
	void Init();
};


// Class Engine.UIDataStore_Registry
// 0x0004 (0x007C - 0x0078)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                                     // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Registry");
		return ptr;
	}


	class UUIDynamicFieldProvider* GetDataProvider();
};


// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00C4 - 0x0078)
class UUIDataStore_StringAliasMap : public UUIDataStore
{
public:
	TArray<struct FUIMenuInputMap>                     MenuInputMapArray;                                        // 0x0078(0x000C) (Config, NeedCtorLink)
	struct FMap_Mirror                                 MenuInputSets;                                            // 0x0084(0x003C) (Const, Native, Transient)
	int                                                PlayerIndex;                                              // 0x00C0(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_StringAliasMap");
		return ptr;
	}


	int GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString);
	int FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName);
	class ULocalPlayer* GetPlayerOwner();
};


// Class Engine.UIDataStore_Strings
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_Strings : public UUIDataStore
{
public:
	TArray<class UUIConfigFileProvider*>               LocFileProviders;                                         // 0x0078(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Strings");
		return ptr;
	}

};


// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStoreSubscriber");
		return ptr;
	}


	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
};


// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStorePublisher");
		return ptr;
	}


	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
};


// Class Engine.UIDynamicFieldProvider
// 0x0090 (0x00E8 - 0x0058)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray<struct FUIProviderScriptFieldValue>         PersistentDataFields;                                     // 0x0058(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FUIProviderScriptFieldValue>         RuntimeDataFields;                                        // 0x0064(0x000C) (Edit, Transient, NeedCtorLink)
	struct FMap_Mirror                                 PersistentCollectionData;                                 // 0x0070(0x003C) (Const, Native)
	struct FMap_Mirror                                 RuntimeCollectionData;                                    // 0x00AC(0x003C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDynamicFieldProvider");
		return ptr;
	}


	int FindCollectionValueIndex(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToFind);
	bool GetCollectionValue(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* out_Value);
	bool ClearCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag);
	bool ReplaceCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* NewValue);
	bool ReplaceCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* CurrentValue, struct FString* NewValue);
	bool RemoveCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag);
	bool RemoveCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToRemove);
	bool InsertCollectionValue(const struct FName& FieldName, int InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const struct FName& CellTag, struct FString* NewValue);
	bool SetCollectionValueArray(const struct FName& FieldName, bool bClearExisting, int InsertIndex, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* CollectionValues);
	bool GetCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* out_DataValueArray);
	bool GetCollectionValueSchema(const struct FName& FieldName, bool bPersistent, TArray<struct FName>* out_CellTagArray);
	void SavePersistentProviderData();
	bool SetField(const struct FName& FieldName, bool bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue);
	bool GetField(const struct FName& FieldName, struct FUIProviderScriptFieldValue* out_Field);
	bool ClearFields(bool bReinitializeRuntimeFields);
	int FindFieldIndex(const struct FName& FieldName, bool bSearchPersistentFields);
	bool RemoveField(const struct FName& FieldName);
	bool AddField(const struct FName& FieldName, TEnumAsByte<EUIDataProviderFieldType> FieldType, bool bPersistent, int* out_InsertPosition);
	void InitializeRuntimeFields();
};


// Class Engine.UIEditboxString
// 0x0000 (0x00DC - 0x00DC)
class UUIEditboxString : public UUIString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEditboxString");
		return ptr;
	}

};


// Class Engine.UIFrameBox
// 0x0054 (0x0434 - 0x03E0)
class UUIFrameBox : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent[0x9];                            // 0x03E0(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	struct FCornerSizes                                BackgroundCornerSizes;                                    // 0x0404(0x0030) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIFrameBox");
		return ptr;
	}


	void SetBackgroundImage(TEnumAsByte<EFrameBoxImage> ImageToSet, class USurface* NewImage);
};


// Class Engine.UIImage
// 0x0038 (0x0414 - 0x03DC)
class UUIImage : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	struct FUIDataStoreBinding                         ImageDataSource;                                          // 0x03E0(0x0030) (Edit, NeedCtorLink)
	class UUIComp_DrawImage*                           ImageComponent;                                           // 0x0410(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIImage");
		return ptr;
	}


	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	void SetValue(class USurface* NewImage);
};


// Class Engine.UILabel
// 0x0040 (0x041C - 0x03DC)
class UUILabel : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                           // 0x03DC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIStringRenderer;                                // 0x03E0(0x0004) (Const, Native, NoExport)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x03E4(0x0030) (Edit, NeedCtorLink)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x0414(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           LabelBackground;                                          // 0x0418(0x0004) (Edit, Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILabel");
		return ptr;
	}


	void OnGetTextValue(class UUIAction_GetTextValue* Action);
	void OnSetLabelText(class UUIAction_SetLabelText* Action);
	void IgnoreMarkup(bool bShouldIgnoreMarkup);
	struct FString GetValue();
	void SetArrayValue(TArray<struct FString> ValueArray);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	void SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical);
	void SetValue(const struct FString& NewText);
};


// Class Engine.UILabelButton
// 0x0038 (0x0420 - 0x03E8)
class UUILabelButton : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03E8(0x0004) (Const, Native, NoExport)
	struct FUIDataStoreBinding                         CaptionDataSource;                                        // 0x03EC(0x0030) (Edit, NeedCtorLink)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x041C(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILabelButton");
		return ptr;
	}


	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	void SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical);
	void OnGetTextValue(class UUIAction_GetTextValue* Action);
	void OnSetLabelText(class UUIAction_SetLabelText* Action);
	struct FString GetCaption();
	void SetCaption(const struct FString& NewText);
};


// Class Engine.UIListElementCellProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementCellProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListElementCellProvider");
		return ptr;
	}

};


// Class Engine.UIListElementProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListElementProvider");
		return ptr;
	}

};


// Class Engine.UIListString
// 0x0000 (0x00DC - 0x00DC)
class UUIListString : public UUIString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListString");
		return ptr;
	}

};


// Class Engine.UIMeshWidget
// 0x0004 (0x03E0 - 0x03DC)
class UUIMeshWidget : public UUIObject
{
public:
	class UStaticMeshComponent*                        Mesh;                                                     // 0x03DC(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMeshWidget");
		return ptr;
	}

};


// Class Engine.UINumericEditBox
// 0x0098 (0x04D4 - 0x043C)
class UUINumericEditBox : public UUIEditBox
{
public:
	struct FUIStyleReference                           IncrementStyle;                                           // 0x043C(0x0020) (Edit)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x045C(0x0020) (Edit)
	class UUINumericEditBoxButton*                     IncrementButton;                                          // 0x047C(0x0004)
	class UUINumericEditBoxButton*                     DecrementButton;                                          // 0x0480(0x0004)
	struct FUIRangeData                                NumericValue;                                             // 0x0484(0x0014) (Edit)
	int                                                DecimalPlaces;                                            // 0x0498(0x0004) (Edit)
	struct FUIScreenValue_Bounds                       IncButton_Position;                                       // 0x049C(0x001C) (Edit)
	struct FUIScreenValue_Bounds                       DecButton_Position;                                       // 0x04B8(0x001C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericEditBox");
		return ptr;
	}


	float GetNumericValue();
	bool SetNumericValue(float NewValue, bool bForceRefreshString);
	void PostInitialize();
	void Initialized();
	void DecrementValue(class UUIScreenObject* Sender, int PlayerIndex);
	void IncrementValue(class UUIScreenObject* Sender, int PlayerIndex);
};


// Class Engine.UINumericEditBoxButton
// 0x0000 (0x03E8 - 0x03E8)
class UUINumericEditBoxButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericEditBoxButton");
		return ptr;
	}

};


// Class Engine.UIOptionListBase
// 0x00BC (0x0498 - 0x03DC)
class UUIOptionListBase : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x03E0(0x0020)
	struct FUIStyleReference                           IncrementStyle;                                           // 0x0400(0x0020)
	class UUIOptionListButton*                         DecrementButton;                                          // 0x0420(0x0004) (Const)
	class UUIOptionListButton*                         IncrementButton;                                          // 0x0424(0x0004) (Const)
	class UClass*                                      OptionListButtonClass;                                    // 0x0428(0x0004) (Const)
	struct FUIScreenValue_Extent                       ButtonSpacing;                                            // 0x042C(0x0008) (Edit)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0434(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x0438(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	struct FName                                       IncrementCue;                                             // 0x043C(0x0008) (Edit)
	struct FName                                       DecrementCue;                                             // 0x0444(0x0008) (Edit)
	unsigned long                                      bWrapOptions : 1;                                         // 0x044C(0x0004) (Edit)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0450(0x0030) (Edit, NeedCtorLink)
	struct FScriptDelegate                             __CreateCustomDecrementButton__Delegate;                  // 0x0480(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CreateCustomIncrementButton__Delegate;                  // 0x048C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionListBase");
		return ptr;
	}


	bool OnButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void InitializeInternalControls();
	void Initialized();
	void Created(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer);
	void OnMoveSelectionRight(int PlayerIndex);
	void OnMoveSelectionLeft(int PlayerIndex);
	bool HasNextValue();
	bool HasPrevValue();
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	class UUIOptionListButton* CreateCustomIncrementButton(class UUIOptionListBase* ButtonOwner);
	class UUIOptionListButton* CreateCustomDecrementButton(class UUIOptionListBase* ButtonOwner);
};


// Class Engine.UINumericOptionList
// 0x0014 (0x04AC - 0x0498)
class UUINumericOptionList : public UUIOptionListBase
{
public:
	struct FUIRangeData                                RangeValue;                                               // 0x0498(0x0014) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericOptionList");
		return ptr;
	}


	float GetValue(bool bPercentageValue);
	bool SetValue(float NewValue, bool bPercentageValue);
};


// Class Engine.UIOptionList
// 0x000C (0x04A4 - 0x0498)
class UUIOptionList : public UUIOptionListBase
{
public:
	int                                                CurrentIndex;                                             // 0x0498(0x0004) (Transient)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x049C(0x0008) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionList");
		return ptr;
	}


	void OnSetListIndex(class UUIAction_SetListIndex* Action);
	void SetCurrentIndex(int NewIndex);
	int GetCurrentIndex();
	void SetNextValue();
	void SetPrevValue();
	bool GetListValue(int ListIndex, struct FString* OutValue);
};


// Class Engine.UIOptionListButton
// 0x0000 (0x03E8 - 0x03E8)
class UUIOptionListButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionListButton");
		return ptr;
	}


	void UpdateButtonState(int PlayerIndex);
};


// Class Engine.UIPanel
// 0x0008 (0x03E8 - 0x03E0)
class UUIPanel : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x03E0(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	unsigned long                                      bEnforceClipping : 1;                                     // 0x03E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPanel");
		return ptr;
	}


	void SetBackgroundImage(class USurface* NewImage);
};


// Class Engine.UIPrefab
// 0x0010 (0x03EC - 0x03DC)
class UUIPrefab : public UUIObject
{
public:
	int                                                PrefabVersion;                                            // 0x03DC(0x0004) (Const)
	int                                                InternalPrefabVersion;                                    // 0x03E0(0x0004) (Const)
	class UTexture2D*                                  PrefabPreview;                                            // 0x03E4(0x0004) (Const)
	int                                                ModificationCounter;                                      // 0x03E8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefab");
		return ptr;
	}

};


// Class Engine.UIPrefabInstance
// 0x00BC (0x0498 - 0x03DC)
class UUIPrefabInstance : public UUIObject
{
public:
	class UUIPrefab*                                   SourcePrefab;                                             // 0x03DC(0x0004) (Const)
	int                                                PrefabInstanceVersion;                                    // 0x03E0(0x0004) (Const)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x03E4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.ArchetypeToInstanceMap
	int                                                PI_PackageVersion;                                        // 0x0420(0x0004) (Const)
	int                                                PI_LicenseePackageVersion;                                // 0x0424(0x0004) (Const)
	int                                                PI_DataOffset;                                            // 0x0428(0x0004) (Const)
	TArray<unsigned char>                              PI_Bytes;                                                 // 0x042C(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_CompleteObjects;                                       // 0x0438(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_ReferencedObjects;                                     // 0x0444(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             PI_SavedNames;                                            // 0x0450(0x000C) (Const, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x045C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.PI_ObjectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefabInstance");
		return ptr;
	}


	void DetachFromSourcePrefab();
};


// Class Engine.UIScene
// 0x00E8 (0x0248 - 0x0160)
class UUIScene : public UUIScreenObject
{
public:
	struct FName                                       SceneTag;                                                 // 0x0160(0x0008) (Edit)
	class UUISceneClient*                              SceneClient;                                              // 0x0168(0x0004) (Const, Transient)
	class USceneDataStore*                             SceneData;                                                // 0x016C(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x0170(0x0004) (Const, Transient)
	class UUIToolTip*                                  ActiveToolTip;                                            // 0x0174(0x0004) (Const, Transient)
	class UUIToolTip*                                  StandardToolTip;                                          // 0x0178(0x0004) (Const, Transient)
	class UClass*                                      DefaultToolTipClass;                                      // 0x017C(0x0004) (Edit, Const)
	class UUIContextMenu*                              ActiveContextMenu;                                        // 0x0180(0x0004) (Const, Transient)
	class UUIContextMenu*                              StandardContextMenu;                                      // 0x0184(0x0004) (Const, Transient)
	class UClass*                                      DefaultContextMenuClass;                                  // 0x0188(0x0004) (Edit, Const)
	TArray<struct FUIDockingNode>                      DockingStack;                                             // 0x018C(0x000C) (Const, Native, Transient)
	TArray<class UUIObject*>                           RenderStack;                                              // 0x0198(0x000C) (Const, Transient, NeedCtorLink)
	struct FMap_Mirror                                 InputSubscriptions;                                       // 0x01A4(0x003C) (Const, Native, Transient)
	int                                                LastPlayerIndex;                                          // 0x01E0(0x0004) (Transient)
	unsigned long                                      bUpdateDockingStack : 1;                                  // 0x01E4(0x0004) (Transient)
	unsigned long                                      bUpdateScenePositions : 1;                                // 0x01E4(0x0004) (Transient)
	unsigned long                                      bUpdateNavigationLinks : 1;                               // 0x01E4(0x0004) (Transient)
	unsigned long                                      bUpdatePrimitiveUsage : 1;                                // 0x01E4(0x0004) (Transient)
	unsigned long                                      bRefreshWidgetStyles : 1;                                 // 0x01E4(0x0004) (Transient)
	unsigned long                                      bRefreshStringFormatting : 1;                             // 0x01E4(0x0004) (Transient)
	unsigned long                                      bIssuedPreRenderCallback : 1;                             // 0x01E4(0x0004) (Transient)
	unsigned long                                      bResolvingScenePositions : 1;                             // 0x01E4(0x0004) (Const, Transient)
	unsigned long                                      bUsesPrimitives : 1;                                      // 0x01E4(0x0004) (Const, Transient)
	unsigned long                                      bDisplayCursor : 1;                                       // 0x01E4(0x0004) (Edit)
	unsigned long                                      bRenderParentScenes : 1;                                  // 0x01E4(0x0004) (Edit)
	unsigned long                                      bAlwaysRenderScene : 1;                                   // 0x01E4(0x0004) (Edit)
	unsigned long                                      bPauseGameWhileActive : 1;                                // 0x01E4(0x0004) (Edit)
	unsigned long                                      bExemptFromAutoClose : 1;                                 // 0x01E4(0x0004) (Edit)
	unsigned long                                      bCloseOnLevelChange : 1;                                  // 0x01E4(0x0004) (Edit)
	unsigned long                                      bSaveSceneValuesOnClose : 1;                              // 0x01E4(0x0004) (Edit)
	unsigned long                                      bEnableScenePostProcessing : 1;                           // 0x01E4(0x0004) (Edit)
	unsigned long                                      bEnableSceneDepthTesting : 1;                             // 0x01E4(0x0004) (Edit)
	unsigned long                                      bRequiresNetwork : 1;                                     // 0x01E4(0x0004) (Edit)
	unsigned long                                      bRequiresOnlineService : 1;                               // 0x01E4(0x0004) (Edit)
	unsigned long                                      bMenuLevelRestoresScene : 1;                              // 0x01E4(0x0004) (Edit)
	unsigned long                                      bFlushPlayerInput : 1;                                    // 0x01E4(0x0004) (Edit)
	unsigned long                                      bDisableWorldRendering : 1;                               // 0x01E4(0x0004) (Edit)
	class UTexture2D*                                  ScenePreview;                                             // 0x01E8(0x0004)
	TEnumAsByte<EScreenInputMode>                      SceneInputMode;                                           // 0x01EC(0x0001) (Edit)
	TEnumAsByte<ESplitscreenRenderMode>                SceneRenderMode;                                          // 0x01ED(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01EE(0x0002) MISSED OFFSET
	struct FVector2D                                   CurrentViewportSize;                                      // 0x01F0(0x0008)
	struct FName                                       SceneOpenedCue;                                           // 0x01F8(0x0008) (Edit)
	struct FName                                       SceneClosedCue;                                           // 0x0200(0x0008) (Edit)
	class UUILayerBase*                                SceneLayerRoot;                                           // 0x0208(0x0004) (Const, Transient)
	struct FScriptDelegate                             __GetSceneInputMode__Delegate;                            // 0x020C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                             // 0x0218(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                           // 0x0224(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                            // 0x0230(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;                // 0x023C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScene");
		return ptr;
	}


	void AnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq);
	void LogCurrentState(int Indent);
	void LogRenderBounds(int Indent);
	void LogDockingStack();
	bool CloseScene(class UUIScene* SceneToClose, bool bSkipKismetNotify, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	class UUIScene* OpenScene(class UUIScene* SceneToOpen, TEnumAsByte<ESceneTransitionAnim> SceneAnim, const struct FScriptDelegate& SceneDelegate);
	void NotifyLinkStatusChanged(bool bConnected);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void NotifyGameSessionEnded();
	void SceneCreated(class UUIScene* CreatedScene);
	void SetVisibility(bool bIsVisible);
	void SetInputMask(unsigned char NewInputMask, bool bRecurse);
	void CalculateInputMask();
	void SceneSavedForRestore();
	void SceneRestored();
	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	void SceneDeactivated();
	void SceneActivated(bool bInitialActivation);
	bool SetActiveContextMenu(class UUIContextMenu* NewContextMenu, int PlayerIndex);
	class UUIContextMenu* GetActiveContextMenu();
	bool SetActiveToolTip(class UUIToolTip* NewToolTip);
	class UUIToolTip* GetActiveToolTip();
	class UUIContextMenu* GetDefaultContextMenu();
	class UUIToolTip* GetDefaultToolTip();
	bool IsSceneActive(bool bTopmostScene);
	class AWorldInfo* GetWorldInfo();
	void SetSceneInputMode(TEnumAsByte<EScreenInputMode> NewInputMode);
	class UUIScene* GetPreviousScene(bool bRequireMatchingPlayerOwner);
	class UUIDataStore* ResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner);
	void UnbindSubscribers();
	void SaveSceneDataValues(bool bUnbindSubscribers);
	void LoadSceneDataValues();
	class USceneDataStore* GetSceneDataStore();
	void ResolveScenePositions();
	void RebuildDockingStack();
	void ForceImmediateSceneUpdate();
	bool ShouldModulateBackgroundAlpha(float* AlphaModulationPercent);
	void OnTopSceneChanged(class UUIScene* NewTopScene);
	void OnSceneDeactivated(class UUIScene* DeactivatedScene);
	void OnSceneActivated(class UUIScene* ActivatedScene, bool bInitialActivation);
	TEnumAsByte<EScreenInputMode> GetSceneInputMode();
};


// Class Engine.UIPrefabScene
// 0x0004 (0x024C - 0x0248)
class UUIPrefabScene : public UUIScene
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0248(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefabScene");
		return ptr;
	}

};


// Class Engine.UIProgressBar
// 0x0059 (0x0435 - 0x03DC)
class UUIProgressBar : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x03E0(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           FillImageComponent;                                       // 0x03E4(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           OverlayImageComponent;                                    // 0x03E8(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	unsigned long                                      bDrawOverlay : 1;                                         // 0x03EC(0x0004) (Edit)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x03F0(0x0030) (Edit, EditConst, NeedCtorLink)
	struct FUIRangeData                                ProgressBarValue;                                         // 0x0420(0x0014) (Edit)
	TEnumAsByte<EUIOrientation>                        ProgressBarOrientation;                                   // 0x0434(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIProgressBar");
		return ptr;
	}


	void SetOverlayImage(class USurface* NewImage);
	void SetFillImage(class USurface* NewImage);
	void SetBackgroundImage(class USurface* NewImage);
	float GetValue(bool bPercentageValue);
	bool SetValue(float NewValue, bool bPercentageValue);
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	void OnGetProgressBarValue(class UUIAction_GetProgressBarValue* Action);
	void OnSetProgressBarValue(class UUIAction_SetProgressBarValue* Action);
};


// Class Engine.UIResourceDataProvider
// 0x0004 (0x0068 - 0x0064)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x0064(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIResourceDataProvider");
		return ptr;
	}


	bool IsProviderDisabled();
};


// Class Engine.UISafeRegionPanel
// 0x0014 (0x03F4 - 0x03E0)
class UUISafeRegionPanel : public UUIContainer
{
public:
	TEnumAsByte<ESafeRegionType>                       RegionType;                                               // 0x03E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	TArray<float>                                      RegionPercentages;                                        // 0x03E4(0x000C) (Edit, Config, NeedCtorLink, EditInline)
	unsigned long                                      bForce4x3AspectRatio : 1;                                 // 0x03F0(0x0004) (Edit)
	unsigned long                                      bUseFullRegionIn4x3 : 1;                                  // 0x03F0(0x0004) (Edit)
	unsigned long                                      bForce16x9AspectRatio : 1;                                // 0x03F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISafeRegionPanel");
		return ptr;
	}

};


// Class Engine.UIScrollbar
// 0x00CC (0x04A8 - 0x03DC)
class UUIScrollbar : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x03DC(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIScrollbarButton*                          IncrementButton;                                          // 0x03E0(0x0004) (Const)
	class UUIScrollbarButton*                          DecrementButton;                                          // 0x03E4(0x0004) (Const)
	class UUIScrollbarMarkerButton*                    MarkerButton;                                             // 0x03E8(0x0004) (Const)
	struct FUIStyleReference                           IncrementStyle;                                           // 0x03EC(0x0020)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x040C(0x0020)
	struct FUIStyleReference                           MarkerStyle;                                              // 0x042C(0x0020)
	float                                              NudgeValue;                                               // 0x044C(0x0004) (Transient)
	float                                              NudgeMultiplier;                                          // 0x0450(0x0004) (Edit)
	float                                              NudgePercent;                                             // 0x0454(0x0004) (Transient)
	float                                              MarkerPosPercent;                                         // 0x0458(0x0004) (Transient)
	float                                              MarkerSizePercent;                                        // 0x045C(0x0004) (Transient)
	struct FUIScreenValue_Extent                       BarWidth;                                                 // 0x0460(0x0008) (Edit)
	struct FUIScreenValue_Extent                       MinimumMarkerSize;                                        // 0x0468(0x0008) (Edit)
	struct FUIScreenValue_Extent                       ButtonsExtent;                                            // 0x0470(0x0008) (Edit)
	TEnumAsByte<EUIOrientation>                        ScrollbarOrientation;                                     // 0x0478(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	unsigned long                                      bAddCornerPadding : 1;                                    // 0x047C(0x0004) (Edit)
	unsigned long                                      bInitializeMarker : 1;                                    // 0x047C(0x0004) (Transient)
	struct FUIScreenValue_Position                     MousePosition;                                            // 0x0480(0x000C) (Transient)
	float                                              MousePositionDelta;                                       // 0x048C(0x0004) (Transient)
	struct FScriptDelegate                             __OnScrollActivity__Delegate;                             // 0x0490(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClickedScrollZone__Delegate;                          // 0x049C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbar");
		return ptr;
	}


	float GetMarkerSizePercent();
	float GetMarkerPosPercent();
	float GetNudgePercent();
	float GetNudgeValue();
	void PostInitialize();
	void Initialized();
	void DragScroll(class UUIScrollbarMarkerButton* Sender, int PlayerIndex);
	void DragScrollEnd(class UUIScreenObject* Sender, int PlayerIndex);
	void DragScrollBegin(class UUIScreenObject* Sender, int PlayerIndex);
	void ScrollDecrement(class UUIScreenObject* Sender, int PlayerIndex);
	void ScrollIncrement(class UUIScreenObject* Sender, int PlayerIndex);
	void EnableCornerPadding(bool FlagValue);
	void SetNudgeSizePixels(float NudgePixels);
	void SetNudgeSizePercent(float NudgePercentage);
	void SetMarkerPosition(float PositionPercentage);
	void SetMarkerSize(float SizePercentage);
	float GetScrollZoneWidth();
	float GetScrollZoneExtent(float* ScrollZoneStart);
	float GetMarkerButtonPosition();
	void OnClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex);
	bool OnScrollActivity(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed);
};


// Class Engine.UIScrollbarButton
// 0x0000 (0x03E8 - 0x03E8)
class UUIScrollbarButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbarButton");
		return ptr;
	}

};


// Class Engine.UIScrollbarMarkerButton
// 0x000C (0x03F4 - 0x03E8)
class UUIScrollbarMarkerButton : public UUIScrollbarButton
{
public:
	struct FScriptDelegate                             __OnButtonDragged__Delegate;                              // 0x03E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbarMarkerButton");
		return ptr;
	}


	void OnButtonDragged(class UUIScrollbarMarkerButton* Sender, int PlayerIndex);
};


// Class Engine.UIScrollFrame
// 0x0038 (0x0418 - 0x03E0)
class UUIScrollFrame : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           StaticBackgroundImage;                                    // 0x03E0(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UUIScrollbar*                                ScrollbarHorizontal;                                      // 0x03E4(0x0004) (Const, DuplicateTransient)
	class UUIScrollbar*                                ScrollbarVertical;                                        // 0x03E8(0x0004) (Const, DuplicateTransient)
	struct FUIScreenValue_Extent                       HorizontalClientRegion;                                   // 0x03EC(0x0008) (Edit, Transient, EditConst, EditInline)
	struct FUIScreenValue_Extent                       VerticalClientRegion;                                     // 0x03F4(0x0008) (Edit, Transient, EditConst, EditInline)
	struct FVector2D                                   ClientRegionPosition;                                     // 0x03FC(0x0008) (Transient)
	float                                              FrameBounds[0x4];                                         // 0x0404(0x0004) (Transient)
	unsigned long                                      bRefreshScrollbars : 1;                                   // 0x0414(0x0004) (Const, Transient)
	unsigned long                                      bRecalculateClientRegion : 1;                             // 0x0414(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollFrame");
		return ptr;
	}


	void OnApplyScrolling(class UUIAction_ApplyScrolling* Action);
	void ScrollZoneClicked(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex);
	void OnChildRepositioned(class UUIScreenObject* Sender);
	void RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
	float GetVisibleRegionPercentage(TEnumAsByte<EUIOrientation> Orientation);
	void GetClipRegion(float* MinX, float* MinY, float* MaxX, float* MaxY);
	struct FVector2D GetClientRegionSizeVector();
	struct FVector2D GetClientRegionPositionVector();
	float GetClientRegionSize(TEnumAsByte<EUIOrientation> Orientation);
	float GetClientRegionPosition(TEnumAsByte<EUIOrientation> Orientation);
	bool SetClientRegionPositionVector(const struct FVector2D& NewPosition);
	bool SetClientRegionPosition(TEnumAsByte<EUIOrientation> Orientation, float NewPosition);
	bool ScrollRegion(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed);
	void ReapplyFormatting(bool bImmediately);
	void RefreshScrollbars(bool bImmediately);
};


// Class Engine.UISlider
// 0x0088 (0x0464 - 0x03DC)
class UUISlider : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03DC(0x0004) (Const, Native, NoExport)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x03E0(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           SliderBarImageComponent;                                  // 0x03E4(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           MarkerImageComponent;                                     // 0x03E8(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x03EC(0x0030) (Edit, EditConst, NeedCtorLink)
	class UUIComp_DrawStringSlider*                    CaptionRenderComponent;                                   // 0x041C(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	struct FUIRangeData                                SliderValue;                                              // 0x0420(0x0014) (Edit)
	unsigned long                                      bRenderCaption : 1;                                       // 0x0434(0x0004) (Edit)
	TEnumAsByte<EUIOrientation>                        SliderOrientation;                                        // 0x0438(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	struct FUIScreenValue_Extent                       BarSize;                                                  // 0x043C(0x0008) (Edit)
	struct FUIScreenValue_Extent                       MarkerHeight;                                             // 0x0444(0x0008) (Edit)
	struct FUIScreenValue_Extent                       MarkerWidth;                                              // 0x044C(0x0008) (Edit)
	struct FName                                       IncrementCue;                                             // 0x0454(0x0008) (Edit)
	struct FName                                       DecrementCue;                                             // 0x045C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISlider");
		return ptr;
	}


	void OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void SetMarkerImage(class USurface* NewImage);
	void SetBarImage(class USurface* NewImage);
	void SetBackgroundImage(class USurface* NewImage);
	float GetValue(bool bPercentageValue);
	bool SetValue(float NewValue, bool bPercentageValue);
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
};


// Class Engine.UIState_Active
// 0x0000 (0x0066 - 0x0066)
class UUIState_Active : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Active");
		return ptr;
	}

};


// Class Engine.UIState_Focused
// 0x0000 (0x0066 - 0x0066)
class UUIState_Focused : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Focused");
		return ptr;
	}


	bool ActivateState(class UUIScreenObject* Target, int PlayerIndex);
};


// Class Engine.UIState_Pressed
// 0x0000 (0x0066 - 0x0066)
class UUIState_Pressed : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Pressed");
		return ptr;
	}

};


// Class Engine.UIState_TargetedTab
// 0x0000 (0x0066 - 0x0066)
class UUIState_TargetedTab : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_TargetedTab");
		return ptr;
	}


	bool IsWidgetClassSupported(class UClass* WidgetClass);
};


// Class Engine.UIStringRenderer
// 0x0000 (0x003C - 0x003C)
class UUIStringRenderer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStringRenderer");
		return ptr;
	}


	void SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical);
};


// Class Engine.UIStyle_Data
// 0x0028 (0x0064 - 0x003C)
class UUIStyle_Data : public UUIRoot
{
public:
	struct FString                                     UIEditorControlClass;                                     // 0x003C(0x000C) (Const, NeedCtorLink)
	struct FLinearColor                                StyleColor;                                               // 0x0048(0x0010)
	float                                              StylePadding[0x2];                                        // 0x0058(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bDirty : 1;                                               // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Data");
		return ptr;
	}

};


// Class Engine.UIStyle_Combo
// 0x0040 (0x00A4 - 0x0064)
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                               // 0x0064(0x0020)
	struct FStyleDataReference                         TextStyle;                                                // 0x0084(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Combo");
		return ptr;
	}

};


// Class Engine.UIStyle_Image
// 0x0034 (0x0098 - 0x0064)
class UUIStyle_Image : public UUIStyle_Data
{
public:
	class USurface*                                    DefaultImage;                                             // 0x0064(0x0004) (Edit)
	struct FTextureCoordinates                         Coordinates;                                              // 0x0068(0x0010) (Edit)
	struct FUIImageAdjustmentData                      AdjustmentType[0x2];                                      // 0x0078(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Image");
		return ptr;
	}

};


// Class Engine.UIStyle_Text
// 0x0024 (0x0088 - 0x0064)
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                                // 0x0064(0x0004)
	struct FUITextAttributes                           Attributes;                                               // 0x0068(0x0004)
	TEnumAsByte<EUIAlignment>                          Alignment[0x2];                                           // 0x006C(0x0001)
	TEnumAsByte<ETextClipMode>                         ClipMode;                                                 // 0x006E(0x0001)
	TEnumAsByte<EUIAlignment>                          ClipAlignment;                                            // 0x006F(0x0001)
	struct FTextAutoScaleValue                         AutoScaling;                                              // 0x0070(0x0008)
	struct FVector2D                                   Scale;                                                    // 0x0078(0x0008)
	struct FVector2D                                   SpacingAdjust;                                            // 0x0080(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Text");
		return ptr;
	}

};


// Class Engine.UIStyleResolver
// 0x0000 (0x003C - 0x003C)
class UUIStyleResolver : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyleResolver");
		return ptr;
	}


	bool NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName);
	bool SetStyleResolverTag(const struct FName& NewResolverTag);
	struct FName GetStyleResolverTag();
};


// Class Engine.UITabButton
// 0x0010 (0x0430 - 0x0420)
class UUITabButton : public UUILabelButton
{
public:
	class UUITabPage*                                  TabPage;                                                  // 0x0420(0x0004) (Edit, EditConst, EditInline)
	struct FScriptDelegate                             __IsActivationAllowed__Delegate;                          // 0x0424(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabButton");
		return ptr;
	}


	void OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	class UUITabPage* GetTabPage();
	bool IsTargeted(int PlayerIndex, int* StateIndex);
	bool CanActivateButton(int PlayerIndex);
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);
	void RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
	bool IsActivationAllowed(class UUITabButton* Sender, int PlayerIndex);
};


// Class Engine.UITabControl
// 0x00A0 (0x047C - 0x03DC)
class UUITabControl : public UUIObject
{
public:
	TArray<class UUITabPage*>                          Pages;                                                    // 0x03DC(0x000C) (Edit, EditFixedSize, EditConst, NeedCtorLink, EditInline)
	class UUITabPage*                                  ActivePage;                                               // 0x03E8(0x0004) (Edit, Transient, EditConst, EditInline)
	class UUITabPage*                                  PendingPage;                                              // 0x03EC(0x0004) (Edit, Transient, EditConst, EditInline)
	TEnumAsByte<EUIWidgetFace>                         TabDockFace;                                              // 0x03F0(0x0001) (Edit)
	TEnumAsByte<EUITabAutosizeType>                    TabSizeMode;                                              // 0x03F1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F2(0x0002) MISSED OFFSET
	struct FUIScreenValue_Extent                       TabButtonSize;                                            // 0x03F4(0x0008) (Edit)
	struct FUIScreenValue_Extent                       TabButtonPadding[0x2];                                    // 0x03FC(0x0008) (Edit)
	struct FUIStyleReference                           TabButtonBackgroundStyle;                                 // 0x040C(0x0020)
	struct FUIStyleReference                           TabButtonCaptionStyle;                                    // 0x042C(0x0020)
	unsigned long                                      bAllowPagePreviews : 1;                                   // 0x044C(0x0004) (Edit, Config)
	unsigned long                                      bUpdateLayout : 1;                                        // 0x044C(0x0004) (Transient)
	struct FName                                       ActivateTabCue;                                           // 0x0450(0x0008) (Edit)
	struct FScriptDelegate                             __OnPageActivated__Delegate;                              // 0x0458(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPageInserted__Delegate;                               // 0x0464(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPageRemoved__Delegate;                                // 0x0470(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabControl");
		return ptr;
	}


	bool TabButtonClicked(class UUIScreenObject* EventObject, int PlayerIndex);
	bool ProcessInputKey(struct FInputEventParameters* EventParms);
	int FindPageIndexByPageRef(class UUITabPage* SearchPage);
	int FindPageIndexByButton(class UUITabButton* SearchButton);
	int FindPageIndexByCaption(const struct FString& PageCaption, bool bMarkupString);
	bool ActivateBestTab(int PlayerIndex, bool bFocusPage, int StartIndex);
	bool ActivatePageByCaption(const struct FString& PageCaption, int PlayerIndex, bool bFocusPage);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
	void PostInitialize();
	bool EnableTabPage(class UUITabPage* PageToEnable, int PlayerIndex, bool bEnablePage, bool bActivatePage, bool bFocusPage);
	bool ActivatePreviousPage(int PlayerIndex, bool bFocusPage, bool bAllowWrapping);
	bool ActivateNextPage(int PlayerIndex, bool bFocusPage, bool bAllowWrapping);
	bool ActivatePage(class UUITabPage* PageToActivate, int PlayerIndex, bool bFocusPage);
	bool ReplacePage(class UUITabPage* ExistingPage, class UUITabPage* NewPage, int PlayerIndex, bool bFocusPage);
	bool RemovePage(class UUITabPage* PageToRemove, int PlayerIndex);
	bool InsertPage(class UUITabPage* PageToInsert, int PlayerIndex, int InsertIndex, bool bActivateImmediately);
	void PrivateActivatePage(class UUITabPage* PageToActivate, int PlayerIndex);
	class UUITabPage* CreateTabPage(class UClass* TabPageClass, class UUITabPage* PagePrefab);
	class UUITabButton* FindTargetedTab(int PlayerIndex);
	class UUITabPage* GetPageAtIndex(int PageIndex);
	int GetPageCount();
	void RequestLayoutUpdate();
	void OnPageRemoved(class UUITabControl* Sender, class UUITabPage* OldPage, int PlayerIndex);
	void OnPageInserted(class UUITabControl* Sender, class UUITabPage* NewPage, int PlayerIndex);
	void OnPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex);
};


// Class Engine.UITabPage
// 0x009C (0x047C - 0x03E0)
class UUITabPage : public UUIContainer
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                           // 0x03E0(0x0004) (Const, Native, NoExport)
	class UClass*                                      ButtonClass;                                              // 0x03E4(0x0004) (Const)
	class UUITabButton*                                TabButton;                                                // 0x03E8(0x0004)
	struct FUIDataStoreBinding                         ButtonCaption;                                            // 0x03EC(0x0030) (Edit, NeedCtorLink)
	struct FUIDataStoreBinding                         ButtonToolTip;                                            // 0x041C(0x0030) (Edit, NeedCtorLink)
	struct FUIDataStoreBinding                         PageDescription;                                          // 0x044C(0x0030) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabPage");
		return ptr;
	}


	bool IsActivePage();
	void SetTabCaption(const struct FString& NewButtonMarkup);
	void OnActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	bool CanActivatePage(int PlayerIndex);
	void AddedToTabControl(class UUITabControl* TabControl);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	class UUITabButton* GetTabButton(class UUITabControl* TabControl);
	class UUITabControl* GetOwnerTabControl();
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);
	bool LinkToTabButton(class UUITabButton* NewButton, class UUITabControl* TabControl);
	class UUITabButton* STATIC_CreateTabButton(class UUITabControl* TabControl);
	bool ActivatePage(int PlayerIndex, bool bActivate, bool bTakeFocus);
};


// Class Engine.UITexture
// 0x0090 (0x00CC - 0x003C)
class UUITexture : public UUIRoot
{
public:
	struct FUICombinedStyleData                        ImageStyleData;                                           // 0x003C(0x008C) (Transient)
	class USurface*                                    ImageTexture;                                             // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITexture");
		return ptr;
	}


	class USurface* GetSurface();
	bool HasValidStyleData();
	void SetImageStyle(class UUIStyle_Image* NewImageStyle);
};


// Class Engine.UIToggleButton
// 0x003C (0x045C - 0x0420)
class UUIToggleButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         ValueDataSource;                                          // 0x0420(0x0030) (Edit, NeedCtorLink)
	unsigned long                                      bIsChecked : 1;                                           // 0x0450(0x0004) (Edit)
	class UUIComp_DrawString*                          CheckedStringRenderComponent;                             // 0x0454(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawImage*                           CheckedBackgroundImageComponent;                          // 0x0458(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIToggleButton");
		return ptr;
	}


	void OnSetBoolValue(class UUIAction_SetBoolValue* Action);
	bool ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void SetValue(bool bShouldBeChecked, int PlayerIndex);
	bool IsChecked();
	void SetCaption(const struct FString& NewText);
};


// Class Engine.UIToolTip
// 0x002C (0x0448 - 0x041C)
class UUIToolTip : public UUILabel
{
public:
	unsigned long                                      bPendingPositionUpdate : 1;                               // 0x041C(0x0004) (Const, Transient)
	unsigned long                                      bResolveToolTipPosition : 1;                              // 0x041C(0x0004) (Const, Transient)
	unsigned long                                      bFollowCursor : 1;                                        // 0x041C(0x0004) (Edit)
	unsigned long                                      bAutoHideOnInput : 1;                                     // 0x041C(0x0004) (Edit)
	float                                              SecondsActive;                                            // 0x0420(0x0004) (Const, Transient)
	struct FScriptDelegate                             __ActivateToolTip__Delegate;                              // 0x0424(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DeactivateToolTip__Delegate;                            // 0x0430(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanShowToolTip__Delegate;                               // 0x043C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIToolTip");
		return ptr;
	}


	void UpdateToolTipPosition();
	bool EndTracking();
	class UUIToolTip* BeginTracking();
	bool CanShowToolTip(class UUIToolTip* Sender);
	bool DeactivateToolTip();
	class UUIToolTip* ActivateToolTip(class UUIToolTip* Sender);
};


// Class Engine.SeqVar_UIRange
// 0x0014 (0x00A0 - 0x008C)
class USeqVar_UIRange : public USequenceVariable
{
public:
	struct FUIRangeData                                RangeValue;                                               // 0x008C(0x0014) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_UIRange");
		return ptr;
	}


	bool IsValidLevelSequenceObject();
};


// Class Engine.UIAction
// 0x0008 (0x00E4 - 0x00DC)
class UUIAction : public USequenceAction
{
public:
	int                                                GamepadID;                                                // 0x00DC(0x0004) (Transient, NoImport)
	unsigned long                                      bAutoTargetOwner : 1;                                     // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
	bool IsValidLevelSequenceObject();
	class UUIScene* GetOwnerScene();
	class UUIScreenObject* GetOwner();
};


// Class Engine.UIAction_ActivateLevelEvent
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_ActivateLevelEvent : public UUIAction
{
public:
	struct FName                                       EventName;                                                // 0x00E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ActivateLevelEvent");
		return ptr;
	}

};


// Class Engine.UIAction_ChangeState
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_ChangeState : public UUIAction
{
public:
	class UClass*                                      StateType;                                                // 0x00E4(0x0004) (Edit)
	class UUIState*                                    TargetState;                                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      bStateChangeFailed : 1;                                   // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ChangeState");
		return ptr;
	}

};


// Class Engine.UIAction_ActivateState
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ActivateState : public UUIAction_ChangeState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ActivateState");
		return ptr;
	}

};


// Class Engine.UIAction_DataStore
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_DataStore : public UUIAction
{
public:
	int                                                BindingIndex;                                             // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_DataStore");
		return ptr;
	}

};


// Class Engine.UIAction_DataStoreField
// 0x0010 (0x00F8 - 0x00E8)
class UUIAction_DataStoreField : public UUIAction_DataStore
{
public:
	class UUIScene*                                    TargetScene;                                              // 0x00E8(0x0004) (Edit)
	struct FString                                     DataFieldMarkupString;                                    // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_DataStoreField");
		return ptr;
	}

};


// Class Engine.UIAction_AddDataField
// 0x0005 (0x00FD - 0x00F8)
class UUIAction_AddDataField : public UUIAction_DataStoreField
{
public:
	unsigned long                                      bPersistentField : 1;                                     // 0x00F8(0x0004) (Edit)
	TEnumAsByte<EUIDataProviderFieldType>              FieldType;                                                // 0x00FC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_AddDataField");
		return ptr;
	}

};


// Class Engine.UIAction_Scene
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_Scene : public UUIAction
{
public:
	class UUIScene*                                    Scene;                                                    // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_Scene");
		return ptr;
	}


	bool IsValidLevelSequenceObject();
};


// Class Engine.UIAction_CloseScene
// 0x0000 (0x00E8 - 0x00E8)
class UUIAction_CloseScene : public UUIAction_Scene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_CloseScene");
		return ptr;
	}

};


// Class Engine.UIAction_CreateOnlineGame
// 0x0014 (0x00F8 - 0x00E4)
class UUIAction_CreateOnlineGame : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                            // 0x00E4(0x0008) (Edit)
	struct FString                                     MapName;                                                  // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_CreateOnlineGame");
		return ptr;
	}

};


// Class Engine.UIAction_DeactivateState
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_DeactivateState : public UUIAction_ChangeState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_DeactivateState");
		return ptr;
	}

};


// Class Engine.UIAction_FindOnlineGames
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_FindOnlineGames : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                            // 0x00E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_FindOnlineGames");
		return ptr;
	}

};


// Class Engine.UIAction_GetCellValue
// 0x003C (0x0124 - 0x00E8)
class UUIAction_GetCellValue : public UUIAction_DataStore
{
public:
	int                                                CollectionIndex;                                          // 0x00E8(0x0004) (Edit)
	struct FName                                       CellFieldName;                                            // 0x00EC(0x0008) (Edit)
	struct FString                                     CellFieldMarkup;                                          // 0x00F4(0x000C) (NeedCtorLink)
	struct FString                                     CellFieldStringValue;                                     // 0x0100(0x000C) (NeedCtorLink)
	class USurface*                                    CellFieldImageValue;                                      // 0x010C(0x0004)
	struct FUIRangeData                                CellFieldRangeValue;                                      // 0x0110(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetCellValue");
		return ptr;
	}

};


// Class Engine.UIAction_GetDatafieldValue
// 0x0030 (0x0128 - 0x00F8)
class UUIAction_GetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                                     // 0x00F8(0x000C) (NeedCtorLink)
	class USurface*                                    DataFieldImageValue;                                      // 0x0104(0x0004)
	TArray<int>                                        DataFieldArrayValue;                                      // 0x0108(0x000C) (NeedCtorLink)
	struct FUIRangeData                                DataFieldRangeValue;                                      // 0x0114(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetDatafieldValue");
		return ptr;
	}

};


// Class Engine.UIAction_GetLastFocused
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_GetLastFocused : public UUIAction
{
public:
	class UUIScreenObject*                             Parent;                                                   // 0x00E4(0x0004) (Edit)
	class UUIScreenObject*                             LastFocused;                                              // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetLastFocused");
		return ptr;
	}

};


// Class Engine.UIAction_GetValue
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_GetValue : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetValue");
		return ptr;
	}

};


// Class Engine.UIAction_GetListIndex
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_GetListIndex : public UUIAction_GetValue
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetListIndex");
		return ptr;
	}

};


// Class Engine.UIAction_GetListItemCount
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_GetListItemCount : public UUIAction
{
public:
	int                                                ItemCount;                                                // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetListItemCount");
		return ptr;
	}

};


// Class Engine.UIAction_GetLoggedInPlayerCount
// 0x0010 (0x00F4 - 0x00E4)
class UUIAction_GetLoggedInPlayerCount : public UUIAction
{
public:
	int                                                TotalLoggedIn;                                            // 0x00E4(0x0004)
	int                                                NumOnlineEnabled;                                         // 0x00E8(0x0004)
	int                                                NumLocalOnly;                                             // 0x00EC(0x0004)
	int                                                MaxPlayers;                                               // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetLoggedInPlayerCount");
		return ptr;
	}


	void GetLoginStatus();
};


// Class Engine.UIAction_GetNATType
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_GetNATType : public UUIAction
{
public:
	unsigned long                                      bAlwaysOpen : 1;                                          // 0x00E4(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetNATType");
		return ptr;
	}


	bool GetNATType(TEnumAsByte<ENATType>* OutNATType);
};


// Class Engine.UIAction_GetPrivilegeLevel
// 0x0005 (0x00E9 - 0x00E4)
class UUIAction_GetPrivilegeLevel : public UUIAction
{
public:
	int                                                PlayerId;                                                 // 0x00E4(0x0004) (Edit)
	TEnumAsByte<EFeaturePrivilegeMode>                 PrivMode;                                                 // 0x00E8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetPrivilegeLevel");
		return ptr;
	}


	TEnumAsByte<EFeaturePrivilegeLevel> GetPrivilegeLevel(int ControllerId);
};


// Class Engine.UIAction_JoinOnlineGame
// 0x0010 (0x00F4 - 0x00E4)
class UUIAction_JoinOnlineGame : public UUIAction
{
public:
	struct FOnlineGameSearchResult                     PendingGameJoin;                                          // 0x00E4(0x0008)
	class AWorldInfo*                                  CachedWorldInfo;                                          // 0x00EC(0x0004)
	unsigned long                                      bIsDone : 1;                                              // 0x00F0(0x0004)
	unsigned long                                      bResult : 1;                                              // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_JoinOnlineGame");
		return ptr;
	}


	struct FString BuildJoinURL(const struct FString& ResolvedConnectionURL);
	void OnJoinGameComplete(bool bWasSuccessful);
	void JoinOnlineGame(unsigned char ControllerId, const struct FOnlineGameSearchResult& GameToJoin, class AWorldInfo* InWorldInfo);
};


// Class Engine.UIAction_MoveListItem
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_MoveListItem : public UUIAction
{
public:
	int                                                ElementIndex;                                             // 0x00E4(0x0004) (Edit)
	int                                                MoveCount;                                                // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_MoveListItem");
		return ptr;
	}

};


// Class Engine.UIAction_OpenScene
// 0x0004 (0x00EC - 0x00E8)
class UUIAction_OpenScene : public UUIAction_Scene
{
public:
	class UUIScene*                                    OpenedScene;                                              // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_OpenScene");
		return ptr;
	}

};


// Class Engine.UIAction_PlayUISoundCue
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_PlayUISoundCue : public UUIAction
{
public:
	struct FString                                     SoundCueName;                                             // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_PlayUISoundCue");
		return ptr;
	}

};


// Class Engine.UIAction_PublishValue
// 0x0000 (0x00E8 - 0x00E8)
class UUIAction_PublishValue : public UUIAction_DataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_PublishValue");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIAction_RefreshBindingValue
// 0x0000 (0x00E8 - 0x00E8)
class UUIAction_RefreshBindingValue : public UUIAction_DataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_RefreshBindingValue");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIAction_RefreshStats
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_RefreshStats : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_RefreshStats");
		return ptr;
	}

};


// Class Engine.UIAction_SaveProfileSettings
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_SaveProfileSettings : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                              // 0x00E4(0x0004)
	unsigned long                                      bWroteProfile : 1;                                        // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SaveProfileSettings");
		return ptr;
	}


	void OnProfileWriteComplete(bool bWasSuccessful);
	void ClearDelegate();
	void RegisterDelegate();
};


// Class Engine.UIAction_SetDatafieldValue
// 0x0034 (0x012C - 0x00F8)
class UUIAction_SetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                                     // 0x00F8(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    DataFieldImageValue;                                      // 0x0104(0x0004) (Edit)
	TArray<int>                                        DataFieldArrayValue;                                      // 0x0108(0x000C) (Edit, NeedCtorLink)
	struct FUIRangeData                                DataFieldRangeValue;                                      // 0x0114(0x0014) (Edit)
	unsigned long                                      bCommitValueImmediately : 1;                              // 0x0128(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetDatafieldValue");
		return ptr;
	}

};


// Class Engine.UIAction_SetFocus
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_SetFocus : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetFocus");
		return ptr;
	}

};


// Class Engine.UIAction_ShowDeviceSelectionUI
// 0x0018 (0x00FC - 0x00E4)
class UUIAction_ShowDeviceSelectionUI : public UUIAction
{
public:
	int                                                SizeNeeded;                                               // 0x00E4(0x0004) (Edit)
	unsigned long                                      bForceShowUI : 1;                                         // 0x00E8(0x0004) (Edit)
	unsigned long                                      bIsDone : 1;                                              // 0x00E8(0x0004)
	unsigned long                                      bResult : 1;                                              // 0x00E8(0x0004)
	int                                                DeviceID;                                                 // 0x00EC(0x0004) (Edit)
	struct FString                                     DeviceName;                                               // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowDeviceSelectionUI");
		return ptr;
	}


	void OnDeviceSelectionComplete(bool bWasSuccessful);
	void SelectDevice();
	void WriteToVariables();
};


// Class Engine.UIAction_ShowGamercardForServerHost
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowGamercardForServerHost : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowGamercardForServerHost");
		return ptr;
	}

};


// Class Engine.UIAction_ShowKeyboardUI
// 0x0040 (0x0124 - 0x00E4)
class UUIAction_ShowKeyboardUI : public UUIAction
{
public:
	struct FString                                     TitleText;                                                // 0x00E4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DefaultText;                                              // 0x00F0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionText;                                          // 0x00FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bShouldValidate : 1;                                      // 0x0108(0x0004) (Edit)
	unsigned long                                      bIsPassword : 1;                                          // 0x0108(0x0004) (Edit)
	unsigned long                                      bIsDone : 1;                                              // 0x0108(0x0004)
	struct FString                                     StringReturnValue;                                        // 0x010C(0x000C) (NeedCtorLink)
	struct FString                                     TempStringReturnValue;                                    // 0x0118(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowKeyboardUI");
		return ptr;
	}


	void OnKeyboardInputDone(bool bWasSuccessful);
	void ReadKeyboardInput();
};


// Class Engine.UIAction_ShowLoginUI
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_ShowLoginUI : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                              // 0x00E4(0x0004)
	unsigned long                                      bShowOnlineOnly : 1;                                      // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowLoginUI");
		return ptr;
	}


	void OnLoginCancelled();
	void OnLoginChanged();
	void ShowUI();
};


// Class Engine.UIEvent
// 0x0024 (0x0118 - 0x00F4)
class UUIEvent : public USequenceEvent
{
public:
	class UUIScreenObject*                             EventOwner;                                               // 0x00F4(0x0004) (NoImport)
	class UObject*                                     EventActivator;                                           // 0x00F8(0x0004)
	struct FString                                     Description;                                              // 0x00FC(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bShouldRegisterEvent : 1;                                 // 0x0108(0x0004)
	unsigned long                                      bPropagateEvent : 1;                                      // 0x0108(0x0004)
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                         // 0x010C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent");
		return ptr;
	}


	bool ShouldAlwaysInstance();
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
	bool IsValidLevelSequenceObject();
	bool ActivateUIEvent(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate);
	bool ConditionalActivateUIEvent(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate);
	bool CanBeActivated(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate);
	class UUIScene* GetOwnerScene();
	class UUIScreenObject* GetOwner();
	bool AllowEventActivation(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate);
};


// Class Engine.UIEvent_ValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ValueChanged : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ValueChanged");
		return ptr;
	}

};


// Class Engine.UIEvent_CheckValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_CheckValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_CheckValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_ComboboxValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ComboboxValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ComboboxValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_ListIndexChanged
// 0x0008 (0x0120 - 0x0118)
class UUIEvent_ListIndexChanged : public UUIEvent_ValueChanged
{
public:
	int                                                PreviousIndex;                                            // 0x0118(0x0004) (Transient)
	int                                                CurrentIndex;                                             // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ListIndexChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_MetaObject
// 0x0004 (0x011C - 0x0118)
class UUIEvent_MetaObject : public UUIEvent
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0118(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_MetaObject");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_NumericOptionListValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_NumericOptionListValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_NumericOptionListValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_OnClick
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnClick : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnClick");
		return ptr;
	}

};


// Class Engine.UIEvent_OnDoubleClick
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnDoubleClick : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnDoubleClick");
		return ptr;
	}

};


// Class Engine.UIEvent_State
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_State : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_State");
		return ptr;
	}

};


// Class Engine.UIEvent_OnEnterState
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnEnterState : public UUIEvent_State
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnEnterState");
		return ptr;
	}

};


// Class Engine.UIEvent_OnLeaveState
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnLeaveState");
		return ptr;
	}

};


// Class Engine.UIEvent_OptionListValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OptionListValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OptionListValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_ProcessInput
// 0x003C (0x0154 - 0x0118)
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                                // 0x0118(0x003C) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ProcessInput");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_ProgressBarValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ProgressBarValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ProgressBarValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_Scene
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_Scene : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_Scene");
		return ptr;
	}

};


// Class Engine.UIEvent_SliderValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SliderValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SliderValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_SubmitData
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SubmitData : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SubmitData");
		return ptr;
	}

};


// Class Engine.UIEvent_SubmitListData
// 0x0004 (0x011C - 0x0118)
class UUIEvent_SubmitListData : public UUIEvent_SubmitData
{
public:
	int                                                SelectedItem;                                             // 0x0118(0x0004) (Edit, Transient, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SubmitListData");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_SubmitTextData
// 0x0010 (0x0128 - 0x0118)
class UUIEvent_SubmitTextData : public UUIEvent_SubmitData
{
public:
	struct FString                                     Value;                                                    // 0x0118(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bClearValue : 1;                                          // 0x0124(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SubmitTextData");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_TabControl
// 0x0004 (0x011C - 0x0118)
class UUIEvent_TabControl : public UUIEvent
{
public:
	class UUITabControl*                               OwnerTabControl;                                          // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TabControl");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIEvent_TextValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_TextValueChanged : public UUIEvent_ValueChanged
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TextValueChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UISequence
// 0x0010 (0x0124 - 0x0114)
class UUISequence : public USequence
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                                // 0x0114(0x0004) (Const, Native, NoExport)
	TArray<class UUIEvent*>                            UIEvents;                                                 // 0x0118(0x000C) (Const, Transient, AlwaysInit, NeedCtorLink, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISequence");
		return ptr;
	}


	void RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove);
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);
	bool AddSequenceObject(class USequenceObject* NewObj, bool bRecurse);
	void GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events);
	class UUIScreenObject* GetOwner();
};


// Class Engine.UIStateSequence
// 0x0000 (0x0124 - 0x0124)
class UUIStateSequence : public UUISequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStateSequence");
		return ptr;
	}


	class UUIState* GetOwnerState();
};


// Class Engine.JuicePerformancePoint
// 0x0018 (0x01D8 - 0x01C0)
class AJuicePerformancePoint : public AKeypoint
{
public:
	struct FString                                     PointName;                                                // 0x01C0(0x000C) (Edit, NeedCtorLink)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x01CC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JuicePerformancePoint");
		return ptr;
	}

};


// Class Engine.JuiceSubsystem
// 0x0034 (0x0074 - 0x0040)
class UJuiceSubsystem : public USubsystem
{
public:
	struct FString                                     ServerIP;                                                 // 0x0040(0x000C) (Config, NeedCtorLink)
	struct FString                                     BackupServerIP;                                           // 0x004C(0x000C) (Config, NeedCtorLink)
	float                                              FPSLowerThreshold;                                        // 0x0058(0x0004) (Config)
	unsigned long                                      bRecordLevelStats : 1;                                    // 0x005C(0x0004) (Config)
	struct FString                                     BuildName;                                                // 0x0060(0x000C) (Config, NeedCtorLink)
	struct FDouble                                     LevelStartTime;                                           // 0x006C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JuiceSubsystem");
		return ptr;
	}


	void STATIC_FlushFile(int FileHandle);
	void STATIC_WriteToFile(int FileHandle, const struct FString& TextToWrite);
	void STATIC_CloseFile(int FileHandle);
	int STATIC_OpenFile(const struct FString& Filename, bool bOpenForWrite, bool bText);
	void STATIC_LevelStart();
	struct FString STATIC_GetBuildInfo();
	struct FString STATIC_GetMapName();
	void STATIC_SetChannelLevel(int Group, int Category, int Level);
	void STATIC_AssetCoverage(const struct FString& Category, const struct FString& assetName, int numHits);
	void STATIC_GameStatI(const struct FString& Category, const struct FString& StatName, int StatValue);
	void STATIC_GameStatF(const struct FString& Category, const struct FString& StatName, float StatValue);
	void STATIC_GameEventD(int Group, int Channel, int Level, const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FString& MapName, const struct FVector& MapLoc);
	void STATIC_TriggerEvent(const struct FString& EventName, const struct FString& EventParam);
	void STATIC_LevelStatI(const struct FString& Category, const struct FString& StatName, int StatValue);
	void STATIC_LevelEventD(int Group, int Channel, int Level, const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FVector& MapLoc);
	void STATIC_LevelEvent(const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FVector& MapLoc);
	void STATIC_JuiceGameEvent(const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FString& MapName, const struct FVector& MapLoc);
	class UJuiceSubsystem* STATIC_GetSubsystem();
};


// Class Engine.MemoryBudgetSubsystem
// 0x0008 (0x0048 - 0x0040)
class UMemoryBudgetSubsystem : public USubsystem
{
public:
	float                                              MemoryBudgetRefreshRate;                                  // 0x0040(0x0004)
	float                                              MemoryBudgetTimeSinceLastRefresh;                         // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MemoryBudgetSubsystem");
		return ptr;
	}


	void DumpAudioAllocationsByType();
	void DumpAllocations();
	void RenderAllocations(class UCanvas* Canvas);
	class UMemoryBudgetSubsystem* STATIC_GetSubsystem();
};


// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}

};


// Class Engine.SoundNodeWave
// 0x0140 (0x018C - 0x004C)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bForceRealtimeDecompression : 1;                          // 0x0050(0x0004) (Edit)
	unsigned long                                      bDynamicResource : 1;                                     // 0x0050(0x0004) (Const, Transient)
	unsigned long                                      bOneTimeUse : 1;                                          // 0x0050(0x0004) (Const, Transient)
	unsigned long                                      bUseTTS : 1;                                              // 0x0050(0x0004) (Edit)
	unsigned long                                      bAlwaysLocalise : 1;                                      // 0x0050(0x0004) (Edit)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0050(0x0004) (Edit)
	unsigned long                                      bMature : 1;                                              // 0x0050(0x0004) (Edit, Const, Localized)
	unsigned long                                      bManualWordWrap : 1;                                      // 0x0050(0x0004) (Edit, Const, Localized)
	unsigned long                                      bUseVolatileMemory : 1;                                   // 0x0050(0x0004) (Edit)
	TEnumAsByte<ETTSSpeaker>                           TTSSpeaker;                                               // 0x0054(0x0001) (Edit)
	TEnumAsByte<EDecompressionType>                    DecompressionType;                                        // 0x0055(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0058(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              Volume;                                                   // 0x0064(0x0004) (Edit, Const, EditConst)
	float                                              Pitch;                                                    // 0x0068(0x0004) (Edit, Const, EditConst)
	float                                              Duration;                                                 // 0x006C(0x0004) (Edit, Const, EditConst)
	int                                                NumChannels;                                              // 0x0070(0x0004) (Edit, Const, EditConst)
	int                                                SampleRate;                                               // 0x0074(0x0004) (Edit, Const, EditConst)
	int                                                SampleDataSize;                                           // 0x0078(0x0004) (Const)
	TArray<int>                                        ChannelOffsets;                                           // 0x007C(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ChannelSizes;                                             // 0x0088(0x000C) (Const, NeedCtorLink)
	struct FUntypedBulkData_Mirror                     RawData;                                                  // 0x0094(0x0030) (Const, Native)
	struct FPointer                                    RawPCMData;                                               // 0x00C4(0x0004) (Const, Native)
	struct FPointer                                    VorbisDecompressor;                                       // 0x00C8(0x0004) (Const, Native)
	TArray<unsigned char>                              PCMData;                                                  // 0x00CC(0x000C) (Const, Transient, NeedCtorLink)
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                         // 0x00D8(0x0030) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                                    // 0x0108(0x0030) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                        // 0x0138(0x0030) (Const, Native)
	int                                                ResourceID;                                               // 0x0168(0x0004) (Const, Transient)
	int                                                ResourceSize;                                             // 0x016C(0x0004) (Const, Transient)
	struct FPointer                                    ResourceData;                                             // 0x0170(0x0004) (Const, Native)
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x0174(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Comment;                                                  // 0x0180(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWave");
		return ptr;
	}

};


// Class Engine.FoliageComponent
// 0x0068 (0x0224 - 0x01BC)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray<struct FGatheredFoliageInstance>            Instances;                                                // 0x01BC(0x000C) (Const, NeedCtorLink)
	TArray<struct FGuid>                               StaticallyRelevantLights;                                 // 0x01C8(0x000C) (Const, NeedCtorLink)
	TArray<struct FGuid>                               StaticallyIrrelevantLights;                               // 0x01D4(0x000C) (Const, NeedCtorLink)
	float                                              DirectionalStaticLightingScale[0x3];                      // 0x01E0(0x0004) (Const)
	float                                              SimpleStaticLightingScale[0x3];                           // 0x01EC(0x0004) (Const)
	class UStaticMesh*                                 InstanceStaticMesh;                                       // 0x01F8(0x0004) (Const)
	class UMaterialInterface*                          Material;                                                 // 0x01FC(0x0004) (Const)
	float                                              MaxDrawRadius;                                            // 0x0200(0x0004)
	float                                              MinTransitionRadius;                                      // 0x0204(0x0004)
	struct FVector                                     MinScale;                                                 // 0x0208(0x000C)
	struct FVector                                     MaxScale;                                                 // 0x0214(0x000C)
	float                                              SwayScale;                                                // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FoliageComponent");
		return ptr;
	}

};


// Class Engine.FoliageFactory
// 0x0028 (0x0224 - 0x01FC)
class AFoliageFactory : public AVolume
{
public:
	TArray<struct FFoliageMesh>                        Meshes;                                                   // 0x01FC(0x000C) (Edit, Const, Component, NeedCtorLink)
	float                                              VolumeFalloffRadius;                                      // 0x0208(0x0004) (Edit, Const)
	float                                              VolumeFalloffExponent;                                    // 0x020C(0x0004) (Edit, Const)
	float                                              SurfaceDensityUpFacing;                                   // 0x0210(0x0004) (Edit, Const)
	float                                              SurfaceDensityDownFacing;                                 // 0x0214(0x0004) (Edit, Const)
	float                                              SurfaceDensitySideFacing;                                 // 0x0218(0x0004) (Edit, Const)
	float                                              FacingFalloffExponent;                                    // 0x021C(0x0004) (Edit, Const)
	int                                                MaxInstanceCount;                                         // 0x0220(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FoliageFactory");
		return ptr;
	}

};


// Class Engine.FluidSurfaceActor
// 0x0004 (0x01C4 - 0x01C0)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      Fluid;                                                    // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceActor");
		return ptr;
	}

};


// Class Engine.FluidSurfaceComponent
// 0x002C (0x01E8 - 0x01BC)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                            // 0x01BC(0x0004) (Edit)
	float                                              FluidSpeed;                                               // 0x01C0(0x0004) (Edit)
	float                                              FluidDamping;                                             // 0x01C4(0x0004) (Edit)
	float                                              HeightScale;                                              // 0x01C8(0x0004) (Edit)
	float                                              GridSpacing;                                              // 0x01CC(0x0004) (Edit)
	unsigned long                                      bAnimate : 1;                                             // 0x01D0(0x0004) (Edit)
	unsigned long                                      bDrawNormals : 1;                                         // 0x01D0(0x0004) (Edit, Transient)
	unsigned long                                      bTestRipple : 1;                                          // 0x01D0(0x0004) (Edit, Transient)
	float                                              TestRippleSpeed;                                          // 0x01D4(0x0004) (Edit, Transient)
	float                                              TestRippleStrength;                                       // 0x01D8(0x0004) (Edit, Transient)
	float                                              TestRippleRadius;                                         // 0x01DC(0x0004) (Edit, Transient)
	float                                              TestRippleAngle;                                          // 0x01E0(0x0004) (Transient)
	struct FPointer                                    FluidSurfaceInfo;                                         // 0x01E4(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceComponent");
		return ptr;
	}

};


// Class Engine.SpeedTree
// 0x0088 (0x00C4 - 0x003C)
class USpeedTree : public UObject
{
public:
	struct FPointer                                    SRH;                                                      // 0x003C(0x0004) (Const, Native, DuplicateTransient)
	int                                                RandomSeed;                                               // 0x0040(0x0004) (Edit)
	float                                              Sink;                                                     // 0x0044(0x0004) (Edit)
	float                                              LeafStaticShadowOpacity;                                  // 0x0048(0x0004) (Edit)
	class UMaterialInterface*                          BranchMaterial;                                           // 0x004C(0x0004) (Edit)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x0050(0x0004) (Edit)
	class UMaterialInterface*                          LeafMaterial;                                             // 0x0054(0x0004) (Edit)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x0058(0x0004) (Edit)
	float                                              MaxBendAngle;                                             // 0x005C(0x0004) (Edit)
	float                                              BranchExponent;                                           // 0x0060(0x0004) (Edit)
	float                                              LeafExponent;                                             // 0x0064(0x0004) (Edit)
	float                                              Response;                                                 // 0x0068(0x0004) (Edit)
	float                                              ResponseLimiter;                                          // 0x006C(0x0004) (Edit)
	float                                              Gusting_MinStrength;                                      // 0x0070(0x0004) (Edit)
	float                                              Gusting_MaxStrength;                                      // 0x0074(0x0004) (Edit)
	float                                              Gusting_Frequency;                                        // 0x0078(0x0004) (Edit)
	float                                              Gusting_MinDuration;                                      // 0x007C(0x0004) (Edit)
	float                                              Gusting_MaxDuration;                                      // 0x0080(0x0004) (Edit)
	float                                              BranchHorizontal_LowWindAngle;                            // 0x0084(0x0004) (Edit)
	float                                              BranchHorizontal_LowWindSpeed;                            // 0x0088(0x0004) (Edit)
	float                                              BranchHorizontal_HighWindAngle;                           // 0x008C(0x0004) (Edit)
	float                                              BranchHorizontal_HighWindSpeed;                           // 0x0090(0x0004) (Edit)
	float                                              BranchVertical_LowWindAngle;                              // 0x0094(0x0004) (Edit)
	float                                              BranchVertical_LowWindSpeed;                              // 0x0098(0x0004) (Edit)
	float                                              BranchVertical_HighWindAngle;                             // 0x009C(0x0004) (Edit)
	float                                              BranchVertical_HighWindSpeed;                             // 0x00A0(0x0004) (Edit)
	float                                              LeafRocking_LowWindAngle;                                 // 0x00A4(0x0004) (Edit)
	float                                              LeafRocking_LowWindSpeed;                                 // 0x00A8(0x0004) (Edit)
	float                                              LeafRocking_HighWindAngle;                                // 0x00AC(0x0004) (Edit)
	float                                              LeafRocking_HighWindSpeed;                                // 0x00B0(0x0004) (Edit)
	float                                              LeafRustling_LowWindAngle;                                // 0x00B4(0x0004) (Edit)
	float                                              LeafRustling_LowWindSpeed;                                // 0x00B8(0x0004) (Edit)
	float                                              LeafRustling_HighWindAngle;                               // 0x00BC(0x0004) (Edit)
	float                                              LeafRustling_HighWindSpeed;                               // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTree");
		return ptr;
	}

};


// Class Engine.SpeedTreeActor
// 0x0004 (0x01C4 - 0x01C0)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActor");
		return ptr;
	}

};


// Class Engine.SpeedTreeActorFactory
// 0x0004 (0x0068 - 0x0064)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActorFactory");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponent
// 0x0088 (0x0244 - 0x01BC)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x01BC(0x0004) (Edit, Const)
	unsigned long                                      bUseLeaves : 1;                                           // 0x01C0(0x0004) (Edit)
	unsigned long                                      bUseBranches : 1;                                         // 0x01C0(0x0004) (Edit)
	unsigned long                                      bUseFronds : 1;                                           // 0x01C0(0x0004) (Edit)
	unsigned long                                      bUseBillboards : 1;                                       // 0x01C0(0x0004) (Edit)
	float                                              LodNearDistance;                                          // 0x01C4(0x0004) (Edit)
	float                                              LodFarDistance;                                           // 0x01C8(0x0004) (Edit)
	float                                              LodLevelOverride;                                         // 0x01CC(0x0004) (Edit)
	class UMaterialInterface*                          BranchMaterial;                                           // 0x01D0(0x0004) (Edit)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x01D4(0x0004) (Edit)
	class UMaterialInterface*                          LeafMaterial;                                             // 0x01D8(0x0004) (Edit)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x01DC(0x0004) (Edit)
	class UTexture2D*                                  SpeedTreeIcon;                                            // 0x01E0(0x0004)
	TArray<struct FSpeedTreeStaticLight>               StaticLights;                                             // 0x01E4(0x000C) (Const, NeedCtorLink)
	struct FLightMapRef                                BranchAndFrondLightMap;                                   // 0x01F0(0x0004) (Const, Native)
	struct FLightMapRef                                LeafMeshLightMap;                                         // 0x01F4(0x0004) (Const, Native)
	struct FLightMapRef                                LeafCardLightMap;                                         // 0x01F8(0x0004) (Const, Native)
	struct FLightMapRef                                BillboardLightMap;                                        // 0x01FC(0x0004) (Const, Native)
	struct FMatrix                                     RotationOnlyMatrix;                                       // 0x0200(0x0040) (Const, Native)
	float                                              WindMatrixOffset;                                         // 0x0240(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponent");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponentFactory
// 0x0004 (0x0044 - 0x0040)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x0040(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponentFactory");
		return ptr;
	}

};


// Class Engine.LensFlare
// 0x01BC (0x01F8 - 0x003C)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                            // 0x003C(0x0140) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	class UStaticMesh*                                 SourceMesh;                                               // 0x017C(0x0004) (Edit)
	TEnumAsByte<ESceneDepthPriorityGroup>              SourceDPG;                                                // 0x0180(0x0001) (Edit, Const)
	TEnumAsByte<ESceneDepthPriorityGroup>              ReflectionsDPG;                                           // 0x0181(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0182(0x0002) MISSED OFFSET
	TArray<struct FLensFlareElement>                   Reflections;                                              // 0x0184(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	float                                              OuterCone;                                                // 0x0190(0x0004) (Edit)
	float                                              InnerCone;                                                // 0x0194(0x0004) (Edit)
	float                                              ConeFudgeFactor;                                          // 0x0198(0x0004) (Edit)
	float                                              Radius;                                                   // 0x019C(0x0004) (Edit)
	struct FRawDistributionFloat                       ScreenPercentageMap;                                      // 0x01A0(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x01BC(0x0004) (Edit)
	unsigned long                                      bRenderDebugLines : 1;                                    // 0x01BC(0x0004) (Edit)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x01BC(0x0004)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x01C0(0x001C) (Edit)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x01DC(0x0004) (ExportObject)
	int                                                ReflectionCount;                                          // 0x01E0(0x0004) (Transient)
	struct FRotator                                    ThumbnailAngle;                                           // 0x01E4(0x000C)
	float                                              ThumbnailDistance;                                        // 0x01F0(0x0004)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x01F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlare");
		return ptr;
	}

};


// Class Engine.LensFlareComponent
// 0x0038 (0x01F4 - 0x01BC)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                                 // 0x01BC(0x0004) (Edit, Const)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x01C0(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x01C4(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightRadiusComponent*                   PreviewRadius;                                            // 0x01C8(0x0004) (Const, ExportObject, Component, EditInline)
	unsigned long                                      bAutoActivate : 1;                                        // 0x01CC(0x0004) (Edit)
	unsigned long                                      bIsActive : 1;                                            // 0x01CC(0x0004) (Transient)
	unsigned long                                      bHasTranslucency : 1;                                     // 0x01CC(0x0004) (Transient)
	unsigned long                                      bHasUnlitTranslucency : 1;                                // 0x01CC(0x0004) (Transient)
	unsigned long                                      bHasUnlitDistortion : 1;                                  // 0x01CC(0x0004) (Transient)
	unsigned long                                      bUsesSceneColor : 1;                                      // 0x01CC(0x0004) (Transient)
	float                                              OuterCone;                                                // 0x01D0(0x0004) (Transient)
	float                                              InnerCone;                                                // 0x01D4(0x0004) (Transient)
	float                                              ConeFudgeFactor;                                          // 0x01D8(0x0004) (Transient)
	float                                              Radius;                                                   // 0x01DC(0x0004) (Transient)
	struct FLinearColor                                SourceColor;                                              // 0x01E0(0x0010) (Edit)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x01F0(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareComponent");
		return ptr;
	}


	void SetIsActive(bool bInIsActive);
	void SetSourceColor(const struct FLinearColor& InSourceColor);
	void SetTemplate(class ULensFlare* NewTemplate);
};


// Class Engine.LensFlareSource
// 0x0008 (0x01C8 - 0x01C0)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                            // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x01C4(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareSource");
		return ptr;
	}


	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void OnToggle(class USeqAct_Toggle* Action);
	void SetTemplate(class ULensFlare* NewTemplate);
};


// Class Engine.TdLOIAddOnObject
// 0x0060 (0x009C - 0x003C)
class UTdLOIAddOnObject : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	class APlayerController*                           PlayerRef;                                                // 0x0040(0x0004) (Transient)
	float                                              LookAtDelay;                                              // 0x0044(0x0004) (Transient)
	float                                              ProximityDelay;                                           // 0x0048(0x0004) (Transient)
	float                                              DistanceSquared;                                          // 0x004C(0x0004) (Transient)
	unsigned long                                      bUse2DDistance : 1;                                       // 0x0050(0x0004) (Transient)
	unsigned long                                      bIsKismetActivated : 1;                                   // 0x0050(0x0004)
	unsigned long                                      bIsActivated : 1;                                         // 0x0050(0x0004) (Transient)
	struct FVector                                     CachedLocation;                                           // 0x0054(0x000C) (Transient)
	struct FVector                                     CachedDirection;                                          // 0x0060(0x000C)
	float                                              ActivationAngle;                                          // 0x006C(0x0004)
	TArray<class UMaterialInstanceConstant*>           LOIMaterialInstances;                                     // 0x0070(0x000C) (Transient, NeedCtorLink)
	float                                              LOILevel;                                                 // 0x007C(0x0004) (Transient)
	float                                              ActualLOILevel;                                           // 0x0080(0x0004) (Transient)
	float                                              LOILevelTimer;                                            // 0x0084(0x0004) (Transient)
	float                                              LookAtTimer;                                              // 0x0088(0x0004) (Transient)
	float                                              ProximityTimer;                                           // 0x008C(0x0004) (Transient)
	float                                              FadeInSpeed;                                              // 0x0090(0x0004) (Config)
	float                                              FadeOutSpeed;                                             // 0x0094(0x0004) (Config)
	float                                              MinDuration;                                              // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIAddOnObject");
		return ptr;
	}


	void ActivateThisLOIObject();
	void LookAtActivationAttempt();
	void InitLOI(class AActor* Player);
	void OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender);
	void OnActivateLOI(class USeqAct_ActivateLOI* Sender);
	void ActivateLOI();
	void InitLOIMtrlInstances();
	void ActivateLOIGroups(TArray<struct FName> LOIGroups);
	void RegisterLOIGroups(TArray<struct FName> LOIGroups);
};


// Class Engine.TdLOIGroupManager
// 0x003C (0x0078 - 0x003C)
class UTdLOIGroupManager : public UObject
{
public:
	struct FMultiMap_Mirror                            GroupMap;                                                 // 0x003C(0x003C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIGroupManager");
		return ptr;
	}

};


// Class Engine.TdLOIRenderingComponent
// 0x0010 (0x01CC - 0x01BC)
class UTdLOIRenderingComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x01BC(0x0004) (Edit)
	unsigned long                                      bIsScreenSizeScaled : 1;                                  // 0x01C0(0x0004) (Edit)
	float                                              ScreenSize;                                               // 0x01C4(0x0004) (Edit)
	class AStaticMeshActor*                            ActualOwner;                                              // 0x01C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIRenderingComponent");
		return ptr;
	}

};


// Class Engine.AudioDevice
// 0x0120 (0x0160 - 0x0040)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                              // 0x0040(0x0004) (Const, Config)
	unsigned long                                      UseEffectsProcessing : 1;                                 // 0x0044(0x0004) (Const, Config)
	unsigned long                                      bGameWasTicking : 1;                                      // 0x0044(0x0004) (Const, Native)
	unsigned long                                      bTestLowPassFilter : 1;                                   // 0x0044(0x0004) (Const, Native)
	unsigned long                                      bTestEQFilter : 1;                                        // 0x0044(0x0004) (Const, Native)
	TArray<class UAudioComponent*>                     AudioComponents;                                          // 0x0048(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<struct FPointer>                            Sources;                                                  // 0x0054(0x000C) (Const, Native)
	TArray<struct FPointer>                            FreeSources;                                              // 0x0060(0x000C) (Const, Native)
	struct FMap_Mirror                                 WaveInstanceSourceMap;                                    // 0x006C(0x003C) (Const, Native)
	TArray<struct FListener>                           Listeners;                                                // 0x00A8(0x000C) (Const, Native)
	struct FQWord                                      CurrentTick;                                              // 0x00B4(0x0008) (Const, Native)
	struct FMap_Mirror                                 NameToSoundGroupIndexMap;                                 // 0x00BC(0x003C) (Const, Native)
	TArray<struct FSoundGroup>                         SourceSoundGroups;                                        // 0x00F8(0x000C) (Const, Native)
	TArray<struct FSoundGroup>                         CurrentSoundGroups;                                       // 0x0104(0x000C) (Const, Native)
	TArray<struct FSoundGroup>                         DestinationSoundGroups;                                   // 0x0110(0x000C) (Const, Native)
	TArray<struct FSoundGroup>                         SoundGroups;                                              // 0x011C(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FSoundGroupEffect>                   SoundGroupEffects;                                        // 0x0128(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FMixGroupInfo>                       MixGroups;                                                // 0x0134(0x000C) (Edit, Config, NeedCtorLink)
	struct FPointer                                    Effects;                                                  // 0x0140(0x0004) (Const, Native)
	TEnumAsByte<ESoundMode>                            CurrentMode;                                              // 0x0144(0x0001) (Const, Native)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	struct FDouble                                     SoundModeStartTime;                                       // 0x0148(0x0008) (Const, Native)
	struct FDouble                                     SoundModeEndTime;                                         // 0x0150(0x0008) (Const, Native)
	struct FPointer                                    TextToSpeech;                                             // 0x0158(0x0004) (Const, Native)
	float                                              TransientMasterVolume;                                    // 0x015C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioDevice");
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0014 (0x0050 - 0x003C)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bIsUnique : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bIsPartiallyUnique : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bIsConsoleMessage : 1;                                    // 0x003C(0x0004)
	unsigned long                                      bBeep : 1;                                                // 0x003C(0x0004)
	unsigned long                                      bCountInstances : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bDrawOutline : 1;                                         // 0x003C(0x0004)
	float                                              Lifetime;                                                 // 0x0040(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0044(0x0004)
	float                                              PosY;                                                     // 0x0048(0x0004)
	int                                                FontSize;                                                 // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}


	bool STATIC_PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2);
	bool STATIC_IsKeyObjectiveMessage(int Switch);
	bool STATIC_IsConsoleMessage(int Switch);
	float STATIC_GetLifeTime(int Switch);
	int STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer);
	float STATIC_GetPos(int Switch, class AHUD* myHUD);
	struct FColor STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	struct FColor STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2);
	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	int STATIC_GetMessageArea(int Switch);
	class USoundCue* STATIC_Get3DAnnouncementSound(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
};


// Class Engine.SeqEvent_TakeDamage
// 0x0024 (0x0118 - 0x00F4)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                          // 0x00F4(0x0004) (Edit)
	float                                              DamageThreshold;                                          // 0x00F8(0x0004) (Edit)
	TArray<class UClass*>                              DamageTypes;                                              // 0x00FC(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoreDamageTypes;                                        // 0x0108(0x000C) (Edit, NeedCtorLink)
	float                                              CurrentDamage;                                            // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_TakeDamage");
		return ptr;
	}


	void Reset();
	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount);
	bool IsValidDamageType(class UClass* inDamageType);
};


// Class Engine.SeqAct_Destroy
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_Destroy : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Destroy");
		return ptr;
	}

};


// Class Engine.SeqAct_HealDamage
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_HealDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                               // 0x00DC(0x0004) (Edit)
	int                                                HealAmount;                                               // 0x00E0(0x0004) (Edit)
	class AActor*                                      Instigator;                                               // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_HealDamage");
		return ptr;
	}

};


// Class Engine.SeqAct_Teleport
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                                      // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Teleport");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleHidden
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHidden");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x0100 - 0x00DC)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                              // 0x00DC(0x0004) (Edit)
	unsigned long                                      bHardAttach : 1;                                          // 0x00DC(0x0004) (Edit)
	unsigned long                                      bUseRelativeOffset : 1;                                   // 0x00DC(0x0004) (Edit)
	unsigned long                                      bUseRelativeRotation : 1;                                 // 0x00DC(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x00E0(0x0008) (Edit)
	struct FVector                                     RelativeOffset;                                           // 0x00E8(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x00F4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToActor");
		return ptr;
	}

};


// Class Engine.SeqAct_MakeNoise
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_MakeNoise : public USequenceAction
{
public:
	float                                              Loudness;                                                 // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MakeNoise");
		return ptr;
	}

};


// Class Engine.SeqAct_DeactivateLOI
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_DeactivateLOI : public USequenceAction
{
public:
	float                                              FadeOutSpeed;                                             // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DeactivateLOI");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ActivateLOI
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ActivateLOI : public USequenceAction
{
public:
	float                                              FadeInSpeed;                                              // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActivateLOI");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.AccessControl
// 0x00D4 (0x0294 - 0x01C0)
class AAccessControl : public AInfo
{
public:
	TArray<struct FString>                             IPPolicies;                                               // 0x01C0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FUniqueNetId>                        BannedIDs;                                                // 0x01CC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     IPBanned;                                                 // 0x01D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WrongPassword;                                            // 0x01E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NeedPassword;                                             // 0x01F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SessionBanned;                                            // 0x01FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KickedMsg;                                                // 0x0208(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultKickReason;                                        // 0x0214(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IdleKickReason;                                           // 0x0220(0x000C) (Const, Localized, NeedCtorLink)
	class UClass*                                      AdminClass;                                               // 0x022C(0x0004)
	struct FString                                     AdminPassword;                                            // 0x0230(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     GamePassword;                                             // 0x023C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ACDisplayText[0x3];                                       // 0x0248(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ACDescText[0x3];                                          // 0x026C(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bDontAddDefaultAdmin : 1;                                 // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AccessControl");
		return ptr;
	}


	bool IsIDBanned(struct FUniqueNetId* NetID);
	bool CheckIPPolicy(const struct FString& Address);
	void PreLogin(const struct FString& Options, const struct FString& Address, bool bSpectator, struct FString* OutError);
	bool ValidLogin(const struct FString& UserName, const struct FString& Password);
	bool ParseAdminOptions(const struct FString& Options);
	void AdminExited(class APlayerController* P);
	void AdminEntered(class APlayerController* P);
	bool AdminLogout(class APlayerController* P);
	bool AdminLogin(class APlayerController* P, const struct FString& Password);
	bool KickPlayer(class APlayerController* C, const struct FString& KickReason);
	void KickBan(const struct FString& Target);
	void Kick(const struct FString& Target);
	class AController* GetControllerFromString(const struct FString& Target);
	bool RequiresPassword();
	void SetGamePassword(const struct FString& P);
	bool SetAdminPassword(const struct FString& P);
	bool IsAdmin(class APlayerController* P);
};


// Class Engine.Admin
// 0x0000 (0x0528 - 0x0528)
class AAdmin : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Admin");
		return ptr;
	}


	void ServerSwitch(const struct FString& URL);
	void Switch(const struct FString& URL);
	void ServerRestartMap();
	void RestartMap();
	void PlayerList();
	void ServerKick(const struct FString& S);
	void Kick(const struct FString& S);
	void ServerKickBan(const struct FString& S);
	void KickBan(const struct FString& S);
	void ServerAdmin(const struct FString& CommandLine);
	void Admin(const struct FString& CommandLine);
	void PostBeginPlay();
};


// Class Engine.OnlineFileLockerInterface
// 0x0030 (0x006C - 0x003C)
class UOnlineFileLockerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnFetchLockerComplete__Delegate;                        // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadFileFromLockerComplete__Delegate;                 // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWriteFileToLockerComplete__Delegate;                  // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeleteFileFromLockerComplete__Delegate;               // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineFileLockerInterface");
		return ptr;
	}


	TArray<struct FOnlineFileLockerFileInfo> ListFileLocker();
	void ClearOnDeleteFileFromLockerCompleteDelegate(const struct FScriptDelegate& DeleteFileFromLockerDelegate);
	void AddOnDeleteFileFromLockerCompleteDelegate(const struct FScriptDelegate& DeleteFileFromLockerDelegate);
	void OnDeleteFileFromLockerComplete(bool bWasSuccessful);
	bool DeleteFileFromLocker(struct FOnlineFileLockerFile* File);
	void ClearOnWriteFileToLockerCompleteDelegate(const struct FScriptDelegate& WriteFileToLockerDelegate);
	void AddOnWriteFileToLockerCompleteDelegate(const struct FScriptDelegate& WriteFileToLockerDelegate);
	void OnWriteFileToLockerComplete(bool bWasSuccessful);
	bool WriteFileToLocker(struct FOnlineFileLockerFile* File);
	void ClearOnReadFileFromLockerCompleteDelegate(const struct FScriptDelegate& ReadFileFromLockerDelegate);
	void AddOnReadFileFromLockerCompleteDelegate(const struct FScriptDelegate& ReadFileFromLockerDelegate);
	void OnReadFileFromLockerComplete(bool bWasSuccessful);
	bool ReadFileFromLocker(struct FOnlineFileLockerFile* File);
	void ClearOnFetchLockerCompleteDelegate(const struct FScriptDelegate& FetchLockerDelegate);
	void AddOnFetchLockerCompleteDelegate(const struct FScriptDelegate& FetchLockerDelegate);
	void OnFetchLockerComplete(bool bWasSuccessful);
	bool FetchLocker(const struct FString& UserName);
};


// Class Engine.OnlinePlayGroupInterface
// 0x00A8 (0x00E4 - 0x003C)
class UOnlinePlayGroupInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayGroupCreated__Delegate;                           // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupJoined__Delegate;                            // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInviteToPlayGroupComplete__Delegate;                  // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInviteToPlayGroupReceived__Delegate;                  // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupMemberJoin__Delegate;                        // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupChatMessageReceived__Delegate;               // 0x0078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupDestroyed__Delegate;                         // 0x0084(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupKicked__Delegate;                            // 0x0090(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLeavePlayGroupComplete__Delegate;                     // 0x009C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupMemberLeave__Delegate;                       // 0x00A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupOwnerTransitionStart__Delegate;              // 0x00B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupOwnerTransitionFinish__Delegate;             // 0x00C0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupGameJoined__Delegate;                        // 0x00CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayGroupGameLeave__Delegate;                         // 0x00D8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayGroupInterface");
		return ptr;
	}


	void LeaveGroupGame();
	void ClearPlayGroupGameLeaveDelegate(const struct FScriptDelegate& OnPlayGroupGameLeaveDelegate);
	void AddPlayGroupGameLeaveDelegate(const struct FScriptDelegate& OnPlayGroupGameLeaveDelegate);
	void OnPlayGroupGameLeave();
	void JoinGroupGame();
	void ClearPlayGroupGameJoinedDelegate(const struct FScriptDelegate& OnPlayGroupGameJoinedDelegate);
	void AddPlayGroupGameJoinedDelegate(const struct FScriptDelegate& OnPlayGroupGameJoinedDelegate);
	void OnPlayGroupGameJoined();
	void ClearPlayGroupOwnerTransitionFinishDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionFinishDelegate);
	void AddPlayGroupOwnerTransitionFinishDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionFinishDelegate);
	void OnPlayGroupOwnerTransitionFinish();
	void ClearPlayGroupOwnerTransitionStartDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionStartDelegate);
	void AddPlayGroupOwnerTransitionStartDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionStartDelegate);
	void OnPlayGroupOwnerTransitionStart();
	void TransferOwnerShipAsync(const struct FUniqueNetId& NewOwnerId);
	void ClearPlayGroupMemberLeaveDelegate(const struct FScriptDelegate& OnPlayGroupMemberLeaveDelegate);
	void AddPlayGroupMemberLeaveDelegate(const struct FScriptDelegate& OnPlayGroupMemberLeaveDelegate);
	void OnPlayGroupMemberLeave(const struct FUniqueNetId& UserId, TEnumAsByte<EPlayGroupLeaveReason> Reason);
	void ClearLeavePlayGroupCompleteDelegate(const struct FScriptDelegate& OnLeavePlayGroupCompleteDelegate);
	void AddLeavePlayGroupCompleteDelegate(const struct FScriptDelegate& OnLeavePlayGroupCompleteDelegate);
	void OnLeavePlayGroupComplete();
	void LeavePlayGroupAsync();
	void ClearPlayGroupKickedDelegate(const struct FScriptDelegate& OnPlayGroupKickedDelegate);
	void AddPlayGroupKickedDelegate(const struct FScriptDelegate& OnPlayGroupKickedDelegate);
	void OnPlayGroupKicked();
	void KickMemberAsync(const struct FUniqueNetId& UserId);
	void ClearPlayGroupDestroyedDelegate(const struct FScriptDelegate& OnPlayGroupDestroyedDelegate);
	void AddPlayGroupDestroyedDelegate(const struct FScriptDelegate& OnPlayGroupDestroyedDelegate);
	void OnPlayGroupDestroyed();
	void DestroyPlayGroupAsync();
	void ClearPlayGroupChatMessageReceivedDelegate(const struct FScriptDelegate& OnPlayGroupChatMessageReceivedDelegate);
	void AddPlayGroupChatMessageReceivedDelegate(const struct FScriptDelegate& OnPlayGroupChatMessageReceivedDelegate);
	void OnPlayGroupChatMessageReceived(const struct FUniqueNetId& SenderId, const struct FString& Message);
	void BroadCastChatMessageAsync(const struct FString& Message);
	void ClearPlayGroupMemberJoinDelegate(const struct FScriptDelegate& OnPlayGroupMemberJoinDelegate);
	void AddPlayGroupMemberJoinDelegate(const struct FScriptDelegate& OnPlayGroupMemberJoinDelegate);
	void OnPlayGroupMemberJoin(const struct FUniqueNetId& NewMemberUserId);
	bool AcceptInviteToPlayGroup(const struct FUniqueNetId& RequestingUserId);
	void ClearOnInviteToPlayGroupReceivedDelegate(const struct FScriptDelegate& OnInviteToPlayGroupReceived);
	void AddOnInviteToPlayGroupReceivedDelegate(const struct FScriptDelegate& OnInviteToPlayGroupReceived);
	void OnInviteToPlayGroupReceived(const struct FUniqueNetId& RequestingUserId);
	void ClearOnInviteToPlayGroupCompleteDelegate(const struct FScriptDelegate& OnInviteToPlayGroupComplete);
	void AddOnInviteToPlayGroupCompleteDelegate(const struct FScriptDelegate& OnInviteToPlayGroupComplete);
	void OnInviteToPlayGroupComplete(bool bWasSuccessful);
	bool InviteToPlayGroupAsync(const struct FUniqueNetId& UserId);
	void ClearPlayGroupJoinedDelegate(const struct FScriptDelegate& OnPlayGroupJoinedDelegate);
	void AddPlayGroupJoinedDelegate(const struct FScriptDelegate& OnPlayGroupJoinedDelegate);
	void OnPlayGroupJoined(bool bInOk);
	void JoinPlayGroupAsync(const struct FUniqueNetId& UserId);
	void ClearPlayGroupCreatedDelegate(const struct FScriptDelegate& OnPlayGroupCreatedDelegate);
	void AddPlayGroupCreatedDelegate(const struct FScriptDelegate& OnPlayGroupCreatedDelegate);
	void OnPlayGroupCreated(bool bInOk);
	void CreatePlayGroupAsync(const struct FPlayGroupCreateParams& Params);
	TArray<struct FPlayGroupListEntry> GetMyPlayGroupList();
	bool IsPlayGroupOwner();
	bool IsInPlayGroup();
};


// Class Engine.OnlineNewsInterface
// 0x0018 (0x0054 - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadGameNewsCompleted__Delegate;                      // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadContentAnnouncementsCompleted__Delegate;          // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineNewsInterface");
		return ptr;
	}


	struct FString GetContentAnnouncements(unsigned char LocalUserNum);
	void ClearReadContentAnnouncementsCompletedDelegate(const struct FScriptDelegate& ReadContentAnnouncementsDelegate);
	void AddReadContentAnnouncementsCompletedDelegate(const struct FScriptDelegate& ReadContentAnnouncementsDelegate);
	void OnReadContentAnnouncementsCompleted(bool bWasSuccessful);
	bool ReadContentAnnouncements(unsigned char LocalUserNum);
	struct FString GetGameNews(unsigned char LocalUserNum);
	void ClearReadGameNewsCompletedDelegate(const struct FScriptDelegate& ReadGameNewsDelegate);
	void AddReadGameNewsCompletedDelegate(const struct FScriptDelegate& ReadGameNewsDelegate);
	void OnReadGameNewsCompleted(bool bWasSuccessful);
	bool ReadGameNews(unsigned char LocalUserNum);
};


// Class Engine.OnlineStatsInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;                    // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;                   // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;               // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsInterface");
		return ptr;
	}


	bool RegisterStatGuid(const struct FUniqueNetId& PlayerId, struct FString* ClientStatGuid);
	struct FString GetClientStatGuid();
	void ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	bool RegisterHostStatGuid(struct FString* HostStatGuid);
	struct FString GetHostStatGuid();
	bool WriteOnlinePlayerScores(TArray<struct FOnlinePlayerScore>* PlayerScores);
	void ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void OnFlushOnlineStatsComplete(bool bWasSuccessful);
	bool FlushOnlineStats();
	bool WriteOnlineStats(const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite);
	void FreeStats(class UOnlineStatsRead* StatsRead);
	void OnReadOnlineStatsComplete(bool bWasSuccessful);
	void ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	void AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	bool ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows);
	bool ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead);
	bool ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead);
	bool ReadOnlineStats(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players);
};


// Class Engine.OnlineVoiceInterface
// 0x0018 (0x0054 - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayerTalking__Delegate;                              // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                        // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineVoiceInterface");
		return ptr;
	}


	bool UnmuteAll(unsigned char LocalUserNum);
	bool MuteAll(unsigned char LocalUserNum, bool bAllowFriends);
	bool SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj);
	bool SelectVocabulary(unsigned char LocalUserNum, int VocabularyId);
	void ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void OnRecognitionComplete();
	bool GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words);
	bool StopSpeechRecognition(unsigned char LocalUserNum);
	bool StartSpeechRecognition(unsigned char LocalUserNum);
	void StopNetworkedVoice(unsigned char LocalUserNum);
	void StartNetworkedVoice(unsigned char LocalUserNum);
	void ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void OnPlayerTalking(const struct FUniqueNetId& Player);
	bool UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	bool MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	bool SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId, int Priority);
	bool IsHeadsetPresent(unsigned char LocalUserNum);
	bool IsRemotePlayerTalking(const struct FUniqueNetId& PlayerId);
	bool IsLocalPlayerTalking(unsigned char LocalUserNum);
	bool UnregisterRemoteTalker(const struct FUniqueNetId& PlayerId);
	bool RegisterRemoteTalker(const struct FUniqueNetId& PlayerId);
	bool UnregisterLocalTalker(unsigned char LocalUserNum);
	bool RegisterLocalTalker(unsigned char LocalUserNum);
};


// Class Engine.OnlineContentInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnContentChange__Delegate;                              // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                        // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;            // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineContentInterface");
		return ptr;
	}


	void GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads);
	void ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void OnQueryAvailableDownloadsComplete(bool bWasSuccessful);
	bool QueryAvailableDownloads(unsigned char LocalUserNum);
	TEnumAsByte<EOnlineEnumerationReadState> GetContentList(unsigned char LocalUserNum, TArray<struct FOnlineContent>* ContentList);
	bool ReadContentList(unsigned char LocalUserNum);
	void ClearReadContentComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void AddReadContentComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void OnReadContentComplete(bool bWasSuccessful);
	void ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum);
	void AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum);
	void OnContentChange();
};


// Class Engine.OnlineGameInterface
// 0x0084 (0x00C0 - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;                   // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;                  // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;                    // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;              // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;                     // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;                     // 0x0078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;                   // 0x0084(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;                    // 0x0090(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;                      // 0x009C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;            // 0x00A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                         // 0x00B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameInterface");
		return ptr;
	}


	bool RecalculateSkillRating(TArray<struct FUniqueNetId>* Players);
	bool AcceptGameInvite(unsigned char LocalUserNum);
	void OnGameInviteAccepted(class UOnlineGameSettings* GameInviteSettings);
	void ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	void AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	TArray<struct FOnlineArbitrationRegistrant> GetArbitratedPlayers();
	void ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void OnArbitrationRegistrationComplete(bool bWasSuccessful);
	bool RegisterForArbitration();
	TEnumAsByte<EOnlineGameState> GetOnlineGameState();
	void ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void OnEndOnlineGameComplete(bool bWasSuccessful);
	bool EndOnlineGame();
	void ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void OnStartOnlineGameComplete(bool bWasSuccessful);
	bool StartOnlineGame();
	void ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void OnUnregisterPlayerComplete(bool bWasSuccessful);
	bool UnregisterPlayer(const struct FUniqueNetId& PlayerId);
	void ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void OnRegisterPlayerComplete(bool bWasSuccessful);
	bool RegisterPlayer(const struct FUniqueNetId& PlayerId, bool bWasInvited);
	bool GetResolvedConnectString(struct FString* ConnectInfo);
	void ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void OnJoinOnlineGameComplete(bool bWasSuccessful);
	bool JoinOnlineGame(unsigned char PlayerNum, struct FOnlineGameSearchResult* DesiredGame);
	bool FreeSearchResults(class UOnlineGameSearch* Search);
	class UOnlineGameSearch* GetGameSearch();
	void ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void OnCancelFindOnlineGamesComplete(bool bWasSuccessful);
	bool CancelFindOnlineGames();
	void ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void OnFindOnlineGamesComplete(bool bWasSuccessful);
	bool FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings);
	void ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void OnDestroyOnlineGameComplete(bool bWasSuccessful);
	bool DestroyOnlineGame();
	class UOnlineGameSettings* GetGameSettings();
	bool UpdateOnlineGame(class UOnlineGameSettings* UpdatedGameSettings);
	void ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void OnCreateOnlineGameComplete(bool bWasSuccessful);
	bool CreateOnlineGame(unsigned char HostingPlayerNum, class UOnlineGameSettings* NewGameSettings);
};


// Class Engine.OnlineSystemInterface
// 0x003C (0x0078 - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                           // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                           // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnControllerChange__Delegate;                           // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;                     // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                        // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSystemInterface");
		return ptr;
	}


	void ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void OnStorageDeviceChange();
	TEnumAsByte<ENATType> GetNATType();
	void ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void OnConnectionStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	bool IsControllerConnected(int ControllerId);
	void ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void OnControllerChange(int ControllerId, bool bIsConnected);
	void SetNetworkNotificationPosition(TEnumAsByte<ENetworkNotificationPosition> NewPos);
	TEnumAsByte<ENetworkNotificationPosition> GetNetworkNotificationPosition();
	void ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void DispatchExternalUIChange(bool bIsOpening);
	void OnExternalUIChange(bool bIsOpening);
	void ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void OnLinkStatusChange(bool bIsConnected);
	bool HasLinkConnection();
};


// Class Engine.OnlinePlayerInterfaceEx
// 0x0030 (0x006C - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnShowGamerCardResult__Delegate;                        // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;                    // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;                  // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                         // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterfaceEx");
		return ptr;
	}


	bool ShowSendMessageUI(const struct FUniqueNetId& PlayerId, bool bIsFriendRequest);
	bool ShowPlayersUI(unsigned char LocalUserNum);
	bool ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	void ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void OnProfileDataChanged();
	bool UnlockGamerPicture(unsigned char LocalUserNum, int PictureId);
	void OnUnlockAchievementComplete(bool bWasSuccessful);
	void ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	void AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	bool UnlockAchievement(unsigned char LocalUserNum, int AchievementId);
	bool IsDeviceValid(int DeviceID);
	void OnDeviceSelectionComplete(bool bWasSuccessful);
	int GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName);
	void ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	void AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	bool ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bForceShowUI);
	bool ShowMembershipMarketplaceUI(unsigned char LocalUserNum);
	bool ShowContentMarketplaceUI(unsigned char LocalUserNum);
	bool ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText);
	bool ShowAchievementsUI(unsigned char LocalUserNum);
	bool ShowMessagesUI(unsigned char LocalUserNum);
	void CancelShowGamerCardUI();
	void OnShowGamerCardResult(bool bWasSuccessful);
	void ClearShowGamerCardResultDelegate(const struct FScriptDelegate& GamerCardDelegate);
	void AddShowGamerCardResultDelegate(const struct FScriptDelegate& GamerCardDelegate);
	bool ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	bool ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
};


// Class Engine.OnlinePlayerInterface
// 0x00CC (0x0108 - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLoginChange__Delegate;                                // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                             // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMutingChange__Delegate;                               // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                              // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                                // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                            // 0x0078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;                // 0x0084(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;               // 0x0090(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                        // 0x009C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;                      // 0x00A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;                    // 0x00B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;                       // 0x00C0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSendMessageByUsername__Delegate;                      // 0x00CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                         // 0x00D8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;                     // 0x00E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadPlayersComplete__Delegate;                        // 0x00F0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;                      // 0x00FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterface");
		return ptr;
	}


	void SetActiveControllerId(unsigned char LocalUserNum);
	bool DeleteMessage(unsigned char LocalUserNum, int MessageIndex);
	void ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message);
	void GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages);
	TEnumAsByte<EOnlineEnumerationReadState> GetPlayersList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlinePlayer>* Players);
	void ClearReadPlayersCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayersCompleteDelegate);
	void SetReadPlayersCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayersCompleteDelegate);
	void OnReadPlayersComplete();
	bool ReadPlayersList(unsigned char LocalUserNum, int Count, int StartingAt);
	void ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void OnJoinFriendGameComplete(bool bWasSuccessful);
	bool JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend);
	void ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName);
	bool SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text);
	bool SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text);
	void ClearSendMessageByUsernameDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendMessageDelegate);
	void AddSendMessageByUsernameDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendMessageDelegate);
	void OnSendMessageByUsername(bool bSuccess);
	void SendMessageByUsername(unsigned char LocalUserNum, const struct FString& UserName, const struct FString& Message);
	bool SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message);
	void ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message);
	bool RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend);
	bool DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	bool AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	void ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void OnAddFriendByNameComplete(bool bWasSuccessful);
	bool AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message);
	bool AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message);
	void OnKeyboardInputComplete(bool bWasSuccessful);
	struct FString GetKeyboardInputResults(unsigned char* bWasCanceled);
	void ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	void AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	bool ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength);
	void SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties);
	TEnumAsByte<EOnlineEnumerationReadState> GetFriendsList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlineFriend>* Friends);
	void ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void OnReadFriendsComplete(bool bWasSuccessful);
	bool ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt);
	void ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void OnWriteProfileSettingsComplete(bool bWasSuccessful);
	bool WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	class UOnlineProfileSettings* GetProfileSettings(unsigned char LocalUserNum);
	void ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void OnReadProfileSettingsComplete(bool bWasSuccessful);
	bool ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	void ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate, unsigned char LocalUserNum);
	void AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate, unsigned char LocalUserNum);
	bool ShowFriendsUI(unsigned char LocalUserNum);
	bool IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	bool AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query);
	bool IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId);
	TEnumAsByte<EFeaturePrivilegeLevel> CanShowPresenceInformation(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanViewPlayerProfiles(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanPurchaseContent(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanDownloadUserContent(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanCommunicate(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanPlayOnline(unsigned char LocalUserNum);
	struct FString GetPlayerNickname(unsigned char LocalUserNum);
	bool GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerId);
	TEnumAsByte<ELoginStatus> GetLoginStatus(unsigned char LocalUserNum);
	void ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void OnLogoutCompleted(bool bWasSuccessful);
	bool Logout(unsigned char LocalUserNum);
	void ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	bool AutoLogin();
	bool Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly);
	bool ShowLoginUI(bool bShowOnlineOnly);
	void OnFriendsChange();
	void OnMutingChange();
	void OnLoginCancelled();
	void OnLoginChange();
};


// Class Engine.OnlineAccountInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;               // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineAccountInterface");
		return ptr;
	}


	bool GetLocalAccountNames(TArray<struct FString>* Accounts);
	bool DeleteLocalAccount(const struct FString& UserName, const struct FString& Password);
	bool RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password);
	bool CreateLocalAccount(const struct FString& UserName, const struct FString& Password);
	void ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void OnCreateOnlineAccountCompleted(TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus);
	bool CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey);
};


// Class Engine.EmitterSpawnable
// 0x0004 (0x01CC - 0x01C8)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                         // 0x01C8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterSpawnable");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
};


// Class Engine.KAssetSpawnable
// 0x0000 (0x01D4 - 0x01D4)
class AKAssetSpawnable : public AKAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAssetSpawnable");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x01F4 - 0x01F4)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorSpawnable");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x0074 - 0x0074)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshMAT");
		return ptr;
	}

};


// Class Engine.SeqEvent_Death
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_Death : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Death");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleGodMode");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleAffectedByHitEffects");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.CoverReplicator
// 0x000C (0x01CC - 0x01C0)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray<struct FCoverReplicationInfo>               CoverReplicationData;                                     // 0x01C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverReplicator");
		return ptr;
	}


	void ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone);
	void ServerSendManualCoverTypeSlots(int Index);
	void NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TEnumAsByte<ECoverType> NewCoverType, TArray<int>* SlotIndices);
	void ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, bool bDone);
	void ServerSendAdjustedSlots(int Index);
	void NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, bool bDone);
	void ServerSendDisabledSlots(int Index);
	void NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, bool bDone);
	void ServerSendEnabledSlots(int Index);
	void NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone);
	void ServerSendInitialCoverReplicationInfo(int Index);
	void ReplicateInitialCoverInfo();
	void PurgeOldEntries();
};


// Class Engine.DebugCameraController
// 0x0010 (0x0538 - 0x0528)
class ADebugCameraController : public APlayerController
{
public:
	class APlayerController*                           OryginalControllerRef;                                    // 0x0528(0x0004)
	class UPlayer*                                     OryginalPlayer;                                           // 0x052C(0x0004)
	unsigned long                                      bIsFrozenRendering : 1;                                   // 0x0530(0x0004)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0534(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}


	void DisableDebugCamera();
	void NormalSpeed();
	void MoreSpeed();
	void SetFreezeRendering();
	void OnDeactivate(class APlayerController* PC);
	void OnActivate(class APlayerController* PC);
	void PostBeginPlay();
};


// Class Engine.GameMessage
// 0x0114 (0x0164 - 0x0050)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                                       // 0x0050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LeftMessage;                                              // 0x005C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedTeamMessage;                                        // 0x0068(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedPlaceMessage;                                       // 0x0074(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedSpawnMessage;                                       // 0x0080(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnteredMessage;                                           // 0x008C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MaxedOutMessage;                                          // 0x0098(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ArbitrationMessage;                                       // 0x00A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OvertimeMessage;                                          // 0x00B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GlobalNameChange;                                         // 0x00BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewTeamMessage;                                           // 0x00C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewTeamMessageTrailer;                                    // 0x00D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoNameChange;                                             // 0x00E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VoteStarted;                                              // 0x00EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VotePassed;                                               // 0x00F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MustHaveStats;                                            // 0x0104(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CantBeSpectator;                                          // 0x0110(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CantBePlayer;                                             // 0x011C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BecameSpectator;                                          // 0x0128(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewPlayerMessage;                                         // 0x0134(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KickWarning;                                              // 0x0140(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewSpecMessage;                                           // 0x014C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SpecEnteredMessage;                                       // 0x0158(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMessage");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class Engine.ScoreBoard
// 0x0004 (0x0448 - 0x0444)
class AScoreBoard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                                     // 0x0444(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScoreBoard");
		return ptr;
	}


	void ChangeState(bool bIsVisible);
	void UpdateScoreBoard();
	bool UpdateGRI();
	void DrawHUD();
};


// Class Engine.DmgType_Suicided
// 0x0000 (0x008C - 0x008C)
class UDmgType_Suicided : public UKillZDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Suicided");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                                      // 0x00DC(0x0004) (Edit)
	unsigned long                                      bToggleTurning : 1;                                       // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleInput");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHUD");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ForceFeedback
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x00DC(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceFeedback");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                                     // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisableTurning : 1;                                      // 0x00DC(0x0004) (Edit)
	unsigned long                                      bHidePlayer : 1;                                          // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisableInput : 1;                                        // 0x00DC(0x0004) (Edit)
	unsigned long                                      bHideHUD : 1;                                             // 0x00DC(0x0004) (Edit)
	unsigned long                                      bSwitchSoundMode : 1;                                     // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleCinematicMode");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.SeqAct_ConsoleCommand
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                                  // 0x00DC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ConsoleCommand");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x01E8 - 0x01D4)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                                    // 0x01D4(0x0004) (Net)
	unsigned long                                      bFadeOnToggle : 1;                                        // 0x01D4(0x0004) (Edit)
	float                                              FadeInDuration;                                           // 0x01D8(0x0004) (Edit)
	float                                              FadeInVolumeLevel;                                        // 0x01DC(0x0004) (Edit)
	float                                              FadeOutDuration;                                          // 0x01E0(0x0004) (Edit)
	float                                              FadeOutVolumeLevel;                                       // 0x01E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimpleToggleable");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void StopPlaying();
	void StartPlaying();
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0024 (0x0060 - 0x003C)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x003C(0x0004) (Edit)
	struct FString                                     GroupName;                                                // 0x0040(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AnimName;                                                 // 0x004C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bOverridePlayingAnim : 1;                                 // 0x0058(0x0004) (Edit)
	float                                              PlayFrequency;                                            // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayFaceFXAnim");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.AnimNotify_ViewShake
// 0x004C (0x0088 - 0x003C)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              ShakeRadius;                                              // 0x003C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0040(0x0004) (Edit)
	struct FVector                                     RotAmplitude;                                             // 0x0044(0x000C) (Edit)
	struct FVector                                     RotFrequency;                                             // 0x0050(0x000C) (Edit)
	struct FVector                                     LocAmplitude;                                             // 0x005C(0x000C) (Edit)
	struct FVector                                     LocFrequency;                                             // 0x0068(0x000C) (Edit)
	float                                              FOVAmplitude;                                             // 0x0074(0x0004) (Edit)
	float                                              FOVFrequency;                                             // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseBoneLocation : 1;                                     // 0x007C(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ViewShake");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.BroadcastHandler
// 0x0008 (0x01C8 - 0x01C0)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                                 // 0x01C0(0x0004)
	unsigned long                                      bMuteSpectators : 1;                                      // 0x01C4(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BroadcastHandler");
		return ptr;
	}


	void AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type);
	void Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type);
	void BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type);
	bool AllowsBroadcast(class AActor* broadcaster, int InLen);
	void UpdateSentText();
};


// Class Engine.ColorScaleVolume
// 0x0010 (0x020C - 0x01FC)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                               // 0x01FC(0x000C) (Edit)
	float                                              InterpTime;                                               // 0x0208(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ColorScaleVolume");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.UIAction_ChangeVisibility
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_ChangeVisibility : public UUIAction
{
public:
	unsigned long                                      bVisible : 1;                                             // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ChangeVisibility");
		return ptr;
	}

};


// Class Engine.UIAction_ConsoleCommand
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_ConsoleCommand : public UUIAction
{
public:
	struct FString                                     Command;                                                  // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ConsoleCommand");
		return ptr;
	}

};


// Class Engine.UIAction_ShowFriendsUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowFriendsUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowFriendsUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowPlayersUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowPlayersUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowPlayersUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowAchievementsUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowAchievementsUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowAchievementsUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowFriendInviteUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowFriendInviteUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowFriendInviteUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowMessagesUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowMessagesUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowMessagesUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowFeedbackUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowFeedbackUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowFeedbackUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowGamerCardUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowGamerCardUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowGamerCardUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowContentMarketplaceUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowContentMarketplaceUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowContentMarketplaceUI");
		return ptr;
	}

};


// Class Engine.UIAction_ShowMembershipMarketplaceUI
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_ShowMembershipMarketplaceUI : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ShowMembershipMarketplaceUI");
		return ptr;
	}

};


// Class Engine.UIAction_SetControllerId
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_SetControllerId : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetControllerId");
		return ptr;
	}

};


// Class Engine.UIAction_SetDatastoreBinding
// 0x000C (0x00F4 - 0x00E8)
class UUIAction_SetDatastoreBinding : public UUIAction_DataStore
{
public:
	struct FString                                     NewMarkup;                                                // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetDatastoreBinding");
		return ptr;
	}

};


// Class Engine.UIEvent_Initialized
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_Initialized : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_Initialized");
		return ptr;
	}

};


// Class Engine.UIAction_SetValue
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_SetValue : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetValue");
		return ptr;
	}

};


// Class Engine.UIAction_SetLabelText
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_SetLabelText : public UUIAction_SetValue
{
public:
	struct FString                                     NewText;                                                  // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetLabelText");
		return ptr;
	}

};


// Class Engine.UIAction_GetTextValue
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_GetTextValue : public UUIAction_GetValue
{
public:
	struct FString                                     StringValue;                                              // 0x00E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetTextValue");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyCover
// 0x000D (0x00E9 - 0x00DC)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray<int>                                        Slots;                                                    // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ECoverType>                            ManualCoverType;                                          // 0x00E8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyCover");
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x0444 - 0x0444)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}


	void PostRender();
	void PostBeginPlay();
};


// Class Engine.DebugCameraInput
// 0x0000 (0x0170 - 0x0170)
class UDebugCameraInput : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraInput");
		return ptr;
	}

};


// Class Engine.DecalLifetime
// 0x0000 (0x003C - 0x003C)
class UDecalLifetime : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalLifetime");
		return ptr;
	}

};


// Class Engine.DecalLifetimeAge
// 0x0000 (0x003C - 0x003C)
class UDecalLifetimeAge : public UDecalLifetime
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalLifetimeAge");
		return ptr;
	}

};


// Class Engine.VolumeTimer
// 0x0004 (0x01C4 - 0x01C0)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                        // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                         // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDamageInstigator");
		return ptr;
	}

};


// Class Engine.DialogueManager
// 0x0000 (0x01C0 - 0x01C0)
class ADialogueManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueManager");
		return ptr;
	}


	bool TriggerDialogueEvent(class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator);
};


// Class Engine.DmgType_Crushed
// 0x0000 (0x008C - 0x008C)
class UDmgType_Crushed : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Crushed");
		return ptr;
	}

};


// Class Engine.DmgType_Fell
// 0x0000 (0x008C - 0x008C)
class UDmgType_Fell : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Fell");
		return ptr;
	}

};


// Class Engine.DmgType_Telefragged
// 0x0000 (0x008C - 0x008C)
class UDmgType_Telefragged : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Telefragged");
		return ptr;
	}

};


// Class Engine.DynamicPhysicsVolume
// 0x0000 (0x0238 - 0x0238)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicPhysicsVolume");
		return ptr;
	}

};


// Class Engine.SeqAct_SetStaticMesh
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetStaticMesh : public USequenceAction
{
public:
	class UStaticMesh*                                 NewStaticMesh;                                            // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetStaticMesh");
		return ptr;
	}

};


// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x01F8 - 0x01F8)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor_Spawnable");
		return ptr;
	}

};


// Class Engine.DynamicTriggerVolume
// 0x0000 (0x01FC - 0x01FC)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicTriggerVolume");
		return ptr;
	}

};


// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00F0 - 0x00DC)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x00DC(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	unsigned long                                      bOverrideScalar : 1;                                      // 0x00E8(0x0004) (Edit)
	float                                              ScalarValue;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetParticleSysParam");
		return ptr;
	}

};


// Class Engine.FailedConnect
// 0x0030 (0x0080 - 0x0050)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[0x4];                                         // 0x0050(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FailedConnect");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	int STATIC_GetFailSwitch(const struct FString& FailString);
};


// Class Engine.GameRules
// 0x0004 (0x01C4 - 0x01C0)
class AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                            // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameRules");
		return ptr;
	}


	void NetDamage(int OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	void ScoreKill(class AController* Killer, class AController* Killed);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int Score);
	bool PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool HandleRestartGame();
	struct FString GetRules();
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void AddGameRules(class AGameRules* GR);
};


// Class Engine.SeqEvent_LevelReset
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_LevelReset : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelReset");
		return ptr;
	}

};


// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x00F8 - 0x00F4)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                               // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PlayerSpawned");
		return ptr;
	}

};


// Class Engine.HeightFog
// 0x0008 (0x01C8 - 0x01C0)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                                // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01C4(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFog");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.TdLOIAddOnInterpActor
// 0x0000 (0x009C - 0x009C)
class UTdLOIAddOnInterpActor : public UTdLOIAddOnObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIAddOnInterpActor");
		return ptr;
	}


	void InitLOIMtrlInstances();
	void InitLOI(class AActor* Player);
	void ActivateLOI();
};


// Class Engine.JuiceCommandlet
// 0x0000 (0x007C - 0x007C)
class UJuiceCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JuiceCommandlet");
		return ptr;
	}


	int Main(const struct FString& Params);
};


// Class Engine.TdLOIAddOnKActor
// 0x0000 (0x009C - 0x009C)
class UTdLOIAddOnKActor : public UTdLOIAddOnObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIAddOnKActor");
		return ptr;
	}


	void InitLOIMtrlInstances();
	void InitLOI(class AActor* Player);
	void ActivateLOI();
};


// Class Engine.SeqAct_AssignController
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                          // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AssignController");
		return ptr;
	}

};


// Class Engine.SeqAct_GiveInventory
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	TArray<class UClass*>                              InventoryList;                                            // 0x00DC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bClearExisting : 1;                                       // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GiveInventory");
		return ptr;
	}

};


// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PickupStatusChange");
		return ptr;
	}

};


// Class Engine.RB_BSJointActor
// 0x0000 (0x01DC - 0x01DC)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointActor");
		return ptr;
	}

};


// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x01DC - 0x01DC)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActorSpawnable");
		return ptr;
	}

};


// Class Engine.RB_HingeActor
// 0x0000 (0x01DC - 0x01DC)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeActor");
		return ptr;
	}

};


// Class Engine.RB_PrismaticActor
// 0x0000 (0x01DC - 0x01DC)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticActor");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointActor
// 0x0000 (0x01DC - 0x01DC)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointActor");
		return ptr;
	}

};


// Class Engine.ScriptConsoleEntry
// 0x000C (0x03F4 - 0x03E8)
class UScriptConsoleEntry : public UUIPanel
{
public:
	class UUIEditBox*                                  InputBox;                                                 // 0x03E8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    UpperConsoleBorder;                                       // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    LowerConsoleBorder;                                       // 0x03F0(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptConsoleEntry");
		return ptr;
	}


	void OnCreateChild(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer);
	void SetValue(const struct FString& NewValue);
	void PostInitialize();
	void Initialized();
};


// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIAbortMoveToActor");
		return ptr;
	}

};


// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                             // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ControlMovieTexture");
		return ptr;
	}


	void Activated();
};


// Class Engine.SeqAct_SetSkeletalMesh
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                          // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSkeletalMesh");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVector
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                             // 0x00DC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVector");
		return ptr;
	}


	void Activated();
};


// Class Engine.SeqAct_UpdateDynamicCover
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_UpdateDynamicCover : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_UpdateDynamicCover");
		return ptr;
	}

};


// Class Engine.SeqEvent_LOS
// 0x000C (0x0100 - 0x00F4)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                                     // 0x00F4(0x0004) (Edit)
	float                                              TriggerDistance;                                          // 0x00F8(0x0004) (Edit)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LOS");
		return ptr;
	}

};


// Class Engine.UISettingsClient
// 0x0000 (0x003C - 0x003C)
class UUISettingsClient : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISettingsClient");
		return ptr;
	}

};


// Class Engine.SessionSettingsProvider_GameInfo
// 0x0000 (0x0078 - 0x0078)
class USessionSettingsProvider_GameInfo : public USessionSettingsProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SessionSettingsProvider_GameInfo");
		return ptr;
	}

};


// Class Engine.TdLOIAddOnSkeletalMeshActor
// 0x0000 (0x009C - 0x009C)
class UTdLOIAddOnSkeletalMeshActor : public UTdLOIAddOnObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIAddOnSkeletalMeshActor");
		return ptr;
	}


	void InitLOIMtrlInstances();
	void InitLOI(class AActor* Player);
	void ActivateLOI();
};


// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x0200 - 0x0200)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMATSpawnable");
		return ptr;
	}

};


// Class Engine.TdLOIAddOnStaticMeshActor
// 0x0000 (0x009C - 0x009C)
class UTdLOIAddOnStaticMeshActor : public UTdLOIAddOnObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TdLOIAddOnStaticMeshActor");
		return ptr;
	}


	void InitLOIMtrlInstances();
	void InitLOI(class AActor* Player);
	void ActivateLOI();
};


// Class Engine.TargetPoint
// 0x0000 (0x01C0 - 0x01C0)
class ATargetPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}

};


// Class Engine.Trigger_Dynamic
// 0x0000 (0x01CC - 0x01CC)
class ATrigger_Dynamic : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_Dynamic");
		return ptr;
	}

};


// Class Engine.Trigger_LOS
// 0x0000 (0x01CC - 0x01CC)
class ATrigger_LOS : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_LOS");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class Engine.TriggerStreamingLevel
// 0x000C (0x01D8 - 0x01CC)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray<struct FLevelStreamingData>                 Levels;                                                   // 0x01CC(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerStreamingLevel");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.UIAction_TabControl
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TabControl : public UUIAction
{
public:
	class UUITabControl*                               TabControl;                                               // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_TabControl");
		return ptr;
	}

};


// Class Engine.UIAction_ActivatePage
// 0x0008 (0x00F0 - 0x00E8)
class UUIAction_ActivatePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToActivate;                                           // 0x00E8(0x0004)
	unsigned long                                      bActivate : 1;                                            // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ActivatePage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_ApplyScrolling
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_ApplyScrolling : public UUIAction
{
public:
	TEnumAsByte<EUIOrientation>                        ScrollOrientation;                                        // 0x00E4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	unsigned long                                      bIncreaseScroll : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bFullPage : 1;                                            // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ApplyScrolling");
		return ptr;
	}

};


// Class Engine.UIAction_EnablePage
// 0x0008 (0x00F0 - 0x00E8)
class UUIAction_EnablePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToEnable;                                             // 0x00E8(0x0004)
	unsigned long                                      bEnable : 1;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_EnablePage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_GetPageReference
// 0x0008 (0x00F0 - 0x00E8)
class UUIAction_GetPageReference : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageReference;                                            // 0x00E8(0x0004)
	int                                                PageIndex;                                                // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetPageReference");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_FindPageByCaption
// 0x0010 (0x0100 - 0x00F0)
class UUIAction_FindPageByCaption : public UUIAction_GetPageReference
{
public:
	struct FString                                     SearchCaption;                                            // 0x00F0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bMarkupString : 1;                                        // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_FindPageByCaption");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_FindPageByIndex
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_FindPageByIndex : public UUIAction_GetPageReference
{
public:
	int                                                SearchIndex;                                              // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_FindPageByIndex");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_GetActivePage
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_GetActivePage : public UUIAction_GetPageReference
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetActivePage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_GetPageCount
// 0x0000 (0x00E8 - 0x00E8)
class UUIAction_GetPageCount : public UUIAction_TabControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetPageCount");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_GetProgressBarValue
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_GetProgressBarValue : public UUIAction_GetValue
{
public:
	float                                              Value;                                                    // 0x00E4(0x0004)
	unsigned long                                      bPercentageValue : 1;                                     // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_GetProgressBarValue");
		return ptr;
	}

};


// Class Engine.UIAction_InsertPage
// 0x0014 (0x00FC - 0x00E8)
class UUIAction_InsertPage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                             // 0x00E8(0x0004) (Edit)
	int                                                InsertIndex;                                              // 0x00EC(0x0004) (Edit)
	unsigned long                                      bFocusPage : 1;                                           // 0x00F0(0x0004) (Edit)
	class UUITabPage*                                  PageToInsert;                                             // 0x00F4(0x0004)
	class UUITabPage*                                  PagePrefab;                                               // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_InsertPage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_PlaySound
// 0x0000 (0x010C - 0x010C)
class UUIAction_PlaySound : public USeqAct_PlaySound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_PlaySound");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class Engine.UIAction_RemovePage
// 0x0004 (0x00EC - 0x00E8)
class UUIAction_RemovePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToRemove;                                             // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_RemovePage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_ReplacePage
// 0x0014 (0x00FC - 0x00E8)
class UUIAction_ReplacePage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                             // 0x00E8(0x0004) (Edit)
	class UUITabPage*                                  PageToRemove;                                             // 0x00EC(0x0004)
	unsigned long                                      bFocusPage : 1;                                           // 0x00F0(0x0004) (Edit)
	class UUITabPage*                                  PageToInsert;                                             // 0x00F4(0x0004)
	class UUITabPage*                                  PagePrefab;                                               // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ReplacePage");
		return ptr;
	}


	void Activated();
};


// Class Engine.UIAction_SetBoolValue
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_SetBoolValue : public UUIAction_SetValue
{
public:
	unsigned long                                      bNewValue : 1;                                            // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetBoolValue");
		return ptr;
	}

};


// Class Engine.UIAction_SetListIndex
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_SetListIndex : public UUIAction_SetValue
{
public:
	int                                                NewIndex;                                                 // 0x00E4(0x0004) (Edit)
	unsigned long                                      bClampInvalidValues : 1;                                  // 0x00E8(0x0004) (Edit)
	unsigned long                                      bActivateListChangeEvent : 1;                             // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetListIndex");
		return ptr;
	}

};


// Class Engine.UIAction_SetProgressBarValue
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_SetProgressBarValue : public UUIAction_SetValue
{
public:
	float                                              NewValue;                                                 // 0x00E4(0x0004) (Edit)
	unsigned long                                      bPercentageValue : 1;                                     // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_SetProgressBarValue");
		return ptr;
	}

};


// Class Engine.UICond_SwitchWidget
// 0x0000 (0x00D4 - 0x00D4)
class UUICond_SwitchWidget : public USeqCond_SwitchObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICond_SwitchWidget");
		return ptr;
	}


	bool IsValidLevelSequenceObject();
};


// Class Engine.UIEvent_SceneActivated
// 0x0004 (0x011C - 0x0118)
class UUIEvent_SceneActivated : public UUIEvent_Scene
{
public:
	unsigned long                                      bInitialActivation : 1;                                   // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SceneActivated");
		return ptr;
	}


	void Deactivated();
};


// Class Engine.UIEvent_SceneDeactivated
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SceneDeactivated : public UUIEvent_Scene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SceneDeactivated");
		return ptr;
	}

};


// Class Engine.UIEvent_TabPageActivated
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageActivated : public UUIEvent_TabControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TabPageActivated");
		return ptr;
	}

};


// Class Engine.UIEvent_TabPageEnabled
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageEnabled : public UUIEvent_TabControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TabPageEnabled");
		return ptr;
	}

};


// Class Engine.UIEvent_TabPageInserted
// 0x0004 (0x0120 - 0x011C)
class UUIEvent_TabPageInserted : public UUIEvent_TabControl
{
public:
	int                                                InsertedIndex;                                            // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TabPageInserted");
		return ptr;
	}

};


// Class Engine.UIEvent_TabPageRemoved
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageRemoved : public UUIEvent_TabControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_TabPageRemoved");
		return ptr;
	}

};


// Class Engine.UIGameInfoSummary
// 0x0040 (0x00A8 - 0x0068)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                                // 0x0068(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameAcronym;                                              // 0x0074(0x000C) (Config, NeedCtorLink)
	struct FString                                     MapPrefix;                                                // 0x0080(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bIsTeamGame : 1;                                          // 0x008C(0x0004) (Config)
	unsigned long                                      bIsDisabled : 1;                                          // 0x008C(0x0004) (Config)
	struct FString                                     GameName;                                                 // 0x0090(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x009C(0x000C) (Const, Config, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIGameInfoSummary");
		return ptr;
	}


	bool IsProviderDisabled();
};


// Class Engine.UIScriptConsoleScene
// 0x000C (0x0254 - 0x0248)
class UUIScriptConsoleScene : public UUIScene
{
public:
	class UUILabel*                                    BufferText;                                               // 0x0248(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    BufferBackground;                                         // 0x024C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UScriptConsoleEntry*                         CommandRegion;                                            // 0x0250(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScriptConsoleScene");
		return ptr;
	}


	void OnCreateChild(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer);
	void PostInitialize();
	void Initialized();
};


// Class Engine.WaterVolume
// 0x0014 (0x024C - 0x0238)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                               // 0x0238(0x0004) (Edit)
	class USoundCue*                                   ExitSound;                                                // 0x023C(0x0004) (Edit)
	class UClass*                                      EntryActor;                                               // 0x0240(0x0004) (Edit)
	class UClass*                                      ExitActor;                                                // 0x0244(0x0004) (Edit)
	class UClass*                                      PawnEntryActor;                                           // 0x0248(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaterVolume");
		return ptr;
	}


	void PlayExitSplash(class AActor* Other);
	void UnTouch(class AActor* Other);
	void PlayEntrySplash(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.WindDirectionalSource
// 0x0004 (0x01C4 - 0x01C0)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x01C0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
