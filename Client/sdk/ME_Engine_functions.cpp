// Mirror's Edge (1.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "../sdk.h"

namespace Classes
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.AnimNode.StopAnim
// (Native, Public)

void UAnimNode::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.StopAnim");

	UAnimNode_StopAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.PlayAnim
// (Native, Public)
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNode::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.PlayAnim");

	UAnimNode_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.FindAnimNode
// (Final, Native, Public)
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UAnimNode*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNode* UAnimNode::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.FindAnimNode");

	UAnimNode_FindAnimNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNode.EditorProfileUpdated
// (Event, Public)
// Parameters:
// struct FName                   ProfileName                    (Parm)

void UAnimNode::EditorProfileUpdated(const struct FName& ProfileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.EditorProfileUpdated");

	UAnimNode_EditorProfileUpdated_Params params;
	params.ProfileName = ProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnCeaseRelevant
// (Event, Public)

void UAnimNode::OnCeaseRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnCeaseRelevant");

	UAnimNode_OnCeaseRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnBecomeRelevant
// (Event, Public)

void UAnimNode::OnBecomeRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnBecomeRelevant");

	UAnimNode_OnBecomeRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnInit
// (Event, Public)

void UAnimNode::OnInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnInit");

	UAnimNode_OnInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnActivateLOI
// (Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void AActor::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnActivateLOI");

	AActor_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnDeactivateLOI
// (Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void AActor::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnDeactivateLOI");

	AActor_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActivateLOI
// (Event, Public)

void AActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateLOI");

	AActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AssignPlayerToLOI
// (Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void AActor::AssignPlayerToLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AssignPlayerToLOI");

	AActor_AssignPlayerToLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InitLOI
// (Defined, Public)

void AActor::InitLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InitLOI");

	AActor_InitLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPackageGuid
// (Final, Native, Static, Public)
// Parameters:
// struct FName                   PackageName                    (Parm)
// struct FGuid                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FGuid AActor::STATIC_GetPackageGuid(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPackageGuid");

	AActor_GetPackageGuid_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostInitAnimTree
// (Event, Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void AActor::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostInitAnimTree");

	AActor_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RootMotionExtracted
// (Simulated, Event, Public, HasOutParms)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)
// struct FBoneAtom               ExtractedRootMotionDelta       (Parm, OutParm)

void AActor::RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionExtracted");

	AActor_RootMotionExtracted_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ExtractedRootMotionDelta != nullptr)
		*ExtractedRootMotionDelta = params.ExtractedRootMotionDelta;
}


// Function Engine.Actor.RootMotionModeChanged
// (Simulated, Event, Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void AActor::RootMotionModeChanged(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionModeChanged");

	AActor_RootMotionModeChanged_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostRenderFor
// (Simulated, Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class UCanvas*                 Canvas                         (Parm)
// struct FVector                 CameraPosition                 (Parm)
// struct FVector                 CameraDir                      (Parm)

void AActor::PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostRenderFor");

	AActor_PostRenderFor_Params params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NativePostRenderFor
// (Simulated, Native, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class UCanvas*                 Canvas                         (Parm)
// struct FVector                 CameraPosition                 (Parm)
// struct FVector                 CameraDir                      (Parm)

void AActor::NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NativePostRenderFor");

	AActor_NativePostRenderFor_Params params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHUDLocation
// (Simulated, Native, Public)
// Parameters:
// struct FVector                 NewHUDLocation                 (Parm)

void AActor::SetHUDLocation(const struct FVector& NewHUDLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHUDLocation");

	AActor_SetHUDLocation_Params params;
	params.NewHUDLocation = NewHUDLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRanOver
// (Event, Public)
// Parameters:
// class ASVehicle*               Vehicle                        (Parm)
// class UPrimitiveComponent*     RunOverComponent               (Parm, EditInline)
// int                            WheelIndex                     (Parm)

void AActor::OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRanOver");

	AActor_OnRanOver_Params params;
	params.Vehicle = Vehicle;
	params.RunOverComponent = RunOverComponent;
	params.WheelIndex = WheelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RigidBodyCollision
// (Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void AActor::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RigidBodyCollision");

	AActor_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.Actor.InterpolationChanged
// (Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationChanged");

	AActor_InterpolationChanged_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationFinished
// (Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationFinished");

	AActor_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationStarted
// (Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AActor::InterpolationStarted(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationStarted");

	AActor_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PickedUpBy
// (Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AActor::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PickedUpBy");

	AActor_PickedUpBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpawnedByKismet
// (Event, Public)

void AActor::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpawnedByKismet");

	AActor_SpawnedByKismet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTargetLocation
// (Simulated, Native, Public)
// Parameters:
// class AActor*                  RequestedBy                    (OptionalParm, Parm)
// bool                           bRequestAlternateLoc           (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTargetLocation");

	AActor_GetTargetLocation_Params params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindGoodEndView
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FRotator                GoodRotation                   (Parm, OutParm)

void AActor::FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindGoodEndView");

	AActor_FindGoodEndView_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GoodRotation != nullptr)
		*GoodRotation = params.GoodRotation;
}


// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// (Simulated, Public)

void AActor::NotifyLocalPlayerTeamReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifyLocalPlayerTeamReceived");

	AActor_NotifyLocalPlayerTeamReceived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetLocationStringFor
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetLocationStringFor(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocationStringFor");

	AActor_GetLocationStringFor_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ScriptGetTeamNum
// (Defined, Simulated, Event, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AActor::ScriptGetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ScriptGetTeamNum");

	AActor_ScriptGetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AActor::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTeamNum");

	AActor_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PawnBaseDied
// (Public)

void AActor::PawnBaseDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PawnBaseDied");

	AActor_PawnBaseDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsPlayerOwned
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsPlayerOwned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayerOwned");

	AActor_IsPlayerOwned_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AActor::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	AActor_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Actor.IsStationary
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsStationary");

	AActor_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorFaceFXAsset
// (Event, Public)
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UFaceFXAsset* AActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorFaceFXAsset");

	AActor_GetActorFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorPlayingFaceFXAnim
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorPlayingFaceFXAnim");

	AActor_IsActorPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetSkelControlScale
// (Event, Public)
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void AActor::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSkelControlScale");

	AActor_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetMorphWeight
// (Event, Public)
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void AActor::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetMorphWeight");

	AActor_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopActorFaceFXAnim
// (Event, Public)

void AActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopActorFaceFXAnim");

	AActor_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayActorFaceFXAnim
// (Event, Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayActorFaceFXAnim");

	AActor_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FinishAnimControl
// (Event, Public)

void AActor::FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnimControl");

	AActor_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetAnimWeights
// (Event, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void AActor::SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimWeights");

	AActor_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetAnimPosition
// (Event, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void AActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimPosition");

	AActor_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BeginAnimControl
// (Event, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void AActor::BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginAnimControl");

	AActor_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimPlay
// (Event, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)

void AActor::OnAnimPlay(class UAnimNodeSequence* SeqNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimPlay");

	AActor_OnAnimPlay_Params params;
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimEnd
// (Event, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// float                          PlayedTime                     (Parm)
// float                          ExcessTime                     (Parm)

void AActor::OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimEnd");

	AActor_OnAnimEnd_Params params;
	params.SeqNode = SeqNode;
	params.PlayedTime = PlayedTime;
	params.ExcessTime = ExcessTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnMakeNoise
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_MakeNoise*       Action                         (Parm)

void AActor::OnMakeNoise(class USeqAct_MakeNoise* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnMakeNoise");

	AActor_OnMakeNoise_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DoKismetAttachment
// (Defined, Public, HasDefaults)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void AActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DoKismetAttachment");

	AActor_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAttachToActor
// (Defined, Public)
// Parameters:
// class USeqAct_AttachToActor*   Action                         (Parm)

void AActor::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAttachToActor");

	AActor_OnAttachToActor_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnToggleHidden
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (Parm)

void AActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnToggleHidden");

	AActor_OnToggleHidden_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnChangeCollision
// (Defined, Public)
// Parameters:
// class USeqAct_ChangeCollision* Action                         (Parm)

void AActor::OnChangeCollision(class USeqAct_ChangeCollision* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnChangeCollision");

	AActor_OnChangeCollision_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetPhysics
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_SetPhysics*      Action                         (Parm)

void AActor::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetPhysics");

	AActor_OnSetPhysics_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetBlockRigidBody
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_SetBlockRigidBody* Action                         (Parm)

void AActor::OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetBlockRigidBody");

	AActor_OnSetBlockRigidBody_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void AActor::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnTeleport");

	AActor_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnHealDamage
// (Defined, Public)
// Parameters:
// class USeqAct_HealDamage*      Action                         (Parm)

void AActor::OnHealDamage(class USeqAct_HealDamage* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnHealDamage");

	AActor_OnHealDamage_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnCauseDamage
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_CauseDamage*     Action                         (Parm)

void AActor::OnCauseDamage(class USeqAct_CauseDamage* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnCauseDamage");

	AActor_OnCauseDamage_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ShutDown
// (Defined, Simulated, Event, Public)

void AActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShutDown");

	AActor_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetNetUpdateTime
// (Final, Native, Public)
// Parameters:
// float                          NewUpdateTime                  (Parm)

void AActor::SetNetUpdateTime(float NewUpdateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetUpdateTime");

	AActor_SetNetUpdateTime_Params params;
	params.NewUpdateTime = NewUpdateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceNetRelevant
// (Defined, Public)

void AActor::ForceNetRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetRelevant");

	AActor_ForceNetRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnDestroy
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void AActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnDestroy");

	AActor_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearLatentAction
// (Final, Defined, Simulated, Public)
// Parameters:
// class UClass*                  actionClass                    (Parm)
// bool                           bAborted                       (OptionalParm, Parm)
// class USeqAct_Latent*          exceptionAction                (OptionalParm, Parm)

void AActor::ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearLatentAction");

	AActor_ClearLatentAction_Params params;
	params.actionClass = actionClass;
	params.bAborted = bAborted;
	params.exceptionAction = exceptionAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FindEventsOfClass
// (Final, Defined, Simulated, Public, HasOutParms)
// Parameters:
// class UClass*                  EventClass                     (Parm)
// TArray<class USequenceEvent*>  out_EventList                  (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bIncludeDisabled               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FindEventsOfClass(class UClass* EventClass, bool bIncludeDisabled, TArray<class USequenceEvent*>* out_EventList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindEventsOfClass");

	AActor_FindEventsOfClass_Params params;
	params.EventClass = EventClass;
	params.bIncludeDisabled = bIncludeDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_EventList != nullptr)
		*out_EventList = params.out_EventList;

	return params.ReturnValue;
}


// Function Engine.Actor.ActivateEventClass
// (Final, Defined, Simulated, Public, HasOutParms)
// Parameters:
// class UClass*                  InClass                        (Parm)
// class AActor*                  InInstigator                   (Parm)
// TArray<class USequenceEvent*>  EventList                      (Const, Parm, OutParm, NeedCtorLink)
// TArray<int>                    ActivateIndices                (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool bTest, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateEventClass");

	AActor_ActivateEventClass_Params params;
	params.InClass = InClass;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventList != nullptr)
		*EventList = params.EventList;
	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;
	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.TriggerEventClass
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class UClass*                  InEventClass                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// int                            ActivateIndex                  (OptionalParm, Parm)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerEventClass");

	AActor_TriggerEventClass_Params params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.TimeSince
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          Time                           (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::TimeSince(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TimeSince");

	AActor_TimeSince_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.EffectIsRelevant
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 SpawnLocation                  (Parm)
// bool                           bForceDedicated                (Parm)
// float                          CullDistance                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float CullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EffectIsRelevant");

	AActor_EffectIsRelevant_Params params;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.CullDistance = CullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CheckMaxEffectDistance
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// float                          CullDistance                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation, float CullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckMaxEffectDistance");

	AActor_CheckMaxEffectDistance_Params params;
	params.P = P;
	params.SpawnLocation = SpawnLocation;
	params.CullDistance = CullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanSplash");

	AActor_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayTeleportEffect
// (Public)
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void AActor::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayTeleportEffect");

	AActor_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsInPain
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPain");

	AActor_IsInPain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsInVolume
// (Defined, Public)
// Parameters:
// class AVolume*                 aVolume                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInVolume(class AVolume* aVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInVolume");

	AActor_IsInVolume_Params params;
	params.aVolume = aVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Reset
// (Event, Public)

void AActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Reset");

	AActor_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetFaceFXAudioComponent
// (Defined, Simulated, Event, Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* AActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetFaceFXAudioComponent");

	AActor_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ModifyHearSoundComponent
// (Simulated, Event, Public)
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void AActor::ModifyHearSoundComponent(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyHearSoundComponent");

	AActor_ModifyHearSoundComponent_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPhysicsName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetPhysicsName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPhysicsName");

	AActor_GetPhysicsName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisplayDebug");

	AActor_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Actor.GetDebugName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetDebugName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDebugName");

	AActor_GetDebugName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetGRI
// (Public)
// Parameters:
// class AGameReplicationInfo*    GRI                            (Parm)

void AActor::SetGRI(class AGameReplicationInfo* GRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetGRI");

	AActor_SetGRI_Params params;
	params.GRI = GRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MatchStarting
// (Public)

void AActor::MatchStarting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MatchStarting");

	AActor_MatchStarting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetLocalString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalString");

	AActor_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ReplaceText
// (Defined, Static, Public, HasOutParms)
// Parameters:
// struct FString                 Text                           (Parm, OutParm, NeedCtorLink)
// struct FString                 Replace                        (Parm, NeedCtorLink)
// struct FString                 With                           (Parm, NeedCtorLink)

void AActor::STATIC_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplaceText");

	AActor_ReplaceText_Params params;
	params.Replace = Replace;
	params.With = With;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;
}


// Function Engine.Actor.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHumanReadableName");

	AActor_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetItemName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 FullName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetItemName(const struct FString& FullName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetItemName");

	AActor_GetItemName_Params params;
	params.FullName = FullName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CalcCamera
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalcCamera");

	AActor_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.Actor.EndViewTarget
// (Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AActor::EndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndViewTarget");

	AActor_EndViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BecomeViewTarget
// (Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AActor::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BecomeViewTarget");

	AActor_BecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CheckForErrors
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckForErrors");

	AActor_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DebugFreezeGame
// (Defined, Public)

void AActor::DebugFreezeGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugFreezeGame");

	AActor_DebugFreezeGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetGravityZ
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityZ");

	AActor_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CheckHitInfo
// (Final, Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTraceHitInfo           HitInfo                        (Parm, OutParm)
// class UPrimitiveComponent*     FallBackComponent              (Parm, EditInline)
// struct FVector                 Dir                            (Parm)
// struct FVector                 out_HitLocation                (Parm, OutParm)

void AActor::CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckHitInfo");

	AActor_CheckHitInfo_Params params;
	params.FallBackComponent = FallBackComponent;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
}


// Function Engine.Actor.TakeRadiusDamage
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeRadiusDamage");

	AActor_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HealDamage
// (Public)
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HealDamage");

	AActor_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TakeDamage
// (Defined, Event, Public)
// Parameters:
// int                            DamageAmount                   (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AActor::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeDamage");

	AActor_TakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KilledBy
// (Public)
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void AActor::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KilledBy");

	AActor_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HurtRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// class AActor*                  IgnoredActor                   (OptionalParm, Parm)
// class AController*             InstigatedByController         (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HurtRadius");

	AActor_HurtRadius_Params params;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopsProjectile
// (Defined, Simulated, Public)
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopsProjectile");

	AActor_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.NotifySkelControlBeyondLimit
// (Simulated, Event, Public)
// Parameters:
// class USkelControlLookAt*      LookAt                         (Parm)

void AActor::NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifySkelControlBeyondLimit");

	AActor_NotifySkelControlBeyondLimit_Params params;
	params.LookAt = LookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConstraintBrokenNotify
// (Simulated, Event, Public)
// Parameters:
// class AActor*                  ConOwner                       (Parm)
// class URB_ConstraintSetup*     ConSetup                       (Parm)
// class URB_ConstraintInstance*  ConInstance                    (Parm)

void AActor::ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConstraintBrokenNotify");

	AActor_ConstraintBrokenNotify_Params params;
	params.ConOwner = ConOwner;
	params.ConSetup = ConSetup;
	params.ConInstance = ConInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetInitialState
// (Defined, Simulated, Event, Public)

void AActor::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetInitialState");

	AActor_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostBeginPlay
// (Event, Public)

void AActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostBeginPlay");

	AActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedTeamMessage
// (Defined, Event, Public)
// Parameters:
// int                            TeamIndex                      (Parm)
// class UClass*                  InMessageClass                 (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AActor::BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedTeamMessage");

	AActor_BroadcastLocalizedTeamMessage_Params params;
	params.TeamIndex = TeamIndex;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedMessage
// (Defined, Event, Public)
// Parameters:
// class UClass*                  InMessageClass                 (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AActor::BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedMessage");

	AActor_BroadcastLocalizedMessage_Params params;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreBeginPlay
// (Defined, Event, Public)

void AActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreBeginPlay");

	AActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FindActorsOfClass
// (Final, Defined, Public, HasOutParms)
// Parameters:
// class UClass*                  ActorClass                     (Parm)
// TArray<class AActor*>          out_Actors                     (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FindActorsOfClass(class UClass* ActorClass, TArray<class AActor*>* out_Actors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindActorsOfClass");

	AActor_FindActorsOfClass_Params params;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Actors != nullptr)
		*out_Actors = params.out_Actors;

	return params.ReturnValue;
}


// Function Engine.Actor.LocalPlayerControllers
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class APlayerController*       PC                             (Parm, OutParm)

void AActor::LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LocalPlayerControllers");

	AActor_LocalPlayerControllers_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PC != nullptr)
		*PC = params.PC;
}


// Function Engine.Actor.AllOwnedComponents
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         OutComponent                   (Parm, OutParm, EditInline)

void AActor::AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllOwnedComponents");

	AActor_AllOwnedComponents_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.Actor.ComponentList
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         out_Component                  (Parm, OutParm, EditInline)

void AActor::ComponentList(class UClass* BaseClass, class UActorComponent** out_Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ComponentList");

	AActor_ComponentList_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Component != nullptr)
		*out_Component = params.out_Component;
}


// Function Engine.Actor.OverlappingActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  out_Actor                      (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bIgnoreHidden                  (OptionalParm, Parm)

void AActor::OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** out_Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverlappingActors");

	AActor_OverlappingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Actor != nullptr)
		*out_Actor = params.out_Actor;
}


// Function Engine.Actor.CollidingActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bUseOverlapCheck               (OptionalParm, Parm)

void AActor::CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollidingActors");

	AActor_CollidingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bUseOverlapCheck = bUseOverlapCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.VisibleCollidingActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)
// bool                           bIgnoreHidden                  (OptionalParm, Parm)

void AActor::VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleCollidingActors");

	AActor_VisibleCollidingActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.VisibleActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (OptionalParm, Parm)
// struct FVector                 Loc                            (OptionalParm, Parm)

void AActor::VisibleActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleActors");

	AActor_VisibleActors_Params params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.TraceActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FVector                 HitLoc                         (Parm, OutParm)
// struct FVector                 HitNorm                        (Parm, OutParm)
// struct FVector                 End                            (Parm)
// struct FVector                 Start                          (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// int                            ExtraTraceFlags                (OptionalParm, Parm)

void AActor::TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceActors");

	AActor_TraceActors_Params params;
	params.BaseClass = BaseClass;
	params.End = End;
	params.Start = Start;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitLoc != nullptr)
		*HitLoc = params.HitLoc;
	if (HitNorm != nullptr)
		*HitNorm = params.HitNorm;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.TouchingActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::TouchingActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActors");

	AActor_TouchingActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.BasedActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::BasedActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BasedActors");

	AActor_BasedActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.ChildActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::ChildActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChildActors");

	AActor_ChildActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.DynamicActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::DynamicActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DynamicActors");

	AActor_DynamicActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.AllActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::AllActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllActors");

	AActor_AllActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.GetURLMap
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetURLMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetURLMap");

	AActor_GetURLMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostTeleport
// (Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTeleport");

	AActor_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreTeleport
// (Public)
// Parameters:
// class ATeleporter*             InTeleporter                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PreTeleport(class ATeleporter* InTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreTeleport");

	AActor_PreTeleport_Params params;
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDestination
// (Final, Native, Public)
// Parameters:
// class AController*             C                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetDestination(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDestination");

	AActor_GetDestination_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SuggestTossVelocity
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 TossVelocity                   (Parm, OutParm)
// struct FVector                 Destination                    (Parm)
// struct FVector                 Start                          (Parm)
// float                          TossSpeed                      (Parm)
// float                          BaseTossZ                      (OptionalParm, Parm)
// float                          DesiredZPct                    (OptionalParm, Parm)
// struct FVector                 CollisionSize                  (OptionalParm, Parm)
// float                          TerminalVelocity               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, struct FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SuggestTossVelocity");

	AActor_SuggestTossVelocity_Params params;
	params.Destination = Destination;
	params.Start = Start;
	params.TossSpeed = TossSpeed;
	params.BaseTossZ = BaseTossZ;
	params.DesiredZPct = DesiredZPct;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayerCanSeeMe
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayerCanSeeMe()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayerCanSeeMe");

	AActor_PlayerCanSeeMe_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MakeNoise
// (Final, Native, Public)
// Parameters:
// float                          Loudness                       (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void AActor::MakeNoise(float Loudness, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySound
// (Final, Native, Public)
// Parameters:
// class USoundCue*               InSoundCue                     (Parm)
// bool                           bNotReplicated                 (OptionalParm, Parm)
// bool                           bNoRepToOwner                  (OptionalParm, Parm)
// bool                           bStopWhenOwnerDestroyed        (OptionalParm, Parm)
// struct FVector                 SoundLocation                  (OptionalParm, Parm)
// bool                           bNoRepToRelevant               (OptionalParm, Parm)
// bool                           bPlayOnSelf                    (OptionalParm, Parm)

void AActor::PlaySound(class USoundCue* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant, bool bPlayOnSelf)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySound");

	AActor_PlaySound_Params params;
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;
	params.bPlayOnSelf = bPlayOnSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CreateAudioComponent
// (Final, Native, Public)
// Parameters:
// class USoundCue*               InSoundCue                     (Parm)
// bool                           bPlay                          (OptionalParm, Parm)
// bool                           bStopWhenOwnerDestroyed        (OptionalParm, Parm)
// bool                           bUseLocation                   (OptionalParm, Parm)
// struct FVector                 SourceLocation                 (OptionalParm, Parm)
// bool                           bAttachToSelf                  (OptionalParm, Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* AActor::CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateAudioComponent");

	AActor_CreateAudioComponent_Params params;
	params.InSoundCue = InSoundCue;
	params.bPlay = bPlay;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;
	params.bAttachToSelf = bAttachToSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerRate
// (Final, Native, Public)
// Parameters:
// struct FName                   TimerFuncName                  (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerRate");

	AActor_GetTimerRate_Params params;
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerCount
// (Final, Native, Public)
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerCount");

	AActor_GetTimerCount_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsTimerActive
// (Final, Native, Public)
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTimerActive");

	AActor_IsTimerActive_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ClearTimer
// (Final, Native, Public)
// Parameters:
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::ClearTimer(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearTimer");

	AActor_ClearTimer_Params params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTimer
// (Final, Native, Public)
// Parameters:
// float                          InRate                         (Parm)
// bool                           inbLoop                        (OptionalParm, Parm)
// struct FName                   inTimerFunc                    (OptionalParm, Parm)
// class UObject*                 inObj                          (OptionalParm, Parm)

void AActor::SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTimer");

	AActor_SetTimer_Params params;
	params.InRate = InRate;
	params.inbLoop = inbLoop;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TornOff
// (Event, Public)

void AActor::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TornOff");

	AActor_TornOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroy
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Destroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroy");

	AActor_Destroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Spawn
// (Final, Native, Public)
// Parameters:
// class UClass*                  SpawnClass                     (Parm)
// class AActor*                  SpawnOwner                     (OptionalParm, Parm)
// struct FName                   SpawnTag                       (OptionalParm, Parm)
// struct FVector                 SpawnLocation                  (OptionalParm, Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// class AActor*                  ActorTemplate                  (OptionalParm, Parm)
// bool                           bNoCollisionFail               (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class AActor* AActor::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Spawn");

	AActor_Spawn_Params params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.ActorTemplate = ActorTemplate;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBoundingCylinder
// (Native, Public, HasOutParms)
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void AActor::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoundingCylinder");

	AActor_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Actor.GetComponentsBoundingBox
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FBox                    ActorBox                       (Parm, OutParm)

void AActor::GetComponentsBoundingBox(struct FBox* ActorBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsBoundingBox");

	AActor_GetComponentsBoundingBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorBox != nullptr)
		*ActorBox = params.ActorBox;
}


// Function Engine.Actor.IsOverlapping
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsOverlapping(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlapping");

	AActor_IsOverlapping_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ContainsPoint
// (Final, Native, Public)
// Parameters:
// struct FVector                 Spot                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ContainsPoint(const struct FVector& Spot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ContainsPoint");

	AActor_ContainsPoint_Params params;
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindSpot
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 BoxExtent                      (Parm)
// struct FVector                 SpotLocation                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindSpot");

	AActor_FindSpot_Params params;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpotLocation != nullptr)
		*SpotLocation = params.SpotLocation;

	return params.ReturnValue;
}


// Function Engine.Actor.FastTrace
// (Final, Native, Public)
// Parameters:
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// struct FVector                 BoxExtent                      (OptionalParm, Parm)
// bool                           bTraceBullet                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FastTrace");

	AActor_FastTrace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.BoxExtent = BoxExtent;
	params.bTraceBullet = bTraceBullet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PointCheckComponent
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, EditInline)
// struct FVector                 PointLocation                  (Parm)
// struct FVector                 PointExtent                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PointCheckComponent");

	AActor_PointCheckComponent_Params params;
	params.InComponent = InComponent;
	params.PointLocation = PointLocation;
	params.PointExtent = PointExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceComponent
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// class UPrimitiveComponent*     InComponent                    (Parm, EditInline)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceComponent");

	AActor_TraceComponent_Params params;
	params.InComponent = InComponent;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.Trace
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm, OutParm)
// int                            ExtraTraceFlags                (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trace");

	AActor_Trace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.OutsideWorldBounds
// (Defined, Simulated, Event, Public)

void AActor::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OutsideWorldBounds");

	AActor_OutsideWorldBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FellOutOfWorld
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FellOutOfWorld");

	AActor_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.VolumeBasedDestroy
// (Defined, Simulated, Public)
// Parameters:
// class APhysicsVolume*          PV                             (Parm)

void AActor::VolumeBasedDestroy(class APhysicsVolume* PV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VolumeBasedDestroy");

	AActor_VolumeBasedDestroy_Params params;
	params.PV = PV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UsedBy
// (Defined, Public)
// Parameters:
// class APawn*                   User                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UsedBy");

	AActor_UsedBy_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OverRotated
// (Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FRotator                out_Desired                    (Parm, OutParm)
// struct FRotator                out_Actual                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverRotated");

	AActor_OverRotated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Desired != nullptr)
		*out_Desired = params.out_Desired;
	if (out_Actual != nullptr)
		*out_Actual = params.out_Actual;

	return params.ReturnValue;
}


// Function Engine.Actor.ClampRotation
// (Final, Simulated, Native, Public, HasOutParms)
// Parameters:
// struct FRotator                out_Rot                        (Parm, OutParm)
// struct FRotator                rBase                          (Parm)
// struct FRotator                rUpperLimits                   (Parm)
// struct FRotator                rLowerLimits                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator* out_Rot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClampRotation");

	AActor_ClampRotation_Params params;
	params.rBase = rBase;
	params.rUpperLimits = rUpperLimits;
	params.rLowerLimits = rLowerLimits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Rot != nullptr)
		*out_Rot = params.out_Rot;

	return params.ReturnValue;
}


// Function Engine.Actor.RanInto
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RanInto");

	AActor_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachedBy
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachedBy");

	AActor_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachingOn
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachingOn");

	AActor_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CollisionChanged
// (Event, Public)

void AActor::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollisionChanged");

	AActor_CollisionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpecialHandling
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpecialHandling");

	AActor_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Detach
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Detach");

	AActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Attach
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Attach");

	AActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BaseChange
// (Event, Public)

void AActor::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BaseChange");

	AActor_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Bump
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitNormal                      (Parm)

void AActor::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Bump");

	AActor_Bump_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnTouch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTouch");

	AActor_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTouch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTouch");

	AActor_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Touch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Touch");

	AActor_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PhysicsVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void AActor::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PhysicsVolumeChange");

	AActor_PhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Landed
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void AActor::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Landed");

	AActor_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Falling
// (Event, Public)

void AActor::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Falling");

	AActor_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void AActor::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HitWall");

	AActor_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Timer
// (Event, Public)

void AActor::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Timer");

	AActor_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Tick
// (Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AActor::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Tick");

	AActor_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LostChild
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::LostChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LostChild");

	AActor_LostChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GainedChild
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::GainedChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GainedChild");

	AActor_GainedChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroyed
// (Event, Public)

void AActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroyed");

	AActor_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickGroup
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm)

void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	AActor_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DetachComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         ExComponent                    (Parm, EditInline)

void AActor::DetachComponent(class UActorComponent* ExComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachComponent");

	AActor_DetachComponent_Params params;
	params.ExComponent = ExComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AttachComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         NewComponent                   (Parm, EditInline)

void AActor::AttachComponent(class UActorComponent* NewComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AttachComponent");

	AActor_AttachComponent_Params params;
	params.NewComponent = NewComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnClock
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::UnClock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnClock");

	AActor_UnClock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.Clock
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::Clock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Clock");

	AActor_Clock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.SetPhysics
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)

void AActor::SetPhysics(TEnumAsByte<EPhysics> newPhysics)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetPhysics");

	AActor_SetPhysics_Params params;
	params.newPhysics = newPhysics;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOnlyOwnerSee
// (Final, Native, Public)
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm)

void AActor::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOnlyOwnerSee");

	AActor_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHidden
// (Final, Native, Public)
// Parameters:
// bool                           bNewHidden                     (Parm)

void AActor::SetHidden(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHidden");

	AActor_SetHidden_Params params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ChartData
// (Final, Native, Public)
// Parameters:
// struct FString                 DataName                       (Parm, NeedCtorLink)
// float                          DataValue                      (Parm)

void AActor::ChartData(const struct FString& DataName, float DataValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChartData");

	AActor_ChartData_Params params;
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugArc
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Origin                         (Parm)
// struct FVector                 Up                             (Parm)
// struct FVector                 Forward                        (Parm)
// float                          Size                           (Parm)
// int                            Degrees                        (Parm)
// int                            ArcDegreesResolution           (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bUseDistanceMarker             (OptionalParm, Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugArc(const struct FVector& Origin, const struct FVector& Up, const struct FVector& Forward, float Size, int Degrees, int ArcDegreesResolution, unsigned char R, unsigned char G, unsigned char B, bool bUseDistanceMarker, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugArc");

	AActor_DrawDebugArc_Params params;
	params.Origin = Origin;
	params.Up = Up;
	params.Forward = Forward;
	params.Size = Size;
	params.Degrees = Degrees;
	params.ArcDegreesResolution = ArcDegreesResolution;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bUseDistanceMarker = bUseDistanceMarker;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCone
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Origin                         (Parm)
// struct FVector                 Direction                      (Parm)
// float                          Length                         (Parm)
// float                          AngleWidth                     (Parm)
// float                          AngleHeight                    (Parm)
// int                            NumSides                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCone");

	AActor_DrawDebugCone_Params params;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.DrawColor = DrawColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCylinder
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// float                          Radius                         (Parm)
// int                            Segments                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCylinder");

	AActor_DrawDebugCylinder_Params params;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugSphereTime
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Center                         (Parm)
// float                          Radius                         (Parm)
// int                            Segments                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// float                          timeToLive                     (OptionalParm, Parm)

void AActor::STATIC_DrawDebugSphereTime(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, float timeToLive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphereTime");

	AActor_DrawDebugSphereTime_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.timeToLive = timeToLive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugSphere
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Center                         (Parm)
// float                          Radius                         (Parm)
// int                            Segments                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphere");

	AActor_DrawDebugSphere_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCoordinateSystem
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 AxisLoc                        (Parm)
// struct FRotator                AxisRot                        (Parm)
// float                          Scale                          (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCoordinateSystem");

	AActor_DrawDebugCoordinateSystem_Params params;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugBox
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Center                         (Parm)
// struct FVector                 Extent                         (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugBox");

	AActor_DrawDebugBox_Params params;
	params.Center = Center;
	params.Extent = Extent;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugBoxTime
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 Center                         (Parm)
// struct FVector                 Extent                         (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// float                          timeToLive                     (OptionalParm, Parm)

void AActor::STATIC_DrawDebugBoxTime(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, float timeToLive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugBoxTime");

	AActor_DrawDebugBoxTime_Params params;
	params.Center = Center;
	params.Extent = Extent;
	params.R = R;
	params.G = G;
	params.B = B;
	params.timeToLive = timeToLive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugLineTime
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 LineStart                      (Parm)
// struct FVector                 LineEnd                        (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// float                          timeToLive                     (OptionalParm, Parm)

void AActor::STATIC_DrawDebugLineTime(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, float timeToLive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLineTime");

	AActor_DrawDebugLineTime_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;
	params.timeToLive = timeToLive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugLine
// (Final, Native, Static, Public)
// Parameters:
// struct FVector                 LineStart                      (Parm)
// struct FVector                 LineEnd                        (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void AActor::STATIC_DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLine");

	AActor_DrawDebugLine_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushPersistentDebugLines
// (Final, Native, Static, Public)

void AActor::STATIC_FlushPersistentDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushPersistentDebugLines");

	AActor_FlushPersistentDebugLines_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetForcedInitialReplicatedProperty
// (Final, Native, Public)
// Parameters:
// class UProperty*               PropToReplicate                (Parm)
// bool                           bAdd                           (Parm)

void AActor::SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetForcedInitialReplicatedProperty");

	AActor_SetForcedInitialReplicatedProperty_Params params;
	params.PropToReplicate = PropToReplicate;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReplicatedEvent
// (Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicatedEvent");

	AActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsOwnedBy
// (Final, Native, Public)
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsOwnedBy(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOwnedBy");

	AActor_IsOwnedBy_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBaseMost
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::GetBaseMost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBaseMost");

	AActor_GetBaseMost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsBasedOn
// (Final, Native, Public)
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsBasedOn(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBasedOn");

	AActor_IsBasedOn_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindBase
// (Native, Public)

void AActor::FindBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindBase");

	AActor_FindBase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOwner
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewOwner                       (Parm)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBase
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewBase                        (Parm)
// struct FVector                 NewFloor                       (OptionalParm, Parm)
// class USkeletalMeshComponent*  SkelComp                       (OptionalParm, Parm, EditInline)
// struct FName                   AttachName                     (OptionalParm, Parm)

void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBase");

	AActor_SetBase_Params params;
	params.NewBase = NewBase;
	params.NewFloor = NewFloor;
	params.SkelComp = SkelComp;
	params.AttachName = AttachName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTerminalVelocity
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetTerminalVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTerminalVelocity");

	AActor_GetTerminalVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AutonomousPhysics
// (Final, Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm)

void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AutonomousPhysics");

	AActor_AutonomousPhysics_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MoveSmooth
// (Final, Native, Public)
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::MoveSmooth(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveSmooth");

	AActor_MoveSmooth_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetHardAttach
// (Final, Native, Public)
// Parameters:
// bool                           bNewHardAttach                 (OptionalParm, Parm)

void AActor::SetHardAttach(bool bNewHardAttach)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHardAttach");

	AActor_SetHardAttach_Params params;
	params.bNewHardAttach = bNewHardAttach;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetRelativeLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeLocation");

	AActor_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRelativeRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeRotation");

	AActor_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetZone
// (Final, Native, Public)
// Parameters:
// bool                           bForceRefresh                  (Parm)

void AActor::SetZone(bool bForceRefresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetZone");

	AActor_SetZone_Params params;
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MovingWhichWay
// (Native, Public, HasOutParms)
// Parameters:
// float                          Amount                         (Parm, OutParm)
// TEnumAsByte<EMoveDir>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EMoveDir> AActor::MovingWhichWay(float* Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MovingWhichWay");

	AActor_MovingWhichWay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Amount != nullptr)
		*Amount = params.Amount;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRotation");

	AActor_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLocation");

	AActor_SetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Move
// (Final, Native, Public)
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Move(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Move");

	AActor_Move_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetDrawScale3D
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewScale3D                     (Parm)

void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale3D");

	AActor_SetDrawScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDrawScale
// (Final, Native, Public)
// Parameters:
// float                          NewScale                       (Parm)

void AActor::SetDrawScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale");

	AActor_SetDrawScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionType
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ECollisionType>    NewCollisionType               (Parm)

void AActor::SetCollisionType(TEnumAsByte<ECollisionType> NewCollisionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionType");

	AActor_SetCollisionType_Params params;
	params.NewCollisionType = NewCollisionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionSize
// (Final, Native, Public)
// Parameters:
// float                          NewRadius                      (Parm)
// float                          NewHeight                      (Parm)

void AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionSize");

	AActor_SetCollisionSize_Params params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollision
// (Final, Native, Public)
// Parameters:
// bool                           bNewColActors                  (OptionalParm, Parm)
// bool                           bNewBlockActors                (OptionalParm, Parm)
// bool                           bNewIgnoreEncroachers          (OptionalParm, Parm)

void AActor::SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollision");

	AActor_SetCollision_Params params;
	params.bNewColActors = bNewColActors;
	params.bNewBlockActors = bNewBlockActors;
	params.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FinishAnim
// (Final, Latent, Native, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)

void AActor::FinishAnim(class UAnimNodeSequence* SeqNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnim");

	AActor_FinishAnim_Params params;
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Sleep
// (Final, Latent, Native, Public)
// Parameters:
// float                          Seconds                        (Parm)

void AActor::Sleep(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Sleep");

	AActor_Sleep_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConsoleCommand");

	AActor_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ForceUpdateComponents
// (Native, Public)
// Parameters:
// bool                           bCollisionUpdate               (OptionalParm, Parm)
// bool                           bTransformOnly                 (OptionalParm, Parm)

void AActor::ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceUpdateComponents");

	AActor_ForceUpdateComponents_Params params;
	params.bCollisionUpdate = bCollisionUpdate;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.OnMatchingNetworks
// (Defined, Simulated, Public)
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::OnMatchingNetworks(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.OnMatchingNetworks");

	ANavigationPoint_OnMatchingNetworks_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.OnToggle
// (Defined, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ANavigationPoint::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.OnToggle");

	ANavigationPoint_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.GetAllNavInRadius
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// class AActor*                  chkActor                       (Parm)
// struct FVector                 ChkPoint                       (Parm)
// float                          Radius                         (Parm)
// TArray<class ANavigationPoint*> out_NavList                    (Parm, OutParm, NeedCtorLink)
// bool                           bSkipBlocked                   (OptionalParm, Parm)
// int                            inNetworkID                    (OptionalParm, Parm)
// struct FCylinder               MinSize                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::STATIC_GetAllNavInRadius(class AActor* chkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize, TArray<class ANavigationPoint*>* out_NavList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetAllNavInRadius");

	ANavigationPoint_GetAllNavInRadius_Params params;
	params.chkActor = chkActor;
	params.ChkPoint = ChkPoint;
	params.Radius = Radius;
	params.bSkipBlocked = bSkipBlocked;
	params.inNetworkID = inNetworkID;
	params.MinSize = MinSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NavList != nullptr)
		*out_NavList = params.out_NavList;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToPoint
// (Final, Defined, Static, Public)
// Parameters:
// class AActor*                  chkActor                       (Parm)
// struct FVector                 ChkPoint                       (Parm)
// class UClass*                  RequiredClass                  (OptionalParm, Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ANavigationPoint::STATIC_GetNearestNavToPoint(class AActor* chkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToPoint");

	ANavigationPoint_GetNearestNavToPoint_Params params;
	params.chkActor = chkActor;
	params.ChkPoint = ChkPoint;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToActor
// (Final, Defined, Static, Public)
// Parameters:
// class AActor*                  chkActor                       (Parm)
// class UClass*                  RequiredClass                  (OptionalParm, Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (OptionalParm, Parm, NeedCtorLink)
// float                          MinDist                        (OptionalParm, Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ANavigationPoint::STATIC_GetNearestNavToActor(class AActor* chkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToActor");

	ANavigationPoint_GetNearestNavToActor_Params params;
	params.chkActor = chkActor;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;
	params.MinDist = MinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.IsAvailableTo
// (Defined, Public)
// Parameters:
// class AActor*                  chkActor                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::IsAvailableTo(class AActor* chkActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsAvailableTo");

	ANavigationPoint_IsAvailableTo_Params params;
	params.chkActor = chkActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ProceedWithMove");

	ANavigationPoint_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SuggestMovePreparation");

	ANavigationPoint_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.DetourWeight
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ANavigationPoint::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.DetourWeight");

	ANavigationPoint_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.Accept
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Accept");

	ANavigationPoint_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SpecialCost
// (Event, Public)
// Parameters:
// class APawn*                   Seeker                         (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ANavigationPoint::SpecialCost(class APawn* Seeker, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SpecialCost");

	ANavigationPoint_SpecialCost_Params params;
	params.Seeker = Seeker;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.CanTeleport
// (Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanTeleport");

	ANavigationPoint_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetReachSpecTo
// (Final, Native, Public)
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// class UReachSpec*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UReachSpec* ANavigationPoint::GetReachSpecTo(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetReachSpecTo");

	ANavigationPoint_GetReachSpecTo_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetBoundingCylinder
// (Native, Public, HasOutParms)
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void ANavigationPoint::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetBoundingCylinder");

	ANavigationPoint_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.NavigationPoint.CanSee
// (Final, Native, Public)
// Parameters:
// class ANavigationPoint*        Other                          (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::CanSee(class ANavigationPoint* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanSee");

	ANavigationPoint_CanSee_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SeenFrom
// (Final, Native, Public)
// Parameters:
// class ANavigationPoint*        Other                          (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::SeenFrom(class ANavigationPoint* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SeenFrom");

	ANavigationPoint_SeenFrom_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.CanBeSeenFrom
// (Native, Public)
// Parameters:
// struct FVector                 Offset                         (Parm)
// class ANavigationPoint*        Other                          (Parm)
// struct FVector                 otherOffset                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::CanBeSeenFrom(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanBeSeenFrom");

	ANavigationPoint_CanBeSeenFrom_Params params;
	params.Offset = Offset;
	params.Other = Other;
	params.otherOffset = otherOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.HasVisibilityTo
// (Native, Public)
// Parameters:
// struct FVector                 Offset                         (Parm)
// class ANavigationPoint*        Other                          (Parm)
// struct FVector                 otherOffset                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::HasVisibilityTo(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.HasVisibilityTo");

	ANavigationPoint_HasVisibilityTo_Params params;
	params.Offset = Offset;
	params.Other = Other;
	params.otherOffset = otherOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.Unoccupy
// (Final, Native, Public)
// Parameters:
// class AController*             OldUser                        (Parm)

void ANavigationPoint::Unoccupy(class AController* OldUser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Unoccupy");

	ANavigationPoint_Unoccupy_Params params;
	params.OldUser = OldUser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.Occupy
// (Final, Native, Public)
// Parameters:
// class AController*             NewUser                        (Parm)

void ANavigationPoint::Occupy(class AController* NewUser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Occupy");

	ANavigationPoint_Occupy_Params params;
	params.NewUser = NewUser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.Usage
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ANavigationPoint::Usage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Usage");

	ANavigationPoint_Usage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetDebugString
// (Defined, Simulated, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ACoverLink::GetDebugString(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugString");

	ACoverLink_GetDebugString_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AddCoverSlot
// (Final, Native, Public)
// Parameters:
// struct FVector                 SlotLocation                   (Parm)
// struct FRotator                SlotRotation                   (Parm)
// int                            SlotIdx                        (OptionalParm, Parm)
// bool                           bForceSlotUpdate               (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ACoverLink::AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AddCoverSlot");

	ACoverLink_AddCoverSlot_Params params;
	params.SlotLocation = SlotLocation;
	params.SlotRotation = SlotRotation;
	params.SlotIdx = SlotIdx;
	params.bForceSlotUpdate = bForceSlotUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSwatTurnTarget
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            Direction                      (Parm)
// struct FCoverReference         out_Info                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverReference* out_Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSwatTurnTarget");

	ACoverLink_GetSwatTurnTarget_Params params;
	params.SlotIdx = SlotIdx;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;

	return params.ReturnValue;
}


// Function Engine.CoverLink.OnToggle
// (Defined, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ACoverLink::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnToggle");

	ACoverLink_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.IsEnabled
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEnabled");

	ACoverLink_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AutoAdjustSlot
// (Final, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bOnlyCheckLeans                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AutoAdjustSlot");

	ACoverLink_AutoAdjustSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bOnlyCheckLeans = bOnlyCheckLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.OnModifyCover
// (Defined, Public)
// Parameters:
// class USeqAct_ModifyCover*     Action                         (Parm)

void ACoverLink::OnModifyCover(class USeqAct_ModifyCover* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnModifyCover");

	ACoverLink_OnModifyCover_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetSlotEnabled
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bEnable                        (Parm)

void ACoverLink::SetSlotEnabled(int SlotIdx, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotEnabled");

	ACoverLink_SetSlotEnabled_Params params;
	params.SlotIdx = SlotIdx;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetDisabled
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           bNewDisabled                   (Parm)

void ACoverLink::SetDisabled(bool bNewDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetDisabled");

	ACoverLink_SetDisabled_Params params;
	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetSlotActions
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            SlotIdx                        (Parm)
// TArray<TEnumAsByte<ECoverAction>> Actions                        (Parm, OutParm, NeedCtorLink)

void ACoverLink::GetSlotActions(int SlotIdx, TArray<TEnumAsByte<ECoverAction>>* Actions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotActions");

	ACoverLink_GetSlotActions_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actions != nullptr)
		*Actions = params.Actions;
}


// Function Engine.CoverLink.HasFireLinkTo
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkCover                       (Parm)
// bool                           bAllowFallbackLinks            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.HasFireLinkTo");

	ACoverLink_HasFireLinkTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.bAllowFallbackLinks = bAllowFallbackLinks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetFireLinkTo
// (Native, Public, HasOutParms)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkCover                       (Parm)
// TEnumAsByte<ECoverAction>      ChkAction                      (Parm)
// TEnumAsByte<ECoverType>        ChkType                        (Parm)
// int                            out_FireLinkIdx                (Parm, OutParm)
// TArray<int>                    out_Items                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<ECoverAction> ChkAction, TEnumAsByte<ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTo");

	ACoverLink_GetFireLinkTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.ChkAction = ChkAction;
	params.ChkType = ChkType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FireLinkIdx != nullptr)
		*out_FireLinkIdx = params.out_FireLinkIdx;
	if (out_Items != nullptr)
		*out_Items = params.out_Items;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowLeftTransition
// (Final, Defined, Simulated, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AllowLeftTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowLeftTransition");

	ACoverLink_AllowLeftTransition_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowRightTransition
// (Final, Defined, Simulated, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::AllowRightTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowRightTransition");

	ACoverLink_AllowRightTransition_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsRightEdgeSlot
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsRightEdgeSlot");

	ACoverLink_IsRightEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsLeftEdgeSlot
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsLeftEdgeSlot");

	ACoverLink_IsLeftEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsEdgeSlot
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bIgnoreLeans                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEdgeSlot");

	ACoverLink_IsEdgeSlot_Params params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.FindSlots
// (Final, Simulated, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 CheckLocation                  (Parm)
// float                          MaxDistance                    (Parm)
// int                            LeftSlotIdx                    (Parm, OutParm)
// int                            RightSlotIdx                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.FindSlots");

	ACoverLink_FindSlots_Params params;
	params.CheckLocation = CheckLocation;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LeftSlotIdx != nullptr)
		*LeftSlotIdx = params.LeftSlotIdx;
	if (RightSlotIdx != nullptr)
		*RightSlotIdx = params.RightSlotIdx;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsStationarySlot
// (Final, Defined, Simulated, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsStationarySlot(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsStationarySlot");

	ACoverLink_IsStationarySlot_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsValidClaim
// (Final, Native, Public)
// Parameters:
// class AController*             ChkClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bSkipTeamCheck                 (OptionalParm, Parm)
// bool                           bSkipOverlapCheck              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsValidClaim(class AController* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaim");

	ACoverLink_IsValidClaim_Params params;
	params.ChkClaim = ChkClaim;
	params.SlotIdx = SlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.UnClaim
// (Final, Defined, Event, Public)
// Parameters:
// class AController*             OldClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bUnclaimAll                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnClaim");

	ACoverLink_UnClaim_Params params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.Claim
// (Final, Defined, Event, Public)
// Parameters:
// class AController*             NewClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::Claim(class AController* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.Claim");

	ACoverLink_Claim_Params params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsExposedTo
// (Final, Simulated, Native, Public, HasOutParms)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverInfo              ChkSlot                        (Parm)
// float                          out_ExposedScale               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverLink::IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsExposedTo");

	ACoverLink_IsExposedTo_Params params;
	params.SlotIdx = SlotIdx;
	params.ChkSlot = ChkSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ExposedScale != nullptr)
		*out_ExposedScale = params.out_ExposedScale;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotFireLocation
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverAction>      Action                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverLink::GetSlotFireLocation(int SlotIdx, TEnumAsByte<ECoverAction> Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotFireLocation");

	ACoverLink_GetSlotFireLocation_Params params;
	params.SlotIdx = SlotIdx;
	params.Action = Action;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotMarker
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// class ACoverSlotMarker*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ACoverSlotMarker* ACoverLink::GetSlotMarker(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotMarker");

	ACoverLink_GetSlotMarker_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotViewPoint
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverType>        Type                           (OptionalParm, Parm)
// TEnumAsByte<ECoverAction>      Action                         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverLink::GetSlotViewPoint(int SlotIdx, TEnumAsByte<ECoverType> Type, TEnumAsByte<ECoverAction> Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotViewPoint");

	ACoverLink_GetSlotViewPoint_Params params;
	params.SlotIdx = SlotIdx;
	params.Type = Type;
	params.Action = Action;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotRotation
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bForceUseOffset                (OptionalParm, Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ACoverLink::GetSlotRotation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotRotation");

	ACoverLink_GetSlotRotation_Params params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotLocation
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           bForceUseOffset                (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverLink::GetSlotLocation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotLocation");

	ACoverLink_GetSlotLocation_Params params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverSlotMarker.IsValidClaim
// (Final, Native, Public)
// Parameters:
// class AController*             ChkClaim                       (Parm)
// bool                           bSkipTeamCheck                 (OptionalParm, Parm)
// bool                           bSkipOverlapCheck              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverSlotMarker::IsValidClaim(class AController* ChkClaim, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverSlotMarker.IsValidClaim");

	ACoverSlotMarker_IsValidClaim_Params params;
	params.ChkClaim = ChkClaim;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverSlotMarker.GetSlotRotation
// (Simulated, Native, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ACoverSlotMarker::GetSlotRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverSlotMarker.GetSlotRotation");

	ACoverSlotMarker_GetSlotRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverSlotMarker.GetSlotLocation
// (Simulated, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ACoverSlotMarker::GetSlotLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverSlotMarker.GetSlotLocation");

	ACoverSlotMarker_GetSlotLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverSlotMarker.PostBeginPlay
// (Defined, Event, Public)

void ACoverSlotMarker::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverSlotMarker.PostBeginPlay");

	ACoverSlotMarker_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.DispatchExternalUIChange
// (Event, Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void UEngine::DispatchExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.DispatchExternalUIChange");

	UEngine_DispatchExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.AddOverlayWrapped
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// class UFont*                   Font                           (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          ScaleX                         (Parm)
// float                          ScaleY                         (Parm)
// float                          WrapWidth                      (Parm)
// struct FLinearColor            TextColor                      (OptionalParm, Parm, OutParm)

void UEngine::STATIC_AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth, struct FLinearColor* TextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlayWrapped");

	UEngine_AddOverlayWrapped_Params params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.WrapWidth = WrapWidth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TextColor != nullptr)
		*TextColor = params.TextColor;
}


// Function Engine.Engine.AddOverlay
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// class UFont*                   Font                           (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          ScaleX                         (Parm)
// float                          ScaleY                         (Parm)
// bool                           bIsCentered                    (Parm)
// struct FLinearColor            TextColor                      (OptionalParm, Parm, OutParm)

void UEngine::STATIC_AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered, struct FLinearColor* TextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlay");

	UEngine_AddOverlay_Params params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.bIsCentered = bIsCentered;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TextColor != nullptr)
		*TextColor = params.TextColor;
}


// Function Engine.Engine.RemoveAllOverlays
// (Final, Native, Static, Public)

void UEngine::STATIC_RemoveAllOverlays()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.RemoveAllOverlays");

	UEngine_RemoveAllOverlays_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.StopMovie
// (Final, Native, Static, Public)
// Parameters:
// bool                           bDelayStopUntilGameHasRendered (Parm)

void UEngine::STATIC_StopMovie(bool bDelayStopUntilGameHasRendered)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.StopMovie");

	UEngine_StopMovie_Params params;
	params.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.PlayLoadMapMovie
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::STATIC_PlayLoadMapMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.PlayLoadMapMovie");

	UEngine_PlayLoadMapMovie_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLastMovieName
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UEngine::STATIC_GetLastMovieName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLastMovieName");

	UEngine_GetLastMovieName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAudioDevice
// (Final, Native, Static, Public)
// Parameters:
// class UAudioDevice*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UAudioDevice* UEngine::STATIC_GetAudioDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAudioDevice");

	UEngine_GetAudioDevice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsSplitScreen
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UEngine::STATIC_IsSplitScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsSplitScreen");

	UEngine_IsSplitScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAdditionalFont
// (Final, Native, Static, Public)
// Parameters:
// int                            AdditionalFontIndex            (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::STATIC_GetAdditionalFont(int AdditionalFontIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAdditionalFont");

	UEngine_GetAdditionalFont_Params params;
	params.AdditionalFontIndex = AdditionalFontIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLargeFont
// (Final, Native, Static, Public)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::STATIC_GetLargeFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLargeFont");

	UEngine_GetLargeFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetMediumFont
// (Final, Native, Static, Public)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::STATIC_GetMediumFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetMediumFont");

	UEngine_GetMediumFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSmallFont
// (Final, Native, Static, Public)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::STATIC_GetSmallFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSmallFont");

	UEngine_GetSmallFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetTinyFont
// (Final, Native, Static, Public)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* UEngine::STATIC_GetTinyFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetTinyFont");

	UEngine_GetTinyFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetCurrentWorldInfo
// (Final, Native, Static, Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* UEngine::STATIC_GetCurrentWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetCurrentWorldInfo");

	UEngine_GetCurrentWorldInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.DispatchExternalUIChange
// (Defined, Event, Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void UGameEngine::DispatchExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.DispatchExternalUIChange");

	UGameEngine_DispatchExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameEngine.GetOnlineSubsystem
// (Final, Native, Static, Public)
// Parameters:
// class UOnlineSubsystem*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineSubsystem* UGameEngine::STATIC_GetOnlineSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetOnlineSubsystem");

	UGameEngine_GetOnlineSubsystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.ForceUpdate
// (Final, Native, Public)
// Parameters:
// bool                           bTransformOnly                 (Parm)

void UActorComponent::ForceUpdate(bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ForceUpdate");

	UActorComponent_ForceUpdate_Params params;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetComponentRBFixed
// (Final, Native, Public)
// Parameters:
// bool                           bFixed                         (Parm)

void UActorComponent::SetComponentRBFixed(bool bFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentRBFixed");

	UActorComponent_SetComponentRBFixed_Params params;
	params.bFixed = bFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetTickGroup
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ETickingGroup>     NewTickGroup                   (Parm)

void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	UActorComponent_SetTickGroup_Params params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ReachSpec.IsBlockedFor
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UReachSpec::IsBlockedFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.IsBlockedFor");

	UReachSpec_IsBlockedFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.CostFor
// (Final, Native, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UReachSpec::CostFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.CostFor");

	UReachSpec_CostFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Volume.ProcessActorSetVolume
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AVolume::ProcessActorSetVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.ProcessActorSetVolume");

	AVolume_ProcessActorSetVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.CollisionChanged
// (Defined, Simulated, Event, Public)

void AVolume::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.CollisionChanged");

	AVolume_CollisionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.OnToggle");

	AVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AVolume::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.DisplayDebug");

	AVolume_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Volume.GetLocationStringFor
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVolume::GetLocationStringFor(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.GetLocationStringFor");

	AVolume_GetLocationStringFor_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Volume.PostBeginPlay
// (Defined, Event, Public)

void AVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.PostBeginPlay");

	AVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.Encompasses
// (Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVolume::Encompasses(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.Encompasses");

	AVolume_Encompasses_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PostProcessVolume.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void APostProcessVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.OnToggle");

	APostProcessVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.DisplayDebug
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ACamera::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.DisplayDebug");

	ACamera_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Camera.AllowPawnRotation
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACamera::AllowPawnRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.AllowPawnRotation");

	ACamera_AllowPawnRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.ApplyCameraModifiers
// (Defined, Event, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void ACamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyCameraModifiers");

	ACamera_ApplyCameraModifiers_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.Camera.ProcessViewRotation
// (Defined, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                OutViewRotation                (Parm, OutParm)
// struct FRotator                OutDeltaRot                    (Parm, OutParm)

void ACamera::ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ProcessViewRotation");

	ACamera_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutViewRotation != nullptr)
		*OutViewRotation = params.OutViewRotation;
	if (OutDeltaRot != nullptr)
		*OutDeltaRot = params.OutDeltaRot;
}


// Function Engine.Camera.SetViewTarget
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void ACamera::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetViewTarget");

	ACamera_SetViewTarget_Params params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.UpdateViewTarget
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTViewTarget            OutVT                          (Parm, OutParm)
// float                          DeltaTime                      (Parm)

void ACamera::UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateViewTarget");

	ACamera_UpdateViewTarget_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVT != nullptr)
		*OutVT = params.OutVT;
}


// Function Engine.Camera.CheckViewTarget
// (Native, Public, HasOutParms)
// Parameters:
// struct FTViewTarget            VT                             (Parm, OutParm)

void ACamera::CheckViewTarget(struct FTViewTarget* VT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CheckViewTarget");

	ACamera_CheckViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (VT != nullptr)
		*VT = params.VT;
}


// Function Engine.Camera.FillCameraCache
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FTPOV                   NewPOV                         (Const, Parm, OutParm)

void ACamera::FillCameraCache(struct FTPOV* NewPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.FillCameraCache");

	ACamera_FillCameraCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewPOV != nullptr)
		*NewPOV = params.NewPOV;
}


// Function Engine.Camera.BlendViewTargets
// (Final, Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTViewTarget            A                              (Const, Parm, OutParm)
// struct FTViewTarget            B                              (Const, Parm, OutParm)
// float                          Alpha                          (Parm)
// struct FTPOV                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTPOV ACamera::BlendViewTargets(float Alpha, struct FTViewTarget* A, struct FTViewTarget* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.BlendViewTargets");

	ACamera_BlendViewTargets_Params params;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;
	if (B != nullptr)
		*B = params.B;

	return params.ReturnValue;
}


// Function Engine.Camera.UpdateCamera
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm)

void ACamera::UpdateCamera(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateCamera");

	ACamera_UpdateCamera_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.SetDesiredColorScale
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 NewColorScale                  (Parm)
// float                          InterpTime                     (Parm)

void ACamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetDesiredColorScale");

	ACamera_SetDesiredColorScale_Params params;
	params.NewColorScale = NewColorScale;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetCameraViewPoint
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FVector                 OutCamLoc                      (Parm, OutParm)
// struct FRotator                OutCamRot                      (Parm, OutParm)

void ACamera::GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraViewPoint");

	ACamera_GetCameraViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutCamLoc != nullptr)
		*OutCamLoc = params.OutCamLoc;
	if (OutCamRot != nullptr)
		*OutCamRot = params.OutCamRot;
}


// Function Engine.Camera.SetFOV
// (Defined, Public)
// Parameters:
// float                          NewFOV                         (Parm)

void ACamera::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetFOV");

	ACamera_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetFOVAngle
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ACamera::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetFOVAngle");

	ACamera_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.InitializeFor
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void ACamera::InitializeFor(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.InitializeFor");

	ACamera_InitializeFor_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimatedCamera.StopCameraAnim
// (Simulated, Native, Public)
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// bool                           bImmediate                     (OptionalParm, Parm)

void AAnimatedCamera::StopCameraAnim(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.StopCameraAnim");

	AAnimatedCamera_StopCameraAnim_Params params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimatedCamera.PlayCameraAnim
// (Simulated, Native, Public)
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          Scale                          (OptionalParm, Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// bool                           bRandomStartTime               (OptionalParm, Parm)
// float                          Duration                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnimatedCamera::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.PlayCameraAnim");

	AAnimatedCamera_PlayCameraAnim_Params params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimatedCamera.ApplyCameraModifiersNative
// (Final, Simulated, Native, Private, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void AAnimatedCamera::ApplyCameraModifiersNative(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.ApplyCameraModifiersNative");

	AAnimatedCamera_ApplyCameraModifiersNative_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.AnimatedCamera.ApplyCameraModifiers
// (Defined, Event, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void AAnimatedCamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.ApplyCameraModifiers");

	AAnimatedCamera_ApplyCameraModifiers_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.AnimatedCamera.Destroyed
// (Defined, Event, Public)

void AAnimatedCamera::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.Destroyed");

	AAnimatedCamera_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimatedCamera.PostBeginPlay
// (Defined, Public)

void AAnimatedCamera::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimatedCamera.PostBeginPlay");

	AAnimatedCamera_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBrightness
// (Defined, Public)

void ULightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBrightness");

	ULightComponent_OnUpdatePropertyBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyLightColor
// (Defined, Public)

void ULightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyLightColor");

	ULightComponent_OnUpdatePropertyLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.UpdateColorAndBrightness
// (Final, Native, Public)

void ULightComponent::UpdateColorAndBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateColorAndBrightness");

	ULightComponent_UpdateColorAndBrightness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.GetDirection
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ULightComponent::GetDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetDirection");

	ULightComponent_GetDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.GetOrigin
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ULightComponent::GetOrigin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetOrigin");

	ULightComponent_GetOrigin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.SetLightProperties
// (Final, Native, Public)
// Parameters:
// float                          NewBrightness                  (OptionalParm, Parm)
// struct FColor                  NewLightColor                  (OptionalParm, Parm)
// class ULightFunction*          NewLightFunction               (OptionalParm, Parm)

void ULightComponent::SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightProperties");

	ULightComponent_SetLightProperties_Params params;
	params.NewBrightness = NewBrightness;
	params.NewLightColor = NewLightColor;
	params.NewLightFunction = NewLightFunction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bSetEnabled                    (Parm)

void ULightComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnabled");

	ULightComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UPrimitiveComponent::GetRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRotation");

	UPrimitiveComponent_GetRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPosition
// (Final, Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UPrimitiveComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPosition");

	UPrimitiveComponent_GetPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetAbsolute
// (Native, Public)
// Parameters:
// bool                           NewAbsoluteTranslation         (OptionalParm, Parm)
// bool                           NewAbsoluteRotation            (OptionalParm, Parm)
// bool                           NewAbsoluteScale               (OptionalParm, Parm)

void UPrimitiveComponent::SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAbsolute");

	UPrimitiveComponent_SetAbsolute_Params params;
	params.NewAbsoluteTranslation = NewAbsoluteTranslation;
	params.NewAbsoluteRotation = NewAbsoluteRotation;
	params.NewAbsoluteScale = NewAbsoluteScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale3D
// (Native, Public)
// Parameters:
// struct FVector                 NewScale3D                     (Parm)

void UPrimitiveComponent::SetScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale3D");

	UPrimitiveComponent_SetScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale
// (Native, Public)
// Parameters:
// float                          NewScale                       (Parm)

void UPrimitiveComponent::SetScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale");

	UPrimitiveComponent_SetScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRotation
// (Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void UPrimitiveComponent::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRotation");

	UPrimitiveComponent_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTranslation
// (Native, Public)
// Parameters:
// struct FVector                 NewTranslation                 (Parm)

void UPrimitiveComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslation");

	UPrimitiveComponent_SetTranslation_Params params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetActorCollision
// (Final, Native, Public)
// Parameters:
// bool                           NewCollideActors               (Parm)
// bool                           NewBlockActors                 (Parm)

void UPrimitiveComponent::SetActorCollision(bool NewCollideActors, bool NewBlockActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetActorCollision");

	UPrimitiveComponent_SetActorCollision_Params params;
	params.NewCollideActors = NewCollideActors;
	params.NewBlockActors = NewBlockActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTraceBlocking
// (Final, Native, Public)
// Parameters:
// bool                           NewBlockZeroExtent             (Parm)
// bool                           NewBlockNonZeroExtent          (Parm)

void UPrimitiveComponent::SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTraceBlocking");

	UPrimitiveComponent_SetTraceBlocking_Params params;
	params.NewBlockZeroExtent = NewBlockZeroExtent;
	params.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// (Final, Native, Public)
// Parameters:
// bool                           bNewUseViewOwnerDepthPriorityGroup (Parm)
// TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup (Parm)

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup");

	UPrimitiveComponent_SetViewOwnerDepthPriorityGroup_Params params;
	params.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	params.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup          (Parm)

void UPrimitiveComponent::SetDepthPriorityGroup(TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetDepthPriorityGroup");

	UPrimitiveComponent_SetDepthPriorityGroup_Params params;
	params.NewDepthPriorityGroup = NewDepthPriorityGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightingChannels
// (Final, Native, Public)
// Parameters:
// struct FLightingChannelContainer NewLightingChannels            (Parm)

void UPrimitiveComponent::SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	UPrimitiveComponent_SetLightingChannels_Params params;
	params.NewLightingChannels = NewLightingChannels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCullDistance
// (Final, Native, Public)
// Parameters:
// float                          NewCullDistance                (Parm)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	UPrimitiveComponent_SetCullDistance_Params params;
	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightEnvironment
// (Final, Native, Public)
// Parameters:
// class ULightEnvironmentComponent* NewLightEnvironment            (Parm, EditInline)

void UPrimitiveComponent::SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightEnvironment");

	UPrimitiveComponent_SetLightEnvironment_Params params;
	params.NewLightEnvironment = NewLightEnvironment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetShadowParent
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     NewShadowParent                (Parm, EditInline)

void UPrimitiveComponent::SetShadowParent(class UPrimitiveComponent* NewShadowParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetShadowParent");

	UPrimitiveComponent_SetShadowParent_Params params;
	params.NewShadowParent = NewShadowParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// (Final, Native, Public)
// Parameters:
// bool                           bNewIgnoreOwnerHidden          (Parm)

void UPrimitiveComponent::SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden");

	UPrimitiveComponent_SetIgnoreOwnerHidden_Params params;
	params.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOwnerNoSeeWithShadow
// (Final, Native, Public)
// Parameters:
// bool                           bNewOwnerNoSeeWithShadow       (Parm)

void UPrimitiveComponent::SetOwnerNoSeeWithShadow(bool bNewOwnerNoSeeWithShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSeeWithShadow");

	UPrimitiveComponent_SetOwnerNoSeeWithShadow_Params params;
	params.bNewOwnerNoSeeWithShadow = bNewOwnerNoSeeWithShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// (Final, Native, Public)
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	UPrimitiveComponent_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// (Final, Native, Public)
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	UPrimitiveComponent_SetOwnerNoSee_Params params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetHidden
// (Final, Native, Public)
// Parameters:
// bool                           NewHidden                      (Parm)

void UPrimitiveComponent::SetHidden(bool NewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetHidden");

	UPrimitiveComponent_SetHidden_Params params;
	params.NewHidden = NewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// (Final, Native, Public)
// Parameters:
// unsigned char                  InDomGroup                     (Parm)

void UPrimitiveComponent::SetRBDominanceGroup(unsigned char InDomGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBDominanceGroup");

	UPrimitiveComponent_SetRBDominanceGroup_Params params;
	params.InDomGroup = InDomGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetRootBodyInstance
// (Final, Native, Public)
// Parameters:
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRootBodyInstance");

	UPrimitiveComponent_GetRootBodyInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// (Final, Native, Public)
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	UPrimitiveComponent_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// (Final, Native, Public)
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBChannel
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ERBCollisionChannel> Channel                        (Parm)

void UPrimitiveComponent::SetRBChannel(TEnumAsByte<ERBCollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBChannel");

	UPrimitiveComponent_SetRBChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ERBCollisionChannel> Channel                        (Parm)
// bool                           bNewCollides                   (Parm)

void UPrimitiveComponent::SetRBCollidesWithChannel(TEnumAsByte<ERBCollisionChannel> Channel, bool bNewCollides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollidesWithChannel");

	UPrimitiveComponent_SetRBCollidesWithChannel_Params params;
	params.Channel = Channel;
	params.bNewCollides = bNewCollides;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetBlockRigidBody
// (Final, Native, Public)
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)

void UPrimitiveComponent::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBlockRigidBody");

	UPrimitiveComponent_SetBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPrimitiveComponent::RigidBodyIsAwake(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RigidBodyIsAwake");

	UPrimitiveComponent_RigidBodyIsAwake_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	UPrimitiveComponent_PutRigidBodyToSleep_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	UPrimitiveComponent_WakeRigidBody_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRot                         (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBRotation");

	UPrimitiveComponent_SetRBRotation_Params params;
	params.NewRot = NewRot;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBPosition
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewPos                         (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBPosition");

	UPrimitiveComponent_SetRBPosition_Params params;
	params.NewPos = NewPos;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewAngVel                      (Parm)
// bool                           bAddToCurrent                  (OptionalParm, Parm)

void UPrimitiveComponent::SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBAngularVelocity");

	UPrimitiveComponent_SetRBAngularVelocity_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewVel                         (Parm)
// bool                           bAddToCurrent                  (OptionalParm, Parm)

void UPrimitiveComponent::SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBLinearVelocity");

	UPrimitiveComponent_SetRBLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialForce
// (Final, Native, Public)
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          Strength                       (Parm)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	UPrimitiveComponent_AddRadialForce_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddForce
// (Final, Native, Public)
// Parameters:
// struct FVector                 Force                          (Parm)
// struct FVector                 Position                       (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	UPrimitiveComponent_AddForce_Params params;
	params.Force = Force;
	params.Position = Position;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// (Final, Native, Public)
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          Strength                       (Parm)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm)
// bool                           bVelChange                     (OptionalParm, Parm)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	UPrimitiveComponent_AddRadialImpulse_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddImpulse
// (Final, Native, Public)
// Parameters:
// struct FVector                 Impulse                        (Parm)
// struct FVector                 Position                       (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           bVelChange                     (OptionalParm, Parm)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	UPrimitiveComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.Position = Position;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OcclusionChanged
// (Defined, Event, Public)
// Parameters:
// bool                           bNowOccluded                   (Parm)

void UAudioComponent::OcclusionChanged(bool bNowOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OcclusionChanged");

	UAudioComponent_OcclusionChanged_Params params;
	params.bNowOccluded = bNowOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnAudioFinished
// (Public, Delegate)
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void UAudioComponent::OnAudioFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnAudioFinished");

	UAudioComponent_OnAudioFinished_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.ResetToDefaults
// (Final, Native, Public)

void UAudioComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.ResetToDefaults");

	UAudioComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetWaveParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   InName                         (Parm)
// class USoundNodeWave*          InWave                         (Parm)

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	UAudioComponent_SetWaveParameter_Params params;
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetFloatParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   InName                         (Parm)
// float                          InFloat                        (Parm)

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	UAudioComponent_SetFloatParameter_Params params;
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustLowPassFiltering
// (Final, Native, Public)
// Parameters:
// float                          AdjustLowPassDuration          (Parm)
// float                          AdjustLowPassLevel             (Parm)

void UAudioComponent::AdjustLowPassFiltering(float AdjustLowPassDuration, float AdjustLowPassLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustLowPassFiltering");

	UAudioComponent_AdjustLowPassFiltering_Params params;
	params.AdjustLowPassDuration = AdjustLowPassDuration;
	params.AdjustLowPassLevel = AdjustLowPassLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustVolume
// (Final, Native, Public)
// Parameters:
// float                          AdjustVolumeDuration           (Parm)
// float                          AdjustVolumeLevel              (Parm)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	UAudioComponent_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeOut
// (Final, Native, Public)
// Parameters:
// float                          FadeOutDuration                (Parm)
// float                          FadeVolumeLevel                (Parm)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	UAudioComponent_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeIn
// (Final, Native, Public)
// Parameters:
// float                          FadeInDuration                 (Parm)
// float                          FadeVolumeLevel                (Parm)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	UAudioComponent_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.IsPlaying
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	UAudioComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.Stop
// (Final, Native, Public)

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	UAudioComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.Play
// (Final, Native, Public)

void UAudioComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	UAudioComponent_Play_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Ladder.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadder::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ladder.SuggestMovePreparation");

	ALadder_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraActor.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ACameraActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.DisplayDebug");

	ACameraActor_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.CameraActor.GetCameraView
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)

void ACameraActor::GetCameraView(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetCameraView");

	ACameraActor_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.CameraAnimInst.Stop
// (Final, Native, Public)
// Parameters:
// bool                           bImmediate                     (OptionalParm, Parm)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	UCameraAnimInst_Stop_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.AdvanceAnim
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           bJump                          (Parm)

void UCameraAnimInst::AdvanceAnim(float DeltaTime, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.AdvanceAnim");

	UCameraAnimInst_AdvanceAnim_Params params;
	params.DeltaTime = DeltaTime;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Play
// (Final, Native, Public)
// Parameters:
// class UCameraAnim*             Anim                           (Parm)
// class AActor*                  CamActor                       (Parm)
// float                          InRate                         (Parm)
// float                          InScale                        (Parm)
// float                          InBlendInTime                  (Parm)
// float                          InBlendOutTime                 (Parm)
// bool                           bInLoop                        (Parm)
// bool                           bRandomStartTime               (Parm)
// float                          Duration                       (OptionalParm, Parm)

void UCameraAnimInst::Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Play");

	UCameraAnimInst_Play_Params params;
	params.Anim = Anim;
	params.CamActor = CamActor;
	params.InRate = InRate;
	params.InScale = InScale;
	params.InBlendInTime = InBlendInTime;
	params.InBlendOutTime = InBlendOutTime;
	params.bInLoop = bInLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraMode.AllowPawnRotation
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraMode::AllowPawnRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraMode.AllowPawnRotation");

	UCameraMode_AllowPawnRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraMode.ProcessViewRotation
// (Simulated, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// class AActor*                  ViewTarget                     (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                out_DeltaRot                   (Parm, OutParm)

void UCameraMode::ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraMode.ProcessViewRotation");

	UCameraMode_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;
}


// Function Engine.CameraModifier.ProcessViewRotation
// (Simulated, Public, HasOutParms)
// Parameters:
// class AActor*                  ViewTarget                     (Parm)
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                out_DeltaRot                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ProcessViewRotation");

	UCameraModifier_ProcessViewRotation_Params params;
	params.ViewTarget = ViewTarget;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ToggleModifier
// (Defined, Public)

void UCameraModifier::ToggleModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ToggleModifier");

	UCameraModifier_ToggleModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.EnableModifier
// (Defined, Public)

void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	UCameraModifier_EnableModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.DisableModifier
// (Defined, Public)

void UCameraModifier::DisableModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	UCameraModifier_DisableModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.IsDisabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	UCameraModifier_IsDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.RemoveCameraModifier
// (Defined, Public)
// Parameters:
// class ACamera*                 Camera                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::RemoveCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.RemoveCameraModifier");

	UCameraModifier_RemoveCameraModifier_Params params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.AddCameraModifier
// (Defined, Public)
// Parameters:
// class ACamera*                 Camera                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::AddCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.AddCameraModifier");

	UCameraModifier_AddCameraModifier_Params params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ModifyCamera
// (Public, HasOutParms)
// Parameters:
// class ACamera*                 Camera                         (Parm)
// float                          DeltaTime                      (Parm)
// struct FTPOV                   OutPOV                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCameraModifier::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ModifyCamera");

	UCameraModifier_ModifyCamera_Params params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.Init
// (Public)

void UCameraModifier::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.Init");

	UCameraModifier_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureDoubleLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 StartPoint                     (Parm)
// struct FVector                 EndPoint                       (Parm)
// float                          Perc                           (Parm)
// float                          Spacing                        (Parm)
// float                          Width                          (Parm)
// struct FColor                  LineColor                      (Parm)
// struct FColor                  AltLineColor                   (Parm)
// class UTexture2D*              Tex                            (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture2D* Tex, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureDoubleLine");

	UCanvas_DrawTextureDoubleLine_Params params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Spacing = Spacing;
	params.Width = Width;
	params.LineColor = LineColor;
	params.AltLineColor = AltLineColor;
	params.Tex = Tex;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 StartPoint                     (Parm)
// struct FVector                 EndPoint                       (Parm)
// float                          Perc                           (Parm)
// float                          Width                          (Parm)
// struct FColor                  LineColor                      (Parm)
// class UTexture2D*              LineTexture                    (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture2D* LineTexture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureLine");

	UCanvas_DrawTextureLine_Params params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Width = Width;
	params.LineColor = LineColor;
	params.LineTexture = LineTexture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Draw2DLine
// (Final, Native, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DLine");

	UCanvas_Draw2DLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedMaterialTile
// (Final, Native, Public)
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// struct FRotator                Rotation                       (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)
// float                          AnchorX                        (OptionalParm, Parm)
// float                          AnchorY                        (OptionalParm, Parm)

void UCanvas::DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedMaterialTile");

	UCanvas_DrawRotatedMaterialTile_Params params;
	params.Mat = Mat;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedTile
// (Final, Native, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// struct FRotator                Rotation                       (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// float                          AnchorX                        (OptionalParm, Parm)
// float                          AnchorY                        (OptionalParm, Parm)

void UCanvas::DrawRotatedTile(class UTexture2D* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedTile");

	UCanvas_DrawRotatedTile_Params params;
	params.Tex = Tex;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColor
// (Final, Native, Public)
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// unsigned char                  A                              (OptionalParm, Parm)

void UCanvas::SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	UCanvas_SetDrawColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawBox
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          Width                          (Parm)
// float                          Height                         (Parm)

void UCanvas::DrawBox(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBox");

	UCanvas_DrawBox_Params params;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRect
// (Final, Defined, Public)
// Parameters:
// float                          RectX                          (Parm)
// float                          RectY                          (Parm)
// class UTexture2D*              Tex                            (OptionalParm, Parm)

void UCanvas::DrawRect(float RectX, float RectY, class UTexture2D* Tex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRect");

	UCanvas_DrawRect_Params params;
	params.RectX = RectX;
	params.RectY = RectY;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawIconSection
// (Final, Defined, Public)
// Parameters:
// struct FCanvasIcon             Icon                           (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          UStartPct                      (Parm)
// float                          VStartPct                      (Parm)
// float                          UEndPct                        (Parm)
// float                          VEndPct                        (Parm)
// float                          Scale                          (OptionalParm, Parm)

void UCanvas::DrawIconSection(const struct FCanvasIcon& Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIconSection");

	UCanvas_DrawIconSection_Params params;
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.UStartPct = UStartPct;
	params.VStartPct = VStartPct;
	params.UEndPct = UEndPct;
	params.VEndPct = VEndPct;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawIcon
// (Final, Defined, Public)
// Parameters:
// struct FCanvasIcon             Icon                           (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          Scale                          (OptionalParm, Parm)

void UCanvas::DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIcon");

	UCanvas_DrawIcon_Params params;
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.MakeIcon
// (Final, Defined, Public, HasDefaults)
// Parameters:
// class UTexture2D*              Texture                        (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)
// struct FCanvasIcon             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCanvasIcon UCanvas::MakeIcon(class UTexture2D* Texture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeIcon");

	UCanvas_MakeIcon_Params params;
	params.Texture = Texture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawTexture
// (Final, Defined, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// float                          Scale                          (Parm)

void UCanvas::DrawTexture(class UTexture2D* Tex, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTexture");

	UCanvas_DrawTexture_Params params;
	params.Tex = Tex;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetClip
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetClip(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetClip");

	UCanvas_SetClip_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetOrigin
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetOrigin(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetOrigin");

	UCanvas_SetOrigin_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetPos
// (Final, Native, Public)
// Parameters:
// float                          PosX                           (Parm)
// float                          PosY                           (Parm)

void UCanvas::SetPos(float PosX, float PosY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetPos");

	UCanvas_SetPos_Params params;
	params.PosX = PosX;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Reset
// (Defined, Event, Public)
// Parameters:
// bool                           bKeepOrigin                    (OptionalParm, Parm)

void UCanvas::Reset(bool bKeepOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Reset");

	UCanvas_Reset_Params params;
	params.bKeepOrigin = bKeepOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawColorizedTile
// (Final, Native, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// struct FLinearColor            LColor                         (Parm)

void UCanvas::DrawColorizedTile(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawColorizedTile");

	UCanvas_DrawColorizedTile_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileStretched
// (Final, Native, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// struct FLinearColor            LColor                         (Parm)
// bool                           bStretchHorizontally           (OptionalParm, Parm)
// bool                           bStretchVertically             (OptionalParm, Parm)
// float                          ScalingFactor                  (OptionalParm, Parm)

void UCanvas::DrawTileStretched(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileStretched");

	UCanvas_DrawTileStretched_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.bStretchHorizontally = bStretchHorizontally;
	params.bStretchVertically = bStretchVertically;
	params.ScalingFactor = ScalingFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PopTransform
// (Final, Native, Public)

void UCanvas::PopTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopTransform");

	UCanvas_PopTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PushTranslationMatrix
// (Final, Native, Public)
// Parameters:
// struct FVector                 TranslationVector              (Parm)

void UCanvas::PushTranslationMatrix(const struct FVector& TranslationVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushTranslationMatrix");

	UCanvas_PushTranslationMatrix_Params params;
	params.TranslationVector = TranslationVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Project
// (Final, Native, Public)
// Parameters:
// struct FVector                 Location                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UCanvas::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Project");

	UCanvas_Project_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawTileClipped
// (Final, Native, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTileClipped(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileClipped");

	UCanvas_DrawTileClipped_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextRA
// (Final, Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           CR                             (OptionalParm, Parm)

void UCanvas::DrawTextRA(const struct FString& Text, bool CR)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextRA");

	UCanvas_DrawTextRA_Params params;
	params.Text = Text;
	params.CR = CR;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextClipped
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           bCheckHotKey                   (OptionalParm, Parm)
// float                          XScale                         (OptionalParm, Parm)
// float                          YScale                         (OptionalParm, Parm)

void UCanvas::DrawTextClipped(const struct FString& Text, bool bCheckHotKey, float XScale, float YScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextClipped");

	UCanvas_DrawTextClipped_Params params;
	params.Text = Text;
	params.bCheckHotKey = bCheckHotKey;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawText
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           CR                             (OptionalParm, Parm)
// float                          XScale                         (OptionalParm, Parm)
// float                          YScale                         (OptionalParm, Parm)

void UCanvas::DrawText(const struct FString& Text, bool CR, float XScale, float YScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawText");

	UCanvas_DrawText_Params params;
	params.Text = Text;
	params.CR = CR;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.TextSize
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::TextSize(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TextSize");

	UCanvas_TextSize_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.StrLen
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::StrLen(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.StrLen");

	UCanvas_StrLen_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.DrawMaterialTileClipped
// (Final, Native, Public)
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)

void UCanvas::DrawMaterialTileClipped(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawMaterialTileClipped");

	UCanvas_DrawMaterialTileClipped_Params params;
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawMaterialTile
// (Final, Native, Public)
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (OptionalParm, Parm)
// float                          V                              (OptionalParm, Parm)
// float                          UL                             (OptionalParm, Parm)
// float                          VL                             (OptionalParm, Parm)

void UCanvas::DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawMaterialTile");

	UCanvas_DrawMaterialTile_Params params;
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTile
// (Final, Native, Public)
// Parameters:
// class UTexture2D*              Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTile(class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTile");

	UCanvas_DrawTile_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SendMessage
// (Public)
// Parameters:
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// float                          Wait                           (Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)

void AController::SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessage");

	AController_SendMessage_Params params;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.Wait = Wait;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CurrentLevelUnloaded
// (Event, Public)

void AController::CurrentLevelUnloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CurrentLevelUnloaded");

	AController_CurrentLevelUnloaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetRouteGoalAfter
// (Defined, Public)
// Parameters:
// int                            RouteIdx                       (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::GetRouteGoalAfter(int RouteIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetRouteGoalAfter");

	AController_GetRouteGoalAfter_Params params;
	params.RouteIdx = RouteIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsInCombat
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsInCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsInCombat");

	AController_IsInCombat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpectating
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpectating");

	AController_IsSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetKillerController
// (Defined, Public)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AController::GetKillerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetKillerController");

	AController_GetKillerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.OnToggleHidden
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (Parm)

void AController::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleHidden");

	AController_OnToggleHidden_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyAddInventory
// (Public)
// Parameters:
// class AInventory*              NewItem                        (Parm)

void AController::NotifyAddInventory(class AInventory* NewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyAddInventory");

	AController_NotifyAddInventory_Params params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnCauseDamage
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_CauseDamage*     Action                         (Parm)

void AController::OnCauseDamage(class USeqAct_CauseDamage* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnCauseDamage");

	AController_OnCauseDamage_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverClaimViolation
// (Simulated, Public)
// Parameters:
// class AController*             NewClaim                       (Parm)
// class ACoverLink*              Link                           (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverClaimViolation");

	AController_NotifyCoverClaimViolation_Params params;
	params.NewClaim = NewClaim;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyCoverAdjusted
// (Simulated, Event, Public)

void AController::NotifyCoverAdjusted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverAdjusted");

	AController_NotifyCoverAdjusted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverDisabled
// (Simulated, Public)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// int                            SlotIdx                        (Parm)

void AController::NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverDisabled");

	AController_NotifyCoverDisabled_Params params;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnToggleAffectedByHitEffects
// (Defined, Public)
// Parameters:
// class USeqAct_ToggleAffectedByHitEffects* inAction                       (Parm)

void AController::OnToggleAffectedByHitEffects(class USeqAct_ToggleAffectedByHitEffects* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleAffectedByHitEffects");

	AController_OnToggleAffectedByHitEffects_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnToggleGodMode
// (Defined, Public)
// Parameters:
// class USeqAct_ToggleGodMode*   inAction                       (Parm)

void AController::OnToggleGodMode(class USeqAct_ToggleGodMode* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleGodMode");

	AController_OnToggleGodMode_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void AController::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnTeleport");

	AController_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnMakeNoise
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_MakeNoise*       Action                         (Parm)

void AController::OnMakeNoise(class USeqAct_MakeNoise* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnMakeNoise");

	AController_OnMakeNoise_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsDead
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsDead");

	AController_IsDead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AController::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetHumanReadableName");

	AController_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DisplayDebug");

	AController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Controller.StopLatentExecution
// (Final, Native, Public)

void AController::StopLatentExecution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopLatentExecution");

	AController_StopLatentExecution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InLatentExecution
// (Final, Native, Public)
// Parameters:
// int                            LatentActionNumber             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::InLatentExecution(int LatentActionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InLatentExecution");

	AController_InLatentExecution_Params params;
	params.LatentActionNumber = LatentActionNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyMissedJump
// (Event, Public)

void AController::NotifyMissedJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyMissedJump");

	AController_NotifyMissedJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyJumpApex
// (Event, Public)

void AController::NotifyJumpApex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyJumpApex");

	AController_NotifyJumpApex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyBump
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyBump(class AActor* Other, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyBump");

	AController_NotifyBump_Params params;
	params.Other = Other;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyFallingHitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)

void AController::NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyFallingHitWall");

	AController_NotifyFallingHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyHitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitWall");

	AController_NotifyHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyLanded
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyLanded");

	AController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyHeadVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHeadVolumeChange");

	AController_NotifyHeadVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyPhysicsVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void AController::NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPhysicsVolumeChange");

	AController_NotifyPhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LandingShake
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::LandingShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LandingShake");

	AController_LandingShake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsAimingAt
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AActor*                  ATarget                        (Parm)
// float                          Epsilon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsAimingAt(class AActor* ATarget, float Epsilon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsAimingAt");

	AController_IsAimingAt_Params params;
	params.ATarget = ATarget;
	params.Epsilon = Epsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetActorEyesViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AController::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetActorEyesViewPoint");

	AController_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Controller.GetPlayerViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPlayerViewPoint");

	AController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Controller.HandlePathObstruction
// (Event, Public)
// Parameters:
// class AActor*                  BlockedBy                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::HandlePathObstruction(class AActor* BlockedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePathObstruction");

	AController_HandlePathObstruction_Params params;
	params.BlockedBy = BlockedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.UnderLift
// (Public)
// Parameters:
// class ALiftCenter*             Lift                           (Parm)

void AController::UnderLift(class ALiftCenter* Lift)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnderLift");

	AController_UnderLift_Params params;
	params.Lift = Lift;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoverFinished
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::MoverFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoverFinished");

	AController_MoverFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WaitForMover
// (Defined, Public)
// Parameters:
// class AInterpActor*            M                              (Parm)

void AController::WaitForMover(class AInterpActor* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForMover");

	AController_WaitForMover_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowDetourTo
// (Defined, Event, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AllowDetourTo(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowDetourTo");

	AController_AllowDetourTo_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MayFall
// (Event, Public)

void AController::MayFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayFall");

	AController_MayFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EndClimbLadder
// (Native, Public)

void AController::EndClimbLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EndClimbLadder");

	AController_EndClimbLadder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LongFall
// (Event, Public)

void AController::LongFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LongFall");

	AController_LongFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WaitForLanding
// (Final, Latent, Native, Public)
// Parameters:
// float                          waitDuration                   (OptionalParm, Parm)

void AController::WaitForLanding(float waitDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForLanding");

	AController_WaitForLanding_Params params;
	params.waitDuration = waitDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickWallAdjust
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PickWallAdjust(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickWallAdjust");

	AController_PickWallAdjust_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MoveUnreachable
// (Event, Public)
// Parameters:
// struct FVector                 AttemptedDest                  (Parm)
// class AActor*                  AttemptedTarget                (Parm)

void AController::MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveUnreachable");

	AController_MoveUnreachable_Params params;
	params.AttemptedDest = AttemptedDest;
	params.AttemptedTarget = AttemptedTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ActorReachable
// (Final, Native, Public)
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::ActorReachable(class AActor* anActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ActorReachable");

	AController_ActorReachable_Params params;
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PointReachable
// (Final, Native, Public)
// Parameters:
// struct FVector                 aPoint                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PointReachable(const struct FVector& aPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PointReachable");

	AController_PointReachable_Params params;
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToIntercept
// (Final, Native, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  InRouteGoal                    (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToIntercept");

	AController_FindPathToIntercept_Params params;
	params.P = P;
	params.InRouteGoal = InRouteGoal;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindRandomDest
// (Final, Native, Public)
// Parameters:
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AController::FindRandomDest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindRandomDest");

	AController_FindRandomDest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTowardNearest
// (Final, Native, Public)
// Parameters:
// class UClass*                  GoalClass                      (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTowardNearest");

	AController_FindPathTowardNearest_Params params;
	params.GoalClass = GoalClass;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToward
// (Final, Native, Public)
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToward");

	AController_FindPathToward_Params params;
	params.anActor = anActor;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTo
// (Final, Native, Public)
// Parameters:
// struct FVector                 aPoint                         (Parm)
// int                            MaxPathLength                  (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTo");

	AController_FindPathTo_Params params;
	params.aPoint = aPoint;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishRotation
// (Final, Latent, Native, Public)

void AController::FinishRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishRotation");

	AController_FinishRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetupSpecialPathAbilities
// (Event, Public)

void AController::SetupSpecialPathAbilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetupSpecialPathAbilities");

	AController_SetupSpecialPathAbilities_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToward
// (Final, Latent, Native, Public)
// Parameters:
// class AActor*                  NewTarget                      (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// float                          DestinationOffset              (OptionalParm, Parm)
// bool                           bUseStrafing                   (OptionalParm, Parm)
// bool                           bShouldWalk                    (OptionalParm, Parm)

void AController::MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToward");

	AController_MoveToward_Params params;
	params.NewTarget = NewTarget;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bUseStrafing = bUseStrafing;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveTo
// (Final, Latent, Native, Public)
// Parameters:
// struct FVector                 NewDestination                 (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// bool                           bShouldWalk                    (OptionalParm, Parm)

void AController::MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveTo");

	AController_MoveTo_Params params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyNotVisible
// (Event, Public)

void AController::EnemyNotVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyNotVisible");

	AController_EnemyNotVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeeMonster
// (Event, Public)
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeeMonster(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeeMonster");

	AController_SeeMonster_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeePlayer
// (Event, Public)
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeePlayer(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeePlayer");

	AController_SeePlayer_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HearNoise
// (Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void AController::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HearNoise");

	AController_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickTarget
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  TargetClass                    (Parm)
// float                          bestAim                        (Parm, OutParm)
// float                          bestDist                       (Parm, OutParm)
// struct FVector                 FireDir                        (Parm)
// struct FVector                 projStart                      (Parm)
// float                          MaxRange                       (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AController::PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* bestDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickTarget");

	AController_PickTarget_Params params;
	params.TargetClass = TargetClass;
	params.FireDir = FireDir;
	params.projStart = projStart;
	params.MaxRange = MaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (bestDist != nullptr)
		*bestDist = params.bestDist;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSeeByPoints
// (Final, Native, Public)
// Parameters:
// struct FVector                 ViewLocation                   (Parm)
// struct FVector                 TestLocation                   (Parm)
// struct FRotator                ViewRotation                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSeeByPoints");

	AController_CanSeeByPoints_Params params;
	params.ViewLocation = ViewLocation;
	params.TestLocation = TestLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSee
// (Final, Native, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanSee(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSee");

	AController_CanSee_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.LineOfSightTo
// (Final, Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 chkLocation                    (OptionalParm, Parm)
// bool                           bTryAlternateTargetLoc         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	AController_LineOfSightTo_Params params;
	params.Other = Other;
	params.chkLocation = chkLocation;
	params.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyChangedWeapon
// (Public)
// Parameters:
// class AWeapon*                 PrevWeapon                     (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void AController::NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyChangedWeapon");

	AController_NotifyChangedWeapon_Params params;
	params.PrevWeapon = PrevWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetWeapon
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class UClass*                  WeaponClass                    (Parm)

void AController::ClientSetWeapon(class UClass* WeaponClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetWeapon");

	AController_ClientSetWeapon_Params params;
	params.WeaponClass = WeaponClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSwitchToBestWeapon
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// bool                           bForceNewWeapon                (OptionalParm, Parm)

void AController::ClientSwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSwitchToBestWeapon");

	AController_ClientSwitchToBestWeapon_Params params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SwitchToBestWeapon
// (Defined, Exec, Public)
// Parameters:
// bool                           bForceNewWeapon                (OptionalParm, Parm)

void AController::SwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SwitchToBestWeapon");

	AController_SwitchToBestWeapon_Params params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveProjectileWarning
// (Public)
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::ReceiveProjectileWarning(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveProjectileWarning");

	AController_ReceiveProjectileWarning_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveWarning
// (Public)
// Parameters:
// class APawn*                   Shooter                        (Parm)
// float                          projSpeed                      (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::ReceiveWarning(class APawn* Shooter, float projSpeed, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveWarning");

	AController_ReceiveWarning_Params params;
	params.Shooter = Shooter;
	params.projSpeed = projSpeed;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CheckNearMiss
// (Public)
// Parameters:
// class APawn*                   Shooter                        (Parm)
// class AWeapon*                 W                              (Parm)
// struct FVector                 WeapLoc                        (Parm)
// struct FVector                 LineDir                        (Parm)
// struct FVector                 HitLocation                    (Parm)

void AController::CheckNearMiss(class APawn* Shooter, class AWeapon* W, const struct FVector& WeapLoc, const struct FVector& LineDir, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CheckNearMiss");

	AController_CheckNearMiss_Params params;
	params.Shooter = Shooter;
	params.W = W;
	params.WeapLoc = WeapLoc;
	params.LineDir = LineDir;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InstantWarnTarget
// (Defined, Public)
// Parameters:
// class AActor*                  InTarget                       (Parm)
// class AWeapon*                 FiredWeapon                    (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstantWarnTarget");

	AController_InstantWarnTarget_Params params;
	params.InTarget = InTarget;
	params.FiredWeapon = FiredWeapon;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetAdjustedAimFor
// (Defined, Public)
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustedAimFor");

	AController_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.HandlePickup
// (Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void AController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePickup");

	AController_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RoundHasEnded
// (Defined, Public)
// Parameters:
// class AActor*                  EndRoundFocus                  (OptionalParm, Parm)

void AController::RoundHasEnded(class AActor* EndRoundFocus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RoundHasEnded");

	AController_RoundHasEnded_Params params;
	params.EndRoundFocus = EndRoundFocus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopFiring
// (Defined, Event, Public)

void AController::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopFiring");

	AController_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.FireWeaponAt
// (Public)
// Parameters:
// class AActor*                  inActor                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::FireWeaponAt(class AActor* inActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FireWeaponAt");

	AController_FireWeaponAt_Params params;
	params.inActor = inActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.RatePickup
// (Event, Public)
// Parameters:
// class AActor*                  PickupHolder                   (Parm)
// class UClass*                  inPickup                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::RatePickup(class AActor* PickupHolder, class UClass* inPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RatePickup");

	AController_RatePickup_Params params;
	params.PickupHolder = PickupHolder;
	params.inPickup = inPickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WarnProjExplode
// (Public)
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::WarnProjExplode(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WarnProjExplode");

	AController_WarnProjExplode_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyProjLanded
// (Defined, Public)
// Parameters:
// class AProjectile*             Proj                           (Parm)

void AController::NotifyProjLanded(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyProjLanded");

	AController_NotifyProjLanded_Params params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyKilled
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)

void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyKilled");

	AController_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GameHasEnded
// (Defined, Public)
// Parameters:
// class AActor*                  EndGameFocus                   (OptionalParm, Parm)
// bool                           bIsWinner                      (OptionalParm, Parm)

void AController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GameHasEnded");

	AController_GameHasEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetCharacter
// (Public)
// Parameters:
// struct FString                 inCharacter                    (Parm, NeedCtorLink)

void AController::SetCharacter(const struct FString& inCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetCharacter");

	AController_SetCharacter_Params params;
	params.inCharacter = inCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerGivePawn
// (Public)

void AController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerGivePawn");

	AController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerRestartPlayer
// (Defined, Net, NetReliable, Public, NetServer)

void AController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerRestartPlayer");

	AController_ServerRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AController::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetTeamNum");

	AController_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InitPlayerReplicationInfo
// (Defined, Public)

void AController::InitPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitPlayerReplicationInfo");

	AController_InitPlayerReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyTakeHit
// (Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void AController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyTakeHit");

	AController_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyJustTeleported
// (Defined, Public)

void AController::EnemyJustTeleported()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyJustTeleported");

	AController_EnemyJustTeleported_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.BeyondFogDistance
// (Final, Native, Public)
// Parameters:
// struct FVector                 ViewPoint                      (Parm)
// struct FVector                 OtherPoint                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeyondFogDistance");

	AController_BeyondFogDistance_Params params;
	params.ViewPoint = ViewPoint;
	params.OtherPoint = OtherPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Restart
// (Defined, Public)
// Parameters:
// bool                           bVehicleTransition             (Parm)

void AController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Restart");

	AController_Restart_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CleanupPRI
// (Defined, Public)

void AController::CleanupPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CleanupPRI");

	AController_CleanupPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Destroyed
// (Defined, Event, Public)

void AController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Destroyed");

	AController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyPostLanded
// (Event, Public)

void AController::NotifyPostLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPostLanded");

	AController_NotifyPostLanded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GamePlayEndedState
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::GamePlayEndedState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GamePlayEndedState");

	AController_GamePlayEndedState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PawnDied
// (Defined, Public)
// Parameters:
// class APawn*                   inPawn                         (Parm)

void AController::PawnDied(class APawn* inPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnDied");

	AController_PawnDied_Params params;
	params.inPawn = inPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnPossess
// (Defined, Event, Public)

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UpdateSex
// (Defined, Public)

void AController::UpdateSex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UpdateSex");

	AController_UpdateSex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Possess
// (Defined, Event, Public)
// Parameters:
// class APawn*                   inPawn                         (Parm)
// bool                           bVehicleTransition             (Parm)

void AController::Possess(class APawn* inPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	AController_Possess_Params params;
	params.inPawn = inPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnPossess
// (Defined, Public)
// Parameters:
// class USeqAct_Possess*         inAction                       (Parm)

void AController::OnPossess(class USeqAct_Possess* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnPossess");

	AController_OnPossess_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AController::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReplicatedEvent");

	AController_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetRotation
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           bResetCamera                   (OptionalParm, Parm)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetLocation
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Reset
// (Defined, Public)

void AController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Reset");

	AController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PostBeginPlay
// (Defined, Event, Public)

void AController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PostBeginPlay");

	AController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveIndex
// (Native, Public)
// Parameters:
// int                            InIndex                        (Parm)
// int                            Count                          (OptionalParm, Parm)

void AController::RouteCache_RemoveIndex(int InIndex, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveIndex");

	AController_RouteCache_RemoveIndex_Params params;
	params.InIndex = InIndex;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveItem
// (Native, Public)
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)

void AController::RouteCache_RemoveItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveItem");

	AController_RouteCache_RemoveItem_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_InsertItem
// (Native, Public)
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)
// int                            Idx                            (OptionalParm, Parm)

void AController::RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_InsertItem");

	AController_RouteCache_InsertItem_Params params;
	params.Nav = Nav;
	params.Idx = Idx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_AddItem
// (Native, Public)
// Parameters:
// class ANavigationPoint*        Nav                            (Parm)

void AController::RouteCache_AddItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_AddItem");

	AController_RouteCache_AddItem_Params params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_Empty
// (Native, Public)

void AController::RouteCache_Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_Empty");

	AController_RouteCache_Empty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsLocalPlayerController
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	AController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.StringToUniqueNetId
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FString                 UniqueNetIdString              (Parm, NeedCtorLink)
// struct FUniqueNetId            out_UniqueId                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::STATIC_StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StringToUniqueNetId");

	UOnlineSubsystem_StringToUniqueNetId_Params params;
	params.UniqueNetIdString = UniqueNetIdString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_UniqueId != nullptr)
		*out_UniqueId = params.out_UniqueId;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.UniqueNetIdToString
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FUniqueNetId            IdToConvert                    (Const, Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineSubsystem::STATIC_UniqueNetIdToString(struct FUniqueNetId* IdToConvert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UniqueNetIdToString");

	UOnlineSubsystem_UniqueNetIdToString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdToConvert != nullptr)
		*IdToConvert = params.IdToConvert;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetNewsInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetNewsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNewsInterface");

	UOnlineSubsystem_SetNewsInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetStatsInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetStatsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetStatsInterface");

	UOnlineSubsystem_SetStatsInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetVoiceInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetVoiceInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetVoiceInterface");

	UOnlineSubsystem_SetVoiceInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetContentInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetContentInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetContentInterface");

	UOnlineSubsystem_SetContentInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetGameInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetGameInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetGameInterface");

	UOnlineSubsystem_SetGameInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetSystemInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetSystemInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSystemInterface");

	UOnlineSubsystem_SetSystemInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetPlayerInterfaceEx(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterfaceEx");

	UOnlineSubsystem_SetPlayerInterfaceEx_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetPlayerInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterface");

	UOnlineSubsystem_SetPlayerInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetAccountInterface
// (Defined, Event, Public)
// Parameters:
// class UObject*                 NewInterface                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::SetAccountInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAccountInterface");

	UOnlineSubsystem_SetAccountInterface_Params params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.Init
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSubsystem::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Init");

	UOnlineSubsystem_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PathClear
// (Defined, Exec, Public)

void APlayerController::PathClear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathClear");

	APlayerController_PathClear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathChild
// (Defined, Exec, Public)
// Parameters:
// int                            Cnt                            (OptionalParm, Parm)

void APlayerController::PathChild(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathChild");

	APlayerController_PathChild_Params params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathStep
// (Defined, Exec, Public)
// Parameters:
// int                            Cnt                            (OptionalParm, Parm)

void APlayerController::PathStep(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathStep");

	APlayerController_PathStep_Params params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SoakPause
// (Defined, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::SoakPause(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SoakPause");

	APlayerController_SoakPause_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// (Defined, Public)

void APlayerController::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IncrementNumberOfMatchesPlayed");

	APlayerController_IncrementNumberOfMatchesPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanViewUserCreatedContent
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanViewUserCreatedContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanViewUserCreatedContent");

	APlayerController_CanViewUserCreatedContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerRegisterClientStatGuid
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 StatGuid                       (Parm, NeedCtorLink)

void APlayerController::ServerRegisterClientStatGuid(const struct FString& StatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisterClientStatGuid");

	APlayerController_ServerRegisterClientStatGuid_Params params;
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnRegisterHostStatGuidComplete");

	APlayerController_OnRegisterHostStatGuidComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterHostStatGuid
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FString                 StatGuid                       (Parm, NeedCtorLink)

void APlayerController::ClientRegisterHostStatGuid(const struct FString& StatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterHostStatGuid");

	APlayerController_ClientRegisterHostStatGuid_Params params;
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableDebugCamera
// (Defined, Public, HasDefaults)

void APlayerController::EnableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableDebugCamera");

	APlayerController_EnableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveDebugText
// (Final, Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class AActor*                  SrcActor                       (Parm)

void APlayerController::RemoveDebugText(class AActor* SrcActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveDebugText");

	APlayerController_RemoveDebugText_Params params;
	params.SrcActor = SrcActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddDebugText
// (Final, Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// struct FString                 DebugText                      (Parm, NeedCtorLink)
// class AActor*                  SrcActor                       (OptionalParm, Parm)
// float                          Duration                       (OptionalParm, Parm)
// struct FVector                 Offset                         (OptionalParm, Parm)
// struct FVector                 DesiredOffset                  (OptionalParm, Parm)
// struct FColor                  TextColor                      (OptionalParm, Parm)
// bool                           bSkipOverwriteCheck            (OptionalParm, Parm)

void APlayerController::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddDebugText");

	APlayerController_AddDebugText_Params params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DrawDebugTextList
// (Final, Defined, Simulated, Public, HasDefaults)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          RenderDelta                    (Parm)

void APlayerController::DrawDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawDebugTextList");

	APlayerController_DrawDebugTextList_Params params;
	params.Canvas = Canvas;
	params.RenderDelta = RenderDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendToConsole
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void APlayerController::SendToConsole(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendToConsole");

	APlayerController_SendToConsole_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConsoleKey
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Key                            (Parm)

void APlayerController::ConsoleKey(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleKey");

	APlayerController_ConsoleKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDestroy
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void APlayerController::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroy");

	APlayerController_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustMusicTrackVolume
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    (Parm)
// float                          AdjustVolumeDuration           (Parm)
// float                          AdjustVolumeLevel              (Parm)

void APlayerController::ClientAdjustMusicTrackVolume(class USeqAct_CrossFadeMusicTracks* MusicAction, float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustMusicTrackVolume");

	APlayerController_ClientAdjustMusicTrackVolume_Params params;
	params.MusicAction = MusicAction;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFadeOutMusicTrack
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    (Parm)
// float                          FadeOutTime                    (Parm)
// float                          FadeOutVolumeLevel             (Parm)

void APlayerController::ClientFadeOutMusicTrack(class USeqAct_CrossFadeMusicTracks* MusicAction, float FadeOutTime, float FadeOutVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFadeOutMusicTrack");

	APlayerController_ClientFadeOutMusicTrack_Params params;
	params.MusicAction = MusicAction;
	params.FadeOutTime = FadeOutTime;
	params.FadeOutVolumeLevel = FadeOutVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCrossFadeMusicTrack_PlayTrack
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    (Parm)
// struct FMusicTrackStruct       MusicTrack                     (Parm)

void APlayerController::ClientCrossFadeMusicTrack_PlayTrack(class USeqAct_CrossFadeMusicTracks* MusicAction, const struct FMusicTrackStruct& MusicTrack)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCrossFadeMusicTrack_PlayTrack");

	APlayerController_ClientCrossFadeMusicTrack_PlayTrack_Params params;
	params.MusicAction = MusicAction;
	params.MusicTrack = MusicTrack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSendMusicInfo
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerSendMusicInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSendMusicInfo");

	APlayerController_ServerSendMusicInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStartNetworkedVoice
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientStartNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartNetworkedVoice");

	APlayerController_ClientStartNetworkedVoice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopNetworkedVoice
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientStopNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopNetworkedVoice");

	APlayerController_ClientStopNetworkedVoice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHostUniqueId
// (Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FUniqueNetId            InHostId                       (Parm)

void APlayerController::ClientSetHostUniqueId(const struct FUniqueNetId& InHostId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHostUniqueId");

	APlayerController_ClientSetHostUniqueId_Params params;
	params.InHostId = InHostId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// (Defined, Net, NetReliable, Simulated, Public, HasDefaults, NetClient)

void APlayerController::ClientWriteOnlinePlayerScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteOnlinePlayerScores");

	APlayerController_ClientWriteOnlinePlayerScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientArbitratedMatchEnded
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientArbitratedMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientArbitratedMatchEnded");

	APlayerController_ClientArbitratedMatchEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// (Defined, Public)

void APlayerController::NotifyNotEnoughSpaceInInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite");

	APlayerController_NotifyNotEnoughSpaceInInvite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// (Defined, Public)

void APlayerController::NotifyNotAllPlayersCanJoinInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite");

	APlayerController_NotifyNotAllPlayersCanJoinInvite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyInviteFailed
// (Defined, Public)

void APlayerController::NotifyInviteFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyInviteFailed");

	APlayerController_NotifyInviteFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnInviteJoinComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnInviteJoinComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnInviteJoinComplete");

	APlayerController_OnInviteJoinComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDestroyForInviteComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnDestroyForInviteComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroyForInviteComplete");

	APlayerController_OnDestroyForInviteComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnEndForInviteComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnEndForInviteComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEndForInviteComplete");

	APlayerController_OnEndForInviteComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearInviteDelegates
// (Defined, Public)

void APlayerController::ClearInviteDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearInviteDelegates");

	APlayerController_ClearInviteDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanAllPlayersPlayOnline
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanAllPlayersPlayOnline()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanAllPlayersPlayOnline");

	APlayerController_CanAllPlayersPlayOnline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.InviteHasEnoughSpace
// (Defined, Public)
// Parameters:
// class UOnlineGameSettings*     InviteSettings                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InviteHasEnoughSpace");

	APlayerController_InviteHasEnoughSpace_Params params;
	params.InviteSettings = InviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnGameInviteAccepted
// (Defined, Public)
// Parameters:
// class UOnlineGameSettings*     GameInviteSettings             (Parm)

void APlayerController::OnGameInviteAccepted(class UOnlineGameSettings* GameInviteSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnGameInviteAccepted");

	APlayerController_OnGameInviteAccepted_Params params;
	params.GameInviteSettings = GameInviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerWritenArbitrationEndGameData
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerWritenArbitrationEndGameData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerWritenArbitrationEndGameData");

	APlayerController_ServerWritenArbitrationEndGameData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteArbitrationEndGameData
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class UClass*                  OnlineStatsWriteClass          (Parm)

void APlayerController::ClientWriteArbitrationEndGameData(class UClass* OnlineStatsWriteClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteArbitrationEndGameData");

	APlayerController_ClientWriteArbitrationEndGameData_Params params;
	params.OnlineStatsWriteClass = OnlineStatsWriteClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRegisteredForArbitration
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::ServerRegisteredForArbitration(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRegisteredForArbitration");

	APlayerController_ServerRegisteredForArbitration_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnArbitrationRegisterComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void APlayerController::OnArbitrationRegisterComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnArbitrationRegisterComplete");

	APlayerController_OnArbitrationRegisterComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterForArbitration
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientRegisterForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterForArbitration");

	APlayerController_ClientRegisterForArbitration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWasKicked
// (Net, NetReliable, Simulated, Event, Public, NetClient)

void APlayerController::ClientWasKicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	APlayerController_ClientWasKicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyConnectionError
// (Defined, Public)
// Parameters:
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)

void APlayerController::NotifyConnectionError(const struct FString& Message, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyConnectionError");

	APlayerController_NotifyConnectionError_Params params;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsShowingSubtitles
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsShowingSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsShowingSubtitles");

	APlayerController_IsShowingSubtitles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetShowSubtitles
// (Simulated, Native, Public)
// Parameters:
// bool                           bValue                         (Parm)

void APlayerController::SetShowSubtitles(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetShowSubtitles");

	APlayerController_SetShowSubtitles_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyDirectorControl
// (Event, Public)
// Parameters:
// bool                           bNowControlling                (Parm)

void APlayerController::NotifyDirectorControl(bool bNowControlling)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDirectorControl");

	APlayerController_NotifyDirectorControl_Params params;
	params.bNowControlling = bNowControlling;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUnmutePlayer
// (Defined, Net, NetReliable, Event, Public, NetServer)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	APlayerController_ServerUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMutePlayer
// (Defined, Net, NetReliable, Event, Public, NetServer)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ServerMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	APlayerController_ServerMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayUnmutePlayer
// (Defined, Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayUnmutePlayer");

	APlayerController_GameplayUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayMutePlayer
// (Defined, Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayMutePlayer");

	APlayerController_GameplayMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUnmutePlayer
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	APlayerController_ClientUnmutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMutePlayer
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)

void APlayerController::ClientMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	APlayerController_ClientMutePlayer_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerControllerFromNetId
// (Native, Static, Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (Parm)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* APlayerController::STATIC_GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerControllerFromNetId");

	APlayerController_GetPlayerControllerFromNetId_Params params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetOnlineStatus
// (Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientSetOnlineStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetOnlineStatus");

	APlayerController_ClientSetOnlineStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelFrom
// (Defined, Public)
// Parameters:
// class APlayerController*       OldPC                          (Parm)

void APlayerController::SeamlessTravelFrom(class APlayerController* OldPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelFrom");

	APlayerController_SeamlessTravelFrom_Params params;
	params.OldPC = OldPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelTo
// (Public)
// Parameters:
// class APlayerController*       NewPC                          (Parm)

void APlayerController::SeamlessTravelTo(class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelTo");

	APlayerController_SeamlessTravelTo_Params params;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSeamlessTravelActorList
// (Defined, Event, Public, HasOutParms)
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void APlayerController::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSeamlessTravelActorList");

	APlayerController_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.PlayerController.IsPlayerMuted
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FUniqueNetId            Sender                         (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPlayerMuted(struct FUniqueNetId* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPlayerMuted");

	APlayerController_IsPlayerMuted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Sender != nullptr)
		*Sender = params.Sender;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetUIController
// (Final, Defined, Public)
// Parameters:
// class UUIInteraction*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIInteraction* APlayerController::GetUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetUIController");

	APlayerController_GetUIController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SaveActorConfig
// (Defined, Exec, Public)
// Parameters:
// struct FName                   actorName                      (Parm, CoerceParm)

void APlayerController::SaveActorConfig(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveActorConfig");

	APlayerController_SaveActorConfig_Params params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SaveClassConfig
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SaveClassConfig(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveClassConfig");

	APlayerController_SaveClassConfig_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// (Final, Net, NetReliable, Simulated, Native, Event, Public, NetClient)

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	APlayerController_ClientFlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCommitMapChange
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// bool                           bShouldSkipLevelStartupEvent   (OptionalParm, Parm)
// bool                           bShouldSkipLevelBeginningEvent (OptionalParm, Parm)

void APlayerController::ClientCommitMapChange(bool bShouldSkipLevelStartupEvent, bool bShouldSkipLevelBeginningEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	APlayerController_ClientCommitMapChange_Params params;
	params.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	params.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DelayedPrepareMapChange
// (Defined, Public)

void APlayerController::DelayedPrepareMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DelayedPrepareMapChange");

	APlayerController_DelayedPrepareMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrepareMapChange
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// struct FName                   LevelName                      (Parm)
// bool                           bFirst                         (Parm)
// bool                           bLast                          (Parm)

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	APlayerController_ClientPrepareMapChange_Params params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdateLevelVisibility
// (Final, Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bIsVisible                     (Parm)

void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	APlayerController_ServerUpdateLevelVisibility_Params params;
	params.PackageName = PackageName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// (Final, Net, NetReliable, Simulated, Native, Public, NetClient)
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bNewShouldBeLoaded             (Parm)
// bool                           bNewShouldBeVisible            (Parm)
// bool                           bNewShouldBlockOnLoad          (Parm)

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	APlayerController_ClientUpdateLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LevelStreamingStatusChanged
// (Defined, Event, Public)
// Parameters:
// class ULevelStreaming*         LevelObject                    (Parm)
// bool                           bNewShouldBeLoaded             (Parm)
// bool                           bNewShouldBeVisible            (Parm)
// bool                           bNewShouldBlockOnLoad          (Parm)

void APlayerController::LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LevelStreamingStatusChanged");

	APlayerController_LevelStreamingStatusChanged_Params params;
	params.LevelObject = LevelObject;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	APlayerController_ClientForceGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnConsoleCommand
// (Defined, Public)
// Parameters:
// class USeqAct_ConsoleCommand*  inAction                       (Parm)

void APlayerController::OnConsoleCommand(class USeqAct_ConsoleCommand* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnConsoleCommand");

	APlayerController_OnConsoleCommand_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetPlayerMovementInput
// (Defined, Public)

void APlayerController::ResetPlayerMovementInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetPlayerMovementInput");

	APlayerController_ResetPlayerMovementInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLookInputIgnored
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLookInputIgnored");

	APlayerController_IsLookInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreLookInput
// (Defined, Public)
// Parameters:
// bool                           bNewLookInput                  (Parm)

void APlayerController::IgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreLookInput");

	APlayerController_IgnoreLookInput_Params params;
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMoveInputIgnored");

	APlayerController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreMoveInput
// (Defined, Public)
// Parameters:
// bool                           bNewMoveInput                  (Parm)

void APlayerController::IgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreMoveInput");

	APlayerController_IgnoreMoveInput_Params params;
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCinematicMode
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// bool                           bInCinematicMode               (Parm)
// bool                           bAffectsMovement               (Parm)
// bool                           bAffectsTurning                (Parm)
// bool                           bAffectsHUD                    (Parm)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	APlayerController_ClientSetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCinematicMode
// (Defined, Public)
// Parameters:
// bool                           bInCinematicMode               (Parm)
// bool                           bHidePlayer                    (Parm)
// bool                           bAffectsHUD                    (Parm)
// bool                           bAffectsMovement               (Parm)
// bool                           bAffectsTurning                (Parm)
// bool                           bAffectsButtons                (Parm)
// bool                           bSwitchSoundMode               (Parm)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bSwitchSoundMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	APlayerController_SetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsButtons = bAffectsButtons;
	params.bSwitchSoundMode = bSwitchSoundMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleCinematicMode
// (Defined, Public)
// Parameters:
// class USeqAct_ToggleCinematicMode* Action                         (Parm)

void APlayerController::OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleCinematicMode");

	APlayerController_OnToggleCinematicMode_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CameraShake
// (Public)
// Parameters:
// float                          Duration                       (Parm)
// struct FVector                 newRotAmplitude                (Parm)
// struct FVector                 newRotFrequency                (Parm)
// struct FVector                 newLocAmplitude                (Parm)
// struct FVector                 newLocFrequency                (Parm)
// float                          newFOVAmplitude                (Parm)
// float                          newFOVFrequency                (Parm)

void APlayerController::CameraShake(float Duration, const struct FVector& newRotAmplitude, const struct FVector& newRotFrequency, const struct FVector& newLocAmplitude, const struct FVector& newLocFrequency, float newFOVAmplitude, float newFOVFrequency)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraShake");

	APlayerController_CameraShake_Params params;
	params.Duration = Duration;
	params.newRotAmplitude = newRotAmplitude;
	params.newRotFrequency = newRotFrequency;
	params.newLocAmplitude = newLocAmplitude;
	params.newLocFrequency = newLocFrequency;
	params.newFOVAmplitude = newFOVAmplitude;
	params.newFOVFrequency = newFOVFrequency;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// (Final, Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (OptionalParm, Parm)

void APlayerController::ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedbackWaveform");

	APlayerController_ClientStopForceFeedbackWaveform_Params params;
	params.FFWaveform = FFWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// (Final, Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (Parm)

void APlayerController::ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedbackWaveform");

	APlayerController_ClientPlayForceFeedbackWaveform_Params params;
	params.FFWaveform = FFWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnForceFeedback
// (Defined, Public)
// Parameters:
// class USeqAct_ForceFeedback*   Action                         (Parm)

void APlayerController::OnForceFeedback(class USeqAct_ForceFeedback* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnForceFeedback");

	APlayerController_OnForceFeedback_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyTakeHit
// (Defined, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void APlayerController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyTakeHit");

	APlayerController_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListCE
// (Defined, Exec, Public)

void APlayerController::ListCE()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListCE");

	APlayerController_ListCE_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListConsoleEvents
// (Defined, Exec, Public)

void APlayerController::ListConsoleEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListConsoleEvents");

	APlayerController_ListConsoleEvents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CE
// (Defined, Exec, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void APlayerController::CE(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CE");

	APlayerController_CE_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CauseEvent
// (Defined, Exec, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void APlayerController::CauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CauseEvent");

	APlayerController_CauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCauseEvent
// (Defined, Net, Public, NetServer)
// Parameters:
// struct FName                   EventName                      (Parm)

void APlayerController::ServerCauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCauseEvent");

	APlayerController_ServerCauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleHUD
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_ToggleHUD*       inAction                       (Parm)

void APlayerController::OnToggleHUD(class USeqAct_ToggleHUD* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleHUD");

	APlayerController_OnToggleHUD_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnSetCameraTarget
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_SetCameraTarget* inAction                       (Parm)

void APlayerController::OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetCameraTarget");

	APlayerController_OnSetCameraTarget_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void APlayerController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebug");

	APlayerController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	APlayerController_ClientIgnoreLookInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// bool                           bIgnore                        (Parm)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	APlayerController_ClientIgnoreMoveInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleInput
// (Defined, Public)
// Parameters:
// class USeqAct_ToggleInput*     inAction                       (Parm)

void APlayerController::OnToggleInput(class USeqAct_ToggleInput* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleInput");

	APlayerController_OnToggleInput_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DrawHUD
// (Defined, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void APlayerController::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawHUD");

	APlayerController_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanRestartPlayer
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	APlayerController_CanRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerViewSelf
// (Defined, Net, Public, NetServer)

void APlayerController::ServerViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	APlayerController_ServerViewSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewAPlayer
// (Defined, Public)
// Parameters:
// int                            Dir                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ViewAPlayer(int Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewAPlayer");

	APlayerController_ViewAPlayer_Params params;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerViewPrevPlayer
// (Defined, Net, Public, NetServer)

void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	APlayerController_ServerViewPrevPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewNextPlayer
// (Defined, Net, Public, NetServer)

void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	APlayerController_ServerViewNextPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// (Defined, Net, Public, NetServer)
// Parameters:
// struct FVector                 NewLoc                         (Parm)

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	APlayerController_ServerSetSpectatorLocation_Params params;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsSpectating
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpectating");

	APlayerController_IsSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CheckJumpOrDuck
// (Defined, Public)

void APlayerController::CheckJumpOrDuck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckJumpOrDuck");

	APlayerController_CheckJumpOrDuck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearDoubleClick
// (Defined, Public)

void APlayerController::ClearDoubleClick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearDoubleClick");

	APlayerController_ClearDoubleClick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LimitViewRotation
// (Defined, Event, Public)
// Parameters:
// struct FRotator                ViewRotation                   (Parm)
// float                          ViewPitchMin                   (Parm)
// float                          ViewPitchMax                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LimitViewRotation");

	APlayerController_LimitViewRotation_Params params;
	params.ViewRotation = ViewRotation;
	params.ViewPitchMin = ViewPitchMin;
	params.ViewPitchMax = ViewPitchMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ProcessViewRotation
// (Defined, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessViewRotation");

	APlayerController_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
}


// Function Engine.PlayerController.UpdateRotation
// (Defined, Public, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::UpdateRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateRotation");

	APlayerController_UpdateRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewShake
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::ViewShake(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewShake");

	APlayerController_ViewShake_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void APlayerController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerViewPoint");

	APlayerController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.PlayerController.SpawnPlayerCamera
// (Defined, Event, Public)

void APlayerController::SpawnPlayerCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnPlayerCamera");

	APlayerController_SpawnPlayerCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetViewTarget
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APlayerController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewTarget");

	APlayerController_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetViewTarget
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class AActor*                  A                              (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	APlayerController_ClientSetViewTarget_Params params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTarget
// (Native, Public)
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)
// struct FViewTargetTransitionParams TransitionParams               (OptionalParm, Parm)

void APlayerController::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTarget");

	APlayerController_SetViewTarget_Params params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLocalPlayerController
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalPlayerController");

	APlayerController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFOVAngle
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFOVAngle");

	APlayerController_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AdjustFOV
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::AdjustFOV(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustFOV");

	APlayerController_AdjustFOV_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyLanded
// (Defined, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLanded");

	APlayerController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AimHelpDot
// (Defined, Public)
// Parameters:
// bool                           bInstantHit                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::AimHelpDot(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimHelpDot");

	APlayerController_AimHelpDot_Params params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetAdjustedAimFor
// (Defined, Public, HasDefaults)
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAdjustedAimFor");

	APlayerController_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CameraLookAtFinished
// (Event, Public)
// Parameters:
// class USeqAct_CameraLookAt*    Action                         (Parm)

void APlayerController::CameraLookAtFinished(class USeqAct_CameraLookAt* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraLookAtFinished");

	APlayerController_CameraLookAtFinished_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AimingHelp
// (Defined, Public)
// Parameters:
// bool                           bInstantHit                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AimingHelp(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimingHelp");

	APlayerController_AimingHelp_Params params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayerMove
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerMove");

	APlayerController_PlayerMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayerTick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerTick");

	APlayerController_PlayerTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyChangedWeapon
// (Public)
// Parameters:
// class AWeapon*                 PreviousWeapon                 (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void APlayerController::NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyChangedWeapon");

	APlayerController_NotifyChangedWeapon_Params params;
	params.PreviousWeapon = PreviousWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGameEnded
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class AActor*                  EndGameFocus                   (Parm)
// bool                           bIsWinner                      (Parm)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	APlayerController_ClientGameEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameHasEnded
// (Defined, Public)
// Parameters:
// class AActor*                  EndGameFocus                   (OptionalParm, Parm)
// bool                           bIsWinner                      (OptionalParm, Parm)

void APlayerController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameHasEnded");

	APlayerController_GameHasEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRestart
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	APlayerController_ClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnterStartState
// (Defined, Public)

void APlayerController::EnterStartState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnterStartState");

	APlayerController_EnterStartState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::HasClientLoadedCurrentWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasClientLoadedCurrentWorld");

	APlayerController_HasClientLoadedCurrentWorld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.NotifyLoadedWorld
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FName                   WorldPackageName               (Parm)
// bool                           bFinalDest                     (Parm)

void APlayerController::NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLoadedWorld");

	APlayerController_NotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;
	params.bFinalDest = bFinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// (Final, Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FName                   WorldPackageName               (Parm)

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	APlayerController_ServerNotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Restart
// (Defined, Public)
// Parameters:
// bool                           bVehicleTransition             (Parm)

void APlayerController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Restart");

	APlayerController_Restart_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetProgressTime
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// float                          T                              (Parm)

void APlayerController::ClientSetProgressTime(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetProgressTime");

	APlayerController_ClientSetProgressTime_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetProgressTime
// (Defined, Exec, Event, Public)
// Parameters:
// float                          T                              (Parm)

void APlayerController::SetProgressTime(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetProgressTime");

	APlayerController_SetProgressTime_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetProgressMessage
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// TEnumAsByte<EProgressMessageType> MessageType                    (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ClientSetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetProgressMessage");

	APlayerController_ClientSetProgressMessage_Params params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetProgressMessage
// (Defined, Exec, Event, Public)
// Parameters:
// TEnumAsByte<EProgressMessageType> MessageType                    (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 Title                          (OptionalParm, Parm, NeedCtorLink)

void APlayerController::SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetProgressMessage");

	APlayerController_SetProgressMessage_Params params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientClearProgressMessages
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientClearProgressMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearProgressMessages");

	APlayerController_ClientClearProgressMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearProgressMessages
// (Defined, Exec, Public)

void APlayerController::ClearProgressMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearProgressMessages");

	APlayerController_ClearProgressMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchLevel
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::SwitchLevel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeTeam
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// int                            N                              (Parm)

void APlayerController::ServerChangeTeam(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeTeam");

	APlayerController_ServerChangeTeam_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeTeam
// (Defined, Exec, Public)
// Parameters:
// struct FString                 TeamName                       (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ChangeTeam(const struct FString& TeamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeTeam");

	APlayerController_ChangeTeam_Params params;
	params.TeamName = TeamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchTeam
// (Defined, Exec, Public)

void APlayerController::SwitchTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam");

	APlayerController_SwitchTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeName
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::ServerChangeName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	APlayerController_ServerChangeName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetName
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SetName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	APlayerController_SetName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSuicide
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerSuicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSuicide");

	APlayerController_ServerSuicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Suicide
// (Defined, Exec, Public)

void APlayerController::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Suicide");

	APlayerController_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TriggerInteracted
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::TriggerInteracted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TriggerInteracted");

	APlayerController_TriggerInteracted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FindVehicleToDrive
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::FindVehicleToDrive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindVehicleToDrive");

	APlayerController_FindVehicleToDrive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PerformedUseAction
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::PerformedUseAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PerformedUseAction");

	APlayerController_PerformedUseAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerUse
// (Defined, Net, Public, NetServer)

void APlayerController::ServerUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUse");

	APlayerController_ServerUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Use
// (Defined, Exec, Public)

void APlayerController::Use()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Use");

	APlayerController_Use_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetTriggerUseList
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          interactDistanceToCheck        (Parm)
// float                          crosshairDist                  (Parm)
// float                          minDot                         (Parm)
// bool                           bUsuableOnly                   (Parm)
// TArray<class ATrigger*>        out_useList                    (Parm, OutParm, NeedCtorLink)

void APlayerController::GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetTriggerUseList");

	APlayerController_GetTriggerUseList_Params params;
	params.interactDistanceToCheck = interactDistanceToCheck;
	params.crosshairDist = crosshairDist;
	params.minDot = minDot;
	params.bUsuableOnly = bUsuableOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_useList != nullptr)
		*out_useList = params.out_useList;
}


// Function Engine.PlayerController.StopAltFire
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StopAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopAltFire");

	APlayerController_StopAltFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartAltFire
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StartAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartAltFire");

	APlayerController_StartAltFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StopFire
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopFire");

	APlayerController_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartFire
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  FireModeNum                    (OptionalParm, Parm)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	APlayerController_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NextWeapon
// (Defined, Exec, Public)

void APlayerController::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NextWeapon");

	APlayerController_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrevWeapon
// (Defined, Exec, Public)

void APlayerController::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevWeapon");

	APlayerController_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerThrowWeapon
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerThrowWeapon");

	APlayerController_ServerThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ThrowWeapon
// (Defined, Exec, Public)

void APlayerController::ThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowWeapon");

	APlayerController_ThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UTrace
// (Defined, Exec, Public)

void APlayerController::UTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UTrace");

	APlayerController_UTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUTrace
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerUTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUTrace");

	APlayerController_ServerUTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConditionalPause
// (Defined, Event, Public)
// Parameters:
// bool                           bDesiredPauseState             (Parm)

void APlayerController::ConditionalPause(bool bDesiredPauseState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConditionalPause");

	APlayerController_ConditionalPause_Params params;
	params.bDesiredPauseState = bDesiredPauseState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowMenu
// (Defined, Exec, Public)

void APlayerController::ShowMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowMenu");

	APlayerController_ShowMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerPause
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Pause
// (Defined, Exec, Public)

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsPaused
// (Final, Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPaused");

	APlayerController_IsPaused_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DebugPause
// (Defined, Exec, Public)

void APlayerController::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DebugPause");

	APlayerController_DebugPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetPause
// (Defined, Public)
// Parameters:
// bool                           bPause                         (Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPause");

	APlayerController_SetPause_Params params;
	params.bPause = bPause;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpause
// (Defined, Public, Delegate)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpause");

	APlayerController_CanUnpause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.QuickLoad
// (Defined, Exec, Public)

void APlayerController::QuickLoad()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.QuickLoad");

	APlayerController_QuickLoad_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.QuickSave
// (Defined, Exec, Public)

void APlayerController::QuickSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.QuickSave");

	APlayerController_QuickSave_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LocalTravel
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::LocalTravel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RestartLevel
// (Defined, Exec, Public)

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpeech
// (Net, NetReliable, Public, NetServer)
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpeech");

	APlayerController_ServerSpeech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Speech
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::Speech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speech");

	APlayerController_Speech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRestartGame
// (Net, NetReliable, Public, NetServer)

void APlayerController::ServerRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartGame");

	APlayerController_ServerRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandleWalking
// (Defined, Public)

void APlayerController::HandleWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandleWalking");

	APlayerController_HandleWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CallServerMove
// (Defined, Public, HasDefaults)
// Parameters:
// class USavedMove*              NewMove                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// class USavedMove*              OldMove                        (Parm)

void APlayerController::CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CallServerMove");

	APlayerController_CallServerMove_Params params;
	params.NewMove = NewMove;
	params.ClientLoc = ClientLoc;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldMove = OldMove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReplicateMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicateMove");

	APlayerController_ReplicateMove_Params params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CompressAccel
// (Defined, Public)
// Parameters:
// int                            C                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::CompressAccel(int C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CompressAccel");

	APlayerController_CompressAccel_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFreeMove
// (Final, Defined, Public)
// Parameters:
// class USavedMove*              ReturnValue                    (Parm, OutParm, ReturnParm)

class USavedMove* APlayerController::GetFreeMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFreeMove");

	APlayerController_GetFreeMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientUpdatePosition
// (Defined, Public)

void APlayerController::ClientUpdatePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdatePosition");

	APlayerController_ClientUpdatePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearAckedMoves
// (Defined, Public)

void APlayerController::ClearAckedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAckedMoves");

	APlayerController_ClearAckedMoves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdatePing
// (Defined, Net, Public, NetServer)
// Parameters:
// int                            NewPing                        (Parm)

void APlayerController::ServerUpdatePing(int NewPing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdatePing");

	APlayerController_ServerUpdatePing_Params params;
	params.NewPing = NewPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateStateFromAdjustment
// (Defined, Public)
// Parameters:
// struct FName                   NewState                       (Parm)

void APlayerController::UpdateStateFromAdjustment(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateStateFromAdjustment");

	APlayerController_UpdateStateFromAdjustment_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LongClientAdjustPosition
// (Defined, Net, Simulated, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)
// float                          NewFloorX                      (Parm)
// float                          NewFloorY                      (Parm)
// float                          NewFloorZ                      (Parm)

void APlayerController::LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LongClientAdjustPosition");

	APlayerController_LongClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;
	params.NewFloorX = NewFloorX;
	params.NewFloorY = NewFloorY;
	params.NewFloorZ = NewFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdatePing
// (Final, Defined, Public)
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerController::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdatePing");

	APlayerController_UpdatePing_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetNetSpeed
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// int                            NewSpeed                       (Parm)

void APlayerController::ServerSetNetSpeed(int NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetNetSpeed");

	APlayerController_ServerSetNetSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustPosition
// (Defined, Net, Simulated, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustPosition");

	APlayerController_ClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAckGoodMove
// (Defined, Net, Simulated, Public, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerController::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAckGoodMove");

	APlayerController_ClientAckGoodMove_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCapBandwidth
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Cap                            (Parm)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShortClientAdjustPosition
// (Defined, Net, Simulated, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortClientAdjustPosition");

	APlayerController_ShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.VeryShortClientAdjustPosition
// (Defined, Net, Simulated, Public, HasDefaults, NetClient)
// Parameters:
// float                          TimeStamp                      (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VeryShortClientAdjustPosition");

	APlayerController_VeryShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MoveAutonomous
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// unsigned char                  CompressedFlags                (Parm)
// struct FVector                 newAccel                       (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MoveAutonomous");

	APlayerController_MoveAutonomous_Params params;
	params.DeltaTime = DeltaTime;
	params.CompressedFlags = CompressedFlags;
	params.newAccel = newAccel;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessMove");

	APlayerController_ProcessMove_Params params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessDrive
// (Defined, Public)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)
// bool                           InJump                         (Parm)

void APlayerController::ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessDrive");

	APlayerController_ProcessDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;
	params.InJump = InJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerDrive
// (Defined, Net, Public, NetServer, HasDefaults)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          aUp                            (Parm)
// bool                           InJump                         (Parm)
// int                            View                           (Parm)

void APlayerController::ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerDrive");

	APlayerController_ServerDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.aUp = aUp;
	params.InJump = InJump;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendClientAdjustment
// (Defined, Event, Public)

void APlayerController::SendClientAdjustment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendClientAdjustment");

	APlayerController_SendClientAdjustment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMove
// (Defined, Net, Public, NetServer, HasDefaults)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  MoveFlags                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMove");

	APlayerController_ServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.MoveFlags = MoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OldServerMove
// (Defined, Net, Public, NetServer, HasDefaults)
// Parameters:
// float                          OldTimeStamp                   (Parm)
// unsigned char                  OldAccelX                      (Parm)
// unsigned char                  OldAccelY                      (Parm)
// unsigned char                  OldAccelZ                      (Parm)
// unsigned char                  OldMoveFlags                   (Parm)

void APlayerController::OldServerMove(float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OldServerMove");

	APlayerController_OldServerMove_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccelX = OldAccelX;
	params.OldAccelY = OldAccelY;
	params.OldAccelZ = OldAccelZ;
	params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualServerMove
// (Defined, Net, Public, NetServer)
// Parameters:
// float                          TimeStamp0                     (Parm)
// struct FVector                 InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm)
// int                            View0                          (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualServerMove");

	APlayerController_DualServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceDeathUpdate
// (Defined, Public)

void APlayerController::ForceDeathUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceDeathUpdate");

	APlayerController_ForceDeathUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientVoiceMessage
// (Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// unsigned char                  messageID                      (Parm)

void APlayerController::ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char messageID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceMessage");

	APlayerController_ClientVoiceMessage_Params params;
	params.Sender = Sender;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.messageID = messageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UsingFirstPersonCamera
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::UsingFirstPersonCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UsingFirstPersonCamera");

	APlayerController_UsingFirstPersonCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ResetCameraMode
// (Defined, Event, Public)

void APlayerController::ResetCameraMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetCameraMode");

	APlayerController_ResetCameraMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCameraMode
// (Defined, Public)
// Parameters:
// struct FName                   NewCamMode                     (Parm)

void APlayerController::SetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCameraMode");

	APlayerController_SetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCameraMode
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FName                   NewCamMode                     (Parm)

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	APlayerController_ClientSetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCamera
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FName                   NewMode                        (Parm)

void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	APlayerController_ServerCamera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Camera
// (Defined, Exec, Public)
// Parameters:
// struct FName                   NewMode                        (Parm)

void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	APlayerController_Camera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreClientTravel
// (Event, Public)

void APlayerController::PreClientTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreClientTravel");

	APlayerController_PreClientTravel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerTeamSay
// (Defined, Net, Public, NetServer)
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::ServerTeamSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerTeamSay");

	APlayerController_ServerTeamSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamSay
// (Defined, Exec, Public)
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::TeamSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamSay");

	APlayerController_TeamSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSay
// (Defined, Net, Public, NetServer)
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::ServerSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSay");

	APlayerController_ServerSay_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Say
// (Defined, Exec, Public)
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)

void APlayerController::Say(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Say");

	APlayerController_Say_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowTextMessage
// (Defined, Public)
// Parameters:
// struct FString                 msg                            (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowTextMessage(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextMessage");

	APlayerController_AllowTextMessage_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerMutate
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::ServerMutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutate");

	APlayerController_ServerMutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Mutate
// (Defined, Exec, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::Mutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mutate");

	APlayerController_Mutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FOV
// (Defined, Exec, Public)
// Parameters:
// float                          F                              (Parm)

void APlayerController::FOV(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	APlayerController_FOV_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetFOV
// (Defined, Public)

void APlayerController::ResetFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetFOV");

	APlayerController_ResetFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFOV
// (Defined, Public)
// Parameters:
// float                          NewFOV                         (Parm)

void APlayerController::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOV");

	APlayerController_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FixFOV
// (Defined, Public)

void APlayerController::FixFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixFOV");

	APlayerController_FixFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Destroyed
// (Defined, Event, Public)

void APlayerController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Destroyed");

	APlayerController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearOnlineDelegates
// (Defined, Event, Public)

void APlayerController::ClearOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearOnlineDelegates");

	APlayerController_ClearOnlineDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayBeepSound
// (Public)

void APlayerController::PlayBeepSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayBeepSound");

	APlayerController_PlayBeepSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamMessage
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (Parm)
// float                          MsgLifeTime                    (OptionalParm, Parm)

void APlayerController::TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamMessage");

	APlayerController_TeamMessage_Params params;
	params.PRI = PRI;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMessage
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// float                          MsgLifeTime                    (OptionalParm, Parm)

void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class AActor*                  SourceActor                    (Parm)
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)

void APlayerController::ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayActorFaceFXAnim");

	APlayerController_ClientPlayActorFaceFXAnim_Params params;
	params.SourceActor = SourceActor;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientStopSound
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// float                          FadeOutTime                    (Parm)

void APlayerController::Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientStopSound");

	APlayerController_Kismet_ClientStopSound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientPlaySound
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// float                          VolumeMultiplier               (Parm)
// float                          PitchMultiplier                (Parm)
// float                          FadeInTime                     (Parm)
// bool                           bSuppressSubtitles             (Parm)
// bool                           bSuppressSpatialization        (Parm)

void APlayerController::Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientPlaySound");

	APlayerController_Kismet_ClientPlaySound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.FadeInTime = FadeInTime;
	params.bSuppressSubtitles = bSuppressSubtitles;
	params.bSuppressSpatialization = bSuppressSpatialization;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientHearSound
// (Defined, Net, Simulated, Event, Public, NetClient)
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// struct FVector                 SourceLocation                 (Parm)
// bool                           bStopWhenOwnerDestroyed        (Parm)
// bool                           bIsOccluded                    (OptionalParm, Parm)

void APlayerController::ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientHearSound");

	APlayerController_ClientHearSound_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPooledAudioComponent
// (Native, Public)
// Parameters:
// class USoundCue*               ASound                         (Parm)
// class AActor*                  SourceActor                    (Parm)
// bool                           bStopWhenOwnerDestroyed        (Parm)
// bool                           bUseLocation                   (OptionalParm, Parm)
// struct FVector                 SourceLocation                 (OptionalParm, Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* APlayerController::GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPooledAudioComponent");

	APlayerController_GetPooledAudioComponent_Params params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.HearSoundFinished
// (Final, Simulated, Native, Public)
// Parameters:
// class UAudioComponent*         AC                             (Parm, EditInline)

void APlayerController::HearSoundFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HearSoundFinished");

	APlayerController_HearSoundFinished_Params params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlaySound
// (Defined, Net, Simulated, Event, Public, NetClient)
// Parameters:
// class USoundCue*               ASound                         (Parm)

void APlayerController::ClientPlaySound(class USoundCue* ASound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	APlayerController_ClientPlaySound_Params params;
	params.ASound = ASound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessage
// (Defined, Net, NetReliable, Simulated, Event, Public, NetClient)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APlayerController::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage");

	APlayerController_ReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanupPRI
// (Defined, Public)

void APlayerController::CleanupPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPRI");

	APlayerController_CleanupPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandlePickup
// (Defined, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void APlayerController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandlePickup");

	APlayerController_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHUD
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class UClass*                  newHUDType                     (Parm)
// class UClass*                  newScoringType                 (Parm)

void APlayerController::ClientSetHUD(class UClass* newHUDType, class UClass* newScoringType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	APlayerController_ClientSetHUD_Params params;
	params.newHUDType = newHUDType;
	params.newScoringType = newScoringType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PawnDied
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::PawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PawnDied");

	APlayerController_PawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnPossess
// (Defined, Event, Public)

void APlayerController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPossess");

	APlayerController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AcknowledgePossession
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::AcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AcknowledgePossession");

	APlayerController_AcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Possess
// (Defined, Event, Public)
// Parameters:
// class APawn*                   aPawn                          (Parm)
// bool                           bVehicleTransition             (Parm)

void APlayerController::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Possess");

	APlayerController_Possess_Params params;
	params.aPawn = aPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GivePawn
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::GivePawn(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GivePawn");

	APlayerController_GivePawn_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AskForPawn
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::AskForPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AskForPawn");

	APlayerController_AskForPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGotoState
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FName                   NewState                       (Parm)
// struct FName                   NewLabel                       (OptionalParm, Parm)

void APlayerController::ClientGotoState(const struct FName& NewState, const struct FName& NewLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMouseAvailable
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsMouseAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMouseAvailable");

	APlayerController_IsMouseAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsKeyboardAvailable
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsKeyboardAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsKeyboardAvailable");

	APlayerController_IsKeyboardAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetUseTiltForwardAndBack
// (Simulated, Native, Public)
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetUseTiltForwardAndBack(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetUseTiltForwardAndBack");

	APlayerController_SetUseTiltForwardAndBack_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// (Simulated, Native, Public)
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetOnlyUseControllerTiltInput(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetOnlyUseControllerTiltInput");

	APlayerController_SetOnlyUseControllerTiltInput_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetControllerTiltActive
// (Simulated, Native, Public)
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetControllerTiltActive(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltActive");

	APlayerController_SetControllerTiltActive_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// (Simulated, Native, Public)
// Parameters:
// bool                           bActive                        (Parm)

void APlayerController::SetControllerTiltDesiredIfAvailable(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable");

	APlayerController_SetControllerTiltDesiredIfAvailable_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsControllerTiltActive
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsControllerTiltActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsControllerTiltActive");

	APlayerController_IsControllerTiltActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetRumbleScale
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetRumbleScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetRumbleScale");

	APlayerController_GetRumbleScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetRumbleScale
// (Final, Defined, Public)
// Parameters:
// float                          ScaleBy                        (Parm)

void APlayerController::SetRumbleScale(float ScaleBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRumbleScale");

	APlayerController_SetRumbleScale_Params params;
	params.ScaleBy = ScaleBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetPlayerDataProvider
// (Defined, Simulated, Public)
// Parameters:
// class UPlayerDataProvider*     DataProvider                   (Parm)

void APlayerController::SetPlayerDataProvider(class UPlayerDataProvider* DataProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPlayerDataProvider");

	APlayerController_SetPlayerDataProvider_Params params;
	params.DataProvider = DataProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnProfileReadComplete
// (Event, Public)
// Parameters:
// bool                           bSucceeded                     (Parm)

void APlayerController::OnProfileReadComplete(bool bSucceeded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnProfileReadComplete");

	APlayerController_OnProfileReadComplete_Params params;
	params.bSucceeded = bSucceeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnregisterPlayerDataStores
// (Defined, Simulated, Public)

void APlayerController::UnregisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterPlayerDataStores");

	APlayerController_UnregisterPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterPlayerDataStores
// (Defined, Simulated, Public)

void APlayerController::RegisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterPlayerDataStores");

	APlayerController_RegisterPlayerDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientInitializeDataStores
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientInitializeDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientInitializeDataStores");

	APlayerController_ClientInitializeDataStores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetUniquePlayerId
// (Defined, Net, NetReliable, Public, NetServer, HasDefaults)
// Parameters:
// struct FUniqueNetId            UniqueId                       (Parm)
// bool                           bWasInvited                    (Parm)

void APlayerController::ServerSetUniquePlayerId(const struct FUniqueNetId& UniqueId, bool bWasInvited)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetUniquePlayerId");

	APlayerController_ServerSetUniquePlayerId_Params params;
	params.UniqueId = UniqueId;
	params.bWasInvited = bWasInvited;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitUniquePlayerId
// (Defined, Event, Public)

void APlayerController::InitUniquePlayerId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitUniquePlayerId");

	APlayerController_InitUniquePlayerId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void APlayerController::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicatedEvent");

	APlayerController_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitInputSystem
// (Defined, Event, Public)

void APlayerController::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitInputSystem");

	APlayerController_InitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanOutSavedMoves
// (Defined, Public)

void APlayerController::CleanOutSavedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanOutSavedMoves");

	APlayerController_CleanOutSavedMoves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReset
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Reset
// (Defined, Public)

void APlayerController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Reset");

	APlayerController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnDefaultHUD
// (Defined, Public)

void APlayerController::SpawnDefaultHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnDefaultHUD");

	APlayerController_SpawnDefaultHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableCheats
// (Defined, Exec, Public)

void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	APlayerController_EnableCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddCheats
// (Defined, Public)

void APlayerController::AddCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCheats");

	APlayerController_AddCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KickWarning
// (Defined, Event, Public)

void APlayerController::KickWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KickWarning");

	APlayerController_KickWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerGivePawn
// (Defined, Public)

void APlayerController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGivePawn");

	APlayerController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerShortTimeout
// (Defined, Net, NetReliable, Public, NetServer)

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetTimeMargin
// (Defined, Public)

void APlayerController::ResetTimeMargin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMargin");

	APlayerController_ResetTimeMargin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreRender
// (Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void APlayerController::PreRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreRender");

	APlayerController_PreRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceivedPlayer
// (Defined, Simulated, Event, Public)

void APlayerController::ReceivedPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedPlayer");

	APlayerController_ReceivedPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PostBeginPlay
// (Defined, Simulated, Event, Public)

void APlayerController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostBeginPlay");

	APlayerController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnCoverReplicator
// (Defined, Public)
// Parameters:
// class ACoverReplicator*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ACoverReplicator* APlayerController::SpawnCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnCoverReplicator");

	APlayerController_SpawnCoverReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpauseControllerConnected
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpauseControllerConnected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseControllerConnected");

	APlayerController_CanUnpauseControllerConnected_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnControllerChanged
// (Defined, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bIsConnected                   (Parm)

void APlayerController::OnControllerChanged(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnControllerChanged");

	APlayerController_OnControllerChanged_Params params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FellOutOfWorld
// (Simulated, Event, Public)
// Parameters:
// class UClass*                  dmgType                        (Parm)

void APlayerController::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FellOutOfWorld");

	APlayerController_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanUnpauseExternalUI
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanUnpauseExternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseExternalUI");

	APlayerController_CanUnpauseExternalUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnExternalUIChanged
// (Defined, Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void APlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnExternalUIChanged");

	APlayerController_OnExternalUIChanged_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnLoadLevels
// (Defined, Event, Public)
// Parameters:
// bool                           bUnload                        (OptionalParm, Parm)

void APlayerController::OnLoadLevels(bool bUnload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnLoadLevels");

	APlayerController_OnLoadLevels_Params params;
	params.bUnload = bUnload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanUpAudioComponents
// (Native, Public)

void APlayerController::CleanUpAudioComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanUpAudioComponents");

	APlayerController_CleanUpAudioComponents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindStairRotation
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::FindStairRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindStairRotation");

	APlayerController_FindStairRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CheckSpeedHack
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CheckSpeedHack(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckSpeedHack");

	APlayerController_CheckSpeedHack_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerProcessConvolve
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)
// int                            H                              (Parm)

void APlayerController::ServerProcessConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessConvolve");

	APlayerController_ServerProcessConvolve_Params params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientConvolve
// (Final, Net, NetReliable, Simulated, Native, Event, Private, NetClient)
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)
// int                            H                              (Parm)

void APlayerController::ClientConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientConvolve");

	APlayerController_ClientConvolve_Params params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAudioGroupVolume
// (Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          Volume                         (Parm)

void APlayerController::SetAudioGroupVolume(const struct FName& GroupName, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioGroupVolume");

	APlayerController_SetAudioGroupVolume_Params params;
	params.GroupName = GroupName;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAllowMatureLanguage
// (Native, Public)
// Parameters:
// bool                           bAllowMatureLanguge            (Parm)

void APlayerController::SetAllowMatureLanguage(bool bAllowMatureLanguge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAllowMatureLanguage");

	APlayerController_SetAllowMatureLanguage_Params params;
	params.bAllowMatureLanguge = bAllowMatureLanguge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PasteFromClipboard
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::PasteFromClipboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PasteFromClipboard");

	APlayerController_PasteFromClipboard_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CopyToClipboard
// (Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void APlayerController::CopyToClipboard(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyToClipboard");

	APlayerController_CopyToClipboard_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetDefaultURL
// (Final, Native, Public)
// Parameters:
// struct FString                 Option                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetDefaultURL(const struct FString& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDefaultURL");

	APlayerController_GetDefaultURL_Params params;
	params.Option = Option;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.UpdateURL
// (Final, Native, Public)
// Parameters:
// struct FString                 NewOption                      (Parm, NeedCtorLink)
// struct FString                 NewValue                       (Parm, NeedCtorLink)
// bool                           bSave1Default                  (Parm)

void APlayerController::UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateURL");

	APlayerController_UpdateURL_Params params;
	params.NewOption = NewOption;
	params.NewValue = NewValue;
	params.bSave1Default = bSave1Default;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravel
// (Net, NetReliable, Simulated, Native, Event, Public, NetClient)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bSeamless                      (OptionalParm, Parm)
// struct FGuid                   MapPackageGuid                 (OptionalParm, Parm, AlwaysInit)

void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleCommand");

	APlayerController_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetServerNetworkAddress
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetServerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerNetworkAddress");

	APlayerController_GetServerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerNetworkAddress
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPlayerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerNetworkAddress");

	APlayerController_GetPlayerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetNetSpeed
// (Final, Native, Public)
// Parameters:
// int                            NewSpeed                       (Parm)

void APlayerController::SetNetSpeed(int NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetNetSpeed");

	APlayerController_SetNetSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientDrawCoordinateSystem
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// struct FVector                 AxisLoc                        (Parm)
// struct FRotator                AxisRot                        (Parm)
// float                          Scale                          (Parm)
// bool                           bPersistentLines               (OptionalParm, Parm)

void APlayerController::ClientDrawCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDrawCoordinateSystem");

	APlayerController_ClientDrawCoordinateSystem_Params params;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestLevel
// (Exec, Public)

void UCheatManager::TestLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestLevel");

	UCheatManager_TestLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleDebugCamera
// (Exec, Public)

void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

	UCheatManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelOut
// (Exec, Public)
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	UCheatManager_StreamLevelOut_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnlyLoadLevel
// (Exec, Public)
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	UCheatManager_OnlyLoadLevel_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelIn
// (Exec, Public)
// Parameters:
// struct FName                   PackageName                    (Parm)

void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	UCheatManager_StreamLevelIn_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetLevelStreamingStatus
// (Public)
// Parameters:
// struct FName                   PackageName                    (Parm)
// bool                           bShouldBeLoaded                (Parm)
// bool                           bShouldBeVisible               (Parm)

void UCheatManager::SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetLevelStreamingStatus");

	UCheatManager_SetLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bShouldBeLoaded = bShouldBeLoaded;
	params.bShouldBeVisible = bShouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllWeapons
// (Exec, Public)

void UCheatManager::AllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllWeapons");

	UCheatManager_AllWeapons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Loaded
// (Exec, Public)

void UCheatManager::Loaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Loaded");

	UCheatManager_Loaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewClass
// (Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::ViewClass(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	UCheatManager_ViewClass_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewBot
// (Exec, Public)

void UCheatManager::ViewBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewBot");

	UCheatManager_ViewBot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewFlag
// (Exec, Public)

void UCheatManager::ViewFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewFlag");

	UCheatManager_ViewFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewActor
// (Exec, Public)
// Parameters:
// struct FName                   actorName                      (Parm)

void UCheatManager::ViewActor(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	UCheatManager_ViewActor_Params params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewPlayer
// (Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void UCheatManager::ViewPlayer(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewSelf
// (Exec, Public)
// Parameters:
// bool                           bQuiet                         (OptionalParm, Parm)

void UCheatManager::ViewSelf(bool bQuiet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	UCheatManager_ViewSelf_Params params;
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.RememberSpot
// (Exec, Public)

void UCheatManager::RememberSpot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RememberSpot");

	UCheatManager_RememberSpot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PlayersOnly
// (Exec, Public)

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.GiveWeapon
// (Exec, Public)
// Parameters:
// struct FString                 WeaponClassStr                 (Parm, NeedCtorLink)
// class AWeapon*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class AWeapon* UCheatManager::GiveWeapon(const struct FString& WeaponClassStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GiveWeapon");

	UCheatManager_GiveWeapon_Params params;
	params.WeaponClassStr = WeaponClassStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.Summon
// (Exec, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)

void UCheatManager::Summon(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Avatar
// (Exec, Public)
// Parameters:
// struct FName                   ClassName                      (Parm)

void UCheatManager::Avatar(const struct FName& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Avatar");

	UCheatManager_Avatar_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillPawns
// (Exec, Public)

void UCheatManager::KillPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillPawns");

	UCheatManager_KillPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAllPawns
// (Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::KillAllPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAllPawns");

	UCheatManager_KillAllPawns_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAll
// (Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void UCheatManager::KillAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAll");

	UCheatManager_KillAll_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetSpeed
// (Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetSpeed(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetSpeed");

	UCheatManager_SetSpeed_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetGravity
// (Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetGravity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetGravity");

	UCheatManager_SetGravity_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetJumpZ
// (Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UCheatManager::SetJumpZ(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpZ");

	UCheatManager_SetJumpZ_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SloMo
// (Exec, Public)
// Parameters:
// float                          T                              (Parm)

void UCheatManager::SloMo(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SloMo");

	UCheatManager_SloMo_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AffectedByHitEffects
// (Exec, Public)

void UCheatManager::AffectedByHitEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AffectedByHitEffects");

	UCheatManager_AffectedByHitEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.God
// (Exec, Public)

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	UCheatManager_God_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllAmmo
// (Exec, Public)

void UCheatManager::AllAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllAmmo");

	UCheatManager_AllAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Ghost
// (Exec, Public)

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	UCheatManager_Ghost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Walk
// (Exec, Public)

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Fly
// (Exec, Public)

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Amphibious
// (Exec, Public)

void UCheatManager::Amphibious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Amphibious");

	UCheatManager_Amphibious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EndPath
// (Exec, Public)

void UCheatManager::EndPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EndPath");

	UCheatManager_EndPath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ChangeSize
// (Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	UCheatManager_ChangeSize_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.GetFRotatorFromString
// (Final, Native, Private)
// Parameters:
// struct FString                 InStr                          (Parm, NeedCtorLink)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UCheatManager::GetFRotatorFromString(const struct FString& InStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GetFRotatorFromString");

	UCheatManager_GetFRotatorFromString_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.GetFVectorFromString
// (Final, Native, Private)
// Parameters:
// struct FString                 InStr                          (Parm, NeedCtorLink)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UCheatManager::GetFVectorFromString(const struct FString& InStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GetFVectorFromString");

	UCheatManager_GetFVectorFromString_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.BugIt
// (Exec, Public)
// Parameters:
// struct FString                 ScreenShotDescription          (OptionalParm, Parm, NeedCtorLink)

void UCheatManager::BugIt(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugIt");

	UCheatManager_BugIt_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.BugItWorker
// (Public)
// Parameters:
// struct FVector                 TheLocation                    (Parm)
// struct FRotator                TheRotation                    (Parm)

void UCheatManager::BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItWorker");

	UCheatManager_BugItWorker_Params params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.BugItGoString
// (Public)
// Parameters:
// struct FString                 TheLocation                    (Parm, NeedCtorLink)
// struct FString                 TheRotation                    (Parm, NeedCtorLink)

void UCheatManager::BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGoString");

	UCheatManager_BugItGoString_Params params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.BugItGo
// (Exec, Public)
// Parameters:
// float                          X                              (Parm, CoerceParm)
// float                          Y                              (Parm, CoerceParm)
// float                          Z                              (Parm, CoerceParm)
// int                            Pitch                          (Parm, CoerceParm)
// int                            Yaw                            (Parm, CoerceParm)
// int                            Roll                           (Parm, CoerceParm)

void UCheatManager::BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGo");

	UCheatManager_BugItGo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Teleport
// (Exec, Public)

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillViewedActor
// (Exec, Public)

void UCheatManager::KillViewedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillViewedActor");

	UCheatManager_KillViewedActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WriteToLog
// (Exec, Public)
// Parameters:
// struct FString                 Param                          (Parm, NeedCtorLink)

void UCheatManager::WriteToLog(const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WriteToLog");

	UCheatManager_WriteToLog_Params params;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeFrame
// (Exec, Public)
// Parameters:
// float                          delay                          (Parm)

void UCheatManager::FreezeFrame(float delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	UCheatManager_FreezeFrame_Params params;
	params.delay = delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ListDynamicActors
// (Exec, Public)

void UCheatManager::ListDynamicActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ListDynamicActors");

	UCheatManager_ListDynamicActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Player.SwitchController
// (Native, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void UPlayer::SwitchController(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Player.SwitchController");

	UPlayer_SwitchController_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ACoverGroup::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.OnToggle");

	ACoverGroup_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.Contains
// (Native, Public)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ACoverGroup::Contains(class ACoverLink* Link)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.Contains");

	ACoverGroup_Contains_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverGroup.ToggleGroup
// (Native, Public)

void ACoverGroup::ToggleGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.ToggleGroup");

	ACoverGroup_ToggleGroup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.DisableGroup
// (Native, Public)

void ACoverGroup::DisableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.DisableGroup");

	ACoverGroup_DisableGroup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.EnableGroup
// (Native, Public)

void ACoverGroup::EnableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.EnableGroup");

	ACoverGroup_EnableGroup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdReplicationActor.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ACrowdReplicationActor::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdReplicationActor.Tick");

	ACrowdReplicationActor_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdReplicationActor.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ACrowdReplicationActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdReplicationActor.ReplicatedEvent");

	ACrowdReplicationActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CylinderComponent.SetCylinderSize
// (Final, Native, Public)
// Parameters:
// float                          NewRadius                      (Parm)
// float                          NewHeight                      (Parm)

void UCylinderComponent::SetCylinderSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CylinderComponent.SetCylinderSize");

	UCylinderComponent_SetCylinderSize_Params params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DamageType.VehicleDamageScalingFor
// (Defined, Static, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UDamageType::STATIC_VehicleDamageScalingFor(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.VehicleDamageScalingFor");

	UDamageType_VehicleDamageScalingFor_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.SuicideMessage
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  Victim                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UDamageType::STATIC_SuicideMessage(class APlayerReplicationInfo* Victim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.SuicideMessage");

	UDamageType_SuicideMessage_Params params;
	params.Victim = Victim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.DeathMessage
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  Killer                         (Parm)
// class APlayerReplicationInfo*  Victim                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UDamageType::STATIC_DeathMessage(class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.DeathMessage");

	UDamageType_DeathMessage_Params params;
	params.Killer = Killer;
	params.Victim = Victim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsVolume.OnSetDamageInstigator
// (Defined, Public)
// Parameters:
// class USeqAct_SetDamageInstigator* Action                         (Parm)

void APhysicsVolume::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnSetDamageInstigator");

	APhysicsVolume_OnSetDamageInstigator_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// (Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class APlayerController*       PC                             (Parm)

void APhysicsVolume::NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget");

	APhysicsVolume_NotifyPawnBecameViewTarget_Params params;
	params.P = P;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ModifyPlayer
// (Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void APhysicsVolume::ModifyPlayer(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ModifyPlayer");

	APhysicsVolume_ModifyPlayer_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CausePainTo
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::CausePainTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CausePainTo");

	APhysicsVolume_CausePainTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Touch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void APhysicsVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Touch");

	APhysicsVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.TimerPop
// (Defined, Public)
// Parameters:
// class AVolumeTimer*            T                              (Parm)

void APhysicsVolume::TimerPop(class AVolumeTimer* T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.TimerPop");

	APhysicsVolume_TimerPop_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void APhysicsVolume::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnToggle");

	APhysicsVolume_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnLeavingVolume
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnLeavingVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnLeavingVolume");

	APhysicsVolume_PawnLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnEnteredVolume
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnEnteredVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnEnteredVolume");

	APhysicsVolume_PawnEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorLeavingVolume
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorLeavingVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorLeavingVolume");

	APhysicsVolume_ActorLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorEnteredVolume
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorEnteredVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorEnteredVolume");

	APhysicsVolume_ActorEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PhysicsChangedFor
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PhysicsChangedFor");

	APhysicsVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Reset
// (Defined, Public)

void APhysicsVolume::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Reset");

	APhysicsVolume_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PostBeginPlay
// (Defined, Simulated, Event, Public)

void APhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PostBeginPlay");

	APhysicsVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.GetGravityZ
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APhysicsVolume::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetGravityZ");

	APhysicsVolume_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DefaultPhysicsVolume.Destroyed
// (Defined, Event, Public)

void ADefaultPhysicsVolume::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPhysicsVolume.Destroyed");

	ADefaultPhysicsVolume_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALight::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnToggle");

	ALight_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ALight::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ReplicatedEvent");

	ALight_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoorMarker::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SuggestMovePreparation");

	ADoorMarker_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoorMarker::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.ProceedWithMove");

	ADoorMarker_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.SpecialHandling
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ADoorMarker::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SpecialHandling");

	ADoorMarker_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.MoverClosed
// (Defined, Public)

void ADoorMarker::MoverClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverClosed");

	ADoorMarker_MoverClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.MoverOpened
// (Defined, Public)

void ADoorMarker::MoverOpened()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverOpened");

	ADoorMarker_MoverOpened_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.PostBeginPlay
// (Defined, Event, Public)

void ADoorMarker::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.PostBeginPlay");

	ADoorMarker_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RecheckValidTouch
// (Public)

void ADroppedPickup::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RecheckValidTouch");

	ADroppedPickup_RecheckValidTouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.PickedUpBy
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ADroppedPickup::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.PickedUpBy");

	ADroppedPickup_PickedUpBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.GiveTo
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ADroppedPickup::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.GiveTo");

	ADroppedPickup_GiveTo_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Landed
// (Defined, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void ADroppedPickup::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Landed");

	ADroppedPickup_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.DetourWeight
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ADroppedPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.DetourWeight");

	ADroppedPickup_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DroppedPickup.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ADroppedPickup::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.EncroachedBy");

	ADroppedPickup_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupParticles
// (Defined, Simulated, Event, Public)
// Parameters:
// class UParticleSystemComponent* PickupParticles                (Parm, EditInline)

void ADroppedPickup::SetPickupParticles(class UParticleSystemComponent* PickupParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupParticles");

	ADroppedPickup_SetPickupParticles_Params params;
	params.PickupParticles = PickupParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupMesh
// (Defined, Simulated, Event, Public)
// Parameters:
// class UPrimitiveComponent*     PickupMesh                     (Parm, EditInline)

void ADroppedPickup::SetPickupMesh(class UPrimitiveComponent* PickupMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupMesh");

	ADroppedPickup_SetPickupMesh_Params params;
	params.PickupMesh = PickupMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Reset
// (Defined, Public)

void ADroppedPickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Reset");

	ADroppedPickup_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ADroppedPickup::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.ReplicatedEvent");

	ADroppedPickup_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Destroyed
// (Defined, Event, Public)

void ADroppedPickup::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Destroyed");

	ADroppedPickup_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RemoveFromNavigation
// (Final, Native, Public)

void ADroppedPickup::RemoveFromNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RemoveFromNavigation");

	ADroppedPickup_RemoveFromNavigation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.AddToNavigation
// (Final, Native, Public)

void ADroppedPickup::AddToNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.AddToNavigation");

	ADroppedPickup_AddToNavigation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightEnvironmentComponent.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bNewEnabled                    (Parm)

void ULightEnvironmentComponent::SetEnabled(bool bNewEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.SetEnabled");

	ULightEnvironmentComponent_SetEnabled_Params params;
	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Detach
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ADynamicSMActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Detach");

	ADynamicSMActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Attach
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ADynamicSMActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Attach");

	ADynamicSMActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.CanBasePawn
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADynamicSMActor::CanBasePawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.CanBasePawn");

	ADynamicSMActor_CanBasePawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DynamicSMActor.SetStaticMesh
// (Defined, Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// struct FVector                 NewTranslation                 (OptionalParm, Parm)
// struct FRotator                NewRotation                    (OptionalParm, Parm)
// struct FVector                 NewScale3D                     (OptionalParm, Parm)

void ADynamicSMActor::SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetStaticMesh");

	ADynamicSMActor_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;
	params.NewTranslation = NewTranslation;
	params.NewRotation = NewRotation;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetMaterial
// (Defined, Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void ADynamicSMActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMaterial");

	ADynamicSMActor_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetStaticMesh
// (Defined, Public)
// Parameters:
// class USeqAct_SetStaticMesh*   Action                         (Parm)

void ADynamicSMActor::OnSetStaticMesh(class USeqAct_SetStaticMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetStaticMesh");

	ADynamicSMActor_OnSetStaticMesh_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ADynamicSMActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.ReplicatedEvent");

	ADynamicSMActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.PostBeginPlay
// (Defined, Event, Public)

void ADynamicSMActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.PostBeginPlay");

	ADynamicSMActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// (Defined, Public)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterCustomLifetime");

	AEmitterPool_SpawnEmitterCustomLifetime_Params params;
	params.EmitterTemplate = EmitterTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.ResetPool
// (Defined, Public)

void AEmitterPool::ResetPool()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ResetPool");

	AEmitterPool_ResetPool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.SpawnEmitter
// (Defined, Public)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// class AActor*                  AttachToActor                  (OptionalParm, Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitter");

	AEmitterPool_SpawnEmitter_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.AttachToActor = AttachToActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetPooledComponent
// (Final, Native, Protected)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm)
// class UParticleSystemComponent* ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UParticleSystemComponent* AEmitterPool::GetPooledComponent(class UParticleSystem* EmitterTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetPooledComponent");

	AEmitterPool_GetPooledComponent_Params params;
	params.EmitterTemplate = EmitterTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetFreeMatInstConsts
// (Final, Native, Protected)
// Parameters:
// bool                           bCreateNewObject               (OptionalParm, Parm)
// class UMaterialInstanceConstant* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeMatInstConsts");

	AEmitterPool_GetFreeMatInstConsts_Params params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// (Final, Native, Protected)
// Parameters:
// class UStaticMeshComponent*    SMC                            (Parm, EditInline)

void AEmitterPool::FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeMaterialInstanceConstants");

	AEmitterPool_FreeMaterialInstanceConstants_Params params;
	params.SMC = SMC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// (Final, Native, Protected)
// Parameters:
// bool                           bCreateNewObject               (OptionalParm, Parm)
// class UStaticMeshComponent*    ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeStaticMeshComponent");

	AEmitterPool_GetFreeStaticMeshComponent_Params params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeStaticMeshComponents
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::FreeStaticMeshComponents(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeStaticMeshComponents");

	AEmitterPool_FreeStaticMeshComponents_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.ReturnToPool
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::ReturnToPool(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ReturnToPool");

	AEmitterPool_ReturnToPool_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.OnParticleSystemFinished
// (Defined, Public)
// Parameters:
// class UParticleSystemComponent* PSC                            (Parm, EditInline)

void AEmitterPool::OnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.OnParticleSystemFinished");

	AEmitterPool_OnParticleSystemFinished_Params params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// (Final, Native, Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)

void UFaceFXAsset::UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.UnmountFaceFXAnimSet");

	UFaceFXAsset_UnmountFaceFXAnimSet_Params params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// (Final, Native, Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)

void UFaceFXAsset::MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.MountFaceFXAnimSet");

	UFaceFXAsset_MountFaceFXAnimSet_Params params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Destroyed
// (Defined, Event, Public)

void AFileWriter::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Destroyed");

	AFileWriter_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Logf
// (Final, Native, Public)
// Parameters:
// struct FString                 logString                      (Parm, CoerceParm, NeedCtorLink)

void AFileWriter::Logf(const struct FString& logString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Logf");

	AFileWriter_Logf_Params params;
	params.logString = logString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.CloseFile
// (Final, Native, Public)

void AFileWriter::CloseFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.CloseFile");

	AFileWriter_CloseFile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.OpenFile
// (Final, Native, Public)
// Parameters:
// struct FString                 InFilename                     (Parm, CoerceParm, NeedCtorLink)
// TEnumAsByte<EFWFileType>       InFileType                     (OptionalParm, Parm)
// struct FString                 InExtension                    (OptionalParm, Parm, NeedCtorLink)
// bool                           bUnique                        (OptionalParm, Parm)
// bool                           bIncludeTimeStamp              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFileWriter::OpenFile(const struct FString& InFilename, TEnumAsByte<EFWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.OpenFile");

	AFileWriter_OpenFile_Params params;
	params.InFilename = InFilename;
	params.InFileType = InFileType;
	params.InExtension = InExtension;
	params.bUnique = bUnique;
	params.bIncludeTimeStamp = bIncludeTimeStamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FileLog.CloseLog
// (Defined, Public)

void AFileLog::CloseLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.CloseLog");

	AFileLog_CloseLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileLog.OpenLog
// (Defined, Public)
// Parameters:
// struct FString                 LogFilename                    (Parm, CoerceParm, NeedCtorLink)
// struct FString                 extension                      (OptionalParm, Parm, NeedCtorLink)
// bool                           bUnique                        (OptionalParm, Parm)

void AFileLog::OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.OpenLog");

	AFileLog_OpenLog_Params params;
	params.LogFilename = LogFilename;
	params.extension = extension;
	params.bUnique = bUnique;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Font.GetMaxCharHeight
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetMaxCharHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetMaxCharHeight");

	UFont_GetMaxCharHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetAuthoredViewportHeight
// (Final, Native, Public)
// Parameters:
// float                          ViewportHeight                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetAuthoredViewportHeight(float ViewportHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetAuthoredViewportHeight");

	UFont_GetAuthoredViewportHeight_Params params;
	params.ViewportHeight = ViewportHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetScalingFactor
// (Native, Public)
// Parameters:
// float                          HeightTest                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UFont::GetScalingFactor(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetScalingFactor");

	UFont_GetScalingFactor_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetResolutionPageIndex
// (Native, Public)
// Parameters:
// float                          HeightTest                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFont::GetResolutionPageIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetResolutionPageIndex");

	UFont_GetResolutionPageIndex_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFeedbackManager.PauseWaveform
// (Defined, Simulated, Public)
// Parameters:
// bool                           bPause                         (OptionalParm, Parm)

void UForceFeedbackManager::PauseWaveform(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PauseWaveform");

	UForceFeedbackManager_PauseWaveform_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// (Defined, Simulated, Public)
// Parameters:
// class UForceFeedbackWaveform*  Waveform                       (OptionalParm, Parm)

void UForceFeedbackManager::StopForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform");

	UForceFeedbackManager_StopForceFeedbackWaveform_Params params;
	params.Waveform = Waveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// (Defined, Simulated, Public)
// Parameters:
// class UForceFeedbackWaveform*  Waveform                       (Parm)

void UForceFeedbackManager::PlayForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform");

	UForceFeedbackManager_PlayForceFeedbackWaveform_Params params;
	params.Waveform = Waveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Surface.GetSurfaceHeight
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USurface::GetSurfaceHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceHeight");

	USurface_GetSurfaceHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Surface.GetSurfaceWidth
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USurface::GetSurfaceWidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceWidth");

	USurface_GetSurfaceWidth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveVector      OutValue                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorCurveParameterValue");

	UMaterialInterface_GetVectorCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetVectorParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorParameterValue");

	UMaterialInterface_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetTextureParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetTextureParameterValue");

	UMaterialInterface_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       OutValue                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarCurveParameterValue");

	UMaterialInterface_GetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarParameterValue");

	UMaterialInterface_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetFontParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   OutFontValue                   (Parm, OutParm)
// int                            OutFontPage                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaterialInterface::GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetFontParameterValue");

	UMaterialInterface_GetFontParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFontValue != nullptr)
		*OutFontValue = params.OutFontValue;
	if (OutFontPage != nullptr)
		*OutFontPage = params.OutFontPage;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// (Final, Native, Public)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	UMaterialInterface_GetPhysicalMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetMaterial
// (Final, Native, Public)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UMaterialInterface::GetMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMaterial");

	UMaterialInterface_GetMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetLODDistance
// (Native, Public)
// Parameters:
// int                            LODLevelIndex                  (Parm)
// float                          InDistance                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystem::SetLODDistance(int LODLevelIndex, float InDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetLODDistance");

	UParticleSystem_SetLODDistance_Params params;
	params.LODLevelIndex = LODLevelIndex;
	params.InDistance = InDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetCurrentLODMethod
// (Native, Public)
// Parameters:
// TEnumAsByte<EParticleSystemLODMethod> InMethod                       (Parm)

void UParticleSystem::SetCurrentLODMethod(TEnumAsByte<EParticleSystemLODMethod> InMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetCurrentLODMethod");

	UParticleSystem_SetCurrentLODMethod_Params params;
	params.InMethod = InMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystem.GetLODDistance
// (Native, Public)
// Parameters:
// int                            LODLevelIndex                  (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UParticleSystem::GetLODDistance(int LODLevelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODDistance");

	UParticleSystem_GetLODDistance_Params params;
	params.LODLevelIndex = LODLevelIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetLODLevelCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystem::GetLODLevelCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODLevelCount");

	UParticleSystem_GetLODLevelCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetCurrentLODMethod
// (Native, Public)
// Parameters:
// TEnumAsByte<EParticleSystemLODMethod> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EParticleSystemLODMethod> UParticleSystem::GetCurrentLODMethod()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetCurrentLODMethod");

	UParticleSystem_GetCurrentLODMethod_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsPhysXEnhanced
// (Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_IsPhysXEnhanced()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsPhysXEnhanced");

	AGameInfo_IsPhysXEnhanced_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetPlayerStart
// (Event, Public)
// Parameters:
// struct FString                 StartLocation                  (Parm, NeedCtorLink)

void AGameInfo::SetPlayerStart(const struct FString& StartLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerStart");

	AGameInfo_SetPlayerStart_Params params;
	params.StartLocation = StartLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IncrementNumberOfMatchesPlayed
// (Defined, Public)

void AGameInfo::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IncrementNumberOfMatchesPlayed");

	AGameInfo_IncrementNumberOfMatchesPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IncrementAutomatedTestingMapIndex
// (Defined, Public)

void AGameInfo::IncrementAutomatedTestingMapIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IncrementAutomatedTestingMapIndex");

	AGameInfo_IncrementAutomatedTestingMapIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CloseAutomatedMapTestTimer
// (Defined, Public)

void AGameInfo::CloseAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CloseAutomatedMapTestTimer");

	AGameInfo_CloseAutomatedMapTestTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartAutomatedMapTestTimer
// (Defined, Event, Public)

void AGameInfo::StartAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartAutomatedMapTestTimer");

	AGameInfo_StartAutomatedMapTestTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnServerCreateComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::OnServerCreateComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnServerCreateComplete");

	AGameInfo_OnServerCreateComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServer
// (Defined, Public)

void AGameInfo::RegisterServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServer");

	AGameInfo_RegisterServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginChange
// (Defined, Public)

void AGameInfo::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginChange");

	AGameInfo_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginFailed
// (Defined, Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode                      (Parm)

void AGameInfo::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginFailed");

	AGameInfo_OnLoginFailed_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearAutoLoginDelegates
// (Defined, Public)

void AGameInfo::ClearAutoLoginDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearAutoLoginDelegates");

	AGameInfo_ClearAutoLoginDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessServerLogin
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ProcessServerLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerLogin");

	AGameInfo_ProcessServerLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.MatineeCancelled
// (Event, Public)

void AGameInfo::MatineeCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatineeCancelled");

	AGameInfo_MatineeCancelled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RecalculateSkillRating
// (Defined, Public, HasDefaults)

void AGameInfo::RecalculateSkillRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RecalculateSkillRating");

	AGameInfo_RecalculateSkillRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameplayMuteList
// (Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::UpdateGameplayMuteList(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameplayMuteList");

	AGameInfo_UpdateGameplayMuteList_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// (Defined, Public)

void AGameInfo::NotifyArbitratedMatchEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyArbitratedMatchEnd");

	AGameInfo_NotifyArbitratedMatchEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ServerWriteArbitrationEndGameData
// (Defined, Public)

void AGameInfo::ServerWriteArbitrationEndGameData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ServerWriteArbitrationEndGameData");

	AGameInfo_ServerWriteArbitrationEndGameData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessClientDataWriteCompletion
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::ProcessClientDataWriteCompletion(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientDataWriteCompletion");

	AGameInfo_ProcessClientDataWriteCompletion_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessEndGameHandshake
// (Defined, Public)

void AGameInfo::ProcessEndGameHandshake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessEndGameHandshake");

	AGameInfo_ProcessEndGameHandshake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.MatchIsInProgress
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::MatchIsInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatchIsInProgress");

	AGameInfo_MatchIsInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ArbitrationRegistrationComplete
// (Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::ArbitrationRegistrationComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ArbitrationRegistrationComplete");

	AGameInfo_ArbitrationRegistrationComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServerForArbitration
// (Public)

void AGameInfo::RegisterServerForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServerForArbitration");

	AGameInfo_RegisterServerForArbitration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitratedMatch
// (Public)

void AGameInfo::StartArbitratedMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitratedMatch");

	AGameInfo_StartArbitratedMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitrationRegistration
// (Public)

void AGameInfo::StartArbitrationRegistration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitrationRegistration");

	AGameInfo_StartArbitrationRegistration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// (Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientRegistrationCompletion");

	AGameInfo_ProcessClientRegistrationCompletion_Params params;
	params.PC = PC;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameSettingsCounts
// (Defined, Public)

void AGameInfo::UpdateGameSettingsCounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettingsCounts");

	AGameInfo_UpdateGameSettingsCounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// (Defined, Event, Public, HasOutParms, HasDefaults)
// Parameters:
// class AController*             C                              (Parm, OutParm)

void AGameInfo::HandleSeamlessTravelPlayer(class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HandleSeamlessTravelPlayer");

	AGameInfo_HandleSeamlessTravelPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.GameInfo.UpdateGameSettings
// (Public)

void AGameInfo::UpdateGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettings");

	AGameInfo_UpdateGameSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostSeamlessTravel
// (Defined, Event, Public)

void AGameInfo::PostSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostSeamlessTravel");

	AGameInfo_PostSeamlessTravel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SwapPlayerControllers
// (Final, Native, Public)
// Parameters:
// class APlayerController*       OldPC                          (Parm)
// class APlayerController*       NewPC                          (Parm)

void AGameInfo::SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SwapPlayerControllers");

	AGameInfo_SwapPlayerControllers_Params params;
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetSeamlessTravelActorList
// (Defined, Event, Public, HasOutParms)
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSeamlessTravelActorList");

	AGameInfo_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.GameInfo.OverridePRI
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class APlayerReplicationInfo*  OldPRI                         (Parm)

void AGameInfo::OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OverridePRI");

	AGameInfo_OverridePRI_Params params;
	params.PC = PC;
	params.OldPRI = OldPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.FindInactivePRI
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::FindInactivePRI(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindInactivePRI");

	AGameInfo_FindInactivePRI_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AddInactivePRI
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// class APlayerController*       PC                             (Parm)

void AGameInfo::AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddInactivePRI");

	AGameInfo_AddInactivePRI_Params params;
	params.PRI = PRI;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostCommitMapChange
// (Event, Public)

void AGameInfo::PostCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostCommitMapChange");

	AGameInfo_PostCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreCommitMapChange
// (Event, Public)
// Parameters:
// struct FString                 PreviousMapName                (Parm, NeedCtorLink)
// struct FString                 NextMapName                    (Parm, NeedCtorLink)

void AGameInfo::PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreCommitMapChange");

	AGameInfo_PreCommitMapChange_Params params;
	params.PreviousMapName = PreviousMapName;
	params.NextMapName = NextMapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AllowCheats
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowCheats(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowCheats");

	AGameInfo_AllowCheats_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowMutator
// (Defined, Static, Public)
// Parameters:
// struct FString                 MutatorClassName               (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_AllowMutator(const struct FString& MutatorClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowMutator");

	AGameInfo_AllowMutator_Params params;
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowReactionTime
// (Defined, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_AllowReactionTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowReactionTime");

	AGameInfo_AllowReactionTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestart
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestart");

	AGameInfo_PlayerCanRestart_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestartGame
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestartGame");

	AGameInfo_PlayerCanRestartGame_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KillBots
// (Exec, Public)

void AGameInfo::KillBots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KillBots");

	AGameInfo_KillBots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DriverLeftVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverLeftVehicle");

	AGameInfo_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CanLeaveVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanLeaveVehicle");

	AGameInfo_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverEnteredVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverEnteredVehicle");

	AGameInfo_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseMessageString
// (Defined, Static, Public)
// Parameters:
// class AController*             Who                            (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseMessageString(class AController* Who, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseMessageString");

	AGameInfo_ParseMessageString_Params params;
	params.Who = Who;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ModifyScoreKill
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ModifyScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ModifyScoreKill");

	AGameInfo_ModifyScoreKill_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreKill
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill");

	AGameInfo_ScoreKill_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckScore
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckScore");

	AGameInfo_CheckScore_Params params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ScoreObjective
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameInfo::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreObjective");

	AGameInfo_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddObjectiveScore
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameInfo::AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddObjectiveScore");

	AGameInfo_AddObjectiveScore_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RatePlayerStart
// (Defined, Public)
// Parameters:
// class APlayerStart*            P                              (Parm)
// unsigned char                  Team                           (Parm)
// class AController*             Player                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RatePlayerStart");

	AGameInfo_RatePlayerStart_Params params;
	params.P = P;
	params.Team = Team;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChoosePlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// class APlayerStart*            ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerStart* AGameInfo::ChoosePlayerStart(class AController* Player, unsigned char InTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChoosePlayerStart");

	AGameInfo_ChoosePlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// struct FString                 IncomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart");

	AGameInfo_FindPlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldSpawnAtStartSpot(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldSpawnAtStartSpot");

	AGameInfo_ShouldSpawnAtStartSpot_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EndLogging
// (Public)
// Parameters:
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndLogging(const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndLogging");

	AGameInfo_EndLogging_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndGame");

	AGameInfo_EndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlinePlayerScores
// (Defined, Public)

void AGameInfo::WriteOnlinePlayerScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlinePlayerScores");

	AGameInfo_WriteOnlinePlayerScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlineStats
// (Public)

void AGameInfo::WriteOnlineStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlineStats");

	AGameInfo_WriteOnlineStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckEndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGame");

	AGameInfo_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckModifiedEndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckModifiedEndGame");

	AGameInfo_CheckModifiedEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastLocalizedTeam
// (Defined, Event, Public)
// Parameters:
// int                            TeamIndex                      (Parm)
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalizedTeam");

	AGameInfo_BroadcastLocalizedTeam_Params params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastLocalized
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalized");

	AGameInfo_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastTeam
// (Defined, Public)
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastTeam");

	AGameInfo_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Broadcast
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Broadcast");

	AGameInfo_Broadcast_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RestartGame
// (Defined, Public)

void AGameInfo::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartGame");

	AGameInfo_RestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTravelType
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::GetTravelType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTravelType");

	AGameInfo_GetTravelType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextAutomatedTestingMap
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNextAutomatedTestingMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextAutomatedTestingMap");

	AGameInfo_GetNextAutomatedTestingMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextMap
// (Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextMap");

	AGameInfo_GetNextMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// struct FString                 URL                            (Parm, NeedCtorLink)

void AGameInfo::SendPlayer(class APlayerController* aPlayer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendPlayer");

	AGameInfo_SendPlayer_Params params;
	params.aPlayer = aPlayer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickTeam
// (Defined, Public)
// Parameters:
// unsigned char                  Current                        (Parm)
// class AController*             C                              (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AGameInfo::PickTeam(unsigned char Current, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickTeam");

	AGameInfo_PickTeam_Params params;
	params.Current = Current;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// int                            N                              (Parm)
// bool                           bNewTeam                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeTeam");

	AGameInfo_ChangeTeam_Params params;
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeName
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// bool                           bNameChange                    (Parm)

void AGameInfo::ChangeName(class AController* Other, const struct FString& S, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeName");

	AGameInfo_ChangeName_Params params;
	params.Other = Other;
	params.S = S;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DiscardInventory
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AController*             Killer                         (OptionalParm, Parm)

void AGameInfo::DiscardInventory(class APawn* Other, class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DiscardInventory");

	AGameInfo_DiscardInventory_Params params;
	params.Other = Other;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickupQuery
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickupQuery");

	AGameInfo_PickupQuery_Params params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldRespawn
// (Defined, Public)
// Parameters:
// class APickupFactory*          Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldRespawn(class APickupFactory* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldRespawn");

	AGameInfo_ShouldRespawn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckRelevance
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckRelevance");

	AGameInfo_CheckRelevance_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ReduceDamage
// (Defined, Public, HasOutParms)
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class APawn*                   injured                        (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReduceDamage");

	AGameInfo_ReduceDamage_Params params;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.GameInfo.CanSpectate
// (Defined, Public)
// Parameters:
// class APlayerController*       Viewer                         (Parm)
// class APlayerReplicationInfo*  ViewTarget                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanSpectate");

	AGameInfo_CanSpectate_Params params;
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KickBan
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickBan");

	AGameInfo_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Kick
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kick");

	AGameInfo_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseKillMessage
// (Defined, Static, Public)
// Parameters:
// struct FString                 KillerName                     (Parm, NeedCtorLink)
// struct FString                 VictimName                     (Parm, NeedCtorLink)
// struct FString                 DeathMessage                   (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseKillMessage(const struct FString& KillerName, const struct FString& VictimName, const struct FString& DeathMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseKillMessage");

	AGameInfo_ParseKillMessage_Params params;
	params.KillerName = KillerName;
	params.VictimName = VictimName;
	params.DeathMessage = DeathMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastDeathMessage
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastDeathMessage");

	AGameInfo_BroadcastDeathMessage_Params params;
	params.Killer = Killer;
	params.Other = Other;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreventDeath
// (Defined, Public)
// Parameters:
// class APawn*                   KilledPawn                     (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventDeath");

	AGameInfo_PreventDeath_Params params;
	params.KilledPawn = KilledPawn;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Killed
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             KilledPlayer                   (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)

void AGameInfo::Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed");

	AGameInfo_Killed_Params params;
	params.Killer = Killer;
	params.KilledPlayer = KilledPlayer;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyKilled
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)

void AGameInfo::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyKilled");

	AGameInfo_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPlayerDefaults
// (Defined, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerDefaults");

	AGameInfo_SetPlayerDefaults_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Mutate
// (Defined, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)
// class APlayerController*       Sender                         (Parm)

void AGameInfo::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Mutate");

	AGameInfo_Mutate_Params params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddDefaultInventory
// (Defined, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AGameInfo::AddDefaultInventory(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddDefaultInventory");

	AGameInfo_AddDefaultInventory_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AcceptInventory
// (Event, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::AcceptInventory(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptInventory");

	AGameInfo_AcceptInventory_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Logout
// (Defined, Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AGameInfo::Logout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Logout");

	AGameInfo_Logout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreExit
// (Event, Public)

void AGameInfo::PreExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreExit");

	AGameInfo_PreExit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostLogin
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)

void AGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostLogin");

	AGameInfo_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ReplicateStreamingStatus
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::ReplicateStreamingStatus(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReplicateStreamingStatus");

	AGameInfo_ReplicateStreamingStatus_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDefaultPlayerClass
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultPlayerClass");

	AGameInfo_GetDefaultPlayerClass_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SpawnDefaultPawnFor
// (Defined, Public, HasDefaults)
// Parameters:
// class AController*             NewPlayer                      (Parm)
// class ANavigationPoint*        StartSpot                      (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AGameInfo::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnDefaultPawnFor");

	AGameInfo_SpawnDefaultPawnFor_Params params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RestartPlayer
// (Defined, Public)
// Parameters:
// class AController*             NewPlayer                      (Parm)

void AGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartPlayer");

	AGameInfo_RestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartBots
// (Defined, Public)

void AGameInfo::StartBots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartBots");

	AGameInfo_StartBots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartHumans
// (Defined, Public)

void AGameInfo::StartHumans()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartHumans");

	AGameInfo_StartHumans_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnStartOnlineGameComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void AGameInfo::OnStartOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnStartOnlineGameComplete");

	AGameInfo_OnStartOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartOnlineGame
// (Defined, Public)

void AGameInfo::StartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartOnlineGame");

	AGameInfo_StartOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartMatch
// (Defined, Public)

void AGameInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartMatch");

	AGameInfo_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Login
// (Defined, Event, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FString                 Portal                         (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AGameInfo::Login(const struct FString& Portal, const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Login");

	AGameInfo_Login_Params params;
	params.Portal = Portal;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AtCapacity
// (Defined, Public)
// Parameters:
// bool                           bSpectator                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AtCapacity(bool bSpectator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AtCapacity");

	AGameInfo_AtCapacity_Params params;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreLogin
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AGameInfo::PreLogin(const struct FString& Options, const struct FString& Address, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreLogin");

	AGameInfo_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.RequiresPassword
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RequiresPassword");

	AGameInfo_RequiresPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessServerTravel
// (Defined, Public, HasDefaults)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)

void AGameInfo::ProcessServerTravel(const struct FString& URL, bool bAbsolute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerTravel");

	AGameInfo_ProcessServerTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetBeaconText
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetBeaconText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetBeaconText");

	AGameInfo_GetBeaconText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RemoveMutator
// (Defined, Public)
// Parameters:
// class AMutator*                MutatorToRemove                (Parm)

void AGameInfo::RemoveMutator(class AMutator* MutatorToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RemoveMutator");

	AGameInfo_RemoveMutator_Params params;
	params.MutatorToRemove = MutatorToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddGameRules
// (Defined, Public)
// Parameters:
// class UClass*                  GRClass                        (Parm)

void AGameInfo::AddGameRules(class UClass* GRClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddGameRules");

	AGameInfo_AddGameRules_Params params;
	params.GRClass = GRClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddMutator
// (Defined, Public)
// Parameters:
// struct FString                 mutname                        (Parm, NeedCtorLink)
// bool                           bUserAdded                     (OptionalParm, Parm)

void AGameInfo::AddMutator(const struct FString& mutname, bool bUserAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddMutator");

	AGameInfo_AddMutator_Params params;
	params.mutname = mutname;
	params.bUserAdded = bUserAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseAutomatedTestingOptions
// (Defined, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)

void AGameInfo::ParseAutomatedTestingOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseAutomatedTestingOptions");

	AGameInfo_ParseAutomatedTestingOptions_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitGame
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AGameInfo::InitGame(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGame");

	AGameInfo_InitGame_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.SetGameType
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Portal                         (Parm, NeedCtorLink)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameType");

	AGameInfo_SetGameType_Params params;
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetIntOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ParseString                    (Parm, NeedCtorLink)
// int                            CurrentValue                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::STATIC_GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIntOption");

	AGameInfo_GetIntOption_Params params;
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.HasOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_HasOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HasOption");

	AGameInfo_HasOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseOption");

	AGameInfo_ParseOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetKeyValue
// (Defined, Static, Public, HasOutParms)
// Parameters:
// struct FString                 Pair                           (Parm, NeedCtorLink)
// struct FString                 Key                            (Parm, OutParm, NeedCtorLink)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)

void AGameInfo::STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyValue");

	AGameInfo_GetKeyValue_Params params;
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameInfo.GrabOption
// (Defined, Static, Public, HasOutParms)
// Parameters:
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)
// struct FString                 Result                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_GrabOption(struct FString* Options, struct FString* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GrabOption");

	AGameInfo_GrabOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Options != nullptr)
		*Options = params.Options;
	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetGameSpeed
// (Defined, Public)
// Parameters:
// float                          T                              (Parm)

void AGameInfo::SetGameSpeed(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameSpeed");

	AGameInfo_SetGameSpeed_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IsTdPaused
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsTdPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsTdPaused");

	AGameInfo_IsTdPaused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.TdPause
// (Defined, Exec, Public)

void AGameInfo::TdPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TdPause");

	AGameInfo_TdPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DebugPause
// (Defined, Public)

void AGameInfo::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DebugPause");

	AGameInfo_DebugPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearPause
// (Defined, Public)

void AGameInfo::ClearPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearPause");

	AGameInfo_ClearPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPause
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPause");

	AGameInfo_SetPause_Params params;
	params.PC = PC;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanUnpause
// (Defined, Public, Delegate)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanUnpause");

	AGameInfo_CanUnpause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanOpenPauseMenu
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanOpenPauseMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanOpenPauseMenu");

	AGameInfo_CanOpenPauseMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetServerPort
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetServerPort()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetServerPort");

	AGameInfo_GetServerPort_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNumPlayers
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNumPlayers");

	AGameInfo_GetNumPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNetworkNumber
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNetworkNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNetworkNumber");

	AGameInfo_GetNetworkNumber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.InitGameReplicationInfo
// (Defined, Public)

void AGameInfo::InitGameReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGameReplicationInfo");

	AGameInfo_InitGameReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KickIdler
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::KickIdler(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickIdler");

	AGameInfo_KickIdler_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEnding
// (Defined, Event, Public)

void AGameInfo::GameEnding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEnding");

	AGameInfo_GameEnding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyNavigationChanged
// (Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)

void AGameInfo::NotifyNavigationChanged(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyNavigationChanged");

	AGameInfo_NotifyNavigationChanged_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DoNavFearCostFallOff
// (Final, Native, Public)

void AGameInfo::DoNavFearCostFallOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoNavFearCostFallOff");

	AGameInfo_DoNavFearCostFallOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Timer
// (Defined, Event, Public)

void AGameInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Timer");

	AGameInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ResetLevel
// (Defined, Public)

void AGameInfo::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResetLevel");

	AGameInfo_ResetLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ShouldReset
// (Defined, Public)
// Parameters:
// class AActor*                  ActorToReset                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldReset(class AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldReset");

	AGameInfo_ShouldReset_Params params;
	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Reset
// (Defined, Public)

void AGameInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Reset");

	AGameInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostBeginPlay
// (Defined, Event, Public)

void AGameInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostBeginPlay");

	AGameInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetCoverReplicator
// (Defined, Public)
// Parameters:
// class ACoverReplicator*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ACoverReplicator* AGameInfo::GetCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetCoverReplicator");

	AGameInfo_GetCoverReplicator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.UseLowGore
// (Defined, Static, Public)
// Parameters:
// class AWorldInfo*              WI                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_UseLowGore(class AWorldInfo* WI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UseLowGore");

	AGameInfo_UseLowGore_Params params;
	params.WI = WI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerByID
// (Defined, Public)
// Parameters:
// int                            PlayerId                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::FindPlayerByID(int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerByID");

	AGameInfo_FindPlayerByID_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreBeginPlay
// (Defined, Event, Public)

void AGameInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreBeginPlay");

	AGameInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ShouldShowGore
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::ShouldShowGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ShouldShowGore");

	AGameReplicationInfo_ShouldShowGore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.PreventPause
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::PreventPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PreventPause");

	AGameReplicationInfo_PreventPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsCoopMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsCoopMultiplayerGame");

	AGameReplicationInfo_IsCoopMultiplayerGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.AllowViewTargetSwitching
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::AllowViewTargetSwitching()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AllowViewTargetSwitching");

	AGameReplicationInfo_AllowViewTargetSwitching_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsMultiplayerGame
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsMultiplayerGame");

	AGameReplicationInfo_IsMultiplayerGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.OnlineSession_EndSession
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           bForced                        (Parm)

void AGameReplicationInfo::OnlineSession_EndSession(bool bForced)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnlineSession_EndSession");

	AGameReplicationInfo_OnlineSession_EndSession_Params params;
	params.bForced = bForced;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.OnlineSession_EndMatch
// (Defined, Simulated, Event, Public)

void AGameReplicationInfo::OnlineSession_EndMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnlineSession_EndMatch");

	AGameReplicationInfo_OnlineSession_EndMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.OnlineSession_StartMatch
// (Defined, Simulated, Event, Public)

void AGameReplicationInfo::OnlineSession_StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnlineSession_StartMatch");

	AGameReplicationInfo_OnlineSession_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.GetOnlineGameInterface
// (Defined, Simulated, Public)
// Parameters:
// TScriptInterface<class UOnlineGameInterface> ReturnValue                    (Parm, OutParm, ReturnParm)

TScriptInterface<class UOnlineGameInterface> AGameReplicationInfo::GetOnlineGameInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetOnlineGameInterface");

	AGameReplicationInfo_GetOnlineGameInterface_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.EndGame
// (Defined, Simulated, Public)

void AGameReplicationInfo::EndGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.EndGame");

	AGameReplicationInfo_EndGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.StartMatch
// (Defined, Simulated, Public)

void AGameReplicationInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.StartMatch");

	AGameReplicationInfo_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.CleanupGameDataStore
// (Defined, Simulated, Public)

void AGameReplicationInfo::CleanupGameDataStore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.CleanupGameDataStore");

	AGameReplicationInfo_CleanupGameDataStore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.InitializeGameDataStore
// (Defined, Simulated, Public)

void AGameReplicationInfo::InitializeGameDataStore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.InitializeGameDataStore");

	AGameReplicationInfo_InitializeGameDataStore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AGameReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReplicatedEvent");

	AGameReplicationInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.SortPRIArray
// (Defined, Simulated, Public)

void AGameReplicationInfo::SortPRIArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SortPRIArray");

	AGameReplicationInfo_SortPRIArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.InOrder
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  P1                             (Parm)
// class APlayerReplicationInfo*  P2                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::InOrder(class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.InOrder");

	AGameReplicationInfo_InOrder_Params params;
	params.P1 = P1;
	params.P2 = P2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetPRIArray
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// TArray<class APlayerReplicationInfo*> pris                           (Parm, OutParm, NeedCtorLink)

void AGameReplicationInfo::GetPRIArray(TArray<class APlayerReplicationInfo*>* pris)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetPRIArray");

	AGameReplicationInfo_GetPRIArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (pris != nullptr)
		*pris = params.pris;
}


// Function Engine.GameReplicationInfo.SetTeam
// (Defined, Simulated, Public)
// Parameters:
// int                            Index                          (Parm)
// class ATeamInfo*               TI                             (Parm)

void AGameReplicationInfo::SetTeam(int Index, class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SetTeam");

	AGameReplicationInfo_SetTeam_Params params;
	params.Index = Index;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.RemovePRI
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::RemovePRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.RemovePRI");

	AGameReplicationInfo_RemovePRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.AddPRI
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::AddPRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AddPRI");

	AGameReplicationInfo_AddPRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.FindPlayerByID
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerId                       (Parm)
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID(int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.FindPlayerByID");

	AGameReplicationInfo_FindPlayerByID_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.OnSameTeam
// (Simulated, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  B                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::OnSameTeam(class AActor* A, class AActor* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnSameTeam");

	AGameReplicationInfo_OnSameTeam_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.Timer
// (Defined, Simulated, Event, Public)

void AGameReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Timer");

	AGameReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Destroyed
// (Defined, Simulated, Event, Public)

void AGameReplicationInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Destroyed");

	AGameReplicationInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Reset
// (Defined, Public)

void AGameReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Reset");

	AGameReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AGameReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostBeginPlay");

	AGameReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.RemoveLocalPlayer
// (Final, Defined, Private)
// Parameters:
// class ULocalPlayer*            ExistingPlayer                 (Parm)

void UGameViewportClient::RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemoveLocalPlayer");

	UGameViewportClient_RemoveLocalPlayer_Params params;
	params.ExistingPlayer = ExistingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.AddLocalPlayer
// (Final, Defined, Private)
// Parameters:
// class ULocalPlayer*            NewPlayer                      (Parm)

void UGameViewportClient::AddLocalPlayer(class ULocalPlayer* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.AddLocalPlayer");

	UGameViewportClient_AddLocalPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyPlayerRemoved
// (Final, Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UGameViewportClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerRemoved");

	UGameViewportClient_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyPlayerAdded
// (Final, Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UGameViewportClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerAdded");

	UGameViewportClient_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransitionMessage
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UGameViewportClient::DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransitionMessage");

	UGameViewportClient_DrawTransitionMessage_Params params;
	params.Canvas = Canvas;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransition
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransition");

	UGameViewportClient_DrawTransition_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.PostRender
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.PostRender");

	UGameViewportClient_PostRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTitleSafeArea
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UGameViewportClient::DrawTitleSafeArea(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTitleSafeArea");

	UGameViewportClient_DrawTitleSafeArea_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.Tick
// (Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UGameViewportClient::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Tick");

	UGameViewportClient_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.CalculatePixelCenter
// (Final, Defined, Public, HasOutParms)
// Parameters:
// float                          out_CenterX                    (Parm, OutParm)
// float                          out_CenterY                    (Parm, OutParm)
// class ULocalPlayer*            LPlayer                        (Parm)
// class UCanvas*                 Canvas                         (Parm)
// bool                           bUseMaxPercent                 (OptionalParm, Parm)

void UGameViewportClient::CalculatePixelCenter(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float* out_CenterX, float* out_CenterY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculatePixelCenter");

	UGameViewportClient_CalculatePixelCenter_Params params;
	params.LPlayer = LPlayer;
	params.Canvas = Canvas;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CenterX != nullptr)
		*out_CenterX = params.out_CenterX;
	if (out_CenterY != nullptr)
		*out_CenterY = params.out_CenterY;
}


// Function Engine.GameViewportClient.CalculateDeadZone
// (Final, Defined, Public)
// Parameters:
// class ULocalPlayer*            LPlayer                        (Parm)
// TEnumAsByte<ESafeZoneType>     SZType                         (Parm)
// class UCanvas*                 Canvas                         (Parm)
// bool                           bUseMaxPercent                 (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UGameViewportClient::CalculateDeadZone(class ULocalPlayer* LPlayer, TEnumAsByte<ESafeZoneType> SZType, class UCanvas* Canvas, bool bUseMaxPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateDeadZone");

	UGameViewportClient_CalculateDeadZone_Params params;
	params.LPlayer = LPlayer;
	params.SZType = SZType;
	params.Canvas = Canvas;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CalculateSafeZoneValues
// (Final, Defined, Public, HasOutParms)
// Parameters:
// float                          out_Horizontal                 (Parm, OutParm)
// float                          out_Vertical                   (Parm, OutParm)
// class UCanvas*                 Canvas                         (Parm)
// int                            LocalPlayerIndex               (Parm)
// bool                           bUseMaxPercent                 (Parm)

void UGameViewportClient::CalculateSafeZoneValues(class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent, float* out_Horizontal, float* out_Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateSafeZoneValues");

	UGameViewportClient_CalculateSafeZoneValues_Params params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Horizontal != nullptr)
		*out_Horizontal = params.out_Horizontal;
	if (out_Vertical != nullptr)
		*out_Vertical = params.out_Vertical;
}


// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// (Final, Defined, Public, HasOutParms)
// Parameters:
// float                          out_Width                      (Parm, OutParm)
// float                          out_Height                     (Parm, OutParm)
// class UCanvas*                 Canvas                         (Parm)
// int                            LocalPlayerIndex               (Parm)

void UGameViewportClient::GetPixelSizeOfScreen(class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPixelSizeOfScreen");

	UGameViewportClient_GetPixelSizeOfScreen_Params params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Width != nullptr)
		*out_Width = params.out_Width;
	if (out_Height != nullptr)
		*out_Height = params.out_Height;
}


// Function Engine.GameViewportClient.HasRightSafeZone
// (Final, Defined, Public)
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasRightSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasRightSafeZone");

	UGameViewportClient_HasRightSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasLeftSafeZone
// (Final, Defined, Public)
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasLeftSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasLeftSafeZone");

	UGameViewportClient_HasLeftSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasBottomSafeZone
// (Final, Defined, Public)
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasBottomSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasBottomSafeZone");

	UGameViewportClient_HasBottomSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasTopSafeZone
// (Final, Defined, Public)
// Parameters:
// int                            LocalPlayerIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HasTopSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasTopSafeZone");

	UGameViewportClient_HasTopSafeZone_Params params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// (Final, Defined, Public)
// Parameters:
// class ULocalPlayer*            LPlayer                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex");

	UGameViewportClient_ConvertLocalPlayerToGamePlayerIndex_Params params;
	params.LPlayer = LPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetSubtitleRegion
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FVector2D               MinPos                         (Parm, OutParm)
// struct FVector2D               MaxPos                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSubtitleRegion");

	UGameViewportClient_GetSubtitleRegion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinPos != nullptr)
		*MinPos = params.MinPos;
	if (MaxPos != nullptr)
		*MaxPos = params.MaxPos;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.LayoutPlayers
// (Defined, Event, Public)

void UGameViewportClient::LayoutPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.LayoutPlayers");

	UGameViewportClient_LayoutPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// (Defined, Public)
// Parameters:
// TEnumAsByte<ESplitScreenType>  SplitType                      (Parm)

void UGameViewportClient::SetSplitscreenConfiguration(TEnumAsByte<ESplitScreenType> SplitType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetSplitscreenConfiguration");

	UGameViewportClient_SetSplitscreenConfiguration_Params params;
	params.SplitType = SplitType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GameSessionEnded
// (Defined, Event, Public)

void UGameViewportClient::GameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GameSessionEnded");

	UGameViewportClient_GameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.InsertInteraction
// (Defined, Event, Public)
// Parameters:
// class UInteraction*            NewInteraction                 (Parm)
// int                            InIndex                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameViewportClient::InsertInteraction(class UInteraction* NewInteraction, int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.InsertInteraction");

	UGameViewportClient_InsertInteraction_Params params;
	params.NewInteraction = NewInteraction;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.Init
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::Init(struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Init");

	UGameViewportClient_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SetConsoleTarget
// (Defined, Exec, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)

void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetConsoleTarget");

	UGameViewportClient_SetConsoleTarget_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.ShowTitleSafeArea
// (Defined, Exec, Public)

void UGameViewportClient::ShowTitleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShowTitleSafeArea");

	UGameViewportClient_ShowTitleSafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetSplit
// (Defined, Exec, Public)
// Parameters:
// int                            Mode                           (Parm)

void UGameViewportClient::SetSplit(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetSplit");

	UGameViewportClient_SetSplit_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DebugRemovePlayer
// (Defined, Exec, Public)
// Parameters:
// int                            ControllerId                   (Parm)

void UGameViewportClient::DebugRemovePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DebugRemovePlayer");

	UGameViewportClient_DebugRemovePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SSSwapControllers
// (Defined, Exec, Public)

void UGameViewportClient::SSSwapControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SSSwapControllers");

	UGameViewportClient_SSSwapControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DebugCreatePlayer
// (Defined, Exec, Public)
// Parameters:
// int                            ControllerId                   (Parm)

void UGameViewportClient::DebugCreatePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DebugCreatePlayer");

	UGameViewportClient_DebugCreatePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.FindPlayerByControllerId
// (Final, Defined, Event, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UGameViewportClient::FindPlayerByControllerId(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FindPlayerByControllerId");

	UGameViewportClient_FindPlayerByControllerId_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.RemovePlayer
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            ExPlayer                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::RemovePlayer(class ULocalPlayer* ExPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemovePlayer");

	UGameViewportClient_RemovePlayer_Params params;
	params.ExPlayer = ExPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CreatePlayer
// (Defined, Event, Public, HasOutParms)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           bSpawnActor                    (Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UGameViewportClient::CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreatePlayer");

	UGameViewportClient_CreatePlayer_Params params;
	params.ControllerId = ControllerId;
	params.bSpawnActor = bSpawnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.IsFullScreenViewport
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::IsFullScreenViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsFullScreenViewport");

	UGameViewportClient_IsFullScreenViewport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetViewportSize
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               out_ViewportSize               (Parm, OutParm)

void UGameViewportClient::GetViewportSize(struct FVector2D* out_ViewportSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetViewportSize");

	UGameViewportClient_GetViewportSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;
}


// Function Engine.GameViewportClient.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameViewportClient::ConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConsoleCommand");

	UGameViewportClient_ConsoleCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputChar
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputChar");

	UGameViewportClient_HandleInputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputAxis
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// float                          Delta                          (Parm)
// float                          DeltaTime                      (Parm)
// bool                           bGamepad                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputAxis");

	UGameViewportClient_HandleInputAxis_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputKey
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       EventType                      (Parm)
// float                          AmountDepressed                (Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameViewportClient::HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputKey");

	UGameViewportClient_HandleInputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeightFogComponent.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFogComponent.SetEnabled");

	UHeightFogComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnLostFocusPause
// (Defined, Event, Public)
// Parameters:
// bool                           Enable                         (Parm)

void AHUD::OnLostFocusPause(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnLostFocusPause");

	AHUD_OnLostFocusPause_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PlayerOwnerDied
// (Public)

void AHUD::PlayerOwnerDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PlayerOwnerDied");

	AHUD_PlayerOwnerDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetRYGColorRamp
// (Defined, Static, Public, HasDefaults)
// Parameters:
// float                          Pct                            (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor AHUD::STATIC_GetRYGColorRamp(float Pct)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetRYGColorRamp");

	AHUD_GetRYGColorRamp_Params params;
	params.Pct = Pct;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetFontSizeIndex
// (Defined, Static, Public)
// Parameters:
// int                            FontSize                       (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::STATIC_GetFontSizeIndex(int FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetFontSizeIndex");

	AHUD_GetFontSizeIndex_Params params;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DisplayLocalMessages
// (Defined, Public)

void AHUD::DisplayLocalMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayLocalMessages");

	AHUD_DisplayLocalMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessageText
// (Defined, Public)
// Parameters:
// struct FHudLocalizedMessage    LocalMessage                   (Parm, NeedCtorLink)
// float                          ScreenX                        (Parm)
// float                          ScreenY                        (Parm)

void AHUD::DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessageText");

	AHUD_DrawMessageText_Params params;
	params.LocalMessage = LocalMessage;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessage
// (Defined, Public, HasOutParms)
// Parameters:
// int                            I                              (Parm)
// float                          PosY                           (Parm)
// float                          DX                             (Parm, OutParm)
// float                          DY                             (Parm, OutParm)

void AHUD::DrawMessage(int I, float PosY, float* DX, float* DY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessage");

	AHUD_DrawMessage_Params params;
	params.I = I;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DX != nullptr)
		*DX = params.DX;
	if (DY != nullptr)
		*DY = params.DY;
}


// Function Engine.HUD.GetScreenCoords
// (Defined, Public, HasOutParms)
// Parameters:
// float                          PosY                           (Parm)
// float                          ScreenX                        (Parm, OutParm)
// float                          ScreenY                        (Parm, OutParm)
// struct FHudLocalizedMessage    InMessage                      (Parm, OutParm, NeedCtorLink)

void AHUD::GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetScreenCoords");

	AHUD_GetScreenCoords_Params params;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenX != nullptr)
		*ScreenX = params.ScreenX;
	if (ScreenY != nullptr)
		*ScreenY = params.ScreenY;
	if (InMessage != nullptr)
		*InMessage = params.InMessage;
}


// Function Engine.HUD.AddLocalizedMessage
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UClass*                  InMessageClass                 (Parm)
// struct FString                 CriticalString                 (Parm, NeedCtorLink)
// int                            Switch                         (Parm)
// float                          Position                       (Parm)
// float                          Lifetime                       (Parm)
// int                            FontSize                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// int                            MessageCount                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddLocalizedMessage");

	AHUD_AddLocalizedMessage_Params params;
	params.Index = Index;
	params.InMessageClass = InMessageClass;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.MessageCount = MessageCount;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessage
// (Defined, Public)
// Parameters:
// class UClass*                  InMessageClass                 (Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (Parm)
// struct FString                 CriticalString                 (Parm, NeedCtorLink)
// int                            Switch                         (Parm)
// float                          Position                       (Parm)
// float                          Lifetime                       (Parm)
// int                            FontSize                       (Parm)
// struct FColor                  DrawColor                      (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage");

	AHUD_LocalizedMessage_Params params;
	params.InMessageClass = InMessageClass;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddConsoleMessage
// (Defined, Public)
// Parameters:
// struct FString                 M                              (Parm, NeedCtorLink)
// class UClass*                  InMessageClass                 (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)
// float                          Lifetime                       (OptionalParm, Parm)

void AHUD::AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddConsoleMessage");

	AHUD_AddConsoleMessage_Params params;
	params.M = M;
	params.InMessageClass = InMessageClass;
	params.PRI = PRI;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayConsoleMessages
// (Defined, Public)

void AHUD::DisplayConsoleMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayConsoleMessages");

	AHUD_DisplayConsoleMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Message
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   MsgType                        (Parm)
// float                          Lifetime                       (OptionalParm, Parm)

void AHUD::Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Message");

	AHUD_Message_Params params;
	params.PRI = PRI;
	params.msg = msg;
	params.MsgType = MsgType;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ClearMessage
// (Defined, Public, HasOutParms)
// Parameters:
// struct FHudLocalizedMessage    M                              (Parm, OutParm, NeedCtorLink)

void AHUD::ClearMessage(struct FHudLocalizedMessage* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ClearMessage");

	AHUD_ClearMessage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;
}


// Function Engine.HUD.DisplayBadConnectionAlert
// (Public)

void AHUD::DisplayBadConnectionAlert()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayBadConnectionAlert");

	AHUD_DisplayBadConnectionAlert_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayProgressMessage
// (Defined, Public)

void AHUD::DisplayProgressMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayProgressMessage");

	AHUD_DisplayProgressMessage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawEngineHUD
// (Defined, Public)

void AHUD::DrawEngineHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawEngineHUD");

	AHUD_DrawEngineHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawDemoHUD
// (Public)

void AHUD::DrawDemoHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDemoHUD");

	AHUD_DrawDemoHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawHUD
// (Defined, Public)

void AHUD::DrawHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawHUD");

	AHUD_DrawHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostRender
// (Defined, Event, Public)

void AHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRender");

	AHUD_PostRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PreCalcValues
// (Defined, Public)

void AHUD::PreCalcValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreCalcValues");

	AHUD_PreCalcValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawRoute
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   Target                         (Parm)

void AHUD::DrawRoute(class APawn* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRoute");

	AHUD_DrawRoute_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.FXStop
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void AHUD::FXStop(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.FXStop");

	AHUD_FXStop_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.FXPlay
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)
// struct FString                 FXAnimPath                     (Parm, NeedCtorLink)

void AHUD::FXPlay(class UClass* aClass, const struct FString& FXAnimPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.FXPlay");

	AHUD_FXPlay_Params params;
	params.aClass = aClass;
	params.FXAnimPath = FXAnimPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShouldDisplayDebug
// (Defined, Public)
// Parameters:
// struct FName                   DebugType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::ShouldDisplayDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldDisplayDebug");

	AHUD_ShouldDisplayDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.ShowDebug
// (Defined, Exec, Public)
// Parameters:
// struct FName                   DebugType                      (OptionalParm, Parm)

void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	AHUD_ShowDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetShowScores
// (Defined, Exec, Public)
// Parameters:
// bool                           bNewValue                      (Parm)

void AHUD::SetShowScores(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetShowScores");

	AHUD_SetShowScores_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowScores
// (Defined, Exec, Public)

void AHUD::ShowScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowScores");

	AHUD_ShowScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowHUD
// (Defined, Exec, Public)

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	AHUD_ShowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ToggleHUD
// (Defined, Exec, Public)

void AHUD::ToggleHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleHUD");

	AHUD_ToggleHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Destroyed
// (Defined, Event, Public)

void AHUD::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Destroyed");

	AHUD_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SpawnScoreBoard
// (Defined, Public)
// Parameters:
// class UClass*                  ScoringType                    (Parm)

void AHUD::SpawnScoreBoard(class UClass* ScoringType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SpawnScoreBoard");

	AHUD_SpawnScoreBoard_Params params;
	params.ScoringType = ScoringType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostBeginPlay
// (Defined, Event, Public)

void AHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostBeginPlay");

	AHUD_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw2DLine
// (Final, Native, Public)
// Parameters:
// int                            X1                             (Parm)
// int                            Y1                             (Parm)
// int                            X2                             (Parm)
// int                            Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw2DLine");

	AHUD_Draw2DLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw3DLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw3DLine");

	AHUD_Draw3DLine_Params params;
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InternetInfo.GetBeaconText
// (Public)
// Parameters:
// int                            I                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInternetInfo::GetBeaconText(int I)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InternetInfo.GetBeaconText");

	AInternetInfo_GetBeaconText_Params params;
	params.I = I;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InternetInfo.GetBeaconAddress
// (Public)
// Parameters:
// int                            I                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInternetInfo::GetBeaconAddress(int I)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InternetInfo.GetBeaconAddress");

	AInternetInfo_GetBeaconAddress_Params params;
	params.I = I;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.OnActivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void AInterpActor::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.OnActivateLOI");

	AInterpActor_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.OnDeactivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void AInterpActor::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.OnDeactivateLOI");

	AInterpActor_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.ActivateLOI
// (Defined, Event, Public)

void AInterpActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ActivateLOI");

	AInterpActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.AssignPlayerToLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void AInterpActor::AssignPlayerToLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.AssignPlayerToLOI");

	AInterpActor_AssignPlayerToLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.ApplyCheckpointRecord
// (Defined, Public, HasOutParms)
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (Const, Parm, OutParm)

void AInterpActor::ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ApplyCheckpointRecord");

	AInterpActor_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.CreateCheckpointRecord
// (Defined, Public, HasOutParms)
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (Parm, OutParm)

void AInterpActor::CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.CreateCheckpointRecord");

	AInterpActor_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.InterpolationChanged
// (Defined, Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AInterpActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationChanged");

	AInterpActor_InterpolationChanged_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationFinished
// (Defined, Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AInterpActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationFinished");

	AInterpActor_InterpolationFinished_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationStarted
// (Defined, Simulated, Event, Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (Parm)

void AInterpActor::InterpolationStarted(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationStarted");

	AInterpActor_InterpolationStarted_Params params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.PlayMovingSound
// (Defined, Simulated, Public)
// Parameters:
// bool                           bClosing                       (Parm)

void AInterpActor::PlayMovingSound(bool bClosing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PlayMovingSound");

	AInterpActor_PlayMovingSound_Params params;
	params.bClosing = bClosing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.FinishedOpen
// (Defined, Public)

void AInterpActor::FinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.FinishedOpen");

	AInterpActor_FinishedOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Restart
// (Defined, Public)

void AInterpActor::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Restart");

	AInterpActor_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Detach
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Detach");

	AInterpActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Attach
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Attach");

	AInterpActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.RanInto
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AInterpActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.RanInto");

	AInterpActor_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.EncroachingOn
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInterpActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.EncroachingOn");

	AInterpActor_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AInterpActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PostBeginPlay");

	AInterpActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.OwnerEvent
// (Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void AInventory::OwnerEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.OwnerEvent");

	AInventory_OwnerEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GetLocalString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetLocalString");

	AInventory_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.DropFrom
// (Defined, Public)
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FVector                 StartVelocity                  (Parm)

void AInventory::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DropFrom");

	AInventory_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DenyPickupQuery
// (Defined, Public)
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventory::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DenyPickupQuery");

	AInventory_DenyPickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.ItemRemovedFromInvManager
// (Public)

void AInventory::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ItemRemovedFromInvManager");

	AInventory_ItemRemovedFromInvManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.ClientGivenTo
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class APawn*                   NewOwner                       (Parm)
// bool                           bDoNotActivate                 (Parm)

void AInventory::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ClientGivenTo");

	AInventory_ClientGivenTo_Params params;
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GivenTo
// (Defined, Public)
// Parameters:
// class APawn*                   thisPawn                       (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)

void AInventory::GivenTo(class APawn* thisPawn, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GivenTo");

	AInventory_GivenTo_Params params;
	params.thisPawn = thisPawn;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.AnnouncePickup
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AInventory::AnnouncePickup(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AnnouncePickup");

	AInventory_AnnouncePickup_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GiveTo
// (Final, Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AInventory::GiveTo(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GiveTo");

	AInventory_GiveTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DetourWeight
// (Defined, Static, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventory::STATIC_DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DetourWeight");

	AInventory_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.BotDesireability
// (Defined, Static, Public)
// Parameters:
// class AActor*                  PickupHolder                   (Parm)
// class APawn*                   P                              (Parm)
// class AController*             C                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventory::STATIC_BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.BotDesireability");

	AInventory_BotDesireability_Params params;
	params.PickupHolder = PickupHolder;
	params.P = P;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.Destroyed
// (Defined, Event, Public)

void AInventory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Destroyed");

	AInventory_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetHumanReadableName");

	AInventory_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.ActiveRenderOverlays
// (Simulated, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AInventory::ActiveRenderOverlays(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ActiveRenderOverlays");

	AInventory_ActiveRenderOverlays_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.RenderOverlays
// (Simulated, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AInventory::RenderOverlays(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.RenderOverlays");

	AInventory_RenderOverlays_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.AssignToSlot
// (Defined, Public)
// Parameters:
// TEnumAsByte<EInventorySlot>    Slot                           (Parm)

void AInventory::AssignToSlot(TEnumAsByte<EInventorySlot> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AssignToSlot");

	AInventory_AssignToSlot_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClientSyncWeapon
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class AWeapon*                 NewWeapon                      (Parm)

void AInventoryManager::ClientSyncWeapon(class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClientSyncWeapon");

	AInventoryManager_ClientSyncWeapon_Params params;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClientWeaponSet
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 NewWeapon                      (Parm)
// bool                           bOptionalSet                   (Parm)

void AInventoryManager::ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClientWeaponSet");

	AInventoryManager_ClientWeaponSet_Params params;
	params.NewWeapon = NewWeapon;
	params.bOptionalSet = bOptionalSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ChangedWeapon
// (Defined, Simulated, Public)

void AInventoryManager::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ChangedWeapon");

	AInventoryManager_ChangedWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.CancelWeaponChange
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::CancelWeaponChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CancelWeaponChange");

	AInventoryManager_CancelWeaponChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.ServerSetCurrentWeapon
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::ServerSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ServerSetCurrentWeapon");

	AInventoryManager_ServerSetCurrentWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetPendingWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::SetPendingWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingWeapon");

	AInventoryManager_SetPendingWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetCurrentWeapon
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (Parm)

void AInventoryManager::SetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetCurrentWeapon");

	AInventoryManager_SetCurrentWeapon_Params params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.NextWeapon
// (Defined, Simulated, Public)

void AInventoryManager::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.NextWeapon");

	AInventoryManager_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.PrevWeapon
// (Defined, Simulated, Public)

void AInventoryManager::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PrevWeapon");

	AInventoryManager_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SwitchToBestWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           bForceADifferentWeapon         (OptionalParm, Parm)

void AInventoryManager::SwitchToBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SwitchToBestWeapon");

	AInventoryManager_SwitchToBestWeapon_Params params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.GetBestWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           bForceADifferentWeapon         (OptionalParm, Parm)
// class AWeapon*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class AWeapon* AInventoryManager::GetBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetBestWeapon");

	AInventoryManager_GetBestWeapon_Params params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.GetWeaponRatingFor
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 W                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventoryManager::GetWeaponRatingFor(class AWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetWeaponRatingFor");

	AInventoryManager_GetWeaponRatingFor_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.IsActiveWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 ThisWeapon                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::IsActiveWeapon(class AWeapon* ThisWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.IsActiveWeapon");

	AInventoryManager_IsActiveWeapon_Params params;
	params.ThisWeapon = ThisWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.StopFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AInventoryManager::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.StopFire");

	AInventoryManager_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.StartFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AInventoryManager::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.StartFire");

	AInventoryManager_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.DrawHUD
// (Defined, Simulated, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AInventoryManager::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DrawHUD");

	AInventoryManager_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.OwnerEvent
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void AInventoryManager::OwnerEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.OwnerEvent");

	AInventoryManager_OwnerEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ModifyDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AInventoryManager::ModifyDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ModifyDamage");

	AInventoryManager_ModifyDamage_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.DiscardInventory
// (Defined, Simulated, Event, Public, HasDefaults)

void AInventoryManager::DiscardInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DiscardInventory");

	AInventoryManager_DiscardInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.RemoveFromInventory
// (Defined, Simulated, Public)
// Parameters:
// class AInventory*              ItemToRemove                   (Parm)

void AInventoryManager::RemoveFromInventory(class AInventory* ItemToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.RemoveFromInventory");

	AInventoryManager_RemoveFromInventory_Params params;
	params.ItemToRemove = ItemToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.AddInventory
// (Defined, Simulated, Public)
// Parameters:
// class AInventory*              NewItem                        (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::AddInventory(class AInventory* NewItem, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.AddInventory");

	AInventoryManager_AddInventory_Params params;
	params.NewItem = NewItem;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.CreateInventory
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  NewInventoryItemClass          (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* AInventoryManager::CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CreateInventory");

	AInventoryManager_CreateInventory_Params params;
	params.NewInventoryItemClass = NewInventoryItemClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.FindInventoryType
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bAllowSubclass                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* AInventoryManager::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.FindInventoryType");

	AInventoryManager_FindInventoryType_Params params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.HandlePickupQuery
// (Defined, Public)
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventoryManager::HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.HandlePickupQuery");

	AInventoryManager_HandlePickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.Destroyed
// (Defined, Event, Public)

void AInventoryManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.Destroyed");

	AInventoryManager_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetupFor
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AInventoryManager::SetupFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetupFor");

	AInventoryManager_SetupFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.DumpWeaponStats
// (Defined, Simulated, Exec, Public)

void AInventoryManager::DumpWeaponStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DumpWeaponStats");

	AInventoryManager_DumpWeaponStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.InventoryActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AInventory*              Inv                            (Parm, OutParm)

void AInventoryManager::InventoryActors(class UClass* BaseClass, class AInventory** Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InventoryActors");

	AInventoryManager_InventoryActors_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Inv != nullptr)
		*Inv = params.Inv;
}


// Function Engine.InventoryManager.PostBeginPlay
// (Defined, Event, Public)

void AInventoryManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PostBeginPlay");

	AInventoryManager_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PhysicsChangedFor
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ALadderVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PhysicsChangedFor");

	ALadderVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnLeavingVolume
// (Defined, Simulated, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnLeavingVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnLeavingVolume");

	ALadderVolume_PawnLeavingVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnEnteredVolume
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnEnteredVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnEnteredVolume");

	ALadderVolume_PawnEnteredVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.InUse
// (Defined, Public)
// Parameters:
// class APawn*                   Ignored                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadderVolume::InUse(class APawn* Ignored)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.InUse");

	ALadderVolume_InUse_Params params;
	params.Ignored = Ignored;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderVolume.PostBeginPlay
// (Defined, Simulated, Event, Public, HasDefaults)

void ALadderVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PostBeginPlay");

	ALadderVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreamingVolume.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALevelStreamingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.OnToggle");

	ALevelStreamingVolume_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftCenter.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.ProceedWithMove");

	ALiftCenter_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SuggestMovePreparation");

	ALiftCenter_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SpecialHandling
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ALiftCenter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SpecialHandling");

	ALiftCenter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.PostBeginPlay
// (Defined, Event, Public)

void ALiftCenter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.PostBeginPlay");

	ALiftCenter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.SuggestMovePreparation");

	ALiftExit_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftExit.WaitForLift
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void ALiftExit::WaitForLift(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.WaitForLift");

	ALiftExit_WaitForLift_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.CanBeReachedFromLiftBy
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::CanBeReachedFromLiftBy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.CanBeReachedFromLiftBy");

	ALiftExit_CanBeReachedFromLiftBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// (Native, Public)

void ULocalPlayer::TouchPlayerPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.TouchPlayerPostProcessChain");

	ULocalPlayer_TouchPlayerPostProcessChain_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetPostProcessChain
// (Native, Public)
// Parameters:
// int                            InIndex                        (Parm)
// class UPostProcessChain*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPostProcessChain* ULocalPlayer::GetPostProcessChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetPostProcessChain");

	ULocalPlayer_GetPostProcessChain_Params params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::RemoveAllPostProcessingChains()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemoveAllPostProcessingChains");

	ULocalPlayer_RemoveAllPostProcessingChains_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemovePostProcessingChain
// (Native, Public)
// Parameters:
// int                            InIndex                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::RemovePostProcessingChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemovePostProcessingChain");

	ULocalPlayer_RemovePostProcessingChain_Params params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.InsertPostProcessingChain
// (Native, Public)
// Parameters:
// class UPostProcessChain*       InChain                        (Parm)
// int                            InIndex                        (Parm)
// bool                           bInClone                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.InsertPostProcessingChain");

	ULocalPlayer_InsertPostProcessingChain_Params params;
	params.InChain = InChain;
	params.InIndex = InIndex;
	params.bInClone = bInClone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SetControllerId
// (Final, Defined, Public)
// Parameters:
// int                            NewControllerId                (Parm)

void ULocalPlayer::SetControllerId(int NewControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SetControllerId");

	ULocalPlayer_SetControllerId_Params params;
	params.NewControllerId = NewControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// (Defined, Simulated, Public)

void ULocalPlayer::ClearPostProcessSettingsOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ClearPostProcessSettingsOverride");

	ULocalPlayer_ClearPostProcessSettingsOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.UpdateOverridePostProcessSettings
// (Defined, Simulated, Public)
// Parameters:
// struct FPostProcessSettings    OverrideSettings               (Parm, NeedCtorLink)

void ULocalPlayer::UpdateOverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.UpdateOverridePostProcessSettings");

	ULocalPlayer_UpdateOverridePostProcessSettings_Params params;
	params.OverrideSettings = OverrideSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.OverridePostProcessSettings
// (Defined, Simulated, Public)
// Parameters:
// struct FPostProcessSettings    OverrideSettings               (Parm, NeedCtorLink)
// float                          StartBlendTime                 (Parm)

void ULocalPlayer::OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float StartBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettings");

	ULocalPlayer_OverridePostProcessSettings_Params params;
	params.OverrideSettings = OverrideSettings;
	params.StartBlendTime = StartBlendTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetActorVisibility
// (Final, Native, Public)
// Parameters:
// class AActor*                  TestActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::GetActorVisibility(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetActorVisibility");

	ULocalPlayer_GetActorVisibility_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SendSplitJoin
// (Final, Native, Public)

void ULocalPlayer::SendSplitJoin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SendSplitJoin");

	ULocalPlayer_SendSplitJoin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.SpawnPlayActor
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalPlayer::SpawnPlayActor(const struct FString& URL, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SpawnPlayActor");

	ULocalPlayer_SpawnPlayActor_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.Material.GetTextures
// (Defined, Public)
// Parameters:
// TArray<class UTexture*>        ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UTexture*> UMaterial::GetTextures()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Material.GetTextures");

	UMaterial_GetTextures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MatineeActor.Update
// (Defined, Event, Public)

void AMatineeActor::Update()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Update");

	AMatineeActor_Update_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.InitLOIMtrlInstances
// (Defined, Public)
// Parameters:
// TArray<class UMaterialInstanceConstant*> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UMaterialInstanceConstant*> UMeshComponent::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.InitLOIMtrlInstances");

	UMeshComponent_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// (Defined, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInstanceTimeVarying* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying");

	UMeshComponent_CreateAndSetMaterialInstanceTimeVarying_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// (Defined, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInstanceConstant* ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant");

	UMeshComponent_CreateAndSetMaterialInstanceConstant_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.GetNumElements
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMeshComponent::GetNumElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetNumElements");

	UMeshComponent_GetNumElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.SetMaterial
// (Native, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInterface*      Material                       (Parm)

void UMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetMaterial");

	UMeshComponent_SetMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.GetMaterial
// (Native, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterialInterface* UMeshComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterial");

	UMeshComponent_GetMaterial_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MultiFont.GetResolutionTestTableIndex
// (Native, Public)
// Parameters:
// float                          HeightTest                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMultiFont::GetResolutionTestTableIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiFont.GetResolutionTestTableIndex");

	UMultiFont_GetResolutionTestTableIndex_Params params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetSeamlessTravelActorList
// (Defined, Public, HasOutParms)
// Parameters:
// bool                           bToEntry                       (Parm)
// TArray<class AActor*>          ActorList                      (Parm, OutParm, NeedCtorLink)

void AMutator::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetSeamlessTravelActorList");

	AMutator_GetSeamlessTravelActorList_Params params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.Mutator.InitMutator
// (Defined, Public, HasOutParms)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ErrorMessage                   (Parm, OutParm, NeedCtorLink)

void AMutator::InitMutator(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.InitMutator");

	AMutator_InitMutator_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.Mutator.DriverLeftVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverLeftVehicle");

	AMutator_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CanLeaveVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanLeaveVehicle");

	AMutator_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.DriverEnteredVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverEnteredVehicle");

	AMutator_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogin
// (Defined, Public)
// Parameters:
// class AController*             NewPlayer                      (Parm)

void AMutator::NotifyLogin(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogin");

	AMutator_NotifyLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogout
// (Defined, Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AMutator::NotifyLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogout");

	AMutator_NotifyLogout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ParseChatPercVar
// (Defined, Public)
// Parameters:
// class AController*             Who                            (Parm)
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMutator::ParseChatPercVar(class AController* Who, const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ParseChatPercVar");

	AMutator_ParseChatPercVar_Params params;
	params.Who = Who;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetServerPlayers
// (Public, HasOutParms)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AMutator::GetServerPlayers(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetServerPlayers");

	AMutator_GetServerPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.Mutator.GetServerDetails
// (Defined, Public, HasOutParms)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AMutator::GetServerDetails(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetServerDetails");

	AMutator_GetServerDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.Mutator.CheckReplacement
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckReplacement(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckReplacement");

	AMutator_CheckReplacement_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckRelevance
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckRelevance");

	AMutator_CheckRelevance_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.IsRelevant
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::IsRelevant(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.IsRelevant");

	AMutator_IsRelevant_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AlwaysKeep
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::AlwaysKeep(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AlwaysKeep");

	AMutator_AlwaysKeep_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AddMutator
// (Defined, Public)
// Parameters:
// class AMutator*                M                              (Parm)

void AMutator::AddMutator(class AMutator* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AddMutator");

	AMutator_AddMutator_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyPlayer
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AMutator::ModifyPlayer(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyPlayer");

	AMutator_ModifyPlayer_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyLogin
// (Defined, Public, HasOutParms)
// Parameters:
// struct FString                 Portal                         (Parm, OutParm, NeedCtorLink)
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)

void AMutator::ModifyLogin(struct FString* Portal, struct FString* Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyLogin");

	AMutator_ModifyLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Portal != nullptr)
		*Portal = params.Portal;
	if (Options != nullptr)
		*Options = params.Options;
}


// Function Engine.Mutator.Mutate
// (Defined, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)
// class APlayerController*       Sender                         (Parm)

void AMutator::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Mutate");

	AMutator_Mutate_Params params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.Destroyed
// (Defined, Event, Public)

void AMutator::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Destroyed");

	AMutator_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.MutatorIsAllowed
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::MutatorIsAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorIsAllowed");

	AMutator_MutatorIsAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.PreBeginPlay
// (Defined, Event, Public)

void AMutator::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreBeginPlay");

	AMutator_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.UpdateFromURL
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Const, Parm, OutParm, NeedCtorLink)
// class AGameInfo*               Game                           (Parm)

void USettings::UpdateFromURL(class AGameInfo* Game, struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateFromURL");

	USettings_UpdateFromURL_Params params;
	params.Game = Game;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.BuildURL
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::BuildURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.BuildURL");

	USettings_BuildURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendContextsToURL
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendContextsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendContextsToURL");

	USettings_AppendContextsToURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendPropertiesToURL
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendPropertiesToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendPropertiesToURL");

	USettings_AppendPropertiesToURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendDataBindingsToURL
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 URL                            (Parm, OutParm, NeedCtorLink)

void USettings::AppendDataBindingsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendDataBindingsToURL");

	USettings_AppendDataBindingsToURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.GetQoSAdvertisedStringSettings
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FLocalizedStringSetting> QoSSettings                    (Parm, OutParm, NeedCtorLink)

void USettings::GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedStringSettings");

	USettings_GetQoSAdvertisedStringSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSSettings != nullptr)
		*QoSSettings = params.QoSSettings;
}


// Function Engine.Settings.GetQoSAdvertisedProperties
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FSettingsProperty> QoSProps                       (Parm, OutParm, NeedCtorLink)

void USettings::GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedProperties");

	USettings_GetQoSAdvertisedProperties_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSProps != nullptr)
		*QoSProps = params.QoSProps;
}


// Function Engine.Settings.GetRangedPropertyValue
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetRangedPropertyValue(int PropertyId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetRangedPropertyValue");

	USettings_GetRangedPropertyValue_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.Settings.SetRangedPropertyValue
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// float                          NewValue                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetRangedPropertyValue(int PropertyId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetRangedPropertyValue");

	USettings_SetRangedPropertyValue_Params params;
	params.PropertyId = PropertyId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyRange
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// float                          OutMinValue                    (Parm, OutParm)
// float                          OutMaxValue                    (Parm, OutParm)
// float                          RangeIncrement                 (Parm, OutParm)
// unsigned char                  bFormatAsInt                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyRange");

	USettings_GetPropertyRange_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyMappingType
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// TEnumAsByte<EPropertyValueMappingType> OutType                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyMappingType(int PropertyId, TEnumAsByte<EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyMappingType");

	USettings_GetPropertyMappingType_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.Settings.HasStringSetting
// (Native, Public)
// Parameters:
// int                            SettingId                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::HasStringSetting(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasStringSetting");

	USettings_HasStringSetting_Params params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.HasProperty
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::HasProperty(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasProperty");

	USettings_HasProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.UpdateProperties
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FSettingsProperty> Props                          (Const, Parm, OutParm, NeedCtorLink)
// bool                           bShouldAddIfMissing            (OptionalParm, Parm)

void USettings::UpdateProperties(bool bShouldAddIfMissing, TArray<struct FSettingsProperty>* Props)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateProperties");

	USettings_UpdateProperties_Params params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Props != nullptr)
		*Props = params.Props;
}


// Function Engine.Settings.UpdateStringSettings
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FLocalizedStringSetting> Settings                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bShouldAddIfMissing            (OptionalParm, Parm)

void USettings::UpdateStringSettings(bool bShouldAddIfMissing, TArray<struct FLocalizedStringSetting>* Settings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateStringSettings");

	USettings_UpdateStringSettings_Params params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Settings != nullptr)
		*Settings = params.Settings;
}


// Function Engine.Settings.GetPropertyType
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// TEnumAsByte<ESettingsDataType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESettingsDataType> USettings::GetPropertyType(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyType");

	USettings_GetPropertyType_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringProperty
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringProperty(int PropertyId, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringProperty");

	USettings_GetStringProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringProperty
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 Value                          (Parm, NeedCtorLink)

void USettings::SetStringProperty(int PropertyId, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringProperty");

	USettings_SetStringProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetIntProperty
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// int                            Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetIntProperty(int PropertyId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetIntProperty");

	USettings_GetIntProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetIntProperty
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// int                            Value                          (Parm)

void USettings::SetIntProperty(int PropertyId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetIntProperty");

	USettings_SetIntProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetFloatProperty
// (Native, Public, HasOutParms)
// Parameters:
// int                            PropertyId                     (Parm)
// float                          Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetFloatProperty(int PropertyId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetFloatProperty");

	USettings_GetFloatProperty_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetFloatProperty
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// float                          Value                          (Parm)

void USettings::SetFloatProperty(int PropertyId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetFloatProperty");

	USettings_SetFloatProperty_Params params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.SetPropertyFromStringByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyFromStringByName");

	USettings_SetPropertyFromStringByName_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsStringByName
// (Native, Public)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyAsStringByName(const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsStringByName");

	USettings_GetPropertyAsStringByName_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsString
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyAsString(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsString");

	USettings_GetPropertyAsString_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyColumnHeader
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetPropertyColumnHeader(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyColumnHeader");

	USettings_GetPropertyColumnHeader_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyName
// (Native, Public)
// Parameters:
// int                            PropertyId                     (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetPropertyName(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyName");

	USettings_GetPropertyName_Params params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyId
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// int                            PropertyId                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetPropertyId(const struct FName& PropertyName, int* PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyId");

	USettings_GetPropertyId_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PropertyId != nullptr)
		*PropertyId = params.PropertyId;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueFromStringByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueFromStringByName");

	USettings_SetStringSettingValueFromStringByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueNameByName
// (Native, Public)
// Parameters:
// struct FName                   StringSettingName              (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingValueNameByName(const struct FName& StringSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNameByName");

	USettings_GetStringSettingValueNameByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueName
// (Native, Public)
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingValueName(int StringSettingId, int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueName");

	USettings_GetStringSettingValueName_Params params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.IsWildcardStringSetting
// (Native, Public)
// Parameters:
// int                            StringSettingId                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::IsWildcardStringSetting(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.IsWildcardStringSetting");

	USettings_IsWildcardStringSetting_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingColumnHeader
// (Native, Public)
// Parameters:
// int                            StringSettingId                (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::GetStringSettingColumnHeader(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingColumnHeader");

	USettings_GetStringSettingColumnHeader_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingName
// (Native, Public)
// Parameters:
// int                            StringSettingId                (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USettings::GetStringSettingName(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingName");

	USettings_GetStringSettingName_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingId
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            StringSettingId                (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingId");

	USettings_GetStringSettingId_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StringSettingId != nullptr)
		*StringSettingId = params.StringSettingId;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            ValueIndex                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueByName");

	USettings_GetStringSettingValueByName_Params params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueByName
// (Native, Public)
// Parameters:
// struct FName                   StringSettingName              (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bShouldAutoAdd                 (Parm)

void USettings::SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueByName");

	USettings_SetStringSettingValueByName_Params params;
	params.StringSettingName = StringSettingName;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetStringSettingValueNames
// (Native, Public, HasOutParms)
// Parameters:
// int                            StringSettingId                (Parm)
// TArray<struct FIdToStringMapping> Values                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNames");

	USettings_GetStringSettingValueNames_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValue
// (Native, Public, HasOutParms)
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USettings::GetStringSettingValue(int StringSettingId, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValue");

	USettings_GetStringSettingValue_Params params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValue
// (Native, Public)
// Parameters:
// int                            StringSettingId                (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bShouldAutoAdd                 (Parm)

void USettings::SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValue");

	USettings_SetStringSettingValue_Params params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetSettingsDataDateTime
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            OutInt1                        (Parm, OutParm)
// int                            OutInt2                        (Parm, OutParm)

void USettings::STATIC_GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataDateTime");

	USettings_GetSettingsDataDateTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutInt1 != nullptr)
		*OutInt1 = params.OutInt1;
	if (OutInt2 != nullptr)
		*OutInt2 = params.OutInt2;
}


// Function Engine.Settings.GetSettingsDataBlob
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// TArray<unsigned char>          OutBlob                        (Parm, OutParm, NeedCtorLink)

void USettings::STATIC_GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataBlob");

	USettings_GetSettingsDataBlob_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutBlob != nullptr)
		*OutBlob = params.OutBlob;
}


// Function Engine.Settings.GetSettingsDataInt
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USettings::STATIC_GetSettingsDataInt(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataInt");

	USettings_GetSettingsDataInt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.GetSettingsDataFloat
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USettings::STATIC_GetSettingsDataFloat(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataFloat");

	USettings_GetSettingsDataFloat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.GetSettingsDataString
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString USettings::STATIC_GetSettingsDataString(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataString");

	USettings_GetSettingsDataString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.EmptySettingsData
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)

void USettings::STATIC_EmptySettingsData(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.EmptySettingsData");

	USettings_EmptySettingsData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsData
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FSettingsData           Data2Copy                      (Parm, OutParm)

void USettings::STATIC_SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsData");

	USettings_SetSettingsData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (Data2Copy != nullptr)
		*Data2Copy = params.Data2Copy;
}


// Function Engine.Settings.SetSettingsDataBlob
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// TArray<unsigned char>          InBlob                         (Parm, OutParm, NeedCtorLink)

void USettings::STATIC_SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataBlob");

	USettings_SetSettingsDataBlob_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (InBlob != nullptr)
		*InBlob = params.InBlob;
}


// Function Engine.Settings.SetSettingsDataDateTime
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            InInt1                         (Parm)
// int                            InInt2                         (Parm)

void USettings::STATIC_SetSettingsDataDateTime(int InInt1, int InInt2, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataDateTime");

	USettings_SetSettingsDataDateTime_Params params;
	params.InInt1 = InInt1;
	params.InInt2 = InInt2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataInt
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// int                            InInt                          (Parm)

void USettings::STATIC_SetSettingsDataInt(int InInt, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataInt");

	USettings_SetSettingsDataInt_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataFloat
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// float                          InFloat                        (Parm)

void USettings::STATIC_SetSettingsDataFloat(float InFloat, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataFloat");

	USettings_SetSettingsDataFloat_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataString
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (Parm, OutParm)
// struct FString                 InString                       (Parm, NeedCtorLink)

void USettings::STATIC_SetSettingsDataString(const struct FString& InString, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataString");

	USettings_SetSettingsDataString_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.OnlineProfileSettings.IsProfileSettingEnabled
// (Defined, Event, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::IsProfileSettingEnabled(const struct FName& FieldName, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.IsProfileSettingEnabled");

	UOnlineProfileSettings_IsProfileSettingEnabled_Params params;
	params.FieldName = FieldName;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetRangedProfileSettingValue
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileId                      (Parm)
// float                          OutValue                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetRangedProfileSettingValue(int ProfileId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetRangedProfileSettingValue");

	UOnlineProfileSettings_GetRangedProfileSettingValue_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetRangedProfileSettingValue
// (Native, Public)
// Parameters:
// int                            ProfileId                      (Parm)
// float                          NewValue                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetRangedProfileSettingValue(int ProfileId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetRangedProfileSettingValue");

	UOnlineProfileSettings_SetRangedProfileSettingValue_Params params;
	params.ProfileId = ProfileId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingRange
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileId                      (Parm)
// float                          OutMinValue                    (Parm, OutParm)
// float                          OutMaxValue                    (Parm, OutParm)
// float                          RangeIncrement                 (Parm, OutParm)
// unsigned char                  bFormatAsInt                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingRange");

	UOnlineProfileSettings_GetProfileSettingRange_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingMappingType
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileId                      (Parm)
// TEnumAsByte<EPropertyValueMappingType> OutType                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingMappingType(int ProfileId, TEnumAsByte<EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingMappingType");

	UOnlineProfileSettings_GetProfileSettingMappingType_Params params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetDefaultVersionNumber
// (Native, Public)

void UOnlineProfileSettings::SetDefaultVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetDefaultVersionNumber");

	UOnlineProfileSettings_SetDefaultVersionNumber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.GetVersionNumber
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlineProfileSettings::GetVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetVersionNumber");

	UOnlineProfileSettings_GetVersionNumber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.AppendVersionToSettings
// (Native, Public)

void UOnlineProfileSettings::AppendVersionToSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.AppendVersionToSettings");

	UOnlineProfileSettings_AppendVersionToSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// (Native, Public)

void UOnlineProfileSettings::AppendVersionToReadIds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.AppendVersionToReadIds");

	UOnlineProfileSettings_AppendVersionToReadIds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.ScriptSetToDefaults
// (Event, Public)

void UOnlineProfileSettings::ScriptSetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.ScriptSetToDefaults");

	UOnlineProfileSettings_ScriptSetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.SetToDefaults
// (Native, Event, Public)

void UOnlineProfileSettings::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetToDefaults");

	UOnlineProfileSettings_SetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.SetProfileSettingValueFloat
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// float                          Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetProfileSettingValueFloat(int ProfileSettingId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetProfileSettingValueFloat");

	UOnlineProfileSettings_SetProfileSettingValueFloat_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetProfileSettingValueInt
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetProfileSettingValueInt(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetProfileSettingValueInt");

	UOnlineProfileSettings_SetProfileSettingValueInt_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetProfileSettingValueId
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetProfileSettingValueId(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetProfileSettingValueId");

	UOnlineProfileSettings_SetProfileSettingValueId_Params params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValueFloat
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// float                          Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValueFloat(int ProfileSettingId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValueFloat");

	UOnlineProfileSettings_GetProfileSettingValueFloat_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValueInt
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            Value                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValueInt(int ProfileSettingId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValueInt");

	UOnlineProfileSettings_GetProfileSettingValueInt_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValueId
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// int                            ValueId                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValueId(int ProfileSettingId, int* ValueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValueId");

	UOnlineProfileSettings_GetProfileSettingValueId_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetProfileSettingValue
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetProfileSettingValue");

	UOnlineProfileSettings_SetProfileSettingValue_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.SetProfileSettingValueByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetProfileSettingValueByName");

	UOnlineProfileSettings_SetProfileSettingValueByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValueByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValueByName");

	UOnlineProfileSettings_GetProfileSettingValueByName_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValues
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// TArray<struct FName>           Values                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValues");

	UOnlineProfileSettings_GetProfileSettingValues_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValueName
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineProfileSettings::GetProfileSettingValueName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValueName");

	UOnlineProfileSettings_GetProfileSettingValueName_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingValue
// (Native, Public, HasOutParms)
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingValue(int ProfileSettingId, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingValue");

	UOnlineProfileSettings_GetProfileSettingValue_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.IsProfileSettingIdMapped
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::IsProfileSettingIdMapped(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.IsProfileSettingIdMapped");

	UOnlineProfileSettings_IsProfileSettingIdMapped_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingColumnHeader
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineProfileSettings::GetProfileSettingColumnHeader(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingColumnHeader");

	UOnlineProfileSettings_GetProfileSettingColumnHeader_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingName
// (Native, Public)
// Parameters:
// int                            ProfileSettingId               (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineProfileSettings::GetProfileSettingName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingName");

	UOnlineProfileSettings_GetProfileSettingName_Params params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingId
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (Parm)
// int                            ProfileSettingId               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingId");

	UOnlineProfileSettings_GetProfileSettingId_Params params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProfileSettingId != nullptr)
		*ProfileSettingId = params.ProfileSettingId;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetStatKey
// (Defined, Event, Public)
// Parameters:
// int                            Id                             (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineStats::GetStatKey(int Id)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetStatKey");

	UOnlineStats_GetStatKey_Params params;
	params.Id = Id;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewName
// (Native, Public)
// Parameters:
// int                            ViewId                         (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineStats::GetViewName(int ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewName");

	UOnlineStats_GetViewName_Params params;
	params.ViewId = ViewId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewId
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ViewName                       (Parm)
// int                            ViewId                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStats::GetViewId(const struct FName& ViewName, int* ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewId");

	UOnlineStats_GetViewId_Params params;
	params.ViewName = ViewName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewId != nullptr)
		*ViewId = params.ViewId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.OnStatsReadComplete
// (Public, Delegate)

void UOnlineStatsRead::OnStatsReadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.OnStatsReadComplete");

	UOnlineStatsRead_OnStatsReadComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementIntStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// int                            DecBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::DecrementIntStat(int StatId, int DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementIntStat");

	UOnlineStatsWrite_DecrementIntStat_Params params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementFloatStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// float                          DecBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::DecrementFloatStat(int StatId, float DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementFloatStat");

	UOnlineStatsWrite_DecrementFloatStat_Params params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementIntStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// int                            IncBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::IncrementIntStat(int StatId, int IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementIntStat");

	UOnlineStatsWrite_IncrementIntStat_Params params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementFloatStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// float                          IncBy                          (OptionalParm, Parm)

void UOnlineStatsWrite::IncrementFloatStat(int StatId, float IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementFloatStat");

	UOnlineStatsWrite_IncrementFloatStat_Params params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetIntStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// int                            Value                          (Parm)

void UOnlineStatsWrite::SetIntStat(int StatId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetIntStat");

	UOnlineStatsWrite_SetIntStat_Params params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetFloatStat
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// float                          Value                          (Parm)

void UOnlineStatsWrite::SetFloatStat(int StatId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetFloatStat");

	UOnlineStatsWrite_SetFloatStat_Params params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.GetStatName
// (Native, Public)
// Parameters:
// int                            StatId                         (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UOnlineStatsWrite::GetStatName(int StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatName");

	UOnlineStatsWrite_GetStatName_Params params;
	params.StatId = StatId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.GetStatId
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   StatName                       (Parm)
// int                            StatId                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsWrite::GetStatId(const struct FName& StatName, int* StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatId");

	UOnlineStatsWrite_GetStatId_Params params;
	params.StatName = StatName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatId != nullptr)
		*StatId = params.StatId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// (Public, Delegate)

void UOnlineStatsWrite::OnStatsWriteComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.OnStatsWriteComplete");

	UOnlineStatsWrite_OnStatsWriteComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetWalkSpeed
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetWalkSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWalkSpeed");

	APawn_GetWalkSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetRunSpeed
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetRunSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetRunSpeed");

	APawn_GetRunSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ClearPathStep
// (Native, Public)

void APawn::ClearPathStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearPathStep");

	APawn_ClearPathStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawPathStep
// (Native, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void APawn::DrawPathStep(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawPathStep");

	APawn_DrawPathStep_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathChild
// (Native, Public)
// Parameters:
// int                            Cnt                            (Parm)
// class UCanvas*                 C                              (Parm)

void APawn::IncrementPathChild(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathChild");

	APawn_IncrementPathChild_Params params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathStep
// (Native, Public)
// Parameters:
// int                            Cnt                            (Parm)
// class UCanvas*                 C                              (Parm)

void APawn::IncrementPathStep(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathStep");

	APawn_IncrementPathStep_Params params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddGoalEvaluator
// (Native, Public)
// Parameters:
// class UPathGoalEvaluator*      Evaluator                      (Parm)

void APawn::AddGoalEvaluator(class UPathGoalEvaluator* Evaluator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddGoalEvaluator");

	APawn_AddGoalEvaluator_Params params;
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddPathConstraint
// (Native, Public)
// Parameters:
// class UPathConstraint*         Constraint                     (Parm)

void APawn::AddPathConstraint(class UPathConstraint* Constraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddPathConstraint");

	APawn_AddPathConstraint_Params params;
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearConstraints
// (Native, Public)

void APawn::ClearConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearConstraints");

	APawn_ClearConstraints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SoakPause
// (Defined, Event, Public)

void APawn::SoakPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SoakPause");

	APawn_SoakPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BecomeViewTarget
// (Defined, Simulated, Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void APawn::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BecomeViewTarget");

	APawn_BecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AdjustCameraScale
// (Simulated, Public)
// Parameters:
// bool                           bMoveCameraIn                  (Parm)

void APawn::AdjustCameraScale(bool bMoveCameraIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustCameraScale");

	APawn_AdjustCameraScale_Params params;
	params.bMoveCameraIn = bMoveCameraIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MessagePlayer
// (Final, Event, Public)
// Parameters:
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)

void APawn::MessagePlayer(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MessagePlayer");

	APawn_MessagePlayer_Params params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EffectIsRelevant
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 SpawnLocation                  (Parm)
// bool                           bForceDedicated                (Parm)
// float                          CullDistance                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float CullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EffectIsRelevant");

	APawn_EffectIsRelevant_Params params;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.CullDistance = CullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void APawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnTeleport");

	APawn_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnSetMaterial
// (Defined, Event, Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void APawn::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetMaterial");

	APawn_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InCombat
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InCombat");

	APawn_InCombat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PoweredUp
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PoweredUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PoweredUp");

	APawn_PoweredUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetDamageScaling
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetDamageScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDamageScaling");

	APawn_GetDamageScaling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoKismetAttachment
// (Defined, Public)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void APawn::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoKismetAttachment");

	APawn_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnedByKismet
// (Defined, Event, Public)

void APawn::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnedByKismet");

	APawn_SpawnedByKismet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsStationary
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsStationary");

	APawn_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionExtent
// (Final, Defined, Simulated, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetCollisionExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionExtent");

	APawn_GetCollisionExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionHeight
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetCollisionHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionHeight");

	APawn_GetCollisionHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetCollisionRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionRadius");

	APawn_GetCollisionRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatFly
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatFly");

	APawn_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatGhost
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatGhost");

	APawn_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatWalk
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatWalk");

	APawn_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayWeaponSwitch
// (Simulated, Public)
// Parameters:
// class AWeapon*                 OldWeapon                      (Parm)
// class AWeapon*                 NewWeapon                      (Parm)

void APawn::PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWeaponSwitch");

	APawn_PlayWeaponSwitch_Params params;
	params.OldWeapon = OldWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetActiveWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 NewWeapon                      (Parm)

void APawn::SetActiveWeapon(class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetActiveWeapon");

	APawn_SetActiveWeapon_Params params;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TossInventory
// (Defined, Public, HasDefaults)
// Parameters:
// class AInventory*              Inv                            (Parm)
// struct FVector                 ForceVelocity                  (OptionalParm, Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)

void APawn::TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TossInventory");

	APawn_TossInventory_Params params;
	params.Inv = Inv;
	params.ForceVelocity = ForceVelocity;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ThrowActiveWeapon
// (Defined, Public)
// Parameters:
// class UClass*                  DamageType                     (OptionalParm, Parm)

void APawn::ThrowActiveWeapon(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowActiveWeapon");

	APawn_ThrowActiveWeapon_Params params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawHUD
// (Defined, Simulated, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void APawn::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawHUD");

	APawn_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FindInventoryType
// (Final, Defined, Simulated, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bAllowSubclass                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindInventoryType");

	APawn_FindInventoryType_Params params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CreateInventory
// (Final, Defined, Event, Public)
// Parameters:
// class UClass*                  NewInvClass                    (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::CreateInventory(class UClass* NewInvClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateInventory");

	APawn_CreateInventory_Params params;
	params.NewInvClass = NewInvClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddDefaultInventory
// (Public)

void APawn::AddDefaultInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDefaultInventory");

	APawn_AddDefaultInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopDriving
// (Defined, Simulated, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StopDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopDriving");

	APawn_StopDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartDriving
// (Defined, Simulated, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StartDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartDriving");

	APawn_StartDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanThrowWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanThrowWeapon");

	APawn_CanThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Suicide
// (Defined, Public)

void APawn::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Suicide");

	APawn_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetVehicleBase
// (Native, Public)
// Parameters:
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* APawn::GetVehicleBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetVehicleBase");

	APawn_GetVehicleBase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayLanded
// (Public)
// Parameters:
// float                          ImpactVel                      (Parm)

void APawn::PlayLanded(float ImpactVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLanded");

	APawn_PlayLanded_Params params;
	params.ImpactVel = ImpactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CannotJumpNow
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CannotJumpNow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CannotJumpNow");

	APawn_CannotJumpNow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayFootStepSound
// (Event, Public)
// Parameters:
// int                            FootDown                       (Parm)

void APawn::PlayFootStepSound(int FootDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFootStepSound");

	APawn_PlayFootStepSound_Params params;
	params.FootDown = FootDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TornOff
// (Defined, Simulated, Event, Public)

void APawn::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TornOff");

	APawn_TornOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDying
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)

void APawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDying");

	APawn_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TurnOff
// (Defined, Simulated, Public)

void APawn::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TurnOff");

	APawn_TurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayHit
// (Defined, Public)
// Parameters:
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)
// struct FTraceHitInfo           HitInfo                        (Parm)

void APawn::PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayHit");

	APawn_PlayHit_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDyingSound
// (Public)

void APawn::PlayDyingSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDyingSound");

	APawn_PlayDyingSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DoJump
// (Defined, Public)
// Parameters:
// bool                           bUpdating                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::DoJump(bool bUpdating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoJump");

	APawn_DoJump_Params params;
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckWaterJump
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 WallNormal                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheckWaterJump(struct FVector* WallNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckWaterJump");

	APawn_CheckWaterJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WallNormal != nullptr)
		*WallNormal = params.WallNormal;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDrowningDamage
// (Public)

void APawn::TakeDrowningDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDrowningDamage");

	APawn_TakeDrowningDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BreathTimer
// (Defined, Event, Public)

void APawn::BreathTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BreathTimer");

	APawn_BreathTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInPain
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInPain");

	APawn_IsInPain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TouchingWaterVolume
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TouchingWaterVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TouchingWaterVolume");

	APawn_TouchingWaterVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HeadVolumeChange
// (Defined, Event, Public)
// Parameters:
// class APhysicsVolume*          newHeadVolume                  (Parm)

void APawn::HeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HeadVolumeChange");

	APawn_HeadVolumeChange_Params params;
	params.newHeadVolume = newHeadVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Landed
// (Defined, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  FloorActor                     (Parm)

void APawn::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Landed");

	APawn_Landed_Params params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void APawn::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HitWall");

	APawn_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Falling
// (Event, Public)

void APawn::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Falling");

	APawn_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Died
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Died");

	APawn_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsSameTeam
// (Defined, Simulated, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsSameTeam(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsSameTeam");

	APawn_IsSameTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeam
// (Defined, Simulated, Public)
// Parameters:
// class ATeamInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class ATeamInfo* APawn::GetTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeam");

	APawn_GetTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APawn::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeamNum");

	APawn_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDamage
// (Defined, Event, Public)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void APawn::TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamage");

	APawn_TakeDamage_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetKillInstigator
// (Defined, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* APawn::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetKillInstigator");

	APawn_SetKillInstigator_Params params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NotifyTakeHit
// (Defined, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void APawn::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTakeHit");

	APawn_NotifyTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeRadiusDamageOnBones
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)
// TArray<struct FName>           Bones                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeRadiusDamageOnBones");

	APawn_TakeRadiusDamageOnBones_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PruneDamagedBoneList
// (Public, HasOutParms)
// Parameters:
// TArray<struct FName>           Bones                          (Parm, OutParm, NeedCtorLink)

void APawn::PruneDamagedBoneList(TArray<struct FName>* Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PruneDamagedBoneList");

	APawn_PruneDamagedBoneList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Bones != nullptr)
		*Bones = params.Bones;
}


// Function Engine.Pawn.HealDamage
// (Defined, Public)
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HealDamage");

	APawn_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustDamage
// (Public, HasOutParms)
// Parameters:
// int                            inDamage                       (Parm, OutParm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void APawn::AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDamage");

	APawn_AdjustDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (inDamage != nullptr)
		*inDamage = params.inDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Pawn.SetMovementPhysics
// (Defined, Public)

void APawn::SetMovementPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementPhysics");

	APawn_SetMovementPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Gasp
// (Public)

void APawn::Gasp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Gasp");

	APawn_Gasp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnGiveInventory
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_GiveInventory*   inAction                       (Parm)

void APawn::OnGiveInventory(class USeqAct_GiveInventory* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnGiveInventory");

	APawn_OnGiveInventory_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnAssignController
// (Defined, Public)
// Parameters:
// class USeqAct_AssignController* inAction                       (Parm)

void APawn::OnAssignController(class USeqAct_AssignController* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnAssignController");

	APawn_OnAssignController_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnDefaultController
// (Defined, Public)

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	APawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostBeginPlay
// (Defined, Event, Public)

void APawn::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostBeginPlay");

	APawn_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PreBeginPlay
// (Defined, Simulated, Event, Public)

void APawn::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PreBeginPlay");

	APawn_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 W                              (Parm)

void APawn::SetWeapon(class AWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWeapon");

	APawn_SetWeapon_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Destroyed
// (Defined, Simulated, Event, Public)

void APawn::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Destroyed");

	APawn_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DetachFromController
// (Defined, Public)
// Parameters:
// bool                           bDestroyController             (OptionalParm, Parm)

void APawn::DetachFromController(bool bDestroyController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromController");

	APawn_DetachFromController_Params params;
	params.bDestroyController = bDestroyController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CrushedBy
// (Defined, Public)
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void APawn::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CrushedBy");

	APawn_CrushedBy_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanBeBaseForPawn
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   aPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanBeBaseForPawn(class APawn* aPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanBeBaseForPawn");

	APawn_CanBeBaseForPawn_Params params;
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BaseChange
// (Defined, Singular, Event, Public)

void APawn::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BaseChange");

	APawn_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StuckOnPawn
// (Event, Public)
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void APawn::StuckOnPawn(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StuckOnPawn");

	APawn_StuckOnPawn_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOffPawn
// (Defined, Public)

void APawn::JumpOffPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOffPawn");

	APawn_JumpOffPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.gibbedBy
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::gibbedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.gibbedBy");

	APawn_gibbedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachedBy");

	APawn_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachingOn
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachingOn");

	APawn_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceRotation");

	APawn_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetRotation
// (Defined, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetRotation");

	APawn_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetLocation
// (Defined, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void APawn::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetLocation");

	APawn_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientRestart
// (Defined, Simulated, Public)

void APawn::ClientRestart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientRestart");

	APawn_ClientRestart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Restart
// (Public)

void APawn::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Restart");

	APawn_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeFallingDamage
// (Defined, Public)

void APawn::TakeFallingDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeFallingDamage");

	APawn_TakeFallingDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.KilledBy
// (Defined, Public)
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void APawn::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.KilledBy");

	APawn_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddVelocity
// (Defined, Public)
// Parameters:
// struct FVector                 NewVelocity                    (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void APawn::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddVelocity");

	APawn_AddVelocity_Params params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RestartPlayer
// (Public)

void APawn::RestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RestartPlayer");

	APawn_RestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartCrouch
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::StartCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartCrouch");

	APawn_StartCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndCrouch
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::EndCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndCrouch");

	APawn_EndCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShouldCrouch
// (Defined, Public)
// Parameters:
// bool                           bCrouch                        (Parm)

void APawn::ShouldCrouch(bool bCrouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldCrouch");

	APawn_ShouldCrouch_Params params;
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UnCrouch
// (Defined, Simulated, Public)

void APawn::UnCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnCrouch");

	APawn_UnCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OutsideWorldBounds
// (Defined, Singular, Simulated, Event, Public)

void APawn::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OutsideWorldBounds");

	APawn_OutsideWorldBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FellOutOfWorld
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  dmgType                        (Parm)

void APawn::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FellOutOfWorld");

	APawn_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ModifyVelocity
// (Simulated, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 OldVelocity                    (Parm)

void APawn::ModifyVelocity(float DeltaTime, const struct FVector& OldVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ModifyVelocity");

	APawn_ModifyVelocity_Params params;
	params.DeltaTime = DeltaTime;
	params.OldVelocity = OldVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOutOfWater
// (Defined, Public)
// Parameters:
// struct FVector                 jumpDir                        (Parm)

void APawn::JumpOutOfWater(const struct FVector& jumpDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOutOfWater");

	APawn_JumpOutOfWater_Params params;
	params.jumpDir = jumpDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FinishedInterpolation
// (Defined, Public)

void APawn::FinishedInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishedInterpolation");

	APawn_FinishedInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientMessage
// (Defined, Event, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APawn::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientMessage");

	APawn_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceiveLocalizedMessage
// (Defined, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APawn::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveLocalizedMessage");

	APawn_ReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandlePickup
// (Defined, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void APawn::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandlePickup");

	APawn_HandlePickup_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AdjustedStrength
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::AdjustedStrength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustedStrength");

	APawn_AdjustedStrength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.LineOfSightTo
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::LineOfSightTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LineOfSightTo");

	APawn_LineOfSightTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetMoveTarget
// (Defined, Public)
// Parameters:
// class AActor*                  NewTarget                      (Parm)

void APawn::SetMoveTarget(class AActor* NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMoveTarget");

	APawn_SetMoveTarget_Params params;
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetMoveTarget
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APawn::GetMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMoveTarget");

	APawn_GetMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NearMoveTarget
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::NearMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NearMoveTarget");

	APawn_NearMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AffectedByHitEffects
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::AffectedByHitEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AffectedByHitEffects");

	APawn_AffectedByHitEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InGodMode
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InGodMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InGodMode");

	APawn_InGodMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PawnCalcCamera
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PawnCalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PawnCalcCamera");

	APawn_PawnCalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetViewRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewRotation");

	APawn_SetViewRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetAdjustedAimFor
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 W                              (Parm)
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAdjustedAimFor");

	APawn_GetAdjustedAimFor_Params params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InFreeCam
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InFreeCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InFreeCam");

	APawn_InFreeCam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// (Defined, Singular, Simulated, Public, HasDefaults)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	APawn_GetBaseAimRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetWeaponStartTraceLocation
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AWeapon*                 CurrentWeapon                  (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponStartTraceLocation");

	APawn_GetWeaponStartTraceLocation_Params params;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPawnViewLocation
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetPawnViewLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPawnViewLocation");

	APawn_GetPawnViewLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetViewRotation
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotation");

	APawn_GetViewRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetActorEyesViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void APawn::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorEyesViewPoint");

	APawn_GetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Pawn.ProcessViewRotation
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FRotator                out_ViewRotation               (Parm, OutParm)
// struct FRotator                out_DeltaRot                   (Parm, OutParm)

void APawn::ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ProcessViewRotation");

	APawn_ProcessViewRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;
}


// Function Engine.Pawn.IsFirstPerson
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFirstPerson");

	APawn_IsFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WasPlayerPawn
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::WasPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WasPlayerPawn");

	APawn_WasPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsPlayerPawn
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerPawn");

	APawn_IsPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	APawn_IsLocallyControlled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsHumanControlled
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsHumanControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHumanControlled");

	APawn_IsHumanControlled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void APawn::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisplayDebug");

	APawn_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Pawn.ClimbLadder
// (Defined, Public)
// Parameters:
// class ALadderVolume*           L                              (Parm)

void APawn::ClimbLadder(class ALadderVolume* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClimbLadder");

	APawn_ClimbLadder_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndClimbLadder
// (Defined, Public)
// Parameters:
// class ALadderVolume*           OldLadder                      (Parm)

void APawn::EndClimbLadder(class ALadderVolume* OldLadder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndClimbLadder");

	APawn_EndClimbLadder_Params params;
	params.OldLadder = OldLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSplash");

	APawn_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetIsWalkingFlagSet
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::GetIsWalkingFlagSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetIsWalkingFlagSet");

	APawn_GetIsWalkingFlagSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetWalking
// (Defined, Event, Public)
// Parameters:
// bool                           bNewIsWalking                  (Parm)

void APawn::SetWalking(bool bNewIsWalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWalking");

	APawn_SetWalking_Params params;
	params.bNewIsWalking = bNewIsWalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RangedAttackTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RangedAttackTime");

	APawn_RangedAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RecommendLongRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RecommendLongRangedAttack");

	APawn_RecommendLongRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanGrabLadder
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanGrabLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanGrabLadder");

	APawn_CanGrabLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DropToGround
// (Defined, Public)

void APawn::DropToGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropToGround");

	APawn_DropToGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDefaultCameraMode
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName APawn::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDefaultCameraMode");

	APawn_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UnPossessed
// (Defined, Public)

void APawn::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnPossessed");

	APawn_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateControllerOnPossess
// (Defined, Public)
// Parameters:
// bool                           bVehicleTransition             (Parm)

void APawn::UpdateControllerOnPossess(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateControllerOnPossess");

	APawn_UpdateControllerOnPossess_Params params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PossessedBy
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           bVehicleTransition             (Parm)

void APawn::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PossessedBy");

	APawn_PossessedBy_Params params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.NotifyTeamChanged
// (Simulated, Public)

void APawn::NotifyTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTeamChanged");

	APawn_NotifyTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTeleportEffect
// (Defined, Public)
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void APawn::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTeleportEffect");

	APawn_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetHumanReadableName");

	APawn_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NeedToTurn
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 targ                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::NeedToTurn(const struct FVector& targ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NeedToTurn");

	APawn_NeedToTurn_Params params;
	params.targ = targ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFiring");

	APawn_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HasRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasRangedAttack");

	APawn_HasRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FireOnRelease
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FireOnRelease");

	APawn_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TooCloseToAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TooCloseToAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TooCloseToAttack");

	APawn_TooCloseToAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanAttack");

	APawn_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ChooseFireMode
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APawn::ChooseFireMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChooseFireMode");

	APawn_ChooseFireMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BotFire
// (Defined, Public)
// Parameters:
// bool                           bFinished                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::BotFire(bool bFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BotFire");

	APawn_BotFire_Params params;
	params.bFinished = bFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WeaponStoppedFiring
// (Defined, Simulated, Public)
// Parameters:
// bool                           bViaReplication                (Parm)

void APawn::WeaponStoppedFiring(bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponStoppedFiring");

	APawn_WeaponStoppedFiring_Params params;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.WeaponFired
// (Defined, Simulated, Public)
// Parameters:
// bool                           bViaReplication                (Parm)
// struct FVector                 HitLocation                    (OptionalParm, Parm)

void APawn::WeaponFired(bool bViaReplication, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponFired");

	APawn_WeaponFired_Params params;
	params.bViaReplication = bViaReplication;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashLocationUpdated
// (Defined, Simulated, Public)
// Parameters:
// bool                           bViaReplication                (Parm)

void APawn::FlashLocationUpdated(bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashLocationUpdated");

	APawn_FlashLocationUpdated_Params params;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashCountUpdated
// (Defined, Simulated, Public)
// Parameters:
// bool                           bViaReplication                (Parm)

void APawn::FlashCountUpdated(bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashCountUpdated");

	APawn_FlashCountUpdated_Params params;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashLocation
// (Defined, Public)
// Parameters:
// class AWeapon*                 Who                            (Parm)

void APawn::ClearFlashLocation(class AWeapon* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashLocation");

	APawn_ClearFlashLocation_Params params;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFlashLocation
// (Defined, Public)
// Parameters:
// class AWeapon*                 Who                            (Parm)
// unsigned char                  FireModeNum                    (Parm)
// struct FVector                 NewLoc                         (Parm)

void APawn::SetFlashLocation(class AWeapon* Who, unsigned char FireModeNum, const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFlashLocation");

	APawn_SetFlashLocation_Params params;
	params.Who = Who;
	params.FireModeNum = FireModeNum;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashCount
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 Who                            (Parm)

void APawn::ClearFlashCount(class AWeapon* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashCount");

	APawn_ClearFlashCount_Params params;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementFlashCount
// (Defined, Simulated, Public)
// Parameters:
// class AWeapon*                 Who                            (Parm)
// unsigned char                  FireModeNum                    (Parm)

void APawn::IncrementFlashCount(class AWeapon* Who, unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementFlashCount");

	APawn_IncrementFlashCount_Params params;
	params.Who = Who;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FiringModeUpdated
// (Defined, Simulated, Public)
// Parameters:
// bool                           bViaReplication                (Parm)

void APawn::FiringModeUpdated(bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FiringModeUpdated");

	APawn_FiringModeUpdated_Params params;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFiringMode
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FiringModeNum                  (Parm)

void APawn::SetFiringMode(unsigned char FiringModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFiringMode");

	APawn_SetFiringMode_Params params;
	params.FiringModeNum = FiringModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void APawn::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFire");

	APawn_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void APawn::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartFire");

	APawn_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CreateHemiTexture
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UTextureRenderTarget2D* APawn::CreateHemiTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateHemiTexture");

	APawn_CreateHemiTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFiring");

	APawn_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Reset
// (Defined, Public)

void APawn::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Reset");

	APawn_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayerChangedTeam
// (Defined, Public)

void APawn::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayerChangedTeam");

	APawn_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetBaseEyeheight
// (Defined, Simulated, Public)

void APawn::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetBaseEyeheight");

	APawn_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpecialMoveTo
// (Public)
// Parameters:
// class ANavigationPoint*        Start                          (Parm)
// class ANavigationPoint*        End                            (Parm)
// class AActor*                  Next                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveTo");

	APawn_SpecialMoveTo_Params params;
	params.Start = Start;
	params.End = End;
	params.Next = Next;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TermRagdoll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TermRagdoll");

	APawn_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InitRagdoll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InitRagdoll");

	APawn_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsValidEnemy
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsValidEnemy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidEnemy");

	APawn_IsValidEnemy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpecialCostForPath
// (Defined, Public)
// Parameters:
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::SpecialCostForPath(class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialCostForPath");

	APawn_SpecialCostForPath_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBoundingCylinder
// (Native, Public, HasOutParms)
// Parameters:
// float                          CollisionRadius                (Parm, OutParm)
// float                          CollisionHeight                (Parm, OutParm)

void APawn::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBoundingCylinder");

	APawn_GetBoundingCylinder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Pawn.SetPushesRigidBodies
// (Native, Public)
// Parameters:
// bool                           NewPush                        (Parm)

void APawn::SetPushesRigidBodies(bool NewPush)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetPushesRigidBodies");

	APawn_SetPushesRigidBodies_Params params;
	params.NewPush = NewPush;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForceCrouch
// (Native, Public)

void APawn::ForceCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceCrouch");

	APawn_ForceCrouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReachedPoint
// (Native, Public)
// Parameters:
// struct FVector                 Point                          (Parm)
// class AActor*                  NewAnchor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedPoint(const struct FVector& Point, class AActor* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedPoint");

	APawn_ReachedPoint_Params params;
	params.Point = Point;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReachedDestination
// (Native, Public)
// Parameters:
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedDestination(class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDestination");

	APawn_ReachedDestination_Params params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBestAnchor
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  TestActor                      (Parm)
// struct FVector                 TestLocation                   (Parm)
// bool                           bStartPoint                    (Parm)
// bool                           bOnlyCheckVisible              (Parm)
// float                          out_Dist                       (Parm, OutParm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* APawn::GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBestAnchor");

	APawn_GetBestAnchor_Params params;
	params.TestActor = TestActor;
	params.TestLocation = TestLocation;
	params.bStartPoint = bStartPoint;
	params.bOnlyCheckVisible = bOnlyCheckVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Dist != nullptr)
		*out_Dist = params.out_Dist;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetAnchor
// (Native, Public)
// Parameters:
// class ANavigationPoint*        NewAnchor                      (Parm)

void APawn::SetAnchor(class ANavigationPoint* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnchor");

	APawn_SetAnchor_Params params;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetRemoteViewPitch
// (Final, Native, Public)
// Parameters:
// int                            NewRemoteViewPitch             (Parm)

void APawn::SetRemoteViewPitch(int NewRemoteViewPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRemoteViewPitch");

	APawn_SetRemoteViewPitch_Params params;
	params.NewRemoteViewPitch = NewRemoteViewPitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInvisible
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsInvisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInvisible");

	APawn_IsInvisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsValidEnemyTargetFor
// (Native, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Const, Parm)
// bool                           bNoPRIisEnemy                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidEnemyTargetFor");

	APawn_IsValidEnemyTargetFor_Params params;
	params.PRI = PRI;
	params.bNoPRIisEnemy = bNoPRIisEnemy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsValidTargetFor
// (Native, Public)
// Parameters:
// class AController*             C                              (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsValidTargetFor(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidTargetFor");

	APawn_IsValidTargetFor_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SuggestJumpVelocity
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 JumpVelocity                   (Parm, OutParm)
// struct FVector                 Destination                    (Parm)
// struct FVector                 Start                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, struct FVector* JumpVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SuggestJumpVelocity");

	APawn_SuggestJumpVelocity_Params params;
	params.Destination = Destination;
	params.Start = Start;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (JumpVelocity != nullptr)
		*JumpVelocity = params.JumpVelocity;

	return params.ReturnValue;
}


// Function Engine.Pawn.ValidAnchor
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ValidAnchor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ValidAnchor");

	APawn_ValidAnchor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void APawn::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReplicatedEvent");

	APawn_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ShouldRespawn
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::ShouldRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ShouldRespawn");

	APickupFactory_ShouldRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Destroyed
// (Defined, Event, Public)

void APickupFactory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Destroyed");

	APickupFactory_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupVisible
// (Defined, Simulated, Public)

void APickupFactory::SetPickupVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupVisible");

	APickupFactory_SetPickupVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupHidden
// (Defined, Simulated, Public)

void APickupFactory::SetPickupHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupHidden");

	APickupFactory_SetPickupHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.RespawnEffect
// (Public)

void APickupFactory::RespawnEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RespawnEffect");

	APickupFactory_RespawnEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GetRespawnTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickupFactory::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GetRespawnTime");

	APickupFactory_GetRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.RecheckValidTouch
// (Public)

void APickupFactory::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RecheckValidTouch");

	APickupFactory_RecheckValidTouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PickedUpBy
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APickupFactory::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PickedUpBy");

	APickupFactory_PickedUpBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GiveTo
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APickupFactory::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GiveTo");

	APickupFactory_GiveTo_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReadyToPickup
// (Defined, Public)
// Parameters:
// float                          MaxWait                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::ReadyToPickup(float MaxWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReadyToPickup");

	APickupFactory_ReadyToPickup_Params params;
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.SpawnCopyFor
// (Defined, Public)
// Parameters:
// class APawn*                   Recipient                      (Parm)

void APickupFactory::SpawnCopyFor(class APawn* Recipient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SpawnCopyFor");

	APickupFactory_SpawnCopyFor_Params params;
	params.Recipient = Recipient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.DetourWeight
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickupFactory::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DetourWeight");

	APickupFactory_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.StartSleeping
// (Defined, Public)

void APickupFactory::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.StartSleeping");

	APickupFactory_StartSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetRespawn
// (Defined, Public)

void APickupFactory::SetRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetRespawn");

	APickupFactory_SetRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.CheckForErrors
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickupFactory::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.CheckForErrors");

	APickupFactory_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Reset
// (Defined, Public)

void APickupFactory::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Reset");

	APickupFactory_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.StaticPrecache
// (Static, Public)
// Parameters:
// class AWorldInfo*              W                              (Parm)

void APickupFactory::STATIC_StaticPrecache(class AWorldInfo* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.StaticPrecache");

	APickupFactory_StaticPrecache_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupMesh
// (Defined, Simulated, Public)

void APickupFactory::SetPickupMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupMesh");

	APickupFactory_SetPickupMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ShutDown
// (Defined, Simulated, Public)

void APickupFactory::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ShutDown");

	APickupFactory_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetInitialState
// (Defined, Simulated, Event, Public)

void APickupFactory::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetInitialState");

	APickupFactory_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.InitializePickup
// (Defined, Simulated, Public)

void APickupFactory::InitializePickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.InitializePickup");

	APickupFactory_InitializePickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PreBeginPlay
// (Defined, Simulated, Event, Public)

void APickupFactory::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PreBeginPlay");

	APickupFactory_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void APickupFactory::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReplicatedEvent");

	APickupFactory_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerAlias
// (Defined, Public)
// Parameters:
// struct FString                 NewAlias                       (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetPlayerAlias(const struct FString& NewAlias)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerAlias");

	APlayerReplicationInfo_SetPlayerAlias_Params params;
	params.NewAlias = NewAlias;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IsInvalidName
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::IsInvalidName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsInvalidName");

	APlayerReplicationInfo_IsInvalidName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APlayerReplicationInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetTeamNum");

	APlayerReplicationInfo_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::IsLocalPlayerPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI");

	APlayerReplicationInfo_IsLocalPlayerPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider
// (Defined, Simulated, Public)

void APlayerReplicationInfo::BindPlayerOwnerDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider");

	APlayerReplicationInfo_BindPlayerOwnerDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  NewPRI                         (Parm)

void APlayerReplicationInfo::SeamlessTravelTo(class APlayerReplicationInfo* NewPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SeamlessTravelTo");

	APlayerReplicationInfo_SeamlessTravelTo_Params params;
	params.NewPRI = NewPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.CopyProperties
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void APlayerReplicationInfo::CopyProperties(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.CopyProperties");

	APlayerReplicationInfo_CopyProperties_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.OverrideWith
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void APlayerReplicationInfo::OverrideWith(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.OverrideWith");

	APlayerReplicationInfo_OverrideWith_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Duplicate
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Duplicate");

	APlayerReplicationInfo_Duplicate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerReplicationInfo::SetWaitingPlayer(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetWaitingPlayer");

	APlayerReplicationInfo_SetWaitingPlayer_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerName
// (Defined, Event, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetPlayerName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerName");

	APlayerReplicationInfo_SetPlayerName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Timer
// (Defined, Event, Public)

void APlayerReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Timer");

	APlayerReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void APlayerReplicationInfo::DisplayDebug(class AHUD* HUD, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.DisplayDebug");

	APlayerReplicationInfo_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.PlayerReplicationInfo.UpdatePlayerLocation
// (Defined, Public)

void APlayerReplicationInfo::UpdatePlayerLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePlayerLocation");

	APlayerReplicationInfo_UpdatePlayerLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.GetLocationName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetLocationName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetLocationName");

	APlayerReplicationInfo_GetLocationName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetHumanReadableName");

	APlayerReplicationInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.Reset
// (Defined, Public)

void APlayerReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Reset");

	APlayerReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Destroyed
// (Defined, Simulated, Event, Public, HasDefaults)

void APlayerReplicationInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Destroyed");

	APlayerReplicationInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage");

	APlayerReplicationInfo_ShouldBroadCastWelcomeMessage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.UpdatePing
// (Final, Native, Public)
// Parameters:
// float                          TimeStamp                      (Parm)

void APlayerReplicationInfo::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePing");

	APlayerReplicationInfo_UpdatePing_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void APlayerReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ReplicatedEvent");

	APlayerReplicationInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ClientInitialize
// (Defined, Simulated, Public)
// Parameters:
// class AController*             C                              (Parm)

void APlayerReplicationInfo::ClientInitialize(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientInitialize");

	APlayerReplicationInfo_ClientInitialize_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.PostBeginPlay
// (Defined, Simulated, Event, Public)

void APlayerReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostBeginPlay");

	APlayerReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.GetPlayerAlias
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetPlayerAlias()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetPlayerAlias");

	APlayerReplicationInfo_GetPlayerAlias_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual
// (Final, Native, Public)
// Parameters:
// class APlayerReplicationInfo*  OtherPRI                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::AreUniqueNetIdsEqual(class APlayerReplicationInfo* OtherPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual");

	APlayerReplicationInfo_AreUniqueNetIdsEqual_Params params;
	params.OtherPRI = OtherPRI;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerStart.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void APlayerStart::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.OnToggle");

	APlayerStart_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetTranslation
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewTranslation                 (Parm)

void UPointLightComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetTranslation");

	UPointLightComponent_SetTranslation_Params params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalMarker.CanTeleport
// (Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalMarker::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalMarker.CanTeleport");

	APortalMarker_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneCaptureReflectActor.PostBeginPlay
// (Defined, Public)

void ASceneCaptureReflectActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureReflectActor.PostBeginPlay");

	ASceneCaptureReflectActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalTeleporter.StopsProjectile
// (Defined, Simulated, Public)
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalTeleporter::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.StopsProjectile");

	APortalTeleporter_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.CreatePortalTexture
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.CreatePortalTexture");

	APortalTeleporter_CreatePortalTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformHitLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APortalTeleporter::TransformHitLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformHitLocation");

	APortalTeleporter_TransformHitLocation_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformVectorDir
// (Final, Native, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APortalTeleporter::TransformVectorDir(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformVectorDir");

	APortalTeleporter_TransformVectorDir_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APortalTeleporter::TransformActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformActor");

	APortalTeleporter_TransformActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PostProcessChain.FindPostProcessEffect
// (Final, Defined, Public)
// Parameters:
// struct FName                   EffectName                     (Parm)
// class UPostProcessEffect*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect(const struct FName& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessChain.FindPostProcessEffect");

	UPostProcessChain_FindPostProcessEffect_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PotentialClimbWatcher.Tick
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm)

void APotentialClimbWatcher::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PotentialClimbWatcher.Tick");

	APotentialClimbWatcher_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.GetRange
// (Defined, Simulated, Static, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::STATIC_GetRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetRange");

	AProjectile_GetRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.StaticGetTimeToLocation
// (Defined, Simulated, Static, Public)
// Parameters:
// struct FVector                 TargetLoc                      (Parm)
// struct FVector                 StartLoc                       (Parm)
// class AController*             RequestedBy                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.StaticGetTimeToLocation");

	AProjectile_StaticGetTimeToLocation_Params params;
	params.TargetLoc = TargetLoc;
	params.StartLoc = StartLoc;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTimeToLocation
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 TargetLoc                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::GetTimeToLocation(const struct FVector& TargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTimeToLocation");

	AProjectile_GetTimeToLocation_Params params;
	params.TargetLoc = TargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.FellOutOfWorld
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AProjectile::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.FellOutOfWorld");

	AProjectile_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.IsStationary
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.IsStationary");

	AProjectile_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.RandSpin
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          spinRate                       (Parm)

void AProjectile::RandSpin(float spinRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.RandSpin");

	AProjectile_RandSpin_Params params;
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Explode");

	AProjectile_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachedBy
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AProjectile::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachedBy");

	AProjectile_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HitWall
// (Defined, Singular, Simulated, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void AProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HitWall");

	AProjectile_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.ProcessTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProcessTouch");

	AProjectile_ProcessTouch_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Touch
// (Defined, Singular, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Touch");

	AProjectile_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HurtRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          InDamageRadius                 (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// class AActor*                  IgnoredActor                   (OptionalParm, Parm)
// class AController*             InstigatedByController         (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HurtRadius");

	AProjectile_HurtRadius_Params params;
	params.DamageAmount = DamageAmount;
	params.InDamageRadius = InDamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Reset
// (Defined, Public)

void AProjectile::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Reset");

	AProjectile_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CanSplash");

	AProjectile_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AProjectile::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTeamNum");

	AProjectile_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Init
// (Defined, Public)
// Parameters:
// struct FVector                 Direction                      (Parm)

void AProjectile::Init(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Init");

	AProjectile_Init_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AProjectile::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostBeginPlay");

	AProjectile_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PreBeginPlay
// (Defined, Event, Public)

void AProjectile::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PreBeginPlay");

	AProjectile_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachingOn
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachingOn");

	AProjectile_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetFlags
// (Defined, Static, Public)
// Parameters:
// unsigned char                  Flags                          (Parm)
// class APlayerController*       PC                             (Parm)
// TEnumAsByte<EDoubleClickDir>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDoubleClickDir> USavedMove::STATIC_SetFlags(unsigned char Flags, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetFlags");

	USavedMove_SetFlags_Params params;
	params.Flags = Flags;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.CompressedFlags
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char USavedMove::CompressedFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CompressedFlags");

	USavedMove_CompressedFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetMoveFor
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// float                          DeltaTime                      (Parm)
// struct FVector                 newAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   InDoubleClick                  (Parm)

void USavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetMoveFor");

	USavedMove_SetMoveFor_Params params;
	params.P = P;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.InDoubleClick = InDoubleClick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.CanCombineWith
// (Defined, Public)
// Parameters:
// class USavedMove*              NewMove                        (Parm)
// class APawn*                   inPawn                         (Parm)
// float                          MaxDelta                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USavedMove::CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CanCombineWith");

	USavedMove_CanCombineWith_Params params;
	params.NewMove = NewMove;
	params.inPawn = inPawn;
	params.MaxDelta = MaxDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetInitialPosition
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void USavedMove::SetInitialPosition(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetInitialPosition");

	USavedMove_SetInitialPosition_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.GetStartLocation
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USavedMove::GetStartLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetStartLocation");

	USavedMove_GetStartLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.IsImportantMove
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 CompareAccel                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USavedMove::IsImportantMove(const struct FVector& CompareAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.IsImportantMove");

	USavedMove_IsImportantMove_Params params;
	params.CompareAccel = CompareAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.PostUpdate
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void USavedMove::PostUpdate(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PostUpdate");

	USavedMove_PostUpdate_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.Clear
// (Defined, Public)

void USavedMove::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.Clear");

	USavedMove_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.SetFrameRate
// (Final, Native, Public)
// Parameters:
// float                          NewFrameRate                   (Parm)

void USceneCaptureComponent::SetFrameRate(float NewFrameRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetFrameRate");

	USceneCaptureComponent_SetFrameRate_Params params;
	params.NewFrameRate = NewFrameRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetView
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void USceneCapture2DComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetView");

	USceneCapture2DComponent_SetView_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (OptionalParm, Parm)
// float                          NewFOV                         (OptionalParm, Parm)
// float                          NewNearPlane                   (OptionalParm, Parm)
// float                          NewFarPlane                    (OptionalParm, Parm)

void USceneCapture2DComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetCaptureParameters");

	USceneCapture2DComponent_SetCaptureParameters_Params params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewFOV = NewFOV;
	params.NewNearPlane = NewNearPlane;
	params.NewFarPlane = NewFarPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureCharacterComponent.SetView
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void USceneCaptureCharacterComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCharacterComponent.SetView");

	USceneCaptureCharacterComponent_SetView_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureCharacterComponent.SetCaptureParameters
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (OptionalParm, Parm)
// float                          NewFOV                         (OptionalParm, Parm)
// float                          NewNearPlane                   (OptionalParm, Parm)
// float                          NewFarPlane                    (OptionalParm, Parm)

void USceneCaptureCharacterComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCharacterComponent.SetCaptureParameters");

	USceneCaptureCharacterComponent_SetCaptureParameters_Params params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewFOV = NewFOV;
	params.NewNearPlane = NewNearPlane;
	params.NewFarPlane = NewFarPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (OptionalParm, Parm)
// float                          NewScaleFOV                    (OptionalParm, Parm)
// class AActor*                  NewViewDest                    (OptionalParm, Parm)

void USceneCapturePortalComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapturePortalComponent.SetCaptureParameters");

	USceneCapturePortalComponent_SetCaptureParameters_Params params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewScaleFOV = NewScaleFOV;
	params.NewViewDest = NewViewDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Scout.PreBeginPlay
// (Defined, Simulated, Event, Public)

void AScout::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Scout.PreBeginPlay");

	AScout_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.StopAnim
// (Defined, Public)

void USkeletalMeshComponent::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopAnim");

	USkeletalMeshComponent_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayAnim
// (Defined, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// bool                           bRestartIfAlreadyPlaying       (OptionalParm, Parm)

void USkeletalMeshComponent::PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnim");

	USkeletalMeshComponent_PlayAnim_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.bLoop = bLoop;
	params.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// (Final, Native, Public)
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// TEnumAsByte<EFaceFXRegOp>      RegOp                          (Parm)
// float                          FirstValue                     (Parm)
// float                          FirstInterpDuration            (Parm)
// float                          NextValue                      (Parm)
// float                          NextInterpDuration             (Parm)

void USkeletalMeshComponent::SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx");

	USkeletalMeshComponent_SetFaceFXRegisterEx_Params params;
	params.RegName = RegName;
	params.RegOp = RegOp;
	params.FirstValue = FirstValue;
	params.FirstInterpDuration = FirstInterpDuration;
	params.NextValue = NextValue;
	params.NextInterpDuration = NextInterpDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// (Final, Native, Public)
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// float                          RegVal                         (Parm)
// TEnumAsByte<EFaceFXRegOp>      RegOp                          (Parm)
// float                          InterpDuration                 (OptionalParm, Parm)

void USkeletalMeshComponent::SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<EFaceFXRegOp> RegOp, float InterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegister");

	USkeletalMeshComponent_SetFaceFXRegister_Params params;
	params.RegName = RegName;
	params.RegVal = RegVal;
	params.RegOp = RegOp;
	params.InterpDuration = InterpDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// (Final, Native, Public)
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetFaceFXRegister");

	USkeletalMeshComponent_GetFaceFXRegister_Params params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// (Final, Native, Public)
// Parameters:
// struct FString                 RegName                        (Parm, NeedCtorLink)

void USkeletalMeshComponent::DeclareFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister");

	USkeletalMeshComponent_DeclareFaceFXRegister_Params params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::IsPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim");

	USkeletalMeshComponent_IsPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// (Final, Native, Public)

void USkeletalMeshComponent::StopFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopFaceFXAnim");

	USkeletalMeshComponent_StopFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// (Final, Native, Public)
// Parameters:
// class UFaceFXAnimSet*          FaceFXAnimSetRef               (Parm)
// struct FString                 AnimName                       (Parm, NeedCtorLink)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayFaceFXAnim");

	USkeletalMeshComponent_PlayFaceFXAnim_Params params;
	params.FaceFXAnimSetRef = FaceFXAnimSetRef;
	params.AnimName = AnimName;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// int                            TraceFlags                     (Parm)
// TArray<struct FName>           out_Bones                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBonesWithinRadius");

	USkeletalMeshComponent_GetBonesWithinRadius_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceFlags = TraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Bones != nullptr)
		*out_Bones = params.out_Bones;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UpdateAnimations
// (Final, Native, Public)

void USkeletalMeshComponent::UpdateAnimations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateAnimations");

	USkeletalMeshComponent_UpdateAnimations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// (Final, Native, Public)

void USkeletalMeshComponent::ForceSkelUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceSkelUpdate");

	USkeletalMeshComponent_ForceSkelUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// (Final, Native, Public)
// Parameters:
// bool                           bMoveUnfixedBodies             (Parm)
// bool                           bTeleport                      (Parm)

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases");

	USkeletalMeshComponent_UpdateRBBonesFromSpaceBases_Params params;
	params.bMoveUnfixedBodies = bMoveUnfixedBodies;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// (Final, Native, Public)
// Parameters:
// bool                           bHasInstance                   (Parm)

void USkeletalMeshComponent::SetHasPhysicsAssetInstance(bool bHasInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance");

	USkeletalMeshComponent_SetHasPhysicsAssetInstance_Params params;
	params.bHasInstance = bHasInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed");

	USkeletalMeshComponent_FindBodyInstanceNamed_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// (Final, Native, Public)
// Parameters:
// int                            ConstraintIndex                (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	USkeletalMeshComponent_FindConstraintBoneName_Params params;
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// (Final, Native, Public)
// Parameters:
// struct FName                   ConstraintName                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::FindConstraintIndex(const struct FName& ConstraintName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintIndex");

	USkeletalMeshComponent_FindConstraintIndex_Params params;
	params.ConstraintName = ConstraintName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.InitSkelControls
// (Final, Native, Public)

void USkeletalMeshComponent::InitSkelControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitSkelControls");

	USkeletalMeshComponent_InitSkelControls_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// (Final, Native, Public)

void USkeletalMeshComponent::UpdateParentBoneMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateParentBoneMap");

	USkeletalMeshComponent_UpdateParentBoneMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// (Final, Native, Public)
// Parameters:
// class USkeletalMeshComponent*  NewParentAnimComp              (Parm, EditInline)

void USkeletalMeshComponent::SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetParentAnimComponent");

	USkeletalMeshComponent_SetParentAnimComponent_Params params;
	params.NewParentAnimComp = NewParentAnimComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// (Final, Native, Public)
// Parameters:
// class UAnimTree*               NewTemplate                    (Parm)

void USkeletalMeshComponent::SetAnimTreeTemplate(class UAnimTree* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate");

	USkeletalMeshComponent_SetAnimTreeTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindClosestBone
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 TestLocation                   (Parm)
// struct FVector                 BoneLocation                   (OptionalParm, Parm, OutParm)
// float                          IgnoreScale                    (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector* BoneLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindClosestBone");

	USkeletalMeshComponent_FindClosestBone_Params params;
	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneLocation != nullptr)
		*BoneLocation = params.BoneLocation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FVector                 InPosition                     (Parm)
// struct FRotator                InRotation                     (Parm)
// struct FVector                 OutPosition                    (Parm, OutParm)
// struct FRotator                OutRotation                    (Parm, OutParm)

void USkeletalMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformFromBoneSpace");

	USkeletalMeshComponent_TransformFromBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FVector                 InPosition                     (Parm)
// struct FRotator                InRotation                     (Parm)
// struct FVector                 OutPosition                    (Parm, OutParm)
// struct FRotator                OutRotation                    (Parm, OutParm)

void USkeletalMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformToBoneSpace");

	USkeletalMeshComponent_TransformToBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.GetBoneAxis
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// TEnumAsByte<EAxis>             Axis                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneAxis(const struct FName& BoneName, TEnumAsByte<EAxis> Axis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneAxis");

	USkeletalMeshComponent_GetBoneAxis_Params params;
	params.BoneName = BoneName;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneNames
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FName>           BoneNames                      (Parm, OutParm, NeedCtorLink)

void USkeletalMeshComponent::GetBoneNames(TArray<struct FName>* BoneNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneNames");

	USkeletalMeshComponent_GetBoneNames_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneNames != nullptr)
		*BoneNames = params.BoneNames;
}


// Function Engine.SkeletalMeshComponent.GetParentBone
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName USkeletalMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetParentBone");

	USkeletalMeshComponent_GetParentBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// (Final, Native, Public)
// Parameters:
// int                            BoneIndex                      (Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix USkeletalMeshComponent::GetBoneMatrix(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMatrix");

	USkeletalMeshComponent_GetBoneMatrix_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.MatchRefBone
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::MatchRefBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.MatchRefBone");

	USkeletalMeshComponent_MatchRefBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneLocation
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            Space                          (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneLocation(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneLocation");

	USkeletalMeshComponent_GetBoneLocation_Params params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            Space                          (OptionalParm, Parm)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQuat USkeletalMeshComponent::GetBoneQuaternion(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneQuaternion");

	USkeletalMeshComponent_GetBoneQuaternion_Params params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphNode
// (Final, Native, Public)
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UMorphNodeBase*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphNode");

	USkeletalMeshComponent_FindMorphNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindSkelControl
// (Final, Native, Public)
// Parameters:
// struct FName                   InControlName                  (Parm)
// class USkelControlBase*        ReturnValue                    (Parm, OutParm, ReturnParm)

class USkelControlBase* USkeletalMeshComponent::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindSkelControl");

	USkeletalMeshComponent_FindSkelControl_Params params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AllAnimNodes
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UAnimNode*               Node                           (Parm, OutParm)

void USkeletalMeshComponent::AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllAnimNodes");

	USkeletalMeshComponent_AllAnimNodes_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Node != nullptr)
		*Node = params.Node;
}


// Function Engine.SkeletalMeshComponent.FindAnimNode
// (Final, Native, Public)
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UAnimNode*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNode* USkeletalMeshComponent::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimNode");

	USkeletalMeshComponent_FindAnimNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphTarget
// (Final, Native, Public)
// Parameters:
// struct FName                   MorphTargetName                (Parm)
// class UMorphTarget*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphTarget");

	USkeletalMeshComponent_FindMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimLength
// (Final, Defined, Public)
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetAnimLength(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimLength");

	USkeletalMeshComponent_GetAnimLength_Params params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// (Final, Defined, Public)
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          Duration                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimRateByDuration");

	USkeletalMeshComponent_GetAnimRateByDuration_Params params;
	params.AnimSeqName = AnimSeqName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// (Final, Native, Public)

void USkeletalMeshComponent::RestoreSavedAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets");

	USkeletalMeshComponent_RestoreSavedAnimSets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SaveAnimSets
// (Final, Native, Public)

void USkeletalMeshComponent::SaveAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SaveAnimSets");

	USkeletalMeshComponent_SaveAnimSets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindAnimSequence
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimSequence");

	USkeletalMeshComponent_FindAnimSequence_Params params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// (Final, Simulated, Native, Public)
// Parameters:
// struct FVector                 ClothValidBoundsMin            (Parm)
// struct FVector                 ClothValidBoundsMax            (Parm)

void USkeletalMeshComponent::SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothValidBounds");

	USkeletalMeshComponent_SetClothValidBounds_Params params;
	params.ClothValidBoundsMin = ClothValidBoundsMin;
	params.ClothValidBoundsMax = ClothValidBoundsMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           IfEnableClothValidBounds       (Parm)

void USkeletalMeshComponent::EnableClothValidBounds(bool IfEnableClothValidBounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.EnableClothValidBounds");

	USkeletalMeshComponent_EnableClothValidBounds_Params params;
	params.IfEnableClothValidBounds = IfEnableClothValidBounds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           AttatchTwoWay                  (Parm)
// bool                           AttachTearable                 (Parm)

void USkeletalMeshComponent::AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes");

	USkeletalMeshComponent_AttachClothToCollidingShapes_Params params;
	params.AttatchTwoWay = AttatchTwoWay;
	params.AttachTearable = AttachTearable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothVelocity
// (Final, Simulated, Native, Public)
// Parameters:
// struct FVector                 VelocityOffSet                 (Parm)

void USkeletalMeshComponent::SetClothVelocity(const struct FVector& VelocityOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothVelocity");

	USkeletalMeshComponent_SetClothVelocity_Params params;
	params.VelocityOffSet = VelocityOffSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPosition
// (Final, Simulated, Native, Public)
// Parameters:
// struct FVector                 ClothOffSet                    (Parm)

void USkeletalMeshComponent::SetClothPosition(const struct FVector& ClothOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPosition");

	USkeletalMeshComponent_SetClothPosition_Params params;
	params.ClothOffSet = ClothOffSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleep
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           IfClothSleep                   (Parm)

void USkeletalMeshComponent::SetClothSleep(bool IfClothSleep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleep");

	USkeletalMeshComponent_SetClothSleep_Params params;
	params.IfClothSleep = IfClothSleep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothThickness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothThickness                 (Parm)

void USkeletalMeshComponent::SetClothThickness(float ClothThickness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothThickness");

	USkeletalMeshComponent_SetClothThickness_Params params;
	params.ClothThickness = ClothThickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothTearFactor                (Parm)

void USkeletalMeshComponent::SetClothTearFactor(float ClothTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothTearFactor");

	USkeletalMeshComponent_SetClothTearFactor_Params params;
	params.ClothTearFactor = ClothTearFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothStretchingStiffness       (Parm)

void USkeletalMeshComponent::SetClothStretchingStiffness(float ClothStretchingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness");

	USkeletalMeshComponent_SetClothStretchingStiffness_Params params;
	params.ClothStretchingStiffness = ClothStretchingStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// (Final, Simulated, Native, Public)
// Parameters:
// int                            ClothSolverIterations          (Parm)

void USkeletalMeshComponent::SetClothSolverIterations(int ClothSolverIterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSolverIterations");

	USkeletalMeshComponent_SetClothSolverIterations_Params params;
	params.ClothSolverIterations = ClothSolverIterations;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothSleepLinearVelocity       (Parm)

void USkeletalMeshComponent::SetClothSleepLinearVelocity(float ClothSleepLinearVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity");

	USkeletalMeshComponent_SetClothSleepLinearVelocity_Params params;
	params.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPressure
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothPressure                  (Parm)

void USkeletalMeshComponent::SetClothPressure(float ClothPressure)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPressure");

	USkeletalMeshComponent_SetClothPressure_Params params;
	params.ClothPressure = ClothPressure;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFriction
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothFriction                  (Parm)

void USkeletalMeshComponent::SetClothFriction(float ClothFriction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFriction");

	USkeletalMeshComponent_SetClothFriction_Params params;
	params.ClothFriction = ClothFriction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFlags
// (Final, Simulated, Native, Public)
// Parameters:
// int                            ClothFlags                     (Parm)

void USkeletalMeshComponent::SetClothFlags(int ClothFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFlags");

	USkeletalMeshComponent_SetClothFlags_Params params;
	params.ClothFlags = ClothFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothDampingCoefficient        (Parm)

void USkeletalMeshComponent::SetClothDampingCoefficient(float ClothDampingCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient");

	USkeletalMeshComponent_SetClothDampingCoefficient_Params params;
	params.ClothDampingCoefficient = ClothDampingCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothCollisionResponseCoefficient (Parm)

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_SetClothCollisionResponseCoefficient_Params params;
	params.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothBendingStiffness          (Parm)

void USkeletalMeshComponent::SetClothBendingStiffness(float ClothBendingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothBendingStiffness");

	USkeletalMeshComponent_SetClothBendingStiffness_Params params;
	params.ClothBendingStiffness = ClothBendingStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothAttachTearFactor          (Parm)

void USkeletalMeshComponent::SetClothAttachmentTearFactor(float ClothAttachTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor");

	USkeletalMeshComponent_SetClothAttachmentTearFactor_Params params;
	params.ClothAttachTearFactor = ClothAttachTearFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ClothAttachmentResponseCoefficient (Parm)

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_SetClothAttachmentResponseCoefficient_Params params;
	params.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetClothThickness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothThickness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothThickness");

	USkeletalMeshComponent_GetClothThickness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothTearFactor");

	USkeletalMeshComponent_GetClothTearFactor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothStretchingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness");

	USkeletalMeshComponent_GetClothStretchingStiffness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// (Final, Simulated, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::GetClothSolverIterations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSolverIterations");

	USkeletalMeshComponent_GetClothSolverIterations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothSleepLinearVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity");

	USkeletalMeshComponent_GetClothSleepLinearVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothPressure
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothPressure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothPressure");

	USkeletalMeshComponent_GetClothPressure_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFriction
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothFriction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFriction");

	USkeletalMeshComponent_GetClothFriction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFlags
// (Final, Simulated, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USkeletalMeshComponent::GetClothFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFlags");

	USkeletalMeshComponent_GetClothFlags_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothDampingCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient");

	USkeletalMeshComponent_GetClothDampingCoefficient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient");

	USkeletalMeshComponent_GetClothCollisionResponseCoefficient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothBendingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothBendingStiffness");

	USkeletalMeshComponent_GetClothBendingStiffness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor");

	USkeletalMeshComponent_GetClothAttachmentTearFactor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// (Final, Simulated, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient");

	USkeletalMeshComponent_GetClothAttachmentResponseCoefficient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AddImpulseAtClothPos
// (Final, Simulated, Native, Public)
// Parameters:
// struct FVector                 Position                       (Parm)
// struct FVector                 Impulse                        (Parm)
// float                          Radius                         (Parm)

void USkeletalMeshComponent::AddImpulseAtClothPos(const struct FVector& Position, const struct FVector& Impulse, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddImpulseAtClothPos");

	USkeletalMeshComponent_AddImpulseAtClothPos_Params params;
	params.Position = Position;
	params.Impulse = Impulse;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// (Final, Simulated, Native, Public)

void USkeletalMeshComponent::ResetClothVertsToRefPose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose");

	USkeletalMeshComponent_ResetClothVertsToRefPose_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           bAttachVerts                   (Parm)

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody(bool bAttachVerts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody");

	USkeletalMeshComponent_SetAttachClothVertsToBaseBody_Params params;
	params.bAttachVerts = bAttachVerts;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// (Final, Simulated, Native, Public)
// Parameters:
// struct FVector                 InForce                        (Parm)

void USkeletalMeshComponent::SetClothExternalForce(const struct FVector& InForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothExternalForce");

	USkeletalMeshComponent_SetClothExternalForce_Params params;
	params.InForce = InForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateClothParams
// (Final, Simulated, Native, Public)

void USkeletalMeshComponent::UpdateClothParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateClothParams");

	USkeletalMeshComponent_UpdateClothParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFrozen
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           bNewFrozen                     (Parm)

void USkeletalMeshComponent::SetClothFrozen(bool bNewFrozen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFrozen");

	USkeletalMeshComponent_SetClothFrozen_Params params;
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           bInEnable                      (Parm)

void USkeletalMeshComponent::SetEnableClothSimulation(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothSimulation");

	USkeletalMeshComponent_SetEnableClothSimulation_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetForceRefPose
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           bNewForceRefPose               (Parm)

void USkeletalMeshComponent::SetForceRefPose(bool bNewForceRefPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetForceRefPose");

	USkeletalMeshComponent_SetForceRefPose_Params params;
	params.bNewForceRefPose = bNewForceRefPose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// (Final, Simulated, Native, Public)
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (Parm)
// bool                           bForceReInit                   (OptionalParm, Parm)

void USkeletalMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsAsset");

	USkeletalMeshComponent_SetPhysicsAsset_Params params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// (Final, Simulated, Native, Public)
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm)
// bool                           bKeepSpaceBases                (OptionalParm, Parm)

void USkeletalMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSkeletalMesh");

	USkeletalMeshComponent_SetSkeletalMesh_Params params;
	params.NewMesh = NewMesh;
	params.bKeepSpaceBases = bKeepSpaceBases;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachedComponents
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class UActorComponent*         OutComponent                   (Parm, OutParm, EditInline)

void USkeletalMeshComponent::AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachedComponents");

	USkeletalMeshComponent_AttachedComponents_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.SkeletalMeshComponent.IsComponentAttached
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsComponentAttached");

	USkeletalMeshComponent_IsComponentAttached_Params params;
	params.Component = Component;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// (Final, Native, Public)
// Parameters:
// struct FName                   InBoneName                     (Parm)
// class UActorComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone(const struct FName& InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone");

	USkeletalMeshComponent_FindComponentAttachedToBone_Params params;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketByName
// (Final, Native, Public)
// Parameters:
// struct FName                   InSocketName                   (Parm)
// class USkeletalMeshSocket*     ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketByName");

	USkeletalMeshComponent_GetSocketByName_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   InSocketName                   (Parm)
// struct FVector                 OutLocation                    (Parm, OutParm)
// struct FRotator                OutRotation                    (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation(const struct FName& InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation");

	USkeletalMeshComponent_GetSocketWorldLocationAndRotation_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   SocketName                     (Parm)

void USkeletalMeshComponent::AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentToSocket");

	USkeletalMeshComponent_AttachComponentToSocket_Params params;
	params.Component = Component;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.DetachComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)

void USkeletalMeshComponent::DetachComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DetachComponent");

	USkeletalMeshComponent_DetachComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, EditInline)
// struct FName                   BoneName                       (Parm)
// struct FVector                 RelativeLocation               (OptionalParm, Parm)
// struct FRotator                RelativeRotation               (OptionalParm, Parm)
// struct FVector                 RelativeScale                  (OptionalParm, Parm)

void USkeletalMeshComponent::AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponent");

	USkeletalMeshComponent_AttachComponent_Params params;
	params.Component = Component;
	params.BoneName = BoneName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundCue.GetCueDuration
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float USoundCue::GetCueDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundCue.GetCueDuration");

	USoundCue_GetCueDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshActor.OnActivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void AStaticMeshActor::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.OnActivateLOI");

	AStaticMeshActor_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActor.OnDeactivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void AStaticMeshActor::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.OnDeactivateLOI");

	AStaticMeshActor_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActor.ActivateLOI
// (Defined, Event, Public)

void AStaticMeshActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.ActivateLOI");

	AStaticMeshActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActor.AssignPlayerToLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void AStaticMeshActor::AssignPlayerToLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.AssignPlayerToLOI");

	AStaticMeshActor_AssignPlayerToLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActor.PreBeginPlay
// (Defined, Event, Public)

void AStaticMeshActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.PreBeginPlay");

	AStaticMeshActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// (Simulated, Native, Public)
// Parameters:
// class UStaticMeshComponent*    OtherSMC                       (Parm, EditInline)
// bool                           bDisabled                      (Parm)

void UStaticMeshComponent::DisableRBCollisionWithSMC(class UStaticMeshComponent* OtherSMC, bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC");

	UStaticMeshComponent_DisableRBCollisionWithSMC_Params params;
	params.OtherSMC = OtherSMC;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// (Simulated, Native, Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	UStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char ATeamInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetTeamNum");

	ATeamInfo_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetTextColor
// (Defined, Public)
// Parameters:
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ATeamInfo::GetTextColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetTextColor");

	ATeamInfo_GetTextColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetHUDColor
// (Defined, Simulated, Public)
// Parameters:
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ATeamInfo::GetHUDColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHUDColor");

	ATeamInfo_GetHUDColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ATeamInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHumanReadableName");

	ATeamInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.RemoveFromTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)

void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.RemoveFromTeam");

	ATeamInfo_RemoveFromTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.AddToTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeamInfo::AddToTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.AddToTeam");

	ATeamInfo_AddToTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.Destroyed
// (Defined, Simulated, Event, Public)

void ATeamInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.Destroyed");

	ATeamInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ATeamInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.ReplicatedEvent");

	ATeamInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.SpecialHandling
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATeleporter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialHandling");

	ATeleporter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostTouch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ATeleporter::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostTouch");

	ATeleporter_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATeleporter::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Touch");

	ATeleporter_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Accept
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeleporter::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Accept");

	ATeleporter_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostBeginPlay
// (Defined, Event, Public)

void ATeleporter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostBeginPlay");

	ATeleporter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.CanTeleport
// (Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeleporter::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.CanTeleport");

	ATeleporter_CanTeleport_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2DComposite.ResetSourceRegions
// (Final, Native, Public)

void UTexture2DComposite::ResetSourceRegions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.ResetSourceRegions");

	UTexture2DComposite_ResetSourceRegions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.UpdateCompositeTexture
// (Final, Native, Public)
// Parameters:
// int                            NumMipsToGenerate              (Parm)

void UTexture2DComposite::UpdateCompositeTexture(int NumMipsToGenerate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.UpdateCompositeTexture");

	UTexture2DComposite_UpdateCompositeTexture_Params params;
	params.NumMipsToGenerate = NumMipsToGenerate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UTexture2DComposite::SourceTexturesFullyStreamedIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn");

	UTexture2DComposite_SourceTexturesFullyStreamedIn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TextureFlipBook.SetCurrentFrame
// (Native, Public)
// Parameters:
// int                            Row                            (Parm)
// int                            Col                            (Parm)

void UTextureFlipBook::SetCurrentFrame(int Row, int Col)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.SetCurrentFrame");

	UTextureFlipBook_SetCurrentFrame_Params params;
	params.Row = Row;
	params.Col = Col;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Stop
// (Native, Public)

void UTextureFlipBook::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Stop");

	UTextureFlipBook_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Pause
// (Native, Public)

void UTextureFlipBook::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Pause");

	UTextureFlipBook_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Play
// (Native, Public)

void UTextureFlipBook::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Play");

	UTextureFlipBook_Play_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Stop
// (Native, Public)

void UTextureMovie::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Stop");

	UTextureMovie_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Pause
// (Native, Public)

void UTextureMovie::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Pause");

	UTextureMovie_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Play
// (Native, Public)

void UTextureMovie::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Play");

	UTextureMovie_Play_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureRenderTarget2D.Create
// (Final, Native, Static, Public)
// Parameters:
// int                            InSizeX                        (Parm)
// int                            InSizeY                        (Parm)
// TEnumAsByte<EPixelFormat>      InFormat                       (OptionalParm, Parm)
// struct FLinearColor            InClearColor                   (OptionalParm, Parm)
// bool                           bOnlyRenderOnce                (OptionalParm, Parm)
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UTextureRenderTarget2D* UTextureRenderTarget2D::STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureRenderTarget2D.Create");

	UTextureRenderTarget2D_Create_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InClearColor = InClearColor;
	params.bOnlyRenderOnce = bOnlyRenderOnce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.ApplyCheckpointRecord
// (Defined, Public, HasOutParms)
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (Const, Parm, OutParm)

void ATrigger::ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ApplyCheckpointRecord");

	ATrigger_ApplyCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.CreateCheckpointRecord
// (Defined, Public, HasOutParms)
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (Parm, OutParm)

void ATrigger::CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.CreateCheckpointRecord");

	ATrigger_CreateCheckpointRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.StopsProjectile
// (Defined, Simulated, Public)
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATrigger::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.StopsProjectile");

	ATrigger_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.UnTrigger
// (Defined, Public)

void ATrigger::UnTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.UnTrigger");

	ATrigger_UnTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Touch");

	ATrigger_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerVolume.StopsProjectile
// (Defined, Simulated, Public)
// Parameters:
// class AProjectile*             P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATriggerVolume::StopsProjectile(class AProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.StopsProjectile");

	ATriggerVolume_StopsProjectile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggerVolume.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ATriggerVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.PostBeginPlay");

	ATriggerVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NotifyDriverTakeHit
// (Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)

void AVehicle::NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyDriverTakeHit");

	AVehicle_NotifyDriverTakeHit_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AVehicle::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ReplicatedEvent");

	AVehicle_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DrivingStatusChanged
// (Defined, Simulated, Public)

void AVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DrivingStatusChanged");

	AVehicle_DrivingStatusChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.HandleDeadVehicleDriver
// (Public)

void AVehicle::HandleDeadVehicleDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.HandleDeadVehicleDriver");

	AVehicle_HandleDeadVehicleDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetDriving
// (Defined, Simulated, Public)
// Parameters:
// bool                           B                              (Parm)

void AVehicle::SetDriving(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetDriving");

	AVehicle_SetDriving_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetEntryLocation
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AVehicle::GetEntryLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetEntryLocation");

	AVehicle_GetEntryLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CrushedBy
// (Public)
// Parameters:
// class APawn*                   OtherPawn                      (Parm)

void AVehicle::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CrushedBy");

	AVehicle_CrushedBy_Params params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EncroachingOn
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachingOn");

	AVehicle_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetCollisionDamageInstigator
// (Defined, Public)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AVehicle::GetCollisionDamageInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetCollisionDamageInstigator");

	AVehicle_GetCollisionDamageInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.EncroachedBy
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AVehicle::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachedBy");

	AVehicle_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.FaceRotation
// (Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void AVehicle::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FaceRotation");

	AVehicle_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetDefaultCameraMode
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetDefaultCameraMode");

	AVehicle_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlayDying
// (Simulated, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)

void AVehicle::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayDying");

	AVehicle_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverDied
// (Defined, Public)

void AVehicle::DriverDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverDied");

	AVehicle_DriverDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Died
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Died");

	AVehicle_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ThrowActiveWeapon
// (Public)
// Parameters:
// class UClass*                  DamageType                     (OptionalParm, Parm)

void AVehicle::ThrowActiveWeapon(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ThrowActiveWeapon");

	AVehicle_ThrowActiveWeapon_Params params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AdjustDriverDamage
// (Defined, Public, HasOutParms)
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AVehicle::AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustDriverDamage");

	AVehicle_AdjustDriverDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Vehicle.TakeDamage
// (Defined, Event, Public)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AVehicle::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeDamage");

	AVehicle_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetKillInstigator
// (Defined, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AVehicle::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetKillInstigator");

	AVehicle_SetKillInstigator_Params params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.UnPossessed
// (Defined, Public)

void AVehicle::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnPossessed");

	AVehicle_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TryExitPos
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (Parm)
// struct FVector                 ExitPos                        (Parm)
// bool                           bMustFindGround                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryExitPos");

	AVehicle_TryExitPos_Params params;
	params.ExitingDriver = ExitingDriver;
	params.ExitPos = ExitPos;
	params.bMustFindGround = bMustFindGround;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.FindAutoExit
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::FindAutoExit(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindAutoExit");

	AVehicle_FindAutoExit_Params params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlaceExitingDriver
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::PlaceExitingDriver(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlaceExitingDriver");

	AVehicle_PlaceExitingDriver_Params params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DriverLeft
// (Defined, Public)

void AVehicle::DriverLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeft");

	AVehicle_DriverLeft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetInputs
// (Defined, Simulated, Public)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)

void AVehicle::SetInputs(float InForward, float InStrafe, float InUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetInputs");

	AVehicle_SetInputs_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverLeave
// (Defined, Event, Public, HasDefaults)
// Parameters:
// bool                           bForceLeave                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::DriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeave");

	AVehicle_DriverLeave_Params params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ContinueOnFoot
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::ContinueOnFoot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ContinueOnFoot");

	AVehicle_ContinueOnFoot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DetachDriver
// (Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::DetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DetachDriver");

	AVehicle_DetachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AttachDriver
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::AttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachDriver");

	AVehicle_AttachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EntryAnnouncement
// (Public)
// Parameters:
// class AController*             C                              (Parm)

void AVehicle::EntryAnnouncement(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EntryAnnouncement");

	AVehicle_EntryAnnouncement_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PossessedBy
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           bVehicleTransition             (Parm)

void AVehicle::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PossessedBy");

	AVehicle_PossessedBy_Params params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverEnter
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::DriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverEnter");

	AVehicle_DriverEnter_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.TryToDrive
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryToDrive");

	AVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.AnySeatAvailable
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::AnySeatAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AnySeatAvailable");

	AVehicle_AnySeatAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CanEnterVehicle
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CanEnterVehicle(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CanEnterVehicle");

	AVehicle_CanEnterVehicle_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Destroyed_HandleDriver
// (Defined, Simulated, Public)

void AVehicle::Destroyed_HandleDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed_HandleDriver");

	AVehicle_Destroyed_HandleDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Destroyed
// (Defined, Simulated, Event, Public)

void AVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed");

	AVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.CheatFly
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatFly");

	AVehicle_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatGhost
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatGhost");

	AVehicle_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatWalk
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatWalk");

	AVehicle_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PostBeginPlay
// (Defined, Event, Public)

void AVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PostBeginPlay");

	AVehicle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetBaseEyeheight
// (Defined, Simulated, Public)

void AVehicle::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetBaseEyeheight");

	AVehicle_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PlayerChangedTeam
// (Defined, Public)

void AVehicle::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayerChangedTeam");

	AVehicle_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverRadiusDamage
// (Defined, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class AController*             EventInstigator                (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AVehicle::DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverRadiusDamage");

	AVehicle_DriverRadiusDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.EventInstigator = EventInstigator;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TakeRadiusDamage
// (Defined, Simulated, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeRadiusDamage");

	AVehicle_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetTargetLocation
// (Simulated, Native, Public)
// Parameters:
// class AActor*                  RequestedBy                    (OptionalParm, Parm)
// bool                           bRequestAlternateLoc           (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AVehicle::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTargetLocation");

	AVehicle_GetTargetLocation_Params params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Suicide
// (Defined, Public)

void AVehicle::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Suicide");

	AVehicle_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DisplayDebug");

	AVehicle_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Vehicle.NotifyTeamChanged
// (Defined, Simulated, Public)

void AVehicle::NotifyTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyTeamChanged");

	AVehicle_NotifyTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StillFiring
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireMode                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::StillFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StillFiring");

	AWeapon_StillFiring_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ShouldRefire
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::ShouldRefire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ShouldRefire");

	AWeapon_ShouldRefire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.NotifyWeaponFinishedFiring
// (Defined, Public)
// Parameters:
// unsigned char                  FireMode                       (Parm)

void AWeapon::NotifyWeaponFinishedFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFinishedFiring");

	AWeapon_NotifyWeaponFinishedFiring_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.NotifyWeaponFired
// (Defined, Public)
// Parameters:
// unsigned char                  FireMode                       (Parm)

void AWeapon::NotifyWeaponFired(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFired");

	AWeapon_NotifyWeaponFired_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.HandleFinishedFiring
// (Defined, Simulated, Public)

void AWeapon::HandleFinishedFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HandleFinishedFiring");

	AWeapon_HandleFinishedFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TryPutDown
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::TryPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TryPutDown");

	AWeapon_TryPutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetPhysicalFireStartLoc
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// struct FVector                 AimDir                         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AWeapon::GetPhysicalFireStartLoc(const struct FVector& AimDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPhysicalFireStartLoc");

	AWeapon_GetPhysicalFireStartLoc_Params params;
	params.AimDir = AimDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetMuzzleLoc
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AWeapon::GetMuzzleLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetMuzzleLoc");

	AWeapon_GetMuzzleLoc_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CustomFire
// (Simulated, Public)

void AWeapon::CustomFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CustomFire");

	AWeapon_CustomFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ProjectileFire
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AProjectile*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AProjectile* AWeapon::ProjectileFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProjectileFire");

	AWeapon_ProjectileFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ProcessInstantHit
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FiringMode                     (Parm)
// struct FImpactInfo             Impact                         (Parm)

void AWeapon::ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProcessInstantHit");

	AWeapon_ProcessInstantHit_Params params;
	params.FiringMode = FiringMode;
	params.Impact = Impact;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.InstantFire
// (Defined, Simulated, Public, HasDefaults)

void AWeapon::InstantFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.InstantFire");

	AWeapon_InstantFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PassThroughDamage
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  HitActor                       (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::PassThroughDamage(class AActor* HitActor, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PassThroughDamage");

	AWeapon_PassThroughDamage_Params params;
	params.HitActor = HitActor;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CalcWeaponFire
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 StartTrace                     (Parm)
// struct FVector                 EndTrace                       (Parm)
// TArray<struct FImpactInfo>     ImpactList                     (OptionalParm, Parm, OutParm, NeedCtorLink)
// struct FImpactInfo             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImpactInfo AWeapon::CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, TArray<struct FImpactInfo>* ImpactList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CalcWeaponFire");

	AWeapon_CalcWeaponFire_Params params;
	params.StartTrace = StartTrace;
	params.EndTrace = EndTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ImpactList != nullptr)
		*ImpactList = params.ImpactList;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceOwner
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AWeapon::GetTraceOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceOwner");

	AWeapon_GetTraceOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceRange
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetTraceRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceRange");

	AWeapon_GetTraceRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAdjustedAim
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// struct FVector                 StartFireLoc                   (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AWeapon::GetAdjustedAim(const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAdjustedAim");

	AWeapon_GetAdjustedAim_Params params;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireAmmunition
// (Defined, Simulated, Public)

void AWeapon::FireAmmunition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireAmmunition");

	AWeapon_FireAmmunition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.FireModeUpdated
// (Simulated, Public)
// Parameters:
// unsigned char                  FiringMode                     (Parm)
// bool                           bViaReplication                (Parm)

void AWeapon::FireModeUpdated(unsigned char FiringMode, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireModeUpdated");

	AWeapon_FireModeUpdated_Params params;
	params.FiringMode = FiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetCurrentFireMode
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FiringModeNum                  (Parm)

void AWeapon::SetCurrentFireMode(unsigned char FiringModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetCurrentFireMode");

	AWeapon_SetCurrentFireMode_Params params;
	params.FiringModeNum = FiringModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SendToFiringState
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::SendToFiringState(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SendToFiringState");

	AWeapon_SendToFiringState_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ForceEndFire
// (Defined, Simulated, Public)

void AWeapon::ForceEndFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ForceEndFire");

	AWeapon_ForceEndFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.EndFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::EndFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.EndFire");

	AWeapon_EndFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStopFire
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ServerStopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStopFire");

	AWeapon_ServerStopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFire");

	AWeapon_StopFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.BeginFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::BeginFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.BeginFire");

	AWeapon_BeginFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStartFire
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ServerStartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStartFire");

	AWeapon_ServerStartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StartFire
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StartFire");

	AWeapon_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponCalcCamera
// (Simulated, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)

void AWeapon::WeaponCalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponCalcCamera");

	AWeapon_WeaponCalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
}


// Function Engine.Weapon.ClientWeaponSet
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// bool                           bOptionalSet                   (Parm)

void AWeapon::ClientWeaponSet(bool bOptionalSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponSet");

	AWeapon_ClientWeaponSet_Params params;
	params.bOptionalSet = bOptionalSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.AdjustFOVAngle
// (Defined, Simulated, Public)
// Parameters:
// float                          FOVAngle                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::AdjustFOVAngle(float FOVAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AdjustFOVAngle");

	AWeapon_AdjustFOVAngle_Params params;
	params.FOVAngle = FOVAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetViewAxes
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 XAxis                          (Parm, OutParm)
// struct FVector                 YAxis                          (Parm, OutParm)
// struct FVector                 ZAxis                          (Parm, OutParm)

void AWeapon::GetViewAxes(struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetViewAxes");

	AWeapon_GetViewAxes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XAxis != nullptr)
		*XAxis = params.XAxis;
	if (YAxis != nullptr)
		*YAxis = params.YAxis;
	if (ZAxis != nullptr)
		*ZAxis = params.ZAxis;
}


// Function Engine.Weapon.DetachWeapon
// (Simulated, Public)

void AWeapon::DetachWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DetachWeapon");

	AWeapon_DetachWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.AttachWeaponTo
// (Simulated, Public)
// Parameters:
// class USkeletalMeshComponent*  MeshCpnt                       (Parm, EditInline)
// struct FName                   SocketName                     (OptionalParm, Parm)

void AWeapon::AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AttachWeaponTo");

	AWeapon_AttachWeaponTo_Params params;
	params.MeshCpnt = MeshCpnt;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashLocation
// (Defined, Public)

void AWeapon::ClearFlashLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashLocation");

	AWeapon_ClearFlashLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetFlashLocation
// (Defined, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AWeapon::SetFlashLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetFlashLocation");

	AWeapon_SetFlashLocation_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashCount
// (Defined, Simulated, Public)

void AWeapon::ClearFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashCount");

	AWeapon_ClearFlashCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.IncrementFlashCount
// (Defined, Simulated, Public)

void AWeapon::IncrementFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IncrementFlashCount");

	AWeapon_IncrementFlashCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponEmpty
// (Simulated, Public)

void AWeapon::WeaponEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponEmpty");

	AWeapon_WeaponEmpty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DenyPickupQuery
// (Defined, Public)
// Parameters:
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyPickupQuery");

	AWeapon_DenyPickupQuery_Params params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.PutDownWeapon
// (Defined, Simulated, Public)

void AWeapon::PutDownWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PutDownWeapon");

	AWeapon_PutDownWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Activate
// (Defined, Simulated, Public)

void AWeapon::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Activate");

	AWeapon_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponEquipping
// (Defined, Simulated, Public)

void AWeapon::TimeWeaponEquipping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponEquipping");

	AWeapon_TimeWeaponEquipping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponPutDown
// (Defined, Simulated, Public)

void AWeapon::TimeWeaponPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponPutDown");

	AWeapon_TimeWeaponPutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.RefireCheckTimer
// (Simulated, Public)

void AWeapon::RefireCheckTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RefireCheckTimer");

	AWeapon_RefireCheckTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponFiring
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::TimeWeaponFiring(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponFiring");

	AWeapon_TimeWeaponFiring_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetFireInterval
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetFireInterval(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetFireInterval");

	AWeapon_GetFireInterval_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.PlayFiringSound
// (Simulated, Public)

void AWeapon::PlayFiringSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayFiringSound");

	AWeapon_PlayFiringSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopFireEffects
// (Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::StopFireEffects(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFireEffects");

	AWeapon_StopFireEffects_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayFireEffects
// (Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// struct FVector                 HitLocation                    (OptionalParm, Parm)

void AWeapon::PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayFireEffects");

	AWeapon_PlayFireEffects_Params params;
	params.FireModeNum = FireModeNum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopWeaponAnimation
// (Defined, Simulated, Public)

void AWeapon::StopWeaponAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopWeaponAnimation");

	AWeapon_StopWeaponAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayWeaponAnimation
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// float                          fDesiredDuration               (Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// class USkeletalMeshComponent*  SkelMesh                       (OptionalParm, Parm, EditInline)

void AWeapon::PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayWeaponAnimation");

	AWeapon_PlayWeaponAnimation_Params params;
	params.Sequence = Sequence;
	params.fDesiredDuration = fDesiredDuration;
	params.bLoop = bLoop;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponPlaySound
// (Defined, Simulated, Public)
// Parameters:
// class USoundCue*               Sound                          (Parm)
// float                          NoiseLoudness                  (OptionalParm, Parm)

void AWeapon::WeaponPlaySound(class USoundCue* Sound, float NoiseLoudness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponPlaySound");

	AWeapon_WeaponPlaySound_Params params;
	params.Sound = Sound;
	params.NoiseLoudness = NoiseLoudness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponAnimNodeSeq
// (Defined, Simulated, Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponAnimNodeSeq");

	AWeapon_GetWeaponAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireOnRelease
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireOnRelease");

	AWeapon_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.SuggestDefenseStyle
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::SuggestDefenseStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SuggestDefenseStyle");

	AWeapon_SuggestDefenseStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.SuggestAttackStyle
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::SuggestAttackStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SuggestAttackStyle");

	AWeapon_SuggestAttackStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CanAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanAttack");

	AWeapon_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.RangedAttackTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RangedAttackTime");

	AWeapon_RangedAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.RecommendLongRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RecommendLongRangedAttack");

	AWeapon_RecommendLongRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FocusOnLeader
// (Defined, Public)
// Parameters:
// bool                           bLeaderFiring                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::FocusOnLeader(bool bLeaderFiring)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FocusOnLeader");

	AWeapon_FocusOnLeader_Params params;
	params.bLeaderFiring = bLeaderFiring;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.RecommendRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::RecommendRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RecommendRangedAttack");

	AWeapon_RecommendRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetWeaponRating
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetWeaponRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponRating");

	AWeapon_GetWeaponRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAIRating
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetAIRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAIRating");

	AWeapon_GetAIRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GivenTo
// (Defined, Public)
// Parameters:
// class APawn*                   thisPawn                       (Parm)
// bool                           bDoNotActivate                 (OptionalParm, Parm)

void AWeapon::GivenTo(class APawn* thisPawn, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GivenTo");

	AWeapon_GivenTo_Params params;
	params.thisPawn = thisPawn;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetDamageRadius
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::GetDamageRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetDamageRadius");

	AWeapon_GetDamageRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.MaxRange
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeapon::MaxRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.MaxRange");

	AWeapon_MaxRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddSpread
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// struct FRotator                BaseAim                        (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AWeapon::AddSpread(const struct FRotator& BaseAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddSpread");

	AWeapon_AddSpread_Params params;
	params.BaseAim = BaseAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetProjectileClass
// (Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AWeapon::GetProjectileClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetProjectileClass");

	AWeapon_GetProjectileClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClearPendingFire
// (Defined, Simulated, Public)
// Parameters:
// int                            FireMode                       (Parm)

void AWeapon::ClearPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearPendingFire");

	AWeapon_ClearPendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetPendingFire
// (Defined, Simulated, Public)
// Parameters:
// int                            FireMode                       (Parm)

void AWeapon::SetPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetPendingFire");

	AWeapon_SetPendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PendingFire
// (Defined, Simulated, Public)
// Parameters:
// int                            FireMode                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::PendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PendingFire");

	AWeapon_PendingFire_Params params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAnyAmmo
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::HasAnyAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAnyAmmo");

	AWeapon_HasAnyAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAmmo
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)
// int                            Amount                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::HasAmmo(unsigned char FireModeNum, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAmmo");

	AWeapon_HasAmmo_Params params;
	params.FireModeNum = FireModeNum;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddAmmo
// (Public)
// Parameters:
// int                            Amount                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AWeapon::AddAmmo(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddAmmo");

	AWeapon_AddAmmo_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ConsumeAmmo
// (Public)
// Parameters:
// unsigned char                  FireModeNum                    (Parm)

void AWeapon::ConsumeAmmo(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ConsumeAmmo");

	AWeapon_ConsumeAmmo_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponLog
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FString                 FuncStr                        (Parm, CoerceParm, NeedCtorLink)

void AWeapon::WeaponLog(const struct FString& msg, const struct FString& FuncStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponLog");

	AWeapon_WeaponLog_Params params;
	params.msg = msg;
	params.FuncStr = FuncStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DumpWeaponDebugToLog
// (Defined, Simulated, Public)

void AWeapon::DumpWeaponDebugToLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DumpWeaponDebugToLog");

	AWeapon_DumpWeaponDebugToLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         DebugInfo                      (Parm, OutParm, NeedCtorLink)

void AWeapon::GetWeaponDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponDebug");

	AWeapon_GetWeaponDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.Weapon.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AWeapon::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DisplayDebug");

	AWeapon_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Weapon.DenyClientWeaponSet
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DenyClientWeaponSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyClientWeaponSet");

	AWeapon_DenyClientWeaponSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.IsFiring
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IsFiring");

	AWeapon_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClientWeaponThrown
// (Defined, Net, NetReliable, Simulated, Public, NetClient)

void AWeapon::ClientWeaponThrown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponThrown");

	AWeapon_ClientWeaponThrown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.CanThrow
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::CanThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanThrow");

	AWeapon_CanThrow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DropFrom
// (Defined, Public)
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FVector                 StartVelocity                  (Parm)

void AWeapon::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DropFrom");

	AWeapon_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DoOverridePrevWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DoOverridePrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverridePrevWeapon");

	AWeapon_DoOverridePrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DoOverrideNextWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::DoOverrideNextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverrideNextWeapon");

	AWeapon_DoOverrideNextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HolderDied
// (Defined, Public)

void AWeapon::HolderDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HolderDied");

	AWeapon_HolderDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.IsActiveWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeapon::IsActiveWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IsActiveWeapon");

	AWeapon_IsActiveWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ItemRemovedFromInvManager
// (Defined, Public)

void AWeapon::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ItemRemovedFromInvManager");

	AWeapon_ItemRemovedFromInvManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Destroyed
// (Defined, Simulated, Event, Public)

void AWeapon::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Destroyed");

	AWeapon_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.DoMemoryTracking
// (Native, Public)

void AWorldInfo::DoMemoryTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.DoMemoryTracking");

	AWorldInfo_DoMemoryTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsPlayingDemo
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPlayingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayingDemo");

	AWorldInfo_IsPlayingDemo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsRecordingDemo
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsRecordingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsRecordingDemo");

	AWorldInfo_IsRecordingDemo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetDetailMode
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EDetailMode>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDetailMode> AWorldInfo::GetDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDetailMode");

	AWorldInfo_GetDetailMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetMapName
// (Final, Native, Public)
// Parameters:
// bool                           bIncludePrefix                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetMapName(bool bIncludePrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapName");

	AWorldInfo_GetMapName_Params params;
	params.bIncludePrefix = bIncludePrefix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetMapInfo
// (Final, Native, Public)
// Parameters:
// class UMapInfo*                NewMapInfo                     (Parm)

void AWorldInfo::SetMapInfo(class UMapInfo* NewMapInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMapInfo");

	AWorldInfo_SetMapInfo_Params params;
	params.NewMapInfo = NewMapInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetMapInfo
// (Final, Native, Public)
// Parameters:
// class UMapInfo*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UMapInfo* AWorldInfo::GetMapInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapInfo");

	AWorldInfo_GetMapInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// (Final, Native, Public)
// Parameters:
// bool                           bNowPaused                     (Parm)

void AWorldInfo::SetSeamlessTravelMidpointPause(bool bNowPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetSeamlessTravelMidpointPause");

	AWorldInfo_SetSeamlessTravelMidpointPause_Params params;
	params.bNowPaused = bNowPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsInSeamlessTravel
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsInSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsInSeamlessTravel");

	AWorldInfo_IsInSeamlessTravel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SeamlessTravel
// (Final, Native, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)
// struct FGuid                   MapPackageGuid                 (OptionalParm, Parm, AlwaysInit)

void AWorldInfo::SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SeamlessTravel");

	AWorldInfo_SeamlessTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.CommitMapChange
// (Final, Native, Public)
// Parameters:
// bool                           bShouldSkipLevelStartupEvent   (OptionalParm, Parm)
// bool                           bShouldSkipLevelBeginningEvent (OptionalParm, Parm)

void AWorldInfo::CommitMapChange(bool bShouldSkipLevelStartupEvent, bool bShouldSkipLevelBeginningEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CommitMapChange");

	AWorldInfo_CommitMapChange_Params params;
	params.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	params.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsMapChangeReady
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsMapChangeReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMapChangeReady");

	AWorldInfo_IsMapChangeReady_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPreparingMapChange
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsPreparingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPreparingMapChange");

	AWorldInfo_IsPreparingMapChange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.PrepareMapChange
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FName>           LevelNames                     (Const, Parm, OutParm, NeedCtorLink)

void AWorldInfo::PrepareMapChange(TArray<struct FName>* LevelNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PrepareMapChange");

	AWorldInfo_PrepareMapChange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelNames != nullptr)
		*LevelNames = params.LevelNames;
}


// Function Engine.WorldInfo.NotifyMatchStarted
// (Final, Native, Public)
// Parameters:
// bool                           bShouldActivateLevelStartupEvents (OptionalParm, Parm)
// bool                           bShouldActivateLevelBeginningEvents (OptionalParm, Parm)
// bool                           bShouldActivateLevelLoadedEvents (OptionalParm, Parm)

void AWorldInfo::NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyMatchStarted");

	AWorldInfo_NotifyMatchStarted_Params params;
	params.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	params.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	params.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.AllPawns
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class APawn*                   P                              (Parm, OutParm)
// struct FVector                 TestLocation                   (OptionalParm, Parm)
// float                          TestRadius                     (OptionalParm, Parm)

void AWorldInfo::AllPawns(class UClass* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn** P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllPawns");

	AWorldInfo_AllPawns_Params params;
	params.BaseClass = BaseClass;
	params.TestLocation = TestLocation;
	params.TestRadius = TestRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (P != nullptr)
		*P = params.P;
}


// Function Engine.WorldInfo.AllControllers
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class AController*             C                              (Parm, OutParm)

void AWorldInfo::AllControllers(class UClass* BaseClass, class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllControllers");

	AWorldInfo_AllControllers_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.WorldInfo.NavigationPointCheck
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 Point                          (Parm)
// struct FVector                 Extent                         (Parm)
// TArray<class ANavigationPoint*> Navs                           (OptionalParm, Parm, OutParm, NeedCtorLink)
// TArray<class UReachSpec*>      Specs                          (OptionalParm, Parm, OutParm, NeedCtorLink)

void AWorldInfo::NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NavigationPointCheck");

	AWorldInfo_NavigationPointCheck_Params params;
	params.Point = Point;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Navs != nullptr)
		*Navs = params.Navs;
	if (Specs != nullptr)
		*Specs = params.Specs;
}


// Function Engine.WorldInfo.RadiusNavigationPoints
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class ANavigationPoint*        N                              (Parm, OutParm)
// struct FVector                 Point                          (Parm)
// float                          Radius                         (Parm)

void AWorldInfo::RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.RadiusNavigationPoints");

	AWorldInfo_RadiusNavigationPoints_Params params;
	params.BaseClass = BaseClass;
	params.Point = Point;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.AllNavigationPoints
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (Parm)
// class ANavigationPoint*        N                              (Parm, OutParm)

void AWorldInfo::AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllNavigationPoints");

	AWorldInfo_AllNavigationPoints_Params params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.Reset
// (Defined, Public)

void AWorldInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.Reset");

	AWorldInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PostBeginPlay
// (Defined, Simulated, Public)

void AWorldInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PostBeginPlay");

	AWorldInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PreBeginPlay
// (Defined, Simulated, Public)

void AWorldInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PreBeginPlay");

	AWorldInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ThisIsNeverExecuted
// (Defined, Public)
// Parameters:
// class ADefaultPhysicsVolume*   P                              (Parm)

void AWorldInfo::ThisIsNeverExecuted(class ADefaultPhysicsVolume* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ThisIsNeverExecuted");

	AWorldInfo_ThisIsNeverExecuted_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ServerTravel
// (Defined, Event, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bAbsolute                      (OptionalParm, Parm)

void AWorldInfo::ServerTravel(const struct FString& URL, bool bAbsolute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ServerTravel");

	AWorldInfo_ServerTravel_Params params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsLOIEnabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsLOIEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsLOIEnabled");

	AWorldInfo_IsLOIEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGameClass
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AWorldInfo::GetGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameClass");

	AWorldInfo_GetGameClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetAddressURL
// (Simulated, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetAddressURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAddressURL");

	AWorldInfo_GetAddressURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.VerifyNavList
// (Final, Simulated, Native, Public)

void AWorldInfo::VerifyNavList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.VerifyNavList");

	AWorldInfo_VerifyNavList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ForceGarbageCollection
// (Final, Simulated, Native, Public)
// Parameters:
// bool                           bFullPurge                     (OptionalParm, Parm)

void AWorldInfo::ForceGarbageCollection(bool bFullPurge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ForceGarbageCollection");

	AWorldInfo_ForceGarbageCollection_Params params;
	params.bFullPurge = bFullPurge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsPlayInEditor
// (Final, Simulated, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::STATIC_IsPlayInEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInEditor");

	AWorldInfo_IsPlayInEditor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsConsoleBuild
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TEnumAsByte<EConsoleType>      ConsoleType                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::STATIC_IsConsoleBuild(TEnumAsByte<EConsoleType> ConsoleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsConsoleBuild");

	AWorldInfo_IsConsoleBuild_Params params;
	params.ConsoleType = ConsoleType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsDemoBuild
// (Final, Simulated, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::STATIC_IsDemoBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsDemoBuild");

	AWorldInfo_IsDemoBuild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetLocalURL
// (Simulated, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AWorldInfo::GetLocalURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetLocalURL");

	AWorldInfo_GetLocalURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetLevelRBGravity
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewGrav                        (Parm)

void AWorldInfo::SetLevelRBGravity(const struct FVector& NewGrav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetLevelRBGravity");

	AWorldInfo_SetLevelRBGravity_Params params;
	params.NewGrav = NewGrav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetGameSequence
// (Final, Native, Public)
// Parameters:
// class USequence*               ReturnValue                    (Parm, OutParm, ReturnParm)

class USequence* AWorldInfo::GetGameSequence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameSequence");

	AWorldInfo_GetGameSequence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGravityZ
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWorldInfo::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGravityZ");

	AWorldInfo_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsServer
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWorldInfo::IsServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsServer");

	AWorldInfo_IsServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetSceneExposureReset
// (Final, Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void AWorldInfo::SetSceneExposureReset(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetSceneExposureReset");

	AWorldInfo_SetSceneExposureReset_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetModifiedPostProcessSettings
// (Native, Public)
// Parameters:
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FPostProcessSettings AWorldInfo::GetModifiedPostProcessSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetModifiedPostProcessSettings");

	AWorldInfo_GetModifiedPostProcessSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.CanFireWeapon
// (Defined, Public)
// Parameters:
// class AWeapon*                 Wpn                            (Parm)
// unsigned char                  FireModeNum                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.CanFireWeapon");

	AAIController_CanFireWeapon_Params params;
	params.Wpn = Wpn;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.ShouldAutoReload
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::ShouldAutoReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.ShouldAutoReload");

	AAIController_ShouldAutoReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.ShouldRefire
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::ShouldRefire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.ShouldRefire");

	AAIController_ShouldRefire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.NotifyWeaponFinishedFiring
// (Public)
// Parameters:
// class AWeapon*                 W                              (Parm)
// unsigned char                  FireMode                       (Parm)

void AAIController::NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFinishedFiring");

	AAIController_NotifyWeaponFinishedFiring_Params params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.NotifyWeaponFired
// (Public)
// Parameters:
// class AWeapon*                 W                              (Parm)
// unsigned char                  FireMode                       (Parm)

void AAIController::NotifyWeaponFired(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFired");

	AAIController_NotifyWeaponFired_Params params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.OnAIMoveToActor
// (Defined, Public)
// Parameters:
// class USeqAct_AIMoveToActor*   Action                         (Parm)

void AAIController::OnAIMoveToActor(class USeqAct_AIMoveToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.OnAIMoveToActor");

	AAIController_OnAIMoveToActor_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.GetPlayerViewPoint
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (Parm, OutParm)
// struct FRotator                out_Rotation                   (Parm, OutParm)

void AAIController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetPlayerViewPoint");

	AAIController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.AIController.SetTeam
// (Defined, Event, Public)
// Parameters:
// int                            inTeamIdx                      (Parm)

void AAIController::SetTeam(int inTeamIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetTeam");

	AAIController_SetTeam_Params params;
	params.inTeamIdx = inTeamIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PriorityObjective
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::PriorityObjective()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PriorityObjective");

	AAIController_PriorityObjective_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.GetOrders
// (Defined, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AAIController::GetOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetOrders");

	AAIController_GetOrders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.GetOrderObject
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AAIController::GetOrderObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetOrderObject");

	AAIController_GetOrderObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.SetOrders
// (Public)
// Parameters:
// struct FName                   NewOrders                      (Parm)
// class AController*             OrderGiver                     (Parm)

void AAIController::SetOrders(const struct FName& NewOrders, class AController* OrderGiver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetOrders");

	AAIController_SetOrders_Params params;
	params.NewOrders = NewOrders;
	params.OrderGiver = OrderGiver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void AAIController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.DisplayDebug");

	AAIController_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.AIController.Reset
// (Defined, Public)

void AAIController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Reset");

	AAIController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PreBeginPlay
// (Defined, Event, Public)

void AAIController::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PreBeginPlay");

	AAIController_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_AtActor.AtActor
// (Defined, Static, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  Goal                           (Parm)
// float                          Dist                           (OptionalParm, Parm)
// bool                           bReturnPartial                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGoal_AtActor::STATIC_AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.AtActor");

	UGoal_AtActor_AtActor_Params params;
	params.P = P;
	params.Goal = Goal;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_AlongLine.AlongLine
// (Defined, Static, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// struct FVector                 Dir                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_AlongLine::STATIC_AlongLine(class APawn* P, const struct FVector& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.AlongLine");

	UPath_AlongLine_AlongLine_Params params;
	params.P = P;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_TowardGoal.TowardGoal
// (Defined, Static, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPath_TowardGoal::STATIC_TowardGoal(class APawn* P, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.TowardGoal");

	UPath_TowardGoal_TowardGoal_Params params;
	params.P = P;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeBlendBase.StopAnim
// (Native, Public)

void UAnimNodeBlendBase::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.StopAnim");

	UAnimNodeBlendBase_StopAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.PlayAnim
// (Native, Public)
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNodeBlendBase::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.PlayAnim");

	UAnimNodeBlendBase_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// (Native, Public)
// Parameters:
// int                            ProfileIndex                   (Parm)

void UAnimNodeAimOffset::SetActiveProfileByIndex(int ProfileIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex");

	UAnimNodeAimOffset_SetActiveProfileByIndex_Params params;
	params.ProfileIndex = ProfileIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// (Native, Public)
// Parameters:
// struct FName                   ProfileName                    (Parm)

void UAnimNodeAimOffset::SetActiveProfileByName(const struct FName& ProfileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByName");

	UAnimNodeAimOffset_SetActiveProfileByName_Params params;
	params.ProfileName = ProfileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlend.SetBlendTarget
// (Final, Native, Public)
// Parameters:
// float                          BlendTarget                    (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeBlend::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlend.SetBlendTarget");

	UAnimNodeBlend_SetBlendTarget_Params params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendList.SetActiveChild
// (Native, Public)
// Parameters:
// int                            ChildIndex                     (Parm)
// float                          BlendTime                      (Parm)

void UAnimNodeBlendList::SetActiveChild(int ChildIndex, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendList.SetActiveChild");

	UAnimNodeBlendList_SetActiveChild_Params params;
	params.ChildIndex = ChildIndex;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// (Final, Native, Public)
// Parameters:
// int                            TargetIdx                      (Parm)
// struct FName                   StartBoneName                  (Parm)
// float                          PerBoneIncrease                (OptionalParm, Parm)

void UAnimNodeBlendMultiBone::SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone");

	UAnimNodeBlendMultiBone_SetTargetStartBone_Params params;
	params.TargetIdx = TargetIdx;
	params.StartBoneName = StartBoneName;
	params.PerBoneIncrease = PerBoneIncrease;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.GetActiveChild
// (Final, Native, Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetActiveChild");

	UAnimNodeCrossfader_GetActiveChild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.GetAnimName
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UAnimNodeCrossfader::GetAnimName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetAnimName");

	UAnimNodeCrossfader_GetAnimName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)

void UAnimNodeCrossfader::BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.BlendToLoopingAnim");

	UAnimNodeCrossfader_BlendToLoopingAnim_Params params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimSeqName                    (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bDontBlendOut                  (OptionalParm, Parm)
// float                          Rate                           (OptionalParm, Parm)

void UAnimNodeCrossfader::PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.PlayOneShotAnim");

	UAnimNodeCrossfader_PlayOneShotAnim_Params params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bDontBlendOut = bDontBlendOut;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<ERootBoneAxis>     AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisZ                          (OptionalParm, Parm)

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption");

	UAnimNodePlayCustomAnim_SetRootBoneAxisOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// (Final, Defined, Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq");

	UAnimNodePlayCustomAnim_GetCustomAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// (Final, Defined, Public)
// Parameters:
// bool                           bNewStatus                     (Parm)

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification");

	UAnimNodePlayCustomAnim_SetActorAnimEndNotification_Params params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// (Final, Defined, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)

void UAnimNodePlayCustomAnim::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetCustomAnim");

	UAnimNodePlayCustomAnim_SetCustomAnim_Params params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// (Final, Native, Public)
// Parameters:
// float                          BlendOutTime                   (Parm)

void UAnimNodePlayCustomAnim::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.StopCustomAnim");

	UAnimNodePlayCustomAnim_StopCustomAnim_Params params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration");

	UAnimNodePlayCustomAnim_PlayCustomAnimByDuration_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Rate                           (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodePlayCustomAnim::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim");

	UAnimNodePlayCustomAnim_PlayCustomAnim_Params params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetTimeLeft
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetTimeLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetTimeLeft");

	UAnimNodeSequence_GetTimeLeft_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetAnimPlaybackLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetAnimPlaybackLength");

	UAnimNodeSequence_GetAnimPlaybackLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetGlobalPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGlobalPlayRate");

	UAnimNodeSequence_GetGlobalPlayRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition
// (Native, Public)
// Parameters:
// float                          GroupRelativePosition          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::FindNormalizedPositionFromGroupRelativePosition(float GroupRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition");

	UAnimNodeSequence_FindNormalizedPositionFromGroupRelativePosition_Params params;
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetNormalizedPosition
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSequence::GetNormalizedPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetNormalizedPosition");

	UAnimNodeSequence_GetNormalizedPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.SetPosition
// (Native, Public)
// Parameters:
// float                          NewTime                        (Parm)
// bool                           bFireNotifies                  (Parm)

void UAnimNodeSequence::SetPosition(float NewTime, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetPosition");

	UAnimNodeSequence_SetPosition_Params params;
	params.NewTime = NewTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.StopAnim
// (Native, Public)

void UAnimNodeSequence::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.StopAnim");

	UAnimNodeSequence_StopAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.PlayAnim
// (Native, Public)
// Parameters:
// bool                           bLoop                          (OptionalParm, Parm)
// float                          InRate                         (OptionalParm, Parm)
// float                          StartTime                      (OptionalParm, Parm)

void UAnimNodeSequence::PlayAnim(bool bLoop, float InRate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.PlayAnim");

	UAnimNodeSequence_PlayAnim_Params params;
	params.bLoop = bLoop;
	params.InRate = InRate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.SetAnim
// (Native, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)

void UAnimNodeSequence::SetAnim(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetAnim");

	UAnimNodeSequence_SetAnim_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.AddToSynchGroup
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)

void UAnimNodeSlot::AddToSynchGroup(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.AddToSynchGroup");

	UAnimNodeSlot_AddToSynchGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ERootBoneAxis>     AxisX                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisY                          (OptionalParm, Parm)
// TEnumAsByte<ERootBoneAxis>     AxisZ                          (OptionalParm, Parm)

void UAnimNodeSlot::SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneAxisOption");

	UAnimNodeSlot_SetRootBoneAxisOption_Params params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// (Final, Native, Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq");

	UAnimNodeSlot_GetCustomAnimNodeSeq_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// (Final, Native, Public)
// Parameters:
// bool                           bNewStatus                     (Parm)

void UAnimNodeSlot::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetActorAnimEndNotification");

	UAnimNodeSlot_SetActorAnimEndNotification_Params params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetCustomAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)

void UAnimNodeSlot::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetCustomAnim");

	UAnimNodeSlot_SetCustomAnim_Params params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.StopCustomAnim
// (Final, Native, Public)
// Parameters:
// float                          BlendOutTime                   (Parm)

void UAnimNodeSlot::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.StopCustomAnim");

	UAnimNodeSlot_StopCustomAnim_Params params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetPlayedAnimation
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UAnimNodeSlot::GetPlayedAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetPlayedAnimation");

	UAnimNodeSlot_GetPlayedAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Duration                       (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)

void UAnimNodeSlot::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnimByDuration");

	UAnimNodeSlot_PlayCustomAnimByDuration_Params params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.PlayCustomAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// float                          Rate                           (Parm)
// float                          BlendInTime                    (OptionalParm, Parm)
// float                          BlendOutTime                   (OptionalParm, Parm)
// bool                           bLooping                       (OptionalParm, Parm)
// bool                           bOverride                      (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSlot::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnim");

	UAnimNodeSlot_PlayCustomAnim_Params params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.SetGroupRateScale
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          NewRateScale                   (Parm)

void UAnimNodeSynch::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.SetGroupRateScale");

	UAnimNodeSynch_SetGroupRateScale_Params params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetRelativePosition
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimNodeSynch::GetRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetRelativePosition");

	UAnimNodeSynch_GetRelativePosition_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.ForceRelativePosition
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          RelativePosition               (Parm)

void UAnimNodeSynch::ForceRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.ForceRelativePosition");

	UAnimNodeSynch_ForceRelativePosition_Params params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetMasterNodeOfGroup");

	UAnimNodeSynch_GetMasterNodeOfGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// (Final, Native, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)

void UAnimNodeSynch::RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.RemoveNodeFromGroup");

	UAnimNodeSynch_RemoveNodeFromGroup_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.AddNodeToGroup
// (Final, Native, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)

void UAnimNodeSynch::AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.AddNodeToGroup");

	UAnimNodeSynch_AddNodeToGroup_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Scripted.Notify
// (Event, Public)
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_Scripted::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.Notify");

	UAnimNotify_Scripted_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupIndex
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UAnimTree::GetGroupIndex(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupIndex");

	UAnimTree_GetGroupIndex_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetGroupRateScale
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          NewRateScale                   (Parm)

void UAnimTree::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetGroupRateScale");

	UAnimTree_SetGroupRateScale_Params params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupRelativePosition
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UAnimTree::GetGroupRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRelativePosition");

	UAnimTree_GetGroupRelativePosition_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.ForceGroupRelativePosition
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// float                          RelativePosition               (Parm)

void UAnimTree::ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.ForceGroupRelativePosition");

	UAnimTree_ForceGroupRelativePosition_Params params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupNotifyMaster
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupNotifyMaster");

	UAnimTree_GetGroupNotifyMaster_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.GetGroupSynchMaster
// (Final, Native, Public)
// Parameters:
// struct FName                   GroupName                      (Parm)
// class UAnimNodeSequence*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupSynchMaster");

	UAnimTree_GetGroupSynchMaster_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetAnimGroupForNode
// (Final, Native, Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (Parm)
// struct FName                   GroupName                      (Parm)
// bool                           bCreateIfNotFound              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAnimTree::SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetAnimGroupForNode");

	UAnimTree_SetAnimGroupForNode_Params params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;
	params.bCreateIfNotFound = bCreateIfNotFound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.FindMorphNode
// (Final, Native, Public)
// Parameters:
// struct FName                   InNodeName                     (Parm)
// class UMorphNodeBase*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphNodeBase* UAnimTree::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindMorphNode");

	UAnimTree_FindMorphNode_Params params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.FindSkelControl
// (Final, Native, Public)
// Parameters:
// struct FName                   InControlName                  (Parm)
// class USkelControlBase*        ReturnValue                    (Parm, OutParm, ReturnParm)

class USkelControlBase* UAnimTree::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindSkelControl");

	UAnimTree_FindSkelControl_Params params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CrowdAgent.SpawnActionEffect
// (Simulated, Event, Public)
// Parameters:
// struct FVector                 ActionTarget                   (Parm)

void ACrowdAgent::SpawnActionEffect(const struct FVector& ActionTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgent.SpawnActionEffect");

	ACrowdAgent_SpawnActionEffect_Params params;
	params.ActionTarget = ActionTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdAgent.TakeDamage
// (Defined, Public)
// Parameters:
// int                            DamageAmount                   (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void ACrowdAgent::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgent.TakeDamage");

	ACrowdAgent_TakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdAgent.PlayDeath
// (Native, Public)

void ACrowdAgent::PlayDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgent.PlayDeath");

	ACrowdAgent_PlayDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdAttractor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ACrowdAttractor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAttractor.OnToggle");

	ACrowdAttractor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodePose.SetMorphTarget
// (Final, Native, Public)
// Parameters:
// struct FName                   MorphTargetName                (Parm)

void UMorphNodePose::SetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodePose.SetMorphTarget");

	UMorphNodePose_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeWeight.SetNodeWeight
// (Native, Public)
// Parameters:
// float                          NewWeight                      (Parm)

void UMorphNodeWeight::SetNodeWeight(float NewWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeWeight.SetNodeWeight");

	UMorphNodeWeight_SetNodeWeight_Params params;
	params.NewWeight = NewWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphTargetSet.FindMorphTarget
// (Final, Native, Public)
// Parameters:
// struct FName                   MorphTargetName                (Parm)
// class UMorphTarget*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UMorphTarget* UMorphTargetSet::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphTargetSet.FindMorphTarget");

	UMorphTargetSet_FindMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlBase.SetSkelControlStrength
// (Final, Native, Public)
// Parameters:
// float                          NewStrength                    (Parm)
// float                          InBlendTime                    (Parm)

void USkelControlBase::SetSkelControlStrength(float NewStrength, float InBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlStrength");

	USkelControlBase_SetSkelControlStrength_Params params;
	params.NewStrength = NewStrength;
	params.InBlendTime = InBlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.SetSkelControlActive
// (Final, Native, Public)
// Parameters:
// bool                           bInActive                      (Parm)

void USkelControlBase::SetSkelControlActive(bool bInActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlActive");

	USkelControlBase_SetSkelControlActive_Params params;
	params.bInActive = bInActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.CanLookAtPoint
// (Final, Native, Public)
// Parameters:
// struct FVector                 PointLoc                       (Parm)
// bool                           bDrawDebugInfo                 (OptionalParm, Parm)
// bool                           bDebugUsePersistentLines       (OptionalParm, Parm)
// bool                           bDebugFlushLinesFirst          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USkelControlLookAt::CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.CanLookAtPoint");

	USkelControlLookAt_CanLookAtPoint_Params params;
	params.PointLoc = PointLoc;
	params.bDrawDebugInfo = bDrawDebugInfo;
	params.bDebugUsePersistentLines = bDebugUsePersistentLines;
	params.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlLookAt.SetLookAtAlpha
// (Final, Native, Public)
// Parameters:
// float                          DesiredAlpha                   (Parm)
// float                          DesiredBlendTime               (Parm)

void USkelControlLookAt::SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetLookAtAlpha");

	USkelControlLookAt_SetLookAtAlpha_Params params;
	params.DesiredAlpha = DesiredAlpha;
	params.DesiredBlendTime = DesiredBlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void USkelControlLookAt::InterpolateTargetLocation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.InterpolateTargetLocation");

	USkelControlLookAt_InterpolateTargetLocation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.SetTargetLocation
// (Defined, Public)
// Parameters:
// struct FVector                 NewTargetLocation              (Parm)

void USkelControlLookAt::SetTargetLocation(const struct FVector& NewTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetTargetLocation");

	USkelControlLookAt_SetTargetLocation_Params params;
	params.NewTargetLocation = NewTargetLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnActivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void ASkeletalMeshActor::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnActivateLOI");

	ASkeletalMeshActor_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnDeactivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void ASkeletalMeshActor::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnDeactivateLOI");

	ASkeletalMeshActor_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.ActivateLOI
// (Defined, Event, Public)

void ASkeletalMeshActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ActivateLOI");

	ASkeletalMeshActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.AssignPlayerToLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void ASkeletalMeshActor::AssignPlayerToLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.AssignPlayerToLOI");

	ASkeletalMeshActor_AssignPlayerToLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.DoKismetAttachment
// (Defined, Public)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void ASkeletalMeshActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.DoKismetAttachment");

	ASkeletalMeshActor_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.ShutDown
// (Defined, Simulated, Event, Public)

void ASkeletalMeshActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ShutDown");

	ASkeletalMeshActor_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetMaterial
// (Defined, Event, Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (Parm)

void ASkeletalMeshActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMaterial");

	ASkeletalMeshActor_OnSetMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetSkeletalMesh
// (Defined, Event, Public)
// Parameters:
// class USeqAct_SetSkeletalMesh* Action                         (Parm)

void ASkeletalMeshActor::OnSetSkeletalMesh(class USeqAct_SetSkeletalMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetSkeletalMesh");

	ASkeletalMeshActor_OnSetSkeletalMesh_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim");

	ASkeletalMeshActor_IsActorPlayingFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// (Defined, Simulated, Event, Public)
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UFaceFXAsset* ASkeletalMeshActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetActorFaceFXAsset");

	ASkeletalMeshActor_GetActorFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (Parm)

void ASkeletalMeshActor::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim");

	ASkeletalMeshActor_OnPlayFaceFXAnim_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// (Defined, Simulated, Event, Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* ASkeletalMeshActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent");

	ASkeletalMeshActor_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// (Defined, Simulated, Event, Public)

void ASkeletalMeshActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.StopActorFaceFXAnim");

	ASkeletalMeshActor_StopActorFaceFXAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// (Defined, Simulated, Event, Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (Parm)
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 SeqName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASkeletalMeshActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim");

	ASkeletalMeshActor_PlayActorFaceFXAnim_Params params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.FinishAnimControl
// (Defined, Simulated, Event, Public)

void ASkeletalMeshActor::FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.FinishAnimControl");

	ASkeletalMeshActor_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.SetAnimWeights
// (Simulated, Event, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ASkeletalMeshActor::SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SetAnimWeights");

	ASkeletalMeshActor_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.SetAnimPosition
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ASkeletalMeshActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SetAnimPosition");

	ASkeletalMeshActor_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.BeginAnimControl
// (Defined, Simulated, Event, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ASkeletalMeshActor::BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.BeginAnimControl");

	ASkeletalMeshActor_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ASkeletalMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnToggle");

	ASkeletalMeshActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.TakeDamage
// (Defined, Event, Public)
// Parameters:
// int                            DamageAmount                   (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void ASkeletalMeshActor::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.TakeDamage");

	ASkeletalMeshActor_TakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ASkeletalMeshActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ReplicatedEvent");

	ASkeletalMeshActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PostBeginPlay
// (Defined, Event, Public)

void ASkeletalMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PostBeginPlay");

	ASkeletalMeshActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// (Defined, Event, Public)
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void ASkeletalMeshActorMAT::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetSkelControlScale");

	ASkeletalMeshActorMAT_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// (Defined, Event, Public)
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void ASkeletalMeshActorMAT::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetMorphWeight");

	ASkeletalMeshActorMAT_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// (Defined, Simulated, Event, Public)

void ASkeletalMeshActorMAT::FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.FinishAnimControl");

	ASkeletalMeshActorMAT_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetAnimWeights
// (Defined, Simulated, Event, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ASkeletalMeshActorMAT::SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetAnimWeights");

	ASkeletalMeshActorMAT_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ASkeletalMeshActorMAT::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetAnimPosition");

	ASkeletalMeshActorMAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.BeginAnimControl
// (Defined, Simulated, Event, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ASkeletalMeshActorMAT::BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.BeginAnimControl");

	ASkeletalMeshActorMAT_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// (Native, Public)
// Parameters:
// struct FName                   SkelControlName                (Parm)
// float                          Scale                          (Parm)

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale");

	ASkeletalMeshActorMAT_MAT_SetSkelControlScale_Params params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// (Native, Public)
// Parameters:
// struct FName                   MorphNodeName                  (Parm)
// float                          MorphWeight                    (Parm)

void ASkeletalMeshActorMAT::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight");

	ASkeletalMeshActorMAT_MAT_SetMorphWeight_Params params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl
// (Native, Public)

void ASkeletalMeshActorMAT::MAT_FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl");

	ASkeletalMeshActorMAT_MAT_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// (Native, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ASkeletalMeshActorMAT::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights");

	ASkeletalMeshActorMAT_MAT_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// (Native, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ASkeletalMeshActorMAT::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition");

	ASkeletalMeshActorMAT_MAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl
// (Native, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ASkeletalMeshActorMAT::MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl");

	ASkeletalMeshActorMAT_MAT_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.ResetToDefaults
// (Final, Native, Public)

void UDecalComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.ResetToDefaults");

	UDecalComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.SpawnDecal
// (Defined, Public, HasDefaults)
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (Parm)
// struct FVector                 DecalLocation                  (Parm)
// struct FRotator                DecalOrientation               (Parm)
// float                          Width                          (Parm)
// float                          Height                         (Parm)
// float                          Thickness                      (Parm)
// bool                           bNoClip                        (Parm)
// float                          DecalRotation                  (OptionalParm, Parm)
// class UPrimitiveComponent*     HitComponent                   (OptionalParm, Parm, EditInline)
// bool                           bProjectOnTerrain              (OptionalParm, Parm)
// bool                           bProjectOnSkeletalMeshes       (OptionalParm, Parm)
// struct FName                   HitBone                        (OptionalParm, Parm)
// int                            HitNodeIndex                   (OptionalParm, Parm)
// int                            HitLevelIndex                  (OptionalParm, Parm)
// float                          InDecalLifeSpan                (OptionalParm, Parm)
// class UDecalComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UDecalComponent* ADecalManager::SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SpawnDecal");

	ADecalManager_SpawnDecal_Params params;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InDecalLifeSpan = InDecalLifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.ResetPool
// (Defined, Public)

void ADecalManager::ResetPool()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.ResetPool");

	ADecalManager_ResetPool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.CanSpawnDecals
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADecalManager::CanSpawnDecals()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.CanSpawnDecals");

	ADecalManager_CanSpawnDecals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.DecalFinished
// (Defined, Event, Public)
// Parameters:
// class UDecalComponent*         Decal                          (Parm, EditInline)

void ADecalManager::DecalFinished(class UDecalComponent* Decal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.DecalFinished");

	ADecalManager_DecalFinished_Params params;
	params.Decal = Decal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.AreDynamicDecalsEnabled
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADecalManager::STATIC_AreDynamicDecalsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.AreDynamicDecalsEnabled");

	ADecalManager_AreDynamicDecalsEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FogVolumeDensityComponent.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bSetEnabled                    (Parm)

void UFogVolumeDensityComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityComponent.SetEnabled");

	UFogVolumeDensityComponent_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AFogVolumeDensityInfo::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.OnToggle");

	AFogVolumeDensityInfo_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AFogVolumeDensityInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ReplicatedEvent");

	AFogVolumeDensityInfo_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// (Defined, Event, Public)

void AFogVolumeDensityInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.PostBeginPlay");

	AFogVolumeDensityInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
// (Simulated, Native, Public)
// Parameters:
// TArray<int>                    IgnoreFragments                (Parm, NeedCtorLink)
// float                          MinConnectionArea              (Parm)
// TArray<struct FFragmentGroup>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FFragmentGroup> UFracturedStaticMeshComponent::GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentGroups");

	UFracturedStaticMeshComponent_GetFragmentGroups_Params params;
	params.IgnoreFragments = IgnoreFragments;
	params.MinConnectionArea = MinConnectionArea;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFracturedStaticMeshComponent::GetCoreFragmentIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex");

	UFracturedStaticMeshComponent_GetCoreFragmentIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetNumFragments
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFracturedStaticMeshComponent::GetNumFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetNumFragments");

	UFracturedStaticMeshComponent_GetNumFragments_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
// (Native, Public)
// Parameters:
// int                            FragmentIndex                  (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal");

	UFracturedStaticMeshComponent_GetFragmentAverageExteriorNormal_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentBox
// (Native, Public)
// Parameters:
// int                            FragmentIndex                  (Parm)
// struct FBox                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBox UFracturedStaticMeshComponent::GetFragmentBox(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentBox");

	UFracturedStaticMeshComponent_GetFragmentBox_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsRootFragment
// (Simulated, Native, Public)
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsRootFragment(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsRootFragment");

	UFracturedStaticMeshComponent_IsRootFragment_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
// (Simulated, Native, Public)
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsFragmentDestroyable(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable");

	UFracturedStaticMeshComponent_IsFragmentDestroyable_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsFragmentVisible
// (Simulated, Native, Public)
// Parameters:
// int                            FragmentIndex                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::IsFragmentVisible(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsFragmentVisible");

	UFracturedStaticMeshComponent_IsFragmentVisible_Params params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetVisibleFragments
// (Simulated, Native, Public)
// Parameters:
// TArray<unsigned char>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<unsigned char> UFracturedStaticMeshComponent::GetVisibleFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetVisibleFragments");

	UFracturedStaticMeshComponent_GetVisibleFragments_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
// (Simulated, Native, Public)
// Parameters:
// TArray<unsigned char>          VisibilityFactors              (Parm, NeedCtorLink)

void UFracturedStaticMeshComponent::SetVisibleFragments(TArray<unsigned char> VisibilityFactors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.SetVisibleFragments");

	UFracturedStaticMeshComponent_SetVisibleFragments_Params params;
	params.VisibilityFactors = VisibilityFactors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshComponent.SetStaticMesh
// (Simulated, Native, Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UFracturedStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.SetStaticMesh");

	UFracturedStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FVector                 Origin                         (Parm)
// float                          Radius                         (Parm)
// float                          RBStrength                     (Parm)

void AFracturedStaticMeshActor::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius");

	AFracturedStaticMeshActor_BreakOffPartsInRadius_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.Explode
// (Defined, Event, Public, HasDefaults)

void AFracturedStaticMeshActor::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.Explode");

	AFracturedStaticMeshActor_Explode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.TakeDamage
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AFracturedStaticMeshActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.TakeDamage");

	AFracturedStaticMeshActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
// (Defined, Public, HasDefaults)
// Parameters:
// TArray<unsigned char>          FragmentVis                    (Parm, NeedCtorLink)
// TArray<int>                    IgnoreFrags                    (Parm, NeedCtorLink)
// struct FVector                 ChunkDir                       (Parm)
// TArray<class AFracturedStaticMeshPart*> DisableCollWithPart            (Parm, NeedCtorLink)
// TArray<unsigned char>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<unsigned char> AFracturedStaticMeshActor::BreakOffIsolatedIslands(TArray<unsigned char> FragmentVis, TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands");

	AFracturedStaticMeshActor_BreakOffIsolatedIslands_Params params;
	params.FragmentVis = FragmentVis;
	params.IgnoreFrags = IgnoreFrags;
	params.ChunkDir = ChunkDir;
	params.DisableCollWithPart = DisableCollWithPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.ResetHealth
// (Defined, Event, Public, HasDefaults)

void AFracturedStaticMeshActor::ResetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetHealth");

	AFracturedStaticMeshActor_ResetHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.PostBeginPlay
// (Defined, Event, Public)

void AFracturedStaticMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.PostBeginPlay");

	AFracturedStaticMeshActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.RecreatePhysState
// (Native, Public)

void AFracturedStaticMeshActor::RecreatePhysState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.RecreatePhysState");

	AFracturedStaticMeshActor_RecreatePhysState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.SpawnPartMulti
// (Native, Public)
// Parameters:
// TArray<int>                    ChunkIndices                   (Parm, NeedCtorLink)
// struct FVector                 InitialVel                     (Parm)
// struct FVector                 InitialAngVel                  (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPartMulti");

	AFracturedStaticMeshActor_SpawnPartMulti_Params params;
	params.ChunkIndices = ChunkIndices;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.SpawnPart
// (Native, Public)
// Parameters:
// int                            ChunkIndex                     (Parm)
// struct FVector                 InitialVel                     (Parm)
// struct FVector                 InitialAngVel                  (Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (Parm, OutParm, ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPart");

	AFracturedStaticMeshActor_SpawnPart_Params params;
	params.ChunkIndex = ChunkIndex;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshPart.TakeDamage
// (Defined, Event, Public)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AFracturedStaticMeshPart::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TakeDamage");

	AFracturedStaticMeshPart_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.RigidBodyCollision
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void AFracturedStaticMeshPart::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.RigidBodyCollision");

	AFracturedStaticMeshPart_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.MaterialInstance.ClearParameterValues
// (Native, Public)

void UMaterialInstance::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.ClearParameterValues");

	UMaterialInstance_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetFontParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstance::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetFontParameterValue");

	UMaterialInstance_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetTextureParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstance::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetTextureParameterValue");

	UMaterialInstance_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       Value                          (Parm, NeedCtorLink)

void UMaterialInstance::SetScalarCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveFloat& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarCurveParameterValue");

	UMaterialInstance_SetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetScalarParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstance::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarParameterValue");

	UMaterialInstance_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetVectorParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Parm)

void UMaterialInstance::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetVectorParameterValue");

	UMaterialInstance_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetParent
// (Native, Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstance::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetParent");

	UMaterialInstance_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.ClearParameterValues
// (Native, Public)

void UMaterialInstanceConstant::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.ClearParameterValues");

	UMaterialInstanceConstant_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstanceConstant::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetFontParameterValue");

	UMaterialInstanceConstant_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Parm)

void UMaterialInstanceConstant::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetVectorParameterValue");

	UMaterialInstanceConstant_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstanceConstant::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetTextureParameterValue");

	UMaterialInstanceConstant_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceConstant::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetScalarParameterValue");

	UMaterialInstanceConstant_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetParent
// (Native, Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstanceConstant::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetParent");

	UMaterialInstanceConstant_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// (Native, Public)

void UMaterialInstanceTimeVarying::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.ClearParameterValues");

	UMaterialInstanceTimeVarying_ClearParameterValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UFont*                   FontValue                      (Parm)
// int                            FontPage                       (Parm)

void UMaterialInstanceTimeVarying::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue");

	UMaterialInstanceTimeVarying_SetFontParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetVectorStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime");

	UMaterialInstanceTimeVarying_SetVectorStartTime_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveVector      Value                          (Parm, NeedCtorLink)

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue");

	UMaterialInstanceTimeVarying_SetVectorCurveParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Value                          (Parm)

void UMaterialInstanceTimeVarying::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue");

	UMaterialInstanceTimeVarying_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void UMaterialInstanceTimeVarying::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue");

	UMaterialInstanceTimeVarying_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetDuration
// (Native, Public)
// Parameters:
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetDuration(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetDuration");

	UMaterialInstanceTimeVarying_SetDuration_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetScalarStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime");

	UMaterialInstanceTimeVarying_SetScalarStartTime_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FInterpCurveFloat       Value                          (Parm, NeedCtorLink)

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue(const struct FName& ParameterName, const struct FInterpCurveFloat& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue");

	UMaterialInstanceTimeVarying_SetScalarCurveParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UMaterialInstanceTimeVarying::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue");

	UMaterialInstanceTimeVarying_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetParent
// (Native, Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (Parm)

void UMaterialInstanceTimeVarying::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetParent");

	UMaterialInstanceTimeVarying_SetParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnSetParticleSysParam
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_SetParticleSysParam* Action                         (Parm)

void AEmitter::OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnSetParticleSysParam");

	AEmitter_OnSetParticleSysParam_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetActorParameter
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	AEmitter_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetExtColorParameter
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// unsigned char                  Red                            (Parm)
// unsigned char                  Green                          (Parm)
// unsigned char                  Blue                           (Parm)
// unsigned char                  Alpha                          (Parm)

void AEmitter::SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetExtColorParameter");

	AEmitter_SetExtColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetColorParameter
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FColor                  Param                          (Parm)

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	AEmitter_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetVectorParameter
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	AEmitter_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetFloatParameter
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	AEmitter_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AEmitter::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnToggle");

	AEmitter_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleSystemFinished
// (Defined, Public)
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, EditInline)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	AEmitter_OnParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AEmitter::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ReplicatedEvent");

	AEmitter_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AEmitter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.PostBeginPlay");

	AEmitter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetTemplate
// (Native, Event, Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)
// bool                           bDestroyOnFinish               (OptionalParm, Parm)

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	AEmitter_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ResetToDefaults
// (Final, Native, Public)

void UParticleSystemComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ResetToDefaults");

	UParticleSystemComponent_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActive
// (Final, Native, Public)
// Parameters:
// bool                           bNowActive                     (Parm)

void UParticleSystemComponent::SetActive(bool bNowActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActive");

	UParticleSystemComponent_SetActive_Params params;
	params.bNowActive = bNowActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ClearParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// TEnumAsByte<EParticleSysParamType> ParameterType                  (OptionalParm, Parm)

void UParticleSystemComponent::ClearParameter(const struct FName& ParameterName, TEnumAsByte<EParticleSysParamType> ParameterType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ClearParameter");

	UParticleSystemComponent_ClearParameter_Params params;
	params.ParameterName = ParameterName;
	params.ParameterType = ParameterType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetMaterialParameter
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   InName                         (Const, Parm)
// class UMaterialInterface*      OutMaterial                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaterialParameter");

	UParticleSystemComponent_GetMaterialParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMaterial != nullptr)
		*OutMaterial = params.OutMaterial;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetActorParameter
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   InName                         (Const, Parm)
// class AActor*                  OutActor                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetActorParameter");

	UParticleSystemComponent_GetActorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActor != nullptr)
		*OutActor = params.OutActor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetColorParameter
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   InName                         (Const, Parm)
// struct FColor                  OutColor                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FColor* OutColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetColorParameter");

	UParticleSystemComponent_GetColorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutColor != nullptr)
		*OutColor = params.OutColor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetVectorParameter
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   InName                         (Const, Parm)
// struct FVector                 OutVector                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetVectorParameter");

	UParticleSystemComponent_GetVectorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetFloatParameter
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   InName                         (Const, Parm)
// float                          OutFloat                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetFloatParameter");

	UParticleSystemComponent_GetFloatParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UMaterialInterface*      Param                          (Parm)

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	UParticleSystemComponent_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

	UParticleSystemComponent_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FColor                  Param                          (Parm)

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

	UParticleSystemComponent_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

	UParticleSystemComponent_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

	UParticleSystemComponent_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystemComponent::GetEditorLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetEditorLODLevel");

	UParticleSystemComponent_GetEditorLODLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetLODLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UParticleSystemComponent::GetLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetLODLevel");

	UParticleSystemComponent_GetLODLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// (Final, Native, Public)
// Parameters:
// int                            InLODLevel                     (Parm)

void UParticleSystemComponent::SetEditorLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEditorLODLevel");

	UParticleSystemComponent_SetEditorLODLevel_Params params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetLODLevel
// (Final, Native, Public)
// Parameters:
// int                            InLODLevel                     (Parm)

void UParticleSystemComponent::SetLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetLODLevel");

	UParticleSystemComponent_SetLODLevel_Params params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewTargetStrength              (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	UParticleSystemComponent_SetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTangentPoint                (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	UParticleSystemComponent_SetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTargetPoint                 (Parm)
// int                            TargetIndex                    (Parm)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	UParticleSystemComponent_SetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewSourceStrength              (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	UParticleSystemComponent_SetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewTangentPoint                (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	UParticleSystemComponent_SetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewSourcePoint                 (Parm)
// int                            SourceIndex                    (Parm)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	UParticleSystemComponent_SetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamDistance
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          Distance                       (Parm)

void UParticleSystemComponent::SetBeamDistance(int EmitterIndex, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamDistance");

	UParticleSystemComponent_SetBeamDistance_Params params;
	params.EmitterIndex = EmitterIndex;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// struct FVector                 NewEndPoint                    (Parm)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	UParticleSystemComponent_SetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// float                          NewFactor                      (Parm)

void UParticleSystemComponent::SetBeamTessellationFactor(int EmitterIndex, float NewFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTessellationFactor");

	UParticleSystemComponent_SetBeamTessellationFactor_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewFactor = NewFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamType
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// int                            NewMethod                      (Parm)

void UParticleSystemComponent::SetBeamType(int EmitterIndex, int NewMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamType");

	UParticleSystemComponent_SetBeamType_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewMethod = NewMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// (Native, Public)

void UParticleSystemComponent::RewindEmitterInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstances");

	UParticleSystemComponent_RewindEmitterInstances_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)

void UParticleSystemComponent::RewindEmitterInstance(int EmitterIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstance");

	UParticleSystemComponent_RewindEmitterInstance_Params params;
	params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// bool                           bKill                          (Parm)

void UParticleSystemComponent::SetKillOnCompleted(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnCompleted");

	UParticleSystemComponent_SetKillOnCompleted_Params params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// (Native, Public)
// Parameters:
// int                            EmitterIndex                   (Parm)
// bool                           bKill                          (Parm)

void UParticleSystemComponent::SetKillOnDeactivate(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnDeactivate");

	UParticleSystemComponent_SetKillOnDeactivate_Params params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_GetSkipUpdateDynamicDataDuringTick_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// (Final, Native, Public)
// Parameters:
// bool                           bInSkipUpdateDynamicDataDuringTick (Parm)

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick");

	UParticleSystemComponent_SetSkipUpdateDynamicDataDuringTick_Params params;
	params.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.KillParticlesForced
// (Final, Native, Public)

void UParticleSystemComponent::KillParticlesForced()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesForced");

	UParticleSystemComponent_KillParticlesForced_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.DeactivateSystem
// (Final, Native, Public)

void UParticleSystemComponent::DeactivateSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DeactivateSystem");

	UParticleSystemComponent_DeactivateSystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ActivateSystem
// (Final, Native, Public)
// Parameters:
// bool                           bFlagAsJustAttached            (OptionalParm, Parm)

void UParticleSystemComponent::ActivateSystem(bool bFlagAsJustAttached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ActivateSystem");

	UParticleSystemComponent_ActivateSystem_Params params;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetTemplate
// (Final, Native, Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	UParticleSystemComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.OnSystemFinished
// (Public, Delegate)
// Parameters:
// class UParticleSystemComponent* PSystem                        (Parm, EditInline)

void UParticleSystemComponent::OnSystemFinished(class UParticleSystemComponent* PSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.OnSystemFinished");

	UParticleSystemComponent_OnSystemFinished_Params params;
	params.PSystem = PSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnActivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void AKActor::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnActivateLOI");

	AKActor_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnDeactivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void AKActor::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnDeactivateLOI");

	AKActor_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ActivateLOI
// (Defined, Event, Public)

void AKActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ActivateLOI");

	AKActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.AssignPlayerToLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void AKActor::AssignPlayerToLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.AssignPlayerToLOI");

	AKActor_AssignPlayerToLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.Reset
// (Defined, Simulated, Public)

void AKActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Reset");

	AKActor_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        inAction                       (Parm)

void AKActor::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnTeleport");

	AKActor_OnTeleport_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AKActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnToggle");

	AKActor_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeRadiusDamage
// (Defined, Simulated, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AKActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeRadiusDamage");

	AKActor_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeDamage
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AKActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeDamage");

	AKActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ApplyImpulse
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ImpulseDir                     (Parm)
// float                          ImpulseMag                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void AKActor::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ApplyImpulse");

	AKActor_ApplyImpulse_Params params;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ReplicatedEvent
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// struct FName                   VarName                        (Parm)

void AKActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ReplicatedEvent");

	AKActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.SetPhysicalCollisionProperties
// (Defined, Simulated, Public)

void AKActor::SetPhysicalCollisionProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.SetPhysicalCollisionProperties");

	AKActor_SetPhysicalCollisionProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.FellOutOfWorld
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  dmgType                        (Parm)

void AKActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.FellOutOfWorld");

	AKActor_FellOutOfWorld_Params params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AKActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.PostBeginPlay");

	AKActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ResolveRBState
// (Final, Native, Public)

void AKActor::ResolveRBState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ResolveRBState");

	AKActor_ResolveRBState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.GetKActorPhysMaterial
// (Final, Native, Public)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.GetKActorPhysMaterial");

	AKActor_GetKActorPhysMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KActorSpawnable.ResetComponents
// (Native, Public)

void AKActorSpawnable::ResetComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.ResetComponents");

	AKActorSpawnable_ResetComponents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Recycle
// (Defined, Simulated, Public)

void AKActorSpawnable::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Recycle");

	AKActorSpawnable_Recycle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Initialize
// (Defined, Simulated, Public)

void AKActorSpawnable::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Initialize");

	AKActorSpawnable_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.DoKismetAttachment
// (Defined, Public)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// class USeqAct_AttachToActor*   Action                         (Parm)

void AKAsset::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.DoKismetAttachment");

	AKAsset_DoKismetAttachment_Params params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        inAction                       (Parm)

void AKAsset::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnTeleport");

	AKAsset_OnTeleport_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AKAsset::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnToggle");

	AKAsset_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeRadiusDamage
// (Defined, Simulated, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void AKAsset::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeRadiusDamage");

	AKAsset_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeDamage
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Damage                         (Parm)
// class AController*             EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)

void AKAsset::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeDamage");

	AKAsset_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AKAsset::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.ReplicatedEvent");

	AKAsset_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AKAsset::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.PostBeginPlay");

	AKAsset_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// (Defined, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// class UPhysicalMaterialPropertyBase* ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty");

	UPhysicalMaterial_GetPhysicalMaterialProperty_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// (Final, Native, Public)
// Parameters:
// struct FName                   ConName                        (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class URB_ConstraintInstance*  ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindConstraintInstance");

	UPhysicsAssetInstance_FindConstraintInstance_Params params;
	params.ConName = ConName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindBodyInstance
// (Final, Native, Public)
// Parameters:
// struct FName                   BodyName                       (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class URB_BodyInstance*        ReturnValue                    (Parm, OutParm, ReturnParm)

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindBodyInstance");

	UPhysicsAssetInstance_FindBodyInstance_Params params;
	params.BodyName = BodyName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// (Final, Native, Public)
// Parameters:
// bool                           bNewFixed                      (Parm)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed");

	UPhysicsAssetInstance_SetFullAnimWeightBonesFixed_Params params;
	params.bNewFixed = bNewFixed;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// (Final, Native, Public)
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody");

	UPhysicsAssetInstance_SetNamedBodiesBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// (Final, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// float                          InBoneLinearSpring             (Parm)
// float                          InBoneAngularSpring            (Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)

void UPhysicsAssetInstance::SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings");

	UPhysicsAssetInstance_SetNamedRBBoneSprings_Params params;
	params.bEnable = bEnable;
	params.BoneNames = BoneNames;
	params.InBoneLinearSpring = InBoneLinearSpring;
	params.InBoneAngularSpring = InBoneAngularSpring;
	params.SkelMeshComp = SkelMeshComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// (Final, Native, Public)
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams");

	UPhysicsAssetInstance_SetAllMotorsAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)
// bool                           bSetOtherBodiesToComplement    (OptionalParm, Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetNamedMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive");

	UPhysicsAssetInstance_SetAllMotorsAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// (Final, Native, Public)
// Parameters:
// bool                           bNewFixed                      (Parm)
// TArray<struct FName>           BoneNames                      (Parm, NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (Parm, EditInline)
// bool                           bSetOtherBodiesToComplement    (OptionalParm, Parm)

void UPhysicsAssetInstance::SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed");

	UPhysicsAssetInstance_SetNamedBodiesFixed_Params params;
	params.bNewFixed = bNewFixed;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// (Final, Native, Public)
// Parameters:
// bool                           bNewFixed                      (Parm)

void UPhysicsAssetInstance::SetAllBodiesFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllBodiesFixed");

	UPhysicsAssetInstance_SetAllBodiesFixed_Params params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// (Final, Native, Public)
// Parameters:
// struct FName                   InBoneName                     (Parm)
// class UPhysicsAsset*           InAsset                        (Parm)
// class USkeletalMesh*           InSkelMesh                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPhysicsAssetInstance::GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone");

	UPhysicsAssetInstance_GetTotalMassBelowBone_Params params;
	params.InBoneName = InBoneName;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveStrength
// (Final, Native, Public)
// Parameters:
// float                          InAngularSpringStrength        (Parm)
// float                          InAngularDampingStrength       (Parm)
// float                          InAngularForceLimitStrength    (Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (Parm, EditInline)

void UPhysicsAssetInstance::SetAllMotorsAngularDriveStrength(float InAngularSpringStrength, float InAngularDampingStrength, float InAngularForceLimitStrength, class USkeletalMeshComponent* SkelMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveStrength");

	UPhysicsAssetInstance_SetAllMotorsAngularDriveStrength_Params params;
	params.InAngularSpringStrength = InAngularSpringStrength;
	params.InAngularDampingStrength = InAngularDampingStrength;
	params.InAngularForceLimitStrength = InAngularForceLimitStrength;
	params.SkelMeshComp = SkelMeshComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// (Final, Native, Public)
// Parameters:
// float                          InAngularSpringScale           (Parm)
// float                          InAngularDampingScale          (Parm)
// float                          InAngularForceLimitScale       (Parm)

void UPhysicsAssetInstance::SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAngularDriveScale");

	UPhysicsAssetInstance_SetAngularDriveScale_Params params;
	params.InAngularSpringScale = InAngularSpringScale;
	params.InAngularDampingScale = InAngularDampingScale;
	params.InAngularForceLimitScale = InAngularForceLimitScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// (Final, Native, Public)
// Parameters:
// float                          InLinearSpringScale            (Parm)
// float                          InLinearDampingScale           (Parm)
// float                          InLinearForceLimitScale        (Parm)

void UPhysicsAssetInstance::SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetLinearDriveScale");

	UPhysicsAssetInstance_SetLinearDriveScale_Params params;
	params.InLinearSpringScale = InLinearSpringScale;
	params.InLinearDampingScale = InLinearDampingScale;
	params.InLinearForceLimitScale = InLinearForceLimitScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableCollisionResponse
// (Final, Native, Public)
// Parameters:
// bool                           bEnableResponse                (Parm)

void URB_BodyInstance::EnableCollisionResponse(bool bEnableResponse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableCollisionResponse");

	URB_BodyInstance_EnableCollisionResponse_Params params;
	params.bEnableResponse = bEnableResponse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// (Final, Native, Public)
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm)

void URB_BodyInstance::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetPhysMaterialOverride");

	URB_BodyInstance_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBlockRigidBody
// (Final, Native, Public)
// Parameters:
// bool                           bNewBlockRigidBody             (Parm)

void URB_BodyInstance::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBlockRigidBody");

	URB_BodyInstance_SetBlockRigidBody_Params params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FMatrix                 InBoneTarget                   (Const, Parm, OutParm)
// bool                           bTeleport                      (Parm)

void URB_BodyInstance::SetBoneSpringTarget(bool bTeleport, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringTarget");

	URB_BodyInstance_SetBoneSpringTarget_Params params;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.SetBoneSpringParams
// (Final, Native, Public)
// Parameters:
// float                          InLinearSpring                 (Parm)
// float                          InLinearDamping                (Parm)
// float                          InAngularSpring                (Parm)
// float                          InAngularDamping               (Parm)

void URB_BodyInstance::SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringParams");

	URB_BodyInstance_SetBoneSpringParams_Params params;
	params.InLinearSpring = InLinearSpring;
	params.InLinearDamping = InLinearDamping;
	params.InAngularSpring = InAngularSpring;
	params.InAngularDamping = InAngularDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableBoneSpring
// (Final, Native, Public, HasOutParms)
// Parameters:
// bool                           bInEnableLinear                (Parm)
// bool                           bInEnableAngular               (Parm)
// struct FMatrix                 InBoneTarget                   (Const, Parm, OutParm)

void URB_BodyInstance::EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableBoneSpring");

	URB_BodyInstance_EnableBoneSpring_Params params;
	params.bInEnableLinear = bInEnableLinear;
	params.bInEnableAngular = bInEnableAngular;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity");

	URB_BodyInstance_GetUnrealWorldAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocity");

	URB_BodyInstance_GetUnrealWorldVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// (Final, Native, Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix URB_BodyInstance::GetUnrealWorldTM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldTM");

	URB_BodyInstance_GetUnrealWorldTM_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsValidBodyInstance
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool URB_BodyInstance::IsValidBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsValidBodyInstance");

	URB_BodyInstance_IsValidBodyInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsFixed
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool URB_BodyInstance::IsFixed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsFixed");

	URB_BodyInstance_IsFixed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.SetFixed
// (Final, Native, Public)
// Parameters:
// bool                           bNewFixed                      (Parm)

void URB_BodyInstance::SetFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetFixed");

	URB_BodyInstance_SetFixed_Params params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnDestroy
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (Parm)

void ARB_ConstraintActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnDestroy");

	ARB_ConstraintActor_OnDestroy_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.TermConstraint
// (Final, Native, Public)

void ARB_ConstraintActor::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.TermConstraint");

	ARB_ConstraintActor_TermConstraint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.InitConstraint
// (Final, Native, Public)
// Parameters:
// class AActor*                  Actor1                         (Parm)
// class AActor*                  Actor2                         (Parm)
// struct FName                   Actor1Bone                     (OptionalParm, Parm)
// struct FName                   Actor2Bone                     (OptionalParm, Parm)
// float                          BreakThreshold                 (OptionalParm, Parm)

void ARB_ConstraintActor::InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.InitConstraint");

	ARB_ConstraintActor_InitConstraint_Params params;
	params.Actor1 = Actor1;
	params.Actor2 = Actor2;
	params.Actor1Bone = Actor1Bone;
	params.Actor2Bone = Actor2Bone;
	params.BreakThreshold = BreakThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.SetDisableCollision
// (Final, Native, Public)
// Parameters:
// bool                           NewDisableCollision            (Parm)

void ARB_ConstraintActor::SetDisableCollision(bool NewDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.SetDisableCollision");

	ARB_ConstraintActor_SetDisableCollision_Params params;
	params.NewDisableCollision = NewDisableCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FMatrix                 NewTM                          (Parm, OutParm)

void URB_ConstraintInstance::MoveKinActorTransform(struct FMatrix* NewTM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.MoveKinActorTransform");

	URB_ConstraintInstance_MoveKinActorTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewTM != nullptr)
		*NewTM = params.NewTM;
}


// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// (Final, Native, Public)
// Parameters:
// float                          NewLimitSize                   (Parm)

void URB_ConstraintInstance::SetLinearLimitSize(float NewLimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearLimitSize");

	URB_ConstraintInstance_SetLinearLimitSize_Params params;
	params.NewLimitSize = NewLimitSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// (Final, Native, Public)
// Parameters:
// float                          InSwing1LimitScale             (Parm)
// float                          InSwing2LimitScale             (Parm)
// float                          InTwistLimitScale              (Parm)
// class URB_ConstraintSetup*     InSetup                        (Parm)

void URB_ConstraintInstance::SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale");

	URB_ConstraintInstance_SetAngularDOFLimitScale_Params params;
	params.InSwing1LimitScale = InSwing1LimitScale;
	params.InSwing2LimitScale = InSwing2LimitScale;
	params.InTwistLimitScale = InTwistLimitScale;
	params.InSetup = InSetup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// (Final, Native, Public)
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)

void URB_ConstraintInstance::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDriveParams");

	URB_ConstraintInstance_SetAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// (Final, Native, Public)
// Parameters:
// struct FVector                 InVelTarget                    (Parm)

void URB_ConstraintInstance::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget");

	URB_ConstraintInstance_SetAngularVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// (Final, Native, Public)
// Parameters:
// struct FQuat                   InPosTarget                    (Parm)

void URB_ConstraintInstance::SetAngularPositionTarget(const struct FQuat& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionTarget");

	URB_ConstraintInstance_SetAngularPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// (Final, Native, Public)
// Parameters:
// float                          InSpring                       (Parm)
// float                          InDamping                      (Parm)
// float                          InForceLimit                   (Parm)

void URB_ConstraintInstance::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearDriveParams");

	URB_ConstraintInstance_SetLinearDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// (Final, Native, Public)
// Parameters:
// struct FVector                 InVelTarget                    (Parm)

void URB_ConstraintInstance::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget");

	URB_ConstraintInstance_SetLinearVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// (Final, Native, Public)
// Parameters:
// struct FVector                 InPosTarget                    (Parm)

void URB_ConstraintInstance::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionTarget");

	URB_ConstraintInstance_SetLinearPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)

void URB_ConstraintInstance::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive");

	URB_ConstraintInstance_SetAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableSwingDrive              (Parm)
// bool                           bEnableTwistDrive              (Parm)

void URB_ConstraintInstance::SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionDrive");

	URB_ConstraintInstance_SetAngularPositionDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableXDrive                  (Parm)
// bool                           bEnableYDrive                  (Parm)
// bool                           bEnableZDrive                  (Parm)

void URB_ConstraintInstance::SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive");

	URB_ConstraintInstance_SetLinearVelocityDrive_Params params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// (Final, Native, Public)
// Parameters:
// bool                           bEnableXDrive                  (Parm)
// bool                           bEnableYDrive                  (Parm)
// bool                           bEnableZDrive                  (Parm)

void URB_ConstraintInstance::SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionDrive");

	URB_ConstraintInstance_SetLinearPositionDrive_Params params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector URB_ConstraintInstance::GetConstraintLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetConstraintLocation");

	URB_ConstraintInstance_GetConstraintLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.TermConstraint
// (Final, Native, Public)

void URB_ConstraintInstance::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.TermConstraint");

	URB_ConstraintInstance_TermConstraint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.InitConstraint
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     PrimComp1                      (Parm, EditInline)
// class UPrimitiveComponent*     PrimComp2                      (Parm, EditInline)
// class URB_ConstraintSetup*     Setup                          (Parm)
// float                          Scale                          (Parm)
// class AActor*                  inOwner                        (Parm)
// class UPrimitiveComponent*     InPrimComp                     (Parm, EditInline)
// bool                           bMakeKinForBody1               (Parm)

void URB_ConstraintInstance::InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* inOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.InitConstraint");

	URB_ConstraintInstance_InitConstraint_Params params;
	params.PrimComp1 = PrimComp1;
	params.PrimComp2 = PrimComp2;
	params.Setup = Setup;
	params.Scale = Scale;
	params.inOwner = inOwner;
	params.InPrimComp = InPrimComp;
	params.bMakeKinForBody1 = bMakeKinForBody1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_CylindricalForceActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_CylindricalForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_CylindricalForceActor.OnToggle");

	ARB_CylindricalForceActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GetOrientation
// (Native, Public)
// Parameters:
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQuat URB_Handle::GetOrientation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GetOrientation");

	URB_Handle_GetOrientation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_Handle.SetOrientation
// (Native, Public)
// Parameters:
// struct FQuat                   NewOrientation                 (Parm)

void URB_Handle::SetOrientation(const struct FQuat& NewOrientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetOrientation");

	URB_Handle_SetOrientation_Params params;
	params.NewOrientation = NewOrientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.UpdateSmoothLocation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 NewLocation                    (Const, Parm, OutParm)

void URB_Handle::UpdateSmoothLocation(struct FVector* NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.UpdateSmoothLocation");

	URB_Handle_UpdateSmoothLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewLocation != nullptr)
		*NewLocation = params.NewLocation;
}


// Function Engine.RB_Handle.SetSmoothLocation
// (Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// float                          MoveTime                       (Parm)

void URB_Handle::SetSmoothLocation(const struct FVector& NewLocation, float MoveTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetSmoothLocation");

	URB_Handle_SetSmoothLocation_Params params;
	params.NewLocation = NewLocation;
	params.MoveTime = MoveTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.SetLocation
// (Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)

void URB_Handle::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetLocation");

	URB_Handle_SetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.ReleaseComponent
// (Native, Public)

void URB_Handle::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.ReleaseComponent");

	URB_Handle_ReleaseComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GrabComponent
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, EditInline)
// struct FName                   InBoneName                     (Parm)
// struct FVector                 GrabLocation                   (Parm)
// bool                           bConstrainRotation             (Parm)

void URB_Handle::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GrabComponent");

	URB_Handle_GrabComponent_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ARB_LineImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.ReplicatedEvent");

	ARB_LineImpulseActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_LineImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.OnToggle");

	ARB_LineImpulseActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.FireLineImpulse
// (Final, Native, Public)

void ARB_LineImpulseActor::FireLineImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.FireLineImpulse");

	ARB_LineImpulseActor_FireLineImpulse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialForceActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_RadialForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialForceActor.OnToggle");

	ARB_RadialForceActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void ARB_RadialImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.ReplicatedEvent");

	ARB_RadialImpulseActor_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (Parm)

void ARB_RadialImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.OnToggle");

	ARB_RadialImpulseActor_OnToggle_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseComponent.FireImpulse
// (Native, Public)
// Parameters:
// struct FVector                 Origin                         (Parm)

void URB_RadialImpulseComponent::FireImpulse(const struct FVector& Origin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseComponent.FireImpulse");

	URB_RadialImpulseComponent_FireImpulse_Params params;
	params.Origin = Origin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.Clear
// (Native, Public)

void URB_Spring::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.Clear");

	URB_Spring_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.SetComponents
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*     InComponent1                   (Parm, EditInline)
// struct FName                   InBoneName1                    (Parm)
// struct FVector                 Position1                      (Parm)
// class UPrimitiveComponent*     InComponent2                   (Parm, EditInline)
// struct FName                   InBoneName2                    (Parm)
// struct FVector                 Position2                      (Parm)

void URB_Spring::SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.SetComponents");

	URB_Spring_SetComponents_Params params;
	params.InComponent1 = InComponent1;
	params.InBoneName1 = InBoneName1;
	params.Position1 = Position1;
	params.InComponent2 = InComponent2;
	params.InBoneName2 = InBoneName2;
	params.Position2 = Position2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Thruster.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ARB_Thruster::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Thruster.OnToggle");

	ARB_Thruster_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.GetSVehicleDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         DebugInfo                      (Parm, OutParm, NeedCtorLink)

void ASVehicle::GetSVehicleDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetSVehicleDebug");

	ASVehicle_GetSVehicleDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.SVehicle.HermiteEval
// (Defined, Simulated, Public)
// Parameters:
// float                          Slip                           (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ASVehicle::HermiteEval(float Slip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HermiteEval");

	ASVehicle_HermiteEval_Params params;
	params.Slip = Slip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.DisplayWheelsDebug
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          YL                             (Parm)

void ASVehicle::DisplayWheelsDebug(class AHUD* HUD, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayWheelsDebug");

	ASVehicle_DisplayWheelsDebug_Params params;
	params.HUD = HUD;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.DisplayDebug
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (Parm)
// float                          out_YL                         (Parm, OutParm)
// float                          out_YPos                       (Parm, OutParm)

void ASVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayDebug");

	ASVehicle_DisplayDebug_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.SVehicle.PostTeleport
// (Defined, Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void ASVehicle::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostTeleport");

	ASVehicle_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SuspensionHeavyShift
// (Simulated, Event, Public)
// Parameters:
// float                          Delta                          (Parm)

void ASVehicle::SuspensionHeavyShift(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SuspensionHeavyShift");

	ASVehicle_SuspensionHeavyShift_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.RigidBodyCollision
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void ASVehicle::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.RigidBodyCollision");

	ASVehicle_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.SVehicle.DrivingStatusChanged
// (Defined, Simulated, Public)

void ASVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DrivingStatusChanged");

	ASVehicle_DrivingStatusChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayExitSound
// (Defined, Simulated, Public)

void ASVehicle::VehiclePlayExitSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayExitSound");

	ASVehicle_VehiclePlayExitSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayEnterSound
// (Defined, Simulated, Public)

void ASVehicle::VehiclePlayEnterSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayEnterSound");

	ASVehicle_VehiclePlayEnterSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSoundTimed
// (Defined, Simulated, Public)

void ASVehicle::StopEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSoundTimed");

	ASVehicle_StopEngineSoundTimed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSound
// (Defined, Simulated, Public)

void ASVehicle::StopEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSound");

	ASVehicle_StopEngineSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSoundTimed
// (Defined, Simulated, Public)

void ASVehicle::StartEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSoundTimed");

	ASVehicle_StartEngineSoundTimed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSound
// (Defined, Simulated, Public)

void ASVehicle::StartEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSound");

	ASVehicle_StartEngineSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.HasWheelsOnGround
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::HasWheelsOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HasWheelsOnGround");

	ASVehicle_HasWheelsOnGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.TryToDrive
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TryToDrive");

	ASVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.GetDefaultCameraMode
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       RequestedBy                    (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ASVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetDefaultCameraMode");

	ASVehicle_GetDefaultCameraMode_Params params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.CalcCamera
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.CalcCamera");

	ASVehicle_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.SVehicle.Died
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Died");

	ASVehicle_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.AddVelocity
// (Defined, Public)
// Parameters:
// struct FVector                 NewVelocity                    (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)

void ASVehicle::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddVelocity");

	ASVehicle_AddVelocity_Params params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.InitVehicleRagdoll
// (Native, Public)
// Parameters:
// class USkeletalMesh*           RagdollMesh                    (Parm)
// class UPhysicsAsset*           RagdollPhysAsset               (Parm)
// struct FVector                 ActorMove                      (Parm)

void ASVehicle::InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.InitVehicleRagdoll");

	ASVehicle_InitVehicleRagdoll_Params params;
	params.RagdollMesh = RagdollMesh;
	params.RagdollPhysAsset = RagdollPhysAsset;
	params.ActorMove = ActorMove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TakeRadiusDamage
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  DamageCauser                   (Parm)

void ASVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TakeRadiusDamage");

	ASVehicle_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopVehicleSounds
// (Defined, Simulated, Public)

void ASVehicle::StopVehicleSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopVehicleSounds");

	ASVehicle_StopVehicleSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TurnOff
// (Defined, Simulated, Public)

void ASVehicle::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TurnOff");

	ASVehicle_TurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.Destroyed
// (Defined, Simulated, Event, Public)

void ASVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Destroyed");

	ASVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostInitAnimTree
// (Defined, Simulated, Event, Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void ASVehicle::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostInitAnimTree");

	ASVehicle_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ASVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostBeginPlay");

	ASVehicle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SetWheelCollision
// (Final, Native, Public)
// Parameters:
// int                            WheelNum                       (Parm)
// bool                           bCollision                     (Parm)

void ASVehicle::SetWheelCollision(int WheelNum, bool bCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SetWheelCollision");

	ASVehicle_SetWheelCollision_Params params;
	params.WheelNum = WheelNum;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceObject.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceObject::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsValidUISequenceObject");

	USequenceObject_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceObject::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsValidLevelSequenceObject");

	USequenceObject_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.GetWorldInfo
// (Final, Native, Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* USequenceObject::GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetWorldInfo");

	USequenceObject_GetWorldInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.ScriptLog
// (Final, Native, Public)
// Parameters:
// struct FString                 LogText                        (Parm, NeedCtorLink)
// bool                           bWarning                       (OptionalParm, Parm)

void USequenceObject::ScriptLog(const struct FString& LogText, bool bWarning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ScriptLog");

	USequenceObject_ScriptLog_Params params;
	params.LogText = LogText;
	params.bWarning = bWarning;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceVariable.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceVariable::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceVariable.IsValidUISequenceObject");

	USequenceVariable_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.GetController
// (Defined, Public)
// Parameters:
// class AActor*                  TheActor                       (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* USequenceOp::GetController(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetController");

	USequenceOp_GetController_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.GetPawn
// (Defined, Public)
// Parameters:
// class AActor*                  TheActor                       (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* USequenceOp::GetPawn(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetPawn");

	USequenceOp_GetPawn_Params params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.Reset
// (Public)

void USequenceOp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Reset");

	USequenceOp_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PublishLinkedVariableValues
// (Final, Native, Public)

void USequenceOp::PublishLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PublishLinkedVariableValues");

	USequenceOp_PublishLinkedVariableValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PopulateLinkedVariableValues
// (Final, Native, Public)

void USequenceOp::PopulateLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PopulateLinkedVariableValues");

	USequenceOp_PopulateLinkedVariableValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.VersionUpdated
// (Event, Public)
// Parameters:
// int                            OldVersion                     (Parm)
// int                            NewVersion                     (Parm)

void USequenceOp::VersionUpdated(int OldVersion, int NewVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.VersionUpdated");

	USequenceOp_VersionUpdated_Params params;
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Deactivated
// (Event, Public)

void USequenceOp::Deactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Deactivated");

	USequenceOp_Deactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Activated
// (Event, Public)

void USequenceOp::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Activated");

	USequenceOp_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.LinkedVariables
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  VarClass                       (Parm)
// class USequenceVariable*       OutVariable                    (Parm, OutParm)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::LinkedVariables(class UClass* VarClass, const struct FString& inDesc, class USequenceVariable** OutVariable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.LinkedVariables");

	USequenceOp_LinkedVariables_Params params;
	params.VarClass = VarClass;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVariable != nullptr)
		*OutVariable = params.OutVariable;
}


// Function Engine.SequenceOp.GetBoolVars
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<unsigned char>          boolVars                       (Parm, OutParm, NeedCtorLink)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::GetBoolVars(const struct FString& inDesc, TArray<unsigned char>* boolVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetBoolVars");

	USequenceOp_GetBoolVars_Params params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (boolVars != nullptr)
		*boolVars = params.boolVars;
}


// Function Engine.SequenceOp.GetObjectVars
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UObject*>         objVars                        (Parm, OutParm, NeedCtorLink)
// struct FString                 inDesc                         (OptionalParm, Parm, NeedCtorLink)

void USequenceOp::GetObjectVars(const struct FString& inDesc, TArray<class UObject*>* objVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetObjectVars");

	USequenceOp_GetObjectVars_Params params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (objVars != nullptr)
		*objVars = params.objVars;
}


// Function Engine.SequenceOp.GetLinkedObjects
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class USequenceObject*> out_Objects                    (Parm, OutParm, NeedCtorLink)
// class UClass*                  ObjectType                     (OptionalParm, Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void USequenceOp::GetLinkedObjects(class UClass* ObjectType, bool bRecurse, TArray<class USequenceObject*>* out_Objects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetLinkedObjects");

	USequenceOp_GetLinkedObjects_Params params;
	params.ObjectType = ObjectType;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Objects != nullptr)
		*out_Objects = params.out_Objects;
}


// Function Engine.SequenceOp.HasLinkedOps
// (Final, Native, Public)
// Parameters:
// bool                           bConsiderInputLinks            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceOp::HasLinkedOps(bool bConsiderInputLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.HasLinkedOps");

	USequenceOp_HasLinkedOps_Params params;
	params.bConsiderInputLinks = bConsiderInputLinks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.Update
// (Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Latent::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.Update");

	USeqAct_Latent_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.AbortFor
// (Native, Public)
// Parameters:
// class AActor*                  latentActor                    (Parm)

void USeqAct_Latent::AbortFor(class AActor* latentActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.AbortFor");

	USeqAct_Latent_AbortFor_Params params;
	params.latentActor = latentActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_SetSequenceVariable::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject");

	USeqAct_SetSequenceVariable_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds
// (Native, Static, Public)

void USeqAct_CrossFadeMusicTracks::STATIC_StopAllMusicManagerSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds");

	USeqAct_CrossFadeMusicTracks_StopAllMusicManagerSounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_CrossFadeMusicTracks.ClientSideCrossFadeTrackImmediately
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FMusicTrackStruct       TrackToPlay                    (Const, Parm, OutParm)

void USeqAct_CrossFadeMusicTracks::ClientSideCrossFadeTrackImmediately(struct FMusicTrackStruct* TrackToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrossFadeMusicTracks.ClientSideCrossFadeTrackImmediately");

	USeqAct_CrossFadeMusicTracks_ClientSideCrossFadeTrackImmediately_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TrackToPlay != nullptr)
		*TrackToPlay = params.TrackToPlay;
}


// Function Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FMusicTrackStruct       TrackToPlay                    (Const, Parm, OutParm)

void USeqAct_CrossFadeMusicTracks::CrossFadeTrack(struct FMusicTrackStruct* TrackToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack");

	USeqAct_CrossFadeMusicTracks_CrossFadeTrack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TrackToPlay != nullptr)
		*TrackToPlay = params.TrackToPlay;
}


// Function Engine.SeqAct_CrowdSpawner.SpawnAgent
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  SpawnLoc                       (Parm)
// class ACrowdAgent*             ReturnValue                    (Parm, OutParm, ReturnParm)

class ACrowdAgent* USeqAct_CrowdSpawner::SpawnAgent(class AActor* SpawnLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrowdSpawner.SpawnAgent");

	USeqAct_CrowdSpawner_SpawnAgent_Params params;
	params.SpawnLoc = SpawnLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CrowdSpawner.CreateAttachments
// (Defined, Simulated, Public)
// Parameters:
// class ACrowdAgent*             Agent                          (Parm)

void USeqAct_CrowdSpawner::CreateAttachments(class ACrowdAgent* Agent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrowdSpawner.CreateAttachments");

	USeqAct_CrowdSpawner_CreateAttachments_Params params;
	params.Agent = Agent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_CrowdSpawner.Reset
// (Defined, Public)

void USeqAct_CrowdSpawner::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrowdSpawner.Reset");

	USeqAct_CrowdSpawner_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_CrowdSpawner.UpdateSpawning
// (Simulated, Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm)

void USeqAct_CrowdSpawner::UpdateSpawning(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrowdSpawner.UpdateSpawning");

	USeqAct_CrowdSpawner_UpdateSpawning_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_CrowdSpawner.KillAgents
// (Simulated, Native, Public)

void USeqAct_CrowdSpawner::KillAgents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CrowdSpawner.KillAgents");

	USeqAct_CrowdSpawner_KillAgents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Delay.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Delay::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.IsValidUISequenceObject");

	USeqAct_Delay_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Gate.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Gate::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Gate.IsValidUISequenceObject");

	USeqAct_Gate_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Interp.Reset
// (Defined, Public)

void USeqAct_Interp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Reset");

	USeqAct_Interp_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// (Final, Native, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void USeqAct_Interp::AddPlayerToDirectorTracks(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks");

	USeqAct_Interp_AddPlayerToDirectorTracks_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.Stop
// (Final, Native, Public)

void USeqAct_Interp::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Stop");

	USeqAct_Interp_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.SetPosition
// (Final, Native, Public)
// Parameters:
// float                          NewPosition                    (Parm)
// bool                           bJump                          (OptionalParm, Parm)

void USeqAct_Interp::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.SetPosition");

	USeqAct_Interp_SetPosition_Params params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_IsInObjectList::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject");

	USeqAct_IsInObjectList_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Log.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Log::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Log.IsValidUISequenceObject");

	USeqAct_Log_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Switch.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Switch::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Switch.IsValidUISequenceObject");

	USeqAct_Switch_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Timer.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Timer::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Timer.IsValidUISequenceObject");

	USeqAct_Timer_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Toggle.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_Toggle::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Toggle.IsValidUISequenceObject");

	USeqAct_Toggle_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceCondition.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceCondition::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceCondition.IsValidUISequenceObject");

	USequenceCondition_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_IsLoggedIn::CheckLogins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsLoggedIn.CheckLogins");

	USeqCond_IsLoggedIn_CheckLogins_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// (Event, Public)
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchBase::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.RemoveValueEntry");

	USeqCond_SwitchBase_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// (Event, Public)
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchBase::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.InsertValueEntry");

	USeqCond_SwitchBase_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// (Defined, Event, Public)
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchBase::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.IsFallThruEnabled");

	USeqCond_SwitchBase_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// (Event, Public)

void USeqCond_SwitchBase::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue");

	USeqCond_SwitchBase_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchClass::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.RemoveValueEntry");

	USeqCond_SwitchClass_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchClass::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.InsertValueEntry");

	USeqCond_SwitchClass_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// (Defined, Event, Public)
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchClass::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.IsFallThruEnabled");

	USeqCond_SwitchClass_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// (Defined, Event, Public)

void USeqCond_SwitchClass::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue");

	USeqCond_SwitchClass_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchName.RemoveValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchName::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchName.RemoveValueEntry");

	USeqCond_SwitchName_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchName.InsertValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchName::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchName.InsertValueEntry");

	USeqCond_SwitchName_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchName.IsFallThruEnabled
// (Defined, Event, Public)
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchName::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchName.IsFallThruEnabled");

	USeqCond_SwitchName_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchName.VerifyDefaultCaseValue
// (Defined, Event, Public)

void USeqCond_SwitchName::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchName.VerifyDefaultCaseValue");

	USeqCond_SwitchName_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            RemoveIndex                    (Parm)

void USeqCond_SwitchObject::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.RemoveValueEntry");

	USeqCond_SwitchObject_RemoveValueEntry_Params params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// (Defined, Event, Public)
// Parameters:
// int                            InsertIndex                    (Parm)

void USeqCond_SwitchObject::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.InsertValueEntry");

	USeqCond_SwitchObject_InsertValueEntry_Params params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// (Defined, Event, Public)
// Parameters:
// int                            ValueIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqCond_SwitchObject::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.IsFallThruEnabled");

	USeqCond_SwitchObject_IsFallThruEnabled_Params params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// (Defined, Event, Public)

void USeqCond_SwitchObject::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue");

	USeqCond_SwitchObject_VerifyDefaultCaseValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Toggled
// (Event, Public)

void USequenceEvent::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Toggled");

	USequenceEvent_Toggled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Reset
// (Defined, Public)

void USequenceEvent::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Reset");

	USequenceEvent_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.CheckActivate
// (Final, Native, Public, HasOutParms)
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// TArray<int>                    ActivateIndices                (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           bPushTop                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USequenceEvent::CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, TArray<int>* ActivateIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.CheckActivate");

	USequenceEvent_CheckActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;
	params.bPushTop = bPushTop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;

	return params.ReturnValue;
}


// Function Engine.SequenceEvent.RegisterEvent
// (Event, Public)

void USequenceEvent::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.RegisterEvent");

	USequenceEvent_RegisterEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// (Defined, Public)

void USeqEvent_Mover::NotifyFinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyFinishedOpen");

	USeqEvent_Mover_NotifyFinishedOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyDetached
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void USeqEvent_Mover::NotifyDetached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyDetached");

	USeqEvent_Mover_NotifyDetached_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyAttached
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void USeqEvent_Mover::NotifyAttached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyAttached");

	USeqEvent_Mover_NotifyAttached_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// (Defined, Public)
// Parameters:
// class AActor*                  Hit                            (Parm)

void USeqEvent_Mover::NotifyEncroachingOn(class AActor* Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyEncroachingOn");

	USeqEvent_Mover_NotifyEncroachingOn_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.RegisterEvent
// (Defined, Event, Public)

void USeqEvent_Mover::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.RegisterEvent");

	USeqEvent_Mover_RegisterEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void USeqEvent_Touch::NotifyTouchingPawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied");

	USeqEvent_Touch_NotifyTouchingPawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.Toggled
// (Defined, Event, Public)

void USeqEvent_Touch::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.Toggled");

	USeqEvent_Touch_Toggled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// (Final, Native, Public)
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_Touch::CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckUnTouchActivate");

	USeqEvent_Touch_CheckUnTouchActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.CheckTouchActivate
// (Final, Native, Public)
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// bool                           bTest                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_Touch::CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckTouchActivate");

	USeqEvent_Touch_CheckTouchActivate_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Sequence.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bInEnabled                     (Parm)

void USequence::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.SetEnabled");

	USequence_SetEnabled_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.Reset
// (Defined, Public)

void USequence::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.Reset");

	USequence_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.FindSeqObjectsByClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// bool                           bRecursive                     (Parm)
// TArray<class USequenceObject*> OutputObjects                  (Parm, OutParm, NeedCtorLink)

void USequence::FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByClass");

	USequence_FindSeqObjectsByClass_Params params;
	params.DesiredClass = DesiredClass;
	params.bRecursive = bRecursive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;
}


// Function Engine.SeqVar_Object.SetObjectValue
// (Defined, Public)
// Parameters:
// class UObject*                 NewValue                       (Parm)

void USeqVar_Object::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.SetObjectValue");

	USeqVar_Object_SetObjectValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_Object.GetObjectValue
// (Defined, Public)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_Object::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.GetObjectValue");

	USeqVar_Object_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_ObjectList.SetObjectValue
// (Defined, Public)
// Parameters:
// class UObject*                 NewValue                       (Parm)

void USeqVar_ObjectList::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.SetObjectValue");

	USeqVar_ObjectList_SetObjectValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_ObjectList.GetObjectValue
// (Defined, Public)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_ObjectList::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.GetObjectValue");

	USeqVar_ObjectList_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Player.GetObjectValue
// (Defined, Public)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* USeqVar_Player::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.GetObjectValue");

	USeqVar_Player_GetObjectValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Terrain.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ATerrain::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.PostBeginPlay");

	ATerrain_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Terrain.CalcLayerBounds
// (Final, Native, Public)

void ATerrain::CalcLayerBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.CalcLayerBounds");

	ATerrain_CalcLayerBounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TerrainLayerSetup.PostBeginPlay
// (Simulated, Public)

void UTerrainLayerSetup::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TerrainLayerSetup.PostBeginPlay");

	UTerrainLayerSetup_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TerrainLayerSetup.SetMaterials
// (Final, Native, Public)
// Parameters:
// TArray<struct FTerrainFilteredMaterial> NewMaterials                   (Parm, NeedCtorLink)

void UTerrainLayerSetup::SetMaterials(TArray<struct FTerrainFilteredMaterial> NewMaterials)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TerrainLayerSetup.SetMaterials");

	UTerrainLayerSetup_SetMaterials_Params params;
	params.NewMaterials = NewMaterials;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIRoot.ConvertWidgetIDToString
// (Final, Defined, Static, Public)
// Parameters:
// class UUIObject*               SourceWidget                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIRoot::STATIC_ConvertWidgetIDToString(class UUIObject* SourceWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.ConvertWidgetIDToString");

	UUIRoot_ConvertWidgetIDToString_Params params;
	params.SourceWidget = SourceWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetDataStoreStringValue
// (Defined, Static, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FString                 OutStringValue                 (Parm, OutParm, NeedCtorLink)
// class UUIScene*                OwnerScene                     (OptionalParm, Parm)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_GetDataStoreStringValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetDataStoreStringValue");

	UUIRoot_GetDataStoreStringValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerScene = OwnerScene;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutStringValue != nullptr)
		*OutStringValue = params.OutStringValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetDataStoreFieldValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FUIProviderFieldValue   OutFieldValue                  (Parm, OutParm, NeedCtorLink)
// class UUIScene*                OwnerScene                     (OptionalParm, Parm)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_GetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetDataStoreFieldValue");

	UUIRoot_GetDataStoreFieldValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerScene = OwnerScene;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFieldValue != nullptr)
		*OutFieldValue = params.OutFieldValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SetDataStoreStringValue
// (Defined, Static, Public, HasDefaults)
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FString                 InStringValue                  (Parm, NeedCtorLink)
// class UUIScene*                OwnerScene                     (OptionalParm, Parm)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_SetDataStoreStringValue(const struct FString& InDataStoreMarkup, const struct FString& InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SetDataStoreStringValue");

	UUIRoot_SetDataStoreStringValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.InStringValue = InStringValue;
	params.OwnerScene = OwnerScene;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SetDataStoreFieldValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FString                 InDataStoreMarkup              (Parm, NeedCtorLink)
// struct FUIProviderFieldValue   InFieldValue                   (Const, Parm, OutParm, NeedCtorLink)
// class UUIScene*                OwnerScene                     (OptionalParm, Parm)
// class ULocalPlayer*            OwnerPlayer                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_SetDataStoreFieldValue(const struct FString& InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SetDataStoreFieldValue");

	UUIRoot_SetDataStoreFieldValue_Params params;
	params.InDataStoreMarkup = InDataStoreMarkup;
	params.OwnerScene = OwnerScene;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFieldValue != nullptr)
		*InFieldValue = params.InFieldValue;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetPrimitiveTransform
// (Final, Native, Static, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// bool                           bIncludeAnchorPosition         (OptionalParm, Parm)
// bool                           bIncudeRotation                (OptionalParm, Parm)
// bool                           bIncludeScale                  (OptionalParm, Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUIRoot::STATIC_GetPrimitiveTransform(class UUIObject* Widget, bool bIncludeAnchorPosition, bool bIncudeRotation, bool bIncludeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetPrimitiveTransform");

	UUIRoot_GetPrimitiveTransform_Params params;
	params.Widget = Widget;
	params.bIncludeAnchorPosition = bIncludeAnchorPosition;
	params.bIncudeRotation = bIncudeRotation;
	params.bIncludeScale = bIncludeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SetMouseCaptureOverride
// (Final, Native, Static, Public)
// Parameters:
// bool                           bCaptureMouse                  (Parm)

void UUIRoot::STATIC_SetMouseCaptureOverride(bool bCaptureMouse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SetMouseCaptureOverride");

	UUIRoot_SetMouseCaptureOverride_Params params;
	params.bCaptureMouse = bCaptureMouse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIRoot.GetCursorSize
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// float                          CursorXL                       (Parm, OutParm)
// float                          CursorYL                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_GetCursorSize(float* CursorXL, float* CursorYL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCursorSize");

	UUIRoot_GetCursorSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CursorXL != nullptr)
		*CursorXL = params.CursorXL;
	if (CursorYL != nullptr)
		*CursorYL = params.CursorYL;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetCursorPosition
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// int                            CursorX                        (Parm, OutParm)
// int                            CursorY                        (Parm, OutParm)
// class UUIScene*                Scene                          (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_GetCursorPosition(class UUIScene* Scene, int* CursorX, int* CursorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCursorPosition");

	UUIRoot_GetCursorPosition_Params params;
	params.Scene = Scene;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CursorX != nullptr)
		*CursorX = params.CursorX;
	if (CursorY != nullptr)
		*CursorY = params.CursorY;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetFaceOrientation
// (Final, Native, Static, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// TEnumAsByte<EUIOrientation>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EUIOrientation> UUIRoot::STATIC_GetFaceOrientation(TEnumAsByte<EUIWidgetFace> Face)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetFaceOrientation");

	UUIRoot_GetFaceOrientation_Params params;
	params.Face = Face;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetSceneClient
// (Final, Native, Static, Public)
// Parameters:
// class UGameUISceneClient*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UGameUISceneClient* UUIRoot::STATIC_GetSceneClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetSceneClient");

	UUIRoot_GetSceneClient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetCurrentUIController
// (Final, Native, Static, Public)
// Parameters:
// class UUIInteraction*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIInteraction* UUIRoot::STATIC_GetCurrentUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCurrentUIController");

	UUIRoot_GetCurrentUIController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.IsConsole
// (Final, Defined, Static, Public)
// Parameters:
// TEnumAsByte<EConsoleType>      ConsoleType                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIRoot::STATIC_IsConsole(TEnumAsByte<EConsoleType> ConsoleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.IsConsole");

	UUIRoot_IsConsole_Params params;
	params.ConsoleType = ConsoleType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.NotifyPlayerRemoved
// (Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerRemoved");

	UInteraction_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyPlayerAdded
// (Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerAdded");

	UInteraction_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyGameSessionEnded
// (Public)

void UInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyGameSessionEnded");

	UInteraction_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Initialized
// (Public)

void UInteraction::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialized");

	UInteraction_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnInitialize
// (Public, Delegate)

void UInteraction::OnInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnInitialize");

	UInteraction_OnInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Init
// (Final, Native, Public)

void UInteraction::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Init");

	UInteraction_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Tick
// (Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UInteraction::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Tick");

	UInteraction_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnReceivedNativeInputChar
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputChar");

	UInteraction_OnReceivedNativeInputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputAxis
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// float                          Delta                          (Parm)
// float                          DeltaTime                      (Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputAxis");

	UInteraction_OnReceivedNativeInputAxis_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputKey
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       EventType                      (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputKey");

	UInteraction_OnReceivedNativeInputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.FlushPlayerInput
// (Defined, Public)

void UConsole::FlushPlayerInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.FlushPlayerInput");

	UConsole_FlushPlayerInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.IsUIMiniConsoleOpen
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::IsUIMiniConsoleOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.IsUIMiniConsoleOpen");

	UConsole_IsUIMiniConsoleOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.IsUIConsoleOpen
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::IsUIConsoleOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.IsUIConsoleOpen");

	UConsole_IsUIConsoleOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.InputChar
// (Defined, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FString                 Unicode                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::InputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.InputChar");

	UConsole_InputChar_Params params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.InputKey
// (Public)
// Parameters:
// int                            ControllerId                   (Parm)
// struct FName                   Key                            (Parm)
// TEnumAsByte<EInputEvent>       Event                          (Parm)
// float                          AmountDepressed                (OptionalParm, Parm)
// bool                           bGamepad                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.InputKey");

	UConsole_InputKey_Params params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Event = Event;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.PostRender_Console
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UConsole::PostRender_Console(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.PostRender_Console");

	UConsole_PostRender_Console_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.StartTyping
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::StartTyping(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.StartTyping");

	UConsole_StartTyping_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.OutputText
// (Defined, Event, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::OutputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputText");

	UConsole_OutputText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.OutputTextLine
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)

void UConsole::OutputTextLine(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputTextLine");

	UConsole_OutputTextLine_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ClearOutput
// (Defined, Public)

void UConsole::ClearOutput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ClearOutput");

	UConsole_ClearOutput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConsoleCommand
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void UConsole::ConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleCommand");

	UConsole_ConsoleCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.PurgeCommandFromHistory
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void UConsole::PurgeCommandFromHistory(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.PurgeCommandFromHistory");

	UConsole_PurgeCommandFromHistory_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetCursorPos
// (Defined, Public)
// Parameters:
// int                            Position                       (Parm)

void UConsole::SetCursorPos(int Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetCursorPos");

	UConsole_SetCursorPos_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetInputText
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void UConsole::SetInputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetInputText");

	UConsole_SetInputText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Initialized
// (Defined, Public)

void UConsole::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Initialized");

	UConsole_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// (Final, Public)
// Parameters:
// bool                           bVerbose                       (Parm)

void UDataStoreClient::DebugDumpDataStoreInfo(bool bVerbose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.DebugDumpDataStoreInfo");

	UDataStoreClient_DebugDumpDataStoreInfo_Params params;
	params.bVerbose = bVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.NotifyGameSessionEnded
// (Final, Defined, Event, Public)

void UDataStoreClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.NotifyGameSessionEnded");

	UDataStoreClient_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.FindDataStoreClass
// (Final, Defined, Public)
// Parameters:
// class UClass*                  RequiredMetaClass              (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UDataStoreClient::FindDataStoreClass(class UClass* RequiredMetaClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStoreClass");

	UDataStoreClient_FindDataStoreClass_Params params;
	params.RequiredMetaClass = RequiredMetaClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// (Final, Native, Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UDataStoreClient::FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindPlayerDataStoreIndex");

	UDataStoreClient_FindPlayerDataStoreIndex_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.GetAvailableDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UUIScene*                CurrentScene                   (Parm)
// TArray<class UUIDataStore*>    out_DataStores                 (Parm, OutParm, NeedCtorLink)

void UDataStoreClient::GetAvailableDataStores(class UUIScene* CurrentScene, TArray<class UUIDataStore*>* out_DataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.GetAvailableDataStores");

	UDataStoreClient_GetAvailableDataStores_Params params;
	params.CurrentScene = CurrentScene;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataStores != nullptr)
		*out_DataStores = params.out_DataStores;
}


// Function Engine.DataStoreClient.UnregisterDataStore
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            DataStore                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDataStoreClient::UnregisterDataStore(class UUIDataStore* DataStore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.UnregisterDataStore");

	UDataStoreClient_UnregisterDataStore_Params params;
	params.DataStore = DataStore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.RegisterDataStore
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            DataStore                      (Parm)
// class ULocalPlayer*            PlayerOwner                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UDataStoreClient::RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.RegisterDataStore");

	UDataStoreClient_RegisterDataStore_Params params;
	params.DataStore = DataStore;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.CreateDataStore
// (Final, Native, Public)
// Parameters:
// class UClass*                  DataStoreClass                 (Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIDataStore* UDataStoreClient::CreateDataStore(class UClass* DataStoreClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.CreateDataStore");

	UDataStoreClient_CreateDataStore_Params params;
	params.DataStoreClass = DataStoreClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.FindDataStore
// (Final, Native, Public)
// Parameters:
// struct FName                   DataStoreTag                   (Parm)
// class ULocalPlayer*            PlayerOwner                    (OptionalParm, Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataStore* UDataStoreClient::FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStore");

	UDataStoreClient_FindDataStore_Params params;
	params.DataStoreTag = DataStoreTag;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Input.SetBind
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// struct FName                   BindName                       (Parm)
// struct FString                 Command                        (Parm, NeedCtorLink)

void UInput::SetBind(const struct FName& BindName, const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.SetBind");

	UInput_SetBind_Params params;
	params.BindName = BindName;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Input.GetBind
// (Native, Public)
// Parameters:
// struct FName                   Key                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UInput::GetBind(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.GetBind");

	UInput_GetBind_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Input.ResetInput
// (Native, Public)

void UInput::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.ResetInput");

	UInput_ResetInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmoothMouse
// (Defined, Public, HasOutParms)
// Parameters:
// float                          aMouse                         (Parm)
// float                          DeltaTime                      (Parm)
// unsigned char                  SampleCount                    (Parm, OutParm)
// int                            Index                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPlayerInput::SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmoothMouse");

	UPlayerInput_SmoothMouse_Params params;
	params.aMouse = aMouse;
	params.DeltaTime = DeltaTime;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SampleCount != nullptr)
		*SampleCount = params.SampleCount;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.ClearSmoothing
// (Defined, Exec, Public)

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	UPlayerInput_ClearSmoothing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmartJump
// (Defined, Exec, Public)

void UPlayerInput::SmartJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmartJump");

	UPlayerInput_SmartJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.Jump
// (Defined, Exec, Public)

void UPlayerInput::Jump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.Jump");

	UPlayerInput_Jump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ProcessInputMatching
// (Final, Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::ProcessInputMatching(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ProcessInputMatching");

	UPlayerInput_ProcessInputMatching_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.CheckForDoubleClickMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// TEnumAsByte<EDoubleClickDir>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDoubleClickDir> UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CheckForDoubleClickMove");

	UPlayerInput_CheckForDoubleClickMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.CatchDoubleClickInput
// (Defined, Public)

void UPlayerInput::CatchDoubleClickInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CatchDoubleClickInput");

	UPlayerInput_CatchDoubleClickInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PlayerInput
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PlayerInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PlayerInput");

	UPlayerInput_PlayerInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.AdjustMouseSensitivity
// (Defined, Public)
// Parameters:
// float                          FOVScale                       (Parm)

void UPlayerInput::AdjustMouseSensitivity(float FOVScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.AdjustMouseSensitivity");

	UPlayerInput_AdjustMouseSensitivity_Params params;
	params.FOVScale = FOVScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PostProcessInput
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PostProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PostProcessInput");

	UPlayerInput_PostProcessInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PreProcessInput
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PreProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreProcessInput");

	UPlayerInput_PreProcessInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.DrawHUD
// (Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void UPlayerInput::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.DrawHUD");

	UPlayerInput_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetSensitivity
// (Defined, Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UPlayerInput::SetSensitivity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSensitivity");

	UPlayerInput_SetSensitivity_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertTurn
// (Defined, Exec, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerInput::InvertTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertTurn");

	UPlayerInput_InvertTurn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.InvertMouse
// (Defined, Exec, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerInput::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	UPlayerInput_InvertMouse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.LogCurrentState
// (Public)
// Parameters:
// int                            Indent                         (Parm)

void UUIScreenObject::LogCurrentState(int Indent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.LogCurrentState");

	UUIScreenObject_LogCurrentState_Params params;
	params.Indent = Indent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnSetControllerId
// (Defined, Public)
// Parameters:
// class UUIAction_SetControllerId* Action                         (Parm)

void UUIScreenObject::OnSetControllerId(class UUIAction_SetControllerId* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnSetControllerId");

	UUIScreenObject_OnSetControllerId_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowMembershipMarketplaceUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowMembershipMarketplaceUI* Action                         (Parm)

void UUIScreenObject::OnShowMembershipMarketplaceUI(class UUIAction_ShowMembershipMarketplaceUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowMembershipMarketplaceUI");

	UUIScreenObject_OnShowMembershipMarketplaceUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowContentMarketplaceUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowContentMarketplaceUI* Action                         (Parm)

void UUIScreenObject::OnShowContentMarketplaceUI(class UUIAction_ShowContentMarketplaceUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowContentMarketplaceUI");

	UUIScreenObject_OnShowContentMarketplaceUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowGamerCardUI
// (Defined, Public, HasDefaults)
// Parameters:
// class UUIAction_ShowGamerCardUI* Action                         (Parm)

void UUIScreenObject::OnShowGamerCardUI(class UUIAction_ShowGamerCardUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowGamerCardUI");

	UUIScreenObject_OnShowGamerCardUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowFeedbackUI
// (Defined, Public, HasDefaults)
// Parameters:
// class UUIAction_ShowFeedbackUI* Action                         (Parm)

void UUIScreenObject::OnShowFeedbackUI(class UUIAction_ShowFeedbackUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowFeedbackUI");

	UUIScreenObject_OnShowFeedbackUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowMessagesUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowMessagesUI* Action                         (Parm)

void UUIScreenObject::OnShowMessagesUI(class UUIAction_ShowMessagesUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowMessagesUI");

	UUIScreenObject_OnShowMessagesUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowFriendInviteUI
// (Defined, Public, HasDefaults)
// Parameters:
// class UUIAction_ShowFriendInviteUI* Action                         (Parm)

void UUIScreenObject::OnShowFriendInviteUI(class UUIAction_ShowFriendInviteUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowFriendInviteUI");

	UUIScreenObject_OnShowFriendInviteUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowAchievementsUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowAchievementsUI* Action                         (Parm)

void UUIScreenObject::OnShowAchievementsUI(class UUIAction_ShowAchievementsUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowAchievementsUI");

	UUIScreenObject_OnShowAchievementsUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowPlayersUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowPlayersUI* Action                         (Parm)

void UUIScreenObject::OnShowPlayersUI(class UUIAction_ShowPlayersUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowPlayersUI");

	UUIScreenObject_OnShowPlayersUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnShowFriendsUI
// (Defined, Public)
// Parameters:
// class UUIAction_ShowFriendsUI* Action                         (Parm)

void UUIScreenObject::OnShowFriendsUI(class UUIAction_ShowFriendsUI* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnShowFriendsUI");

	UUIScreenObject_OnShowFriendsUI_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetNATType
// (Defined, Public)
// Parameters:
// TEnumAsByte<ENATType>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENATType> UUIScreenObject::GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetNATType");

	UUIScreenObject_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.CanPlayOnline
// (Defined, Public)
// Parameters:
// int                            ControllerId                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::CanPlayOnline(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CanPlayOnline");

	UUIScreenObject_CanPlayOnline_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.HasLinkConnection
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.HasLinkConnection");

	UUIScreenObject_HasLinkConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetLoginStatus
// (Defined, Public)
// Parameters:
// int                            ControllerId                   (OptionalParm, Parm)
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UUIScreenObject::GetLoginStatus(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetLoginStatus");

	UUIScreenObject_GetLoginStatus_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetBestControllerId
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::GetBestControllerId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetBestControllerId");

	UUIScreenObject_GetBestControllerId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnConsoleCommand
// (Defined, Public)
// Parameters:
// class UUIAction_ConsoleCommand* Action                         (Parm)

void UUIScreenObject::OnConsoleCommand(class UUIAction_ConsoleCommand* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnConsoleCommand");

	UUIScreenObject_OnConsoleCommand_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.DisableWidget
// (Final, Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::DisableWidget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.DisableWidget");

	UUIScreenObject_DisableWidget_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.EnableWidget
// (Final, Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::EnableWidget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.EnableWidget");

	UUIScreenObject_EnableWidget_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnChangeVisibility
// (Defined, Public)
// Parameters:
// class UUIAction_ChangeVisibility* Action                         (Parm)

void UUIScreenObject::OnChangeVisibility(class UUIAction_ChangeVisibility* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnChangeVisibility");

	UUIScreenObject_OnChangeVisibility_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetParent
// (Public)
// Parameters:
// class UUIScreenObject*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScreenObject* UUIScreenObject::GetParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetParent");

	UUIScreenObject_GetParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetSupportedUIActionKeyNames
// (Event, Public, HasOutParms)
// Parameters:
// TArray<struct FName>           out_KeyNames                   (Parm, OutParm, NeedCtorLink)

void UUIScreenObject::GetSupportedUIActionKeyNames(TArray<struct FName>* out_KeyNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetSupportedUIActionKeyNames");

	UUIScreenObject_GetSupportedUIActionKeyNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_KeyNames != nullptr)
		*out_KeyNames = params.out_KeyNames;
}


// Function Engine.UIScreenObject.SetInputMask
// (Defined, Event, Public)
// Parameters:
// unsigned char                  NewInputMask                   (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void UUIScreenObject::SetInputMask(unsigned char NewInputMask, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetInputMask");

	UUIScreenObject_SetInputMask_Params params;
	params.NewInputMask = NewInputMask;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.DisablePlayerInput
// (Final, Defined, Event, Public)
// Parameters:
// unsigned char                  PlayerIndex                    (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void UUIScreenObject::DisablePlayerInput(unsigned char PlayerIndex, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.DisablePlayerInput");

	UUIScreenObject_DisablePlayerInput_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.EnablePlayerInput
// (Final, Defined, Event, Public)
// Parameters:
// unsigned char                  PlayerIndex                    (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void UUIScreenObject::EnablePlayerInput(unsigned char PlayerIndex, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.EnablePlayerInput");

	UUIScreenObject_EnablePlayerInput_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.IsHidden
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsHidden");

	UUIScreenObject_IsHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsVisible
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsVisible");

	UUIScreenObject_IsVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.SetVisibility
// (Defined, Event, Public)
// Parameters:
// bool                           bIsVisible                     (Parm)

void UUIScreenObject::SetVisibility(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetVisibility");

	UUIScreenObject_SetVisibility_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.PrivateSetVisibility
// (Final, Defined, Private)
// Parameters:
// bool                           bVisible                       (Parm)

void UUIScreenObject::PrivateSetVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PrivateSetVisibility");

	UUIScreenObject_PrivateSetVisibility_Params params;
	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.IsLoggedIn
// (Defined, Event, Public)
// Parameters:
// int                            ControllerId                   (OptionalParm, Parm)
// bool                           bRequireOnlineLogin            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsLoggedIn(int ControllerId, bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsLoggedIn");

	UUIScreenObject_IsLoggedIn_Params params;
	params.ControllerId = ControllerId;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.RemovedFromParent
// (Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)

void UUIScreenObject::RemovedFromParent(class UUIScreenObject* WidgetOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RemovedFromParent");

	UUIScreenObject_RemovedFromParent_Params params;
	params.WidgetOwner = WidgetOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.RemovedChild
// (Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               OldChild                       (Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)

void UUIScreenObject::RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RemovedChild");

	UUIScreenObject_RemovedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.OldChild = OldChild;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.AddedChild
// (Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               NewChild                       (Parm)

void UUIScreenObject::AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.AddedChild");

	UUIScreenObject_AddedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.PostInitialize
// (Event, Public)

void UUIScreenObject::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PostInitialize");

	UUIScreenObject_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.Initialized
// (Event, Public)

void UUIScreenObject::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.Initialized");

	UUIScreenObject_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetWidgetPathName
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIScreenObject::GetWidgetPathName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetWidgetPathName");

	UUIScreenObject_GetWidgetPathName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
// (Final, Native, Public)
// Parameters:
// class UFont*                   BaseFont                       (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetAspectRatioAutoScaleFactor(class UFont* BaseFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor");

	UUIScreenObject_GetAspectRatioAutoScaleFactor_Params params;
	params.BaseFont = BaseFont;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetInverseCanvasToScreen
// (Final, Native, Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUIScreenObject::GetInverseCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetInverseCanvasToScreen");

	UUIScreenObject_GetInverseCanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetCanvasToScreen
// (Final, Native, Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUIScreenObject::GetCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetCanvasToScreen");

	UUIScreenObject_GetCanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.PixelToCanvas
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               PixelPosition                  (Const, Parm, OutParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIScreenObject::PixelToCanvas(struct FVector2D* PixelPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PixelToCanvas");

	UUIScreenObject_PixelToCanvas_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PixelPosition != nullptr)
		*PixelPosition = params.PixelPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ScreenToCanvas
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector4                ScreenPosition                 (Const, Parm, OutParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIScreenObject::ScreenToCanvas(struct FVector4* ScreenPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ScreenToCanvas");

	UUIScreenObject_ScreenToCanvas_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.PixelToScreen
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               PixelPosition                  (Const, Parm, OutParm)
// struct FVector4                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector4 UUIScreenObject::PixelToScreen(struct FVector2D* PixelPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PixelToScreen");

	UUIScreenObject_PixelToScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PixelPosition != nullptr)
		*PixelPosition = params.PixelPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ScreenToPixel
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector4                ScreenPosition                 (Const, Parm, OutParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector2D UUIScreenObject::ScreenToPixel(struct FVector4* ScreenPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ScreenToPixel");

	UUIScreenObject_ScreenToPixel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.CanvasToScreen
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 CanvasPosition                 (Const, Parm, OutParm)
// struct FVector4                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector4 UUIScreenObject::CanvasToScreen(struct FVector* CanvasPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CanvasToScreen");

	UUIScreenObject_CanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CanvasPosition != nullptr)
		*CanvasPosition = params.CanvasPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.DeProject
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 PixelPosition                  (Const, Parm, OutParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIScreenObject::DeProject(struct FVector* PixelPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.DeProject");

	UUIScreenObject_DeProject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PixelPosition != nullptr)
		*PixelPosition = params.PixelPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.Project
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 CanvasPosition                 (Const, Parm, OutParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIScreenObject::Project(struct FVector* CanvasPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.Project");

	UUIScreenObject_Project_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CanvasPosition != nullptr)
		*CanvasPosition = params.CanvasPosition;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetDockedWidgets
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIObject*>       out_DockedWidgets              (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EUIWidgetFace>     SourceFace                     (OptionalParm, Parm)
// TEnumAsByte<EUIWidgetFace>     TargetFace                     (OptionalParm, Parm)

void UUIScreenObject::GetDockedWidgets(TEnumAsByte<EUIWidgetFace> SourceFace, TEnumAsByte<EUIWidgetFace> TargetFace, TArray<class UUIObject*>* out_DockedWidgets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetDockedWidgets");

	UUIScreenObject_GetDockedWidgets_Params params;
	params.SourceFace = SourceFace;
	params.TargetFace = TargetFace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DockedWidgets != nullptr)
		*out_DockedWidgets = params.out_DockedWidgets;
}


// Function Engine.UIScreenObject.GetPositionVector
// (Final, Native, Public)
// Parameters:
// bool                           bIncludeParentPosition         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIScreenObject::GetPositionVector(bool bIncludeParentPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetPositionVector");

	UUIScreenObject_GetPositionVector_Params params;
	params.bIncludeParentPosition = bIncludeParentPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetBounds
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Dimension                      (Parm)
// TEnumAsByte<EPositionEvalType> OutputType                     (OptionalParm, Parm)
// bool                           bIgnoreDockPadding             (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetBounds(TEnumAsByte<EUIOrientation> Dimension, TEnumAsByte<EPositionEvalType> OutputType, bool bIgnoreDockPadding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetBounds");

	UUIScreenObject_GetBounds_Params params;
	params.Dimension = Dimension;
	params.OutputType = OutputType;
	params.bIgnoreDockPadding = bIgnoreDockPadding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetPosition
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// TEnumAsByte<EPositionEvalType> OutputType                     (OptionalParm, Parm)
// bool                           bZeroOrigin                    (OptionalParm, Parm)
// bool                           bIgnoreDockPadding             (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetPosition(TEnumAsByte<EUIWidgetFace> Face, TEnumAsByte<EPositionEvalType> OutputType, bool bZeroOrigin, bool bIgnoreDockPadding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetPosition");

	UUIScreenObject_GetPosition_Params params;
	params.Face = Face;
	params.OutputType = OutputType;
	params.bZeroOrigin = bZeroOrigin;
	params.bIgnoreDockPadding = bIgnoreDockPadding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.SetPosition
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm)
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// TEnumAsByte<EPositionEvalType> InputType                      (OptionalParm, Parm)
// bool                           bZeroOrigin                    (OptionalParm, Parm)

void UUIScreenObject::SetPosition(float NewValue, TEnumAsByte<EUIWidgetFace> Face, TEnumAsByte<EPositionEvalType> InputType, bool bZeroOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetPosition");

	UUIScreenObject_SetPosition_Params params;
	params.NewValue = NewValue;
	params.Face = Face;
	params.InputType = InputType;
	params.bZeroOrigin = bZeroOrigin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetBestPlayerIndex
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::GetBestPlayerIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetBestPlayerIndex");

	UUIScreenObject_GetBestPlayerIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetSupportedPlayerCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::GetSupportedPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetSupportedPlayerCount");

	UUIScreenObject_GetSupportedPlayerCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetActivePlayerCount
// (Final, Native, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::STATIC_GetActivePlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetActivePlayerCount");

	UUIScreenObject_GetActivePlayerCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.AcceptsPlayerInput
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::AcceptsPlayerInput(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.AcceptsPlayerInput");

	UUIScreenObject_AcceptsPlayerInput_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsPressed
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsPressed(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsPressed");

	UUIScreenObject_IsPressed_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsActive
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsActive(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsActive");

	UUIScreenObject_IsActive_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsFocused
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsFocused(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsFocused");

	UUIScreenObject_IsFocused_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsEnabled
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           bCheckOwnerChain               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsEnabled(int PlayerIndex, bool bCheckOwnerChain)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsEnabled");

	UUIScreenObject_IsEnabled_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bCheckOwnerChain = bCheckOwnerChain;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OverrideLastFocusedControl
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class UUIObject*               ChildToFocus                   (Parm)

void UUIScreenObject::OverrideLastFocusedControl(int PlayerIndex, class UUIObject* ChildToFocus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OverrideLastFocusedControl");

	UUIScreenObject_OverrideLastFocusedControl_Params params;
	params.PlayerIndex = PlayerIndex;
	params.ChildToFocus = ChildToFocus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetLastFocusedControl
// (Final, Native, Public)
// Parameters:
// bool                           bRecurse                       (OptionalParm, Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIScreenObject::GetLastFocusedControl(bool bRecurse, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetLastFocusedControl");

	UUIScreenObject_GetLastFocusedControl_Params params;
	params.bRecurse = bRecurse;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetFocusedControl
// (Final, Native, Public)
// Parameters:
// bool                           bRecurse                       (OptionalParm, Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIScreenObject::GetFocusedControl(bool bRecurse, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetFocusedControl");

	UUIScreenObject_GetFocusedControl_Params params;
	params.bRecurse = bRecurse;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.KillFocus
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::KillFocus(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.KillFocus");

	UUIScreenObject_KillFocus_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.SetFocusToChild
// (Native, Public)
// Parameters:
// class UUIObject*               ChildToFocus                   (OptionalParm, Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::SetFocusToChild(class UUIObject* ChildToFocus, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetFocusToChild");

	UUIScreenObject_SetFocusToChild_Params params;
	params.ChildToFocus = ChildToFocus;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.SetFocus
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::SetFocus(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetFocus");

	UUIScreenObject_SetFocus_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.CanPropagateFocusFor
// (Final, Native, Public)
// Parameters:
// class UUIObject*               TestChild                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::CanPropagateFocusFor(class UUIObject* TestChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CanPropagateFocusFor");

	UUIScreenObject_CanPropagateFocusFor_Params params;
	params.TestChild = TestChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.CanAcceptFocus
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::CanAcceptFocus(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CanAcceptFocus");

	UUIScreenObject_CanAcceptFocus_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsNeverFocused
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsNeverFocused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsNeverFocused");

	UUIScreenObject_IsNeverFocused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.NavigateFocus
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// TEnumAsByte<EUIWidgetFace>     Direction                      (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::NavigateFocus(class UUIScreenObject* Sender, TEnumAsByte<EUIWidgetFace> Direction, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NavigateFocus");

	UUIScreenObject_NavigateFocus_Params params;
	params.Sender = Sender;
	params.Direction = Direction;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.PrevControl
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::PrevControl(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PrevControl");

	UUIScreenObject_PrevControl_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.NextControl
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::NextControl(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NextControl");

	UUIScreenObject_NextControl_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FocusLastControl
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::FocusLastControl(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FocusLastControl");

	UUIScreenObject_FocusLastControl_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FocusFirstControl
// (Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::FocusFirstControl(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FocusFirstControl");

	UUIScreenObject_FocusFirstControl_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsHoldingShift
// (Final, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsHoldingShift(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsHoldingShift");

	UUIScreenObject_IsHoldingShift_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsHoldingAlt
// (Final, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsHoldingAlt(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsHoldingAlt");

	UUIScreenObject_IsHoldingAlt_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.IsHoldingCtrl
// (Final, Native, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsHoldingCtrl(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsHoldingCtrl");

	UUIScreenObject_IsHoldingCtrl_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ConditionalPropagateEnabledState
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           bForce                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ConditionalPropagateEnabledState(int PlayerIndex, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ConditionalPropagateEnabledState");

	UUIScreenObject_ConditionalPropagateEnabledState_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.DeactivateStateByClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  StateToRemove                  (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                StateThatWasRemoved            (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::DeactivateStateByClass(class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.DeactivateStateByClass");

	UUIScreenObject_DeactivateStateByClass_Params params;
	params.StateToRemove = StateToRemove;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StateThatWasRemoved != nullptr)
		*StateThatWasRemoved = params.StateThatWasRemoved;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.DeactivateState
// (Final, Native, Public)
// Parameters:
// class UUIState*                StateToRemove                  (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::DeactivateState(class UUIState* StateToRemove, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.DeactivateState");

	UUIScreenObject_DeactivateState_Params params;
	params.StateToRemove = StateToRemove;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ActivateStateByClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  StateToActivate                (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                StateThatWasAdded              (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ActivateStateByClass(class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ActivateStateByClass");

	UUIScreenObject_ActivateStateByClass_Params params;
	params.StateToActivate = StateToActivate;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StateThatWasAdded != nullptr)
		*StateThatWasAdded = params.StateThatWasAdded;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ActivateState
// (Final, Native, Public)
// Parameters:
// class UUIState*                StateToActivate                (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ActivateState(class UUIState* StateToActivate, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ActivateState");

	UUIScreenObject_ActivateState_Params params;
	params.StateToActivate = StateToActivate;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.HasActiveStateOfClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  StateClass                     (Parm)
// int                            PlayerIndex                    (Parm)
// int                            StateIndex                     (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::HasActiveStateOfClass(class UClass* StateClass, int PlayerIndex, int* StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.HasActiveStateOfClass");

	UUIScreenObject_HasActiveStateOfClass_Params params;
	params.StateClass = StateClass;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StateIndex != nullptr)
		*StateIndex = params.StateIndex;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetCurrentState
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// class UUIState*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIState* UUIScreenObject::GetCurrentState(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetCurrentState");

	UUIScreenObject_GetCurrentState_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.SetEnabled
// (Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::SetEnabled(bool bEnabled, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.SetEnabled");

	UUIScreenObject_SetEnabled_Params params;
	params.bEnabled = bEnabled;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FindEventsOfClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  EventClassToFind               (Parm)
// TArray<class UUIEvent*>        out_EventInstances             (Parm, OutParm, NeedCtorLink)
// class UUIState*                LimitScope                     (OptionalParm, Parm)
// bool                           bExactClass                    (OptionalParm, Parm)

void UUIScreenObject::FindEventsOfClass(class UClass* EventClassToFind, class UUIState* LimitScope, bool bExactClass, TArray<class UUIEvent*>* out_EventInstances)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FindEventsOfClass");

	UUIScreenObject_FindEventsOfClass_Params params;
	params.EventClassToFind = EventClassToFind;
	params.LimitScope = LimitScope;
	params.bExactClass = bExactClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_EventInstances != nullptr)
		*out_EventInstances = params.out_EventInstances;
}


// Function Engine.UIScreenObject.ActivateEventByClass
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class UClass*                  EventClassToActivate           (Parm)
// class UObject*                 InEventActivator               (OptionalParm, Parm)
// bool                           bActivateImmediately           (OptionalParm, Parm)
// TArray<int>                    IndicesToActivate              (OptionalParm, Parm, NeedCtorLink)
// TArray<class UUIEvent*>        out_ActivatedEvents            (OptionalParm, Parm, OutParm, NeedCtorLink)

void UUIScreenObject::ActivateEventByClass(int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, bool bActivateImmediately, TArray<int> IndicesToActivate, TArray<class UUIEvent*>* out_ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ActivateEventByClass");

	UUIScreenObject_ActivateEventByClass_Params params;
	params.PlayerIndex = PlayerIndex;
	params.EventClassToActivate = EventClassToActivate;
	params.InEventActivator = InEventActivator;
	params.bActivateImmediately = bActivateImmediately;
	params.IndicesToActivate = IndicesToActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ActivatedEvents != nullptr)
		*out_ActivatedEvents = params.out_ActivatedEvents;
}


// Function Engine.UIScreenObject.GetViewportHeight
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetViewportHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportHeight");

	UUIScreenObject_GetViewportHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetViewportWidth
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetViewportWidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportWidth");

	UUIScreenObject_GetViewportWidth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetViewportSize
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               out_ViewportSize               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::GetViewportSize(struct FVector2D* out_ViewportSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportSize");

	UUIScreenObject_GetViewportSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetViewportOrigin
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               out_ViewportOrigin             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::GetViewportOrigin(struct FVector2D* out_ViewportOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportOrigin");

	UUIScreenObject_GetViewportOrigin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportOrigin != nullptr)
		*out_ViewportOrigin = params.out_ViewportOrigin;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetViewportScale
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScreenObject::GetViewportScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportScale");

	UUIScreenObject_GetViewportScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetViewportOffset
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               out_ViewportOffset             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::GetViewportOffset(struct FVector2D* out_ViewportOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetViewportOffset");

	UUIScreenObject_GetViewportOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportOffset != nullptr)
		*out_ViewportOffset = params.out_ViewportOffset;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.RebuildNavigationLinks
// (Native, Public)

void UUIScreenObject::RebuildNavigationLinks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RebuildNavigationLinks");

	UUIScreenObject_RebuildNavigationLinks_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.RequestPrimitiveReview
// (Final, Native, Public)
// Parameters:
// bool                           bReinitializePrimitives        (Parm)
// bool                           bReviewPrimitiveUsage          (Parm)

void UUIScreenObject::RequestPrimitiveReview(bool bReinitializePrimitives, bool bReviewPrimitiveUsage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RequestPrimitiveReview");

	UUIScreenObject_RequestPrimitiveReview_Params params;
	params.bReinitializePrimitives = bReinitializePrimitives;
	params.bReviewPrimitiveUsage = bReviewPrimitiveUsage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.RequestFormattingUpdate
// (Final, Native, Public)

void UUIScreenObject::RequestFormattingUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RequestFormattingUpdate");

	UUIScreenObject_RequestFormattingUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.RequestSceneUpdate
// (Final, Native, Public)
// Parameters:
// bool                           bDockingStackChanged           (Parm)
// bool                           bPositionsChanged              (Parm)
// bool                           bNavLinksOutdated              (OptionalParm, Parm)
// bool                           bWidgetStylesChanged           (OptionalParm, Parm)

void UUIScreenObject::RequestSceneUpdate(bool bDockingStackChanged, bool bPositionsChanged, bool bNavLinksOutdated, bool bWidgetStylesChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RequestSceneUpdate");

	UUIScreenObject_RequestSceneUpdate_Params params;
	params.bDockingStackChanged = bDockingStackChanged;
	params.bPositionsChanged = bPositionsChanged;
	params.bNavLinksOutdated = bNavLinksOutdated;
	params.bWidgetStylesChanged = bWidgetStylesChanged;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.GetObjectCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::GetObjectCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetObjectCount");

	UUIScreenObject_GetObjectCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetChildren
// (Final, Native, Public)
// Parameters:
// bool                           bRecurse                       (OptionalParm, Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)
// TArray<class UUIObject*>       ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UUIObject*> UUIScreenObject::GetChildren(bool bRecurse, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetChildren");

	UUIScreenObject_GetChildren_Params params;
	params.bRecurse = bRecurse;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ContainsChildOfClass
// (Final, Native, Public)
// Parameters:
// class UClass*                  SearchClass                    (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ContainsChildOfClass(class UClass* SearchClass, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ContainsChildOfClass");

	UUIScreenObject_ContainsChildOfClass_Params params;
	params.SearchClass = SearchClass;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ContainsChild
// (Final, Native, Public)
// Parameters:
// class UUIObject*               Child                          (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ContainsChild(class UUIObject* Child, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ContainsChild");

	UUIScreenObject_ContainsChild_Params params;
	params.Child = Child;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FindChildIndex
// (Final, Native, Public)
// Parameters:
// struct FName                   WidgetName                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::FindChildIndex(const struct FName& WidgetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FindChildIndex");

	UUIScreenObject_FindChildIndex_Params params;
	params.WidgetName = WidgetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FindChildUsingID
// (Final, Native, Public)
// Parameters:
// struct FWIDGET_ID              WidgetID                       (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIScreenObject::FindChildUsingID(const struct FWIDGET_ID& WidgetID, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FindChildUsingID");

	UUIScreenObject_FindChildUsingID_Params params;
	params.WidgetID = WidgetID;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.FindChild
// (Final, Native, Public)
// Parameters:
// struct FName                   WidgetName                     (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIScreenObject::FindChild(const struct FName& WidgetName, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.FindChild");

	UUIScreenObject_FindChild_Params params;
	params.WidgetName = WidgetName;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.ReplaceChild
// (Final, Native, Public)
// Parameters:
// class UUIObject*               ExistingChild                  (Parm)
// class UUIObject*               NewChild                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::ReplaceChild(class UUIObject* ExistingChild, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.ReplaceChild");

	UUIScreenObject_ReplaceChild_Params params;
	params.ExistingChild = ExistingChild;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.RemoveChildren
// (Final, Native, Public)
// Parameters:
// TArray<class UUIObject*>       ChildrenToRemove               (Parm, NeedCtorLink)
// TArray<class UUIObject*>       ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UUIObject*> UUIScreenObject::RemoveChildren(TArray<class UUIObject*> ChildrenToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RemoveChildren");

	UUIScreenObject_RemoveChildren_Params params;
	params.ChildrenToRemove = ChildrenToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.RemoveChild
// (Final, Native, Public)
// Parameters:
// class UUIObject*               ExistingChild                  (Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::RemoveChild(class UUIObject* ExistingChild, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RemoveChild");

	UUIScreenObject_RemoveChild_Params params;
	params.ExistingChild = ExistingChild;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.InsertChild
// (Native, Public)
// Parameters:
// class UUIObject*               NewChild                       (Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bRenameExisting                (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIScreenObject::InsertChild(class UUIObject* NewChild, int InsertIndex, bool bRenameExisting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.InsertChild");

	UUIScreenObject_InsertChild_Params params;
	params.NewChild = NewChild;
	params.InsertIndex = InsertIndex;
	params.bRenameExisting = bRenameExisting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.Initialize
// (Final, Native, Public)
// Parameters:
// class UUIScene*                inOwnerScene                   (Parm)
// class UUIObject*               inOwner                        (OptionalParm, Parm)

void UUIScreenObject::Initialize(class UUIScene* inOwnerScene, class UUIObject* inOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.Initialize");

	UUIScreenObject_Initialize_Params params;
	params.inOwnerScene = inOwnerScene;
	params.inOwner = inOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.CreateWidget
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Owner                          (Parm)
// class UClass*                  WidgetClass                    (Parm)
// class UObject*                 WidgetArchetype                (OptionalParm, Parm)
// struct FName                   WidgetName                     (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIScreenObject::CreateWidget(class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, const struct FName& WidgetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CreateWidget");

	UUIScreenObject_CreateWidget_Params params;
	params.Owner = Owner;
	params.WidgetClass = WidgetClass;
	params.WidgetArchetype = WidgetArchetype;
	params.WidgetName = WidgetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.PlayUISound
// (Final, Native, Static, Public)
// Parameters:
// struct FName                   SoundCueName                   (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::STATIC_PlayUISound(const struct FName& SoundCueName, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.PlayUISound");

	UUIScreenObject_PlayUISound_Params params;
	params.SoundCueName = SoundCueName;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.GetPlayerOwner
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UUIScreenObject::GetPlayerOwner(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.GetPlayerOwner");

	UUIScreenObject_GetPlayerOwner_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.InitializePlayerTracking
// (Final, Native, Public)

void UUIScreenObject::InitializePlayerTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.InitializePlayerTracking");

	UUIScreenObject_InitializePlayerTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.RemovePlayerData
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UUIScreenObject::RemovePlayerData(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.RemovePlayerData");

	UUIScreenObject_RemovePlayerData_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.CreatePlayerData
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UUIScreenObject::CreatePlayerData(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.CreatePlayerData");

	UUIScreenObject_CreatePlayerData_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.IsInitialized
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::IsInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.IsInitialized");

	UUIScreenObject_IsInitialized_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnPreRenderCallBack
// (Public, Delegate)

void UUIScreenObject::OnPreRenderCallBack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnPreRenderCallBack");

	UUIScreenObject_OnPreRenderCallBack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.NotifyVisibilityChanged
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         SourceWidget                   (Parm)
// bool                           bIsVisible                     (Parm)

void UUIScreenObject::NotifyVisibilityChanged(class UUIScreenObject* SourceWidget, bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NotifyVisibilityChanged");

	UUIScreenObject_NotifyVisibilityChanged_Params params;
	params.SourceWidget = SourceWidget;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.NotifyActiveStateChanged
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                NewlyActiveState               (Parm)
// class UUIState*                PreviouslyActiveState          (OptionalParm, Parm)

void UUIScreenObject::NotifyActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NotifyActiveStateChanged");

	UUIScreenObject_NotifyActiveStateChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;
	params.NewlyActiveState = NewlyActiveState;
	params.PreviouslyActiveState = PreviouslyActiveState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.NotifyResolutionChanged
// (Public, Delegate, HasOutParms)
// Parameters:
// struct FVector2D               OldViewportsize                (Const, Parm, OutParm)
// struct FVector2D               NewViewportSize                (Const, Parm, OutParm)

void UUIScreenObject::NotifyResolutionChanged(struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NotifyResolutionChanged");

	UUIScreenObject_NotifyResolutionChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OldViewportsize != nullptr)
		*OldViewportsize = params.OldViewportsize;
	if (NewViewportSize != nullptr)
		*NewViewportSize = params.NewViewportSize;
}


// Function Engine.UIScreenObject.NotifyPositionChanged
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)

void UUIScreenObject::NotifyPositionChanged(class UUIScreenObject* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NotifyPositionChanged");

	UUIScreenObject_NotifyPositionChanged_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScreenObject.OnProcessInputAxis
// (Public, Delegate, HasOutParms)
// Parameters:
// struct FSubscribedInputEventParameters EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::OnProcessInputAxis(struct FSubscribedInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnProcessInputAxis");

	UUIScreenObject_OnProcessInputAxis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnProcessInputKey
// (Public, Delegate, HasOutParms)
// Parameters:
// struct FSubscribedInputEventParameters EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::OnProcessInputKey(struct FSubscribedInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnProcessInputKey");

	UUIScreenObject_OnProcessInputKey_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnRawInputAxis
// (Public, Delegate, HasOutParms)
// Parameters:
// struct FInputEventParameters   EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::OnRawInputAxis(struct FInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnRawInputAxis");

	UUIScreenObject_OnRawInputAxis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.OnRawInputKey
// (Public, Delegate, HasOutParms)
// Parameters:
// struct FInputEventParameters   EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScreenObject::OnRawInputKey(struct FInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.OnRawInputKey");

	UUIScreenObject_OnRawInputKey_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UIScreenObject.NotifyActiveSkinChanged
// (Public, Delegate)

void UUIScreenObject::NotifyActiveSkinChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScreenObject.NotifyActiveSkinChanged");

	UUIScreenObject_NotifyActiveSkinChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_Event.UnregisterInputEvents
// (Final, Native, Public)
// Parameters:
// class UUIState*                InputEventOwner                (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComp_Event::UnregisterInputEvents(class UUIState* InputEventOwner, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_Event.UnregisterInputEvents");

	UUIComp_Event_UnregisterInputEvents_Params params;
	params.InputEventOwner = InputEventOwner;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_Event.RegisterInputEvents
// (Final, Native, Public)
// Parameters:
// class UUIState*                InputEventOwner                (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComp_Event::RegisterInputEvents(class UUIState* InputEventOwner, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_Event.RegisterInputEvents");

	UUIComp_Event_RegisterInputEvents_Params params;
	params.InputEventOwner = InputEventOwner;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEventContainer.RemoveSequenceObjects
// (Final, Native, Public)
// Parameters:
// TArray<class USequenceObject*> ObjectsToRemove                (Parm, NeedCtorLink)

void UUIEventContainer::RemoveSequenceObjects(TArray<class USequenceObject*> ObjectsToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEventContainer.RemoveSequenceObjects");

	UUIEventContainer_RemoveSequenceObjects_Params params;
	params.ObjectsToRemove = ObjectsToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEventContainer.RemoveSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         ObjectToRemove                 (Parm)

void UUIEventContainer::RemoveSequenceObject(class USequenceObject* ObjectToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEventContainer.RemoveSequenceObject");

	UUIEventContainer_RemoveSequenceObject_Params params;
	params.ObjectToRemove = ObjectToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEventContainer.AddSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         NewObj                         (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEventContainer::AddSequenceObject(class USequenceObject* NewObj, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEventContainer.AddSequenceObject");

	UUIEventContainer_AddSequenceObject_Params params;
	params.NewObj = NewObj;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEventContainer.GetUIEvents
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIEvent*>        out_Events                     (Parm, OutParm, NeedCtorLink)
// class UClass*                  LimitClass                     (OptionalParm, Parm)

void UUIEventContainer::GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEventContainer.GetUIEvents");

	UUIEventContainer_GetUIEvents_Params params;
	params.LimitClass = LimitClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Events != nullptr)
		*out_Events = params.out_Events;
}


// Function Engine.UIInputConfiguration.LoadInputAliasClasses
// (Final, Native, Public)

void UUIInputConfiguration::LoadInputAliasClasses()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInputConfiguration.LoadInputAliasClasses");

	UUIInputConfiguration_LoadInputAliasClasses_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.NotifyGameSessionEnded
// (Defined, Public)

void UUIInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyGameSessionEnded");

	UUIInteraction_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.GetNATType
// (Final, Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<ENATType>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENATType> UUIInteraction::STATIC_GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNATType");

	UUIInteraction_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.CanPlayOnline
// (Final, Defined, Event, Static, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::STATIC_CanPlayOnline(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.CanPlayOnline");

	UUIInteraction_CanPlayOnline_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsLoggedIn
// (Final, Defined, Event, Static, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bRequireOnlineLogin            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::STATIC_IsLoggedIn(int ControllerId, bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsLoggedIn");

	UUIInteraction_IsLoggedIn_Params params;
	params.ControllerId = ControllerId;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.HasLinkConnection
// (Final, Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::STATIC_HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.HasLinkConnection");

	UUIInteraction_HasLinkConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLoginStatus
// (Final, Defined, Event, Static, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UUIInteraction::STATIC_GetLoginStatus(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoginStatus");

	UUIInteraction_GetLoginStatus_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.FindSceneByTag
// (Final, Defined, Public)
// Parameters:
// struct FName                   SceneTag                       (Parm)
// class ULocalPlayer*            SceneOwner                     (OptionalParm, Parm)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIInteraction::FindSceneByTag(const struct FName& SceneTag, class ULocalPlayer* SceneOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.FindSceneByTag");

	UUIInteraction_FindSceneByTag_Params params;
	params.SceneTag = SceneTag;
	params.SceneOwner = SceneOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.CloseScene
// (Final, Defined, Public)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::CloseScene(class UUIScene* Scene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.CloseScene");

	UUIInteraction_CloseScene_Params params;
	params.Scene = Scene;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.MergeScene
// (Public)
// Parameters:
// class UUIScene*                SourceScene                    (Parm)
// class UUIScene*                SceneTarget                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::MergeScene(class UUIScene* SourceScene, class UUIScene* SceneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.MergeScene");

	UUIInteraction_MergeScene_Params params;
	params.SourceScene = SourceScene;
	params.SceneTarget = SceneTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.OpenScene
// (Final, Defined, Public, HasOutParms)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// class ULocalPlayer*            SceneOwner                     (OptionalParm, Parm)
// class UUIScene*                OpenedScene                    (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::OpenScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.OpenScene");

	UUIInteraction_OpenScene_Params params;
	params.Scene = Scene;
	params.SceneOwner = SceneOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OpenedScene != nullptr)
		*OpenedScene = params.OpenedScene;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.CreateScene
// (Final, Native, Public)
// Parameters:
// class UClass*                  SceneClass                     (Parm)
// struct FName                   SceneTag                       (OptionalParm, Parm)
// class UUIScene*                SceneTemplate                  (OptionalParm, Parm)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIScene* UUIInteraction::CreateScene(class UClass* SceneClass, const struct FName& SceneTag, class UUIScene* SceneTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.CreateScene");

	UUIInteraction_CreateScene_Params params;
	params.SceneClass = SceneClass;
	params.SceneTag = SceneTag;
	params.SceneTemplate = SceneTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetTransientScene
// (Final, Defined, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIInteraction::GetTransientScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetTransientScene");

	UUIInteraction_GetTransientScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.SetMousePosition
// (Final, Defined, Public)
// Parameters:
// int                            NewMouseX                      (Parm)
// int                            NewMouseY                      (Parm)

void UUIInteraction::SetMousePosition(int NewMouseX, int NewMouseY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.SetMousePosition");

	UUIInteraction_SetMousePosition_Params params;
	params.NewMouseX = NewMouseX;
	params.NewMouseY = NewMouseY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.CreateTransientWidget
// (Final, Native, Public)
// Parameters:
// class UClass*                  WidgetClass                    (Parm)
// struct FName                   WidgetTag                      (Parm)
// class UUIObject*               Owner                          (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIObject* UUIInteraction::CreateTransientWidget(class UClass* WidgetClass, const struct FName& WidgetTag, class UUIObject* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.CreateTransientWidget");

	UUIInteraction_CreateTransientWidget_Params params;
	params.WidgetClass = WidgetClass;
	params.WidgetTag = WidgetTag;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.NotifyPlayerRemoved
// (Defined, Public, HasDefaults)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UUIInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerRemoved");

	UUIInteraction_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.NotifyPlayerAdded
// (Defined, Public, HasDefaults)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UUIInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerAdded");

	UUIInteraction_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.PlayUISound
// (Final, Native, Public)
// Parameters:
// struct FName                   SoundCueName                   (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::PlayUISound(const struct FName& SoundCueName, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.PlayUISound");

	UUIInteraction_PlayUISound_Params params;
	params.SoundCueName = SoundCueName;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsMenuLevel
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 MapName                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIInteraction::STATIC_IsMenuLevel(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsMenuLevel");

	UUIInteraction_IsMenuLevel_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetDataStoreClient
// (Final, Native, Static, Public)
// Parameters:
// class UDataStoreClient*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UDataStoreClient* UUIInteraction::STATIC_GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetDataStoreClient");

	UUIInteraction_GetDataStoreClient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerControllerId
// (Final, Native, Static, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::STATIC_GetPlayerControllerId(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerControllerId");

	UUIInteraction_GetPlayerControllerId_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerIndex
// (Final, Native, Static, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::STATIC_GetPlayerIndex(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerIndex");

	UUIInteraction_GetPlayerIndex_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerCount
// (Final, Native, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIInteraction::STATIC_GetPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerCount");

	UUIInteraction_GetPlayerCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.GetActiveScene
// (Defined, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUISceneClient::GetActiveScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetActiveScene");

	UUISceneClient_GetActiveScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.GetInverseCanvasToScreen
// (Final, Native, Public)
// Parameters:
// class UUIObject*               Widget                         (Const, OptionalParm, Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUISceneClient::GetInverseCanvasToScreen(class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetInverseCanvasToScreen");

	UUISceneClient_GetInverseCanvasToScreen_Params params;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.GetCanvasToScreen
// (Final, Native, Public)
// Parameters:
// class UUIObject*               Widget                         (Const, OptionalParm, Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUISceneClient::GetCanvasToScreen(class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetCanvasToScreen");

	UUISceneClient_GetCanvasToScreen_Params params;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.UpdateCanvasToScreen
// (Final, Native, Public)

void UUISceneClient::UpdateCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.UpdateCanvasToScreen");

	UUISceneClient_UpdateCanvasToScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISceneClient.ChangeMouseCursor
// (Final, Native, Public)
// Parameters:
// struct FName                   CursorName                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::ChangeMouseCursor(const struct FName& CursorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.ChangeMouseCursor");

	UUISceneClient_ChangeMouseCursor_Params params;
	params.CursorName = CursorName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.SetMousePosition
// (Final, Native, Public)
// Parameters:
// int                            NewMouseX                      (Parm)
// int                            NewMouseY                      (Parm)

void UUISceneClient::SetMousePosition(int NewMouseX, int NewMouseY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.SetMousePosition");

	UUISceneClient_SetMousePosition_Params params;
	params.NewMouseX = NewMouseX;
	params.NewMouseY = NewMouseY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISceneClient.CloseScene
// (Native, Public)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::CloseScene(class UUIScene* Scene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.CloseScene");

	UUISceneClient_CloseScene_Params params;
	params.Scene = Scene;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.OpenScene
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// class ULocalPlayer*            SceneOwner                     (OptionalParm, Parm)
// class UUIScene*                OpenedScene                    (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::OpenScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.OpenScene");

	UUISceneClient_OpenScene_Params params;
	params.Scene = Scene;
	params.SceneOwner = SceneOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OpenedScene != nullptr)
		*OpenedScene = params.OpenedScene;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.InitializeScene
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// class ULocalPlayer*            SceneOwner                     (OptionalParm, Parm)
// class UUIScene*                InitializedScene               (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::InitializeScene(class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.InitializeScene");

	UUISceneClient_InitializeScene_Params params;
	params.Scene = Scene;
	params.SceneOwner = SceneOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InitializedScene != nullptr)
		*InitializedScene = params.InitializedScene;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.IsSceneInitialized
// (Final, Native, Public)
// Parameters:
// class UUIScene*                Scene                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::IsSceneInitialized(class UUIScene* Scene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.IsSceneInitialized");

	UUISceneClient_IsSceneInitialized_Params params;
	params.Scene = Scene;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.IsUIActive
// (Final, Native, Public)
// Parameters:
// int                            Flags                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::IsUIActive(int Flags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.IsUIActive");

	UUISceneClient_IsUIActive_Params params;
	params.Flags = Flags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.ChangeActiveSkin
// (Final, Native, Public)
// Parameters:
// class UUISkin*                 NewActiveSkin                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISceneClient::ChangeActiveSkin(class UUISkin* NewActiveSkin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.ChangeActiveSkin");

	UUISceneClient_ChangeActiveSkin_Params params;
	params.NewActiveSkin = NewActiveSkin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.RemoveSequenceObjects
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class USequenceObject*> ObjectsToRemove                (Const, Parm, OutParm, NeedCtorLink)

void UUIState::RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.RemoveSequenceObjects");

	UUIState_RemoveSequenceObjects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ObjectsToRemove != nullptr)
		*ObjectsToRemove = params.ObjectsToRemove;
}


// Function Engine.UIState.RemoveSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         ObjectToRemove                 (Parm)

void UUIState::RemoveSequenceObject(class USequenceObject* ObjectToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.RemoveSequenceObject");

	UUIState_RemoveSequenceObject_Params params;
	params.ObjectToRemove = ObjectToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIState.AddSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         NewObj                         (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::AddSequenceObject(class USequenceObject* NewObj, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.AddSequenceObject");

	UUIState_AddSequenceObject_Params params;
	params.NewObj = NewObj;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.GetUIEvents
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIEvent*>        out_Events                     (Parm, OutParm, NeedCtorLink)
// class UClass*                  LimitClass                     (OptionalParm, Parm)

void UUIState::GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.GetUIEvents");

	UUIState_GetUIEvents_Params params;
	params.LimitClass = LimitClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Events != nullptr)
		*out_Events = params.out_Events;
}


// Function Engine.UIState.IsStateAllowed
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// class UUIState*                NewState                       (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::IsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.IsStateAllowed");

	UUIState_IsStateAllowed_Params params;
	params.Target = Target;
	params.NewState = NewState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.OnDeactivate
// (Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           bPoppedState                   (Parm)

void UUIState::OnDeactivate(class UUIScreenObject* Target, int PlayerIndex, bool bPoppedState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.OnDeactivate");

	UUIState_OnDeactivate_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;
	params.bPoppedState = bPoppedState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIState.OnActivate
// (Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           bPushedState                   (Parm)

void UUIState::OnActivate(class UUIScreenObject* Target, int PlayerIndex, bool bPushedState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.OnActivate");

	UUIState_OnActivate_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;
	params.bPushedState = bPushedState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIState.DeactivateState
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::DeactivateState(class UUIScreenObject* Target, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.DeactivateState");

	UUIState_DeactivateState_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.ActivateState
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::ActivateState(class UUIScreenObject* Target, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.ActivateState");

	UUIState_ActivateState_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.IsActiveForPlayer
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::IsActiveForPlayer(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.IsActiveForPlayer");

	UUIState_IsActiveForPlayer_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState.IsWidgetClassSupported
// (Defined, Event, Public)
// Parameters:
// class UClass*                  WidgetClass                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState::IsWidgetClassSupported(class UClass* WidgetClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState.IsWidgetClassSupported");

	UUIState_IsWidgetClassSupported_Params params;
	params.WidgetClass = WidgetClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState_Disabled.IsStateAllowed
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// class UUIState*                NewState                       (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState_Disabled::IsStateAllowed(class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState_Disabled.IsStateAllowed");

	UUIState_Disabled_IsStateAllowed_Params params;
	params.Target = Target;
	params.NewState = NewState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState_Disabled.ActivateState
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState_Disabled::ActivateState(class UUIScreenObject* Target, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState_Disabled.ActivateState");

	UUIState_Disabled_ActivateState_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIString.ContainsMarkup
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIString::ContainsMarkup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIString.ContainsMarkup");

	UUIString_ContainsMarkup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIString.GetAutoScaleValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector2D               BoundingRegionSize             (Parm)
// struct FVector2D               StringSize                     (Parm)
// struct FVector2D               out_AutoScalePercent           (Parm, OutParm)

void UUIString::GetAutoScaleValue(const struct FVector2D& BoundingRegionSize, const struct FVector2D& StringSize, struct FVector2D* out_AutoScalePercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIString.GetAutoScaleValue");

	UUIString_GetAutoScaleValue_Params params;
	params.BoundingRegionSize = BoundingRegionSize;
	params.StringSize = StringSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_AutoScalePercent != nullptr)
		*out_AutoScalePercent = params.out_AutoScalePercent;
}


// Function Engine.UIString.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bReturnProcessedText           (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIString::GetValue(bool bReturnProcessedText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIString.GetValue");

	UUIString_GetValue_Params params;
	params.bReturnProcessedText = bReturnProcessedText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIString.SetValue
// (Final, Native, Public)
// Parameters:
// struct FString                 InputString                    (Parm, NeedCtorLink)
// bool                           bIgnoreMarkup                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIString::SetValue(const struct FString& InputString, bool bIgnoreMarkup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIString.SetValue");

	UUIString_SetValue_Params params;
	params.InputString = InputString;
	params.bIgnoreMarkup = bIgnoreMarkup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetFieldValueFromScript
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FUIProviderFieldValue   FieldValue                     (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::GetFieldValueFromScript(const struct FString& FieldName, int ArrayIndex, struct FUIProviderFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetFieldValueFromScript");

	UUIDataProvider_GetFieldValueFromScript_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GenerateFillerData
// (Event, Public)
// Parameters:
// struct FString                 DataTag                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataProvider::GenerateFillerData(const struct FString& DataTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GenerateFillerData");

	UUIDataProvider_GenerateFillerData_Params params;
	params.DataTag = DataTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GenerateScriptMarkupString
// (Event, Public)
// Parameters:
// struct FName                   DataTag                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataProvider::GenerateScriptMarkupString(const struct FName& DataTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GenerateScriptMarkupString");

	UUIDataProvider_GenerateScriptMarkupString_Params params;
	params.DataTag = DataTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.SetFieldValue
// (Event, Public, HasOutParms)
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FUIProviderScriptFieldValue FieldValue                     (Const, Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::SetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.SetFieldValue");

	UUIDataProvider_SetFieldValue_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetFieldValue
// (Event, Public, HasOutParms)
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FUIProviderScriptFieldValue FieldValue                     (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider::GetFieldValue(const struct FString& FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetFieldValue");

	UUIDataProvider_GetFieldValue_Params params;
	params.FieldName = FieldName;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider.GetSupportedScriptFields
// (Event, Public, HasOutParms)
// Parameters:
// TArray<struct FUIDataProviderField> out_Fields                     (Parm, OutParm, NeedCtorLink)

void UUIDataProvider::GetSupportedScriptFields(TArray<struct FUIDataProviderField>* out_Fields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.GetSupportedScriptFields");

	UUIDataProvider_GetSupportedScriptFields_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Fields != nullptr)
		*out_Fields = params.out_Fields;
}


// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// (Final, Defined, Protected)
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UUIDataProvider::RemovePropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest");

	UUIDataProvider_RemovePropertyNotificationChangeRequest_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// (Final, Defined, Protected)
// Parameters:
// struct FScriptDelegate         InDelegate                     (Parm, NeedCtorLink)

void UUIDataProvider::AddPropertyNotificationChangeRequest(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest");

	UUIDataProvider_AddPropertyNotificationChangeRequest_Params params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider.NotifyPropertyChanged
// (Defined, Event, Public)
// Parameters:
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider::NotifyPropertyChanged(const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.NotifyPropertyChanged");

	UUIDataProvider_NotifyPropertyChanged_Params params;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// (Public, Delegate)
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataProvider::OnDataProviderPropertyChange(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider.OnDataProviderPropertyChange");

	UUIDataProvider_OnDataProviderPropertyChange_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.GetDataStoreClient
// (Final, Defined, Public)
// Parameters:
// class UDataStoreClient*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UDataStoreClient* UUIDataStore::GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.GetDataStoreClient");

	UUIDataStore_GetDataStoreClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.OnCommit
// (Native, Public)

void UUIDataStore::OnCommit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnCommit");

	UUIDataStore_OnCommit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.RefreshSubscribers
// (Defined, Event, Public)
// Parameters:
// struct FName                   PropertyTag                    (OptionalParm, Parm)
// bool                           bInvalidateValues              (OptionalParm, Parm)
// class UUIDataProvider*         SourceProvider                 (OptionalParm, Parm)
// int                            ArrayIndex                     (OptionalParm, Parm)

void UUIDataStore::RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.RefreshSubscribers");

	UUIDataStore_RefreshSubscribers_Params params;
	params.PropertyTag = PropertyTag;
	params.bInvalidateValues = bInvalidateValues;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.NotifyGameSessionEnded
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.NotifyGameSessionEnded");

	UUIDataStore_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.SubscriberDetached
// (Defined, Event, Public)
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (Parm)

void UUIDataStore::SubscriberDetached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberDetached");

	UUIDataStore_SubscriberDetached_Params params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.SubscriberAttached
// (Defined, Event, Public)
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (Parm)

void UUIDataStore::SubscriberAttached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberAttached");

	UUIDataStore_SubscriberAttached_Params params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Unregistered
// (Event, Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Unregistered");

	UUIDataStore_Unregistered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Registered
// (Event, Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (Parm)

void UUIDataStore::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Registered");

	UUIDataStore_Registered_Params params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.OnDataStoreValueUpdated
// (Public, Delegate)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIDataStore::OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnDataStoreValueUpdated");

	UUIDataStore_OnDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISkin.GetStyleGroups
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         StyleGroupArray                (Parm, OutParm, NeedCtorLink)
// bool                           bIncludeInheritedGroups        (OptionalParm, Parm)

void UUISkin::GetStyleGroups(bool bIncludeInheritedGroups, TArray<struct FString>* StyleGroupArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetStyleGroups");

	UUISkin_GetStyleGroups_Params params;
	params.bIncludeInheritedGroups = bIncludeInheritedGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StyleGroupArray != nullptr)
		*StyleGroupArray = params.StyleGroupArray;
}


// Function Engine.UISkin.FindStyleGroupIndex
// (Final, Native, Public)
// Parameters:
// struct FString                 StyleGroupName                 (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUISkin::FindStyleGroupIndex(const struct FString& StyleGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.FindStyleGroupIndex");

	UUISkin_FindStyleGroupIndex_Params params;
	params.StyleGroupName = StyleGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.GetStyleGroupAtIndex
// (Final, Native, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUISkin::GetStyleGroupAtIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetStyleGroupAtIndex");

	UUISkin_GetStyleGroupAtIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.RenameStyleGroup
// (Final, Native, Public)
// Parameters:
// struct FString                 OldStyleGroupName              (Parm, NeedCtorLink)
// struct FString                 NewStyleGroupName              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::RenameStyleGroup(const struct FString& OldStyleGroupName, const struct FString& NewStyleGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.RenameStyleGroup");

	UUISkin_RenameStyleGroup_Params params;
	params.OldStyleGroupName = OldStyleGroupName;
	params.NewStyleGroupName = NewStyleGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.RemoveStyleGroupName
// (Final, Native, Public)
// Parameters:
// struct FString                 StyleGroupName                 (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::RemoveStyleGroupName(const struct FString& StyleGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.RemoveStyleGroupName");

	UUISkin_RemoveStyleGroupName_Params params;
	params.StyleGroupName = StyleGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.AddStyleGroupName
// (Final, Native, Public)
// Parameters:
// struct FString                 StyleGroupName                 (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::AddStyleGroupName(const struct FString& StyleGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.AddStyleGroupName");

	UUISkin_AddStyleGroupName_Params params;
	params.StyleGroupName = StyleGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.IsInheritedGroupName
// (Final, Native, Public)
// Parameters:
// struct FString                 StyleGroupName                 (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::IsInheritedGroupName(const struct FString& StyleGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.IsInheritedGroupName");

	UUISkin_IsInheritedGroupName_Params params;
	params.StyleGroupName = StyleGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.GetSkinSoundCues
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FUISoundCue>     out_SoundCues                  (Parm, OutParm, NeedCtorLink)

void UUISkin::GetSkinSoundCues(TArray<struct FUISoundCue>* out_SoundCues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetSkinSoundCues");

	UUISkin_GetSkinSoundCues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_SoundCues != nullptr)
		*out_SoundCues = params.out_SoundCues;
}


// Function Engine.UISkin.GetUISoundCue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   SoundCueName                   (Parm)
// class USoundCue*               out_UISoundCue                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::GetUISoundCue(const struct FName& SoundCueName, class USoundCue** out_UISoundCue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetUISoundCue");

	UUISkin_GetUISoundCue_Params params;
	params.SoundCueName = SoundCueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_UISoundCue != nullptr)
		*out_UISoundCue = params.out_UISoundCue;

	return params.ReturnValue;
}


// Function Engine.UISkin.RemoveUISoundCue
// (Final, Native, Public)
// Parameters:
// struct FName                   SoundCueName                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::RemoveUISoundCue(const struct FName& SoundCueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.RemoveUISoundCue");

	UUISkin_RemoveUISoundCue_Params params;
	params.SoundCueName = SoundCueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.AddUISoundCue
// (Final, Native, Public)
// Parameters:
// struct FName                   SoundCueName                   (Parm)
// class USoundCue*               SoundToPlay                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISkin::AddUISoundCue(const struct FName& SoundCueName, class USoundCue* SoundToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.AddUISoundCue");

	UUISkin_AddUISoundCue_Params params;
	params.SoundCueName = SoundCueName;
	params.SoundToPlay = SoundToPlay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.GetCursorResource
// (Final, Native, Public)
// Parameters:
// struct FName                   CursorName                     (Parm)
// class UUITexture*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITexture* UUISkin::GetCursorResource(const struct FName& CursorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetCursorResource");

	UUISkin_GetCursorResource_Params params;
	params.CursorName = CursorName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISkin.GetAvailableStyles
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIStyle*>        out_Styles                     (Parm, OutParm, NeedCtorLink)
// bool                           bIncludeInheritedStyles        (OptionalParm, Parm)

void UUISkin::GetAvailableStyles(bool bIncludeInheritedStyles, TArray<class UUIStyle*>* out_Styles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISkin.GetAvailableStyles");

	UUISkin_GetAvailableStyles_Params params;
	params.bIncludeInheritedStyles = bIncludeInheritedStyles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Styles != nullptr)
		*out_Styles = params.out_Styles;
}


// Function Engine.UIStyle.GetDefaultStyle
// (Final, Defined, Event, Public)
// Parameters:
// class UUIStyle_Data*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIStyle_Data* UUIStyle::GetDefaultStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyle.GetDefaultStyle");

	UUIStyle_GetDefaultStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStyle.GetStyleForStateByClass
// (Final, Native, Public)
// Parameters:
// class UClass*                  StateClass                     (Parm)
// class UUIStyle_Data*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIStyle_Data* UUIStyle::GetStyleForStateByClass(class UClass* StateClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyle.GetStyleForStateByClass");

	UUIStyle_GetStyleForStateByClass_Params params;
	params.StateClass = StateClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStyle.GetStyleForState
// (Final, Native, Public)
// Parameters:
// class UUIState*                StateObject                    (Parm)
// class UUIStyle_Data*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIStyle_Data* UUIStyle::GetStyleForState(class UUIState* StateObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyle.GetStyleForState");

	UUIStyle_GetStyleForState_Params params;
	params.StateObject = StateObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnUIAnimEnd
// (Public, Delegate)
// Parameters:
// class UUIObject*               AnimTarget                     (Parm)
// int                            AnimIndex                      (Parm)
// class UUIAnimationSeq*         AnimSeq                        (Parm)

void UUIObject::OnUIAnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnUIAnimEnd");

	UUIObject_OnUIAnimEnd_Params params;
	params.AnimTarget = AnimTarget;
	params.AnimIndex = AnimIndex;
	params.AnimSeq = AnimSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.UIAnimEnd
// (Defined, Event, Public)
// Parameters:
// int                            SeqIndex                       (Parm)

void UUIObject::UIAnimEnd(int SeqIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.UIAnimEnd");

	UUIObject_UIAnimEnd_Params params;
	params.SeqIndex = SeqIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.ClearUIAnimation
// (Defined, Event, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// class UUIAnimationSeq*         AnimSeq                        (OptionalParm, Parm)

void UUIObject::ClearUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.ClearUIAnimation");

	UUIObject_ClearUIAnimation_Params params;
	params.AnimName = AnimName;
	params.AnimSeq = AnimSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.StopUIAnimation
// (Defined, Event, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// class UUIAnimationSeq*         AnimSeq                        (OptionalParm, Parm)
// bool                           bFinalize                      (OptionalParm, Parm)

void UUIObject::StopUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeq, bool bFinalize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.StopUIAnimation");

	UUIObject_StopUIAnimation_Params params;
	params.AnimName = AnimName;
	params.AnimSeq = AnimSeq;
	params.bFinalize = bFinalize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.PlayUIAnimation
// (Defined, Event, Public)
// Parameters:
// struct FName                   AnimName                       (Parm)
// class UUIAnimationSeq*         AnimSeqTemplate                (OptionalParm, Parm)
// float                          PlaybackRate                   (OptionalParm, Parm)
// bool                           bLoop                          (OptionalParm, Parm)
// float                          InitialPosition                (OptionalParm, Parm)

void UUIObject::PlayUIAnimation(const struct FName& AnimName, class UUIAnimationSeq* AnimSeqTemplate, float PlaybackRate, bool bLoop, float InitialPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.PlayUIAnimation");

	UUIObject_PlayUIAnimation_Params params;
	params.AnimName = AnimName;
	params.AnimSeqTemplate = AnimSeqTemplate;
	params.PlaybackRate = PlaybackRate;
	params.bLoop = bLoop;
	params.InitialPosition = InitialPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetBottom
// (Native, Public)
// Parameters:
// float                          NewBottom                      (Parm)

void UUIObject::AnimSetBottom(float NewBottom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetBottom");

	UUIObject_AnimSetBottom_Params params;
	params.NewBottom = NewBottom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetRight
// (Native, Public)
// Parameters:
// float                          NewRight                       (Parm)

void UUIObject::AnimSetRight(float NewRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetRight");

	UUIObject_AnimSetRight_Params params;
	params.NewRight = NewRight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetTop
// (Native, Public)
// Parameters:
// float                          NewTop                         (Parm)

void UUIObject::AnimSetTop(float NewTop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetTop");

	UUIObject_AnimSetTop_Params params;
	params.NewTop = NewTop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetLeft
// (Native, Public)
// Parameters:
// float                          NewLeft                        (Parm)

void UUIObject::AnimSetLeft(float NewLeft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetLeft");

	UUIObject_AnimSetLeft_Params params;
	params.NewLeft = NewLeft;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetScale
// (Native, Public)
// Parameters:
// float                          NewScale                       (Parm)

void UUIObject::AnimSetScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetScale");

	UUIObject_AnimSetScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetRotation
// (Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void UUIObject::AnimSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetRotation");

	UUIObject_AnimSetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetRelPosition
// (Native, Public)
// Parameters:
// struct FVector                 NewPosition                    (Parm)
// struct FVector                 InitialPosition                (Parm)

void UUIObject::AnimSetRelPosition(const struct FVector& NewPosition, const struct FVector& InitialPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetRelPosition");

	UUIObject_AnimSetRelPosition_Params params;
	params.NewPosition = NewPosition;
	params.InitialPosition = InitialPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetPosition
// (Native, Public)
// Parameters:
// struct FVector                 NewPosition                    (Parm)

void UUIObject::AnimSetPosition(const struct FVector& NewPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetPosition");

	UUIObject_AnimSetPosition_Params params;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetColor
// (Native, Public)
// Parameters:
// struct FLinearColor            NewColor                       (Parm)

void UUIObject::AnimSetColor(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetColor");

	UUIObject_AnimSetColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetVisibility
// (Native, Public)
// Parameters:
// bool                           bIsVisible                     (Parm)

void UUIObject::AnimSetVisibility(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetVisibility");

	UUIObject_AnimSetVisibility_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.AnimSetOpacity
// (Native, Public)
// Parameters:
// float                          NewOpacity                     (Parm)

void UUIObject::AnimSetOpacity(float NewOpacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AnimSetOpacity");

	UUIObject_AnimSetOpacity_Params params;
	params.NewOpacity = NewOpacity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnSetDatastoreBinding
// (Defined, Public)
// Parameters:
// class UUIAction_SetDatastoreBinding* Action                         (Parm)

void UUIObject::OnSetDatastoreBinding(class UUIAction_SetDatastoreBinding* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnSetDatastoreBinding");

	UUIObject_OnSetDatastoreBinding_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.LogRenderBounds
// (Public)
// Parameters:
// int                            Indent                         (Parm)

void UUIObject::LogRenderBounds(int Indent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.LogRenderBounds");

	UUIObject_LogRenderBounds_Params params;
	params.Indent = Indent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.GetParent
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScreenObject* UUIObject::GetParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetParent");

	UUIObject_GetParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetOwner
// (Final, Defined, Public)
// Parameters:
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIObject* UUIObject::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetOwner");

	UUIObject_GetOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetScene
// (Final, Defined, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIObject::GetScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetScene");

	UUIObject_GetScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.TickAnim
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UUIObject::TickAnim(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.TickAnim");

	UUIObject_TickAnim_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.SetWidgetStyleByName
// (Final, Native, Public)
// Parameters:
// struct FName                   StyleResolverTagToSet          (Parm)
// struct FName                   StyleFriendlyName              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetWidgetStyleByName(const struct FName& StyleResolverTagToSet, const struct FName& StyleFriendlyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetWidgetStyleByName");

	UUIObject_SetWidgetStyleByName_Params params;
	params.StyleResolverTagToSet = StyleResolverTagToSet;
	params.StyleFriendlyName = StyleFriendlyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.FindStyleSubscriberIndexById
// (Final, Native, Public)
// Parameters:
// struct FName                   StyleSubscriberId              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIObject::FindStyleSubscriberIndexById(const struct FName& StyleSubscriberId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.FindStyleSubscriberIndexById");

	UUIObject_FindStyleSubscriberIndexById_Params params;
	params.StyleSubscriberId = StyleSubscriberId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.FindStyleSubscriberIndex
// (Final, Native, Public, HasOutParms)
// Parameters:
// TScriptInterface<class UUIStyleResolver> Subscriber                     (Const, Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIObject::FindStyleSubscriberIndex(TScriptInterface<class UUIStyleResolver>* Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.FindStyleSubscriberIndex");

	UUIObject_FindStyleSubscriberIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Subscriber != nullptr)
		*Subscriber = params.Subscriber;

	return params.ReturnValue;
}


// Function Engine.UIObject.RemoveStyleSubscriber
// (Final, Native, Public, HasOutParms)
// Parameters:
// TScriptInterface<class UUIStyleResolver> Subscriber                     (Const, Parm, OutParm)

void UUIObject::RemoveStyleSubscriber(TScriptInterface<class UUIStyleResolver>* Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.RemoveStyleSubscriber");

	UUIObject_RemoveStyleSubscriber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Subscriber != nullptr)
		*Subscriber = params.Subscriber;
}


// Function Engine.UIObject.AddStyleSubscriber
// (Final, Native, Public, HasOutParms)
// Parameters:
// TScriptInterface<class UUIStyleResolver> Subscriber                     (Const, Parm, OutParm)

void UUIObject::AddStyleSubscriber(TScriptInterface<class UUIStyleResolver>* Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.AddStyleSubscriber");

	UUIObject_AddStyleSubscriber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Subscriber != nullptr)
		*Subscriber = params.Subscriber;
}


// Function Engine.UIObject.GetPositionExtent
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// bool                           bIncludeRotation               (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIObject::GetPositionExtent(TEnumAsByte<EUIWidgetFace> Face, bool bIncludeRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetPositionExtent");

	UUIObject_GetPositionExtent_Params params;
	params.Face = Face;
	params.bIncludeRotation = bIncludeRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetPositionExtents
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          MinX                           (Parm, OutParm)
// float                          MaxX                           (Parm, OutParm)
// float                          MinY                           (Parm, OutParm)
// float                          MaxY                           (Parm, OutParm)
// bool                           bIncludeRotation               (OptionalParm, Parm)

void UUIObject::GetPositionExtents(bool bIncludeRotation, float* MinX, float* MaxX, float* MinY, float* MaxY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetPositionExtents");

	UUIObject_GetPositionExtents_Params params;
	params.bIncludeRotation = bIncludeRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinX != nullptr)
		*MinX = params.MinX;
	if (MaxX != nullptr)
		*MaxX = params.MaxX;
	if (MinY != nullptr)
		*MinY = params.MinY;
	if (MaxY != nullptr)
		*MaxY = params.MaxY;
}


// Function Engine.UIObject.NeedsActiveCursorUpdates
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::NeedsActiveCursorUpdates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.NeedsActiveCursorUpdates");

	UUIObject_NeedsActiveCursorUpdates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetActiveCursorUpdate
// (Native, Public)
// Parameters:
// bool                           bShouldReceiveCursorUpdates    (Parm)

void UUIObject::SetActiveCursorUpdate(bool bShouldReceiveCursorUpdates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetActiveCursorUpdate");

	UUIObject_SetActiveCursorUpdate_Params params;
	params.bShouldReceiveCursorUpdates = bShouldReceiveCursorUpdates;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.SetPrivateBehavior
// (Final, Native, Public)
// Parameters:
// int                            Behavior                       (Parm)
// bool                           Value                          (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void UUIObject::SetPrivateBehavior(int Behavior, bool Value, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetPrivateBehavior");

	UUIObject_SetPrivateBehavior_Params params;
	params.Behavior = Behavior;
	params.Value = Value;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.IsPrivateBehaviorSet
// (Final, Native, Public)
// Parameters:
// int                            Behavior                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::IsPrivateBehaviorSet(int Behavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.IsPrivateBehaviorSet");

	UUIObject_IsPrivateBehaviorSet_Params params;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.CanAcceptFocus
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::CanAcceptFocus(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.CanAcceptFocus");

	UUIObject_CanAcceptFocus_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetForcedNavigationTarget
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// class UUIObject*               NavTarget                      (Parm)
// bool                           bIsNullOverride                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetForcedNavigationTarget(TEnumAsByte<EUIWidgetFace> Face, class UUIObject* NavTarget, bool bIsNullOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetForcedNavigationTarget");

	UUIObject_SetForcedNavigationTarget_Params params;
	params.Face = Face;
	params.NavTarget = NavTarget;
	params.bIsNullOverride = bIsNullOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetNavigationTarget
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     Face                           (Parm)
// class UUIObject*               NewNavTarget                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetNavigationTarget(TEnumAsByte<EUIWidgetFace> Face, class UUIObject* NewNavTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetNavigationTarget");

	UUIObject_SetNavigationTarget_Params params;
	params.Face = Face;
	params.NewNavTarget = NewNavTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.IsDockedTo
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         TargetWidget                   (Const, Parm)
// TEnumAsByte<EUIWidgetFace>     SourceFace                     (OptionalParm, Parm)
// TEnumAsByte<EUIWidgetFace>     TargetFace                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::IsDockedTo(class UUIScreenObject* TargetWidget, TEnumAsByte<EUIWidgetFace> SourceFace, TEnumAsByte<EUIWidgetFace> TargetFace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.IsDockedTo");

	UUIObject_IsDockedTo_Params params;
	params.TargetWidget = TargetWidget;
	params.SourceFace = SourceFace;
	params.TargetFace = TargetFace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetDockParameters
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     SourceFace                     (Parm)
// class UUIScreenObject*         Target                         (Parm)
// TEnumAsByte<EUIWidgetFace>     TargetFace                     (Parm)
// float                          PaddingValue                   (Parm)
// TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType               (OptionalParm, Parm)
// bool                           bModifyPaddingScaleType        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetDockParameters(TEnumAsByte<EUIWidgetFace> SourceFace, class UUIScreenObject* Target, TEnumAsByte<EUIWidgetFace> TargetFace, float PaddingValue, TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType, bool bModifyPaddingScaleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetDockParameters");

	UUIObject_SetDockParameters_Params params;
	params.SourceFace = SourceFace;
	params.Target = Target;
	params.TargetFace = TargetFace;
	params.PaddingValue = PaddingValue;
	params.PaddingInputType = PaddingInputType;
	params.bModifyPaddingScaleType = bModifyPaddingScaleType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetDockPadding
// (Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     SourceFace                     (Parm)
// float                          PaddingValue                   (Parm)
// TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType               (OptionalParm, Parm)
// bool                           bModifyPaddingScaleType        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetDockPadding(TEnumAsByte<EUIWidgetFace> SourceFace, float PaddingValue, TEnumAsByte<EUIDockPaddingEvalType> PaddingInputType, bool bModifyPaddingScaleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetDockPadding");

	UUIObject_SetDockPadding_Params params;
	params.SourceFace = SourceFace;
	params.PaddingValue = PaddingValue;
	params.PaddingInputType = PaddingInputType;
	params.bModifyPaddingScaleType = bModifyPaddingScaleType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetDockTarget
// (Native, Public)
// Parameters:
// TEnumAsByte<EUIWidgetFace>     SourceFace                     (Parm)
// class UUIScreenObject*         Target                         (Parm)
// TEnumAsByte<EUIWidgetFace>     TargetFace                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::SetDockTarget(TEnumAsByte<EUIWidgetFace> SourceFace, class UUIScreenObject* Target, TEnumAsByte<EUIWidgetFace> TargetFace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetDockTarget");

	UUIObject_SetDockTarget_Params params;
	params.SourceFace = SourceFace;
	params.Target = Target;
	params.TargetFace = TargetFace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.IsContainedBy
// (Final, Native, Public)
// Parameters:
// class UUIObject*               TestWidget                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::IsContainedBy(class UUIObject* TestWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.IsContainedBy");

	UUIObject_IsContainedBy_Params params;
	params.TestWidget = TestWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.NotifyValueChanged
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// int                            NotifyFlags                    (OptionalParm, Parm)

void UUIObject::NotifyValueChanged(int PlayerIndex, int NotifyFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.NotifyValueChanged");

	UUIObject_NotifyValueChanged_Params params;
	params.PlayerIndex = PlayerIndex;
	params.NotifyFlags = NotifyFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.GetRotationMatrix
// (Final, Native, Public)
// Parameters:
// bool                           bIncludeParentRotations        (OptionalParm, Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUIObject::GetRotationMatrix(bool bIncludeParentRotations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetRotationMatrix");

	UUIObject_GetRotationMatrix_Params params;
	params.bIncludeParentRotations = bIncludeParentRotations;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GenerateTransformMatrix
// (Final, Native, Public)
// Parameters:
// bool                           bIncludeParentTransforms       (OptionalParm, Parm)
// struct FMatrix                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMatrix UUIObject::GenerateTransformMatrix(bool bIncludeParentTransforms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GenerateTransformMatrix");

	UUIObject_GenerateTransformMatrix_Params params;
	params.bIncludeParentTransforms = bIncludeParentTransforms;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetAnchorPosition
// (Final, Native, Public)
// Parameters:
// bool                           bRelativeToWidget              (OptionalParm, Parm)
// bool                           bPixelSpace                    (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUIObject::GetAnchorPosition(bool bRelativeToWidget, bool bPixelSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetAnchorPosition");

	UUIObject_GetAnchorPosition_Params params;
	params.bRelativeToWidget = bRelativeToWidget;
	params.bPixelSpace = bPixelSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.UpdateRotationMatrix
// (Final, Native, Public)

void UUIObject::UpdateRotationMatrix()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.UpdateRotationMatrix");

	UUIObject_UpdateRotationMatrix_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.RotateWidget
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRotationAmount              (Parm)
// bool                           bAccumulateRotation            (OptionalParm, Parm)

void UUIObject::RotateWidget(const struct FRotator& NewRotationAmount, bool bAccumulateRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.RotateWidget");

	UUIObject_RotateWidget_Params params;
	params.NewRotationAmount = NewRotationAmount;
	params.bAccumulateRotation = bAccumulateRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.SetAnchorPosition
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewAnchorPosition              (Parm)
// TEnumAsByte<EPositionEvalType> InputType                      (OptionalParm, Parm)

void UUIObject::SetAnchorPosition(const struct FVector& NewAnchorPosition, TEnumAsByte<EPositionEvalType> InputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetAnchorPosition");

	UUIObject_SetAnchorPosition_Params params;
	params.NewAnchorPosition = NewAnchorPosition;
	params.InputType = InputType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.HasTransform
// (Final, Native, Public)
// Parameters:
// bool                           bIncludeParentTransforms       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::HasTransform(bool bIncludeParentTransforms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.HasTransform");

	UUIObject_HasTransform_Params params;
	params.bIncludeParentTransforms = bIncludeParentTransforms;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetToolTipValue
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIObject::GetToolTipValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetToolTipValue");

	UUIObject_GetToolTipValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GenerateSceneDataStoreMarkup
// (Native, Public)
// Parameters:
// struct FString                 Group                          (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIObject::GenerateSceneDataStoreMarkup(const struct FString& Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GenerateSceneDataStoreMarkup");

	UUIObject_GenerateSceneDataStoreMarkup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.ClearDefaultDataBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (Parm)

void UUIObject::ClearDefaultDataBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.ClearDefaultDataBinding");

	UUIObject_ClearDefaultDataBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.GetDefaultDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIObject::GetDefaultDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetDefaultDataStores");

	UUIObject_GetDefaultDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIObject.ResolveDefaultDataBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::ResolveDefaultDataBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.ResolveDefaultDataBinding");

	UUIObject_ResolveDefaultDataBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.GetDefaultDataBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIObject::GetDefaultDataBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.GetDefaultDataBinding");

	UUIObject_GetDefaultDataBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.SetDefaultDataBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (Parm)

void UUIObject::SetDefaultDataBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.SetDefaultDataBinding");

	UUIObject_SetDefaultDataBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnContextMenuItemSelected
// (Public, Delegate)
// Parameters:
// class UUIContextMenu*          ContextMenu                    (Parm)
// int                            PlayerIndex                    (Parm)
// int                            ItemIndex                      (Parm)

void UUIObject::OnContextMenuItemSelected(class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnContextMenuItemSelected");

	UUIObject_OnContextMenuItemSelected_Params params;
	params.ContextMenu = ContextMenu;
	params.PlayerIndex = PlayerIndex;
	params.ItemIndex = ItemIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnCloseContextMenu
// (Public, Delegate)
// Parameters:
// class UUIContextMenu*          ContextMenu                    (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::OnCloseContextMenu(class UUIContextMenu* ContextMenu, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnCloseContextMenu");

	UUIObject_OnCloseContextMenu_Params params;
	params.ContextMenu = ContextMenu;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnOpenContextMenu
// (Public, Delegate, HasOutParms)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIContextMenu*          CustomContextMenu              (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::OnOpenContextMenu(class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnOpenContextMenu");

	UUIObject_OnOpenContextMenu_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CustomContextMenu != nullptr)
		*CustomContextMenu = params.CustomContextMenu;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnQueryToolTip
// (Public, Delegate, HasOutParms)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// class UUIToolTip*              CustomToolTip                  (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::OnQueryToolTip(class UUIObject* Sender, class UUIToolTip** CustomToolTip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnQueryToolTip");

	UUIObject_OnQueryToolTip_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CustomToolTip != nullptr)
		*CustomToolTip = params.CustomToolTip;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnDoubleClick
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIObject::OnDoubleClick(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnDoubleClick");

	UUIObject_OnDoubleClick_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnClicked
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::OnClicked(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnClicked");

	UUIObject_OnClicked_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnPressRelease
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIObject::OnPressRelease(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnPressRelease");

	UUIObject_OnPressRelease_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnPressRepeat
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIObject::OnPressRepeat(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnPressRepeat");

	UUIObject_OnPressRepeat_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnPressed
// (Public, Delegate)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIObject::OnPressed(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnPressed");

	UUIObject_OnPressed_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnRefreshSubscriberValue
// (Public, Delegate)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// int                            BindingIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIObject::OnRefreshSubscriberValue(class UUIObject* Sender, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnRefreshSubscriberValue");

	UUIObject_OnRefreshSubscriberValue_Params params;
	params.Sender = Sender;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIObject.OnValueChanged
// (Public, Delegate)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIObject::OnValueChanged(class UUIObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnValueChanged");

	UUIObject_OnValueChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIObject.OnCreate
// (Public, Delegate)
// Parameters:
// class UUIObject*               CreatedWidget                  (Parm)
// class UUIScreenObject*         CreatorContainer               (Parm)

void UUIObject::OnCreate(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIObject.OnCreate");

	UUIObject_OnCreate_Params params;
	params.CreatedWidget = CreatedWidget;
	params.CreatorContainer = CreatorContainer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ConsoleEntry.SetValue
// (Defined, Public)
// Parameters:
// struct FString                 NewValue                       (Parm, NeedCtorLink)

void UConsoleEntry::SetValue(const struct FString& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ConsoleEntry.SetValue");

	UConsoleEntry_SetValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ConsoleEntry.SetupDockingLinks
// (Defined, Public)

void UConsoleEntry::SetupDockingLinks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ConsoleEntry.SetupDockingLinks");

	UConsoleEntry_SetupDockingLinks_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ConsoleEntry.PostInitialize
// (Defined, Event, Public)

void UConsoleEntry::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ConsoleEntry.PostInitialize");

	UConsoleEntry_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ConsoleEntry.RemovedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               OldChild                       (Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)

void UConsoleEntry::RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ConsoleEntry.RemovedChild");

	UConsoleEntry_RemovedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.OldChild = OldChild;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ConsoleEntry.AddedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               NewChild                       (Parm)

void UConsoleEntry::AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ConsoleEntry.AddedChild");

	UConsoleEntry_AddedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_GameState::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.NotifyGameSessionEnded");

	UUIDataStore_GameState_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// (Public, Delegate)

void UUIDataStore_GameState::OnRefreshDataFieldValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue");

	UUIDataStore_GameState_OnRefreshDataFieldValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.NotifyGameSessionEnded
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCurrentGameDataStore::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.NotifyGameSessionEnded");

	UCurrentGameDataStore_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurrentGameDataStore.ClearDataProviders
// (Final, Defined, Public)

void UCurrentGameDataStore::ClearDataProviders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.ClearDataProviders");

	UCurrentGameDataStore_ClearDataProviders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.GetTeamDataProvider
// (Final, Defined, Public)
// Parameters:
// class ATeamInfo*               TI                             (Parm)
// class UTeamDataProvider*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UTeamDataProvider* UCurrentGameDataStore::GetTeamDataProvider(class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.GetTeamDataProvider");

	UCurrentGameDataStore_GetTeamDataProvider_Params params;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurrentGameDataStore.GetPlayerDataProvider
// (Final, Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// class UPlayerDataProvider*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UPlayerDataProvider* UCurrentGameDataStore::GetPlayerDataProvider(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.GetPlayerDataProvider");

	UCurrentGameDataStore_GetPlayerDataProvider_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurrentGameDataStore.FindTeamDataProviderIndex
// (Final, Defined, Public)
// Parameters:
// class ATeamInfo*               TI                             (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UCurrentGameDataStore::FindTeamDataProviderIndex(class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.FindTeamDataProviderIndex");

	UCurrentGameDataStore_FindTeamDataProviderIndex_Params params;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurrentGameDataStore.FindPlayerDataProviderIndex
// (Final, Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UCurrentGameDataStore::FindPlayerDataProviderIndex(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.FindPlayerDataProviderIndex");

	UCurrentGameDataStore_FindPlayerDataProviderIndex_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurrentGameDataStore.RemoveTeamDataProvider
// (Final, Defined, Public)
// Parameters:
// class ATeamInfo*               TI                             (Parm)

void UCurrentGameDataStore::RemoveTeamDataProvider(class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.RemoveTeamDataProvider");

	UCurrentGameDataStore_RemoveTeamDataProvider_Params params;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.AddTeamDataProvider
// (Final, Defined, Public)
// Parameters:
// class ATeamInfo*               TI                             (Parm)

void UCurrentGameDataStore::AddTeamDataProvider(class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.AddTeamDataProvider");

	UCurrentGameDataStore_AddTeamDataProvider_Params params;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.RemovePlayerDataProvider
// (Final, Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void UCurrentGameDataStore::RemovePlayerDataProvider(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.RemovePlayerDataProvider");

	UCurrentGameDataStore_RemovePlayerDataProvider_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.AddPlayerDataProvider
// (Final, Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void UCurrentGameDataStore::AddPlayerDataProvider(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.AddPlayerDataProvider");

	UCurrentGameDataStore_AddPlayerDataProvider_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CurrentGameDataStore.CreateGameDataProvider
// (Final, Defined, Public)
// Parameters:
// class AGameReplicationInfo*    GRI                            (Parm)

void UCurrentGameDataStore::CreateGameDataProvider(class AGameReplicationInfo* GRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurrentGameDataStore.CreateGameDataProvider");

	UCurrentGameDataStore_CreateGameDataProvider_Params params;
	params.GRI = GRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIPropertyDataProvider.GetCustomPropertyValue
// (Event, Public, HasOutParms)
// Parameters:
// struct FUIProviderScriptFieldValue PropertyValue                  (Parm, OutParm, NeedCtorLink)
// int                            ArrayIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIPropertyDataProvider::GetCustomPropertyValue(int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPropertyDataProvider.GetCustomPropertyValue");

	UUIPropertyDataProvider_GetCustomPropertyValue_Params params;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PropertyValue != nullptr)
		*PropertyValue = params.PropertyValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.CleanupDataProvider
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::CleanupDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.CleanupDataProvider");

	UUIDynamicDataProvider_CleanupDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.GetDataSource
// (Final, Defined, Public)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UUIDynamicDataProvider::GetDataSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.GetDataSource");

	UUIDynamicDataProvider_GetDataSource_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.IsValidDataSourceClass
// (Defined, Event, Public)
// Parameters:
// class UClass*                  PotentialDataSourceClass       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::IsValidDataSourceClass(class UClass* PotentialDataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.IsValidDataSourceClass");

	UUIDynamicDataProvider_IsValidDataSourceClass_Params params;
	params.PotentialDataSourceClass = PotentialDataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound
// (Event, Public)
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)

void UUIDynamicDataProvider::ProviderInstanceUnbound(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound");

	UUIDynamicDataProvider_ProviderInstanceUnbound_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicDataProvider.ProviderInstanceBound
// (Event, Public)
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)

void UUIDynamicDataProvider::ProviderInstanceBound(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.ProviderInstanceBound");

	UUIDynamicDataProvider_ProviderInstanceBound_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicDataProvider.UnbindProviderInstance
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::UnbindProviderInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.UnbindProviderInstance");

	UUIDynamicDataProvider_UnbindProviderInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicDataProvider.BindProviderInstance
// (Final, Native, Public)
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicDataProvider::BindProviderInstance(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicDataProvider.BindProviderInstance");

	UUIDynamicDataProvider_BindProviderInstance_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfoDataProvider.ProviderInstanceBound
// (Defined, Event, Public)
// Parameters:
// class UObject*                 DataSourceInstance             (Parm)

void UGameInfoDataProvider::ProviderInstanceBound(class UObject* DataSourceInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfoDataProvider.ProviderInstanceBound");

	UGameInfoDataProvider_ProviderInstanceBound_Params params;
	params.DataSourceInstance = DataSourceInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.AnimLookupSequence
// (Defined, Public)
// Parameters:
// struct FName                   SequenceName                   (Parm)
// class UUIAnimationSeq*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIAnimationSeq* UGameUISceneClient::AnimLookupSequence(const struct FName& SequenceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.AnimLookupSequence");

	UGameUISceneClient_AnimLookupSequence_Params params;
	params.SequenceName = SequenceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.AnimUnSubscribe
// (Defined, Public)
// Parameters:
// class UUIObject*               Target                         (Parm)

void UGameUISceneClient::AnimUnSubscribe(class UUIObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.AnimUnSubscribe");

	UGameUISceneClient_AnimUnSubscribe_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.AnimSubscribe
// (Defined, Public)
// Parameters:
// class UUIObject*               Target                         (Parm)

void UGameUISceneClient::AnimSubscribe(class UUIObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.AnimSubscribe");

	UGameUISceneClient_AnimSubscribe_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowMenuProgression
// (Defined, Exec, Public)

void UGameUISceneClient::ShowMenuProgression()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowMenuProgression");

	UGameUISceneClient_ShowMenuProgression_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowDataStores
// (Defined, Exec, Public)
// Parameters:
// bool                           bVerbose                       (OptionalParm, Parm)

void UGameUISceneClient::ShowDataStores(bool bVerbose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowDataStores");

	UGameUISceneClient_ShowDataStores_Params params;
	params.bVerbose = bVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.RefreshFormatting
// (Defined, Exec, Public)

void UGameUISceneClient::RefreshFormatting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RefreshFormatting");

	UGameUISceneClient_RefreshFormatting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowDataStoreField
// (Defined, Exec, Public)
// Parameters:
// struct FString                 DataStoreMarkup                (Parm, NeedCtorLink)

void UGameUISceneClient::ShowDataStoreField(const struct FString& DataStoreMarkup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowDataStoreField");

	UGameUISceneClient_ShowDataStoreField_Params params;
	params.DataStoreMarkup = DataStoreMarkup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.CloseMenu
// (Defined, Exec, Public)
// Parameters:
// struct FName                   SceneName                      (Parm)

void UGameUISceneClient::CloseMenu(const struct FName& SceneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CloseMenu");

	UGameUISceneClient_CloseMenu_Params params;
	params.SceneName = SceneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.OpenMenu
// (Defined, Exec, Public)
// Parameters:
// struct FString                 MenuPath                       (Parm, NeedCtorLink)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UGameUISceneClient::OpenMenu(const struct FString& MenuPath, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.OpenMenu");

	UGameUISceneClient_OpenMenu_Params params;
	params.MenuPath = MenuPath;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.CreateMenu
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  SceneClass                     (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UGameUISceneClient::CreateMenu(class UClass* SceneClass, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CreateMenu");

	UGameUISceneClient_CreateMenu_Params params;
	params.SceneClass = SceneClass;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ToggleDebugInput
// (Defined, Exec, Public)
// Parameters:
// bool                           bEnable                        (OptionalParm, Parm)

void UGameUISceneClient::ToggleDebugInput(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ToggleDebugInput");

	UGameUISceneClient_ToggleDebugInput_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowMenuStates
// (Defined, Exec, Public)

void UGameUISceneClient::ShowMenuStates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowMenuStates");

	UGameUISceneClient_ShowMenuStates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowRenderBounds
// (Defined, Exec, Public)

void UGameUISceneClient::ShowRenderBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowRenderBounds");

	UGameUISceneClient_ShowRenderBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ShowDockingStacks
// (Defined, Exec, Public)

void UGameUISceneClient::ShowDockingStacks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ShowDockingStacks");

	UGameUISceneClient_ShowDockingStacks_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.RestoreMenuProgression
// (Defined, Public)
// Parameters:
// class UUIScene*                BaseScene                      (OptionalParm, Parm)

void UGameUISceneClient::RestoreMenuProgression(class UUIScene* BaseScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RestoreMenuProgression");

	UGameUISceneClient_RestoreMenuProgression_Params params;
	params.BaseScene = BaseScene;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ClearMenuProgression
// (Defined, Public)

void UGameUISceneClient::ClearMenuProgression()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ClearMenuProgression");

	UGameUISceneClient_ClearMenuProgression_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.SaveMenuProgression
// (Defined, Public)

void UGameUISceneClient::SaveMenuProgression()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.SaveMenuProgression");

	UGameUISceneClient_SaveMenuProgression_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.GetActiveScene
// (Defined, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UGameUISceneClient::GetActiveScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetActiveScene");

	UGameUISceneClient_GetActiveScene_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// (Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            RemovedPlayer                  (Parm)

void UGameUISceneClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerRemoved");

	UGameUISceneClient_NotifyPlayerRemoved_Params params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyPlayerAdded
// (Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class ULocalPlayer*            AddedPlayer                    (Parm)

void UGameUISceneClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerAdded");

	UGameUISceneClient_NotifyPlayerAdded_Params params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyLinkStatusChanged
// (Defined, Public)
// Parameters:
// bool                           bConnected                     (Parm)

void UGameUISceneClient::NotifyLinkStatusChanged(bool bConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyLinkStatusChanged");

	UGameUISceneClient_NotifyLinkStatusChanged_Params params;
	params.bConnected = bConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
// (Defined, Public)
// Parameters:
// TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus            (Parm)

void UGameUISceneClient::NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged");

	UGameUISceneClient_NotifyOnlineServiceStatusChanged_Params params;
	params.NewConnectionStatus = NewConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// (Defined, Public)

void UGameUISceneClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyGameSessionEnded");

	UGameUISceneClient_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.CanShowToolTips
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameUISceneClient::CanShowToolTips()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CanShowToolTips");

	UGameUISceneClient_CanShowToolTips_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.ConditionalPause
// (Defined, Event, Public)
// Parameters:
// bool                           bDesiredPauseState             (Parm)

void UGameUISceneClient::ConditionalPause(bool bDesiredPauseState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ConditionalPause");

	UGameUISceneClient_ConditionalPause_Params params;
	params.bDesiredPauseState = bDesiredPauseState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.ActivateBGSaturation
// (Event, Public)
// Parameters:
// bool                           bActive                        (Parm)
// int                            Mask                           (Parm)

void UGameUISceneClient::ActivateBGSaturation(bool bActive, int Mask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.ActivateBGSaturation");

	UGameUISceneClient_ActivateBGSaturation_Params params;
	params.bActive = bActive;
	params.Mask = Mask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.SetActiveControl
// (Native, Public)
// Parameters:
// class UUIObject*               NewActiveControl               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameUISceneClient::SetActiveControl(class UUIObject* NewActiveControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.SetActiveControl");

	UGameUISceneClient_SetActiveControl_Params params;
	params.NewActiveControl = NewActiveControl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameUISceneClient::CanUnpauseInternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CanUnpauseInternalUI");

	UGameUISceneClient_CanUnpauseInternalUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.RequestPausedUpdate
// (Final, Native, Public)

void UGameUISceneClient::RequestPausedUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestPausedUpdate");

	UGameUISceneClient_RequestPausedUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.RequestCursorRenderUpdate
// (Final, Native, Public)

void UGameUISceneClient::RequestCursorRenderUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestCursorRenderUpdate");

	UGameUISceneClient_RequestCursorRenderUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// (Final, Native, Public)

void UGameUISceneClient::RequestInputProcessingUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestInputProcessingUpdate");

	UGameUISceneClient_RequestInputProcessingUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.FindSceneByTag
// (Final, Native, Public)
// Parameters:
// struct FName                   SceneTag                       (Parm)
// class ULocalPlayer*            SceneOwner                     (OptionalParm, Parm)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UGameUISceneClient::FindSceneByTag(const struct FName& SceneTag, class ULocalPlayer* SceneOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.FindSceneByTag");

	UGameUISceneClient_FindSceneByTag_Params params;
	params.SceneTag = SceneTag;
	params.SceneOwner = SceneOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.CreateTransientWidget
// (Final, Native, Public)
// Parameters:
// class UClass*                  WidgetClass                    (Parm)
// struct FName                   WidgetTag                      (Parm)
// class UUIObject*               Owner                          (OptionalParm, Parm)
// class UUIObject*               ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIObject* UGameUISceneClient::CreateTransientWidget(class UClass* WidgetClass, const struct FName& WidgetTag, class UUIObject* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CreateTransientWidget");

	UGameUISceneClient_CreateTransientWidget_Params params;
	params.WidgetClass = WidgetClass;
	params.WidgetTag = WidgetTag;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.CreateScene
// (Final, Native, Public)
// Parameters:
// class UClass*                  SceneClass                     (Parm)
// struct FName                   SceneTag                       (OptionalParm, Parm)
// class UUIScene*                SceneTemplate                  (OptionalParm, Parm)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm, CoerceParm)

class UUIScene* UGameUISceneClient::CreateScene(class UClass* SceneClass, const struct FName& SceneTag, class UUIScene* SceneTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CreateScene");

	UGameUISceneClient_CreateScene_Params params;
	params.SceneClass = SceneClass;
	params.SceneTag = SceneTag;
	params.SceneTemplate = SceneTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.GetTransientScene
// (Final, Native, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UGameUISceneClient::GetTransientScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetTransientScene");

	UGameUISceneClient_GetTransientScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.GetCurrentNetMode
// (Final, Native, Static, Public)
// Parameters:
// TEnumAsByte<ENetMode>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENetMode> UGameUISceneClient::STATIC_GetCurrentNetMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetCurrentNetMode");

	UGameUISceneClient_GetCurrentNetMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerOwnerDataProvider.CleanupDataProvider
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerOwnerDataProvider::CleanupDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerOwnerDataProvider.CleanupDataProvider");

	UPlayerOwnerDataProvider_CleanupDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerOwnerDataProvider.SetPlayerDataProvider
// (Defined, Public)
// Parameters:
// class UPlayerDataProvider*     NewPlayerData                  (Parm)

void UPlayerOwnerDataProvider::SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerOwnerDataProvider.SetPlayerDataProvider");

	UPlayerOwnerDataProvider_SetPlayerDataProvider_Params params;
	params.NewPlayerData = NewPlayerData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerOwnerDataStore.NotifyGameSessionEnded
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerOwnerDataStore::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerOwnerDataStore.NotifyGameSessionEnded");

	UPlayerOwnerDataStore_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerOwnerDataStore.ClearDataProviders
// (Final, Defined, Public)

void UPlayerOwnerDataStore::ClearDataProviders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerOwnerDataStore.ClearDataProviders");

	UPlayerOwnerDataStore_ClearDataProviders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerOwnerDataStore.SetPlayerDataProvider
// (Defined, Public)
// Parameters:
// class UPlayerDataProvider*     NewPlayerData                  (Parm)

void UPlayerOwnerDataStore::SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerOwnerDataStore.SetPlayerDataProvider");

	UPlayerOwnerDataStore_SetPlayerDataProvider_Params params;
	params.NewPlayerData = NewPlayerData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISettingsProvider.CleanupDataProvider
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISettingsProvider::CleanupDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISettingsProvider.CleanupDataProvider");

	UUISettingsProvider_CleanupDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISettingsProvider.OnModifiedProperty
// (Public)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// class UUIObject*               Widget                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISettingsProvider::OnModifiedProperty(const struct FName& PropertyName, class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISettingsProvider.OnModifiedProperty");

	UUISettingsProvider_OnModifiedProperty_Params params;
	params.PropertyName = PropertyName;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISettingsProvider.SavePropertyValue
// (Public)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// class UUIObject*               Widget                         (Parm)

void UUISettingsProvider::SavePropertyValue(const struct FName& PropertyName, class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISettingsProvider.SavePropertyValue");

	UUISettingsProvider_SavePropertyValue_Params params;
	params.PropertyName = PropertyName;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISettingsProvider.LoadPropertyValue
// (Public)
// Parameters:
// struct FName                   PropertyName                   (Parm)
// class UUIObject*               Widget                         (Parm)

void UUISettingsProvider::LoadPropertyValue(const struct FName& PropertyName, class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISettingsProvider.LoadPropertyValue");

	UUISettingsProvider_LoadPropertyValue_Params params;
	params.PropertyName = PropertyName;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_PlayerSettings.NotifyGameSessionEnded
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_PlayerSettings::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_PlayerSettings.NotifyGameSessionEnded");

	UUIDataStore_PlayerSettings_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_PlayerSettings.ClearDataProviders
// (Final, Defined, Public)

void UUIDataStore_PlayerSettings::ClearDataProviders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_PlayerSettings.ClearDataProviders");

	UUIDataStore_PlayerSettings_ClearDataProviders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_PlayerSettings.GetPlayerOwner
// (Final, Native, Public)
// Parameters:
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UUIDataStore_PlayerSettings::GetPlayerOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_PlayerSettings.GetPlayerOwner");

	UUIDataStore_PlayerSettings_GetPlayerOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerSettingsProvider.OnUnregister
// (Event, Public)

void UPlayerSettingsProvider::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerSettingsProvider.OnUnregister");

	UPlayerSettingsProvider_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerSettingsProvider.OnRegister
// (Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UPlayerSettingsProvider::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerSettingsProvider.OnRegister");

	UPlayerSettingsProvider_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PowerupDataProvider.IsValidDataSourceClass
// (Defined, Event, Public)
// Parameters:
// class UClass*                  PotentialDataSourceClass       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPowerupDataProvider::IsValidDataSourceClass(class UClass* PotentialDataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PowerupDataProvider.IsValidDataSourceClass");

	UPowerupDataProvider_IsValidDataSourceClass_Params params;
	params.PotentialDataSourceClass = PotentialDataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.FindCollectionValueIndex
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToFind                    (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USceneDataStore::FindCollectionValueIndex(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.FindCollectionValueIndex");

	USceneDataStore_FindCollectionValueIndex_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToFind != nullptr)
		*ValueToFind = params.ValueToFind;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.GetCollectionValue
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 out_Value                      (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::GetCollectionValue(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* out_Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.GetCollectionValue");

	USceneDataStore_GetCollectionValue_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Value != nullptr)
		*out_Value = params.out_Value;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.ClearCollectionValueArray
// (Final, Defined, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::ClearCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.ClearCollectionValueArray");

	USceneDataStore_ClearCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.ReplaceCollectionValueByIndex
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::ReplaceCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.ReplaceCollectionValueByIndex");

	USceneDataStore_ReplaceCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.ReplaceCollectionValue
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 CurrentValue                   (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::ReplaceCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* CurrentValue, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.ReplaceCollectionValue");

	USceneDataStore_ReplaceCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.RemoveCollectionValueByIndex
// (Final, Defined, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::RemoveCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.RemoveCollectionValueByIndex");

	USceneDataStore_RemoveCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.RemoveCollectionValue
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToRemove                  (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::RemoveCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.RemoveCollectionValue");

	USceneDataStore_RemoveCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToRemove != nullptr)
		*ValueToRemove = params.ValueToRemove;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.InsertCollectionValue
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// bool                           bAllowDuplicateValues          (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::InsertCollectionValue(const struct FName& FieldName, int InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.InsertCollectionValue");

	USceneDataStore_InsertCollectionValue_Params params;
	params.FieldName = FieldName;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.bAllowDuplicateValues = bAllowDuplicateValues;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.SetCollectionValueArray
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         CollectionValues               (Const, Parm, OutParm, NeedCtorLink)
// bool                           bClearExisting                 (OptionalParm, Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::SetCollectionValueArray(const struct FName& FieldName, bool bClearExisting, int InsertIndex, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* CollectionValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.SetCollectionValueArray");

	USceneDataStore_SetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bClearExisting = bClearExisting;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollectionValues != nullptr)
		*CollectionValues = params.CollectionValues;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.GetCollectionValueArray
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         out_DataValueArray             (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::GetCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* out_DataValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.GetCollectionValueArray");

	USceneDataStore_GetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataValueArray != nullptr)
		*out_DataValueArray = params.out_DataValueArray;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.ClearFields
// (Final, Defined, Public)
// Parameters:
// bool                           bReinitializeRuntimeFields     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::ClearFields(bool bReinitializeRuntimeFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.ClearFields");

	USceneDataStore_ClearFields_Params params;
	params.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.FindFieldIndex
// (Final, Defined, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bSearchPersistentFields        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int USceneDataStore::FindFieldIndex(const struct FName& FieldName, bool bSearchPersistentFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.FindFieldIndex");

	USceneDataStore_FindFieldIndex_Params params;
	params.FieldName = FieldName;
	params.bSearchPersistentFields = bSearchPersistentFields;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.RemoveField
// (Final, Defined, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::RemoveField(const struct FName& FieldName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.RemoveField");

	USceneDataStore_RemoveField_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneDataStore.AddField
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TEnumAsByte<EUIDataProviderFieldType> FieldType                      (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// int                            out_InsertPosition             (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USceneDataStore::AddField(const struct FName& FieldName, TEnumAsByte<EUIDataProviderFieldType> FieldType, bool bPersistent, int* out_InsertPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneDataStore.AddField");

	USceneDataStore_AddField_Params params;
	params.FieldName = FieldName;
	params.FieldType = FieldType;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InsertPosition != nullptr)
		*out_InsertPosition = params.out_InsertPosition;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_SessionSettings::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded");

	UUIDataStore_SessionSettings_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_SessionSettings.ClearDataProviders
// (Final, Defined, Public)

void UUIDataStore_SessionSettings::ClearDataProviders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_SessionSettings.ClearDataProviders");

	UUIDataStore_SessionSettings_ClearDataProviders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SessionSettingsProvider.CleanupDataProvider
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USessionSettingsProvider::CleanupDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.CleanupDataProvider");

	USessionSettingsProvider_CleanupDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SessionSettingsProvider.IsValidDataSourceClass
// (Defined, Event, Public)
// Parameters:
// class UClass*                  PotentialDataSourceClass       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USessionSettingsProvider::IsValidDataSourceClass(class UClass* PotentialDataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.IsValidDataSourceClass");

	USessionSettingsProvider_IsValidDataSourceClass_Params params;
	params.PotentialDataSourceClass = PotentialDataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SessionSettingsProvider.ProviderClientUnbound
// (Event, Public)
// Parameters:
// class UClass*                  DataSourceClass                (Parm)

void USessionSettingsProvider::ProviderClientUnbound(class UClass* DataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.ProviderClientUnbound");

	USessionSettingsProvider_ProviderClientUnbound_Params params;
	params.DataSourceClass = DataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SessionSettingsProvider.ProviderClientBound
// (Event, Public)
// Parameters:
// class UClass*                  DataSourceClass                (Parm)

void USessionSettingsProvider::ProviderClientBound(class UClass* DataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.ProviderClientBound");

	USessionSettingsProvider_ProviderClientBound_Params params;
	params.DataSourceClass = DataSourceClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SessionSettingsProvider.UnbindProviderClient
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USessionSettingsProvider::UnbindProviderClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.UnbindProviderClient");

	USessionSettingsProvider_UnbindProviderClient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SessionSettingsProvider.BindProviderClient
// (Final, Native, Public)
// Parameters:
// class UClass*                  DataSourceClass                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USessionSettingsProvider::BindProviderClient(class UClass* DataSourceClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SessionSettingsProvider.BindProviderClient");

	USessionSettingsProvider_BindProviderClient_Params params;
	params.DataSourceClass = DataSourceClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAnimationSeq.ApplyAnimation
// (Native, Public)
// Parameters:
// class UUIObject*               TargetWidget                   (Parm)
// int                            TrackIndex                     (Parm)
// float                          Position                       (Parm)
// int                            LFI                            (Parm)
// int                            NFI                            (Parm)
// struct FUIAnimSeqRef           AnimRefInst                    (Parm)

void UUIAnimationSeq::ApplyAnimation(class UUIObject* TargetWidget, int TrackIndex, float Position, int LFI, int NFI, const struct FUIAnimSeqRef& AnimRefInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAnimationSeq.ApplyAnimation");

	UUIAnimationSeq_ApplyAnimation_Params params;
	params.TargetWidget = TargetWidget;
	params.TrackIndex = TrackIndex;
	params.Position = Position;
	params.LFI = LFI;
	params.NFI = NFI;
	params.AnimRefInst = AnimRefInst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIButton.SetImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIButton::SetImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIButton.SetImage");

	UUIButton_SetImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.OnSetBoolValue
// (Final, Defined, Public)
// Parameters:
// class UUIAction_SetBoolValue*  Action                         (Parm)

void UUICheckbox::OnSetBoolValue(class UUIAction_SetBoolValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.OnSetBoolValue");

	UUICheckbox_OnSetBoolValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.SetValue
// (Native, Public)
// Parameters:
// bool                           bShouldBeChecked               (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUICheckbox::SetValue(bool bShouldBeChecked, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.SetValue");

	UUICheckbox_SetValue_Params params;
	params.bShouldBeChecked = bShouldBeChecked;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUICheckbox::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.SaveSubscriberValue");

	UUICheckbox_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UICheckbox.ClearBoundDataStores
// (Final, Native, Public)

void UUICheckbox::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.ClearBoundDataStores");

	UUICheckbox_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUICheckbox::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.GetBoundDataStores");

	UUICheckbox_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UICheckbox.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUICheckbox::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.NotifyDataStoreValueUpdated");

	UUICheckbox_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUICheckbox::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.RefreshSubscriberValue");

	UUICheckbox_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UICheckbox.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUICheckbox::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.GetDataStoreBinding");

	UUICheckbox_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UICheckbox.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUICheckbox::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.SetDataStoreBinding");

	UUICheckbox_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICheckbox.IsChecked
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUICheckbox::IsChecked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.IsChecked");

	UUICheckbox_IsChecked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UICheckbox.SetCheckImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUICheckbox::SetCheckImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICheckbox.SetCheckImage");

	UUICheckbox_SetCheckImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.OnGetTextValue
// (Defined, Public)
// Parameters:
// class UUIAction_GetTextValue*  Action                         (Parm)

void UUIComboBox::OnGetTextValue(class UUIAction_GetTextValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.OnGetTextValue");

	UUIComboBox_OnGetTextValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.ListItemSelected
// (Defined, Public)
// Parameters:
// class UUIList*                 Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIComboBox::ListItemSelected(class UUIList* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.ListItemSelected");

	UUIComboBox_ListItemSelected_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.SelectedItemChanged
// (Defined, Public)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComboBox::SelectedItemChanged(class UUIObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SelectedItemChanged");

	UUIComboBox_SelectedItemChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.EditboxTextChanged
// (Defined, Public)
// Parameters:
// class UUIObject*               Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComboBox::EditboxTextChanged(class UUIObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.EditboxTextChanged");

	UUIComboBox_EditboxTextChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.ShowListClickHandler
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComboBox::ShowListClickHandler(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.ShowListClickHandler");

	UUIComboBox_ShowListClickHandler_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.ButtonPressed
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComboBox::ButtonPressed(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.ButtonPressed");

	UUIComboBox_ButtonPressed_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.EditboxPressed
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)

void UUIComboBox::EditboxPressed(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.EditboxPressed");

	UUIComboBox_EditboxPressed_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.SetListDocking
// (Defined, Public)
// Parameters:
// bool                           bDockToButton                  (Parm)

void UUIComboBox::SetListDocking(bool bDockToButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SetListDocking");

	UUIComboBox_SetListDocking_Params params;
	params.bDockToButton = bDockToButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.IsListDockedToButton
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComboBox::IsListDockedToButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.IsListDockedToButton");

	UUIComboBox_IsListDockedToButton_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.SetEditboxText
// (Defined, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)
// int                            PlayerIndex                    (Parm)
// bool                           bListItemsOnly                 (OptionalParm, Parm)
// bool                           bSkipNotification              (OptionalParm, Parm)

void UUIComboBox::SetEditboxText(const struct FString& NewText, int PlayerIndex, bool bListItemsOnly, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SetEditboxText");

	UUIComboBox_SetEditboxText_Params params;
	params.NewText = NewText;
	params.PlayerIndex = PlayerIndex;
	params.bListItemsOnly = bListItemsOnly;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.HideList
// (Defined, Event, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIComboBox::HideList(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.HideList");

	UUIComboBox_HideList_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.ShowList
// (Defined, Event, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIComboBox::ShowList(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.ShowList");

	UUIComboBox_ShowList_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.SetVisibility
// (Defined, Event, Public)
// Parameters:
// bool                           bIsVisible                     (Parm)

void UUIComboBox::SetVisibility(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SetVisibility");

	UUIComboBox_SetVisibility_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.PostInitialize
// (Defined, Event, Public)

void UUIComboBox::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.PostInitialize");

	UUIComboBox_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComboBox::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SaveSubscriberValue");

	UUIComboBox_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.ClearBoundDataStores
// (Native, Public)

void UUIComboBox::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.ClearBoundDataStores");

	UUIComboBox_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.GetBoundDataStores
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIComboBox::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.GetBoundDataStores");

	UUIComboBox_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIComboBox.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIComboBox::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.NotifyDataStoreValueUpdated");

	UUIComboBox_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComboBox::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.RefreshSubscriberValue");

	UUIComboBox_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIComboBox::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.GetDataStoreBinding");

	UUIComboBox_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIComboBox::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.SetDataStoreBinding");

	UUIComboBox_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComboBox.CreateCustomComboList
// (Public, Delegate)
// Parameters:
// class UUIComboBox*             ListOwner                      (Parm)
// class UUIList*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIList* UUIComboBox::CreateCustomComboList(class UUIComboBox* ListOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.CreateCustomComboList");

	UUIComboBox_CreateCustomComboList_Params params;
	params.ListOwner = ListOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.CreateCustomComboButton
// (Public, Delegate)
// Parameters:
// class UUIComboBox*             ButtonOwner                    (Parm)
// class UUIToggleButton*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIToggleButton* UUIComboBox::CreateCustomComboButton(class UUIComboBox* ButtonOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.CreateCustomComboButton");

	UUIComboBox_CreateCustomComboButton_Params params;
	params.ButtonOwner = ButtonOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComboBox.CreateCustomComboEditbox
// (Public, Delegate)
// Parameters:
// class UUIComboBox*             EditboxOwner                   (Parm)
// class UUIEditBox*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIEditBox* UUIComboBox::CreateCustomComboEditbox(class UUIComboBox* EditboxOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComboBox.CreateCustomComboEditbox");

	UUIComboBox_CreateCustomComboEditbox_Params params;
	params.EditboxOwner = EditboxOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.ClearCellBinding
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::ClearCellBinding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.ClearCellBinding");

	UUIList_ClearCellBinding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.OnStateChanged
// (Final, Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                NewlyActiveState               (Parm)
// class UUIState*                PreviouslyActiveState          (OptionalParm, Parm)

void UUIList::OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.OnStateChanged");

	UUIList_OnStateChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;
	params.NewlyActiveState = NewlyActiveState;
	params.PreviouslyActiveState = PreviouslyActiveState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.ClickedScrollZone
// (Defined, Public)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionPerc                   (Parm)
// int                            PlayerIndex                    (Parm)

void UUIList::ClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.ClickedScrollZone");

	UUIList_ClickedScrollZone_Params params;
	params.Sender = Sender;
	params.PositionPerc = PositionPerc;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.ShouldRenderColumnHeaders
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::ShouldRenderColumnHeaders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.ShouldRenderColumnHeaders");

	UUIList_ShouldRenderColumnHeaders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.EnableColumnHeaderRendering
// (Final, Defined, Public)
// Parameters:
// bool                           bShouldRenderColHeaders        (OptionalParm, Parm)

void UUIList::EnableColumnHeaderRendering(bool bShouldRenderColHeaders)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.EnableColumnHeaderRendering");

	UUIList_EnableColumnHeaderRendering_Params params;
	params.bShouldRenderColHeaders = bShouldRenderColHeaders;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.IsValueChangeNotificationEnabled
// (Final, Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::IsValueChangeNotificationEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IsValueChangeNotificationEnabled");

	UUIList_IsValueChangeNotificationEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.DisableValueChangeNotification
// (Final, Defined, Event, Public)

void UUIList::DisableValueChangeNotification()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.DisableValueChangeNotification");

	UUIList_DisableValueChangeNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.EnableValueChangeNotification
// (Final, Defined, Event, Public)

void UUIList::EnableValueChangeNotification()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.EnableValueChangeNotification");

	UUIList_EnableValueChangeNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.IsSetIndexEnabled
// (Final, Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::IsSetIndexEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IsSetIndexEnabled");

	UUIList_IsSetIndexEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.DisableSetIndex
// (Final, Defined, Event, Public)

void UUIList::DisableSetIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.DisableSetIndex");

	UUIList_DisableSetIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.EnableSetIndex
// (Final, Defined, Event, Public)

void UUIList::EnableSetIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.EnableSetIndex");

	UUIList_EnableSetIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.DecrementAllMutexes
// (Final, Defined, Event, Public)
// Parameters:
// bool                           bDispatchUpdates               (OptionalParm, Parm)

void UUIList::DecrementAllMutexes(bool bDispatchUpdates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.DecrementAllMutexes");

	UUIList_DecrementAllMutexes_Params params;
	params.bDispatchUpdates = bDispatchUpdates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.IncrementAllMutexes
// (Final, Defined, Event, Public)

void UUIList::IncrementAllMutexes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IncrementAllMutexes");

	UUIList_IncrementAllMutexes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.AllMutexesDisabled
// (Final, Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::AllMutexesDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.AllMutexesDisabled");

	UUIList_AllMutexesDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.PostInitialize
// (Defined, Event, Public)

void UUIList::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.PostInitialize");

	UUIList_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.Initialized
// (Defined, Event, Public)

void UUIList::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.Initialized");

	UUIList_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.OnGetTextValue
// (Defined, Public)
// Parameters:
// class UUIAction_GetTextValue*  Action                         (Parm)

void UUIList::OnGetTextValue(class UUIAction_GetTextValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.OnGetTextValue");

	UUIList_OnGetTextValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.OnSetListIndex
// (Final, Defined, Protected)
// Parameters:
// class UUIAction_SetListIndex*  Action                         (Parm)

void UUIList::OnSetListIndex(class UUIAction_SetListIndex* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.OnSetListIndex");

	UUIList_OnSetListIndex_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SaveSubscriberValue");

	UUIList_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIList.IsElementAutoSizingEnabled
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::IsElementAutoSizingEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IsElementAutoSizingEnabled");

	UUIList_IsElementAutoSizingEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.ClearBoundDataStores
// (Final, Native, Public)

void UUIList::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.ClearBoundDataStores");

	UUIList_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIList::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetBoundDataStores");

	UUIList_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIList.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIList::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.NotifyDataStoreValueUpdated");

	UUIList_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.RefreshSubscriberValue");

	UUIList_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIList::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetDataStoreBinding");

	UUIList_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIList::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetDataStoreBinding");

	UUIList_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.IsHotTrackingEnabled
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::IsHotTrackingEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IsHotTrackingEnabled");

	UUIList_IsHotTrackingEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.SetHotTracking
// (Final, Native, Public)
// Parameters:
// bool                           bShouldUpdateItemUnderCursor   (Parm)

void UUIList::SetHotTracking(bool bShouldUpdateItemUnderCursor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetHotTracking");

	UUIList_SetHotTracking_Params params;
	params.bShouldUpdateItemUnderCursor = bShouldUpdateItemUnderCursor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.CanSelectElement
// (Final, Native, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::CanSelectElement(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.CanSelectElement");

	UUIList_CanSelectElement_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.IsElementEnabled
// (Final, Native, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::IsElementEnabled(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.IsElementEnabled");

	UUIList_IsElementEnabled_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.SetTopIndex
// (Final, Native, Public)
// Parameters:
// int                            NewTopIndex                    (Parm)
// bool                           bClampValue                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::SetTopIndex(int NewTopIndex, bool bClampValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetTopIndex");

	UUIList_SetTopIndex_Params params;
	params.NewTopIndex = NewTopIndex;
	params.bClampValue = bClampValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.SetIndex
// (Final, Native, Public)
// Parameters:
// int                            NewIndex                       (Parm)
// bool                           bClampValue                    (OptionalParm, Parm)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::SetIndex(int NewIndex, bool bClampValue, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetIndex");

	UUIList_SetIndex_Params params;
	params.NewIndex = NewIndex;
	params.bClampValue = bClampValue;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.FindItemIndex
// (Final, Native, Public)
// Parameters:
// struct FString                 ItemValue                      (Parm, NeedCtorLink)
// int                            CellIndex                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::FindItemIndex(const struct FString& ItemValue, int CellIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.FindItemIndex");

	UUIList_FindItemIndex_Params params;
	params.ItemValue = ItemValue;
	params.CellIndex = CellIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetElementValue
// (Final, Native, Public)
// Parameters:
// int                            ElementIndex                   (Parm)
// int                            CellIndex                      (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIList::GetElementValue(int ElementIndex, int CellIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetElementValue");

	UUIList_GetElementValue_Params params;
	params.ElementIndex = ElementIndex;
	params.CellIndex = CellIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetCurrentItem
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetCurrentItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetCurrentItem");

	UUIList_GetCurrentItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetSelectedItems
// (Final, Native, Public)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> UUIList::GetSelectedItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetSelectedItems");

	UUIList_GetSelectedItems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetResizeColumn
// (Native, Public, HasOutParms)
// Parameters:
// struct FCellHitDetectionInfo   ClickedCell                    (Const, OptionalParm, Parm, OutParm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetResizeColumn(struct FCellHitDetectionInfo* ClickedCell)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetResizeColumn");

	UUIList_GetResizeColumn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClickedCell != nullptr)
		*ClickedCell = params.ClickedCell;

	return params.ReturnValue;
}


// Function Engine.UIList.CalculateIndexFromCursorLocation
// (Native, Public)
// Parameters:
// bool                           bRequireValidIndex             (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::CalculateIndexFromCursorLocation(bool bRequireValidIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.CalculateIndexFromCursorLocation");

	UUIList_CalculateIndexFromCursorLocation_Params params;
	params.bRequireValidIndex = bRequireValidIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetClientRegion
// (Native, Public)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector2D UUIList::GetClientRegion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetClientRegion");

	UUIList_GetClientRegion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetRowHeight
// (Native, Public)
// Parameters:
// int                            RowIndex                       (OptionalParm, Parm)
// bool                           bColHeader                     (OptionalParm, Parm)
// bool                           bReturnUnformattedValue        (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIList::GetRowHeight(int RowIndex, bool bColHeader, bool bReturnUnformattedValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetRowHeight");

	UUIList_GetRowHeight_Params params;
	params.RowIndex = RowIndex;
	params.bColHeader = bColHeader;
	params.bReturnUnformattedValue = bReturnUnformattedValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetColumnWidth
// (Final, Native, Public)
// Parameters:
// int                            ColumnIndex                    (OptionalParm, Parm)
// bool                           bColHeader                     (OptionalParm, Parm)
// bool                           bReturnUnformattedValue        (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIList::GetColumnWidth(int ColumnIndex, bool bColHeader, bool bReturnUnformattedValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetColumnWidth");

	UUIList_GetColumnWidth_Params params;
	params.ColumnIndex = ColumnIndex;
	params.bColHeader = bColHeader;
	params.bReturnUnformattedValue = bReturnUnformattedValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.SetRowCount
// (Final, Native, Public)
// Parameters:
// int                            NewRowCount                    (Parm)

void UUIList::SetRowCount(int NewRowCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetRowCount");

	UUIList_SetRowCount_Params params;
	params.NewRowCount = NewRowCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.SetColumnCount
// (Final, Native, Public)
// Parameters:
// int                            NewColumnCount                 (Parm)

void UUIList::SetColumnCount(int NewColumnCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.SetColumnCount");

	UUIList_SetColumnCount_Params params;
	params.NewColumnCount = NewColumnCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.GetTotalColumnCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetTotalColumnCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetTotalColumnCount");

	UUIList_GetTotalColumnCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetTotalRowCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetTotalRowCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetTotalRowCount");

	UUIList_GetTotalRowCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetMaxNumVisibleColumns
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetMaxNumVisibleColumns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetMaxNumVisibleColumns");

	UUIList_GetMaxNumVisibleColumns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetMaxNumVisibleRows
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetMaxNumVisibleRows()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetMaxNumVisibleRows");

	UUIList_GetMaxNumVisibleRows_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetMaxVisibleElementCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetMaxVisibleElementCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetMaxVisibleElementCount");

	UUIList_GetMaxVisibleElementCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.GetItemCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::GetItemCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.GetItemCount");

	UUIList_GetItemCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.RemoveElement
// (Native, Public)
// Parameters:
// int                            ElementToRemove                (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIList::RemoveElement(int ElementToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.RemoveElement");

	UUIList_RemoveElement_Params params;
	params.ElementToRemove = ElementToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.ScrollVertical
// (Final, Native, Public)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionChange                 (Parm)
// bool                           bPositionMaxed                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIList::ScrollVertical(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.ScrollVertical");

	UUIList_ScrollVertical_Params params;
	params.Sender = Sender;
	params.PositionChange = PositionChange;
	params.bPositionMaxed = bPositionMaxed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIList.OnListElementsSorted
// (Public, Delegate)
// Parameters:
// class UUIList*                 Sender                         (Parm)

void UUIList::OnListElementsSorted(class UUIList* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.OnListElementsSorted");

	UUIList_OnListElementsSorted_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIList.OnSubmitSelection
// (Public, Delegate)
// Parameters:
// class UUIList*                 Sender                         (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIList::OnSubmitSelection(class UUIList* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIList.OnSubmitSelection");

	UUIList_OnSubmitSelection_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_ListPresenter.FindElementIndex
// (Final, Native, Public)
// Parameters:
// int                            DataSourceIndex                (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIComp_ListPresenter::FindElementIndex(int DataSourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListPresenter.FindElementIndex");

	UUIComp_ListPresenter_FindElementIndex_Params params;
	params.DataSourceIndex = DataSourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListPresenter.GetCellSchemaProvider
// (Final, Native, Public)
// Parameters:
// TScriptInterface<class UUIListElementCellProvider> ReturnValue                    (Parm, OutParm, ReturnParm)

TScriptInterface<class UUIListElementCellProvider> UUIComp_ListPresenter::GetCellSchemaProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListPresenter.GetCellSchemaProvider");

	UUIComp_ListPresenter_GetCellSchemaProvider_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListPresenter.ShouldAdjustListBounds
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_ListPresenter::ShouldAdjustListBounds(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListPresenter.ShouldAdjustListBounds");

	UUIComp_ListPresenter_ShouldAdjustListBounds_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListPresenter.ShouldRenderColumnHeaders
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_ListPresenter::ShouldRenderColumnHeaders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListPresenter.ShouldRenderColumnHeaders");

	UUIComp_ListPresenter_ShouldRenderColumnHeaders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListPresenter.EnableColumnHeaderRendering
// (Final, Native, Public)
// Parameters:
// bool                           bShouldRenderColHeaders        (OptionalParm, Parm)

void UUIComp_ListPresenter::EnableColumnHeaderRendering(bool bShouldRenderColHeaders)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListPresenter.EnableColumnHeaderRendering");

	UUIComp_ListPresenter_EnableColumnHeaderRendering_Params params;
	params.bShouldRenderColHeaders = bShouldRenderColHeaders;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIContextMenu.FindMenuItemIndex
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// struct FString                 ItemToFind                     (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIContextMenu::FindMenuItemIndex(class UUIObject* Widget, const struct FString& ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.FindMenuItemIndex");

	UUIContextMenu_FindMenuItemIndex_Params params;
	params.Widget = Widget;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.GetMenuItem
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// int                            IndexToGet                     (Parm)
// struct FString                 out_MenuItem                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::GetMenuItem(class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.GetMenuItem");

	UUIContextMenu_GetMenuItem_Params params;
	params.Widget = Widget;
	params.IndexToGet = IndexToGet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_MenuItem != nullptr)
		*out_MenuItem = params.out_MenuItem;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.GetAllMenuItems
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// TArray<struct FString>         out_MenuItems                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::GetAllMenuItems(class UUIObject* Widget, TArray<struct FString>* out_MenuItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.GetAllMenuItems");

	UUIContextMenu_GetAllMenuItems_Params params;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_MenuItems != nullptr)
		*out_MenuItems = params.out_MenuItems;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.RemoveMenuItemAtIndex
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// int                            IndexToRemove                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::RemoveMenuItemAtIndex(class UUIObject* Widget, int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.RemoveMenuItemAtIndex");

	UUIContextMenu_RemoveMenuItemAtIndex_Params params;
	params.Widget = Widget;
	params.IndexToRemove = IndexToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.RemoveMenuItem
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// struct FString                 ItemToRemove                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::RemoveMenuItem(class UUIObject* Widget, const struct FString& ItemToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.RemoveMenuItem");

	UUIContextMenu_RemoveMenuItem_Params params;
	params.Widget = Widget;
	params.ItemToRemove = ItemToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.ClearMenuItems
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::ClearMenuItems(class UUIObject* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.ClearMenuItems");

	UUIContextMenu_ClearMenuItems_Params params;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.InsertMenuItem
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// struct FString                 Item                           (Parm, NeedCtorLink)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bAllowDuplicates               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::InsertMenuItem(class UUIObject* Widget, const struct FString& Item, int InsertIndex, bool bAllowDuplicates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.InsertMenuItem");

	UUIContextMenu_InsertMenuItem_Params params;
	params.Widget = Widget;
	params.Item = Item;
	params.InsertIndex = InsertIndex;
	params.bAllowDuplicates = bAllowDuplicates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.SetMenuItems
// (Defined, Event, Public)
// Parameters:
// class UUIObject*               Widget                         (Parm)
// TArray<struct FString>         NewMenuItems                   (Parm, NeedCtorLink)
// bool                           bClearExisting                 (OptionalParm, Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::SetMenuItems(class UUIObject* Widget, TArray<struct FString> NewMenuItems, bool bClearExisting, int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.SetMenuItems");

	UUIContextMenu_SetMenuItems_Params params;
	params.Widget = Widget;
	params.NewMenuItems = NewMenuItems;
	params.bClearExisting = bClearExisting;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.Close
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::Close(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.Close");

	UUIContextMenu_Close_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.Open
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::Open(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.Open");

	UUIContextMenu_Open_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIContextMenu.IsActiveContextMenu
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIContextMenu::IsActiveContextMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIContextMenu.IsActiveContextMenu");

	UUIContextMenu_IsActiveContextMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawComponents.OnFadeComplete
// (Public, Delegate)
// Parameters:
// class UUIComp_DrawComponents*  Sender                         (Parm, EditInline)

void UUIComp_DrawComponents::OnFadeComplete(class UUIComp_DrawComponents* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawComponents.OnFadeComplete");

	UUIComp_DrawComponents_OnFadeComplete_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawComponents.ResetFade
// (Final, Native, Public)

void UUIComp_DrawComponents::ResetFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawComponents.ResetFade");

	UUIComp_DrawComponents_ResetFade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawComponents.Pulse
// (Final, Native, Public)
// Parameters:
// float                          MaxAlpha                       (OptionalParm, Parm)
// float                          MinAlpha                       (OptionalParm, Parm)
// float                          PulseRate                      (OptionalParm, Parm)

void UUIComp_DrawComponents::Pulse(float MaxAlpha, float MinAlpha, float PulseRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawComponents.Pulse");

	UUIComp_DrawComponents_Pulse_Params params;
	params.MaxAlpha = MaxAlpha;
	params.MinAlpha = MinAlpha;
	params.PulseRate = PulseRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawComponents.Fade
// (Final, Native, Public)
// Parameters:
// float                          FromAlpha                      (Parm)
// float                          ToAlpha                        (Parm)
// float                          TargetFadeTime                 (Parm)

void UUIComp_DrawComponents::Fade(float FromAlpha, float ToAlpha, float TargetFadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawComponents.Fade");

	UUIComp_DrawComponents_Fade_Params params;
	params.FromAlpha = FromAlpha;
	params.ToAlpha = ToAlpha;
	params.TargetFadeTime = TargetFadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetAutoSizePadding
// (Final, Defined, Event, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NearValue                      (Parm)
// float                          FarValue                       (Parm)
// TEnumAsByte<EUIExtentEvalType> NearScaleType                  (Parm)
// TEnumAsByte<EUIExtentEvalType> FarScaleType                   (Parm)

void UUIComp_DrawString::SetAutoSizePadding(TEnumAsByte<EUIOrientation> Orientation, float NearValue, float FarValue, TEnumAsByte<EUIExtentEvalType> NearScaleType, TEnumAsByte<EUIExtentEvalType> FarScaleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetAutoSizePadding");

	UUIComp_DrawString_SetAutoSizePadding_Params params;
	params.Orientation = Orientation;
	params.NearValue = NearValue;
	params.FarValue = FarValue;
	params.NearScaleType = NearScaleType;
	params.FarScaleType = FarScaleType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.EnableAutoSizing
// (Final, Defined, Event, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// bool                           bShouldEnable                  (OptionalParm, Parm)

void UUIComp_DrawString::EnableAutoSizing(TEnumAsByte<EUIOrientation> Orientation, bool bShouldEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.EnableAutoSizing");

	UUIComp_DrawString_EnableAutoSizing_Params params;
	params.Orientation = Orientation;
	params.bShouldEnable = bShouldEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.IsAutoSizeEnabled
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawString::IsAutoSizeEnabled(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.IsAutoSizeEnabled");

	UUIComp_DrawString_IsAutoSizeEnabled_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.SetAutoSizeExtent
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          MinValue                       (Parm)
// float                          MaxValue                       (Parm)
// TEnumAsByte<EUIExtentEvalType> MinScaleType                   (Parm)
// TEnumAsByte<EUIExtentEvalType> MaxScaleType                   (Parm)

void UUIComp_DrawString::SetAutoSizeExtent(TEnumAsByte<EUIOrientation> Orientation, float MinValue, float MaxValue, TEnumAsByte<EUIExtentEvalType> MinScaleType, TEnumAsByte<EUIExtentEvalType> MaxScaleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetAutoSizeExtent");

	UUIComp_DrawString_SetAutoSizeExtent_Params params;
	params.Orientation = Orientation;
	params.MinValue = MinValue;
	params.MaxValue = MaxValue;
	params.MinScaleType = MinScaleType;
	params.MaxScaleType = MaxScaleType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.NotifyResolveStyle
// (Final, Native, Public)
// Parameters:
// class UUISkin*                 ActiveSkin                     (Parm)
// bool                           bClearExistingValue            (Parm)
// class UUIState*                CurrentMenuState               (OptionalParm, Parm)
// struct FName                   StylePropertyName              (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawString::NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.NotifyResolveStyle");

	UUIComp_DrawString_NotifyResolveStyle_Params params;
	params.ActiveSkin = ActiveSkin;
	params.bClearExistingValue = bClearExistingValue;
	params.CurrentMenuState = CurrentMenuState;
	params.StylePropertyName = StylePropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.SetStyleResolverTag
// (Final, Native, Public)
// Parameters:
// struct FName                   NewResolverTag                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawString::SetStyleResolverTag(const struct FName& NewResolverTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetStyleResolverTag");

	UUIComp_DrawString_SetStyleResolverTag_Params params;
	params.NewResolverTag = NewResolverTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetStyleResolverTag
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIComp_DrawString::GetStyleResolverTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetStyleResolverTag");

	UUIComp_DrawString_GetStyleResolverTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetFinalStringStyle
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FUICombinedStyleData    FinalStyleData                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawString::GetFinalStringStyle(struct FUICombinedStyleData* FinalStyleData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetFinalStringStyle");

	UUIComp_DrawString_GetFinalStringStyle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FinalStyleData != nullptr)
		*FinalStyleData = params.FinalStyleData;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetAppliedStringStyle
// (Final, Native, Public)
// Parameters:
// class UUIState*                DesiredMenuState               (OptionalParm, Parm)
// class UUIStyle_Combo*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIStyle_Combo* UUIComp_DrawString::GetAppliedStringStyle(class UUIState* DesiredMenuState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetAppliedStringStyle");

	UUIComp_DrawString_GetAppliedStringStyle_Params params;
	params.DesiredMenuState = DesiredMenuState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetWrapMode
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ETextClipMode>     ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ETextClipMode> UUIComp_DrawString::GetWrapMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetWrapMode");

	UUIComp_DrawString_GetWrapMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomSpacingAdjust()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust");

	UUIComp_DrawString_DisableCustomSpacingAdjust_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomScale
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomScale");

	UUIComp_DrawString_DisableCustomScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomAutoScaling
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomAutoScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomAutoScaling");

	UUIComp_DrawString_DisableCustomAutoScaling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomClipAlignment
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomClipAlignment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomClipAlignment");

	UUIComp_DrawString_DisableCustomClipAlignment_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomClipMode
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomClipMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomClipMode");

	UUIComp_DrawString_DisableCustomClipMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomAlignment
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomAlignment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomAlignment");

	UUIComp_DrawString_DisableCustomAlignment_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomAttributes
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomAttributes");

	UUIComp_DrawString_DisableCustomAttributes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomFont
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomFont");

	UUIComp_DrawString_DisableCustomFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomPadding
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomPadding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomPadding");

	UUIComp_DrawString_DisableCustomPadding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomOpacity
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomOpacity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomOpacity");

	UUIComp_DrawString_DisableCustomOpacity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.DisableCustomColor
// (Final, Native, Public)

void UUIComp_DrawString::DisableCustomColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.DisableCustomColor");

	UUIComp_DrawString_DisableCustomColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetSpacingAdjust
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NewSpacingAdjust               (Parm)

void UUIComp_DrawString::SetSpacingAdjust(TEnumAsByte<EUIOrientation> Orientation, float NewSpacingAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetSpacingAdjust");

	UUIComp_DrawString_SetSpacingAdjust_Params params;
	params.Orientation = Orientation;
	params.NewSpacingAdjust = NewSpacingAdjust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetScale
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NewScale                       (Parm)

void UUIComp_DrawString::SetScale(TEnumAsByte<EUIOrientation> Orientation, float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetScale");

	UUIComp_DrawString_SetScale_Params params;
	params.Orientation = Orientation;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetAutoScaling
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ETextAutoScaleMode> NewAutoScaleMode               (Parm)
// float                          NewMinScaleValue               (OptionalParm, Parm)

void UUIComp_DrawString::SetAutoScaling(TEnumAsByte<ETextAutoScaleMode> NewAutoScaleMode, float NewMinScaleValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetAutoScaling");

	UUIComp_DrawString_SetAutoScaling_Params params;
	params.NewAutoScaleMode = NewAutoScaleMode;
	params.NewMinScaleValue = NewMinScaleValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetClipAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIAlignment>      NewClipAlignment               (Parm)

void UUIComp_DrawString::SetClipAlignment(TEnumAsByte<EUIAlignment> NewClipAlignment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetClipAlignment");

	UUIComp_DrawString_SetClipAlignment_Params params;
	params.NewClipAlignment = NewClipAlignment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetWrapMode
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ETextClipMode>     NewClipMode                    (Parm)

void UUIComp_DrawString::SetWrapMode(TEnumAsByte<ETextClipMode> NewClipMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetWrapMode");

	UUIComp_DrawString_SetWrapMode_Params params;
	params.NewClipMode = NewClipMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// TEnumAsByte<EUIAlignment>      NewAlignment                   (Parm)

void UUIComp_DrawString::SetAlignment(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIAlignment> NewAlignment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetAlignment");

	UUIComp_DrawString_SetAlignment_Params params;
	params.Orientation = Orientation;
	params.NewAlignment = NewAlignment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetAttributes
// (Final, Native, Public)
// Parameters:
// struct FUITextAttributes       NewAttributes                  (Parm)

void UUIComp_DrawString::SetAttributes(const struct FUITextAttributes& NewAttributes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetAttributes");

	UUIComp_DrawString_SetAttributes_Params params;
	params.NewAttributes = NewAttributes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetFont
// (Final, Native, Public)
// Parameters:
// class UFont*                   NewFont                        (Parm)

void UUIComp_DrawString::SetFont(class UFont* NewFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetFont");

	UUIComp_DrawString_SetFont_Params params;
	params.NewFont = NewFont;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetPadding
// (Final, Native, Public)
// Parameters:
// float                          HorizontalPadding              (Parm)
// float                          VerticalPadding                (Parm)

void UUIComp_DrawString::SetPadding(float HorizontalPadding, float VerticalPadding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetPadding");

	UUIComp_DrawString_SetPadding_Params params;
	params.HorizontalPadding = HorizontalPadding;
	params.VerticalPadding = VerticalPadding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetOpacity
// (Final, Native, Public)
// Parameters:
// float                          NewOpacity                     (Parm)

void UUIComp_DrawString::SetOpacity(float NewOpacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetOpacity");

	UUIComp_DrawString_SetOpacity_Params params;
	params.NewOpacity = NewOpacity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetColor
// (Final, Native, Public)
// Parameters:
// struct FLinearColor            NewColor                       (Parm)

void UUIComp_DrawString::SetColor(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetColor");

	UUIComp_DrawString_SetColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetSubregionAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// TEnumAsByte<EUIAlignment>      NewValue                       (Parm)

void UUIComp_DrawString::SetSubregionAlignment(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIAlignment> NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetSubregionAlignment");

	UUIComp_DrawString_SetSubregionAlignment_Params params;
	params.Orientation = Orientation;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetSubregionOffset
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NewValue                       (Parm)
// TEnumAsByte<EUIExtentEvalType> EvalType                       (Parm)

void UUIComp_DrawString::SetSubregionOffset(TEnumAsByte<EUIOrientation> Orientation, float NewValue, TEnumAsByte<EUIExtentEvalType> EvalType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetSubregionOffset");

	UUIComp_DrawString_SetSubregionOffset_Params params;
	params.Orientation = Orientation;
	params.NewValue = NewValue;
	params.EvalType = EvalType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.SetSubregionSize
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NewValue                       (Parm)
// TEnumAsByte<EUIExtentEvalType> EvalType                       (Parm)

void UUIComp_DrawString::SetSubregionSize(TEnumAsByte<EUIOrientation> Orientation, float NewValue, TEnumAsByte<EUIExtentEvalType> EvalType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetSubregionSize");

	UUIComp_DrawString_SetSubregionSize_Params params;
	params.Orientation = Orientation;
	params.NewValue = NewValue;
	params.EvalType = EvalType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.EnableSubregion
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// bool                           bShouldEnable                  (OptionalParm, Parm)

void UUIComp_DrawString::EnableSubregion(TEnumAsByte<EUIOrientation> Orientation, bool bShouldEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.EnableSubregion");

	UUIComp_DrawString_EnableSubregion_Params params;
	params.Orientation = Orientation;
	params.bShouldEnable = bShouldEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.GetSubregionAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// TEnumAsByte<EUIAlignment>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EUIAlignment> UUIComp_DrawString::GetSubregionAlignment(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetSubregionAlignment");

	UUIComp_DrawString_GetSubregionAlignment_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetSubregionOffset
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// TEnumAsByte<EUIExtentEvalType> OutputType                     (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIComp_DrawString::GetSubregionOffset(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIExtentEvalType> OutputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetSubregionOffset");

	UUIComp_DrawString_GetSubregionOffset_Params params;
	params.Orientation = Orientation;
	params.OutputType = OutputType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.GetSubregionSize
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// TEnumAsByte<EUIExtentEvalType> OutputType                     (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIComp_DrawString::GetSubregionSize(TEnumAsByte<EUIOrientation> Orientation, TEnumAsByte<EUIExtentEvalType> OutputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetSubregionSize");

	UUIComp_DrawString_GetSubregionSize_Params params;
	params.Orientation = Orientation;
	params.OutputType = OutputType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.IsSubregionEnabled
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawString::IsSubregionEnabled(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.IsSubregionEnabled");

	UUIComp_DrawString_IsSubregionEnabled_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.RefreshValue
// (Final, Native, Public)

void UUIComp_DrawString::RefreshValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.RefreshValue");

	UUIComp_DrawString_RefreshValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawString.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bReturnProcessedText           (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIComp_DrawString::GetValue(bool bReturnProcessedText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.GetValue");

	UUIComp_DrawString_GetValue_Params params;
	params.bReturnProcessedText = bReturnProcessedText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawString.SetValue
// (Final, Native, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)

void UUIComp_DrawString::SetValue(const struct FString& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawString.SetValue");

	UUIComp_DrawString_SetValue_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.NotifyResolveStyle
// (Final, Native, Public)
// Parameters:
// class UUISkin*                 ActiveSkin                     (Parm)
// bool                           bClearExistingValue            (Parm)
// class UUIState*                CurrentMenuState               (OptionalParm, Parm)
// struct FName                   StylePropertyName              (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawImage::NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.NotifyResolveStyle");

	UUIComp_DrawImage_NotifyResolveStyle_Params params;
	params.ActiveSkin = ActiveSkin;
	params.bClearExistingValue = bClearExistingValue;
	params.CurrentMenuState = CurrentMenuState;
	params.StylePropertyName = StylePropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawImage.SetStyleResolverTag
// (Final, Native, Public)
// Parameters:
// struct FName                   NewResolverTag                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawImage::SetStyleResolverTag(const struct FName& NewResolverTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetStyleResolverTag");

	UUIComp_DrawImage_SetStyleResolverTag_Params params;
	params.NewResolverTag = NewResolverTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawImage.GetStyleResolverTag
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIComp_DrawImage::GetStyleResolverTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.GetStyleResolverTag");

	UUIComp_DrawImage_GetStyleResolverTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawImage.GetImage
// (Final, Native, Public)
// Parameters:
// class USurface*                ReturnValue                    (Parm, OutParm, ReturnParm)

class USurface* UUIComp_DrawImage::GetImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.GetImage");

	UUIComp_DrawImage_GetImage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawImage.DisableCustomFormatting
// (Final, Native, Public)

void UUIComp_DrawImage::DisableCustomFormatting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.DisableCustomFormatting");

	UUIComp_DrawImage_DisableCustomFormatting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.DisableCustomPadding
// (Final, Native, Public)

void UUIComp_DrawImage::DisableCustomPadding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.DisableCustomPadding");

	UUIComp_DrawImage_DisableCustomPadding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.DisableCustomOpacity
// (Final, Native, Public)

void UUIComp_DrawImage::DisableCustomOpacity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.DisableCustomOpacity");

	UUIComp_DrawImage_DisableCustomOpacity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.DisableCustomColor
// (Final, Native, Public)

void UUIComp_DrawImage::DisableCustomColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.DisableCustomColor");

	UUIComp_DrawImage_DisableCustomColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.DisableCustomCoordinates
// (Final, Native, Public)

void UUIComp_DrawImage::DisableCustomCoordinates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.DisableCustomCoordinates");

	UUIComp_DrawImage_DisableCustomCoordinates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetFormatting
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// struct FUIImageAdjustmentData  NewFormattingData              (Parm)

void UUIComp_DrawImage::SetFormatting(TEnumAsByte<EUIOrientation> Orientation, const struct FUIImageAdjustmentData& NewFormattingData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetFormatting");

	UUIComp_DrawImage_SetFormatting_Params params;
	params.Orientation = Orientation;
	params.NewFormattingData = NewFormattingData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetPadding
// (Final, Native, Public)
// Parameters:
// float                          HorizontalPadding              (Parm)
// float                          VerticalPadding                (Parm)

void UUIComp_DrawImage::SetPadding(float HorizontalPadding, float VerticalPadding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetPadding");

	UUIComp_DrawImage_SetPadding_Params params;
	params.HorizontalPadding = HorizontalPadding;
	params.VerticalPadding = VerticalPadding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetOpacity
// (Final, Native, Public)
// Parameters:
// float                          NewOpacity                     (Parm)

void UUIComp_DrawImage::SetOpacity(float NewOpacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetOpacity");

	UUIComp_DrawImage_SetOpacity_Params params;
	params.NewOpacity = NewOpacity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetColor
// (Final, Native, Public)
// Parameters:
// struct FLinearColor            NewColor                       (Parm)

void UUIComp_DrawImage::SetColor(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetColor");

	UUIComp_DrawImage_SetColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetCoordinates
// (Final, Native, Public)
// Parameters:
// struct FTextureCoordinates     NewCoordinates                 (Parm)

void UUIComp_DrawImage::SetCoordinates(const struct FTextureCoordinates& NewCoordinates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetCoordinates");

	UUIComp_DrawImage_SetCoordinates_Params params;
	params.NewCoordinates = NewCoordinates;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.SetImage
// (Final, Native, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIComp_DrawImage::SetImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.SetImage");

	UUIComp_DrawImage_SetImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIComp_DrawImage.GetAppliedImageStyle
// (Final, Native, Public)
// Parameters:
// class UUIState*                DesiredMenuState               (OptionalParm, Parm)
// class UUIStyle_Image*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIStyle_Image* UUIComp_DrawImage::GetAppliedImageStyle(class UUIState* DesiredMenuState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawImage.GetAppliedImageStyle");

	UUIComp_DrawImage_GetAppliedImageStyle_Params params;
	params.DesiredMenuState = DesiredMenuState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.OnGetTextValue
// (Defined, Public)
// Parameters:
// class UUIAction_GetTextValue*  Action                         (Parm)

void UUIEditBox::OnGetTextValue(class UUIAction_GetTextValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.OnGetTextValue");

	UUIEditBox_OnGetTextValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.OnSetLabelText
// (Defined, Public)
// Parameters:
// class UUIAction_SetLabelText*  Action                         (Parm)

void UUIEditBox::OnSetLabelText(class UUIAction_SetLabelText* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.OnSetLabelText");

	UUIEditBox_OnSetLabelText_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.IgnoreMarkup
// (Final, Defined, Public)
// Parameters:
// bool                           bShouldIgnoreMarkup            (Parm)

void UUIEditBox::IgnoreMarkup(bool bShouldIgnoreMarkup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.IgnoreMarkup");

	UUIEditBox_IgnoreMarkup_Params params;
	params.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.SetReadOnly
// (Defined, Public)
// Parameters:
// bool                           bShouldBeReadOnly              (Parm)

void UUIEditBox::SetReadOnly(bool bShouldBeReadOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.SetReadOnly");

	UUIEditBox_SetReadOnly_Params params;
	params.bShouldBeReadOnly = bShouldBeReadOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.IsReadOnly
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEditBox::IsReadOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.IsReadOnly");

	UUIEditBox_IsReadOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.Initialized
// (Defined, Event, Public)

void UUIEditBox::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.Initialized");

	UUIEditBox_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEditBox::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.SaveSubscriberValue");

	UUIEditBox_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.ClearBoundDataStores
// (Final, Native, Public)

void UUIEditBox::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.ClearBoundDataStores");

	UUIEditBox_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.GetBoundDataStores
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIEditBox::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.GetBoundDataStores");

	UUIEditBox_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIEditBox.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIEditBox::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.NotifyDataStoreValueUpdated");

	UUIEditBox_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEditBox::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.RefreshSubscriberValue");

	UUIEditBox_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIEditBox::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.GetDataStoreBinding");

	UUIEditBox_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIEditBox::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.SetDataStoreBinding");

	UUIEditBox_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.CalculateCaretPositionFromCursorLocation
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIEditBox::CalculateCaretPositionFromCursorLocation(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.CalculateCaretPositionFromCursorLocation");

	UUIEditBox_CalculateCaretPositionFromCursorLocation_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bReturnUserText                (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIEditBox::GetValue(bool bReturnUserText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.GetValue");

	UUIEditBox_GetValue_Params params;
	params.bReturnUserText = bReturnUserText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEditBox.SetValue
// (Final, Native, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)
// int                            PlayerIndex                    (OptionalParm, Parm)
// bool                           bSkipNotification              (OptionalParm, Parm)

void UUIEditBox::SetValue(const struct FString& NewText, int PlayerIndex, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.SetValue");

	UUIEditBox_SetValue_Params params;
	params.NewText = NewText;
	params.PlayerIndex = PlayerIndex;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.SetBackgroundImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIEditBox::SetBackgroundImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.SetBackgroundImage");

	UUIEditBox_SetBackgroundImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEditBox.OnSubmitText
// (Public, Delegate)
// Parameters:
// class UUIEditBox*              Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEditBox::OnSubmitText(class UUIEditBox* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEditBox.OnSubmitText");

	UUIEditBox_OnSubmitText_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.GetSelectedText
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIComp_DrawStringEditbox::GetSelectedText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.GetSelectedText");

	UUIComp_DrawStringEditbox_GetSelectedText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.GetSelectionRange
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            out_StartIndex                 (Parm, OutParm)
// int                            out_EndIndex                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::GetSelectionRange(int* out_StartIndex, int* out_EndIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.GetSelectionRange");

	UUIComp_DrawStringEditbox_GetSelectionRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_StartIndex != nullptr)
		*out_StartIndex = params.out_StartIndex;
	if (out_EndIndex != nullptr)
		*out_EndIndex = params.out_EndIndex;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.ClearSelection
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::ClearSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.ClearSelection");

	UUIComp_DrawStringEditbox_ClearSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.SetSelectionEnd
// (Final, Native, Public)
// Parameters:
// int                            EndIndex                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::SetSelectionEnd(int EndIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.SetSelectionEnd");

	UUIComp_DrawStringEditbox_SetSelectionEnd_Params params;
	params.EndIndex = EndIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.SetSelectionStart
// (Final, Native, Public)
// Parameters:
// int                            StartIndex                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::SetSelectionStart(int StartIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.SetSelectionStart");

	UUIComp_DrawStringEditbox_SetSelectionStart_Params params;
	params.StartIndex = StartIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.SetSelectionRange
// (Final, Native, Public)
// Parameters:
// int                            StartIndex                     (Parm)
// int                            EndIndex                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::SetSelectionRange(int StartIndex, int EndIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.SetSelectionRange");

	UUIComp_DrawStringEditbox_SetSelectionRange_Params params;
	params.StartIndex = StartIndex;
	params.EndIndex = EndIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.GetUserTextLength
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIComp_DrawStringEditbox::GetUserTextLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.GetUserTextLength");

	UUIComp_DrawStringEditbox_GetUserTextLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_DrawStringEditbox.SetUserText
// (Final, Native, Public)
// Parameters:
// struct FString                 NewValue                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_DrawStringEditbox::SetUserText(const struct FString& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_DrawStringEditbox.SetUserText");

	UUIComp_DrawStringEditbox_SetUserText_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListElementSorter.ResortItems
// (Final, Native, Public)
// Parameters:
// bool                           bCaseSensitive                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_ListElementSorter::ResortItems(bool bCaseSensitive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListElementSorter.ResortItems");

	UUIComp_ListElementSorter_ResortItems_Params params;
	params.bCaseSensitive = bCaseSensitive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListElementSorter.SortItems
// (Final, Native, Public)
// Parameters:
// int                            ColumnIndex                    (Parm)
// bool                           bSecondarySort                 (OptionalParm, Parm)
// bool                           bCaseSensitive                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIComp_ListElementSorter::SortItems(int ColumnIndex, bool bSecondarySort, bool bCaseSensitive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListElementSorter.SortItems");

	UUIComp_ListElementSorter_SortItems_Params params;
	params.ColumnIndex = ColumnIndex;
	params.bSecondarySort = bSecondarySort;
	params.bCaseSensitive = bCaseSensitive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIComp_ListElementSorter.ResetSortColumns
// (Final, Native, Public)
// Parameters:
// bool                           bResort                        (OptionalParm, Parm)

void UUIComp_ListElementSorter::ResetSortColumns(bool bResort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIComp_ListElementSorter.ResetSortColumns");

	UUIComp_ListElementSorter_ResetSortColumns_Params params;
	params.bResort = bResort;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// (Defined, Event, Public)

void UUIDataProvider_OnlinePlayerDataBase::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister");

	UUIDataProvider_OnlinePlayerDataBase_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlinePlayerDataBase::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister");

	UUIDataProvider_OnlinePlayerDataBase_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete
// (Defined, Public)

void UUIDataProvider_OnlineClanMates::OnClanMatesReadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete");

	UUIDataProvider_OnlineClanMates_OnClanMatesReadComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineClanMates.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineClanMates::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineClanMates.OnRegister");

	UUIDataProvider_OnlineClanMates_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// (Defined, Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviterName                    (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnGameInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// (Defined, Public)

void UUIDataProvider_OnlineFriendMessages::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange");

	UUIDataProvider_OnlineFriendMessages_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// (Defined, Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            SendingPlayer                  (Parm)
// struct FString                 SendingNick                    (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendMessageReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// (Defined, Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// struct FString                 RequestingNick                 (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived");

	UUIDataProvider_OnlineFriendMessages_OnFriendInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// (Defined, Public)

void UUIDataProvider_OnlineFriendMessages::ReadMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages");

	UUIDataProvider_OnlineFriendMessages_ReadMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// (Defined, Event, Public)

void UUIDataProvider_OnlineFriendMessages::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister");

	UUIDataProvider_OnlineFriendMessages_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineFriendMessages::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister");

	UUIDataProvider_OnlineFriendMessages_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// (Defined, Event, Public)

void UUIDataProvider_OnlineFriends::RefreshFriendsList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList");

	UUIDataProvider_OnlineFriends_RefreshFriendsList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// (Defined, Public)

void UUIDataProvider_OnlineFriends::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnLoginChange");

	UUIDataProvider_OnlineFriends_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete");

	UUIDataProvider_OnlineFriends_OnFriendsReadComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// (Defined, Event, Public)

void UUIDataProvider_OnlineFriends::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnUnregister");

	UUIDataProvider_OnlineFriends_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineFriends::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnRegister");

	UUIDataProvider_OnlineFriends_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete
// (Defined, Public)

void UUIDataProvider_OnlinePlayers::OnPlayersReadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete");

	UUIDataProvider_OnlinePlayers_OnPlayersReadComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayers.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlinePlayers::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayers.OnRegister");

	UUIDataProvider_OnlinePlayers_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.SaveProfileData
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::SaveProfileData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.SaveProfileData");

	UUIDataProvider_OnlineProfileSettings_SaveProfileData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.OnLoginChange
// (Defined, Public)

void UUIDataProvider_OnlineProfileSettings::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnLoginChange");

	UUIDataProvider_OnlineProfileSettings_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.OnReadProfileComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataProvider_OnlineProfileSettings::OnReadProfileComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnReadProfileComplete");

	UUIDataProvider_OnlineProfileSettings_OnReadProfileComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.OnUnregister
// (Defined, Event, Public)

void UUIDataProvider_OnlineProfileSettings::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnUnregister");

	UUIDataProvider_OnlineProfileSettings_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataProvider_OnlineProfileSettings::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnRegister");

	UUIDataProvider_OnlineProfileSettings_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// (Defined, Public)

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults");

	UUIDataStore_OnlineGameSearch_ClearAllSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// (Defined, Event, Public)
// Parameters:
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::MoveToPrevious(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious");

	UUIDataStore_OnlineGameSearch_MoveToPrevious_Params params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// (Defined, Event, Public)
// Parameters:
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::MoveToNext(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToNext");

	UUIDataStore_OnlineGameSearch_MoveToNext_Params params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// (Defined, Event, Public)
// Parameters:
// struct FName                   SearchName                     (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName");

	UUIDataStore_OnlineGameSearch_SetCurrentByName_Params params;
	params.SearchName = SearchName;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// (Defined, Event, Public)
// Parameters:
// int                            NewIndex                       (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex");

	UUIDataStore_OnlineGameSearch_SetCurrentByIndex_Params params;
	params.NewIndex = NewIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// (Defined, Public)
// Parameters:
// struct FName                   SearchTag                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex(const struct FName& SearchTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex");

	UUIDataStore_OnlineGameSearch_FindSearchConfigurationIndex_Params params;
	params.SearchTag = SearchTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// (Defined, Event, Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetActiveGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch");

	UUIDataStore_OnlineGameSearch_GetActiveGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// (Defined, Event, Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetCurrentGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch");

	UUIDataStore_OnlineGameSearch_GetCurrentGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults
// (Native, Public)

void UUIDataStore_OnlineGameSearch::BuildSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults");

	UUIDataStore_OnlineGameSearch_BuildSearchResults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// (Defined, Event, Public)
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// int                            ListIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::ShowHostGamercard(unsigned char ControllerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard");

	UUIDataStore_OnlineGameSearch_ShowHostGamercard_Params params;
	params.ControllerIndex = ControllerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// (Defined, Event, Public, HasOutParms)
// Parameters:
// int                            ListIndex                      (Parm)
// struct FOnlineGameSearchResult Result                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex");

	UUIDataStore_OnlineGameSearch_GetSearchResultFromIndex_Params params;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataStore_OnlineGameSearch::OnSearchComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete");

	UUIDataStore_OnlineGameSearch_OnSearchComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// (Defined, Protected)
// Parameters:
// unsigned char                  ControllerId                   (Parm)
// class UOnlineGameSearch*       Search                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission");

	UUIDataStore_OnlineGameSearch_OverrideQuerySubmission_Params params;
	params.ControllerId = ControllerId;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// (Defined, Event, Public)
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           bInvalidateExistingSearchResults (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch");

	UUIDataStore_OnlineGameSearch_SubmitGameSearch_Params params;
	params.ControllerIndex = ControllerIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults");

	UUIDataStore_OnlineGameSearch_InvalidateCurrentSearchResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.Init
// (Defined, Event, Public)

void UUIDataStore_OnlineGameSearch::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.Init");

	UUIDataStore_OnlineGameSearch_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// (Defined, Event, Public)

void UUIDataStore_OnlineGameSettings::MoveToPrevious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious");

	UUIDataStore_OnlineGameSettings_MoveToPrevious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// (Defined, Event, Public)

void UUIDataStore_OnlineGameSettings::MoveToNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToNext");

	UUIDataStore_OnlineGameSettings_MoveToNext_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// (Defined, Event, Public)
// Parameters:
// struct FName                   SettingsName                   (Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByName(const struct FName& SettingsName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName");

	UUIDataStore_OnlineGameSettings_SetCurrentByName_Params params;
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// (Defined, Event, Public)
// Parameters:
// int                            NewIndex                       (Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByIndex(int NewIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex");

	UUIDataStore_OnlineGameSettings_SetCurrentByIndex_Params params;
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// (Defined, Event, Public)
// Parameters:
// class UUIDataProvider_Settings* ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::GetCurrentProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider");

	UUIDataStore_OnlineGameSettings_GetCurrentProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// (Defined, Event, Public)
// Parameters:
// class UOnlineGameSettings*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::GetCurrentGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings");

	UUIDataStore_OnlineGameSettings_GetCurrentGameSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// (Defined, Event, Public)
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineGameSettings::CreateGame(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.CreateGame");

	UUIDataStore_OnlineGameSettings_CreateGame_Params params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlinePlayerData::SaveProfileData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData");

	UUIDataStore_OnlinePlayerData_SaveProfileData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataStore_OnlinePlayerData::OnDownloadableContentQueryDone(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone");

	UUIDataStore_OnlinePlayerData_OnDownloadableContentQueryDone_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnProviderChanged
// (Defined, Public)
// Parameters:
// class UUIDataProvider*         SourceProvider                 (Parm)
// struct FName                   PropTag                        (OptionalParm, Parm)

void UUIDataStore_OnlinePlayerData::OnProviderChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnProviderChanged");

	UUIDataStore_OnlinePlayerData_OnProviderChanged_Params params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// (Defined, Event, Public)

void UUIDataStore_OnlinePlayerData::RegisterDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates");

	UUIDataStore_OnlinePlayerData_RegisterDelegates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// (Defined, Public)

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange");

	UUIDataStore_OnlinePlayerData_OnPlayerDataChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// (Defined, Public)

void UUIDataStore_OnlinePlayerData::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange");

	UUIDataStore_OnlinePlayerData_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// (Defined, Event, Public)

void UUIDataStore_OnlinePlayerData::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnUnregister");

	UUIDataStore_OnlinePlayerData_OnUnregister_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// (Defined, Event, Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (Parm)

void UUIDataStore_OnlinePlayerData::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnRegister");

	UUIDataStore_OnlinePlayerData_OnRegister_Params params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// (Native, Public)

void UUIDataStore_OnlineStats::SortResultsByRank()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SortResultsByRank");

	UUIDataStore_OnlineStats_SortResultsByRank_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIDataStore_OnlineStats::OnReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.OnReadComplete");

	UUIDataStore_OnlineStats_OnReadComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// (Defined, Event, Public, HasDefaults)
// Parameters:
// unsigned char                  ConrollerIndex                 (Parm)
// int                            ListIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineStats::ShowGamercard(unsigned char ConrollerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.ShowGamercard");

	UUIDataStore_OnlineStats_ShowGamercard_Params params;
	params.ConrollerIndex = ConrollerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.RefreshStats
// (Defined, Event, Public, HasDefaults)
// Parameters:
// unsigned char                  ControllerIndex                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStore_OnlineStats::RefreshStats(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.RefreshStats");

	UUIDataStore_OnlineStats_RefreshStats_Params params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// (Defined, Public)

void UUIDataStore_OnlineStats::SetStatsReadInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo");

	UUIDataStore_OnlineStats_SetStatsReadInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.Init
// (Defined, Event, Public)

void UUIDataStore_OnlineStats::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.Init");

	UUIDataStore_OnlineStats_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_Registry.GetDataProvider
// (Final, Defined, Public)
// Parameters:
// class UUIDynamicFieldProvider* ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.GetDataProvider");

	UUIDataStore_Registry_GetDataProvider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 FieldName                      (Parm, NeedCtorLink)
// struct FString                 MappedString                   (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_StringAliasMap::GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName");

	UUIDataStore_StringAliasMap_GetStringWithFieldName_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MappedString != nullptr)
		*MappedString = params.MappedString;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// (Final, Native, Public)
// Parameters:
// struct FString                 FieldName                      (OptionalParm, Parm, NeedCtorLink)
// struct FString                 SetName                        (OptionalParm, Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDataStore_StringAliasMap::FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName");

	UUIDataStore_StringAliasMap_FindMappingWithFieldName_Params params;
	params.FieldName = FieldName;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// (Final, Native, Public)
// Parameters:
// class ULocalPlayer*            ReturnValue                    (Parm, OutParm, ReturnParm)

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner");

	UUIDataStore_StringAliasMap_GetPlayerOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// (Native, Public)

void UUIDataStoreSubscriber::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.ClearBoundDataStores");

	UUIDataStoreSubscriber_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIDataStoreSubscriber::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetBoundDataStores");

	UUIDataStoreSubscriber_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// (Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated");

	UUIDataStoreSubscriber_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// (Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStoreSubscriber::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue");

	UUIDataStoreSubscriber_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// (Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIDataStoreSubscriber::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetDataStoreBinding");

	UUIDataStoreSubscriber_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// (Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIDataStoreSubscriber::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.SetDataStoreBinding");

	UUIDataStoreSubscriber_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDataStorePublisher::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStorePublisher.SaveSubscriberValue");

	UUIDataStorePublisher_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToFind                    (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDynamicFieldProvider::FindCollectionValueIndex(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex");

	UUIDynamicFieldProvider_FindCollectionValueIndex_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToFind != nullptr)
		*ValueToFind = params.ValueToFind;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 out_Value                      (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValue(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* out_Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValue");

	UUIDynamicFieldProvider_GetCollectionValue_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Value != nullptr)
		*out_Value = params.out_Value;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// (Final, Native, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ClearCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray");

	UUIDynamicFieldProvider_ClearCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex");

	UUIDynamicFieldProvider_ReplaceCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 CurrentValue                   (Const, Parm, OutParm, NeedCtorLink)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ReplaceCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* CurrentValue, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue");

	UUIDynamicFieldProvider_ReplaceCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// (Final, Native, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// int                            ValueIndex                     (Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex(const struct FName& FieldName, int ValueIndex, bool bPersistent, const struct FName& CellTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex");

	UUIDynamicFieldProvider_RemoveCollectionValueByIndex_Params params;
	params.FieldName = FieldName;
	params.ValueIndex = ValueIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 ValueToRemove                  (Const, Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveCollectionValue(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, struct FString* ValueToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveCollectionValue");

	UUIDynamicFieldProvider_RemoveCollectionValue_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueToRemove != nullptr)
		*ValueToRemove = params.ValueToRemove;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FString                 NewValue                       (Const, Parm, OutParm, NeedCtorLink)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// bool                           bAllowDuplicateValues          (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::InsertCollectionValue(const struct FName& FieldName, int InsertIndex, bool bPersistent, bool bAllowDuplicateValues, const struct FName& CellTag, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.InsertCollectionValue");

	UUIDynamicFieldProvider_InsertCollectionValue_Params params;
	params.FieldName = FieldName;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.bAllowDuplicateValues = bAllowDuplicateValues;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         CollectionValues               (Const, Parm, OutParm, NeedCtorLink)
// bool                           bClearExisting                 (OptionalParm, Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::SetCollectionValueArray(const struct FName& FieldName, bool bClearExisting, int InsertIndex, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* CollectionValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SetCollectionValueArray");

	UUIDynamicFieldProvider_SetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bClearExisting = bClearExisting;
	params.InsertIndex = InsertIndex;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollectionValues != nullptr)
		*CollectionValues = params.CollectionValues;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FString>         out_DataValueArray             (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// struct FName                   CellTag                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValueArray(const struct FName& FieldName, bool bPersistent, const struct FName& CellTag, TArray<struct FString>* out_DataValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValueArray");

	UUIDynamicFieldProvider_GetCollectionValueArray_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;
	params.CellTag = CellTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataValueArray != nullptr)
		*out_DataValueArray = params.out_DataValueArray;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TArray<struct FName>           out_CellTagArray               (Parm, OutParm, NeedCtorLink)
// bool                           bPersistent                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetCollectionValueSchema(const struct FName& FieldName, bool bPersistent, TArray<struct FName>* out_CellTagArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema");

	UUIDynamicFieldProvider_GetCollectionValueSchema_Params params;
	params.FieldName = FieldName;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CellTagArray != nullptr)
		*out_CellTagArray = params.out_CellTagArray;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// (Final, Native, Public)

void UUIDynamicFieldProvider::SavePersistentProviderData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SavePersistentProviderData");

	UUIDynamicFieldProvider_SavePersistentProviderData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDynamicFieldProvider.SetField
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FUIProviderScriptFieldValue FieldValue                     (Const, Parm, OutParm, NeedCtorLink)
// bool                           bChangeExistingOnly            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::SetField(const struct FName& FieldName, bool bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.SetField");

	UUIDynamicFieldProvider_SetField_Params params;
	params.FieldName = FieldName;
	params.bChangeExistingOnly = bChangeExistingOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FieldValue != nullptr)
		*FieldValue = params.FieldValue;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.GetField
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// struct FUIProviderScriptFieldValue out_Field                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::GetField(const struct FName& FieldName, struct FUIProviderScriptFieldValue* out_Field)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.GetField");

	UUIDynamicFieldProvider_GetField_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Field != nullptr)
		*out_Field = params.out_Field;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.ClearFields
// (Final, Native, Public)
// Parameters:
// bool                           bReinitializeRuntimeFields     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::ClearFields(bool bReinitializeRuntimeFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.ClearFields");

	UUIDynamicFieldProvider_ClearFields_Params params;
	params.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// (Final, Native, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           bSearchPersistentFields        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIDynamicFieldProvider::FindFieldIndex(const struct FName& FieldName, bool bSearchPersistentFields)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.FindFieldIndex");

	UUIDynamicFieldProvider_FindFieldIndex_Params params;
	params.FieldName = FieldName;
	params.bSearchPersistentFields = bSearchPersistentFields;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.RemoveField
// (Final, Native, Public)
// Parameters:
// struct FName                   FieldName                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::RemoveField(const struct FName& FieldName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.RemoveField");

	UUIDynamicFieldProvider_RemoveField_Params params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.AddField
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   FieldName                      (Parm)
// TEnumAsByte<EUIDataProviderFieldType> FieldType                      (OptionalParm, Parm)
// bool                           bPersistent                    (OptionalParm, Parm)
// int                            out_InsertPosition             (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIDynamicFieldProvider::AddField(const struct FName& FieldName, TEnumAsByte<EUIDataProviderFieldType> FieldType, bool bPersistent, int* out_InsertPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.AddField");

	UUIDynamicFieldProvider_AddField_Params params;
	params.FieldName = FieldName;
	params.FieldType = FieldType;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InsertPosition != nullptr)
		*out_InsertPosition = params.out_InsertPosition;

	return params.ReturnValue;
}


// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// (Native, Public)

void UUIDynamicFieldProvider::InitializeRuntimeFields()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields");

	UUIDynamicFieldProvider_InitializeRuntimeFields_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIFrameBox.SetBackgroundImage
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EFrameBoxImage>    ImageToSet                     (Parm)
// class USurface*                NewImage                       (Parm)

void UUIFrameBox::SetBackgroundImage(TEnumAsByte<EFrameBoxImage> ImageToSet, class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIFrameBox.SetBackgroundImage");

	UUIFrameBox_SetBackgroundImage_Params params;
	params.ImageToSet = ImageToSet;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIImage.SaveSubscriberValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIImage::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.SaveSubscriberValue");

	UUIImage_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIImage.ClearBoundDataStores
// (Final, Native, Public)

void UUIImage::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.ClearBoundDataStores");

	UUIImage_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIImage.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIImage::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.GetBoundDataStores");

	UUIImage_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIImage.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIImage::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.NotifyDataStoreValueUpdated");

	UUIImage_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIImage.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIImage::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.RefreshSubscriberValue");

	UUIImage_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIImage.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIImage::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.GetDataStoreBinding");

	UUIImage_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIImage.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIImage::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.SetDataStoreBinding");

	UUIImage_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIImage.SetValue
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIImage::SetValue(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIImage.SetValue");

	UUIImage_SetValue_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.OnGetTextValue
// (Defined, Public)
// Parameters:
// class UUIAction_GetTextValue*  Action                         (Parm)

void UUILabel::OnGetTextValue(class UUIAction_GetTextValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.OnGetTextValue");

	UUILabel_OnGetTextValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.OnSetLabelText
// (Defined, Public)
// Parameters:
// class UUIAction_SetLabelText*  Action                         (Parm)

void UUILabel::OnSetLabelText(class UUIAction_SetLabelText* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.OnSetLabelText");

	UUILabel_OnSetLabelText_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.IgnoreMarkup
// (Final, Defined, Public)
// Parameters:
// bool                           bShouldIgnoreMarkup            (Parm)

void UUILabel::IgnoreMarkup(bool bShouldIgnoreMarkup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.IgnoreMarkup");

	UUILabel_IgnoreMarkup_Params params;
	params.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.GetValue
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUILabel::GetValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.GetValue");

	UUILabel_GetValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabel.SetArrayValue
// (Final, Defined, Public)
// Parameters:
// TArray<struct FString>         ValueArray                     (Parm, NeedCtorLink)

void UUILabel::SetArrayValue(TArray<struct FString> ValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.SetArrayValue");

	UUILabel_SetArrayValue_Params params;
	params.ValueArray = ValueArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.ClearBoundDataStores
// (Final, Native, Public)

void UUILabel::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.ClearBoundDataStores");

	UUILabel_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUILabel::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.GetBoundDataStores");

	UUILabel_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UILabel.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUILabel::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.NotifyDataStoreValueUpdated");

	UUILabel_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUILabel::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.RefreshSubscriberValue");

	UUILabel_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabel.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUILabel::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.GetDataStoreBinding");

	UUILabel_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabel.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUILabel::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.SetDataStoreBinding");

	UUILabel_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.SetTextAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIAlignment>      Horizontal                     (Parm)
// TEnumAsByte<EUIAlignment>      Vertical                       (Parm)

void UUILabel::SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.SetTextAlignment");

	UUILabel_SetTextAlignment_Params params;
	params.Horizontal = Horizontal;
	params.Vertical = Vertical;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabel.SetValue
// (Final, Native, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)

void UUILabel::SetValue(const struct FString& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabel.SetValue");

	UUILabel_SetValue_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUILabelButton::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.SaveSubscriberValue");

	UUILabelButton_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UILabelButton.ClearBoundDataStores
// (Native, Public)

void UUILabelButton::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.ClearBoundDataStores");

	UUILabelButton_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.GetBoundDataStores
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUILabelButton::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.GetBoundDataStores");

	UUILabelButton_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UILabelButton.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUILabelButton::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.NotifyDataStoreValueUpdated");

	UUILabelButton_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUILabelButton::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.RefreshSubscriberValue");

	UUILabelButton_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabelButton.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUILabelButton::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.GetDataStoreBinding");

	UUILabelButton_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabelButton.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUILabelButton::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.SetDataStoreBinding");

	UUILabelButton_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.SetTextAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIAlignment>      Horizontal                     (Parm)
// TEnumAsByte<EUIAlignment>      Vertical                       (Parm)

void UUILabelButton::SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.SetTextAlignment");

	UUILabelButton_SetTextAlignment_Params params;
	params.Horizontal = Horizontal;
	params.Vertical = Vertical;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.OnGetTextValue
// (Defined, Public)
// Parameters:
// class UUIAction_GetTextValue*  Action                         (Parm)

void UUILabelButton::OnGetTextValue(class UUIAction_GetTextValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.OnGetTextValue");

	UUILabelButton_OnGetTextValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.OnSetLabelText
// (Defined, Public)
// Parameters:
// class UUIAction_SetLabelText*  Action                         (Parm)

void UUILabelButton::OnSetLabelText(class UUIAction_SetLabelText* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.OnSetLabelText");

	UUILabelButton_OnSetLabelText_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UILabelButton.GetCaption
// (Final, Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUILabelButton::GetCaption()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.GetCaption");

	UUILabelButton_GetCaption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UILabelButton.SetCaption
// (Native, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)

void UUILabelButton::SetCaption(const struct FString& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UILabelButton.SetCaption");

	UUILabelButton_SetCaption_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UINumericEditBox.GetNumericValue
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUINumericEditBox::GetNumericValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.GetNumericValue");

	UUINumericEditBox_GetNumericValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UINumericEditBox.SetNumericValue
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm)
// bool                           bForceRefreshString            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUINumericEditBox::SetNumericValue(float NewValue, bool bForceRefreshString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.SetNumericValue");

	UUINumericEditBox_SetNumericValue_Params params;
	params.NewValue = NewValue;
	params.bForceRefreshString = bForceRefreshString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UINumericEditBox.PostInitialize
// (Defined, Event, Public)

void UUINumericEditBox::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.PostInitialize");

	UUINumericEditBox_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UINumericEditBox.Initialized
// (Defined, Event, Public)

void UUINumericEditBox::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.Initialized");

	UUINumericEditBox_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UINumericEditBox.DecrementValue
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUINumericEditBox::DecrementValue(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.DecrementValue");

	UUINumericEditBox_DecrementValue_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UINumericEditBox.IncrementValue
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUINumericEditBox::IncrementValue(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericEditBox.IncrementValue");

	UUINumericEditBox_IncrementValue_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.OnButtonClicked
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionListBase::OnButtonClicked(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.OnButtonClicked");

	UUIOptionListBase_OnButtonClicked_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.InitializeInternalControls
// (Defined, Public)

void UUIOptionListBase::InitializeInternalControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.InitializeInternalControls");

	UUIOptionListBase_InitializeInternalControls_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.Initialized
// (Defined, Event, Public)

void UUIOptionListBase::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.Initialized");

	UUIOptionListBase_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.Created
// (Defined, Public)
// Parameters:
// class UUIObject*               CreatedWidget                  (Parm)
// class UUIScreenObject*         CreatorContainer               (Parm)

void UUIOptionListBase::Created(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.Created");

	UUIOptionListBase_Created_Params params;
	params.CreatedWidget = CreatedWidget;
	params.CreatorContainer = CreatorContainer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.OnMoveSelectionRight
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)

void UUIOptionListBase::OnMoveSelectionRight(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.OnMoveSelectionRight");

	UUIOptionListBase_OnMoveSelectionRight_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.OnMoveSelectionLeft
// (Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)

void UUIOptionListBase::OnMoveSelectionLeft(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.OnMoveSelectionLeft");

	UUIOptionListBase_OnMoveSelectionLeft_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.HasNextValue
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionListBase::HasNextValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.HasNextValue");

	UUIOptionListBase_HasNextValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.HasPrevValue
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionListBase::HasPrevValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.HasPrevValue");

	UUIOptionListBase_HasPrevValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.SaveSubscriberValue
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionListBase::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.SaveSubscriberValue");

	UUIOptionListBase_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.ClearBoundDataStores
// (Final, Native, Public)

void UUIOptionListBase::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.ClearBoundDataStores");

	UUIOptionListBase_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIOptionListBase::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.GetBoundDataStores");

	UUIOptionListBase_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIOptionListBase.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIOptionListBase::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.NotifyDataStoreValueUpdated");

	UUIOptionListBase_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionListBase::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.RefreshSubscriberValue");

	UUIOptionListBase_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIOptionListBase::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.GetDataStoreBinding");

	UUIOptionListBase_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIOptionListBase::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.SetDataStoreBinding");

	UUIOptionListBase_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionListBase.CreateCustomIncrementButton
// (Public, Delegate)
// Parameters:
// class UUIOptionListBase*       ButtonOwner                    (Parm)
// class UUIOptionListButton*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIOptionListButton* UUIOptionListBase::CreateCustomIncrementButton(class UUIOptionListBase* ButtonOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.CreateCustomIncrementButton");

	UUIOptionListBase_CreateCustomIncrementButton_Params params;
	params.ButtonOwner = ButtonOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionListBase.CreateCustomDecrementButton
// (Public, Delegate)
// Parameters:
// class UUIOptionListBase*       ButtonOwner                    (Parm)
// class UUIOptionListButton*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIOptionListButton* UUIOptionListBase::CreateCustomDecrementButton(class UUIOptionListBase* ButtonOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListBase.CreateCustomDecrementButton");

	UUIOptionListBase_CreateCustomDecrementButton_Params params;
	params.ButtonOwner = ButtonOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UINumericOptionList.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bPercentageValue               (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUINumericOptionList::GetValue(bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericOptionList.GetValue");

	UUINumericOptionList_GetValue_Params params;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UINumericOptionList.SetValue
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm, CoerceParm)
// bool                           bPercentageValue               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUINumericOptionList::SetValue(float NewValue, bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UINumericOptionList.SetValue");

	UUINumericOptionList_SetValue_Params params;
	params.NewValue = NewValue;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionList.OnSetListIndex
// (Final, Defined, Protected)
// Parameters:
// class UUIAction_SetListIndex*  Action                         (Parm)

void UUIOptionList::OnSetListIndex(class UUIAction_SetListIndex* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.OnSetListIndex");

	UUIOptionList_OnSetListIndex_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionList.SetCurrentIndex
// (Native, Public)
// Parameters:
// int                            NewIndex                       (Parm)

void UUIOptionList::SetCurrentIndex(int NewIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.SetCurrentIndex");

	UUIOptionList_SetCurrentIndex_Params params;
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionList.GetCurrentIndex
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUIOptionList::GetCurrentIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.GetCurrentIndex");

	UUIOptionList_GetCurrentIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIOptionList.SetNextValue
// (Native, Public)

void UUIOptionList::SetNextValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.SetNextValue");

	UUIOptionList_SetNextValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionList.SetPrevValue
// (Native, Public)

void UUIOptionList::SetPrevValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.SetPrevValue");

	UUIOptionList_SetPrevValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIOptionList.GetListValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            ListIndex                      (Parm)
// struct FString                 OutValue                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIOptionList::GetListValue(int ListIndex, struct FString* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionList.GetListValue");

	UUIOptionList_GetListValue_Params params;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.UIOptionListButton.UpdateButtonState
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIOptionListButton::UpdateButtonState(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIOptionListButton.UpdateButtonState");

	UUIOptionListButton_UpdateButtonState_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIPanel.SetBackgroundImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIPanel::SetBackgroundImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPanel.SetBackgroundImage");

	UUIPanel_SetBackgroundImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIPrefabInstance.DetachFromSourcePrefab
// (Final, Native, Public)

void UUIPrefabInstance::DetachFromSourcePrefab()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPrefabInstance.DetachFromSourcePrefab");

	UUIPrefabInstance_DetachFromSourcePrefab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.AnimEnd
// (Public)
// Parameters:
// class UUIObject*               AnimTarget                     (Parm)
// int                            AnimIndex                      (Parm)
// class UUIAnimationSeq*         AnimSeq                        (Parm)

void UUIScene::AnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.AnimEnd");

	UUIScene_AnimEnd_Params params;
	params.AnimTarget = AnimTarget;
	params.AnimIndex = AnimIndex;
	params.AnimSeq = AnimSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.LogCurrentState
// (Public)
// Parameters:
// int                            Indent                         (Parm)

void UUIScene::LogCurrentState(int Indent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.LogCurrentState");

	UUIScene_LogCurrentState_Params params;
	params.Indent = Indent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.LogRenderBounds
// (Defined, Public)
// Parameters:
// int                            Indent                         (Parm)

void UUIScene::LogRenderBounds(int Indent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.LogRenderBounds");

	UUIScene_LogRenderBounds_Params params;
	params.Indent = Indent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.LogDockingStack
// (Event, Public)

void UUIScene::LogDockingStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.LogDockingStack");

	UUIScene_LogDockingStack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.CloseScene
// (Defined, Public)
// Parameters:
// class UUIScene*                SceneToClose                   (Parm)
// bool                           bSkipKismetNotify              (OptionalParm, Parm)
// TEnumAsByte<ESceneTransitionAnim> SceneAnim                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::CloseScene(class UUIScene* SceneToClose, bool bSkipKismetNotify, TEnumAsByte<ESceneTransitionAnim> SceneAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.CloseScene");

	UUIScene_CloseScene_Params params;
	params.SceneToClose = SceneToClose;
	params.bSkipKismetNotify = bSkipKismetNotify;
	params.SceneAnim = SceneAnim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.OpenScene
// (Defined, Public)
// Parameters:
// class UUIScene*                SceneToOpen                    (Parm)
// TEnumAsByte<ESceneTransitionAnim> SceneAnim                      (OptionalParm, Parm)
// struct FScriptDelegate         SceneDelegate                  (OptionalParm, Parm, NeedCtorLink)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIScene::OpenScene(class UUIScene* SceneToOpen, TEnumAsByte<ESceneTransitionAnim> SceneAnim, const struct FScriptDelegate& SceneDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.OpenScene");

	UUIScene_OpenScene_Params params;
	params.SceneToOpen = SceneToOpen;
	params.SceneAnim = SceneAnim;
	params.SceneDelegate = SceneDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.NotifyLinkStatusChanged
// (Defined, Public)
// Parameters:
// bool                           bConnected                     (Parm)

void UUIScene::NotifyLinkStatusChanged(bool bConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.NotifyLinkStatusChanged");

	UUIScene_NotifyLinkStatusChanged_Params params;
	params.bConnected = bConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.NotifyOnlineServiceStatusChanged
// (Defined, Public)
// Parameters:
// TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus            (Parm)

void UUIScene::NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.NotifyOnlineServiceStatusChanged");

	UUIScene_NotifyOnlineServiceStatusChanged_Params params;
	params.NewConnectionStatus = NewConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.NotifyGameSessionEnded
// (Defined, Public)

void UUIScene::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.NotifyGameSessionEnded");

	UUIScene_NotifyGameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SceneCreated
// (Public)
// Parameters:
// class UUIScene*                CreatedScene                   (Parm)

void UUIScene::SceneCreated(class UUIScene* CreatedScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SceneCreated");

	UUIScene_SceneCreated_Params params;
	params.CreatedScene = CreatedScene;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SetVisibility
// (Defined, Event, Public)
// Parameters:
// bool                           bIsVisible                     (Parm)

void UUIScene::SetVisibility(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SetVisibility");

	UUIScene_SetVisibility_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SetInputMask
// (Defined, Event, Public)
// Parameters:
// unsigned char                  NewInputMask                   (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)

void UUIScene::SetInputMask(unsigned char NewInputMask, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SetInputMask");

	UUIScene_SetInputMask_Params params;
	params.NewInputMask = NewInputMask;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.CalculateInputMask
// (Final, Defined, Event, Public)

void UUIScene::CalculateInputMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.CalculateInputMask");

	UUIScene_CalculateInputMask_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SceneSavedForRestore
// (Public)

void UUIScene::SceneSavedForRestore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SceneSavedForRestore");

	UUIScene_SceneSavedForRestore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SceneRestored
// (Public)

void UUIScene::SceneRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SceneRestored");

	UUIScene_SceneRestored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.PlayInputKeyNotification
// (Event, Public, HasOutParms)
// Parameters:
// struct FInputEventParameters   EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::PlayInputKeyNotification(struct FInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.PlayInputKeyNotification");

	UUIScene_PlayInputKeyNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UIScene.SceneDeactivated
// (Defined, Event, Public)

void UUIScene::SceneDeactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SceneDeactivated");

	UUIScene_SceneDeactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SceneActivated
// (Defined, Event, Public)
// Parameters:
// bool                           bInitialActivation             (Parm)

void UUIScene::SceneActivated(bool bInitialActivation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SceneActivated");

	UUIScene_SceneActivated_Params params;
	params.bInitialActivation = bInitialActivation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SetActiveContextMenu
// (Final, Native, Public)
// Parameters:
// class UUIContextMenu*          NewContextMenu                 (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::SetActiveContextMenu(class UUIContextMenu* NewContextMenu, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SetActiveContextMenu");

	UUIScene_SetActiveContextMenu_Params params;
	params.NewContextMenu = NewContextMenu;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.GetActiveContextMenu
// (Final, Native, Public)
// Parameters:
// class UUIContextMenu*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIContextMenu* UUIScene::GetActiveContextMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetActiveContextMenu");

	UUIScene_GetActiveContextMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.SetActiveToolTip
// (Final, Native, Public)
// Parameters:
// class UUIToolTip*              NewToolTip                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::SetActiveToolTip(class UUIToolTip* NewToolTip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SetActiveToolTip");

	UUIScene_SetActiveToolTip_Params params;
	params.NewToolTip = NewToolTip;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.GetActiveToolTip
// (Final, Native, Public)
// Parameters:
// class UUIToolTip*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIToolTip* UUIScene::GetActiveToolTip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetActiveToolTip");

	UUIScene_GetActiveToolTip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.GetDefaultContextMenu
// (Final, Native, Public)
// Parameters:
// class UUIContextMenu*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIContextMenu* UUIScene::GetDefaultContextMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetDefaultContextMenu");

	UUIScene_GetDefaultContextMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.GetDefaultToolTip
// (Final, Native, Public)
// Parameters:
// class UUIToolTip*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIToolTip* UUIScene::GetDefaultToolTip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetDefaultToolTip");

	UUIScene_GetDefaultToolTip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.IsSceneActive
// (Final, Native, Public)
// Parameters:
// bool                           bTopmostScene                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::IsSceneActive(bool bTopmostScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.IsSceneActive");

	UUIScene_IsSceneActive_Params params;
	params.bTopmostScene = bTopmostScene;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.GetWorldInfo
// (Native, Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AWorldInfo* UUIScene::GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetWorldInfo");

	UUIScene_GetWorldInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.SetSceneInputMode
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EScreenInputMode>  NewInputMode                   (Parm)

void UUIScene::SetSceneInputMode(TEnumAsByte<EScreenInputMode> NewInputMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SetSceneInputMode");

	UUIScene_SetSceneInputMode_Params params;
	params.NewInputMode = NewInputMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.GetPreviousScene
// (Final, Native, Public)
// Parameters:
// bool                           bRequireMatchingPlayerOwner    (OptionalParm, Parm)
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIScene::GetPreviousScene(bool bRequireMatchingPlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetPreviousScene");

	UUIScene_GetPreviousScene_Params params;
	params.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.ResolveDataStore
// (Final, Native, Public)
// Parameters:
// struct FName                   DataStoreTag                   (Parm)
// class ULocalPlayer*            InPlayerOwner                  (OptionalParm, Parm)
// class UUIDataStore*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIDataStore* UUIScene::ResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.ResolveDataStore");

	UUIScene_ResolveDataStore_Params params;
	params.DataStoreTag = DataStoreTag;
	params.InPlayerOwner = InPlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.UnbindSubscribers
// (Final, Native, Public)

void UUIScene::UnbindSubscribers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.UnbindSubscribers");

	UUIScene_UnbindSubscribers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.SaveSceneDataValues
// (Final, Native, Public)
// Parameters:
// bool                           bUnbindSubscribers             (OptionalParm, Parm)

void UUIScene::SaveSceneDataValues(bool bUnbindSubscribers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.SaveSceneDataValues");

	UUIScene_SaveSceneDataValues_Params params;
	params.bUnbindSubscribers = bUnbindSubscribers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.LoadSceneDataValues
// (Final, Native, Public)

void UUIScene::LoadSceneDataValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.LoadSceneDataValues");

	UUIScene_LoadSceneDataValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.GetSceneDataStore
// (Final, Native, Public)
// Parameters:
// class USceneDataStore*         ReturnValue                    (Parm, OutParm, ReturnParm)

class USceneDataStore* UUIScene::GetSceneDataStore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetSceneDataStore");

	UUIScene_GetSceneDataStore_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScene.ResolveScenePositions
// (Final, Native, Public)

void UUIScene::ResolveScenePositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.ResolveScenePositions");

	UUIScene_ResolveScenePositions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.RebuildDockingStack
// (Final, Native, Public)

void UUIScene::RebuildDockingStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.RebuildDockingStack");

	UUIScene_RebuildDockingStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.ForceImmediateSceneUpdate
// (Final, Native, Public)

void UUIScene::ForceImmediateSceneUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.ForceImmediateSceneUpdate");

	UUIScene_ForceImmediateSceneUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.ShouldModulateBackgroundAlpha
// (Public, Delegate, HasOutParms)
// Parameters:
// float                          AlphaModulationPercent         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScene::ShouldModulateBackgroundAlpha(float* AlphaModulationPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.ShouldModulateBackgroundAlpha");

	UUIScene_ShouldModulateBackgroundAlpha_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AlphaModulationPercent != nullptr)
		*AlphaModulationPercent = params.AlphaModulationPercent;

	return params.ReturnValue;
}


// Function Engine.UIScene.OnTopSceneChanged
// (Public, Delegate)
// Parameters:
// class UUIScene*                NewTopScene                    (Parm)

void UUIScene::OnTopSceneChanged(class UUIScene* NewTopScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.OnTopSceneChanged");

	UUIScene_OnTopSceneChanged_Params params;
	params.NewTopScene = NewTopScene;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.OnSceneDeactivated
// (Public, Delegate)
// Parameters:
// class UUIScene*                DeactivatedScene               (Parm)

void UUIScene::OnSceneDeactivated(class UUIScene* DeactivatedScene)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.OnSceneDeactivated");

	UUIScene_OnSceneDeactivated_Params params;
	params.DeactivatedScene = DeactivatedScene;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.OnSceneActivated
// (Public, Delegate)
// Parameters:
// class UUIScene*                ActivatedScene                 (Parm)
// bool                           bInitialActivation             (Parm)

void UUIScene::OnSceneActivated(class UUIScene* ActivatedScene, bool bInitialActivation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.OnSceneActivated");

	UUIScene_OnSceneActivated_Params params;
	params.ActivatedScene = ActivatedScene;
	params.bInitialActivation = bInitialActivation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScene.GetSceneInputMode
// (Defined, Public, Delegate)
// Parameters:
// TEnumAsByte<EScreenInputMode>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EScreenInputMode> UUIScene::GetSceneInputMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScene.GetSceneInputMode");

	UUIScene_GetSceneInputMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.SetOverlayImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIProgressBar::SetOverlayImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SetOverlayImage");

	UUIProgressBar_SetOverlayImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.SetFillImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIProgressBar::SetFillImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SetFillImage");

	UUIProgressBar_SetFillImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.SetBackgroundImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUIProgressBar::SetBackgroundImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SetBackgroundImage");

	UUIProgressBar_SetBackgroundImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bPercentageValue               (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIProgressBar::GetValue(bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.GetValue");

	UUIProgressBar_GetValue_Params params;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.SetValue
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm, CoerceParm)
// bool                           bPercentageValue               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIProgressBar::SetValue(float NewValue, bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SetValue");

	UUIProgressBar_SetValue_Params params;
	params.NewValue = NewValue;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.SaveSubscriberValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIProgressBar::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SaveSubscriberValue");

	UUIProgressBar_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.ClearBoundDataStores
// (Final, Native, Public)

void UUIProgressBar::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.ClearBoundDataStores");

	UUIProgressBar_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUIProgressBar::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.GetBoundDataStores");

	UUIProgressBar_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIProgressBar.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUIProgressBar::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.NotifyDataStoreValueUpdated");

	UUIProgressBar_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIProgressBar::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.RefreshSubscriberValue");

	UUIProgressBar_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIProgressBar::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.GetDataStoreBinding");

	UUIProgressBar_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIProgressBar.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUIProgressBar::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.SetDataStoreBinding");

	UUIProgressBar_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.OnGetProgressBarValue
// (Final, Defined, Protected)
// Parameters:
// class UUIAction_GetProgressBarValue* Action                         (Parm)

void UUIProgressBar::OnGetProgressBarValue(class UUIAction_GetProgressBarValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.OnGetProgressBarValue");

	UUIProgressBar_OnGetProgressBarValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIProgressBar.OnSetProgressBarValue
// (Final, Defined, Protected)
// Parameters:
// class UUIAction_SetProgressBarValue* Action                         (Parm)

void UUIProgressBar::OnSetProgressBarValue(class UUIAction_SetProgressBarValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIProgressBar.OnSetProgressBarValue");

	UUIProgressBar_OnSetProgressBarValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIResourceDataProvider.IsProviderDisabled
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIResourceDataProvider::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceDataProvider.IsProviderDisabled");

	UUIResourceDataProvider_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetMarkerSizePercent
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetMarkerSizePercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetMarkerSizePercent");

	UUIScrollbar_GetMarkerSizePercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetMarkerPosPercent
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetMarkerPosPercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetMarkerPosPercent");

	UUIScrollbar_GetMarkerPosPercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetNudgePercent
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetNudgePercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetNudgePercent");

	UUIScrollbar_GetNudgePercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetNudgeValue
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetNudgeValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetNudgeValue");

	UUIScrollbar_GetNudgeValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.PostInitialize
// (Defined, Event, Public)

void UUIScrollbar::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.PostInitialize");

	UUIScrollbar_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.Initialized
// (Defined, Event, Public)

void UUIScrollbar::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.Initialized");

	UUIScrollbar_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.DragScroll
// (Final, Native, Public)
// Parameters:
// class UUIScrollbarMarkerButton* Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::DragScroll(class UUIScrollbarMarkerButton* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.DragScroll");

	UUIScrollbar_DragScroll_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.DragScrollEnd
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::DragScrollEnd(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.DragScrollEnd");

	UUIScrollbar_DragScrollEnd_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.DragScrollBegin
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::DragScrollBegin(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.DragScrollBegin");

	UUIScrollbar_DragScrollBegin_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.ScrollDecrement
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::ScrollDecrement(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.ScrollDecrement");

	UUIScrollbar_ScrollDecrement_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.ScrollIncrement
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::ScrollIncrement(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.ScrollIncrement");

	UUIScrollbar_ScrollIncrement_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.EnableCornerPadding
// (Final, Native, Public)
// Parameters:
// bool                           FlagValue                      (Parm)

void UUIScrollbar::EnableCornerPadding(bool FlagValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.EnableCornerPadding");

	UUIScrollbar_EnableCornerPadding_Params params;
	params.FlagValue = FlagValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.SetNudgeSizePixels
// (Final, Native, Public)
// Parameters:
// float                          NudgePixels                    (Parm)

void UUIScrollbar::SetNudgeSizePixels(float NudgePixels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.SetNudgeSizePixels");

	UUIScrollbar_SetNudgeSizePixels_Params params;
	params.NudgePixels = NudgePixels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.SetNudgeSizePercent
// (Final, Native, Public)
// Parameters:
// float                          NudgePercentage                (Parm)

void UUIScrollbar::SetNudgeSizePercent(float NudgePercentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.SetNudgeSizePercent");

	UUIScrollbar_SetNudgeSizePercent_Params params;
	params.NudgePercentage = NudgePercentage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.SetMarkerPosition
// (Final, Native, Public)
// Parameters:
// float                          PositionPercentage             (Parm)

void UUIScrollbar::SetMarkerPosition(float PositionPercentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.SetMarkerPosition");

	UUIScrollbar_SetMarkerPosition_Params params;
	params.PositionPercentage = PositionPercentage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.SetMarkerSize
// (Final, Native, Public)
// Parameters:
// float                          SizePercentage                 (Parm)

void UUIScrollbar::SetMarkerSize(float SizePercentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.SetMarkerSize");

	UUIScrollbar_SetMarkerSize_Params params;
	params.SizePercentage = SizePercentage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.GetScrollZoneWidth
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetScrollZoneWidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetScrollZoneWidth");

	UUIScrollbar_GetScrollZoneWidth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetScrollZoneExtent
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          ScrollZoneStart                (OptionalParm, Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetScrollZoneExtent(float* ScrollZoneStart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetScrollZoneExtent");

	UUIScrollbar_GetScrollZoneExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScrollZoneStart != nullptr)
		*ScrollZoneStart = params.ScrollZoneStart;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.GetMarkerButtonPosition
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollbar::GetMarkerButtonPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.GetMarkerButtonPosition");

	UUIScrollbar_GetMarkerButtonPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbar.OnClickedScrollZone
// (Public, Delegate)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionPerc                   (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbar::OnClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.OnClickedScrollZone");

	UUIScrollbar_OnClickedScrollZone_Params params;
	params.Sender = Sender;
	params.PositionPerc = PositionPerc;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollbar.OnScrollActivity
// (Public, Delegate)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionChange                 (Parm)
// bool                           bPositionMaxed                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScrollbar::OnScrollActivity(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbar.OnScrollActivity");

	UUIScrollbar_OnScrollActivity_Params params;
	params.Sender = Sender;
	params.PositionChange = PositionChange;
	params.bPositionMaxed = bPositionMaxed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollbarMarkerButton.OnButtonDragged
// (Public, Delegate)
// Parameters:
// class UUIScrollbarMarkerButton* Sender                         (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollbarMarkerButton::OnButtonDragged(class UUIScrollbarMarkerButton* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollbarMarkerButton.OnButtonDragged");

	UUIScrollbarMarkerButton_OnButtonDragged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.OnApplyScrolling
// (Defined, Public)
// Parameters:
// class UUIAction_ApplyScrolling* Action                         (Parm)

void UUIScrollFrame::OnApplyScrolling(class UUIAction_ApplyScrolling* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.OnApplyScrolling");

	UUIScrollFrame_OnApplyScrolling_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.ScrollZoneClicked
// (Final, Defined, Event, Private)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionPerc                   (Parm)
// int                            PlayerIndex                    (Parm)

void UUIScrollFrame::ScrollZoneClicked(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.ScrollZoneClicked");

	UUIScrollFrame_ScrollZoneClicked_Params params;
	params.Sender = Sender;
	params.PositionPerc = PositionPerc;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.OnChildRepositioned
// (Final, Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)

void UUIScrollFrame::OnChildRepositioned(class UUIScreenObject* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.OnChildRepositioned");

	UUIScrollFrame_OnChildRepositioned_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.RemovedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               OldChild                       (Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)

void UUIScrollFrame::RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.RemovedChild");

	UUIScrollFrame_RemovedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.OldChild = OldChild;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.AddedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               NewChild                       (Parm)

void UUIScrollFrame::AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.AddedChild");

	UUIScrollFrame_AddedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.GetVisibleRegionPercentage
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollFrame::GetVisibleRegionPercentage(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetVisibleRegionPercentage");

	UUIScrollFrame_GetVisibleRegionPercentage_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.GetClipRegion
// (Native, Public, HasOutParms)
// Parameters:
// float                          MinX                           (Parm, OutParm)
// float                          MinY                           (Parm, OutParm)
// float                          MaxX                           (Parm, OutParm)
// float                          MaxY                           (Parm, OutParm)

void UUIScrollFrame::GetClipRegion(float* MinX, float* MinY, float* MaxX, float* MaxY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetClipRegion");

	UUIScrollFrame_GetClipRegion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinX != nullptr)
		*MinX = params.MinX;
	if (MinY != nullptr)
		*MinY = params.MinY;
	if (MaxX != nullptr)
		*MaxX = params.MaxX;
	if (MaxY != nullptr)
		*MaxY = params.MaxY;
}


// Function Engine.UIScrollFrame.GetClientRegionSizeVector
// (Final, Native, Public)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector2D UUIScrollFrame::GetClientRegionSizeVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetClientRegionSizeVector");

	UUIScrollFrame_GetClientRegionSizeVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.GetClientRegionPositionVector
// (Final, Native, Public)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector2D UUIScrollFrame::GetClientRegionPositionVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetClientRegionPositionVector");

	UUIScrollFrame_GetClientRegionPositionVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.GetClientRegionSize
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollFrame::GetClientRegionSize(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetClientRegionSize");

	UUIScrollFrame_GetClientRegionSize_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.GetClientRegionPosition
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUIScrollFrame::GetClientRegionPosition(TEnumAsByte<EUIOrientation> Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.GetClientRegionPosition");

	UUIScrollFrame_GetClientRegionPosition_Params params;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.SetClientRegionPositionVector
// (Final, Native, Public)
// Parameters:
// struct FVector2D               NewPosition                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScrollFrame::SetClientRegionPositionVector(const struct FVector2D& NewPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.SetClientRegionPositionVector");

	UUIScrollFrame_SetClientRegionPositionVector_Params params;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.SetClientRegionPosition
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIOrientation>    Orientation                    (Parm)
// float                          NewPosition                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScrollFrame::SetClientRegionPosition(TEnumAsByte<EUIOrientation> Orientation, float NewPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.SetClientRegionPosition");

	UUIScrollFrame_SetClientRegionPosition_Params params;
	params.Orientation = Orientation;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.ScrollRegion
// (Final, Native, Public)
// Parameters:
// class UUIScrollbar*            Sender                         (Parm)
// float                          PositionChange                 (Parm)
// bool                           bPositionMaxed                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIScrollFrame::ScrollRegion(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.ScrollRegion");

	UUIScrollFrame_ScrollRegion_Params params;
	params.Sender = Sender;
	params.PositionChange = PositionChange;
	params.bPositionMaxed = bPositionMaxed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScrollFrame.ReapplyFormatting
// (Final, Native, Public)
// Parameters:
// bool                           bImmediately                   (OptionalParm, Parm)

void UUIScrollFrame::ReapplyFormatting(bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.ReapplyFormatting");

	UUIScrollFrame_ReapplyFormatting_Params params;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScrollFrame.RefreshScrollbars
// (Final, Native, Public)
// Parameters:
// bool                           bImmediately                   (OptionalParm, Parm)

void UUIScrollFrame::RefreshScrollbars(bool bImmediately)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScrollFrame.RefreshScrollbars");

	UUIScrollFrame_RefreshScrollbars_Params params;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.OnStateChanged
// (Final, Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                NewlyActiveState               (Parm)
// class UUIState*                PreviouslyActiveState          (OptionalParm, Parm)

void UUISlider::OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.OnStateChanged");

	UUISlider_OnStateChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;
	params.NewlyActiveState = NewlyActiveState;
	params.PreviouslyActiveState = PreviouslyActiveState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.SetMarkerImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUISlider::SetMarkerImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SetMarkerImage");

	UUISlider_SetMarkerImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.SetBarImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUISlider::SetBarImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SetBarImage");

	UUISlider_SetBarImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.SetBackgroundImage
// (Final, Defined, Public)
// Parameters:
// class USurface*                NewImage                       (Parm)

void UUISlider::SetBackgroundImage(class USurface* NewImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SetBackgroundImage");

	UUISlider_SetBackgroundImage_Params params;
	params.NewImage = NewImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.GetValue
// (Final, Native, Public)
// Parameters:
// bool                           bPercentageValue               (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UUISlider::GetValue(bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.GetValue");

	UUISlider_GetValue_Params params;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISlider.SetValue
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm, CoerceParm)
// bool                           bPercentageValue               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISlider::SetValue(float NewValue, bool bPercentageValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SetValue");

	UUISlider_SetValue_Params params;
	params.NewValue = NewValue;
	params.bPercentageValue = bPercentageValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISlider.SaveSubscriberValue
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISlider::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SaveSubscriberValue");

	UUISlider_SaveSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UISlider.ClearBoundDataStores
// (Final, Native, Public)

void UUISlider::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.ClearBoundDataStores");

	UUISlider_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUISlider::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.GetBoundDataStores");

	UUISlider_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UISlider.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUISlider::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.NotifyDataStoreValueUpdated");

	UUISlider_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISlider.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISlider::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.RefreshSubscriberValue");

	UUISlider_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISlider.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUISlider::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.GetDataStoreBinding");

	UUISlider_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISlider.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUISlider::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISlider.SetDataStoreBinding");

	UUISlider_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIState_Focused.ActivateState
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         Target                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState_Focused::ActivateState(class UUIScreenObject* Target, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState_Focused.ActivateState");

	UUIState_Focused_ActivateState_Params params;
	params.Target = Target;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIState_TargetedTab.IsWidgetClassSupported
// (Defined, Event, Public)
// Parameters:
// class UClass*                  WidgetClass                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIState_TargetedTab::IsWidgetClassSupported(class UClass* WidgetClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIState_TargetedTab.IsWidgetClassSupported");

	UUIState_TargetedTab_IsWidgetClassSupported_Params params;
	params.WidgetClass = WidgetClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStringRenderer.SetTextAlignment
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EUIAlignment>      Horizontal                     (Parm)
// TEnumAsByte<EUIAlignment>      Vertical                       (Parm)

void UUIStringRenderer::SetTextAlignment(TEnumAsByte<EUIAlignment> Horizontal, TEnumAsByte<EUIAlignment> Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStringRenderer.SetTextAlignment");

	UUIStringRenderer_SetTextAlignment_Params params;
	params.Horizontal = Horizontal;
	params.Vertical = Vertical;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIStyleResolver.NotifyResolveStyle
// (Native, Public)
// Parameters:
// class UUISkin*                 ActiveSkin                     (Parm)
// bool                           bClearExistingValue            (Parm)
// class UUIState*                CurrentMenuState               (OptionalParm, Parm)
// struct FName                   StylePropertyName              (Const, OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIStyleResolver::NotifyResolveStyle(class UUISkin* ActiveSkin, bool bClearExistingValue, class UUIState* CurrentMenuState, const struct FName& StylePropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyleResolver.NotifyResolveStyle");

	UUIStyleResolver_NotifyResolveStyle_Params params;
	params.ActiveSkin = ActiveSkin;
	params.bClearExistingValue = bClearExistingValue;
	params.CurrentMenuState = CurrentMenuState;
	params.StylePropertyName = StylePropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStyleResolver.SetStyleResolverTag
// (Native, Public)
// Parameters:
// struct FName                   NewResolverTag                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIStyleResolver::SetStyleResolverTag(const struct FName& NewResolverTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyleResolver.SetStyleResolverTag");

	UUIStyleResolver_SetStyleResolverTag_Params params;
	params.NewResolverTag = NewResolverTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStyleResolver.GetStyleResolverTag
// (Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UUIStyleResolver::GetStyleResolverTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStyleResolver.GetStyleResolverTag");

	UUIStyleResolver_GetStyleResolverTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabButton.OnStateChanged
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                NewlyActiveState               (Parm)
// class UUIState*                PreviouslyActiveState          (OptionalParm, Parm)

void UUITabButton::OnStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.OnStateChanged");

	UUITabButton_OnStateChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;
	params.NewlyActiveState = NewlyActiveState;
	params.PreviouslyActiveState = PreviouslyActiveState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabButton.GetTabPage
// (Defined, Public)
// Parameters:
// class UUITabPage*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabPage* UUITabButton::GetTabPage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.GetTabPage");

	UUITabButton_GetTabPage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabButton.IsTargeted
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            PlayerIndex                    (OptionalParm, Parm)
// int                            StateIndex                     (OptionalParm, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabButton::IsTargeted(int PlayerIndex, int* StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.IsTargeted");

	UUITabButton_IsTargeted_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StateIndex != nullptr)
		*StateIndex = params.StateIndex;

	return params.ReturnValue;
}


// Function Engine.UITabButton.CanActivateButton
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabButton::CanActivateButton(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.CanActivateButton");

	UUITabButton_CanActivateButton_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabButton.RemovedFromParent
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)

void UUITabButton::RemovedFromParent(class UUIScreenObject* WidgetOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.RemovedFromParent");

	UUITabButton_RemovedFromParent_Params params;
	params.WidgetOwner = WidgetOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabButton.RemovedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               OldChild                       (Parm)
// TArray<class UUIObject*>       ExclusionSet                   (OptionalParm, Parm, NeedCtorLink)

void UUITabButton::RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.RemovedChild");

	UUITabButton_RemovedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.OldChild = OldChild;
	params.ExclusionSet = ExclusionSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabButton.AddedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               NewChild                       (Parm)

void UUITabButton::AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.AddedChild");

	UUITabButton_AddedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabButton.IsActivationAllowed
// (Public, Delegate)
// Parameters:
// class UUITabButton*            Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabButton::IsActivationAllowed(class UUITabButton* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabButton.IsActivationAllowed");

	UUITabButton_IsActivationAllowed_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.TabButtonClicked
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         EventObject                    (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::TabButtonClicked(class UUIScreenObject* EventObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.TabButtonClicked");

	UUITabControl_TabButtonClicked_Params params;
	params.EventObject = EventObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ProcessInputKey
// (Defined, Public, HasOutParms)
// Parameters:
// struct FInputEventParameters   EventParms                     (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ProcessInputKey(struct FInputEventParameters* EventParms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ProcessInputKey");

	UUITabControl_ProcessInputKey_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventParms != nullptr)
		*EventParms = params.EventParms;

	return params.ReturnValue;
}


// Function Engine.UITabControl.FindPageIndexByPageRef
// (Defined, Public)
// Parameters:
// class UUITabPage*              SearchPage                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUITabControl::FindPageIndexByPageRef(class UUITabPage* SearchPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.FindPageIndexByPageRef");

	UUITabControl_FindPageIndexByPageRef_Params params;
	params.SearchPage = SearchPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.FindPageIndexByButton
// (Defined, Public)
// Parameters:
// class UUITabButton*            SearchButton                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUITabControl::FindPageIndexByButton(class UUITabButton* SearchButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.FindPageIndexByButton");

	UUITabControl_FindPageIndexByButton_Params params;
	params.SearchButton = SearchButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.FindPageIndexByCaption
// (Defined, Public)
// Parameters:
// struct FString                 PageCaption                    (Parm, NeedCtorLink)
// bool                           bMarkupString                  (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUITabControl::FindPageIndexByCaption(const struct FString& PageCaption, bool bMarkupString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.FindPageIndexByCaption");

	UUITabControl_FindPageIndexByCaption_Params params;
	params.PageCaption = PageCaption;
	params.bMarkupString = bMarkupString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ActivateBestTab
// (Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// int                            StartIndex                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ActivateBestTab(int PlayerIndex, bool bFocusPage, int StartIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ActivateBestTab");

	UUITabControl_ActivateBestTab_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;
	params.StartIndex = StartIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ActivatePageByCaption
// (Defined, Public)
// Parameters:
// struct FString                 PageCaption                    (Parm, NeedCtorLink)
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ActivatePageByCaption(const struct FString& PageCaption, int PlayerIndex, bool bFocusPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ActivatePageByCaption");

	UUITabControl_ActivatePageByCaption_Params params;
	params.PageCaption = PageCaption;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.AddedChild
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)
// class UUIObject*               NewChild                       (Parm)

void UUITabControl::AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.AddedChild");

	UUITabControl_AddedChild_Params params;
	params.WidgetOwner = WidgetOwner;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.PostInitialize
// (Defined, Event, Public)

void UUITabControl::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.PostInitialize");

	UUITabControl_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.EnableTabPage
// (Defined, Event, Public)
// Parameters:
// class UUITabPage*              PageToEnable                   (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           bEnablePage                    (OptionalParm, Parm)
// bool                           bActivatePage                  (OptionalParm, Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::EnableTabPage(class UUITabPage* PageToEnable, int PlayerIndex, bool bEnablePage, bool bActivatePage, bool bFocusPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.EnableTabPage");

	UUITabControl_EnableTabPage_Params params;
	params.PageToEnable = PageToEnable;
	params.PlayerIndex = PlayerIndex;
	params.bEnablePage = bEnablePage;
	params.bActivatePage = bActivatePage;
	params.bFocusPage = bFocusPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ActivatePreviousPage
// (Defined, Event, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           bAllowWrapping                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ActivatePreviousPage(int PlayerIndex, bool bFocusPage, bool bAllowWrapping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ActivatePreviousPage");

	UUITabControl_ActivatePreviousPage_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;
	params.bAllowWrapping = bAllowWrapping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ActivateNextPage
// (Defined, Event, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           bAllowWrapping                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ActivateNextPage(int PlayerIndex, bool bFocusPage, bool bAllowWrapping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ActivateNextPage");

	UUITabControl_ActivateNextPage_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;
	params.bAllowWrapping = bAllowWrapping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ActivatePage
// (Defined, Event, Public)
// Parameters:
// class UUITabPage*              PageToActivate                 (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ActivatePage(class UUITabPage* PageToActivate, int PlayerIndex, bool bFocusPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ActivatePage");

	UUITabControl_ActivatePage_Params params;
	params.PageToActivate = PageToActivate;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.ReplacePage
// (Defined, Event, Public)
// Parameters:
// class UUITabPage*              ExistingPage                   (Parm)
// class UUITabPage*              NewPage                        (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           bFocusPage                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::ReplacePage(class UUITabPage* ExistingPage, class UUITabPage* NewPage, int PlayerIndex, bool bFocusPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.ReplacePage");

	UUITabControl_ReplacePage_Params params;
	params.ExistingPage = ExistingPage;
	params.NewPage = NewPage;
	params.PlayerIndex = PlayerIndex;
	params.bFocusPage = bFocusPage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.RemovePage
// (Defined, Event, Public)
// Parameters:
// class UUITabPage*              PageToRemove                   (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::RemovePage(class UUITabPage* PageToRemove, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.RemovePage");

	UUITabControl_RemovePage_Params params;
	params.PageToRemove = PageToRemove;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.InsertPage
// (Defined, Event, Public)
// Parameters:
// class UUITabPage*              PageToInsert                   (Parm)
// int                            PlayerIndex                    (Parm)
// int                            InsertIndex                    (OptionalParm, Parm)
// bool                           bActivateImmediately           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabControl::InsertPage(class UUITabPage* PageToInsert, int PlayerIndex, int InsertIndex, bool bActivateImmediately)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.InsertPage");

	UUITabControl_InsertPage_Params params;
	params.PageToInsert = PageToInsert;
	params.PlayerIndex = PlayerIndex;
	params.InsertIndex = InsertIndex;
	params.bActivateImmediately = bActivateImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.PrivateActivatePage
// (Defined, Event, Protected)
// Parameters:
// class UUITabPage*              PageToActivate                 (Parm)
// int                            PlayerIndex                    (Parm)

void UUITabControl::PrivateActivatePage(class UUITabPage* PageToActivate, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.PrivateActivatePage");

	UUITabControl_PrivateActivatePage_Params params;
	params.PageToActivate = PageToActivate;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.CreateTabPage
// (Native, Public)
// Parameters:
// class UClass*                  TabPageClass                   (Parm)
// class UUITabPage*              PagePrefab                     (OptionalParm, Parm)
// class UUITabPage*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabPage* UUITabControl::CreateTabPage(class UClass* TabPageClass, class UUITabPage* PagePrefab)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.CreateTabPage");

	UUITabControl_CreateTabPage_Params params;
	params.TabPageClass = TabPageClass;
	params.PagePrefab = PagePrefab;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.FindTargetedTab
// (Final, Native, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// class UUITabButton*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabButton* UUITabControl::FindTargetedTab(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.FindTargetedTab");

	UUITabControl_FindTargetedTab_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.GetPageAtIndex
// (Final, Native, Public)
// Parameters:
// int                            PageIndex                      (Parm)
// class UUITabPage*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabPage* UUITabControl::GetPageAtIndex(int PageIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.GetPageAtIndex");

	UUITabControl_GetPageAtIndex_Params params;
	params.PageIndex = PageIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.GetPageCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUITabControl::GetPageCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.GetPageCount");

	UUITabControl_GetPageCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabControl.RequestLayoutUpdate
// (Final, Native, Public)

void UUITabControl::RequestLayoutUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.RequestLayoutUpdate");

	UUITabControl_RequestLayoutUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.OnPageRemoved
// (Public, Delegate)
// Parameters:
// class UUITabControl*           Sender                         (Parm)
// class UUITabPage*              OldPage                        (Parm)
// int                            PlayerIndex                    (Parm)

void UUITabControl::OnPageRemoved(class UUITabControl* Sender, class UUITabPage* OldPage, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.OnPageRemoved");

	UUITabControl_OnPageRemoved_Params params;
	params.Sender = Sender;
	params.OldPage = OldPage;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.OnPageInserted
// (Public, Delegate)
// Parameters:
// class UUITabControl*           Sender                         (Parm)
// class UUITabPage*              NewPage                        (Parm)
// int                            PlayerIndex                    (Parm)

void UUITabControl::OnPageInserted(class UUITabControl* Sender, class UUITabPage* NewPage, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.OnPageInserted");

	UUITabControl_OnPageInserted_Params params;
	params.Sender = Sender;
	params.NewPage = NewPage;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabControl.OnPageActivated
// (Public, Delegate)
// Parameters:
// class UUITabControl*           Sender                         (Parm)
// class UUITabPage*              NewlyActivePage                (Parm)
// int                            PlayerIndex                    (Parm)

void UUITabControl::OnPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabControl.OnPageActivated");

	UUITabControl_OnPageActivated_Params params;
	params.Sender = Sender;
	params.NewlyActivePage = NewlyActivePage;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.IsActivePage
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabPage::IsActivePage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.IsActivePage");

	UUITabPage_IsActivePage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.SetTabCaption
// (Defined, Public)
// Parameters:
// struct FString                 NewButtonMarkup                (Parm, NeedCtorLink)

void UUITabPage::SetTabCaption(const struct FString& NewButtonMarkup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.SetTabCaption");

	UUITabPage_SetTabCaption_Params params;
	params.NewButtonMarkup = NewButtonMarkup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.OnActiveStateChanged
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// class UUIState*                NewlyActiveState               (Parm)
// class UUIState*                PreviouslyActiveState          (OptionalParm, Parm)

void UUITabPage::OnActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.OnActiveStateChanged");

	UUITabPage_OnActiveStateChanged_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;
	params.NewlyActiveState = NewlyActiveState;
	params.PreviouslyActiveState = PreviouslyActiveState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.CanActivatePage
// (Defined, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabPage::CanActivatePage(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.CanActivatePage");

	UUITabPage_CanActivatePage_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.AddedToTabControl
// (Public)
// Parameters:
// class UUITabControl*           TabControl                     (Parm)

void UUITabPage::AddedToTabControl(class UUITabControl* TabControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.AddedToTabControl");

	UUITabPage_AddedToTabControl_Params params;
	params.TabControl = TabControl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.ClearBoundDataStores
// (Final, Native, Public)

void UUITabPage::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.ClearBoundDataStores");

	UUITabPage_ClearBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.GetBoundDataStores
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (Parm, OutParm, NeedCtorLink)

void UUITabPage::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.GetBoundDataStores");

	UUITabPage_GetBoundDataStores_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UITabPage.NotifyDataStoreValueUpdated
// (Final, Native, Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (Parm)
// bool                           bValuesInvalidated             (Parm)
// struct FName                   PropertyTag                    (Parm)
// class UUIDataProvider*         SourceProvider                 (Parm)
// int                            ArrayIndex                     (Parm)

void UUITabPage::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.NotifyDataStoreValueUpdated");

	UUITabPage_NotifyDataStoreValueUpdated_Params params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.RefreshSubscriberValue
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabPage::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.RefreshSubscriberValue");

	UUITabPage_RefreshSubscriberValue_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.GetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// int                            BindingIndex                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUITabPage::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.GetDataStoreBinding");

	UUITabPage_GetDataStoreBinding_Params params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.SetDataStoreBinding
// (Final, Native, Public)
// Parameters:
// struct FString                 MarkupText                     (Parm, NeedCtorLink)
// int                            BindingIndex                   (OptionalParm, Parm)

void UUITabPage::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.SetDataStoreBinding");

	UUITabPage_SetDataStoreBinding_Params params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.GetTabButton
// (Defined, Public)
// Parameters:
// class UUITabControl*           TabControl                     (OptionalParm, Parm)
// class UUITabButton*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabButton* UUITabPage::GetTabButton(class UUITabControl* TabControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.GetTabButton");

	UUITabPage_GetTabButton_Params params;
	params.TabControl = TabControl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.GetOwnerTabControl
// (Final, Native, Public)
// Parameters:
// class UUITabControl*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabControl* UUITabPage::GetOwnerTabControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.GetOwnerTabControl");

	UUITabPage_GetOwnerTabControl_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.RemovedFromParent
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         WidgetOwner                    (Parm)

void UUITabPage::RemovedFromParent(class UUIScreenObject* WidgetOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.RemovedFromParent");

	UUITabPage_RemovedFromParent_Params params;
	params.WidgetOwner = WidgetOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UITabPage.LinkToTabButton
// (Defined, Event, Public)
// Parameters:
// class UUITabButton*            NewButton                      (Parm)
// class UUITabControl*           TabControl                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabPage::LinkToTabButton(class UUITabButton* NewButton, class UUITabControl* TabControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.LinkToTabButton");

	UUITabPage_LinkToTabButton_Params params;
	params.NewButton = NewButton;
	params.TabControl = TabControl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.CreateTabButton
// (Defined, Event, Static, Protected)
// Parameters:
// class UUITabControl*           TabControl                     (Parm)
// class UUITabButton*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UUITabButton* UUITabPage::STATIC_CreateTabButton(class UUITabControl* TabControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.CreateTabButton");

	UUITabPage_CreateTabButton_Params params;
	params.TabControl = TabControl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITabPage.ActivatePage
// (Defined, Event, Public)
// Parameters:
// int                            PlayerIndex                    (Parm)
// bool                           bActivate                      (Parm)
// bool                           bTakeFocus                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITabPage::ActivatePage(int PlayerIndex, bool bActivate, bool bTakeFocus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITabPage.ActivatePage");

	UUITabPage_ActivatePage_Params params;
	params.PlayerIndex = PlayerIndex;
	params.bActivate = bActivate;
	params.bTakeFocus = bTakeFocus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITexture.GetSurface
// (Final, Defined, Public)
// Parameters:
// class USurface*                ReturnValue                    (Parm, OutParm, ReturnParm)

class USurface* UUITexture::GetSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITexture.GetSurface");

	UUITexture_GetSurface_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITexture.HasValidStyleData
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUITexture::HasValidStyleData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITexture.HasValidStyleData");

	UUITexture_HasValidStyleData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UITexture.SetImageStyle
// (Final, Native, Public)
// Parameters:
// class UUIStyle_Image*          NewImageStyle                  (Parm)

void UUITexture::SetImageStyle(class UUIStyle_Image* NewImageStyle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UITexture.SetImageStyle");

	UUITexture_SetImageStyle_Params params;
	params.NewImageStyle = NewImageStyle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIToggleButton.OnSetBoolValue
// (Final, Defined, Public)
// Parameters:
// class UUIAction_SetBoolValue*  Action                         (Parm)

void UUIToggleButton::OnSetBoolValue(class UUIAction_SetBoolValue* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToggleButton.OnSetBoolValue");

	UUIToggleButton_OnSetBoolValue_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIToggleButton.ButtonClicked
// (Defined, Public)
// Parameters:
// class UUIScreenObject*         Sender                         (Parm)
// int                            PlayerIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIToggleButton::ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToggleButton.ButtonClicked");

	UUIToggleButton_ButtonClicked_Params params;
	params.Sender = Sender;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToggleButton.SetValue
// (Final, Native, Public)
// Parameters:
// bool                           bShouldBeChecked               (Parm)
// int                            PlayerIndex                    (OptionalParm, Parm)

void UUIToggleButton::SetValue(bool bShouldBeChecked, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToggleButton.SetValue");

	UUIToggleButton_SetValue_Params params;
	params.bShouldBeChecked = bShouldBeChecked;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIToggleButton.IsChecked
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIToggleButton::IsChecked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToggleButton.IsChecked");

	UUIToggleButton_IsChecked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToggleButton.SetCaption
// (Native, Public)
// Parameters:
// struct FString                 NewText                        (Parm, NeedCtorLink)

void UUIToggleButton::SetCaption(const struct FString& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToggleButton.SetCaption");

	UUIToggleButton_SetCaption_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIToolTip.UpdateToolTipPosition
// (Final, Native, Public)

void UUIToolTip::UpdateToolTipPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.UpdateToolTipPosition");

	UUIToolTip_UpdateToolTipPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIToolTip.EndTracking
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIToolTip::EndTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.EndTracking");

	UUIToolTip_EndTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToolTip.BeginTracking
// (Final, Native, Public)
// Parameters:
// class UUIToolTip*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIToolTip* UUIToolTip::BeginTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.BeginTracking");

	UUIToolTip_BeginTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToolTip.CanShowToolTip
// (Public, Delegate)
// Parameters:
// class UUIToolTip*              Sender                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIToolTip::CanShowToolTip(class UUIToolTip* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.CanShowToolTip");

	UUIToolTip_CanShowToolTip_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToolTip.DeactivateToolTip
// (Defined, Public, Delegate)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIToolTip::DeactivateToolTip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.DeactivateToolTip");

	UUIToolTip_DeactivateToolTip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIToolTip.ActivateToolTip
// (Defined, Public, Delegate)
// Parameters:
// class UUIToolTip*              Sender                         (Parm)
// class UUIToolTip*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIToolTip* UUIToolTip::ActivateToolTip(class UUIToolTip* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIToolTip.ActivateToolTip");

	UUIToolTip_ActivateToolTip_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_UIRange.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqVar_UIRange::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_UIRange.IsValidLevelSequenceObject");

	USeqVar_UIRange_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction.IsValidUISequenceObject");

	UUIAction_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction.IsValidLevelSequenceObject");

	UUIAction_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction.GetOwnerScene
// (Final, Native, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIAction::GetOwnerScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction.GetOwnerScene");

	UUIAction_GetOwnerScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction.GetOwner
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScreenObject* UUIAction::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction.GetOwner");

	UUIAction_GetOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_Scene.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction_Scene::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_Scene.IsValidLevelSequenceObject");

	UUIAction_Scene_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_GetLoggedInPlayerCount.GetLoginStatus
// (Defined, Event, Public)

void UUIAction_GetLoggedInPlayerCount::GetLoginStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetLoggedInPlayerCount.GetLoginStatus");

	UUIAction_GetLoggedInPlayerCount_GetLoginStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_GetNATType.GetNATType
// (Defined, Event, Public, HasOutParms)
// Parameters:
// TEnumAsByte<ENATType>          OutNATType                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction_GetNATType::GetNATType(TEnumAsByte<ENATType>* OutNATType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetNATType.GetNATType");

	UUIAction_GetNATType_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutNATType != nullptr)
		*OutNATType = params.OutNATType;

	return params.ReturnValue;
}


// Function Engine.UIAction_GetPrivilegeLevel.GetPrivilegeLevel
// (Defined, Event, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UUIAction_GetPrivilegeLevel::GetPrivilegeLevel(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetPrivilegeLevel.GetPrivilegeLevel");

	UUIAction_GetPrivilegeLevel_GetPrivilegeLevel_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_JoinOnlineGame.BuildJoinURL
// (Defined, Public)
// Parameters:
// struct FString                 ResolvedConnectionURL          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UUIAction_JoinOnlineGame::BuildJoinURL(const struct FString& ResolvedConnectionURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_JoinOnlineGame.BuildJoinURL");

	UUIAction_JoinOnlineGame_BuildJoinURL_Params params;
	params.ResolvedConnectionURL = ResolvedConnectionURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_JoinOnlineGame.OnJoinGameComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIAction_JoinOnlineGame::OnJoinGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_JoinOnlineGame.OnJoinGameComplete");

	UUIAction_JoinOnlineGame_OnJoinGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_JoinOnlineGame.JoinOnlineGame
// (Defined, Event, Public)
// Parameters:
// unsigned char                  ControllerId                   (Parm)
// struct FOnlineGameSearchResult GameToJoin                     (Parm)
// class AWorldInfo*              InWorldInfo                    (Parm)

void UUIAction_JoinOnlineGame::JoinOnlineGame(unsigned char ControllerId, const struct FOnlineGameSearchResult& GameToJoin, class AWorldInfo* InWorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_JoinOnlineGame.JoinOnlineGame");

	UUIAction_JoinOnlineGame_JoinOnlineGame_Params params;
	params.ControllerId = ControllerId;
	params.GameToJoin = GameToJoin;
	params.InWorldInfo = InWorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_PublishValue.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction_PublishValue::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_PublishValue.IsValidUISequenceObject");

	UUIAction_PublishValue_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_RefreshBindingValue.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction_RefreshBindingValue::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_RefreshBindingValue.IsValidUISequenceObject");

	UUIAction_RefreshBindingValue_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_SaveProfileSettings.OnProfileWriteComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIAction_SaveProfileSettings::OnProfileWriteComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_SaveProfileSettings.OnProfileWriteComplete");

	UUIAction_SaveProfileSettings_OnProfileWriteComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_SaveProfileSettings.ClearDelegate
// (Defined, Event, Public)

void UUIAction_SaveProfileSettings::ClearDelegate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_SaveProfileSettings.ClearDelegate");

	UUIAction_SaveProfileSettings_ClearDelegate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_SaveProfileSettings.RegisterDelegate
// (Defined, Event, Public)

void UUIAction_SaveProfileSettings::RegisterDelegate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_SaveProfileSettings.RegisterDelegate");

	UUIAction_SaveProfileSettings_RegisterDelegate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowDeviceSelectionUI.OnDeviceSelectionComplete
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIAction_ShowDeviceSelectionUI::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowDeviceSelectionUI.OnDeviceSelectionComplete");

	UUIAction_ShowDeviceSelectionUI_OnDeviceSelectionComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowDeviceSelectionUI.SelectDevice
// (Defined, Event, Public)

void UUIAction_ShowDeviceSelectionUI::SelectDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowDeviceSelectionUI.SelectDevice");

	UUIAction_ShowDeviceSelectionUI_SelectDevice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowDeviceSelectionUI.WriteToVariables
// (Native, Public)

void UUIAction_ShowDeviceSelectionUI::WriteToVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowDeviceSelectionUI.WriteToVariables");

	UUIAction_ShowDeviceSelectionUI_WriteToVariables_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowKeyboardUI.OnKeyboardInputDone
// (Defined, Public)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UUIAction_ShowKeyboardUI::OnKeyboardInputDone(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowKeyboardUI.OnKeyboardInputDone");

	UUIAction_ShowKeyboardUI_OnKeyboardInputDone_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowKeyboardUI.ReadKeyboardInput
// (Defined, Event, Public)

void UUIAction_ShowKeyboardUI::ReadKeyboardInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowKeyboardUI.ReadKeyboardInput");

	UUIAction_ShowKeyboardUI_ReadKeyboardInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowLoginUI.OnLoginCancelled
// (Defined, Public)

void UUIAction_ShowLoginUI::OnLoginCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowLoginUI.OnLoginCancelled");

	UUIAction_ShowLoginUI_OnLoginCancelled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowLoginUI.OnLoginChanged
// (Defined, Public)

void UUIAction_ShowLoginUI::OnLoginChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowLoginUI.OnLoginChanged");

	UUIAction_ShowLoginUI_OnLoginChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ShowLoginUI.ShowUI
// (Defined, Event, Public)

void UUIAction_ShowLoginUI::ShowUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ShowLoginUI.ShowUI");

	UUIAction_ShowLoginUI_ShowUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIEvent.ShouldAlwaysInstance
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::ShouldAlwaysInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.ShouldAlwaysInstance");

	UUIEvent_ShouldAlwaysInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.IsValidUISequenceObject");

	UUIEvent_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.IsValidLevelSequenceObject");

	UUIEvent_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent.ActivateUIEvent
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            ControllerIndex                (Parm)
// class UUIScreenObject*         InEventOwner                   (Parm)
// class UObject*                 InEventActivator               (OptionalParm, Parm)
// bool                           bActivateImmediately           (OptionalParm, Parm)
// TArray<int>                    IndicesToActivate              (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::ActivateUIEvent(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.ActivateUIEvent");

	UUIEvent_ActivateUIEvent_Params params;
	params.ControllerIndex = ControllerIndex;
	params.InEventOwner = InEventOwner;
	params.InEventActivator = InEventActivator;
	params.bActivateImmediately = bActivateImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndicesToActivate != nullptr)
		*IndicesToActivate = params.IndicesToActivate;

	return params.ReturnValue;
}


// Function Engine.UIEvent.ConditionalActivateUIEvent
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            ControllerIndex                (Parm)
// class UUIScreenObject*         InEventOwner                   (Parm)
// class UObject*                 InEventActivator               (OptionalParm, Parm)
// bool                           bActivateImmediately           (OptionalParm, Parm)
// TArray<int>                    IndicesToActivate              (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::ConditionalActivateUIEvent(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.ConditionalActivateUIEvent");

	UUIEvent_ConditionalActivateUIEvent_Params params;
	params.ControllerIndex = ControllerIndex;
	params.InEventOwner = InEventOwner;
	params.InEventActivator = InEventActivator;
	params.bActivateImmediately = bActivateImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndicesToActivate != nullptr)
		*IndicesToActivate = params.IndicesToActivate;

	return params.ReturnValue;
}


// Function Engine.UIEvent.CanBeActivated
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            ControllerIndex                (Parm)
// class UUIScreenObject*         InEventOwner                   (Parm)
// class UObject*                 InEventActivator               (OptionalParm, Parm)
// bool                           bActivateImmediately           (OptionalParm, Parm)
// TArray<int>                    IndicesToActivate              (Const, OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::CanBeActivated(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.CanBeActivated");

	UUIEvent_CanBeActivated_Params params;
	params.ControllerIndex = ControllerIndex;
	params.InEventOwner = InEventOwner;
	params.InEventActivator = InEventActivator;
	params.bActivateImmediately = bActivateImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndicesToActivate != nullptr)
		*IndicesToActivate = params.IndicesToActivate;

	return params.ReturnValue;
}


// Function Engine.UIEvent.GetOwnerScene
// (Final, Native, Public)
// Parameters:
// class UUIScene*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScene* UUIEvent::GetOwnerScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.GetOwnerScene");

	UUIEvent_GetOwnerScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent.GetOwner
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScreenObject* UUIEvent::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.GetOwner");

	UUIEvent_GetOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent.AllowEventActivation
// (Public, Delegate, HasOutParms)
// Parameters:
// int                            ControllerIndex                (Parm)
// class UUIScreenObject*         InEventOwner                   (Parm)
// class UObject*                 InEventActivator               (Parm)
// bool                           bActivateImmediately           (Parm)
// TArray<int>                    IndicesToActivate              (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent::AllowEventActivation(int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, bool bActivateImmediately, TArray<int>* IndicesToActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent.AllowEventActivation");

	UUIEvent_AllowEventActivation_Params params;
	params.ControllerIndex = ControllerIndex;
	params.InEventOwner = InEventOwner;
	params.InEventActivator = InEventActivator;
	params.bActivateImmediately = bActivateImmediately;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndicesToActivate != nullptr)
		*IndicesToActivate = params.IndicesToActivate;

	return params.ReturnValue;
}


// Function Engine.UIEvent_CheckValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_CheckValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_CheckValueChanged.IsValidUISequenceObject");

	UUIEvent_CheckValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_ComboboxValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_ComboboxValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_ComboboxValueChanged.IsValidUISequenceObject");

	UUIEvent_ComboboxValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_ListIndexChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_ListIndexChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_ListIndexChanged.IsValidUISequenceObject");

	UUIEvent_ListIndexChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_MetaObject.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_MetaObject::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_MetaObject.IsValidUISequenceObject");

	UUIEvent_MetaObject_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_NumericOptionListValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_NumericOptionListValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_NumericOptionListValueChanged.IsValidUISequenceObject");

	UUIEvent_NumericOptionListValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_OptionListValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_OptionListValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_OptionListValueChanged.IsValidUISequenceObject");

	UUIEvent_OptionListValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_ProcessInput::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject");

	UUIEvent_ProcessInput_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_ProgressBarValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_ProgressBarValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_ProgressBarValueChanged.IsValidUISequenceObject");

	UUIEvent_ProgressBarValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_SliderValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_SliderValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_SliderValueChanged.IsValidUISequenceObject");

	UUIEvent_SliderValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_SubmitListData.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_SubmitListData::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_SubmitListData.IsValidUISequenceObject");

	UUIEvent_SubmitListData_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_SubmitTextData.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_SubmitTextData::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_SubmitTextData.IsValidUISequenceObject");

	UUIEvent_SubmitTextData_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_TabControl.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_TabControl::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_TabControl.IsValidUISequenceObject");

	UUIEvent_TabControl_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_TextValueChanged.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIEvent_TextValueChanged::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_TextValueChanged.IsValidUISequenceObject");

	UUIEvent_TextValueChanged_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISequence.RemoveSequenceObjects
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class USequenceObject*> ObjectsToRemove                (Const, Parm, OutParm, NeedCtorLink)

void UUISequence::RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISequence.RemoveSequenceObjects");

	UUISequence_RemoveSequenceObjects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ObjectsToRemove != nullptr)
		*ObjectsToRemove = params.ObjectsToRemove;
}


// Function Engine.UISequence.RemoveSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         ObjectToRemove                 (Parm)

void UUISequence::RemoveSequenceObject(class USequenceObject* ObjectToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISequence.RemoveSequenceObject");

	UUISequence_RemoveSequenceObject_Params params;
	params.ObjectToRemove = ObjectToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISequence.AddSequenceObject
// (Final, Native, Public)
// Parameters:
// class USequenceObject*         NewObj                         (Parm)
// bool                           bRecurse                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUISequence::AddSequenceObject(class USequenceObject* NewObj, bool bRecurse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISequence.AddSequenceObject");

	UUISequence_AddSequenceObject_Params params;
	params.NewObj = NewObj;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISequence.GetUIEvents
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class UUIEvent*>        out_Events                     (Parm, OutParm, NeedCtorLink)
// class UClass*                  LimitClass                     (OptionalParm, Parm)

void UUISequence::GetUIEvents(class UClass* LimitClass, TArray<class UUIEvent*>* out_Events)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISequence.GetUIEvents");

	UUISequence_GetUIEvents_Params params;
	params.LimitClass = LimitClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Events != nullptr)
		*out_Events = params.out_Events;
}


// Function Engine.UISequence.GetOwner
// (Final, Native, Public)
// Parameters:
// class UUIScreenObject*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIScreenObject* UUISequence::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISequence.GetOwner");

	UUISequence_GetOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIStateSequence.GetOwnerState
// (Final, Native, Public)
// Parameters:
// class UUIState*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UUIState* UUIStateSequence::GetOwnerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIStateSequence.GetOwnerState");

	UUIStateSequence_GetOwnerState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JuiceSubsystem.FlushFile
// (Native, Static, Public)
// Parameters:
// int                            FileHandle                     (Parm)

void UJuiceSubsystem::STATIC_FlushFile(int FileHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.FlushFile");

	UJuiceSubsystem_FlushFile_Params params;
	params.FileHandle = FileHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.WriteToFile
// (Native, Static, Public)
// Parameters:
// int                            FileHandle                     (Parm)
// struct FString                 TextToWrite                    (Parm, NeedCtorLink)

void UJuiceSubsystem::STATIC_WriteToFile(int FileHandle, const struct FString& TextToWrite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.WriteToFile");

	UJuiceSubsystem_WriteToFile_Params params;
	params.FileHandle = FileHandle;
	params.TextToWrite = TextToWrite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.CloseFile
// (Native, Static, Public)
// Parameters:
// int                            FileHandle                     (Parm)

void UJuiceSubsystem::STATIC_CloseFile(int FileHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.CloseFile");

	UJuiceSubsystem_CloseFile_Params params;
	params.FileHandle = FileHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.OpenFile
// (Native, Static, Public)
// Parameters:
// struct FString                 Filename                       (Parm, NeedCtorLink)
// bool                           bOpenForWrite                  (OptionalParm, Parm)
// bool                           bText                          (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UJuiceSubsystem::STATIC_OpenFile(const struct FString& Filename, bool bOpenForWrite, bool bText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.OpenFile");

	UJuiceSubsystem_OpenFile_Params params;
	params.Filename = Filename;
	params.bOpenForWrite = bOpenForWrite;
	params.bText = bText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JuiceSubsystem.LevelStart
// (Native, Event, Static, Public)

void UJuiceSubsystem::STATIC_LevelStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.LevelStart");

	UJuiceSubsystem_LevelStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.GetBuildInfo
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UJuiceSubsystem::STATIC_GetBuildInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GetBuildInfo");

	UJuiceSubsystem_GetBuildInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JuiceSubsystem.GetMapName
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UJuiceSubsystem::STATIC_GetMapName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GetMapName");

	UJuiceSubsystem_GetMapName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JuiceSubsystem.SetChannelLevel
// (Native, Event, Static, Public)
// Parameters:
// int                            Group                          (Parm)
// int                            Category                       (Parm)
// int                            Level                          (Parm)

void UJuiceSubsystem::STATIC_SetChannelLevel(int Group, int Category, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.SetChannelLevel");

	UJuiceSubsystem_SetChannelLevel_Params params;
	params.Group = Group;
	params.Category = Category;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.AssetCoverage
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 assetName                      (Parm, NeedCtorLink)
// int                            numHits                        (Parm)

void UJuiceSubsystem::STATIC_AssetCoverage(const struct FString& Category, const struct FString& assetName, int numHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.AssetCoverage");

	UJuiceSubsystem_AssetCoverage_Params params;
	params.Category = Category;
	params.assetName = assetName;
	params.numHits = numHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.GameStatI
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 StatName                       (Parm, NeedCtorLink)
// int                            StatValue                      (Parm)

void UJuiceSubsystem::STATIC_GameStatI(const struct FString& Category, const struct FString& StatName, int StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GameStatI");

	UJuiceSubsystem_GameStatI_Params params;
	params.Category = Category;
	params.StatName = StatName;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.GameStatF
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 StatName                       (Parm, NeedCtorLink)
// float                          StatValue                      (Parm)

void UJuiceSubsystem::STATIC_GameStatF(const struct FString& Category, const struct FString& StatName, float StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GameStatF");

	UJuiceSubsystem_GameStatF_Params params;
	params.Category = Category;
	params.StatName = StatName;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.GameEventD
// (Native, Event, Static, Public)
// Parameters:
// int                            Group                          (Parm)
// int                            Channel                        (Parm)
// int                            Level                          (Parm)
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 EventName                      (Parm, NeedCtorLink)
// struct FString                 Outcome                        (Parm, NeedCtorLink)
// int                            IValue                         (Parm)
// float                          FValue                         (Parm)
// struct FString                 StrResult                      (Parm, NeedCtorLink)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FVector                 MapLoc                         (Parm)

void UJuiceSubsystem::STATIC_GameEventD(int Group, int Channel, int Level, const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FString& MapName, const struct FVector& MapLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GameEventD");

	UJuiceSubsystem_GameEventD_Params params;
	params.Group = Group;
	params.Channel = Channel;
	params.Level = Level;
	params.Category = Category;
	params.EventName = EventName;
	params.Outcome = Outcome;
	params.IValue = IValue;
	params.FValue = FValue;
	params.StrResult = StrResult;
	params.MapName = MapName;
	params.MapLoc = MapLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.TriggerEvent
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 EventName                      (Parm, NeedCtorLink)
// struct FString                 EventParam                     (Parm, NeedCtorLink)

void UJuiceSubsystem::STATIC_TriggerEvent(const struct FString& EventName, const struct FString& EventParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.TriggerEvent");

	UJuiceSubsystem_TriggerEvent_Params params;
	params.EventName = EventName;
	params.EventParam = EventParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.LevelStatI
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 StatName                       (Parm, NeedCtorLink)
// int                            StatValue                      (Parm)

void UJuiceSubsystem::STATIC_LevelStatI(const struct FString& Category, const struct FString& StatName, int StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.LevelStatI");

	UJuiceSubsystem_LevelStatI_Params params;
	params.Category = Category;
	params.StatName = StatName;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.LevelEventD
// (Native, Event, Static, Public)
// Parameters:
// int                            Group                          (Parm)
// int                            Channel                        (Parm)
// int                            Level                          (Parm)
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 EventName                      (Parm, NeedCtorLink)
// struct FString                 Outcome                        (Parm, NeedCtorLink)
// int                            IValue                         (Parm)
// float                          FValue                         (Parm)
// struct FString                 StrResult                      (Parm, NeedCtorLink)
// struct FVector                 MapLoc                         (Parm)

void UJuiceSubsystem::STATIC_LevelEventD(int Group, int Channel, int Level, const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FVector& MapLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.LevelEventD");

	UJuiceSubsystem_LevelEventD_Params params;
	params.Group = Group;
	params.Channel = Channel;
	params.Level = Level;
	params.Category = Category;
	params.EventName = EventName;
	params.Outcome = Outcome;
	params.IValue = IValue;
	params.FValue = FValue;
	params.StrResult = StrResult;
	params.MapLoc = MapLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.LevelEvent
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 EventName                      (Parm, NeedCtorLink)
// struct FString                 Outcome                        (Parm, NeedCtorLink)
// int                            IValue                         (Parm)
// float                          FValue                         (Parm)
// struct FString                 StrResult                      (Parm, NeedCtorLink)
// struct FVector                 MapLoc                         (Parm)

void UJuiceSubsystem::STATIC_LevelEvent(const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FVector& MapLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.LevelEvent");

	UJuiceSubsystem_LevelEvent_Params params;
	params.Category = Category;
	params.EventName = EventName;
	params.Outcome = Outcome;
	params.IValue = IValue;
	params.FValue = FValue;
	params.StrResult = StrResult;
	params.MapLoc = MapLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.JuiceGameEvent
// (Native, Event, Static, Public)
// Parameters:
// struct FString                 Category                       (Parm, NeedCtorLink)
// struct FString                 EventName                      (Parm, NeedCtorLink)
// struct FString                 Outcome                        (Parm, NeedCtorLink)
// int                            IValue                         (Parm)
// float                          FValue                         (Parm)
// struct FString                 StrResult                      (Parm, NeedCtorLink)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FVector                 MapLoc                         (Parm)

void UJuiceSubsystem::STATIC_JuiceGameEvent(const struct FString& Category, const struct FString& EventName, const struct FString& Outcome, int IValue, float FValue, const struct FString& StrResult, const struct FString& MapName, const struct FVector& MapLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.JuiceGameEvent");

	UJuiceSubsystem_JuiceGameEvent_Params params;
	params.Category = Category;
	params.EventName = EventName;
	params.Outcome = Outcome;
	params.IValue = IValue;
	params.FValue = FValue;
	params.StrResult = StrResult;
	params.MapName = MapName;
	params.MapLoc = MapLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceSubsystem.GetSubsystem
// (Native, Event, Static, Public)
// Parameters:
// class UJuiceSubsystem*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UJuiceSubsystem* UJuiceSubsystem::STATIC_GetSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceSubsystem.GetSubsystem");

	UJuiceSubsystem_GetSubsystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MemoryBudgetSubsystem.DumpAudioAllocationsByType
// (Native, Public)

void UMemoryBudgetSubsystem::DumpAudioAllocationsByType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MemoryBudgetSubsystem.DumpAudioAllocationsByType");

	UMemoryBudgetSubsystem_DumpAudioAllocationsByType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MemoryBudgetSubsystem.DumpAllocations
// (Native, Public)

void UMemoryBudgetSubsystem::DumpAllocations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MemoryBudgetSubsystem.DumpAllocations");

	UMemoryBudgetSubsystem_DumpAllocations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MemoryBudgetSubsystem.RenderAllocations
// (Native, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UMemoryBudgetSubsystem::RenderAllocations(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MemoryBudgetSubsystem.RenderAllocations");

	UMemoryBudgetSubsystem_RenderAllocations_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MemoryBudgetSubsystem.GetSubsystem
// (Native, Event, Static, Public)
// Parameters:
// class UMemoryBudgetSubsystem*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UMemoryBudgetSubsystem* UMemoryBudgetSubsystem::STATIC_GetSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MemoryBudgetSubsystem.GetSubsystem");

	UMemoryBudgetSubsystem_GetSubsystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LensFlareComponent.SetIsActive
// (Native, Public)
// Parameters:
// bool                           bInIsActive                    (Parm)

void ULensFlareComponent::SetIsActive(bool bInIsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetIsActive");

	ULensFlareComponent_SetIsActive_Params params;
	params.bInIsActive = bInIsActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetSourceColor
// (Native, Public)
// Parameters:
// struct FLinearColor            InSourceColor                  (Parm)

void ULensFlareComponent::SetSourceColor(const struct FLinearColor& InSourceColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetSourceColor");

	ULensFlareComponent_SetSourceColor_Params params;
	params.InSourceColor = InSourceColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetTemplate
// (Final, Native, Public)
// Parameters:
// class ULensFlare*              NewTemplate                    (Parm)

void ULensFlareComponent::SetTemplate(class ULensFlare* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetTemplate");

	ULensFlareComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetActorParameter
// (Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class AActor*                  Param                          (Parm)

void ALensFlareSource::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetActorParameter");

	ALensFlareSource_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetExtColorParameter
// (Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Red                            (Parm)
// float                          Green                          (Parm)
// float                          Blue                           (Parm)
// float                          Alpha                          (Parm)

void ALensFlareSource::SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetExtColorParameter");

	ALensFlareSource_SetExtColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetColorParameter
// (Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FLinearColor            Param                          (Parm)

void ALensFlareSource::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetColorParameter");

	ALensFlareSource_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetVectorParameter
// (Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FVector                 Param                          (Parm)

void ALensFlareSource::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetVectorParameter");

	ALensFlareSource_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetFloatParameter
// (Simulated, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Param                          (Parm)

void ALensFlareSource::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetFloatParameter");

	ALensFlareSource_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ALensFlareSource::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.OnToggle");

	ALensFlareSource_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetTemplate
// (Final, Native, Public)
// Parameters:
// class ULensFlare*              NewTemplate                    (Parm)

void ALensFlareSource::SetTemplate(class ULensFlare* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetTemplate");

	ALensFlareSource_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.ActivateThisLOIObject
// (Defined, Event, Public)

void UTdLOIAddOnObject::ActivateThisLOIObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.ActivateThisLOIObject");

	UTdLOIAddOnObject_ActivateThisLOIObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.LookAtActivationAttempt
// (Defined, Public)

void UTdLOIAddOnObject::LookAtActivationAttempt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.LookAtActivationAttempt");

	UTdLOIAddOnObject_LookAtActivationAttempt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.InitLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void UTdLOIAddOnObject::InitLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.InitLOI");

	UTdLOIAddOnObject_InitLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.OnDeactivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_DeactivateLOI*   Sender                         (Parm)

void UTdLOIAddOnObject::OnDeactivateLOI(class USeqAct_DeactivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.OnDeactivateLOI");

	UTdLOIAddOnObject_OnDeactivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.OnActivateLOI
// (Defined, Public)
// Parameters:
// class USeqAct_ActivateLOI*     Sender                         (Parm)

void UTdLOIAddOnObject::OnActivateLOI(class USeqAct_ActivateLOI* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.OnActivateLOI");

	UTdLOIAddOnObject_OnActivateLOI_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.ActivateLOI
// (Event, Public)

void UTdLOIAddOnObject::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.ActivateLOI");

	UTdLOIAddOnObject_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.InitLOIMtrlInstances
// (Public)

void UTdLOIAddOnObject::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.InitLOIMtrlInstances");

	UTdLOIAddOnObject_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.ActivateLOIGroups
// (Native, Public)
// Parameters:
// TArray<struct FName>           LOIGroups                      (Parm, NeedCtorLink)

void UTdLOIAddOnObject::ActivateLOIGroups(TArray<struct FName> LOIGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.ActivateLOIGroups");

	UTdLOIAddOnObject_ActivateLOIGroups_Params params;
	params.LOIGroups = LOIGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnObject.RegisterLOIGroups
// (Native, Public)
// Parameters:
// TArray<struct FName>           LOIGroups                      (Parm, NeedCtorLink)

void UTdLOIAddOnObject::RegisterLOIGroups(TArray<struct FName> LOIGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnObject.RegisterLOIGroups");

	UTdLOIAddOnObject_RegisterLOIGroups_Params params;
	params.LOIGroups = LOIGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalMessage.PartiallyDuplicates
// (Defined, Static, Public)
// Parameters:
// int                            Switch1                        (Parm)
// int                            Switch2                        (Parm)
// class UObject*                 OptionalObject1                (Parm)
// class UObject*                 OptionalObject2                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalMessage::STATIC_PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.PartiallyDuplicates");

	ULocalMessage_PartiallyDuplicates_Params params;
	params.Switch1 = Switch1;
	params.Switch2 = Switch2;
	params.OptionalObject1 = OptionalObject1;
	params.OptionalObject2 = OptionalObject2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.IsKeyObjectiveMessage
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalMessage::STATIC_IsKeyObjectiveMessage(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsKeyObjectiveMessage");

	ULocalMessage_IsKeyObjectiveMessage_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.IsConsoleMessage
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ULocalMessage::STATIC_IsConsoleMessage(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsConsoleMessage");

	ULocalMessage_IsConsoleMessage_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetLifeTime
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ULocalMessage::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetLifeTime");

	ULocalMessage_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetFontSize
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// class APlayerReplicationInfo*  RelatedPRI1                    (Parm)
// class APlayerReplicationInfo*  RelatedPRI2                    (Parm)
// class APlayerReplicationInfo*  LocalPlayer                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ULocalMessage::STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetFontSize");

	ULocalMessage_GetFontSize_Params params;
	params.Switch = Switch;
	params.RelatedPRI1 = RelatedPRI1;
	params.RelatedPRI2 = RelatedPRI2;
	params.LocalPlayer = LocalPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetPos
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// class AHUD*                    myHUD                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ULocalMessage::STATIC_GetPos(int Switch, class AHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetPos");

	ULocalMessage_GetPos_Params params;
	params.Switch = Switch;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetColor
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ULocalMessage::STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetColor");

	ULocalMessage_GetColor_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetConsoleColor
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  RelatedPRI_2                   (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ULocalMessage::STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleColor");

	ULocalMessage_GetConsoleColor_Params params;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULocalMessage::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetString");

	ULocalMessage_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.ClientReceive
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ULocalMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceive");

	ULocalMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalMessage.GetMessageArea
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ULocalMessage::STATIC_GetMessageArea(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetMessageArea");

	ULocalMessage_GetMessageArea_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.Get3DAnnouncementSound
// (Simulated, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class USoundCue*               ReturnValue                    (Parm, OutParm, ReturnParm)

class USoundCue* ULocalMessage::STATIC_Get3DAnnouncementSound(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.Get3DAnnouncementSound");

	ULocalMessage_Get3DAnnouncementSound_Params params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_TakeDamage.Reset
// (Defined, Public)

void USeqEvent_TakeDamage::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Reset");

	USeqEvent_TakeDamage_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.HandleDamage
// (Final, Defined, Public)
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// class UClass*                  inDamageType                   (Parm)
// int                            inAmount                       (Parm)

void USeqEvent_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.HandleDamage");

	USeqEvent_TakeDamage_HandleDamage_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.inDamageType = inDamageType;
	params.inAmount = inAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// (Final, Defined, Public)
// Parameters:
// class UClass*                  inDamageType                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqEvent_TakeDamage::IsValidDamageType(class UClass* inDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.IsValidDamageType");

	USeqEvent_TakeDamage_IsValidDamageType_Params params;
	params.inDamageType = inDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleHidden::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject");

	USeqAct_ToggleHidden_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_DeactivateLOI.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_DeactivateLOI::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_DeactivateLOI.IsValidUISequenceObject");

	USeqAct_DeactivateLOI_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ActivateLOI.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ActivateLOI::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActivateLOI.IsValidUISequenceObject");

	USeqAct_ActivateLOI_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsIDBanned
// (Defined, Public, HasOutParms)
// Parameters:
// struct FUniqueNetId            NetID                          (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::IsIDBanned(struct FUniqueNetId* NetID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsIDBanned");

	AAccessControl_IsIDBanned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NetID != nullptr)
		*NetID = params.NetID;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CheckIPPolicy
// (Defined, Public)
// Parameters:
// struct FString                 Address                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::CheckIPPolicy(const struct FString& Address)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckIPPolicy");

	AAccessControl_CheckIPPolicy_Params params;
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.PreLogin
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 OutError                       (Parm, OutParm, NeedCtorLink)
// bool                           bSpectator                     (Parm)

void AAccessControl::PreLogin(const struct FString& Options, const struct FString& Address, bool bSpectator, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreLogin");

	AAccessControl_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;
}


// Function Engine.AccessControl.ValidLogin
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ValidLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ValidLogin");

	AAccessControl_ValidLogin_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ParseAdminOptions
// (Defined, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ParseAdminOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ParseAdminOptions");

	AAccessControl_ParseAdminOptions_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminExited
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void AAccessControl::AdminExited(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminExited");

	AAccessControl_AdminExited_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminEntered
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void AAccessControl::AdminEntered(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminEntered");

	AAccessControl_AdminEntered_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminLogout
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogout(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogout");

	AAccessControl_AdminLogout_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminLogin
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogin(class APlayerController* P, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogin");

	AAccessControl_AdminLogin_Params params;
	params.P = P;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       C                              (Parm)
// struct FString                 KickReason                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::KickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickPlayer");

	AAccessControl_KickPlayer_Params params;
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickBan
// (Defined, Public)
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)

void AAccessControl::KickBan(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBan");

	AAccessControl_KickBan_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.Kick
// (Defined, Public)
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)

void AAccessControl::Kick(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Kick");

	AAccessControl_Kick_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.GetControllerFromString
// (Defined, Public)
// Parameters:
// struct FString                 Target                         (Parm, NeedCtorLink)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AAccessControl::GetControllerFromString(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetControllerFromString");

	AAccessControl_GetControllerFromString_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.RequiresPassword
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RequiresPassword");

	AAccessControl_RequiresPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SetGamePassword
// (Defined, Public)
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)

void AAccessControl::SetGamePassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetGamePassword");

	AAccessControl_SetGamePassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.SetAdminPassword
// (Defined, Public)
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::SetAdminPassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminPassword");

	AAccessControl_SetAdminPassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsAdmin
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::IsAdmin(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsAdmin");

	AAccessControl_IsAdmin_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Admin.ServerSwitch
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void AAdmin::ServerSwitch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerSwitch");

	AAdmin_ServerSwitch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Switch
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void AAdmin::Switch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Switch");

	AAdmin_Switch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerRestartMap
// (Defined, Net, NetReliable, Public, NetServer)

void AAdmin::ServerRestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerRestartMap");

	AAdmin_ServerRestartMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.RestartMap
// (Defined, Exec, Public)

void AAdmin::RestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.RestartMap");

	AAdmin_RestartMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PlayerList
// (Defined, Exec, Public)

void AAdmin::PlayerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PlayerList");

	AAdmin_PlayerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKick
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::ServerKick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKick");

	AAdmin_ServerKick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Kick
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Kick");

	AAdmin_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKickBan
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::ServerKickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKickBan");

	AAdmin_ServerKickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.KickBan
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAdmin::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.KickBan");

	AAdmin_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerAdmin
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void AAdmin::ServerAdmin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerAdmin");

	AAdmin_ServerAdmin_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Admin
// (Defined, Exec, Public)
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void AAdmin::Admin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Admin");

	AAdmin_Admin_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AAdmin::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PostBeginPlay");

	AAdmin_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.ListFileLocker
// (Public)
// Parameters:
// TArray<struct FOnlineFileLockerFileInfo> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FOnlineFileLockerFileInfo> UOnlineFileLockerInterface::ListFileLocker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ListFileLocker");

	UOnlineFileLockerInterface_ListFileLocker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineFileLockerInterface.ClearOnDeleteFileFromLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         DeleteFileFromLockerDelegate   (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::ClearOnDeleteFileFromLockerCompleteDelegate(const struct FScriptDelegate& DeleteFileFromLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ClearOnDeleteFileFromLockerCompleteDelegate");

	UOnlineFileLockerInterface_ClearOnDeleteFileFromLockerCompleteDelegate_Params params;
	params.DeleteFileFromLockerDelegate = DeleteFileFromLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.AddOnDeleteFileFromLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         DeleteFileFromLockerDelegate   (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::AddOnDeleteFileFromLockerCompleteDelegate(const struct FScriptDelegate& DeleteFileFromLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.AddOnDeleteFileFromLockerCompleteDelegate");

	UOnlineFileLockerInterface_AddOnDeleteFileFromLockerCompleteDelegate_Params params;
	params.DeleteFileFromLockerDelegate = DeleteFileFromLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.OnDeleteFileFromLockerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineFileLockerInterface::OnDeleteFileFromLockerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.OnDeleteFileFromLockerComplete");

	UOnlineFileLockerInterface_OnDeleteFileFromLockerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.DeleteFileFromLocker
// (Public, HasOutParms)
// Parameters:
// struct FOnlineFileLockerFile   File                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineFileLockerInterface::DeleteFileFromLocker(struct FOnlineFileLockerFile* File)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.DeleteFileFromLocker");

	UOnlineFileLockerInterface_DeleteFileFromLocker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (File != nullptr)
		*File = params.File;

	return params.ReturnValue;
}


// Function Engine.OnlineFileLockerInterface.ClearOnWriteFileToLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         WriteFileToLockerDelegate      (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::ClearOnWriteFileToLockerCompleteDelegate(const struct FScriptDelegate& WriteFileToLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ClearOnWriteFileToLockerCompleteDelegate");

	UOnlineFileLockerInterface_ClearOnWriteFileToLockerCompleteDelegate_Params params;
	params.WriteFileToLockerDelegate = WriteFileToLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.AddOnWriteFileToLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         WriteFileToLockerDelegate      (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::AddOnWriteFileToLockerCompleteDelegate(const struct FScriptDelegate& WriteFileToLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.AddOnWriteFileToLockerCompleteDelegate");

	UOnlineFileLockerInterface_AddOnWriteFileToLockerCompleteDelegate_Params params;
	params.WriteFileToLockerDelegate = WriteFileToLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.OnWriteFileToLockerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineFileLockerInterface::OnWriteFileToLockerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.OnWriteFileToLockerComplete");

	UOnlineFileLockerInterface_OnWriteFileToLockerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.WriteFileToLocker
// (Public, HasOutParms)
// Parameters:
// struct FOnlineFileLockerFile   File                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineFileLockerInterface::WriteFileToLocker(struct FOnlineFileLockerFile* File)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.WriteFileToLocker");

	UOnlineFileLockerInterface_WriteFileToLocker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (File != nullptr)
		*File = params.File;

	return params.ReturnValue;
}


// Function Engine.OnlineFileLockerInterface.ClearOnReadFileFromLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadFileFromLockerDelegate     (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::ClearOnReadFileFromLockerCompleteDelegate(const struct FScriptDelegate& ReadFileFromLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ClearOnReadFileFromLockerCompleteDelegate");

	UOnlineFileLockerInterface_ClearOnReadFileFromLockerCompleteDelegate_Params params;
	params.ReadFileFromLockerDelegate = ReadFileFromLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.AddOnReadFileFromLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadFileFromLockerDelegate     (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::AddOnReadFileFromLockerCompleteDelegate(const struct FScriptDelegate& ReadFileFromLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.AddOnReadFileFromLockerCompleteDelegate");

	UOnlineFileLockerInterface_AddOnReadFileFromLockerCompleteDelegate_Params params;
	params.ReadFileFromLockerDelegate = ReadFileFromLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.OnReadFileFromLockerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineFileLockerInterface::OnReadFileFromLockerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.OnReadFileFromLockerComplete");

	UOnlineFileLockerInterface_OnReadFileFromLockerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.ReadFileFromLocker
// (Public, HasOutParms)
// Parameters:
// struct FOnlineFileLockerFile   File                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineFileLockerInterface::ReadFileFromLocker(struct FOnlineFileLockerFile* File)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ReadFileFromLocker");

	UOnlineFileLockerInterface_ReadFileFromLocker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (File != nullptr)
		*File = params.File;

	return params.ReturnValue;
}


// Function Engine.OnlineFileLockerInterface.ClearOnFetchLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FetchLockerDelegate            (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::ClearOnFetchLockerCompleteDelegate(const struct FScriptDelegate& FetchLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.ClearOnFetchLockerCompleteDelegate");

	UOnlineFileLockerInterface_ClearOnFetchLockerCompleteDelegate_Params params;
	params.FetchLockerDelegate = FetchLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.AddOnFetchLockerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FetchLockerDelegate            (Parm, NeedCtorLink)

void UOnlineFileLockerInterface::AddOnFetchLockerCompleteDelegate(const struct FScriptDelegate& FetchLockerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.AddOnFetchLockerCompleteDelegate");

	UOnlineFileLockerInterface_AddOnFetchLockerCompleteDelegate_Params params;
	params.FetchLockerDelegate = FetchLockerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.OnFetchLockerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineFileLockerInterface::OnFetchLockerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.OnFetchLockerComplete");

	UOnlineFileLockerInterface_OnFetchLockerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineFileLockerInterface.FetchLocker
// (Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineFileLockerInterface::FetchLocker(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineFileLockerInterface.FetchLocker");

	UOnlineFileLockerInterface_FetchLocker_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayGroupInterface.LeaveGroupGame
// (Public)

void UOnlinePlayGroupInterface::LeaveGroupGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.LeaveGroupGame");

	UOnlinePlayGroupInterface_LeaveGroupGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupGameLeaveDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupGameLeaveDelegate   (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupGameLeaveDelegate(const struct FScriptDelegate& OnPlayGroupGameLeaveDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupGameLeaveDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupGameLeaveDelegate_Params params;
	params.OnPlayGroupGameLeaveDelegate = OnPlayGroupGameLeaveDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupGameLeaveDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupGameLeaveDelegate   (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupGameLeaveDelegate(const struct FScriptDelegate& OnPlayGroupGameLeaveDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupGameLeaveDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupGameLeaveDelegate_Params params;
	params.OnPlayGroupGameLeaveDelegate = OnPlayGroupGameLeaveDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupGameLeave
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupGameLeave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupGameLeave");

	UOnlinePlayGroupInterface_OnPlayGroupGameLeave_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.JoinGroupGame
// (Public)

void UOnlinePlayGroupInterface::JoinGroupGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.JoinGroupGame");

	UOnlinePlayGroupInterface_JoinGroupGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupGameJoinedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupGameJoinedDelegate  (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupGameJoinedDelegate(const struct FScriptDelegate& OnPlayGroupGameJoinedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupGameJoinedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupGameJoinedDelegate_Params params;
	params.OnPlayGroupGameJoinedDelegate = OnPlayGroupGameJoinedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupGameJoinedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupGameJoinedDelegate  (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupGameJoinedDelegate(const struct FScriptDelegate& OnPlayGroupGameJoinedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupGameJoinedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupGameJoinedDelegate_Params params;
	params.OnPlayGroupGameJoinedDelegate = OnPlayGroupGameJoinedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupGameJoined
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupGameJoined()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupGameJoined");

	UOnlinePlayGroupInterface_OnPlayGroupGameJoined_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupOwnerTransitionFinishDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupOwnerTransitionFinishDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupOwnerTransitionFinishDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionFinishDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupOwnerTransitionFinishDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupOwnerTransitionFinishDelegate_Params params;
	params.OnPlayGroupOwnerTransitionFinishDelegate = OnPlayGroupOwnerTransitionFinishDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupOwnerTransitionFinishDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupOwnerTransitionFinishDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupOwnerTransitionFinishDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionFinishDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupOwnerTransitionFinishDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupOwnerTransitionFinishDelegate_Params params;
	params.OnPlayGroupOwnerTransitionFinishDelegate = OnPlayGroupOwnerTransitionFinishDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupOwnerTransitionFinish
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupOwnerTransitionFinish()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupOwnerTransitionFinish");

	UOnlinePlayGroupInterface_OnPlayGroupOwnerTransitionFinish_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupOwnerTransitionStartDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupOwnerTransitionStartDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupOwnerTransitionStartDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionStartDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupOwnerTransitionStartDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupOwnerTransitionStartDelegate_Params params;
	params.OnPlayGroupOwnerTransitionStartDelegate = OnPlayGroupOwnerTransitionStartDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupOwnerTransitionStartDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupOwnerTransitionStartDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupOwnerTransitionStartDelegate(const struct FScriptDelegate& OnPlayGroupOwnerTransitionStartDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupOwnerTransitionStartDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupOwnerTransitionStartDelegate_Params params;
	params.OnPlayGroupOwnerTransitionStartDelegate = OnPlayGroupOwnerTransitionStartDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupOwnerTransitionStart
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupOwnerTransitionStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupOwnerTransitionStart");

	UOnlinePlayGroupInterface_OnPlayGroupOwnerTransitionStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.TransferOwnerShipAsync
// (Public)
// Parameters:
// struct FUniqueNetId            NewOwnerId                     (Parm)

void UOnlinePlayGroupInterface::TransferOwnerShipAsync(const struct FUniqueNetId& NewOwnerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.TransferOwnerShipAsync");

	UOnlinePlayGroupInterface_TransferOwnerShipAsync_Params params;
	params.NewOwnerId = NewOwnerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupMemberLeaveDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupMemberLeaveDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupMemberLeaveDelegate(const struct FScriptDelegate& OnPlayGroupMemberLeaveDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupMemberLeaveDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupMemberLeaveDelegate_Params params;
	params.OnPlayGroupMemberLeaveDelegate = OnPlayGroupMemberLeaveDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupMemberLeaveDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupMemberLeaveDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupMemberLeaveDelegate(const struct FScriptDelegate& OnPlayGroupMemberLeaveDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupMemberLeaveDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupMemberLeaveDelegate_Params params;
	params.OnPlayGroupMemberLeaveDelegate = OnPlayGroupMemberLeaveDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupMemberLeave
// (Public, Delegate)
// Parameters:
// struct FUniqueNetId            UserId                         (Parm)
// TEnumAsByte<EPlayGroupLeaveReason> Reason                         (Parm)

void UOnlinePlayGroupInterface::OnPlayGroupMemberLeave(const struct FUniqueNetId& UserId, TEnumAsByte<EPlayGroupLeaveReason> Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupMemberLeave");

	UOnlinePlayGroupInterface_OnPlayGroupMemberLeave_Params params;
	params.UserId = UserId;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearLeavePlayGroupCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnLeavePlayGroupCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearLeavePlayGroupCompleteDelegate(const struct FScriptDelegate& OnLeavePlayGroupCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearLeavePlayGroupCompleteDelegate");

	UOnlinePlayGroupInterface_ClearLeavePlayGroupCompleteDelegate_Params params;
	params.OnLeavePlayGroupCompleteDelegate = OnLeavePlayGroupCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddLeavePlayGroupCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnLeavePlayGroupCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddLeavePlayGroupCompleteDelegate(const struct FScriptDelegate& OnLeavePlayGroupCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddLeavePlayGroupCompleteDelegate");

	UOnlinePlayGroupInterface_AddLeavePlayGroupCompleteDelegate_Params params;
	params.OnLeavePlayGroupCompleteDelegate = OnLeavePlayGroupCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnLeavePlayGroupComplete
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnLeavePlayGroupComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnLeavePlayGroupComplete");

	UOnlinePlayGroupInterface_OnLeavePlayGroupComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.LeavePlayGroupAsync
// (Public)

void UOnlinePlayGroupInterface::LeavePlayGroupAsync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.LeavePlayGroupAsync");

	UOnlinePlayGroupInterface_LeavePlayGroupAsync_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupKickedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupKickedDelegate      (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupKickedDelegate(const struct FScriptDelegate& OnPlayGroupKickedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupKickedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupKickedDelegate_Params params;
	params.OnPlayGroupKickedDelegate = OnPlayGroupKickedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupKickedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupKickedDelegate      (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupKickedDelegate(const struct FScriptDelegate& OnPlayGroupKickedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupKickedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupKickedDelegate_Params params;
	params.OnPlayGroupKickedDelegate = OnPlayGroupKickedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupKicked
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupKicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupKicked");

	UOnlinePlayGroupInterface_OnPlayGroupKicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.KickMemberAsync
// (Public)
// Parameters:
// struct FUniqueNetId            UserId                         (Parm)

void UOnlinePlayGroupInterface::KickMemberAsync(const struct FUniqueNetId& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.KickMemberAsync");

	UOnlinePlayGroupInterface_KickMemberAsync_Params params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupDestroyedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupDestroyedDelegate   (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupDestroyedDelegate(const struct FScriptDelegate& OnPlayGroupDestroyedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupDestroyedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupDestroyedDelegate_Params params;
	params.OnPlayGroupDestroyedDelegate = OnPlayGroupDestroyedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupDestroyedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupDestroyedDelegate   (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupDestroyedDelegate(const struct FScriptDelegate& OnPlayGroupDestroyedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupDestroyedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupDestroyedDelegate_Params params;
	params.OnPlayGroupDestroyedDelegate = OnPlayGroupDestroyedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupDestroyed
// (Public, Delegate)

void UOnlinePlayGroupInterface::OnPlayGroupDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupDestroyed");

	UOnlinePlayGroupInterface_OnPlayGroupDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.DestroyPlayGroupAsync
// (Public)

void UOnlinePlayGroupInterface::DestroyPlayGroupAsync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.DestroyPlayGroupAsync");

	UOnlinePlayGroupInterface_DestroyPlayGroupAsync_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupChatMessageReceivedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupChatMessageReceivedDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupChatMessageReceivedDelegate(const struct FScriptDelegate& OnPlayGroupChatMessageReceivedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupChatMessageReceivedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupChatMessageReceivedDelegate_Params params;
	params.OnPlayGroupChatMessageReceivedDelegate = OnPlayGroupChatMessageReceivedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupChatMessageReceivedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupChatMessageReceivedDelegate (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupChatMessageReceivedDelegate(const struct FScriptDelegate& OnPlayGroupChatMessageReceivedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupChatMessageReceivedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupChatMessageReceivedDelegate_Params params;
	params.OnPlayGroupChatMessageReceivedDelegate = OnPlayGroupChatMessageReceivedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupChatMessageReceived
// (Public, Delegate)
// Parameters:
// struct FUniqueNetId            SenderId                       (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::OnPlayGroupChatMessageReceived(const struct FUniqueNetId& SenderId, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupChatMessageReceived");

	UOnlinePlayGroupInterface_OnPlayGroupChatMessageReceived_Params params;
	params.SenderId = SenderId;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.BroadCastChatMessageAsync
// (Public)
// Parameters:
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::BroadCastChatMessageAsync(const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.BroadCastChatMessageAsync");

	UOnlinePlayGroupInterface_BroadCastChatMessageAsync_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupMemberJoinDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupMemberJoinDelegate  (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupMemberJoinDelegate(const struct FScriptDelegate& OnPlayGroupMemberJoinDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupMemberJoinDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupMemberJoinDelegate_Params params;
	params.OnPlayGroupMemberJoinDelegate = OnPlayGroupMemberJoinDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupMemberJoinDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupMemberJoinDelegate  (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupMemberJoinDelegate(const struct FScriptDelegate& OnPlayGroupMemberJoinDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupMemberJoinDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupMemberJoinDelegate_Params params;
	params.OnPlayGroupMemberJoinDelegate = OnPlayGroupMemberJoinDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupMemberJoin
// (Public, Delegate)
// Parameters:
// struct FUniqueNetId            NewMemberUserId                (Parm)

void UOnlinePlayGroupInterface::OnPlayGroupMemberJoin(const struct FUniqueNetId& NewMemberUserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupMemberJoin");

	UOnlinePlayGroupInterface_OnPlayGroupMemberJoin_Params params;
	params.NewMemberUserId = NewMemberUserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AcceptInviteToPlayGroup
// (Public)
// Parameters:
// struct FUniqueNetId            RequestingUserId               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayGroupInterface::AcceptInviteToPlayGroup(const struct FUniqueNetId& RequestingUserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AcceptInviteToPlayGroup");

	UOnlinePlayGroupInterface_AcceptInviteToPlayGroup_Params params;
	params.RequestingUserId = RequestingUserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayGroupInterface.ClearOnInviteToPlayGroupReceivedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnInviteToPlayGroupReceived    (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearOnInviteToPlayGroupReceivedDelegate(const struct FScriptDelegate& OnInviteToPlayGroupReceived)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearOnInviteToPlayGroupReceivedDelegate");

	UOnlinePlayGroupInterface_ClearOnInviteToPlayGroupReceivedDelegate_Params params;
	params.OnInviteToPlayGroupReceived = OnInviteToPlayGroupReceived;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddOnInviteToPlayGroupReceivedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnInviteToPlayGroupReceived    (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddOnInviteToPlayGroupReceivedDelegate(const struct FScriptDelegate& OnInviteToPlayGroupReceived)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddOnInviteToPlayGroupReceivedDelegate");

	UOnlinePlayGroupInterface_AddOnInviteToPlayGroupReceivedDelegate_Params params;
	params.OnInviteToPlayGroupReceived = OnInviteToPlayGroupReceived;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnInviteToPlayGroupReceived
// (Public, Delegate)
// Parameters:
// struct FUniqueNetId            RequestingUserId               (Parm)

void UOnlinePlayGroupInterface::OnInviteToPlayGroupReceived(const struct FUniqueNetId& RequestingUserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnInviteToPlayGroupReceived");

	UOnlinePlayGroupInterface_OnInviteToPlayGroupReceived_Params params;
	params.RequestingUserId = RequestingUserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearOnInviteToPlayGroupCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnInviteToPlayGroupComplete    (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearOnInviteToPlayGroupCompleteDelegate(const struct FScriptDelegate& OnInviteToPlayGroupComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearOnInviteToPlayGroupCompleteDelegate");

	UOnlinePlayGroupInterface_ClearOnInviteToPlayGroupCompleteDelegate_Params params;
	params.OnInviteToPlayGroupComplete = OnInviteToPlayGroupComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddOnInviteToPlayGroupCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnInviteToPlayGroupComplete    (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddOnInviteToPlayGroupCompleteDelegate(const struct FScriptDelegate& OnInviteToPlayGroupComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddOnInviteToPlayGroupCompleteDelegate");

	UOnlinePlayGroupInterface_AddOnInviteToPlayGroupCompleteDelegate_Params params;
	params.OnInviteToPlayGroupComplete = OnInviteToPlayGroupComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnInviteToPlayGroupComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayGroupInterface::OnInviteToPlayGroupComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnInviteToPlayGroupComplete");

	UOnlinePlayGroupInterface_OnInviteToPlayGroupComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.InviteToPlayGroupAsync
// (Public)
// Parameters:
// struct FUniqueNetId            UserId                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayGroupInterface::InviteToPlayGroupAsync(const struct FUniqueNetId& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.InviteToPlayGroupAsync");

	UOnlinePlayGroupInterface_InviteToPlayGroupAsync_Params params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupJoinedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupJoinedDelegate      (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupJoinedDelegate(const struct FScriptDelegate& OnPlayGroupJoinedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupJoinedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupJoinedDelegate_Params params;
	params.OnPlayGroupJoinedDelegate = OnPlayGroupJoinedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupJoinedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupJoinedDelegate      (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupJoinedDelegate(const struct FScriptDelegate& OnPlayGroupJoinedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupJoinedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupJoinedDelegate_Params params;
	params.OnPlayGroupJoinedDelegate = OnPlayGroupJoinedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupJoined
// (Public, Delegate)
// Parameters:
// bool                           bInOk                          (Parm)

void UOnlinePlayGroupInterface::OnPlayGroupJoined(bool bInOk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupJoined");

	UOnlinePlayGroupInterface_OnPlayGroupJoined_Params params;
	params.bInOk = bInOk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.JoinPlayGroupAsync
// (Public)
// Parameters:
// struct FUniqueNetId            UserId                         (Parm)

void UOnlinePlayGroupInterface::JoinPlayGroupAsync(const struct FUniqueNetId& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.JoinPlayGroupAsync");

	UOnlinePlayGroupInterface_JoinPlayGroupAsync_Params params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.ClearPlayGroupCreatedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupCreatedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::ClearPlayGroupCreatedDelegate(const struct FScriptDelegate& OnPlayGroupCreatedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.ClearPlayGroupCreatedDelegate");

	UOnlinePlayGroupInterface_ClearPlayGroupCreatedDelegate_Params params;
	params.OnPlayGroupCreatedDelegate = OnPlayGroupCreatedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.AddPlayGroupCreatedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         OnPlayGroupCreatedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayGroupInterface::AddPlayGroupCreatedDelegate(const struct FScriptDelegate& OnPlayGroupCreatedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.AddPlayGroupCreatedDelegate");

	UOnlinePlayGroupInterface_AddPlayGroupCreatedDelegate_Params params;
	params.OnPlayGroupCreatedDelegate = OnPlayGroupCreatedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.OnPlayGroupCreated
// (Public, Delegate)
// Parameters:
// bool                           bInOk                          (Parm)

void UOnlinePlayGroupInterface::OnPlayGroupCreated(bool bInOk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.OnPlayGroupCreated");

	UOnlinePlayGroupInterface_OnPlayGroupCreated_Params params;
	params.bInOk = bInOk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.CreatePlayGroupAsync
// (Public)
// Parameters:
// struct FPlayGroupCreateParams  Params                         (Parm)

void UOnlinePlayGroupInterface::CreatePlayGroupAsync(const struct FPlayGroupCreateParams& Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.CreatePlayGroupAsync");

	UOnlinePlayGroupInterface_CreatePlayGroupAsync_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayGroupInterface.GetMyPlayGroupList
// (Public)
// Parameters:
// TArray<struct FPlayGroupListEntry> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FPlayGroupListEntry> UOnlinePlayGroupInterface::GetMyPlayGroupList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.GetMyPlayGroupList");

	UOnlinePlayGroupInterface_GetMyPlayGroupList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayGroupInterface.IsPlayGroupOwner
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayGroupInterface::IsPlayGroupOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.IsPlayGroupOwner");

	UOnlinePlayGroupInterface_IsPlayGroupOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayGroupInterface.IsInPlayGroup
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayGroupInterface::IsInPlayGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayGroupInterface.IsInPlayGroup");

	UOnlinePlayGroupInterface_IsInPlayGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.GetContentAnnouncements
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineNewsInterface::GetContentAnnouncements(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.GetContentAnnouncements");

	UOnlineNewsInterface_GetContentAnnouncements_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.ClearReadContentAnnouncementsCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadContentAnnouncementsDelegate (Parm, NeedCtorLink)

void UOnlineNewsInterface::ClearReadContentAnnouncementsCompletedDelegate(const struct FScriptDelegate& ReadContentAnnouncementsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ClearReadContentAnnouncementsCompletedDelegate");

	UOnlineNewsInterface_ClearReadContentAnnouncementsCompletedDelegate_Params params;
	params.ReadContentAnnouncementsDelegate = ReadContentAnnouncementsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.AddReadContentAnnouncementsCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadContentAnnouncementsDelegate (Parm, NeedCtorLink)

void UOnlineNewsInterface::AddReadContentAnnouncementsCompletedDelegate(const struct FScriptDelegate& ReadContentAnnouncementsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.AddReadContentAnnouncementsCompletedDelegate");

	UOnlineNewsInterface_AddReadContentAnnouncementsCompletedDelegate_Params params;
	params.ReadContentAnnouncementsDelegate = ReadContentAnnouncementsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.OnReadContentAnnouncementsCompleted
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineNewsInterface::OnReadContentAnnouncementsCompleted(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.OnReadContentAnnouncementsCompleted");

	UOnlineNewsInterface_OnReadContentAnnouncementsCompleted_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.ReadContentAnnouncements
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineNewsInterface::ReadContentAnnouncements(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ReadContentAnnouncements");

	UOnlineNewsInterface_ReadContentAnnouncements_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.GetGameNews
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineNewsInterface::GetGameNews(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.GetGameNews");

	UOnlineNewsInterface_GetGameNews_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.ClearReadGameNewsCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadGameNewsDelegate           (Parm, NeedCtorLink)

void UOnlineNewsInterface::ClearReadGameNewsCompletedDelegate(const struct FScriptDelegate& ReadGameNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ClearReadGameNewsCompletedDelegate");

	UOnlineNewsInterface_ClearReadGameNewsCompletedDelegate_Params params;
	params.ReadGameNewsDelegate = ReadGameNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.AddReadGameNewsCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadGameNewsDelegate           (Parm, NeedCtorLink)

void UOnlineNewsInterface::AddReadGameNewsCompletedDelegate(const struct FScriptDelegate& ReadGameNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.AddReadGameNewsCompletedDelegate");

	UOnlineNewsInterface_AddReadGameNewsCompletedDelegate_Params params;
	params.ReadGameNewsDelegate = ReadGameNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.OnReadGameNewsCompleted
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineNewsInterface::OnReadGameNewsCompleted(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.OnReadGameNewsCompleted");

	UOnlineNewsInterface_OnReadGameNewsCompleted_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.ReadGameNews
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineNewsInterface::ReadGameNews(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ReadGameNews");

	UOnlineNewsInterface_ReadGameNews_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.RegisterStatGuid
// (Public, HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// struct FString                 ClientStatGuid                 (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::RegisterStatGuid(const struct FUniqueNetId& PlayerId, struct FString* ClientStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterStatGuid");

	UOnlineStatsInterface_RegisterStatGuid_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClientStatGuid != nullptr)
		*ClientStatGuid = params.ClientStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetClientStatGuid
// (Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineStatsInterface::GetClientStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetClientStatGuid");

	UOnlineStatsInterface_GetClientStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate");

	UOnlineStatsInterface_ClearRegisterHostStatGuidCompleteDelegateDelegate_Params params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate");

	UOnlineStatsInterface_AddRegisterHostStatGuidCompleteDelegate_Params params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete");

	UOnlineStatsInterface_OnRegisterHostStatGuidComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// (Public, HasOutParms)
// Parameters:
// struct FString                 HostStatGuid                   (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::RegisterHostStatGuid(struct FString* HostStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterHostStatGuid");

	UOnlineStatsInterface_RegisterHostStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HostStatGuid != nullptr)
		*HostStatGuid = params.HostStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetHostStatGuid
// (Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlineStatsInterface::GetHostStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetHostStatGuid");

	UOnlineStatsInterface_GetHostStatGuid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// (Public, HasOutParms)
// Parameters:
// TArray<struct FOnlinePlayerScore> PlayerScores                   (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::WriteOnlinePlayerScores(TArray<struct FOnlinePlayerScore>* PlayerScores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores");

	UOnlineStatsInterface_WriteOnlinePlayerScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerScores != nullptr)
		*PlayerScores = params.PlayerScores;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearFlushOnlineStatsCompleteDelegate_Params params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddFlushOnlineStatsCompleteDelegate_Params params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnFlushOnlineStatsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete");

	UOnlineStatsInterface_OnFlushOnlineStatsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.FlushOnlineStats
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::FlushOnlineStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FlushOnlineStats");

	UOnlineStatsInterface_FlushOnlineStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlineStats
// (Public)
// Parameters:
// struct FUniqueNetId            Player                         (Parm)
// class UOnlineStatsWrite*       StatsWrite                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::WriteOnlineStats(const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlineStats");

	UOnlineStatsInterface_WriteOnlineStats_Params params;
	params.Player = Player;
	params.StatsWrite = StatsWrite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.FreeStats
// (Public)
// Parameters:
// class UOnlineStatsRead*        StatsRead                      (Parm)

void UOnlineStatsInterface::FreeStats(class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FreeStats");

	UOnlineStatsInterface_FreeStats_Params params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineStatsInterface::OnReadOnlineStatsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete");

	UOnlineStatsInterface_OnReadOnlineStatsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_ClearReadOnlineStatsCompleteDelegate_Params params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (Parm, NeedCtorLink)

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate");

	UOnlineStatsInterface_AddReadOnlineStatsCompleteDelegate_Params params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// int                            NumRows                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer");

	UOnlineStatsInterface_ReadOnlineStatsByRankAroundPlayer_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;
	params.NumRows = NumRows;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// (Public)
// Parameters:
// class UOnlineStatsRead*        StatsRead                      (Parm)
// int                            StartIndex                     (OptionalParm, Parm)
// int                            NumToRead                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank");

	UOnlineStatsInterface_ReadOnlineStatsByRank_Params params;
	params.StatsRead = StatsRead;
	params.StartIndex = StartIndex;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends");

	UOnlineStatsInterface_ReadOnlineStatsForFriends_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStats
// (Public, HasOutParms)
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// class UOnlineStatsRead*        StatsRead                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStats(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStats");

	UOnlineStatsInterface_ReadOnlineStats_Params params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnmuteAll
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnmuteAll(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteAll");

	UOnlineVoiceInterface_UnmuteAll_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteAll
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           bAllowFriends                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::MuteAll(unsigned char LocalUserNum, bool bAllowFriends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteAll");

	UOnlineVoiceInterface_MuteAll_Params params;
	params.LocalUserNum = LocalUserNum;
	params.bAllowFriends = bAllowFriends;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class USpeechRecognition*      SpeechRecogObj                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject");

	UOnlineVoiceInterface_SetSpeechRecognitionObject_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SpeechRecogObj = SpeechRecogObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SelectVocabulary
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            VocabularyId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SelectVocabulary(unsigned char LocalUserNum, int VocabularyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SelectVocabulary");

	UOnlineVoiceInterface_SelectVocabulary_Params params;
	params.LocalUserNum = LocalUserNum;
	params.VocabularyId = VocabularyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         RecognitionDelegate            (Parm, NeedCtorLink)

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate");

	UOnlineVoiceInterface_ClearRecognitionCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         RecognitionDelegate            (Parm, NeedCtorLink)

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate");

	UOnlineVoiceInterface_AddRecognitionCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// (Public, Delegate)

void UOnlineVoiceInterface::OnRecognitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnRecognitionComplete");

	UOnlineVoiceInterface_OnRecognitionComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FSpeechRecognizedWord> Words                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.GetRecognitionResults");

	UOnlineVoiceInterface_GetRecognitionResults_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Words != nullptr)
		*Words = params.Words;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::StopSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopSpeechRecognition");

	UOnlineVoiceInterface_StopSpeechRecognition_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::StartSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartSpeechRecognition");

	UOnlineVoiceInterface_StartSpeechRecognition_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlineVoiceInterface::StopNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopNetworkedVoice");

	UOnlineVoiceInterface_StopNetworkedVoice_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlineVoiceInterface::StartNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartNetworkedVoice");

	UOnlineVoiceInterface_StartNetworkedVoice_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (Parm, NeedCtorLink)

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate");

	UOnlineVoiceInterface_ClearPlayerTalkingDelegate_Params params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (Parm, NeedCtorLink)

void UOnlineVoiceInterface::AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate");

	UOnlineVoiceInterface_AddPlayerTalkingDelegate_Params params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnPlayerTalking
// (Public, Delegate)
// Parameters:
// struct FUniqueNetId            Player                         (Parm)

void UOnlineVoiceInterface::OnPlayerTalking(const struct FUniqueNetId& Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnPlayerTalking");

	UOnlineVoiceInterface_OnPlayerTalking_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker");

	UOnlineVoiceInterface_UnmuteRemoteTalker_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteRemoteTalker");

	UOnlineVoiceInterface_MuteRemoteTalker_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// int                            Priority                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority");

	UOnlineVoiceInterface_SetRemoteTalkerPriority_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsHeadsetPresent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsHeadsetPresent");

	UOnlineVoiceInterface_IsHeadsetPresent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsRemotePlayerTalking(const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking");

	UOnlineVoiceInterface_IsRemotePlayerTalking_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::IsLocalPlayerTalking(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking");

	UOnlineVoiceInterface_IsLocalPlayerTalking_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnregisterRemoteTalker(const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker");

	UOnlineVoiceInterface_UnregisterRemoteTalker_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::RegisterRemoteTalker(const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterRemoteTalker");

	UOnlineVoiceInterface_RegisterRemoteTalker_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::UnregisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterLocalTalker");

	UOnlineVoiceInterface_UnregisterLocalTalker_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineVoiceInterface::RegisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterLocalTalker");

	UOnlineVoiceInterface_RegisterLocalTalker_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            NewDownloads                   (Parm, OutParm)
// int                            TotalDownloads                 (Parm, OutParm)

void UOnlineContentInterface::GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetAvailableDownloadCounts");

	UOnlineContentInterface_GetAvailableDownloadCounts_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewDownloads != nullptr)
		*NewDownloads = params.NewDownloads;
	if (TotalDownloads != nullptr)
		*TotalDownloads = params.TotalDownloads;
}


// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete");

	UOnlineContentInterface_ClearQueryAvailableDownloadsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (Parm, NeedCtorLink)

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete");

	UOnlineContentInterface_AddQueryAvailableDownloadsComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete");

	UOnlineContentInterface_OnQueryAvailableDownloadsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::QueryAvailableDownloads(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.QueryAvailableDownloads");

	UOnlineContentInterface_QueryAvailableDownloads_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetContentList
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlineContent>  ContentList                    (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlineContentInterface::GetContentList(unsigned char LocalUserNum, TArray<struct FOnlineContent>* ContentList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetContentList");

	UOnlineContentInterface_GetContentList_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ReadContentList
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineContentInterface::ReadContentList(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadContentList");

	UOnlineContentInterface_ReadContentList_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadContentComplete
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (Parm, NeedCtorLink)

void UOnlineContentInterface::ClearReadContentComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadContentComplete");

	UOnlineContentInterface_ClearReadContentComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadContentComplete
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (Parm, NeedCtorLink)

void UOnlineContentInterface::AddReadContentComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadContentComplete");

	UOnlineContentInterface_AddReadContentComplete_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadContentComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineContentInterface::OnReadContentComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadContentComplete");

	UOnlineContentInterface_OnReadContentComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ContentDelegate                (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlineContentInterface::ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentChangeDelegate");

	UOnlineContentInterface_ClearContentChangeDelegate_Params params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ContentDelegate                (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlineContentInterface::AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddContentChangeDelegate");

	UOnlineContentInterface_AddContentChangeDelegate_Params params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnContentChange
// (Public, Delegate)

void UOnlineContentInterface::OnContentChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnContentChange");

	UOnlineContentInterface_OnContentChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RecalculateSkillRating
// (Public, HasOutParms)
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RecalculateSkillRating(TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RecalculateSkillRating");

	UOnlineGameInterface_RecalculateSkillRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.AcceptGameInvite
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::AcceptGameInvite(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AcceptGameInvite");

	UOnlineGameInterface_AcceptGameInvite_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// (Public, Delegate)
// Parameters:
// class UOnlineGameSettings*     GameInviteSettings             (Parm)

void UOnlineGameInterface::OnGameInviteAccepted(class UOnlineGameSettings* GameInviteSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnGameInviteAccepted");

	UOnlineGameInterface_OnGameInviteAccepted_Params params;
	params.GameInviteSettings = GameInviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate");

	UOnlineGameInterface_ClearGameInviteAcceptedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (Parm, NeedCtorLink)

void UOnlineGameInterface::AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate");

	UOnlineGameInterface_AddGameInviteAcceptedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// (Public)
// Parameters:
// TArray<struct FOnlineArbitrationRegistrant> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FOnlineArbitrationRegistrant> UOnlineGameInterface::GetArbitratedPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetArbitratedPlayers");

	UOnlineGameInterface_GetArbitratedPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_ClearArbitrationRegistrationCompleteDelegate_Params params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate");

	UOnlineGameInterface_AddArbitrationRegistrationCompleteDelegate_Params params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnArbitrationRegistrationComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete");

	UOnlineGameInterface_OnArbitrationRegistrationComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterForArbitration
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RegisterForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterForArbitration");

	UOnlineGameInterface_RegisterForArbitration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetOnlineGameState
// (Public)
// Parameters:
// TEnumAsByte<EOnlineGameState>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineGameState> UOnlineGameInterface::GetOnlineGameState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetOnlineGameState");

	UOnlineGameInterface_GetOnlineGameState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearEndOnlineGameCompleteDelegate_Params params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (Parm, NeedCtorLink)

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddEndOnlineGameCompleteDelegate_Params params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnEndOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnEndOnlineGameComplete");

	UOnlineGameInterface_OnEndOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.EndOnlineGame
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::EndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.EndOnlineGame");

	UOnlineGameInterface_EndOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearStartOnlineGameCompleteDelegate_Params params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddStartOnlineGameCompleteDelegate_Params params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnStartOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnStartOnlineGameComplete");

	UOnlineGameInterface_OnStartOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.StartOnlineGame
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::StartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.StartOnlineGame");

	UOnlineGameInterface_StartOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearUnregisterPlayerCompleteDelegate_Params params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddUnregisterPlayerCompleteDelegate_Params params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnUnregisterPlayerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete");

	UOnlineGameInterface_OnUnregisterPlayerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.UnregisterPlayer
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::UnregisterPlayer(const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayer");

	UOnlineGameInterface_UnregisterPlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_ClearRegisterPlayerCompleteDelegate_Params params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate");

	UOnlineGameInterface_AddRegisterPlayerCompleteDelegate_Params params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnRegisterPlayerComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRegisterPlayerComplete");

	UOnlineGameInterface_OnRegisterPlayerComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterPlayer
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           bWasInvited                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::RegisterPlayer(const struct FUniqueNetId& PlayerId, bool bWasInvited)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayer");

	UOnlineGameInterface_RegisterPlayer_Params params;
	params.PlayerId = PlayerId;
	params.bWasInvited = bWasInvited;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetResolvedConnectString
// (Public, HasOutParms)
// Parameters:
// struct FString                 ConnectInfo                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::GetResolvedConnectString(struct FString* ConnectInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetResolvedConnectString");

	UOnlineGameInterface_GetResolvedConnectString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConnectInfo != nullptr)
		*ConnectInfo = params.ConnectInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearJoinOnlineGameCompleteDelegate_Params params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddJoinOnlineGameCompleteDelegate_Params params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnJoinOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete");

	UOnlineGameInterface_OnJoinOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.JoinOnlineGame
// (Public, HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (Parm)
// struct FOnlineGameSearchResult DesiredGame                    (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::JoinOnlineGame(unsigned char PlayerNum, struct FOnlineGameSearchResult* DesiredGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinOnlineGame");

	UOnlineGameInterface_JoinOnlineGame_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.FreeSearchResults
// (Public)
// Parameters:
// class UOnlineGameSearch*       Search                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::FreeSearchResults(class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FreeSearchResults");

	UOnlineGameInterface_FreeSearchResults_Params params;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSearch
// (Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSearch");

	UOnlineGameInterface_GetGameSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearCancelFindOnlineGamesCompleteDelegate_Params params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddCancelFindOnlineGamesCompleteDelegate_Params params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete");

	UOnlineGameInterface_OnCancelFindOnlineGamesComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::CancelFindOnlineGames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CancelFindOnlineGames");

	UOnlineGameInterface_CancelFindOnlineGames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_ClearFindOnlineGamesCompleteDelegate_Params params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate");

	UOnlineGameInterface_AddFindOnlineGamesCompleteDelegate_Params params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete");

	UOnlineGameInterface_OnFindOnlineGamesComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.FindOnlineGames
// (Public)
// Parameters:
// unsigned char                  SearchingPlayerNum             (Parm)
// class UOnlineGameSearch*       SearchSettings                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FindOnlineGames");

	UOnlineGameInterface_FindOnlineGames_Params params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearDestroyOnlineGameCompleteDelegate_Params params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddDestroyOnlineGameCompleteDelegate_Params params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnDestroyOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete");

	UOnlineGameInterface_OnDestroyOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.DestroyOnlineGame
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::DestroyOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.DestroyOnlineGame");

	UOnlineGameInterface_DestroyOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSettings
// (Public)
// Parameters:
// class UOnlineGameSettings*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSettings");

	UOnlineGameInterface_GetGameSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.UpdateOnlineGame
// (Public)
// Parameters:
// class UOnlineGameSettings*     UpdatedGameSettings            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::UpdateOnlineGame(class UOnlineGameSettings* UpdatedGameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UpdateOnlineGame");

	UOnlineGameInterface_UpdateOnlineGame_Params params;
	params.UpdatedGameSettings = UpdatedGameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_ClearCreateOnlineGameCompleteDelegate_Params params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate");

	UOnlineGameInterface_AddCreateOnlineGameCompleteDelegate_Params params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlineGameInterface::OnCreateOnlineGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete");

	UOnlineGameInterface_OnCreateOnlineGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CreateOnlineGame
// (Public)
// Parameters:
// unsigned char                  HostingPlayerNum               (Parm)
// class UOnlineGameSettings*     NewGameSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineGameInterface::CreateOnlineGame(unsigned char HostingPlayerNum, class UOnlineGameSettings* NewGameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CreateOnlineGame");

	UOnlineGameInterface_CreateOnlineGame_Params params;
	params.HostingPlayerNum = HostingPlayerNum;
	params.NewGameSettings = NewGameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate");

	UOnlineSystemInterface_ClearStorageDeviceChangeDelegate_Params params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate");

	UOnlineSystemInterface_AddStorageDeviceChangeDelegate_Params params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// (Public, Delegate)

void UOnlineSystemInterface::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnStorageDeviceChange");

	UOnlineSystemInterface_OnStorageDeviceChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNATType
// (Public)
// Parameters:
// TEnumAsByte<ENATType>          ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENATType> UOnlineSystemInterface::GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNATType");

	UOnlineSystemInterface_GetNATType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate");

	UOnlineSystemInterface_ClearConnectionStatusChangeDelegate_Params params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate");

	UOnlineSystemInterface_AddConnectionStatusChangeDelegate_Params params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// (Public, Delegate)
// Parameters:
// TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus               (Parm)

void UOnlineSystemInterface::OnConnectionStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnConnectionStatusChange");

	UOnlineSystemInterface_OnConnectionStatusChange_Params params;
	params.ConnectionStatus = ConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.IsControllerConnected
// (Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSystemInterface::IsControllerConnected(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.IsControllerConnected");

	UOnlineSystemInterface_IsControllerConnected_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate");

	UOnlineSystemInterface_ClearControllerChangeDelegate_Params params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddControllerChangeDelegate");

	UOnlineSystemInterface_AddControllerChangeDelegate_Params params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnControllerChange
// (Public, Delegate)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bIsConnected                   (Parm)

void UOnlineSystemInterface::OnControllerChange(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnControllerChange");

	UOnlineSystemInterface_OnControllerChange_Params params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// (Public)
// Parameters:
// TEnumAsByte<ENetworkNotificationPosition> NewPos                         (Parm)

void UOnlineSystemInterface::SetNetworkNotificationPosition(TEnumAsByte<ENetworkNotificationPosition> NewPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition");

	UOnlineSystemInterface_SetNetworkNotificationPosition_Params params;
	params.NewPos = NewPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// (Public)
// Parameters:
// TEnumAsByte<ENetworkNotificationPosition> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ENetworkNotificationPosition> UOnlineSystemInterface::GetNetworkNotificationPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition");

	UOnlineSystemInterface_GetNetworkNotificationPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate");

	UOnlineSystemInterface_ClearExternalUIChangeDelegate_Params params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate");

	UOnlineSystemInterface_AddExternalUIChangeDelegate_Params params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.DispatchExternalUIChange
// (Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void UOnlineSystemInterface::DispatchExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.DispatchExternalUIChange");

	UOnlineSystemInterface_DispatchExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnExternalUIChange
// (Public, Delegate)
// Parameters:
// bool                           bIsOpening                     (Parm)

void UOnlineSystemInterface::OnExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnExternalUIChange");

	UOnlineSystemInterface_OnExternalUIChange_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate");

	UOnlineSystemInterface_ClearLinkStatusChangeDelegate_Params params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (Parm, NeedCtorLink)

void UOnlineSystemInterface::AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate");

	UOnlineSystemInterface_AddLinkStatusChangeDelegate_Params params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// (Public, Delegate)
// Parameters:
// bool                           bIsConnected                   (Parm)

void UOnlineSystemInterface::OnLinkStatusChange(bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnLinkStatusChange");

	UOnlineSystemInterface_OnLinkStatusChange_Params params;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.HasLinkConnection
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineSystemInterface::HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.HasLinkConnection");

	UOnlineSystemInterface_HasLinkConnection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowSendMessageUI
// (Public)
// Parameters:
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           bIsFriendRequest               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowSendMessageUI(const struct FUniqueNetId& PlayerId, bool bIsFriendRequest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowSendMessageUI");

	UOnlinePlayerInterfaceEx_ShowSendMessageUI_Params params;
	params.PlayerId = PlayerId;
	params.bIsFriendRequest = bIsFriendRequest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowPlayersUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI");

	UOnlinePlayerInterfaceEx_ShowPlayersUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI");

	UOnlinePlayerInterfaceEx_ShowFriendsInviteUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_ClearProfileDataChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate");

	UOnlinePlayerInterfaceEx_AddProfileDataChangedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// (Public, Delegate)

void UOnlinePlayerInterfaceEx::OnProfileDataChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged");

	UOnlinePlayerInterfaceEx_OnProfileDataChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            PictureId                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture(unsigned char LocalUserNum, int PictureId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture");

	UOnlinePlayerInterfaceEx_UnlockGamerPicture_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PictureId = PictureId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.OnUnlockAchievementComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterfaceEx::OnUnlockAchievementComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnUnlockAchievementComplete");

	UOnlinePlayerInterfaceEx_OnUnlockAchievementComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearUnlockAchievementCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterfaceEx_ClearUnlockAchievementCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddUnlockAchievementCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddUnlockAchievementCompleteDelegate");

	UOnlinePlayerInterfaceEx_AddUnlockAchievementCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            AchievementId                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockAchievement(unsigned char LocalUserNum, int AchievementId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement");

	UOnlinePlayerInterfaceEx_UnlockAchievement_Params params;
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// (Public)
// Parameters:
// int                            DeviceID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::IsDeviceValid(int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid");

	UOnlinePlayerInterfaceEx_IsDeviceValid_Params params;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete");

	UOnlinePlayerInterfaceEx_OnDeviceSelectionComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 DeviceName                     (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults");

	UOnlinePlayerInterfaceEx_GetDeviceSelectionResults_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeviceName != nullptr)
		*DeviceName = params.DeviceName;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         DeviceDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_ClearDeviceSelectionDoneDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         DeviceDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate");

	UOnlinePlayerInterfaceEx_AddDeviceSelectionDoneDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            SizeNeeded                     (Parm)
// bool                           bForceShowUI                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bForceShowUI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI");

	UOnlinePlayerInterfaceEx_ShowDeviceSelectionUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SizeNeeded = SizeNeeded;
	params.bForceShowUI = bForceShowUI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowMembershipMarketplaceUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI");

	UOnlinePlayerInterfaceEx_ShowContentMarketplaceUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviteText                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI");

	UOnlinePlayerInterfaceEx_ShowInviteUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteText = InviteText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI");

	UOnlinePlayerInterfaceEx_ShowAchievementsUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMessagesUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI");

	UOnlinePlayerInterfaceEx_ShowMessagesUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.CancelShowGamerCardUI
// (Public)

void UOnlinePlayerInterfaceEx::CancelShowGamerCardUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.CancelShowGamerCardUI");

	UOnlinePlayerInterfaceEx_CancelShowGamerCardUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnShowGamerCardResult
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterfaceEx::OnShowGamerCardResult(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnShowGamerCardResult");

	UOnlinePlayerInterfaceEx_OnShowGamerCardResult_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearShowGamerCardResultDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         GamerCardDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearShowGamerCardResultDelegate(const struct FScriptDelegate& GamerCardDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearShowGamerCardResultDelegate");

	UOnlinePlayerInterfaceEx_ClearShowGamerCardResultDelegate_Params params;
	params.GamerCardDelegate = GamerCardDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddShowGamerCardResultDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         GamerCardDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddShowGamerCardResultDelegate(const struct FScriptDelegate& GamerCardDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddShowGamerCardResultDelegate");

	UOnlinePlayerInterfaceEx_AddShowGamerCardResultDelegate_Params params;
	params.GamerCardDelegate = GamerCardDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI");

	UOnlinePlayerInterfaceEx_ShowGamerCardUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI");

	UOnlinePlayerInterfaceEx_ShowFeedbackUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetActiveControllerId
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)

void UOnlinePlayerInterface::SetActiveControllerId(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetActiveControllerId");

	UOnlinePlayerInterface_SetActiveControllerId_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.DeleteMessage
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            MessageIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::DeleteMessage(unsigned char LocalUserNum, int MessageIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DeleteMessage");

	UOnlinePlayerInterface_DeleteMessage_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageIndex = MessageIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         MessageDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendMessageReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         MessageDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate");

	UOnlinePlayerInterface_AddFriendMessageReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// (Public, Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            SendingPlayer                  (Parm)
// struct FString                 SendingNick                    (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendMessageReceived");

	UOnlinePlayerInterface_OnFriendMessageReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetFriendMessages
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlineFriendMessage> FriendMessages                 (Parm, OutParm, NeedCtorLink)

void UOnlinePlayerInterface::GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendMessages");

	UOnlinePlayerInterface_GetFriendMessages_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FriendMessages != nullptr)
		*FriendMessages = params.FriendMessages;
}


// Function Engine.OnlinePlayerInterface.GetPlayersList
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlinePlayer>   Players                        (Parm, OutParm, NeedCtorLink)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlinePlayerInterface::GetPlayersList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlinePlayer>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayersList");

	UOnlinePlayerInterface_GetPlayersList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayersCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadPlayersCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayersCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayersCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayersCompleteDelegate");

	UOnlinePlayerInterface_ClearReadPlayersCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayersCompleteDelegate = ReadPlayersCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SetReadPlayersCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadPlayersCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::SetReadPlayersCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayersCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetReadPlayersCompleteDelegate");

	UOnlinePlayerInterface_SetReadPlayersCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayersCompleteDelegate = ReadPlayersCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadPlayersComplete
// (Public, Delegate)

void UOnlinePlayerInterface::OnReadPlayersComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayersComplete");

	UOnlinePlayerInterface_OnReadPlayersComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadPlayersList
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadPlayersList(unsigned char LocalUserNum, int Count, int StartingAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayersList");

	UOnlinePlayerInterface_ReadPlayersList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_ClearJoinFriendGameCompleteDelegate_Params params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate");

	UOnlinePlayerInterface_AddJoinFriendGameCompleteDelegate_Params params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnJoinFriendGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete");

	UOnlinePlayerInterface_OnJoinFriendGameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.JoinFriendGame
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.JoinFriendGame");

	UOnlinePlayerInterface_JoinFriendGame_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate");

	UOnlinePlayerInterface_ClearReceivedGameInviteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate");

	UOnlinePlayerInterface_AddReceivedGameInviteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// (Public, Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 InviterName                    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReceivedGameInvite");

	UOnlinePlayerInterface_OnReceivedGameInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FUniqueNetId>    Friends                        (Parm, NeedCtorLink)
// struct FString                 Text                           (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriends");

	UOnlinePlayerInterface_SendGameInviteToFriends_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friends = Friends;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// struct FString                 Text                           (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriend");

	UOnlinePlayerInterface_SendGameInviteToFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearSendMessageByUsernameDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         SendMessageDelegate            (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearSendMessageByUsernameDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendMessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearSendMessageByUsernameDelegate");

	UOnlinePlayerInterface_ClearSendMessageByUsernameDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendMessageDelegate = SendMessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddSendMessageByUsernameDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         SendMessageDelegate            (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddSendMessageByUsernameDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendMessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddSendMessageByUsernameDelegate");

	UOnlinePlayerInterface_AddSendMessageByUsernameDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SendMessageDelegate = SendMessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnSendMessageByUsername
// (Public, Delegate)
// Parameters:
// bool                           bSuccess                       (Parm)

void UOnlinePlayerInterface::OnSendMessageByUsername(bool bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnSendMessageByUsername");

	UOnlinePlayerInterface_OnSendMessageByUsername_Params params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SendMessageByUsername
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayerInterface::SendMessageByUsername(unsigned char LocalUserNum, const struct FString& UserName, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendMessageByUsername");

	UOnlinePlayerInterface_SendMessageByUsername_Params params;
	params.LocalUserNum = LocalUserNum;
	params.UserName = UserName;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            Friend                         (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendMessageToFriend");

	UOnlinePlayerInterface_SendMessageToFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         InviteDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_ClearFriendInviteReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         InviteDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate");

	UOnlinePlayerInterface_AddFriendInviteReceivedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// (Public, Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// struct FString                 RequestingNick                 (Parm, NeedCtorLink)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UOnlinePlayerInterface::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendInviteReceived");

	UOnlinePlayerInterface_OnFriendInviteReceived_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.RemoveFriend
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            FormerFriend                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.RemoveFriend");

	UOnlinePlayerInterface_RemoveFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FormerFriend = FormerFriend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DenyFriendInvite");

	UOnlinePlayerInterface_DenyFriendInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            RequestingPlayer               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AcceptFriendInvite");

	UOnlinePlayerInterface_AcceptFriendInvite_Params params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_ClearAddFriendByNameCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate");

	UOnlinePlayerInterface_AddAddFriendByNameCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnAddFriendByNameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete");

	UOnlinePlayerInterface_OnAddFriendByNameComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendByName
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 FriendName                     (Parm, NeedCtorLink)
// struct FString                 Message                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendByName");

	UOnlinePlayerInterface_AddFriendByName_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendName = FriendName;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AddFriend
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            NewFriend                      (Parm)
// struct FString                 Message                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriend");

	UOnlinePlayerInterface_AddFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.NewFriend = NewFriend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnKeyboardInputComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete");

	UOnlinePlayerInterface_OnKeyboardInputComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// (Public, HasOutParms)
// Parameters:
// unsigned char                  bWasCanceled                   (Parm, OutParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlinePlayerInterface::GetKeyboardInputResults(unsigned char* bWasCanceled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetKeyboardInputResults");

	UOnlinePlayerInterface_GetKeyboardInputResults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bWasCanceled != nullptr)
		*bWasCanceled = params.bWasCanceled;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         InputDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_ClearKeyboardInputDoneDelegate_Params params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         InputDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate");

	UOnlinePlayerInterface_AddKeyboardInputDoneDelegate_Params params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 TitleText                      (Parm, NeedCtorLink)
// struct FString                 DescriptionText                (Parm, NeedCtorLink)
// bool                           bIsPassword                    (OptionalParm, Parm)
// bool                           bShouldValidate                (OptionalParm, Parm)
// struct FString                 DefaultText                    (OptionalParm, Parm, NeedCtorLink)
// int                            MaxResultLength                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowKeyboardUI");

	UOnlinePlayerInterface_ShowKeyboardUI_Params params;
	params.LocalUserNum = LocalUserNum;
	params.TitleText = TitleText;
	params.DescriptionText = DescriptionText;
	params.bIsPassword = bIsPassword;
	params.bShouldValidate = bShouldValidate;
	params.DefaultText = DefaultText;
	params.MaxResultLength = MaxResultLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            StatusId                       (Parm)
// TArray<struct FLocalizedStringSetting> LocalizedStringSettings        (Const, Parm, OutParm, NeedCtorLink)
// TArray<struct FSettingsProperty> Properties                     (Const, Parm, OutParm, NeedCtorLink)

void UOnlinePlayerInterface::SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetOnlineStatus");

	UOnlinePlayerInterface_SetOnlineStatus_Params params;
	params.LocalUserNum = LocalUserNum;
	params.StatusId = StatusId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocalizedStringSettings != nullptr)
		*LocalizedStringSettings = params.LocalizedStringSettings;
	if (Properties != nullptr)
		*Properties = params.Properties;
}


// Function Engine.OnlinePlayerInterface.GetFriendsList
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FOnlineFriend>   Friends                        (Parm, OutParm, NeedCtorLink)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// TEnumAsByte<EOnlineEnumerationReadState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOnlineEnumerationReadState> UOnlinePlayerInterface::GetFriendsList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlineFriend>* Friends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendsList");

	UOnlinePlayerInterface_GetFriendsList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadFriendsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate");

	UOnlinePlayerInterface_AddReadFriendsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadFriendsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadFriendsComplete");

	UOnlinePlayerInterface_OnReadFriendsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadFriendsList
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            Count                          (OptionalParm, Parm)
// int                            StartingAt                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadFriendsList");

	UOnlinePlayerInterface_ReadFriendsList_Params params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearWriteProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddWriteProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete");

	UOnlinePlayerInterface_OnWriteProfileSettingsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ProfileSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WriteProfileSettings");

	UOnlinePlayerInterface_WriteProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetProfileSettings
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetProfileSettings");

	UOnlinePlayerInterface_GetProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_ClearReadProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate");

	UOnlinePlayerInterface_AddReadProfileSettingsCompleteDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnReadProfileSettingsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete");

	UOnlinePlayerInterface_OnReadProfileSettingsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// class UOnlineProfileSettings*  ProfileSettings                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadProfileSettings");

	UOnlinePlayerInterface_ReadProfileSettings_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendsDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate");

	UOnlinePlayerInterface_ClearFriendsChangeDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         FriendsDelegate                (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate");

	UOnlinePlayerInterface_AddFriendsChangeDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate");

	UOnlinePlayerInterface_ClearMutingChangeDelegate_Params params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate");

	UOnlinePlayerInterface_AddMutingChangeDelegate_Params params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate");

	UOnlinePlayerInterface_ClearLoginCancelledDelegate_Params params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate");

	UOnlinePlayerInterface_AddLoginCancelledDelegate_Params params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlinePlayerInterface::ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate");

	UOnlinePlayerInterface_ClearLoginChangeDelegate_Params params;
	params.LoginDelegate = LoginDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)
// unsigned char                  LocalUserNum                   (OptionalParm, Parm)

void UOnlinePlayerInterface::AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate");

	UOnlinePlayerInterface_AddLoginChangeDelegate_Params params;
	params.LoginDelegate = LoginDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowFriendsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowFriendsUI");

	UOnlinePlayerInterface_ShowFriendsUI_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsMuted
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsMuted");

	UOnlinePlayerInterface_IsMuted_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AreAnyFriends
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TArray<struct FFriendsQuery>   Query                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AreAnyFriends");

	UOnlinePlayerInterface_AreAnyFriends_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Query != nullptr)
		*Query = params.Query;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsFriend
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsFriend");

	UOnlinePlayerInterface_IsFriend_Params params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanShowPresenceInformation(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShowPresenceInformation");

	UOnlinePlayerInterface_CanShowPresenceInformation_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanViewPlayerProfiles(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles");

	UOnlinePlayerInterface_CanViewPlayerProfiles_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPurchaseContent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPurchaseContent");

	UOnlinePlayerInterface_CanPurchaseContent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanDownloadUserContent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanDownloadUserContent");

	UOnlinePlayerInterface_CanDownloadUserContent_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanCommunicate(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicate");

	UOnlinePlayerInterface_CanCommunicate_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPlayOnline
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EFeaturePrivilegeLevel> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanPlayOnline(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPlayOnline");

	UOnlinePlayerInterface_CanPlayOnline_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UOnlinePlayerInterface::GetPlayerNickname(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerNickname");

	UOnlinePlayerInterface_GetPlayerNickname_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// (Public, HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FUniqueNetId            PlayerId                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetUniquePlayerId");

	UOnlinePlayerInterface_GetUniquePlayerId_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerId != nullptr)
		*PlayerId = params.PlayerId;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetLoginStatus
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<ELoginStatus>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ELoginStatus> UOnlinePlayerInterface::GetLoginStatus(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetLoginStatus");

	UOnlinePlayerInterface_GetLoginStatus_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LogoutDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate");

	UOnlinePlayerInterface_ClearLogoutCompletedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LogoutDelegate                 (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate");

	UOnlinePlayerInterface_AddLogoutCompletedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// (Public, Delegate)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UOnlinePlayerInterface::OnLogoutCompleted(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLogoutCompleted");

	UOnlinePlayerInterface_OnLogoutCompleted_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.Logout
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::Logout(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Logout");

	UOnlinePlayerInterface_Logout_Params params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate");

	UOnlinePlayerInterface_ClearLoginFailedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FScriptDelegate         LoginDelegate                  (Parm, NeedCtorLink)

void UOnlinePlayerInterface::AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate");

	UOnlinePlayerInterface_AddLoginFailedDelegate_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginFailed
// (Public, Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode                      (Parm)

void UOnlinePlayerInterface::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginFailed");

	UOnlinePlayerInterface_OnLoginFailed_Params params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AutoLogin
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::AutoLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AutoLogin");

	UOnlinePlayerInterface_AutoLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.Login
// (Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// struct FString                 LoginName                      (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           bWantsLocalOnly                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Login");

	UOnlinePlayerInterface_Login_Params params;
	params.LocalUserNum = LocalUserNum;
	params.LoginName = LoginName;
	params.Password = Password;
	params.bWantsLocalOnly = bWantsLocalOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ShowLoginUI
// (Public)
// Parameters:
// bool                           bShowOnlineOnly                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlinePlayerInterface::ShowLoginUI(bool bShowOnlineOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowLoginUI");

	UOnlinePlayerInterface_ShowLoginUI_Params params;
	params.bShowOnlineOnly = bShowOnlineOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.OnFriendsChange
// (Public, Delegate)

void UOnlinePlayerInterface::OnFriendsChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendsChange");

	UOnlinePlayerInterface_OnFriendsChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnMutingChange
// (Public, Delegate)

void UOnlinePlayerInterface::OnMutingChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnMutingChange");

	UOnlinePlayerInterface_OnMutingChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// (Public, Delegate)

void UOnlinePlayerInterface::OnLoginCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginCancelled");

	UOnlinePlayerInterface_OnLoginCancelled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginChange
// (Public, Delegate)

void UOnlinePlayerInterface::OnLoginChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginChange");

	UOnlinePlayerInterface_OnLoginChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// (Public, HasOutParms)
// Parameters:
// TArray<struct FString>         Accounts                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::GetLocalAccountNames(TArray<struct FString>* Accounts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.GetLocalAccountNames");

	UOnlineAccountInterface_GetLocalAccountNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Accounts != nullptr)
		*Accounts = params.Accounts;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// (Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::DeleteLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.DeleteLocalAccount");

	UOnlineAccountInterface_DeleteLocalAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.RenameLocalAccount
// (Public)
// Parameters:
// struct FString                 NewUserName                    (Parm, NeedCtorLink)
// struct FString                 OldUserName                    (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.RenameLocalAccount");

	UOnlineAccountInterface_RenameLocalAccount_Params params;
	params.NewUserName = NewUserName;
	params.OldUserName = OldUserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.CreateLocalAccount
// (Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::CreateLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateLocalAccount");

	UOnlineAccountInterface_CreateLocalAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (Parm, NeedCtorLink)

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_ClearCreateOnlineAccountCompletedDelegate_Params params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// (Public)
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (Parm, NeedCtorLink)

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate");

	UOnlineAccountInterface_AddCreateOnlineAccountCompletedDelegate_Params params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// (Public, Delegate)
// Parameters:
// TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus                    (Parm)

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted(TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted");

	UOnlineAccountInterface_OnCreateOnlineAccountCompleted_Params params;
	params.ErrorStatus = ErrorStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// (Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// struct FString                 EmailAddress                   (Parm, NeedCtorLink)
// struct FString                 ProductKey                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UOnlineAccountInterface::CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateOnlineAccount");

	UOnlineAccountInterface_CreateOnlineAccount_Params params;
	params.UserName = UserName;
	params.Password = Password;
	params.EmailAddress = EmailAddress;
	params.ProductKey = ProductKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterSpawnable.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AEmitterSpawnable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.ReplicatedEvent");

	AEmitterSpawnable_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterSpawnable.SetTemplate
// (Defined, Simulated, Event, Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm)
// bool                           bDestroyOnFinish               (OptionalParm, Parm)

void AEmitterSpawnable::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.SetTemplate");

	AEmitterSpawnable_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleGodMode::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject");

	USeqAct_ToggleGodMode_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleAffectedByHitEffects::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject");

	USeqAct_ToggleAffectedByHitEffects_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumCoverTypesChanged           (Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots");

	ACoverReplicator_ClientReceiveManualCoverTypeSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// (Defined, Net, NetReliable, Public, NetServer, HasDefaults)
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendManualCoverTypeSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots");

	ACoverReplicator_ServerSendManualCoverTypeSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// (Defined, Public, HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)
// TEnumAsByte<ECoverType>        NewCoverType                   (Parm)

void ACoverReplicator::NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TEnumAsByte<ECoverType> NewCoverType, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots");

	ACoverReplicator_NotifySetManualCoverTypeForSlots_Params params;
	params.Link = Link;
	params.NewCoverType = NewCoverType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsAdjusted               (Parm)
// unsigned char                  SlotsAdjusted                  (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveAdjustedSlots");

	ACoverReplicator_ClientReceiveAdjustedSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendAdjustedSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendAdjustedSlots");

	ACoverReplicator_ServerSendAdjustedSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// (Defined, Public, HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyAutoAdjustSlots");

	ACoverReplicator_NotifyAutoAdjustSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsDisabled               (Parm)
// unsigned char                  SlotsDisabled                  (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveDisabledSlots");

	ACoverReplicator_ClientReceiveDisabledSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendDisabledSlots
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendDisabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendDisabledSlots");

	ACoverReplicator_ServerSendDisabledSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyDisabledSlots
// (Defined, Public, HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyDisabledSlots");

	ACoverReplicator_NotifyDisabledSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsEnabled                (Parm)
// unsigned char                  SlotsEnabled                   (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveEnabledSlots");

	ACoverReplicator_ClientReceiveEnabledSlots_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendEnabledSlots
// (Defined, Net, NetReliable, Public, NetServer)
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendEnabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendEnabledSlots");

	ACoverReplicator_ServerSendEnabledSlots_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyEnabledSlots
// (Defined, Public, HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (Parm)
// TArray<int>                    SlotIndices                    (Const, Parm, OutParm, NeedCtorLink)

void ACoverReplicator::NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyEnabledSlots");

	ACoverReplicator_NotifyEnabledSlots_Params params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// (Defined, Net, NetReliable, Simulated, Public, NetClient)
// Parameters:
// int                            Index                          (Parm)
// class ACoverLink*              Link                           (Parm)
// unsigned char                  NumSlotsEnabled                (Parm)
// unsigned char                  SlotsEnabled                   (Parm)
// unsigned char                  NumSlotsDisabled               (Parm)
// unsigned char                  SlotsDisabled                  (Parm)
// unsigned char                  NumSlotsAdjusted               (Parm)
// unsigned char                  SlotsAdjusted                  (Parm)
// unsigned char                  NumCoverTypesChanged           (Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (Parm)
// bool                           bDone                          (Parm)

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo");

	ACoverReplicator_ClientReceiveInitialCoverReplicationInfo_Params params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// (Defined, Net, NetReliable, Public, NetServer, HasDefaults)
// Parameters:
// int                            Index                          (Parm)

void ACoverReplicator::ServerSendInitialCoverReplicationInfo(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo");

	ACoverReplicator_ServerSendInitialCoverReplicationInfo_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// (Defined, Public)

void ACoverReplicator::ReplicateInitialCoverInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ReplicateInitialCoverInfo");

	ACoverReplicator_ReplicateInitialCoverInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.PurgeOldEntries
// (Defined, Public)

void ACoverReplicator::PurgeOldEntries()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.PurgeOldEntries");

	ACoverReplicator_PurgeOldEntries_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.DisableDebugCamera
// (Defined, Public)

void ADebugCameraController::DisableDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.DisableDebugCamera");

	ADebugCameraController_DisableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.NormalSpeed
// (Defined, Exec, Public)

void ADebugCameraController::NormalSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.NormalSpeed");

	ADebugCameraController_NormalSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.MoreSpeed
// (Defined, Exec, Public)

void ADebugCameraController::MoreSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.MoreSpeed");

	ADebugCameraController_MoreSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.SetFreezeRendering
// (Defined, Exec, Public)

void ADebugCameraController::SetFreezeRendering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SetFreezeRendering");

	ADebugCameraController_SetFreezeRendering_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.OnDeactivate
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void ADebugCameraController::OnDeactivate(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.OnDeactivate");

	ADebugCameraController_OnDeactivate_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.OnActivate
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void ADebugCameraController::OnActivate(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.OnActivate");

	ADebugCameraController_OnActivate_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraController.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ADebugCameraController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.PostBeginPlay");

	ADebugCameraController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameMessage::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.GetString");

	UGameMessage_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.ChangeState
// (Public)
// Parameters:
// bool                           bIsVisible                     (Parm)

void AScoreBoard::ChangeState(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.ChangeState");

	AScoreBoard_ChangeState_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.UpdateScoreBoard
// (Public)

void AScoreBoard::UpdateScoreBoard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.UpdateScoreBoard");

	AScoreBoard_UpdateScoreBoard_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.UpdateGRI
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AScoreBoard::UpdateGRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.UpdateGRI");

	AScoreBoard_UpdateGRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.DrawHUD
// (Defined, Public)

void AScoreBoard::DrawHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.DrawHUD");

	AScoreBoard_DrawHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleInput::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject");

	USeqAct_ToggleInput_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleHUD::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject");

	USeqAct_ToggleHUD_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USeqAct_ToggleCinematicMode::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject");

	USeqAct_ToggleCinematicMode_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AAmbientSoundSimpleToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.OnToggle");

	AAmbientSoundSimpleToggleable_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// (Defined, Simulated, Public)

void AAmbientSoundSimpleToggleable::StopPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StopPlaying");

	AAmbientSoundSimpleToggleable_StopPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// (Defined, Simulated, Public)

void AAmbientSoundSimpleToggleable::StartPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StartPlaying");

	AAmbientSoundSimpleToggleable_StartPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AAmbientSoundSimpleToggleable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent");

	AAmbientSoundSimpleToggleable_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AAmbientSoundSimpleToggleable::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay");

	AAmbientSoundSimpleToggleable_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_PlayFaceFXAnim::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PlayFaceFXAnim.Notify");

	UAnimNotify_PlayFaceFXAnim_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_ViewShake.Notify
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Owner                          (Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (Parm)

void UAnimNotify_ViewShake::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_ViewShake.Notify");

	UAnimNotify_ViewShake_Notify_Params params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// (Defined, Event, Public)
// Parameters:
// int                            TeamIndex                      (Parm)
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam");

	ABroadcastHandler_AllowBroadcastLocalizedTeam_Params params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalized");

	ABroadcastHandler_AllowBroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastTeam
// (Defined, Public)
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastTeam");

	ABroadcastHandler_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.Broadcast
// (Defined, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Broadcast");

	ABroadcastHandler_Broadcast_Params params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastLocalized
// (Defined, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class APlayerController*       Receiver                       (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastLocalized");

	ABroadcastHandler_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Receiver = Receiver;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastText
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// class APlayerController*       Receiver                       (Parm)
// struct FString                 msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastText");

	ABroadcastHandler_BroadcastText_Params params;
	params.SenderPRI = SenderPRI;
	params.Receiver = Receiver;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowsBroadcast
// (Defined, Public)
// Parameters:
// class AActor*                  broadcaster                    (Parm)
// int                            InLen                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int InLen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowsBroadcast");

	ABroadcastHandler_AllowsBroadcast_Params params;
	params.broadcaster = broadcaster;
	params.InLen = InLen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.UpdateSentText
// (Defined, Public)

void ABroadcastHandler::UpdateSentText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.UpdateSentText");

	ABroadcastHandler_UpdateSentText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.UnTouch
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Other                          (Parm)

void AColorScaleVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.UnTouch");

	AColorScaleVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AColorScaleVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.Touch");

	AColorScaleVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraHUD.PostRender
// (Defined, Event, Public, HasDefaults)

void ADebugCameraHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraHUD.PostRender");

	ADebugCameraHUD_PostRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DebugCameraHUD.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ADebugCameraHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraHUD.PostBeginPlay");

	ADebugCameraHUD_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.Timer
// (Defined, Event, Public)

void AVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.Timer");

	AVolumeTimer_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.PostBeginPlay
// (Defined, Event, Public)

void AVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.PostBeginPlay");

	AVolumeTimer_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DialogueManager.TriggerDialogueEvent
// (Public)
// Parameters:
// class UClass*                  InEventClass                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// class AActor*                  InOriginator                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADialogueManager::TriggerDialogueEvent(class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DialogueManager.TriggerDialogueEvent");

	ADialogueManager_TriggerDialogueEvent_Params params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.InOriginator = InOriginator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FailedConnect.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// bool                           bPRI1HUD                       (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UFailedConnect::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetString");

	UFailedConnect_GetString_Params params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FailedConnect.GetFailSwitch
// (Defined, Static, Public)
// Parameters:
// struct FString                 FailString                     (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UFailedConnect::STATIC_GetFailSwitch(const struct FString& FailString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetFailSwitch");

	UFailedConnect_GetFailSwitch_Params params;
	params.FailString = FailString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.NetDamage
// (Defined, Public, HasOutParms)
// Parameters:
// int                            OriginalDamage                 (Parm)
// int                            Damage                         (Parm, OutParm)
// class APawn*                   injured                        (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AGameRules::NetDamage(int OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.NetDamage");

	AGameRules_NetDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.GameRules.ScoreKill
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)

void AGameRules::ScoreKill(class AController* Killer, class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.ScoreKill");

	AGameRules_ScoreKill_Params params;
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameRules.ScoreObjective
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameRules::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.ScoreObjective");

	AGameRules_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameRules.PreventDeath
// (Defined, Public)
// Parameters:
// class APawn*                   Killed                         (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.PreventDeath");

	AGameRules_PreventDeath_Params params;
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.OverridePickupQuery
// (Defined, Public, HasOutParms)
// Parameters:
// class APawn*                   Other                          (Parm)
// class UClass*                  ItemClass                      (Parm)
// class AActor*                  Pickup                         (Parm)
// unsigned char                  bAllowPickup                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.OverridePickupQuery");

	AGameRules_OverridePickupQuery_Params params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bAllowPickup != nullptr)
		*bAllowPickup = params.bAllowPickup;

	return params.ReturnValue;
}


// Function Engine.GameRules.CheckEndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.CheckEndGame");

	AGameRules_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.HandleRestartGame
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::HandleRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.HandleRestartGame");

	AGameRules_HandleRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.GetRules
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameRules::GetRules()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.GetRules");

	AGameRules_GetRules_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.FindPlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// struct FString                 IncomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameRules::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.FindPlayerStart");

	AGameRules_FindPlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.AddGameRules
// (Defined, Public)
// Parameters:
// class AGameRules*              GR                             (Parm)

void AGameRules::AddGameRules(class AGameRules* GR)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.AddGameRules");

	AGameRules_AddGameRules_Params params;
	params.GR = GR;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void AHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.OnToggle");

	AHeightFog_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.ReplicatedEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   VarName                        (Parm)

void AHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.ReplicatedEvent");

	AHeightFog_ReplicatedEvent_Params params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.PostBeginPlay
// (Defined, Event, Public)

void AHeightFog::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.PostBeginPlay");

	AHeightFog_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnInterpActor.InitLOIMtrlInstances
// (Defined, Public)

void UTdLOIAddOnInterpActor::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnInterpActor.InitLOIMtrlInstances");

	UTdLOIAddOnInterpActor_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnInterpActor.InitLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void UTdLOIAddOnInterpActor::InitLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnInterpActor.InitLOI");

	UTdLOIAddOnInterpActor_InitLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnInterpActor.ActivateLOI
// (Defined, Event, Public)

void UTdLOIAddOnInterpActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnInterpActor.ActivateLOI");

	UTdLOIAddOnInterpActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JuiceCommandlet.Main
// (Defined, Event, Public)
// Parameters:
// struct FString                 Params                         (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UJuiceCommandlet::Main(const struct FString& Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JuiceCommandlet.Main");

	UJuiceCommandlet_Main_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TdLOIAddOnKActor.InitLOIMtrlInstances
// (Defined, Public)

void UTdLOIAddOnKActor::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnKActor.InitLOIMtrlInstances");

	UTdLOIAddOnKActor_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnKActor.InitLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void UTdLOIAddOnKActor::InitLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnKActor.InitLOI");

	UTdLOIAddOnKActor_InitLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnKActor.ActivateLOI
// (Defined, Event, Public)

void UTdLOIAddOnKActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnKActor.ActivateLOI");

	UTdLOIAddOnKActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptConsoleEntry.OnCreateChild
// (Defined, Public)
// Parameters:
// class UUIObject*               CreatedWidget                  (Parm)
// class UUIScreenObject*         CreatorContainer               (Parm)

void UScriptConsoleEntry::OnCreateChild(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptConsoleEntry.OnCreateChild");

	UScriptConsoleEntry_OnCreateChild_Params params;
	params.CreatedWidget = CreatedWidget;
	params.CreatorContainer = CreatorContainer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptConsoleEntry.SetValue
// (Defined, Public)
// Parameters:
// struct FString                 NewValue                       (Parm, NeedCtorLink)

void UScriptConsoleEntry::SetValue(const struct FString& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptConsoleEntry.SetValue");

	UScriptConsoleEntry_SetValue_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptConsoleEntry.PostInitialize
// (Defined, Event, Public)

void UScriptConsoleEntry::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptConsoleEntry.PostInitialize");

	UScriptConsoleEntry_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptConsoleEntry.Initialized
// (Defined, Event, Public)

void UScriptConsoleEntry::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptConsoleEntry.Initialized");

	UScriptConsoleEntry_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ControlMovieTexture.Activated
// (Defined, Event, Public)

void USeqAct_ControlMovieTexture::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ControlMovieTexture.Activated");

	USeqAct_ControlMovieTexture_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_SetVector.Activated
// (Defined, Event, Public, HasDefaults)

void USeqAct_SetVector::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVector.Activated");

	USeqAct_SetVector_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnSkeletalMeshActor.InitLOIMtrlInstances
// (Defined, Public)

void UTdLOIAddOnSkeletalMeshActor::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnSkeletalMeshActor.InitLOIMtrlInstances");

	UTdLOIAddOnSkeletalMeshActor_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnSkeletalMeshActor.InitLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void UTdLOIAddOnSkeletalMeshActor::InitLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnSkeletalMeshActor.InitLOI");

	UTdLOIAddOnSkeletalMeshActor_InitLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnSkeletalMeshActor.ActivateLOI
// (Defined, Event, Public)

void UTdLOIAddOnSkeletalMeshActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnSkeletalMeshActor.ActivateLOI");

	UTdLOIAddOnSkeletalMeshActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnStaticMeshActor.InitLOIMtrlInstances
// (Defined, Public)

void UTdLOIAddOnStaticMeshActor::InitLOIMtrlInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnStaticMeshActor.InitLOIMtrlInstances");

	UTdLOIAddOnStaticMeshActor_InitLOIMtrlInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnStaticMeshActor.InitLOI
// (Defined, Public)
// Parameters:
// class AActor*                  Player                         (Parm)

void UTdLOIAddOnStaticMeshActor::InitLOI(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnStaticMeshActor.InitLOI");

	UTdLOIAddOnStaticMeshActor_InitLOI_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TdLOIAddOnStaticMeshActor.ActivateLOI
// (Defined, Event, Public)

void UTdLOIAddOnStaticMeshActor::ActivateLOI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TdLOIAddOnStaticMeshActor.ActivateLOI");

	UTdLOIAddOnStaticMeshActor_ActivateLOI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger_LOS.Tick
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm)

void ATrigger_LOS::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger_LOS.Tick");

	ATrigger_LOS_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerStreamingLevel.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ATriggerStreamingLevel::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerStreamingLevel.Touch");

	ATriggerStreamingLevel_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ActivatePage.Activated
// (Defined, Event, Public)

void UUIAction_ActivatePage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ActivatePage.Activated");

	UUIAction_ActivatePage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_EnablePage.Activated
// (Defined, Event, Public)

void UUIAction_EnablePage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_EnablePage.Activated");

	UUIAction_EnablePage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_GetPageReference.Activated
// (Defined, Event, Public)

void UUIAction_GetPageReference::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetPageReference.Activated");

	UUIAction_GetPageReference_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_FindPageByCaption.Activated
// (Defined, Event, Public)

void UUIAction_FindPageByCaption::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_FindPageByCaption.Activated");

	UUIAction_FindPageByCaption_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_FindPageByIndex.Activated
// (Defined, Event, Public)

void UUIAction_FindPageByIndex::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_FindPageByIndex.Activated");

	UUIAction_FindPageByIndex_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_GetActivePage.Activated
// (Defined, Event, Public)

void UUIAction_GetActivePage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetActivePage.Activated");

	UUIAction_GetActivePage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_GetPageCount.Activated
// (Defined, Event, Public)

void UUIAction_GetPageCount::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_GetPageCount.Activated");

	UUIAction_GetPageCount_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_InsertPage.Activated
// (Defined, Event, Public)

void UUIAction_InsertPage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_InsertPage.Activated");

	UUIAction_InsertPage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_PlaySound.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIAction_PlaySound::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_PlaySound.IsValidUISequenceObject");

	UUIAction_PlaySound_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIAction_RemovePage.Activated
// (Defined, Event, Public)

void UUIAction_RemovePage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_RemovePage.Activated");

	UUIAction_RemovePage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIAction_ReplacePage.Activated
// (Defined, Event, Public)

void UUIAction_ReplacePage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIAction_ReplacePage.Activated");

	UUIAction_ReplacePage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UICond_SwitchWidget.IsValidLevelSequenceObject
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUICond_SwitchWidget::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UICond_SwitchWidget.IsValidLevelSequenceObject");

	UUICond_SwitchWidget_IsValidLevelSequenceObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIEvent_SceneActivated.Deactivated
// (Defined, Event, Public)

void UUIEvent_SceneActivated::Deactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIEvent_SceneActivated.Deactivated");

	UUIEvent_SceneActivated_Deactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIGameInfoSummary.IsProviderDisabled
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UUIGameInfoSummary::IsProviderDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIGameInfoSummary.IsProviderDisabled");

	UUIGameInfoSummary_IsProviderDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIScriptConsoleScene.OnCreateChild
// (Defined, Public)
// Parameters:
// class UUIObject*               CreatedWidget                  (Parm)
// class UUIScreenObject*         CreatorContainer               (Parm)

void UUIScriptConsoleScene::OnCreateChild(class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScriptConsoleScene.OnCreateChild");

	UUIScriptConsoleScene_OnCreateChild_Params params;
	params.CreatedWidget = CreatedWidget;
	params.CreatorContainer = CreatorContainer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScriptConsoleScene.PostInitialize
// (Defined, Event, Public)

void UUIScriptConsoleScene::PostInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScriptConsoleScene.PostInitialize");

	UUIScriptConsoleScene_PostInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIScriptConsoleScene.Initialized
// (Defined, Event, Public)

void UUIScriptConsoleScene::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIScriptConsoleScene.Initialized");

	UUIScriptConsoleScene_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.PlayExitSplash
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::PlayExitSplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayExitSplash");

	AWaterVolume_PlayExitSplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.UnTouch");

	AWaterVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.PlayEntrySplash
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AWaterVolume::PlayEntrySplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayEntrySplash");

	AWaterVolume_PlayEntrySplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.Touch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AWaterVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.Touch");

	AWaterVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
