#pragma once

// Mirror's Edge (1.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class TdGame.TdCrowdPathNode
// 0x0000 (0x0314 - 0x0314)
class ATdCrowdPathNode : public APathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCrowdPathNode");
		return ptr;
	}


	bool CanBeSeenFrom(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset);
	bool HasVisibilityTo(const struct FVector& Offset, class ANavigationPoint* Other, const struct FVector& otherOffset);
};


// Class TdGame.TdMoveNode
// 0x0010 (0x0324 - 0x0314)
class ATdMoveNode : public APathNode
{
public:
	unsigned long                                      bStopAfterMove : 1;                                       // 0x0314(0x0004) (Edit)
	unsigned long                                      bForceWalkToStartNode : 1;                                // 0x0314(0x0004) (Edit)
	unsigned long                                      bForceNewPath : 1;                                        // 0x0314(0x0004) (Edit)
	class UClass*                                      MoveReachspecClass;                                       // 0x0318(0x0004)
	class ANavigationPoint*                            Destination;                                              // 0x031C(0x0004) (Edit)
	int                                                SpecialMoveCost;                                          // 0x0320(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode");
		return ptr;
	}

};


// Class TdGame.SampleClass
// 0x0024 (0x01E4 - 0x01C0)
class ASampleClass : public AActor
{
public:
	int                                                MyInteger;                                                // 0x01C0(0x0004)
	struct FString                                     MyString;                                                 // 0x01C4(0x000C) (Config, NeedCtorLink)
	unsigned long                                      MyBool : 1;                                               // 0x01D0(0x0004)
	struct FVector                                     MyVector;                                                 // 0x01D4(0x000C)
	struct FPointer                                    MyPointer;                                                // 0x01E0(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SampleClass");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
	void SampleEvent(int I);
	int SampleNativeFunction(int I, const struct FString& S, const struct FVector& V);
};


// Class TdGame.SeqAct_TdStreamByURL
// 0x0004 (0x00F0 - 0x00EC)
class USeqAct_TdStreamByURL : public USeqAct_Latent
{
public:
	int                                                stage;                                                    // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdStreamByURL");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdCheckpointActivated
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdCheckpointActivated : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdCheckpointActivated");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdCheckpointLoaded
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdCheckpointLoaded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdCheckpointLoaded");
		return ptr;
	}

};


// Class TdGame.TdActorFactoryHelicopter
// 0x0008 (0x0070 - 0x0068)
class UTdActorFactoryHelicopter : public UActorFactoryVehicle
{
public:
	class UClass*                                      ControllerClass;                                          // 0x0068(0x0004) (Edit)
	class USkeletalMesh*                               HelicopterSkeletalMesh;                                   // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdActorFactoryHelicopter");
		return ptr;
	}

};


// Class TdGame.TdActorFactoryPickup
// 0x000C (0x0070 - 0x0064)
class UTdActorFactoryPickup : public UActorFactory
{
public:
	class UClass*                                      InventoryClass;                                           // 0x0064(0x0004) (Edit)
	float                                              LifeSpanInSeconds;                                        // 0x0068(0x0004) (Edit)
	unsigned long                                      bLiveForever : 1;                                         // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdActorFactoryPickup");
		return ptr;
	}

};


// Class TdGame.TdAnimSet
// 0x0004 (0x007C - 0x0078)
class UTdAnimSet : public UAnimSet
{
public:
	unsigned long                                      bIsCommonAnimSet : 1;                                     // 0x0078(0x0004) (Edit)
	unsigned long                                      bIsWeaponSpecificAnimSet : 1;                             // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimSet");
		return ptr;
	}

};


// Class TdGame.TdAreaLight
// 0x000C (0x01E0 - 0x01D4)
class ATdAreaLight : public APointLight
{
public:
	class UDrawBoxComponent*                           BoxComponent;                                             // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bIsWindowLight : 1;                                       // 0x01D8(0x0004) (Edit)
	float                                              WindowLightAngle;                                         // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAreaLight");
		return ptr;
	}

};


// Class TdGame.TdMovementVolume
// 0x009C (0x02D4 - 0x0238)
class ATdMovementVolume : public APhysicsVolume
{
public:
	struct FVector                                     FloorNormal;                                              // 0x0238(0x000C)
	struct FVector                                     WallNormal;                                               // 0x0244(0x000C)
	struct FVector                                     MoveDirection;                                            // 0x0250(0x000C)
	struct FVector                                     Start;                                                    // 0x025C(0x000C)
	struct FVector                                     End;                                                      // 0x0268(0x000C)
	struct FVector                                     Middle;                                                   // 0x0274(0x000C)
	struct FVector                                     Center;                                                   // 0x0280(0x000C)
	unsigned long                                      bAutoPath : 1;                                            // 0x028C(0x0004) (Edit)
	unsigned long                                      bHideSplineMarkers : 1;                                   // 0x028C(0x0004) (Edit, Transient, NoImport)
	unsigned long                                      bAllowSplineControl : 1;                                  // 0x028C(0x0004) (Edit)
	unsigned long                                      bLatent : 1;                                              // 0x028C(0x0004)
	TArray<class ATdMovementSplineMarker*>             SplineMarkers;                                            // 0x0290(0x000C) (Const, Transient, NeedCtorLink, NoImport)
	int                                                NumSplineSegments;                                        // 0x029C(0x0004) (Edit)
	struct FVector                                     OldScale;                                                 // 0x02A0(0x000C)
	struct FVector                                     OldLocation;                                              // 0x02AC(0x000C)
	struct FRotator                                    OldRotation;                                              // 0x02B8(0x000C)
	float                                              SplineLength;                                             // 0x02C4(0x0004)
	TArray<struct FVector>                             SplineLocations;                                          // 0x02C8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMovementVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
	void PawnLeavingVolume(class APawn* P);
	void PawnEnteredVolume(class APawn* P);
	bool InUse(class APawn* Ignored);
	void PostBeginPlay();
	bool IsSplineMarkerSelected();
	void FindClosestPointOnDSpline(const struct FVector& InLocation, int LowestIndexHint, struct FVector* ClosestLocation, float* NParamT);
	struct FVector GetSlopeOnSpline(float ParamT);
	struct FVector GetLocationOnSpline(float ParamT);
};


// Class TdGame.TdBalanceWalkVolume
// 0x0000 (0x02D4 - 0x02D4)
class ATdBalanceWalkVolume : public ATdMovementVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBalanceWalkVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
	void PawnLeavingVolume(class APawn* P);
};


// Class TdGame.TdCalibrationPostProcess
// 0x0000 (0x0061 - 0x0061)
class UTdCalibrationPostProcess : public UPostProcessEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCalibrationPostProcess");
		return ptr;
	}

};


// Class TdGame.TdCheckpoint
// 0x0020 (0x0338 - 0x0318)
class ATdCheckpoint : public ACheckpoint
{
public:
	unsigned long                                      DefaultCheckpoint : 1;                                    // 0x0318(0x0004) (Edit)
	struct FString                                     CheckpointName;                                           // 0x031C(0x000C) (Edit, NeedCtorLink)
	int                                                CheckpointWeight;                                         // 0x0328(0x0004) (Edit)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x032C(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheckpoint");
		return ptr;
	}


	void HandlePawnTeleport(class ATdPawn* Pawn, class ATdPlayerController* PlayerController);
	bool ShouldDoCheckpoint(class ATdPlayerController* PC);
	void OnTdCheckpoint(class USeqAct_TdCheckpoint* CheckpointAction);
};


// Class TdGame.TdConfinedVolumePathNode
// 0x001C (0x0338 - 0x031C)
class ATdConfinedVolumePathNode : public AVolumePathNode
{
public:
	float                                              MaxRadius;                                                // 0x031C(0x0004) (Edit)
	float                                              MaxHeight;                                                // 0x0320(0x0004) (Edit)
	struct FString                                     name2;                                                    // 0x0324(0x000C) (NeedCtorLink)
	float                                              CalculatedRadius;                                         // 0x0330(0x0004)
	float                                              CalculatedHeight;                                         // 0x0334(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdConfinedVolumePathNode");
		return ptr;
	}

};


// Class TdGame.TdConsole
// 0x002C (0x01C0 - 0x0194)
class UTdConsole : public UConsole
{
public:
	TArray<struct FString>                             KeyStrings;                                               // 0x0194(0x000C) (NeedCtorLink)
	int                                                ActiveKeywordIndex;                                       // 0x01A0(0x0004)
	struct FString                                     SavedArgument;                                            // 0x01A4(0x000C) (NeedCtorLink)
	struct FString                                     SavedCommand;                                             // 0x01B0(0x000C) (NeedCtorLink)
	unsigned long                                      bCtrlIsPressed : 1;                                       // 0x01BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdConsole");
		return ptr;
	}


	struct FString GetStringToComplete(const struct FString& TypedStrTmp);
	void Initialized();
	bool FindKeyWord(const struct FString& Str, struct FString* KeyWord, int* Index);
	void InitKeyStrings();
};


// Class TdGame.TdController
// 0x0000 (0x003C - 0x003C)
class UTdController : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdController");
		return ptr;
	}


	void OnMovementStateChange(const struct FName& NewState);
	void SetCameraRotationAid(const struct FRotator& desiredRot);
	struct FVector GetFloor();
};


// Class TdGame.TdCover
// 0x0098 (0x00D4 - 0x003C)
class UTdCover : public UObject
{
public:
	class ATdAIController*                             Owner;                                                    // 0x003C(0x0004)
	int                                                SlotIdx;                                                  // 0x0040(0x0004)
	class ACoverLink*                                  Link;                                                     // 0x0044(0x0004)
	int                                                PreviousSlotIdx;                                          // 0x0048(0x0004)
	class ACoverLink*                                  PreviousCoverLink;                                        // 0x004C(0x0004)
	TArray<struct FIgnoreStruct>                       IgnoreList;                                               // 0x0050(0x000C) (NeedCtorLink)
	struct FVector                                     Direction;                                                // 0x005C(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0068(0x000C)
	struct FVector                                     Location;                                                 // 0x0074(0x000C)
	struct FVector                                     CoverLeftLocation;                                        // 0x0080(0x000C)
	struct FVector                                     CoverRightLocation;                                       // 0x008C(0x000C)
	struct FVector                                     CoverLeftDirection;                                       // 0x0098(0x000C)
	struct FVector                                     CoverRightDirection;                                      // 0x00A4(0x000C)
	struct FVector                                     FireLeftLocation;                                         // 0x00B0(0x000C)
	struct FVector                                     FireRightLocation;                                        // 0x00BC(0x000C)
	TEnumAsByte<ECoverType>                            CoverType;                                                // 0x00C8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	unsigned long                                      bLeanLeft : 1;                                            // 0x00CC(0x0004)
	unsigned long                                      bLeanRight : 1;                                           // 0x00CC(0x0004)
	unsigned long                                      bCanPopUp : 1;                                            // 0x00CC(0x0004)
	unsigned long                                      bClaimed : 1;                                             // 0x00CC(0x0004)
	unsigned long                                      bAlwaysValid : 1;                                         // 0x00CC(0x0004)
	float                                              LastCoverTime;                                            // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCover");
		return ptr;
	}


	bool HaveOppositeCoverDir(TEnumAsByte<ECoverDirectionState> Dir);
	void SelectCoverDirectionFailed(class ACoverLink* ActiveCoverLink);
	void VerifyHasValidCoverDirectionFailed(class ACoverLink* ActiveCoverLink, bool bHasCoverType);
	bool ShouldIgnore(class ACoverLink* L, int S);
	void AddToIgnoreList(class ACoverLink* L, int S, float Time);
	void CoverDrawDebug();
	void PickRandomCover();
	bool PickClosestCover();
	bool FindNewCover();
	class ACoverSlotMarker* GetSlotMarker();
	void FindClosestUsableCover(class ACoverLink** out_Link, int* out_SlotId);
	TEnumAsByte<ECoverDirectionState> SelectCoverDirectionInternal(class ACoverLink* ActiveCoverLink, int ActiveSlotId);
	bool SelectCoverDirection(TEnumAsByte<ECoverDirectionState>* iCoverDirection);
	bool HasValidCoverDirection(class ACoverLink* ActiveCoverLink, int ActiveSlotId);
	float GetMinimumEnemyCoverDistance();
	bool IsWithinRestraints(class ACoverLink* TestLink);
	bool IsCoverValid(const struct FVector& EnemyPosition, class ACoverLink* ActiveCoverLink, int ActiveSlotId, bool bFireCover);
	bool IsValid(const struct FVector& EnemyPosition, bool bFireCover);
	TEnumAsByte<ECoverQuality> GetCoverQuality(class ACoverLink* ActiveCoverLink, int ActiveSlotId);
	bool AttemptReclaimCover(class ACoverLink* ActiveCoverLink, int ActiveSlotId);
	void MarkAsTemporaryInvalid(float InvalidTime);
	void MarkInvalid();
	void Drop();
	bool HasClaimedCover();
	void Claim();
	struct FRotator GetFireRotation(TEnumAsByte<ECoverDirectionState> Dir);
	struct FVector GetFireLocation(TEnumAsByte<ECoverDirectionState> Dir);
	void SetupCover();
	void Initialize(class ATdAIController* Drone);
};


// Class TdGame.TdDebugOutput
// 0x0000 (0x003C - 0x003C)
class UTdDebugOutput : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDebugOutput");
		return ptr;
	}


	void STATIC_DrawText(class UCanvas* C, const struct FString& Text, float X, float Y, bool pinBottomLeft, const struct FString& lineBreaker);
	void STATIC_DrawText3dPos(class APlayerController* Player, class UCanvas* C, const struct FString& Text, const struct FVector& pos, bool pinBottomLeft, const struct FString& lineBreaker, bool bClearText);
	void STATIC_DrawCoordinateAxis(const struct FVector& inLoc, const struct FRotator& inRot, float Size, bool persistentLines);
	void STATIC_DrawLocAndValue(const struct FVector& Location, float Size, class APlayerController* Controller, class UCanvas* C, const struct FString& Text, float Value, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawLocAdvanced(const struct FVector& Location, float Size, class APlayerController* Controller, class UCanvas* C, const struct FString& Text, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawLoc(const struct FVector& Location, float Size, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawDistanceMarker(class APlayerController* Controller, class UCanvas* C, const struct FVector& startPos, const struct FVector& EndPos, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawSizedVector(const struct FVector& startPos, const struct FVector& Direction, float SizeMultiplier, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawLineVector(const struct FVector& startPos, const struct FVector& EndPos, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawExtent(const struct FVector& Location, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawMovementTrace(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawLine(const struct FVector& startPos, const struct FVector& EndPos, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_DrawVector(const struct FVector& startPos, const struct FVector& Direction, float Size, unsigned char R, unsigned char G, unsigned char B, bool persistentLines);
	void STATIC_AddGraphValue(const struct FName& graph, float Val, float DisplayValue, bool bDisplayValue);
	void STATIC_DrawGraph(class UCanvas* C);
};


// Class TdGame.TdFlareEmitter
// 0x0004 (0x01CC - 0x01C8)
class ATdFlareEmitter : public AEmitter
{
public:
	class UParticleSystem*                             ImpactEffect;                                             // 0x01C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdFlareEmitter");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TdGame.TdDirectionalFlareEmitter
// 0x0018 (0x01E4 - 0x01CC)
class ATdDirectionalFlareEmitter : public ATdFlareEmitter
{
public:
	class AActor*                                      Light;                                                    // 0x01CC(0x0004) (Edit)
	float                                              Cone;                                                     // 0x01D0(0x0004) (Edit)
	float                                              MaxScale;                                                 // 0x01D4(0x0004) (Edit)
	float                                              FlareScale;                                               // 0x01D8(0x0004)
	float                                              ConePlusOne;                                              // 0x01DC(0x0004)
	float                                              OneMinusConeInv;                                          // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDirectionalFlareEmitter");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TdGame.TdDirectionalHazePostProcess
// 0x0043 (0x00A4 - 0x0061)
class UTdDirectionalHazePostProcess : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     SunVector;                                                // 0x0064(0x000C)
	struct FVector                                     HazeColor;                                                // 0x0070(0x000C) (Edit)
	float                                              AngleCurve;                                               // 0x007C(0x0004) (Edit)
	float                                              AngleStart;                                               // 0x0080(0x0004) (Edit)
	float                                              DistanceCurve;                                            // 0x0084(0x0004) (Edit)
	float                                              DistanceDivider;                                          // 0x0088(0x0004) (Edit)
	float                                              HazeAngleClampHigh;                                       // 0x008C(0x0004) (Edit)
	float                                              HazeTotalClampCloseHigh;                                  // 0x0090(0x0004) (Edit)
	float                                              HazeTotalClampFarHigh;                                    // 0x0094(0x0004) (Edit)
	float                                              HazeTotalClampFarDistance;                                // 0x0098(0x0004) (Edit)
	float                                              HazeMultiplier;                                           // 0x009C(0x0004) (Edit)
	float                                              HazeTotalClampLow;                                        // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDirectionalHazePostProcess");
		return ptr;
	}

};


// Class TdGame.TdDrawArcComponent
// 0x0010 (0x01CC - 0x01BC)
class UTdDrawArcComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArcColor;                                                 // 0x01BC(0x0004) (Transient)
	float                                              ArcRadius;                                                // 0x01C0(0x0004) (Transient)
	int                                                ArcRes;                                                   // 0x01C4(0x0004) (Transient)
	float                                              ArcAngle;                                                 // 0x01C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDrawArcComponent");
		return ptr;
	}

};


// Class TdGame.TdEADMPatcherWrapper
// 0x0000 (0x003C - 0x003C)
class UTdEADMPatcherWrapper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdEADMPatcherWrapper");
		return ptr;
	}


	void STATIC_StartPatching();
	bool STATIC_IsEADMInstalled();
	int STATIC_GetParamSuffix();
	struct FString STATIC_GetCDKey();
	bool STATIC_IsLocalVersionNewerThan(const struct FString& RequiredVersion);
};


// Class TdGame.TdGameInfo
// 0x0044 (0x0380 - 0x033C)
class ATdGameInfo : public AGameInfo
{
public:
	unsigned long                                      ShowBulletTraces : 1;                                     // 0x033C(0x0004)
	unsigned long                                      bAllowViewTargetSwitching : 1;                            // 0x033C(0x0004) (Const)
	unsigned long                                      bAllowDifficultyChange : 1;                               // 0x033C(0x0004) (Const)
	unsigned long                                      bOnlineMode : 1;                                          // 0x033C(0x0004)
	float                                              BulletTraceLifeTime;                                      // 0x0340(0x0004)
	TArray<struct FDefaultInvItem>                     DefaultInventory;                                         // 0x0344(0x000C) (Edit, NeedCtorLink)
	TArray<class APlayerStart*>                        StartPoints;                                              // 0x0350(0x000C) (NeedCtorLink)
	TArray<class ATdSpectatorPoint*>                   SpectatorPoints;                                          // 0x035C(0x000C) (NeedCtorLink)
	class UUIDataStore_TdGameData*                     TdGameData;                                               // 0x0368(0x0004)
	TArray<class ATdLookAtPoint*>                      ActiveLookAtPoints;                                       // 0x036C(0x000C) (NeedCtorLink)
	class ATdAIVoiceOverManager*                       VoiceOverManager;                                         // 0x0378(0x0004)
	class URequestedTextureResources*                  ActiveRequestedTextureResources;                          // 0x037C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameInfo");
		return ptr;
	}


	void SetObjective(const struct FName& CheckpointName);
	void OnlineConnectionLost();
	void AimingLines();
	bool UseStreamingVolumes(bool bInFreeCam);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void OnQuitGame();
	void OnSaveTextureResourceInfo();
	void OnLevelLoaded(class URequestedTextureResources* RequestedTextureResources);
	bool SaveTextureResourceInfo(class URequestedTextureResources* RequestedTextureResources);
	class ANavigationPoint* GetPlayerStart(class AController* PlayerController);
	void AddDefaultInventory(class APawn* P);
	class ANavigationPoint* FindClosestStartSpot(const struct FVector& ObjectLocation);
	void AcquirePlayerStartPoints();
	class ATdSpectatorPoint* GetPrevSpectatorPoint(class ATdSpectatorPoint* CurrPoint);
	class ATdSpectatorPoint* GetNextSpectatorPoint(class ATdSpectatorPoint* CurrPoint);
	class ATdSpectatorPoint* GetLastSpectatorPoint();
	class ATdSpectatorPoint* GetFirstSpectatorPoint();
	void AccuireSpectatorPoints();
	class ATdLookAtPoint* GetLookAtPoint(class ATdPawn* Player);
	void UnRegisterLookAtPoint(class ATdLookAtPoint* Point);
	void RegisterLookAtPoint(class ATdLookAtPoint* Point, bool bForceLookAtNow);
	void Reset();
	void InitializeDataStore();
	void PostSublevelStreaming(const struct FString& Options);
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdGameReplicationInfo
// 0x0014 (0x0268 - 0x0254)
class ATdGameReplicationInfo : public AGameReplicationInfo
{
public:
	int                                                ServerVersion;                                            // 0x0254(0x0004)
	unsigned char                                      LobbyUpdate;                                              // 0x0258(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0259(0x0003) MISSED OFFSET
	class UTdLobbyBackend*                             LobbyBackend;                                             // 0x025C(0x0004)
	unsigned long                                      bLobbyFinalized : 1;                                      // 0x0260(0x0004)
	unsigned long                                      bMatchIsInWarmup : 1;                                     // 0x0260(0x0004) (Net)
	int                                                RoundCount;                                               // 0x0264(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameReplicationInfo");
		return ptr;
	}


	void StartGame(const struct FString& URL);
	bool AllPlayersReady();
	void Timer();
	void ForceLobbyUpdate();
	void ReplicatedEvent(const struct FName& VarName);
	void OnEndMatchInProgress(class UObject* GameRules);
	void OnStartMatchInProgress(class UObject* GameRules);
	void OnCarriedObjectTouchedGround(class AActor* CarriedActor);
	void OnRespawnCarriedObject(class AActor* CarriedActor);
	void OnDropCarriedObject(class ATdPlayerReplicationInfo* PRI, class AActor* CarriedActor);
	void OnCarryObject(class ATdPlayerReplicationInfo* PRI, class AActor* CarriedActor);
	bool AllowViewTargetSwitching();
	int ServerGetVersion();
	void PostBeginPlay();
	bool IsBagGame();
};


// Class TdGame.TdGhostManager
// 0x0024 (0x01E4 - 0x01C0)
class ATdGhostManager : public AActor
{
public:
	class USubsystem*                                  GhostRecordDriver;                                        // 0x01C0(0x0004)
	class USubsystem*                                  GhostPlaybackDriver;                                      // 0x01C4(0x0004)
	class UObject*                                     GhostNetworkNotify;                                       // 0x01C8(0x0004)
	TArray<unsigned char>                              RecordData;                                               // 0x01CC(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<unsigned char>                              PlaybackData;                                             // 0x01D8(0x000C) (AlwaysInit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGhostManager");
		return ptr;
	}


	void StopGhostPlayback();
	void PlaybackGhost();
	void SetPlaybackGhost(TArray<unsigned char>* GhostData);
	void GetRecordedGhost(TArray<unsigned char>* GhostData);
	void StopGhostRecording(class ATdPawn* P);
	void RecordGhost(class ATdPawn* P);
};


// Class TdGame.TdLadderVolume
// 0x0034 (0x0308 - 0x02D4)
class ATdLadderVolume : public ATdMovementVolume
{
public:
	float                                              StepHeight;                                               // 0x02D4(0x0004) (Edit)
	float                                              ZOffsetLadder;                                            // 0x02D8(0x0004)
	float                                              ZOffsetPipe;                                              // 0x02DC(0x0004)
	float                                              XYOffsetLadder;                                           // 0x02E0(0x0004)
	float                                              XYOffsetPipe;                                             // 0x02E4(0x0004)
	TArray<struct FVector>                             PawnLadderLocations;                                      // 0x02E8(0x000C) (NeedCtorLink)
	TArray<struct FVector>                             LadderSteps;                                              // 0x02F4(0x000C) (NeedCtorLink)
	TEnumAsByte<ELadderType>                           LadderType;                                               // 0x0300(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0301(0x0003) MISSED OFFSET
	unsigned long                                      bCanExitAtTop : 1;                                        // 0x0304(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLadderVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
	bool InUse(class APawn* Ignored);
	int GetLastStep();
	int GetClosestStepDown(float LocationZ);
	int GetClosestStepUp(float LocationZ);
	int GetClosestStep(float LocationZ);
	struct FVector GetLadderLocation(int Index);
};


// Class TdGame.TdLedgeWalkVolume
// 0x0001 (0x02D5 - 0x02D4)
class ATdLedgeWalkVolume : public ATdMovementVolume
{
public:
	TEnumAsByte<ELedgeWalkType>                        LedgeWalkType;                                            // 0x02D4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLedgeWalkVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
	void PawnLeavingVolume(class APawn* P);
	void PawnEnteredVolume(class APawn* P);
};


// Class TdGame.TdMapInfo
// 0x0020 (0x005C - 0x003C)
class UTdMapInfo : public UMapInfo
{
public:
	class UStaticMesh*                                 MapMesh;                                                  // 0x003C(0x0004) (Edit, Const)
	struct FVector                                     WorldToMiniMapOrigo;                                      // 0x0040(0x000C) (Edit, Const)
	struct FVector                                     MapSpecificWidgetTranslation;                             // 0x004C(0x000C) (Edit, Const)
	float                                              MapSpecificWidgetScale;                                   // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMapInfo");
		return ptr;
	}

};


// Class TdGame.TdMarker
// 0x0000 (0x01CC - 0x01CC)
class ATdMarker : public ANote
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMarker");
		return ptr;
	}

};


// Class TdGame.TdMotionBlurPostProcess
// 0x001F (0x0080 - 0x0061)
class UTdMotionBlurPostProcess : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              TdMotionBlurAmount;                                       // 0x0064(0x0004) (Edit)
	float                                              TdMotionBlurStartPlayerSpeed;                             // 0x0068(0x0004) (Edit)
	unsigned long                                      TdMotionBlurEnabled : 1;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      TdMotionBlurUseDirection : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      TdMotionBlurForce : 1;                                    // 0x006C(0x0004) (Edit)
	struct FVector                                     TdMotionBlurForcedDirection;                              // 0x0070(0x000C) (Edit)
	float                                              TdMotionBlurForcedAmount;                                 // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMotionBlurPostProcess");
		return ptr;
	}

};


// Class TdGame.TdMovementExclusionVolume
// 0x0004 (0x023C - 0x0238)
class ATdMovementExclusionVolume : public APhysicsVolume
{
public:
	unsigned long                                      bExcludeFootMoves : 1;                                    // 0x0238(0x0004) (Edit)
	unsigned long                                      bExcludeHandMoves : 1;                                    // 0x0238(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMovementExclusionVolume");
		return ptr;
	}

};


// Class TdGame.TdMovementSplineMarker
// 0x0000 (0x01C0 - 0x01C0)
class ATdMovementSplineMarker : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMovementSplineMarker");
		return ptr;
	}

};


// Class TdGame.TdMoveVolumeRenderComponent
// 0x0018 (0x0220 - 0x0208)
class UTdMoveVolumeRenderComponent : public UStaticMeshComponent
{
public:
	class UStaticMesh*                                 LadderStepMesh;                                           // 0x0208(0x0004)
	class UStaticMesh*                                 BalanceWalkMesh;                                          // 0x020C(0x0004)
	class UStaticMesh*                                 PawnLocationMesh;                                         // 0x0210(0x0004)
	class UStaticMesh*                                 MoveDirectionMesh;                                        // 0x0214(0x0004)
	class UStaticMesh*                                 FloorDirectionMesh;                                       // 0x0218(0x0004)
	class UStaticMesh*                                 ZipLineMesh;                                              // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveVolumeRenderComponent");
		return ptr;
	}

};


// Class TdGame.TdMPSettings
// 0x0000 (0x00A8 - 0x00A8)
class UTdMPSettings : public UOnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPSettings");
		return ptr;
	}

};


// Class TdGame.TdParticleModuleCollision
// 0x000C (0x00FC - 0x00F0)
class UTdParticleModuleCollision : public UParticleModuleCollision
{
public:
	unsigned long                                      bPlaySoundOnCollision : 1;                                // 0x00F0(0x0004) (Edit)
	TEnumAsByte<ECollisionParticleType>                ParticleType;                                             // 0x00F4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	class UPhysicalMaterial*                           DefaultImpactMaterial;                                    // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdParticleModuleCollision");
		return ptr;
	}

};


// Class TdGame.TdParticleSystem
// 0x0004 (0x00E8 - 0x00E4)
class UTdParticleSystem : public UParticleSystem
{
public:
	float                                              BBoxSize;                                                 // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdParticleSystem");
		return ptr;
	}

};


// Class TdGame.TdParticleSystemComponent
// 0x0004 (0x0240 - 0x023C)
class UTdParticleSystemComponent : public UParticleSystemComponent
{
public:
	float                                              BoundingBoxSideLength;                                    // 0x023C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdParticleSystemComponent");
		return ptr;
	}

};


// Class TdGame.TdPawn
// 0x0534 (0x08F8 - 0x03C4)
class ATdPawn : public AGamePawn
{
public:
	class USkelControlSingleBone*                      RootControl1p;                                            // 0x03C4(0x0004)
	class USkelControlSingleBone*                      HipsControl1p;                                            // 0x03C8(0x0004)
	class USkelControlSingleBone*                      HipsControl3p;                                            // 0x03CC(0x0004)
	class USkelControlSingleBone*                      RootControl3p;                                            // 0x03D0(0x0004)
	class USkelControlSingleBone*                      SwingControl1p;                                           // 0x03D4(0x0004)
	class USkelControlSingleBone*                      SwingControl3p;                                           // 0x03D8(0x0004)
	class USkelControlSingleBone*                      CameraControl1p;                                          // 0x03DC(0x0004)
	class USkelControlSingleBone*                      OneHandedRightShoulderOffset1p;                           // 0x03E0(0x0004)
	class UTdSkelControlFootPlacement*                 LeftLegControl1p;                                         // 0x03E4(0x0004)
	class UTdSkelControlFootPlacement*                 LeftLegControl3p;                                         // 0x03E8(0x0004)
	class UTdSkelControlFootPlacement*                 RightLegControl1p;                                        // 0x03EC(0x0004)
	class UTdSkelControlFootPlacement*                 RightLegControl3p;                                        // 0x03F0(0x0004)
	class UTdSkelControlRecoil*                        RecoilControl1p;                                          // 0x03F4(0x0004)
	class UTdSkelControlLimb*                          LeftHandWorldIKController;                                // 0x03F8(0x0004) (Edit, EditInline)
	class UTdSkelControlLimb*                          RightHandWorldIKController;                               // 0x03FC(0x0004) (Edit, EditInline)
	class USkelControlLimb*                            LeftHandLocalIKController;                                // 0x0400(0x0004) (Edit, EditInline)
	class USkelControlLimb*                            RightHandLocalIKController;                               // 0x0404(0x0004) (Edit, EditInline)
	class USkelControlSingleBone*                      RightHandRotationController;                              // 0x0408(0x0004) (Edit, EditInline)
	class USkelControlSingleBone*                      LeftHandRotationController;                               // 0x040C(0x0004) (Edit, EditInline)
	class UTdSkelControlSpring*                        HeavyWeaponSpringController;                              // 0x0410(0x0004) (Edit, EditInline)
	class USkelControlSingleBone*                      RightForeArmRollRotationController;                       // 0x0414(0x0004) (Edit, EditInline)
	class USkelControlSingleBone*                      LeftForeArmRollRotationController;                        // 0x0418(0x0004) (Edit, EditInline)
	unsigned long                                      bDisableSkelControlSpring : 1;                            // 0x041C(0x0004) (Const)
	unsigned long                                      bCanUnCrouch : 1;                                         // 0x041C(0x0004)
	unsigned long                                      bConstrainLook : 1;                                       // 0x041C(0x0004)
	unsigned long                                      bGoingForward : 1;                                        // 0x041C(0x0004)
	unsigned long                                      bClimbLeftHand : 1;                                       // 0x041C(0x0004) (Net)
	unsigned long                                      bClimbDownFast : 1;                                       // 0x041C(0x0004) (Net)
	unsigned long                                      bEnableFootPlacement : 1;                                 // 0x041C(0x0004)
	unsigned long                                      bMoveActionMax : 1;                                       // 0x041C(0x0004)
	unsigned long                                      bFoundLedgeExcludesHandMoves : 1;                         // 0x041C(0x0004) (Transient)
	unsigned long                                      bFoundLedgeExcludesFootMoves : 1;                         // 0x041C(0x0004) (Transient)
	unsigned long                                      bIsWallWalking : 1;                                       // 0x041C(0x0004) (Const)
	unsigned long                                      bFoundLedge : 1;                                          // 0x041C(0x0004)
	unsigned long                                      bAllowMoveChange : 1;                                     // 0x041C(0x0004)
	unsigned long                                      bSRPauseTimer : 1;                                        // 0x041C(0x0004)
	unsigned long                                      bForceMaxAccelOneFrame : 1;                               // 0x041C(0x0004)
	unsigned long                                      RollTriggerPressed : 1;                                   // 0x041C(0x0004)
	unsigned long                                      bUncontrolledSlide : 1;                                   // 0x041C(0x0004)
	unsigned long                                      bIsPlayingSlideEffect : 1;                                // 0x041C(0x0004)
	unsigned long                                      bAlternateSound : 1;                                      // 0x041C(0x0004) (Transient)
	unsigned long                                      bCharacterInhaling : 1;                                   // 0x041C(0x0004)
	unsigned long                                      bDisableCharacterSounds : 1;                              // 0x041C(0x0004)
	unsigned long                                      bTakeFallDamage : 1;                                      // 0x041C(0x0004) (Edit, Config)
	unsigned long                                      bIsUsingRootMotion : 1;                                   // 0x041C(0x0004)
	unsigned long                                      bIsUsingRootRotation : 1;                                 // 0x041C(0x0004)
	unsigned long                                      bDebugDamage : 1;                                         // 0x041C(0x0004)
	unsigned long                                      bDebugNetAnim : 1;                                        // 0x041C(0x0004)
	unsigned long                                      bNoMoveAnims : 1;                                         // 0x041C(0x0004)
	unsigned long                                      bDebugAcceleration : 1;                                   // 0x041C(0x0004) (Edit)
	unsigned long                                      bDebugJumping : 1;                                        // 0x041C(0x0004) (Edit)
	unsigned long                                      bDebugMovement : 1;                                       // 0x041C(0x0004) (Edit)
	unsigned long                                      bDebugPlotPath : 1;                                       // 0x041C(0x0004)
	unsigned long                                      bDebugFootsteps : 1;                                      // 0x041C(0x0004) (Edit, Config)
	unsigned long                                      bDebugSlapBack : 1;                                       // 0x0420(0x0004) (Edit, Config)
	unsigned long                                      bDebugCharacterSounds : 1;                                // 0x0420(0x0004) (Edit, Config)
	unsigned long                                      bDebugBreathingSounds : 1;                                // 0x0420(0x0004) (Edit, Config)
	unsigned long                                      bDebugWeapons : 1;                                        // 0x0420(0x0004) (Edit, Config)
	unsigned long                                      bDebugMaterials : 1;                                      // 0x0420(0x0004) (Edit, Config)
	class UTdAnimNodeSlot*                             CustomCannedNode1p;                                       // 0x0424(0x0004)
	class UTdAnimNodeSlot*                             CustomCannedNode3p;                                       // 0x0428(0x0004)
	class UTdAnimNodeSlot*                             CustomCannedUpperBodyNode1p;                              // 0x042C(0x0004)
	class UTdAnimNodeSlot*                             CustomCannedUpperBodyNode3p;                              // 0x0430(0x0004)
	class UTdAnimNodeSlot*                             CustomFullBodyNode1p;                                     // 0x0434(0x0004)
	class UTdAnimNodeSlot*                             CustomFullBodyNode3p;                                     // 0x0438(0x0004)
	class UTdAnimNodeSlot*                             CustomFullBodyDirNode1p;                                  // 0x043C(0x0004)
	class UTdAnimNodeSlot*                             CustomFullBodyDirNode3p;                                  // 0x0440(0x0004)
	class UTdAnimNodeSlot*                             CustomUpperBodyNode1p;                                    // 0x0444(0x0004)
	class UTdAnimNodeSlot*                             CustomUpperBodyNode3p;                                    // 0x0448(0x0004)
	class UTdAnimNodeSlot*                             CustomLowerBodyNode1p;                                    // 0x044C(0x0004)
	class UTdAnimNodeSlot*                             CustomLowerBodyNode3p;                                    // 0x0450(0x0004)
	class UTdAnimNodeSlot*                             CustomCameraNode;                                         // 0x0454(0x0004)
	class UTdAnimNodeSlot*                             CustomWeaponNode1p;                                       // 0x0458(0x0004)
	class UTdAnimNodeSlot*                             CustomWeaponNode3p;                                       // 0x045C(0x0004)
	class UTdAnimNodeSlot*                             CustomFaceNode;                                           // 0x0460(0x0004)
	class UTdAnimNodePoseOffset*                       WeaponPoseOffset1p;                                       // 0x0464(0x0004)
	class UTdAnimNodePoseOffset*                       WeaponPoseOffset3p;                                       // 0x0468(0x0004)
	class UTdAnimNodeLandOffset*                       LandNode1p;                                               // 0x046C(0x0004)
	class UTdAnimNodeLandOffset*                       LandNode3p;                                               // 0x0470(0x0004)
	class UTdAnimNodeGrabbing*                         GrabAnimNode1p;                                           // 0x0474(0x0004)
	class UTdAnimNodeGrabbing*                         GrabAnimNode3p;                                           // 0x0478(0x0004)
	class UAnimNodeSynch*                              MasterSync1p;                                             // 0x047C(0x0004)
	class UAnimNodeSynch*                              MasterSync3p;                                             // 0x0480(0x0004)
	TArray<class UAnimNodeAimOffset*>                  AimOffsetNodes;                                           // 0x0484(0x000C) (Transient, NeedCtorLink)
	TArray<class UTdAnimNodePoseOffset*>               PoseOffsetNodes;                                          // 0x0490(0x000C) (Transient, NeedCtorLink)
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x049C(0x000C) (Transient, NeedCtorLink)
	class UAnimSet*                                    CommonArmedLight1p;                                       // 0x04A8(0x0004)
	class UAnimSet*                                    CommonArmedHeavy1p;                                       // 0x04AC(0x0004)
	class UAnimSet*                                    CommonArmedLight3p;                                       // 0x04B0(0x0004)
	class UAnimSet*                                    CommonArmedHeavy3p;                                       // 0x04B4(0x0004)
	float                                              VelocityMagnitude2D;                                      // 0x04B8(0x0004)
	float                                              VelocityMagnitude;                                        // 0x04BC(0x0004)
	struct FVector                                     VelocityDir2D;                                            // 0x04C0(0x000C)
	struct FVector                                     VelocityDir;                                              // 0x04CC(0x000C)
	float                                              FaceRotationTimeLeft;                                     // 0x04D8(0x0004)
	float                                              BecameReadyTime;                                          // 0x04DC(0x0004)
	float                                              AmountTilUnarmed;                                         // 0x04E0(0x0004)
	class UCylinderComponent*                          ActorCylinderComponent;                                   // 0x04E4(0x0004) (ExportObject, Component, EditInline)
	float                                              GravityModifier;                                          // 0x04E8(0x0004)
	float                                              GravityModifierTimer;                                     // 0x04EC(0x0004)
	class UTdSwanNeck*                                 SwanNeck1p;                                               // 0x04F0(0x0004) (Edit, EditInline)
	TEnumAsByte<EAgainstWallState>                     AgainstWallState;                                         // 0x04F4(0x0001)
	TEnumAsByte<EWeaponAnimState>                      WeaponAnimState;                                          // 0x04F5(0x0001) (Edit)
	unsigned char                                      AnimLockRefCount;                                         // 0x04F6(0x0001)
	unsigned char                                      RootMotionRefCount;                                       // 0x04F7(0x0001)
	TEnumAsByte<EGrabTurnType>                         CurrentGrabTurnType;                                      // 0x04F8(0x0001) (Net)
	unsigned char                                      LadderType;                                               // 0x04F9(0x0001) (Net)
	TEnumAsByte<EMovement>                             AnimationMovementState;                                   // 0x04FA(0x0001) (Net)
	TEnumAsByte<EMovement>                             PendingAnimationMovementState;                            // 0x04FB(0x0001)
	TEnumAsByte<EMovement>                             OldMovementState;                                         // 0x04FC(0x0001)
	TEnumAsByte<EMovement>                             PendingMovementState;                                     // 0x04FD(0x0001)
	TEnumAsByte<EMovement>                             MovementState;                                            // 0x04FE(0x0001)
	TEnumAsByte<EMovement>                             ReplicatedMovementState;                                  // 0x04FF(0x0001) (Net)
	TEnumAsByte<EMovement>                             AIAimOldMovementState;                                    // 0x0500(0x0001)
	TEnumAsByte<EWalkingState>                         OverrideWalkingState;                                     // 0x0501(0x0001)
	TEnumAsByte<EWalkingState>                         PendingOverrideWalkingState;                              // 0x0502(0x0001)
	TEnumAsByte<EWalkingState>                         CurrentWalkingState;                                      // 0x0503(0x0001)
	unsigned char                                      ReplicateCustomAnimCount;                                 // 0x0504(0x0001) (Transient)
	TEnumAsByte<EMoveActionHint>                       MoveActionHint;                                           // 0x0505(0x0001)
	unsigned char                                      ReloadCount;                                              // 0x0506(0x0001) (Net)
	unsigned char                                      NoOfBreathingSounds;                                      // 0x0507(0x0001)
	struct FVector                                     AgainstWallLeftHand;                                      // 0x0508(0x000C)
	struct FVector                                     AgainstWallRightHand;                                     // 0x0514(0x000C)
	struct FVector                                     AgainstWallNormal;                                        // 0x0520(0x000C)
	struct FRotator                                    MinLookConstraint;                                        // 0x052C(0x000C)
	struct FRotator                                    MaxLookConstraint;                                        // 0x0538(0x000C)
	float                                              LegRotationSlowTimer;                                     // 0x0544(0x0004)
	int                                                LegRotation;                                              // 0x0548(0x0004)
	float                                              LegRotationSpeed;                                         // 0x054C(0x0004) (Edit, Config)
	int                                                GoBackLegAngleLimitMin;                                   // 0x0550(0x0004) (Config)
	int                                                GoBackLegAngleLimitMax;                                   // 0x0554(0x0004) (Config)
	int                                                LegAngleLimitFudge;                                       // 0x0558(0x0004) (Config)
	float                                              SneakVelocity;                                            // 0x055C(0x0004) (Edit, Config)
	float                                              WalkVelocity;                                             // 0x0560(0x0004) (Edit, Config)
	float                                              JogVelocity;                                              // 0x0564(0x0004) (Edit, Config)
	float                                              RunVelocity;                                              // 0x0568(0x0004) (Edit, Config)
	float                                              SprintVelocity;                                           // 0x056C(0x0004) (Edit, Config)
	float                                              AverageSpeed;                                             // 0x0570(0x0004) (Transient)
	float                                              ASFilterTime;                                             // 0x0574(0x0004) (Edit, Config)
	float                                              ASPollInterval;                                           // 0x0578(0x0004) (Transient)
	float                                              ASPollTimer;                                              // 0x057C(0x0004) (Transient)
	int                                                ASPollSlots;                                              // 0x0580(0x0004) (Transient)
	int                                                ASSlotPointer;                                            // 0x0584(0x0004) (Transient)
	float                                              ASDistanceAccum;                                          // 0x0588(0x0004) (Transient)
	TArray<float>                                      ASTimeData;                                               // 0x058C(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      ASDistanceData;                                           // 0x0598(0x000C) (Transient, NeedCtorLink)
	float                                              NewFloorSmooth;                                           // 0x05A4(0x0004)
	float                                              SmoothOffset;                                             // 0x05A8(0x0004) (Transient)
	struct FRotator                                    FootPlacementStoredRotation;                              // 0x05AC(0x000C) (Transient)
	struct FPawnFootPlacementTrace                     FootPlacementTrace;                                       // 0x05B8(0x001C) (Transient)
	float                                              TargetMeshTranslationZ;                                   // 0x05D4(0x0004)
	class UTdSkeletalMeshComponent*                    Mesh1p;                                                   // 0x05D8(0x0004) (ExportObject, Component, EditInline)
	class UTdSkeletalMeshComponent*                    Mesh3p;                                                   // 0x05DC(0x0004) (ExportObject, Component, EditInline)
	class UTdSkeletalMeshComponent*                    Mesh1pLowerBody;                                          // 0x05E0(0x0004) (ExportObject, Component, EditInline)
	class ATdMovementVolume*                           ActiveMovementVolume;                                     // 0x05E4(0x0004)
	class UClass*                                      MoveManagerClass;                                         // 0x05E8(0x0004)
	class UTdMoveManager*                              MoveManager;                                              // 0x05EC(0x0004)
	TArray<class UClass*>                              MoveClasses;                                              // 0x05F0(0x000C) (Edit, NeedCtorLink)
	TArray<class UTdMove*>                             Moves;                                                    // 0x05FC(0x000C) (Edit, Transient, NeedCtorLink, EditInline)
	float                                              SlideStoppedTimeStamp;                                    // 0x0608(0x0004)
	struct FReplicatedCustomAnimation                  ReplicatedCustomAnim;                                     // 0x060C(0x0018) (Net, NeedCtorLink)
	struct FVector                                     MoveLocation;                                             // 0x0624(0x000C)
	struct FVector                                     MoveNormal;                                               // 0x0630(0x000C)
	class AActor*                                      MovementActor;                                            // 0x063C(0x0004)
	class ATdMovementExclusionVolume*                  MovementExclusionVolume;                                  // 0x0640(0x0004)
	float                                              MaxWallStepHeight;                                        // 0x0644(0x0004)
	struct FVector                                     MoveLedgeLocation;                                        // 0x0648(0x000C)
	struct FVector                                     MoveLedgeNormal;                                          // 0x0654(0x000C)
	int                                                MoveLedgeResult;                                          // 0x0660(0x0004)
	struct FVector                                     LedgeFindExtent;                                          // 0x0664(0x000C)
	float                                              LedgeFindDistance;                                        // 0x0670(0x0004)
	float                                              LedgeFindDepth;                                           // 0x0674(0x0004)
	struct FVector                                     IllegalLedgeNormal;                                       // 0x0678(0x000C)
	float                                              bIllegalLedgeTimer;                                       // 0x0684(0x0004)
	int                                                ActiveMoveTimer;                                          // 0x0688(0x0004)
	int                                                RemoteViewYaw;                                            // 0x068C(0x0004) (Net)
	float                                              EvadeTimer;                                               // 0x0690(0x0004)
	struct FInterpCurveFloat                           SpeedCurve_LightWeapon;                                   // 0x0694(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           SpeedCurve_HeavyWeapon;                                   // 0x06A4(0x0010) (Edit, NeedCtorLink)
	float                                              SpeedMaxBaseVelocity;                                     // 0x06B4(0x0004) (Edit, Config)
	float                                              SpeedMinBaseVelocity;                                     // 0x06B8(0x0004) (Edit, Config)
	float                                              SpeedStrafeVelocityAccelerationFactor;                    // 0x06BC(0x0004) (Edit, Config)
	float                                              SpeedWalkVelocityAccelerationFactor;                      // 0x06C0(0x0004) (Edit, Config)
	float                                              SpeedSprintVelocityAccelerationFactor;                    // 0x06C4(0x0004) (Edit, Config)
	float                                              SpeedEnergyDecelerationTime;                              // 0x06C8(0x0004) (Edit, Config)
	float                                              SpeedEnergyDecelerationExponent;                          // 0x06CC(0x0004) (Edit, Config)
	float                                              SpeedTurnDecelerationFactor;                              // 0x06D0(0x0004) (Edit, Config)
	struct FInterpCurveFloat                           AccelCurve_LightWeapon;                                   // 0x06D4(0x0010) (Transient, NeedCtorLink)
	struct FInterpCurveFloat                           AccelCurve_HeavyWeapon;                                   // 0x06E4(0x0010) (Transient, NeedCtorLink)
	float                                              SpeedSprintEnergy;                                        // 0x06F4(0x0004)
	float                                              UpwardWalkFrictionScale;                                  // 0x06F8(0x0004) (Edit, Config)
	float                                              DownwardWalkFrictionScale;                                // 0x06FC(0x0004) (Edit, Config)
	float                                              MinWalkFrictionModify;                                    // 0x0700(0x0004) (Edit, Config)
	float                                              MaxWalkFrictionModify;                                    // 0x0704(0x0004) (Edit, Config)
	float                                              UpwardSlideFrictionScale;                                 // 0x0708(0x0004) (Edit, Config)
	float                                              DownwardSlideFrictionScale;                               // 0x070C(0x0004) (Edit, Config)
	float                                              BrakingFrictionStrength;                                  // 0x0710(0x0004) (Edit, Config)
	float                                              SoftLockStrength;                                         // 0x0714(0x0004)
	float                                              RollTriggerTime;                                          // 0x0718(0x0004)
	struct FVector                                     UncontrolledSlideNormal;                                  // 0x071C(0x000C)
	float                                              FallingUncontrolledHeight;                                // 0x0728(0x0004) (Edit, Config)
	float                                              EnterFallingHeight;                                       // 0x072C(0x0004) (Transient)
	float                                              SlideEffectUpdateTimer;                                   // 0x0730(0x0004)
	class ATdEmitter*                                  SlideEffectEmitter;                                       // 0x0734(0x0004) (Transient)
	class UAudioComponent*                             SlidingSoundComponent0;                                   // 0x0738(0x0004) (ExportObject, Transient, Component, EditInline)
	class UAudioComponent*                             SlidingSoundComponent1;                                   // 0x073C(0x0004) (ExportObject, Transient, Component, EditInline)
	class USoundCue*                                   DefaultSlidingSound;                                      // 0x0740(0x0004)
	float                                              CustomSoundInput;                                         // 0x0744(0x0004)
	float                                              OverrideSynchPosOffset;                                   // 0x0748(0x0004)
	float                                              StreakEffectOverride;                                     // 0x074C(0x0004)
	float                                              StreakEffectDirection;                                    // 0x0750(0x0004)
	int                                                PatchOne;                                                 // 0x0754(0x0004) (Net)
	int                                                PatchTwo;                                                 // 0x0758(0x0004) (Net)
	int                                                PatchThree;                                               // 0x075C(0x0004) (Net)
	class UClass*                                      ReplicatedWeaponClass;                                    // 0x0760(0x0004) (Net)
	struct FPhysicalHitInfo                            LastPhysHitInfo;                                          // 0x0764(0x002C) (Net, Transient)
	float                                              PhysicsHitReactionBlendTimer;                             // 0x0790(0x0004) (Transient)
	float                                              PhysicsHitReactionBlendOut;                               // 0x0794(0x0004) (Transient)
	float                                              PhysicsHitReactionBlendInTime;                            // 0x0798(0x0004) (Config)
	float                                              PhysicsHitReactionBlendOutTime;                           // 0x079C(0x0004) (Config)
	float                                              PhysicsHitReactionScale;                                  // 0x07A0(0x0004)
	int                                                LastDamageTaken;                                          // 0x07A4(0x0004) (Transient)
	float                                              ArmorBulletsHead;                                         // 0x07A8(0x0004) (Transient)
	float                                              ArmorBulletsBody;                                         // 0x07AC(0x0004) (Transient)
	float                                              ArmorBulletsLegs;                                         // 0x07B0(0x0004) (Transient)
	float                                              ArmorMeleeHead;                                           // 0x07B4(0x0004) (Transient)
	float                                              ArmorMeleeBody;                                           // 0x07B8(0x0004) (Transient)
	float                                              ArmorMeleeLegs;                                           // 0x07BC(0x0004) (Transient)
	struct FArmorSettings                              ArmorBulletsHeadSettings;                                 // 0x07C0(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorBulletsBodySettings;                                 // 0x07CC(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorBulletsLegsSettings;                                 // 0x07D8(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeHeadSettings;                                   // 0x07E4(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeBodySettings;                                   // 0x07F0(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeLegsSettings;                                   // 0x07FC(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorBulletsHeadSettings_CHASE;                           // 0x0808(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorBulletsBodySettings_CHASE;                           // 0x0814(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorBulletsLegsSettings_CHASE;                           // 0x0820(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeHeadSettings_CHASE;                             // 0x082C(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeBodySettings_CHASE;                             // 0x0838(0x000C) (Const, Config)
	struct FArmorSettings                              ArmorMeleeLegsSettings_CHASE;                             // 0x0844(0x000C) (Const, Config)
	float                                              FootstepTraceLength;                                      // 0x0850(0x0004) (Edit, Config)
	float                                              FootstepTraceWidth;                                       // 0x0854(0x0004) (Edit, Config)
	class UPhysicalMaterial*                           DefaultFootstepMaterial;                                  // 0x0858(0x0004)
	class UPhysicalMaterial*                           LastFootstepMaterial;                                     // 0x085C(0x0004) (Transient)
	TArray<class USoundCue*>                           CharacterSoundCues;                                       // 0x0860(0x000C) (Edit, NeedCtorLink)
	float                                              LastFlybyStamp;                                           // 0x086C(0x0004)
	int                                                MaxHealth;                                                // 0x0870(0x0004) (Edit)
	float                                              RegenerateDelay;                                          // 0x0874(0x0004) (Edit, Config)
	float                                              RegenerateHealthPerSecond;                                // 0x0878(0x0004) (Edit, Config)
	float                                              UnrealEngineFallDamageScale;                              // 0x087C(0x0004) (Edit, Config)
	float                                              TimeSinceLastDamage;                                      // 0x0880(0x0004)
	float                                              HealthFrac;                                               // 0x0884(0x0004)
	float                                              TaserDamageLevel;                                         // 0x0888(0x0004) (Net, Transient)
	float                                              RegenerateFromTaserPerSecond;                             // 0x088C(0x0004) (Edit, Config)
	float                                              TaserRegenerateDelay;                                     // 0x0890(0x0004) (Edit, Config)
	float                                              TimeSinceLastTaserDamage;                                 // 0x0894(0x0004) (Transient)
	float                                              StunDamageLevel;                                          // 0x0898(0x0004) (Transient)
	float                                              RegenerateFromStunPerSecond;                              // 0x089C(0x0004) (Edit, Config)
	float                                              MinTimeBeforeRemovingDeadBody;                            // 0x08A0(0x0004)
	float                                              MaxTimeBeforeRemovingDeadBody;                            // 0x08A4(0x0004)
	class AVehicle*                                    PassengerDrivenVehicle;                                   // 0x08A8(0x0004)
	int                                                MyPassengerSeatIndex;                                     // 0x08AC(0x0004)
	float                                              SlideFactor;                                              // 0x08B0(0x0004)
	class ATdGhostManager*                             DebugGhostManager;                                        // 0x08B4(0x0004)
	float                                              LastDamage;                                               // 0x08B8(0x0004)
	float                                              LastDamageTime;                                           // 0x08BC(0x0004)
	float                                              NextDebugPlotTime;                                        // 0x08C0(0x0004)
	struct FVector                                     LastPlotLocation;                                         // 0x08C4(0x000C)
	TArray<struct FFootstepLogInfo>                    FootstepLog;                                              // 0x08D0(0x000C) (NeedCtorLink)
	TArray<struct FFootstepLogInfo>                    BreathingLog;                                             // 0x08DC(0x000C) (NeedCtorLink)
	struct FVector                                     LastJumpLocation;                                         // 0x08E8(0x000C)
	class ATdWeapon*                                   MyWeapon;                                                 // 0x08F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPawn");
		return ptr;
	}


	bool OkToInteract();
	void Interacted();
	void CalculateJumpSpeed();
	void NotifyJump();
	void ResetMoves();
	bool GetStreakValue(struct FVector* StreakDirection);
	void SetWeapon(class AWeapon* W);
	float GetAverageSpeed(float Time);
	void ResetSynchPosOffset();
	void SetSynchPosOffset(float Offset, float Duration);
	void DisableRightHandIK();
	void EnableRightHandIK();
	void DisableLeftHandIK();
	void EnableLeftHandIK();
	void CheckForProximityShots(const struct FVector& Start, const struct FVector& End);
	struct FVector GetViewpointLocation(bool ForceCrouch);
	void PlayIdleDemo();
	void GoIntoUncontrolledFall();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void KillPawn();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	TEnumAsByte<EMoveAimMode> GetAimMode(bool bAimingOnly);
	void StopPassengerDriving(class AVehicle* V);
	void SetAsGunner(class AVehicle* V, int seatIndex, const struct FVector& Offset, float Yaw);
	void StartPassengerDriving(class AVehicle* V, int seatIndex);
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* Action);
	void SetCustomAnimsBlendOutTime(TEnumAsByte<ECustomNodeType> Type, float BlendOutTime);
	bool PlayCustomAnimInternal(class UTdAnimNodeSlot* Node, const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, bool bRootMotion, bool bRootRotation);
	void PlayCustomAnim(TEnumAsByte<ECustomNodeType> Type, const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, bool bRootMotion, bool bRootRotation);
	class UAnimNodeSequence* GetCustomAnimation(TEnumAsByte<ECustomNodeType> Type);
	void ReplicateCustomAnim(TEnumAsByte<ECustomNodeType> Type, const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, bool bRootMotion, bool bRootRotation);
	void PlayReplicatedCustomAnim();
	void StopCustomAnim(TEnumAsByte<ECustomNodeType> Type, float BlendOutTime);
	void StopAllCustomAnimations(float BlendOutTime);
	void SetHipsOffset(const struct FVector& Offset, float BlendTime, bool bFirstPersonMeshOnly);
	void SetRootOffset(const struct FVector& Offset, float BlendTime, TEnumAsByte<EBoneControlSpace> TranslationSpace);
	void PreventMeleeAttack(float Time);
	void StopIgnoreMoveInput();
	void SetIgnoreMoveInput(float Time);
	void StopIgnoreLookInput();
	void SetIgnoreLookInput(float Time);
	void SetFirstPerson(bool Active);
	bool IsTouchingVolume(class AVolume* ActiveVolume);
	void PopAnimationLock();
	void PushAnimationLock();
	void UseRootRotation(bool Use);
	void UseRootMotion(bool Use);
	TEnumAsByte<EWeaponType> GetWeaponType();
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	float GetAIAimingOneShotPenaltySniper();
	float GetAIAimingOneShotPenalty();
	float GetAIAimingPenalty();
	class UParticleSystem* GetSlideEffect(const struct FTraceHitInfo& HitInfo);
	class USoundCue* GetSlideSound(const struct FTraceHitInfo& HitInfo);
	void UpdateSlideEffect();
	struct FTraceHitInfo CheckSlideSurface();
	void StopSlideEffect();
	void StartSlideEffect();
	void PlayMeleeImpact(class UPhysicalMaterial* PhysMat, TEnumAsByte<EMeleeImpactType> Type, const struct FVector& TargetHitLocation, const struct FVector& TargetHitNormal, const struct FVector& TargetHitMomentum, const struct FName& TargetHitBone, class UClass* DamageType);
	bool PreventWeaponImpactEffect(class AController* InstigatorController);
	class UParticleSystem* GetSpecificFootStepEffect(class UTdPhysicalMaterialFootSteps* FootStepSounds, int FootDown);
	class UParticleSystem* GetFootStepEffect(class UPhysicalMaterial* PMaterial, int FootDown);
	class USoundCue* GetSpecificFootStepSound(class UTdPhysicalMaterialFootSteps* FootStepSounds, int FootDown);
	TArray<class USoundCue*> GetFootStepSounds(class UPhysicalMaterial* PMaterial, int FootDown);
	void ActuallyPlayFootParticleEffect(int FootDown, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void ActuallyPlayFootStepSound(int FootDown, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLoc);
	void PlayFootStepSound(int FootDown);
	void DebugActiveMove();
	void DebugMove(const struct FName& MoveName);
	void DebugFootsteps();
	void DisarmCompleted();
	void RootRotationCompletedNotify();
	void EnableRootMotionNotify();
	void MeleeAttackNotify();
	void GetWeaponJointPosition(struct FVector* JointLoc, struct FRotator* JointRot);
	void GetWeaponHandPosition(struct FVector* HandLoc, struct FRotator* HandRot);
	void ReachedWall();
	void FallingOffWall();
	void Tick(float DeltaTime);
	void UpdateVelocityVariables();
	void RegenerateHealth(float DeltaTime);
	void AddBreathingLog(bool bInhaling);
	void DisplayBreathingDebug(class UCanvas* cs);
	void TimedScreenMessage(const struct FString& Message, float Time);
	void DisplayFootstepDebug(class UCanvas* cs);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool CalcCamera(float DeltaTime, struct FVector* out_Location, struct FRotator* out_Rotation, float* out_FOV);
	struct FVector GetFeetLocation();
	struct FVector GetEyeLocation(const struct FVector& baseLocation);
	void SetRemoteViewYaw(int NewRemoteViewYaw);
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	bool InCamAimMode();
	bool AllowStickyAim();
	struct FRotator GetBaseAimRotation();
	void UpdatePhysicalAnimBlendValue(float DeltaTime);
	void StopPhysicsBodyImpact();
	struct FVector GetImpactPhysicsImpulse(const struct FPhysicalHitInfo& Hit);
	bool StartPhysicsBodyImpact(const struct FName& HitBoneName, bool bUseMotors, const struct FPhysicalHitInfo& Hit);
	void PlayPhysicsBodyImpact(class AController* InstigatedBy, const struct FPhysicalHitInfo& Hit);
	bool CanSkillRoll();
	void TakeFallingDamage();
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void ServerTriggerMelee(TEnumAsByte<EMeleeServerAction> ServerAction, unsigned char NewMeleeState);
	void ServerTestMeleeHit(class ATdPawn* Target, float Damage, class UClass* DamageType, const struct FVector& HitLocation, const struct FVector& ImpactMomentum, const struct FTraceHitInfo& Hit);
	void PrepareForMeleeAttack(class UClass* MeleeDamageType);
	void BulletDamage(class ATdPawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType);
	void StumbleDamage(class ATdPawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void StopFaceAnimation(float BlendOutTime);
	void PlayFaceAnimation(const struct FName& AnimSeqName, bool bLooping, float BlendInTime, float BlendOutTime);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* OutMomentum);
	void UpdateDamageStats(class AController* InstigatedBy, class UClass* DamageType);
	void UpdateSpecialDamage(class UClass* DamageType, int* Damage);
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	bool InJesusMode();
	void LoadWeapon(int Slot);
	void LoadFullInventory();
	bool CanAttack(class AActor* Other);
	float sign(float X);
	void PlayTeleportEffect(bool bOut, bool bSound);
	void NotifyActivateUsed(class AActor* InOriginator, class USeqEvent_Used* UsedEvent);
	void ToggleHandIK();
	void DrawDebugAnims(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ShowSkeletalMeshInformation(class UCanvas* Canvas, float* out_YL, float* out_YPos);
	void DisableWeaponPose();
	void EnableWeaponPose();
	void SetWeaponPoseOffsetProfile(const struct FName& ProfileName);
	void SetAimOffsetNodesProfile(const struct FName& NewProfileName);
	bool IsLeftLegForward();
	void SetArmed();
	void SetUnarmed();
	void UpdateWeaponAnimState(float DeltaTime);
	void UpdateRightShoulderOffset();
	void UpdateWeaponSkelControls();
	void SetWeaponAnimState(TEnumAsByte<EWeaponAnimState> AnimState);
	void DisableHandsWorldIK(float ControllerBlendInTime);
	void DisableRightHandWorldIK(float ControllerBlendInTime);
	void DisableLeftHandWorldIK(float ControllerBlendInTime);
	void SetHandsWorldIKLocation(const struct FVector& LeftHandTargetLocation, const struct FVector& RightHandTargetLocation, float ControllerBlendInTime);
	void SetRightHandWorldIKLocation(const struct FVector& TargetLocation, float ControllerBlendInTime);
	void SetLeftHandWorldIKLocation(const struct FVector& TargetLocation, float ControllerBlendInTime);
	void ValueIkControllers();
	void UpdateWeaponPoseProfile(class ATdWeapon* NewWeapon);
	void UpdateDPG(class UMeshComponent* MeshComp);
	void UpdateAnimSets(class ATdWeapon* NewWeapon);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	struct FVector GetSwanNeckTranslation();
	bool AddCameraDeltaAnimations();
	void GetCameraAnimation(struct FVector* out_Location, struct FRotator* out_Rotation);
	void AnimNotifyGrenadeThrow();
	void ReleaseWeaponNotify();
	void WeaponLOINotifyOFF();
	void WeaponLOINotifyON(float EffectDisplayTime);
	void RemoveWeaponAfterDrop();
	void TossWeapon(class AWeapon* Weap, const struct FVector& ForceVelocity);
	void DropWeapon();
	bool CanZoom();
	bool CanDropWeapon();
	void PlayWeaponPutDown();
	void PlayWeaponStoppedReloading();
	struct FName PlayFireAnimation(const struct FName& WeaponAnimSeqName, bool bPlayWeaponAnimSeq);
	void StopReloadAnimation();
	void StopFireAnimation();
	void CeaseFire();
	struct FName PlayReloadAnimation(const struct FName& WeaponAnimSeqName, bool bPlayWeaponAnimSeq);
	float GetReloadPlaybackRate();
	void PlayZoomOutAnimation();
	void PlayZoomInAnimation();
	void PlayWeaponDeploy();
	void FlashLocationUpdated(bool bViaReplication);
	void FlashCountUpdated(bool bViaReplication);
	void WeaponStoppedFiring(bool bViaReplication);
	void WeaponFired(bool bViaReplication, const struct FVector& HitLocation);
	float GetWeaponRecoil();
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void AttachWeaponToHand(class AWeapon* WeaponToAttach);
	void DetachWeaponFromHand(class AWeapon* WeaponToDetach);
	void UpdateRemoteWeapon();
	void RemoteClientSetupInvManager();
	void SwitchHeavyLightWeapon();
	void WeaponStoppedReloading(bool bViaReplication);
	void WeaponStartReloading(bool bViaReplication);
	void ReloadCountUpdated(bool bViaReplication);
	void ClearReloadCount(class AWeapon* Who);
	void IncrementReloadCount(class AWeapon* Who);
	bool IsReloadingAndIsInStateReloading();
	bool IsInStateReloading();
	bool IsReloading();
	bool IsFiring();
	bool HasWeapon();
	void ReplicatedEvent(const struct FName& VarName);
	void SetMoveActionHint(TEnumAsByte<EMoveActionHint> Hint, bool bMax);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void ClearOverrideWalkingStateInternal();
	void OverrideWalkingStateInternal();
	void ClearOverrideWalkingState(float delay);
	void SetOverrideWalkingState(TEnumAsByte<EWalkingState> NewState, float delay);
	void UpdateWalkingState();
	void ClearAnimationMovementStateInternal();
	void SetAnimationMovementStateInternal();
	void ClearAnimationMovementState(float delay);
	void SetAnimationMovementState(TEnumAsByte<EMovement> NewForcedGenericState, float delay);
	void ClientAdjustPreciseLocation(const struct FVector& PreciceLocation, TEnumAsByte<EMovement> ServerMovementState);
	TEnumAsByte<EMovement> GetMove();
	bool IsInMove(TEnumAsByte<EMovement> Move);
	void NotifyNewMove();
	bool SetMove(TEnumAsByte<EMovement> NewMove, bool bViaReplication, bool bCheckCanDo);
	bool CanDoMove(TEnumAsByte<EMovement> NewMove);
	void SetShowGhost(bool bShow);
	void OnTutorialEvent(int TutorialEvent);
	void InitMoveObjects();
	void InitMoves();
	void SetInitialState();
	void InitSwanNeck();
	void CacheAnimNodes();
	void PostBeginPlay();
	void PreBeginPlay();
	void SetArmorDifficultyLevel(int Difficulty);
	void SetDifficultyLevel(int Difficulty);
	void UpdateLegToWorldMatrix(int Yaw);
	void SetTargetMeshZ(float OffsetZ, bool bForceSet);
	void OffsetMeshZ(float OffsetZ);
	void OffsetMeshXY(const struct FVector& Offset, bool bWorldSpace);
	float GetMobilityMultiplier();
	void SyncLegMovement();
	struct FVector GetSprintAcceleration(float aForward, float aStrafe, int DeltaRotation, float DeltaTime);
	struct FVector GetWalkAcceleration(float aForward, float aStrafe, int DeltaRotation, float DeltaTime);
};


// Class TdGame.TdPerformancePoint
// 0x0000 (0x01C0 - 0x01C0)
class ATdPerformancePoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPerformancePoint");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialBase
// 0x0000 (0x003C - 0x003C)
class UTdPhysicalMaterialBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialBase");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialImpactSounds
// 0x0024 (0x0060 - 0x003C)
class UTdPhysicalMaterialImpactSounds : public UTdPhysicalMaterialBase
{
public:
	class USoundCue*                                   LightAmmo;                                                // 0x003C(0x0004) (Edit)
	class USoundCue*                                   HeavyAmmo;                                                // 0x0040(0x0004) (Edit)
	class USoundCue*                                   ShotgunPellet;                                            // 0x0044(0x0004) (Edit)
	class USoundCue*                                   LightShell;                                               // 0x0048(0x0004) (Edit)
	class USoundCue*                                   HeavyShell;                                               // 0x004C(0x0004) (Edit)
	class USoundCue*                                   ShotgunShell;                                             // 0x0050(0x0004) (Edit)
	class USoundCue*                                   SmallGlasShatter;                                         // 0x0054(0x0004) (Edit)
	class USoundCue*                                   MediumGlasShatter;                                        // 0x0058(0x0004) (Edit)
	class USoundCue*                                   LargeGlasShatter;                                         // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialImpactSounds");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialProperty
// 0x0018 (0x0054 - 0x003C)
class UTdPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class UTdPhysicalMaterialFootSteps*                TdPhysicalMaterialFootSteps;                              // 0x003C(0x0004) (Edit, EditInline)
	class UTdPhysicalMaterialImpactEffects*            TdPhysicalMaterialImpactEffects;                          // 0x0040(0x0004) (Edit, EditInline)
	class UTdPhysicalMaterialImpactSounds*             TdPhysicalMaterialImpactSounds;                           // 0x0044(0x0004) (Edit, EditInline)
	class UTdPhysicalMaterialDecals*                   TdPhysicalMaterialDecals;                                 // 0x0048(0x0004) (Edit, EditInline)
	class UTdPhysicalMaterialMelee*                    TdPhysicalMaterialMelee;                                  // 0x004C(0x0004) (Edit, EditInline)
	unsigned long                                      bEnableSoftLanding : 1;                                   // 0x0050(0x0004) (Edit)
	unsigned long                                      bPreventSliding : 1;                                      // 0x0050(0x0004) (Edit)
	unsigned long                                      bEnableUncontrolledSlide : 1;                             // 0x0050(0x0004) (Edit)
	unsigned long                                      bShouldAirBarge : 1;                                      // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialProperty");
		return ptr;
	}


	class USoundCue* GetParticleImpactSound(TEnumAsByte<ECollisionParticleType> Type);
};


// Class TdGame.TdPickup
// 0x0050 (0x0220 - 0x01D0)
class ATdPickup : public ADroppedPickup
{
public:
	struct FRigidBodyState                             RBState;                                                  // 0x01D0(0x0038) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x0208(0x0004) (Const, Native)
	class USoundCue*                                   CollisionSnd;                                             // 0x020C(0x0004) (Transient)
	int                                                AmmoCount;                                                // 0x0210(0x0004) (Transient)
	int                                                ClipCount;                                                // 0x0214(0x0004) (Transient)
	class USkeletalMeshComponent*                      PickMesh;                                                 // 0x0218(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           MeshLightEnvironment;                                     // 0x021C(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPickup");
		return ptr;
	}


	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void CheckForRigidBodySleepState();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void GiveTo(class APawn* P);
	int GetAmmoCount();
	void SetClipCount(int Count);
	void SetAmmoCount(int Count);
	void TurnOffSkelUpdate();
	void SetPickupMesh(class UPrimitiveComponent* PickupMesh);
	void SetAmmoCountByDifficulty(int AmmoEasy, int AmmoMedium, int AmmoHard);
	bool CanBePickedUpBy(class APawn* P);
};


// Class TdGame.TdPlaceableCheckpoint
// 0x0018 (0x032C - 0x0314)
class ATdPlaceableCheckpoint : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0314(0x0004) (Edit)
	unsigned long                                      bActive : 1;                                              // 0x0314(0x0004)
	unsigned long                                      bShouldBeBased : 1;                                       // 0x0314(0x0004) (Edit)
	TScriptInterface<class UTdCheckpointListener>      Listener;                                                 // 0x0318(0x0008) (Transient)
	int                                                ActiveIndex;                                              // 0x0320(0x0004) (Transient)
	class UStaticMeshComponent*                        CheckpointMesh;                                           // 0x0324(0x0004) (Const, ExportObject, Component, EditInline)
	class ATdCheckpointVolume*                         TouchVolume;                                              // 0x0328(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlaceableCheckpoint");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnTouchedVolume(class ATdPlayerPawn* Pawn, class ATdPlayerController* Controller);
	void SetDirectionHint(const struct FRotator& NextCheckpointHint);
	bool IsCheckpointInTrack(int TrackIndex);
	void Show(bool bShow, int Track, bool bNoFade);
	void SetListener(const TScriptInterface<class UTdCheckpointListener>& InListener);
	bool ShouldGenerateTrackData(int TrackIndex);
	void SetLastCheckpoint(int TrackIndex);
	int GetOrderIndexForTrack(int TrackIndex);
	int GetOrderIndex(int ArrayIdx);
	int GetTrackIndex(int ArrayIdx);
	int GetNumTracks();
	void Reset();
};


// Class TdGame.TdPlayerController
// 0x0170 (0x0698 - 0x0528)
class ATdPlayerController : public AGamePlayerController
{
public:
	struct FPointer                                    VfTable_ITdController;                                    // 0x0528(0x0004) (Const, Native, NoExport)
	unsigned long                                      InfiniteAmmo : 1;                                         // 0x052C(0x0004)
	unsigned long                                      bDebugPostProcessFreeFlight : 1;                          // 0x052C(0x0004) (Config)
	unsigned long                                      bReleasedJump : 1;                                        // 0x052C(0x0004)
	unsigned long                                      bLeftThumbStickPassedDeadZone : 1;                        // 0x052C(0x0004)
	unsigned long                                      bRightThumbStickPassedDeadZone : 1;                       // 0x052C(0x0004)
	unsigned long                                      bDebugCloseCombat : 1;                                    // 0x052C(0x0004)
	unsigned long                                      bDisableSkipCutscenes : 1;                                // 0x052C(0x0004)
	unsigned long                                      bReactionTime : 1;                                        // 0x052C(0x0004)
	unsigned long                                      bOverrideReactionTimeSettings : 1;                        // 0x052C(0x0004)
	unsigned long                                      bJesusMode : 1;                                           // 0x052C(0x0004)
	unsigned long                                      bStefanMode : 1;                                          // 0x052C(0x0004)
	unsigned long                                      bIsWalking : 1;                                           // 0x052C(0x0004)
	unsigned long                                      bIsStopping : 1;                                          // 0x052C(0x0004)
	unsigned long                                      FailedToSpawn : 1;                                        // 0x052C(0x0004)
	unsigned long                                      bDisableLoadFromLastCheckpoint : 1;                       // 0x052C(0x0004)
	unsigned long                                      bDebugSoundMixGroups : 1;                                 // 0x052C(0x0004) (Edit, Config)
	unsigned long                                      bDebugSoundVelocity : 1;                                  // 0x052C(0x0004) (Edit, Config)
	unsigned long                                      bDebugSoundReverbVolumes : 1;                             // 0x052C(0x0004) (Edit, Config)
	unsigned long                                      ControllerTilt : 1;                                       // 0x052C(0x0004) (Transient)
	unsigned long                                      VisualizeControllerTilt : 1;                              // 0x052C(0x0004)
	unsigned long                                      bRopeburnDisarmSucceeded : 1;                             // 0x052C(0x0004)
	float                                              TimePressedJump;                                          // 0x0530(0x0004)
	float                                              JumpTapTime;                                              // 0x0534(0x0004) (Config)
	float                                              BagSearchTapTime;                                         // 0x0538(0x0004) (Config)
	float                                              LastEmoteMessageTime;                                     // 0x053C(0x0004)
	float                                              AllowedEmoteMessageInterval;                              // 0x0540(0x0004) (Config)
	class UClass*                                      TdEmoteMessageClass;                                      // 0x0544(0x0004) (Transient)
	class ATdPawn*                                     TargetingPawn;                                            // 0x0548(0x0004) (Transient)
	float                                              TargetingPawnInterp;                                      // 0x054C(0x0004) (Transient)
	float                                              TargetingCutoffAngle;                                     // 0x0550(0x0004) (Config)
	class ATdPawn*                                     TargetPawn;                                               // 0x0554(0x0004)
	class AActor*                                      TargetActor;                                              // 0x0558(0x0004)
	struct FVector                                     TargetActorLocation;                                      // 0x055C(0x000C)
	float                                              LookAtTimeDelay;                                          // 0x0568(0x0004) (Config)
	class ATdLookAtPoint*                              CurrentLookAtPoint;                                       // 0x056C(0x0004)
	class ATdLookAtPoint*                              CurrentForcedLookAtPoint;                                 // 0x0570(0x0004)
	TEnumAsByte<EMovementAction>                       MeleeLastAction;                                          // 0x0574(0x0001)
	unsigned char                                      bIgnoreButtonInput;                                       // 0x0575(0x0001)
	TEnumAsByte<ESoundMode>                            CurrentSoundMode;                                         // 0x0576(0x0001)
	TEnumAsByte<EWalkingState>                         CachedWalkingState;                                       // 0x0577(0x0001) (Transient)
	float                                              CloseCombatMinRange;                                      // 0x0578(0x0004) (Config)
	float                                              CloseCombatMaxRange;                                      // 0x057C(0x0004) (Config)
	float                                              CloseCombatRangeTime;                                     // 0x0580(0x0004) (Config)
	float                                              CloseCombatMaxAngle;                                      // 0x0584(0x0004) (Config)
	float                                              CloseCombatPawnDistanceBias;                              // 0x0588(0x0004) (Config)
	float                                              InputSize;                                                // 0x058C(0x0004)
	float                                              InputMaxSprintRaduisLimit;                                // 0x0590(0x0004) (Edit, Config)
	float                                              InputMaxSprintHeightLimit;                                // 0x0594(0x0004) (Edit, Config)
	float                                              InputMaxWalkRadiusLimit;                                  // 0x0598(0x0004) (Edit, Config)
	float                                              WallRunningAlignTime;                                     // 0x059C(0x0004) (Edit, Config)
	int                                                WallRunningAlignYaw;                                      // 0x05A0(0x0004)
	int                                                LOIIndex;                                                 // 0x05A4(0x0004)
	float                                              ReactionTimeEnergy;                                       // 0x05A8(0x0004)
	float                                              ReactionTimeSpawnLevel;                                   // 0x05AC(0x0004) (Edit, Const, Config)
	float                                              ReactionTimeDrain;                                        // 0x05B0(0x0004) (Edit, Const, Config)
	float                                              ReactionTimeMaxEffect;                                    // 0x05B4(0x0004) (Edit, Const, Config)
	float                                              ReactionTimeFadeIn;                                       // 0x05B8(0x0004) (Edit, Const, Config)
	float                                              ReactionTimeFadeOut;                                      // 0x05BC(0x0004) (Edit, Const, Config)
	float                                              ReactionTimeEnergyBuildRate;                              // 0x05C0(0x0004) (Edit, Transient)
	struct FReactionTimeSettings                       ReactionTimeBuildRates;                                   // 0x05C4(0x000C) (Const, Config)
	float                                              WallClimbingDodgeJumpThreshold;                           // 0x05D0(0x0004) (Edit, Config)
	float                                              WallRunningDodgeJumpThreshold;                            // 0x05D4(0x0004) (Edit, Config)
	float                                              WalkCyclePart1;                                           // 0x05D8(0x0004) (Config)
	float                                              WalkCyclePart2;                                           // 0x05DC(0x0004) (Config)
	float                                              AccelerationTime;                                         // 0x05E0(0x0004) (Config)
	float                                              StopAnimBlendIn;                                          // 0x05E4(0x0004) (Config)
	float                                              StopAnimBlendOut;                                         // 0x05E8(0x0004) (Config)
	float                                              StoppingVelocity;                                         // 0x05EC(0x0004) (Config)
	TArray<struct FLocalEnemy>                         LocalEnemies;                                             // 0x05F0(0x000C) (NeedCtorLink)
	int                                                NextLocalEnemyToCheckLOS;                                 // 0x05FC(0x0004)
	float                                              LastEnemyNetSendTime;                                     // 0x0600(0x0004) (Transient)
	class UTdDebugOutput*                              DebugOutput;                                              // 0x0604(0x0004)
	struct FRotator                                    VehicleRotation;                                          // 0x0608(0x000C)
	struct FRotator                                    DriverRotation;                                           // 0x0614(0x000C)
	int                                                Team;                                                     // 0x0620(0x0004) (Edit, Config)
	class ATdPlayerPawn*                               myPawn;                                                   // 0x0624(0x0004) (Net)
	class AActor*                                      StickyActor;                                              // 0x0628(0x0004)
	float                                              StickySpeed;                                              // 0x062C(0x0004) (Edit, Config)
	float                                              FOVZoomRate;                                              // 0x0630(0x0004)
	float                                              FOVZoomDelay;                                             // 0x0634(0x0004) (Transient)
	float                                              MouseX;                                                   // 0x0638(0x0004)
	float                                              MouseY;                                                   // 0x063C(0x0004)
	class UClass*                                      CharacterClass;                                           // 0x0640(0x0004)
	class ATdAnnouncerBase*                            Announcer;                                                // 0x0644(0x0004)
	class UClass*                                      TutorialDataClass;                                        // 0x0648(0x0004)
	class UClass*                                      TimeTrialDataClass;                                       // 0x064C(0x0004)
	class UClass*                                      StringAliasBindingsMapClass;                              // 0x0650(0x0004)
	class UUIDataStore_TdTutorialData*                 TutorialDataStore;                                        // 0x0654(0x0004) (Transient)
	class UUIDataStore_TdTimeTrialData*                TimeTrialDataStore;                                       // 0x0658(0x0004) (Transient)
	class UUIDataStore_TdStringAliasBindingsMap*       StringAliasBindingsMapStore;                              // 0x065C(0x0004) (Transient)
	class UTdStatsManager*                             StatsManager;                                             // 0x0660(0x0004) (Transient)
	float                                              ActualAccelX;                                             // 0x0664(0x0004) (Transient)
	float                                              ActualAccelY;                                             // 0x0668(0x0004) (Transient)
	float                                              ActualAccelZ;                                             // 0x066C(0x0004) (Transient)
	float                                              SixAxisDisarmZ;                                           // 0x0670(0x0004) (Config)
	float                                              SixAxisDisarmY;                                           // 0x0674(0x0004) (Config)
	float                                              SixAxisRollZ;                                             // 0x0678(0x0004) (Config)
	float                                              SixAxisRollY;                                             // 0x067C(0x0004) (Config)
	float                                              DisarmTimeMultiplier;                                     // 0x0680(0x0004) (Transient)
	float                                              LastZAxisTilt;                                            // 0x0684(0x0004)
	float                                              LastYAxisTilt;                                            // 0x0688(0x0004)
	TArray<class USeqEvt_TdWeaponFired*>               WeaponFiredEvents;                                        // 0x068C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerController");
		return ptr;
	}


	void SetUseTiltForwardAndBack(bool bActive);
	void SetOnlyUseControllerTiltInput(bool bActive);
	void SetControllerTiltActive(bool bActive);
	void SetControllerTiltDesiredIfAvailable(bool bActive);
	bool IsControllerTiltActive();
	struct FMatrix GetInvViewProjection();
	void InitializeNavigation();
	bool SkipCutscene();
	bool IsCutsceneSkippable();
	void ResetPlayerMovementInput();
	int GetMapId(bool TimeTrial);
	void ClientSetOnlineStatus();
	void ClientEndZoom();
	void UnZoom();
	void EndZoom();
	void SetNearClippingPlane(float Value);
	void ClientStopZoom();
	void StartZoom(float NewDesiredFOV, float NewZoomRate, float delay);
	void AdjustFOV(float DeltaTime);
	void ZoomWeapon();
	void ClientUnlockAchievement(int AchievementId, const struct FString& Description);
	void UnlockAchievement(int AchievementId);
	void OnTTStretchCompleted(class UTdTTResult* OnlineResult, class UTdTTResult* OfflineResult);
	void OnLRCompleted(class UTdTTResult* OnlineResult, class UTdTTResult* OfflineResult);
	void TriggerPickupFlash();
	void OnLevelCompleted(int LevelIndex, class ATdSPGame* Game);
	bool CanLoadFromLastCheckpoint();
	void OnDisableLoadFromLastCheckpoint(class USeqAct_DisableLoadFromLastCheckpoint* Action);
	void Reset();
	void CallPopUp(TEnumAsByte<EPopUpType> Type, float Duration);
	void OnErrorMessageBoxClosed(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnShowErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowErrorMessageBox();
	void OnProfileWriteComplete(bool bSuccess);
	void TryWriteProfile();
	void AddStatsEvent(TEnumAsByte<EAchievementStatsID> Id);
	void SaveStatsToProfile(bool bLevelStats, bool bGameStats, bool bGlobalStats);
	void LoadStatsFromProfile(bool bLevelStats, bool bGameStats, bool bGlobalStats);
	void ResetStats(bool bLevelStats, bool bGameStats, bool bGlobalStats);
	int GetStatCount(TEnumAsByte<EAchievementStatsID> Id);
	void ShowAchievementStats();
	void TdUnregisterPlayerDataStores();
	void TdRegisterPlayerDataStores();
	void SetContrast(float ContrastValue);
	void SetGamma(float GammaValue);
	void SetNewDifficulty(int I);
	bool IsAiRunnerVisionEnabled();
	void UpdateFaithOVisionFlag(int DifficultyLevel);
	int GetFaithOVisionFromProfile();
	int GetDifficultyLevel();
	void SetDifficultyLevel(int Level);
	void SetGameProfileSettings();
	void SetControlBindingsProfileSettings(TArray<struct FKeyBind> PresetMappings);
	void SetMouseProfileSettings();
	void ClearDataStoreBindingsCache();
	void SetKeyBindingsProfileSettings();
	void SetVideoProfileSettings();
	void SetAudioProfileSettings();
	void RetrieveSettingsFromProfile();
	bool SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate);
	void UnregisterPlayerDataStores();
	void RegisterPlayerDataStores();
	void SetInputHint();
	bool ShouldDelayJump();
	void CheckJumpReleased();
	void CheckJumpPressed();
	void CheckCrouch();
	void PlayIdleDemo();
	void LookAtRelease();
	void LookAtPress();
	void ServerUseCarriedObject(bool bTapped);
	void UseCarriedObject();
	bool TriggerInteracted();
	void UseRelease();
	void UsePress();
	class ATdPawn* GetHumanTarget(float MaxDistance, float MaxAngle);
	void ServerTriggerSnatch(class ATdPawn* TargetPawnReplication);
	bool SnatchAttempt();
	bool InMeleeMove();
	class AActor* GetOtherTarget(float MaxDistance, struct FVector* HitLocation);
	void AttackRelease();
	void AttackPress();
	void ServerLookBehind();
	void LookBehind();
	void ForceNewStickyActor(class AActor* NewStickyActor);
	void UpdateStickyAim(float DeltaTime);
	void AttemptReactionTime();
	void ForceFullReactionTimeEnergy();
	void OnTdAddAdditionalAnimSets(class USeqAct_TdAddAdditionalAnimSets* Action);
	void OnTdTutorialReset(class USeqAct_TdTutorialReset* Action);
	void OnTdFadeEffect(class USeqAct_TdFadeEffect* Action);
	void OnTdBlockWhileLoading(class USeqAct_TdBlockWhileLoading* Action);
	bool IsLoadingLevel();
	void OnTdDisableReactionTime(class USeqAct_TdDisableReactionTime* Action);
	void OnTdEnableReactionTime(class USeqAct_TdEnableReactionTime* Action);
	void OnTdGiveFullReactionEnergy(class USeqAct_TdGiveFullReactionEnergy* Action);
	void UpdateReactionTime(float DeltaTime);
	void UpdateRotation(float DeltaTime);
	void VaultServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View);
	void RMServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View);
	void SendServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void ToggleDynamicContrast();
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	void InitInputSystem();
	void ClientUpdatePosition();
	void OnProfileReadComplete(bool bSucceeded);
	bool IsButtonInputIgnored();
	void IgnoreButtonInput(bool bNewButtonInput);
	void CallSkippablePopUp();
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bSwitchSoundMode);
	void OnTdDisablePlayerInput(class USeqAct_TdDisablePlayerInput* Action);
	void OnTdEnablePlayerInput(class USeqAct_TdEnablePlayerInput* Action);
	void OnToggleGodMode(class USeqAct_ToggleGodMode* inAction);
	void AcknowledgePossession(class APawn* P);
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void PostBeginPlay();
	void PreBeginPlay();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void UpdateMomentumStats(float DeltaTime);
	void PlayerTick(float DeltaTime);
	void MaintainEnemyList();
	void OnMovementStateChange(const struct FName& NewState);
	void SetCameraRotationAid(const struct FRotator& desiredRot);
	float GetGrabJumpTime();
	struct FVector GetFloor();
	void KickWarning();
	void PawnDied(class APawn* inPawn);
	bool ViewAPlayer(int Dir);
	void ServerViewPrevSpectatorPoint();
	void ServerViewNextSpectatorPoint();
	void PrevStaticViewTarget();
	void NextStaticViewTarget();
	void ClientForcePreRoundSpectate();
	void ForcePreRoundSpectate();
	void ClientRestart(class APawn* NewPawn);
	class UPlayerOwnerDataStore* GetCurrentPlayerData();
	void OpenInGameMenu();
	void DelayedPauseGame();
	void PauseGame();
	void Pause();
	void StartFire(unsigned char FireModeNum);
	void StopAltFire(unsigned char FireModeNum);
	void StartAltFire(unsigned char FireModeNum);
	void ToggleDebugger();
	void ToggleServerDebugger();
	void StopSounds(float FadeOutTime, const struct FName& SoundGroup);
	void ClearSoundMode();
	void SetSoundMode(TEnumAsByte<ESoundMode> SoundMode, float Duration, bool WithForce, float FadeTime);
	bool CanDoSoundMode(TEnumAsByte<ESoundMode> SoundMode);
	void Kismet_ClientTdPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float LowPassMultiplier, float OcclusionCheckInterval, float OcclusionVolumeDuckLevel, float OcclusionFilterDuckLevel, float OcclusionFadeTime, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization, const struct FVector& SoundOffset, bool bSoundOffsetDebug);
	void ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded);
	void ReplicateSound(class USoundCue* SCue, class APawn* Source);
	void FreeFlightCamera(unsigned char FireModeNum);
	void SetCameraMode(const struct FName& NewCamMode);
	bool IsInMainMenu();
	void OnTdPlayerFail(class USeqAct_TdPlayerFail* FailAction);
	void TdPlayerFailDead();
	void OnExternalUIChanged(bool bIsOpening);
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void OnTdSlideshow(class USeqAct_TdSlideShow* Action);
	void SetFixedPersonCameraSettings(class AActor* A);
	void SwitchMesh(unsigned char FireModeNum);
	void LockCameraOnTarget(unsigned char FireModeNum);
	void ListWeapons();
	void PickWeapon(int Index);
	void PrevWeapon();
	void NextWeapon();
	void PressedSwitchWeapon();
	void ReloadWeapon();
	void NotifyWeaponFired(class AWeapon* PlayerWeapon);
	void ServerTriggerEmoteMessage(int Switch);
	void TriggerEmoteMessage(int Switch);
	void PlayAnnouncement(class UClass* InMessageClass, class USoundNodeWave* Announcement);
	void ClientPlayAnnouncement(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* PRI_2, class APlayerReplicationInfo* PRI_3);
	void ClientSetHUD(class UClass* newHUDType, class UClass* newScoringType);
	void ClientPlayTakeHit(const struct FVector& HitLoc, unsigned char Damage, class UClass* DamageType);
	void PrevViewTarget();
	void NextViewTarget();
	void EnableHighPrioLoading(bool bEnable);
	void ConditionalBlockWhileLoading();
	void OnLoadLevels(bool bUnload);
	void QuitGame();
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ClientOpenScene(const struct FName& Scene);
	void TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	class UTdProfileSettings* GetProfileSettings();
	void SetCharacter(const struct FString& inCharacter);
	bool CheckCutsceneSkippable();
	void SetSoundModeNative(TEnumAsByte<ESoundMode> SoundMode, float FadeTime);
	void LocalEnemyActors(class ATdPawn** enemyIt);
	class ATdPawn* GetMeleeTarget(float MaxDistance);
	class ATdPawn* GetAATarget(float MaxDistance);
	int GetTeam();
};


// Class TdGame.TdPlayerInput
// 0x0018 (0x0188 - 0x0170)
class UTdPlayerInput : public UPlayerInput
{
public:
	unsigned long                                      bViewAccelEnabled : 1;                                    // 0x0170(0x0004) (Edit)
	unsigned long                                      bWalkButtonPressed : 1;                                   // 0x0170(0x0004)
	unsigned long                                      bInvertGamepadYAxis : 1;                                  // 0x0170(0x0004)
	float                                              YawAccelThreshold;                                        // 0x0174(0x0004) (Edit)
	float                                              MaxSensitivityMultiplier;                                 // 0x0178(0x0004) (Config)
	float                                              MinSensitivityMultiplier;                                 // 0x017C(0x0004) (Config)
	float                                              SensitivityMultiplier;                                    // 0x0180(0x0004)
	float                                              WalkButtonMultiplier;                                     // 0x0184(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerInput");
		return ptr;
	}


	void SetBind(const struct FName& BindName, const struct FString& Command);
	struct FString GetTdBindNameFromCommand(const struct FString& BindCommand, bool bForceUsingGamepad);
	void PostProcessInput(float DeltaTime);
	void PlayerInput(float DeltaTime);
	TEnumAsByte<EDoubleClickDir> CheckForDoubleClickMove(float DeltaTime);
	void ViewAcceleration(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void SetRangedSensitivityMultiplier(float RangeVal);
	void CycleWeapon();
	void ReleaseButton(const struct FName& buttonname);
	void PressButton(const struct FName& buttonname);
	void StopJump();
	void Jump();
	void StopWalkMod();
	void WalkMod();
	void StopCrouch();
	void Crouch();
	void InvertGamepadYAxis(bool InvertYAxis);
	void InitInputSystem(class UClass* GameInfoClass);
};


// Class TdGame.TdPlayerPawn
// 0x00EC (0x09E4 - 0x08F8)
class ATdPlayerPawn : public ATdPawn
{
public:
	TArray<class UMorphNodeWeight*>                    MorphNodeWeight1p;                                        // 0x08F8(0x000C) (NeedCtorLink)
	unsigned long                                      bHasMorphNodes : 1;                                       // 0x0904(0x0004)
	unsigned long                                      bStuckOnGround : 1;                                       // 0x0904(0x0004)
	unsigned long                                      bPlayerDiedHoldingTheBag : 1;                             // 0x0904(0x0004) (Transient)
	unsigned long                                      bIsInShadowAlteringMoveState : 1;                         // 0x0904(0x0004)
	unsigned long                                      bEnableHairPhysics : 1;                                   // 0x0904(0x0004) (Edit)
	unsigned long                                      bLockBase : 1;                                            // 0x0904(0x0004)
	unsigned long                                      bCutsceneIsSkippable : 1;                                 // 0x0904(0x0004)
	TArray<struct FName>                               BoneNames1p;                                              // 0x0908(0x000C) (NeedCtorLink)
	TArray<struct FName>                               HandNormalMapNames1p;                                     // 0x0914(0x000C) (NeedCtorLink)
	class USkelControlSingleBone*                      BlinkControl;                                             // 0x0920(0x0004)
	class UTdSkelControlRandom*                        CameraNoiseControlRoll1p;                                 // 0x0924(0x0004)
	class UTdSkelControlRandom*                        CameraNoiseControlPitch1p;                                // 0x0928(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              FirstPersonDPG;                                           // 0x092C(0x0001)
	TEnumAsByte<ESceneDepthPriorityGroup>              FirstPersonLowerBodyDPG;                                  // 0x092D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x092E(0x0002) MISSED OFFSET
	class UAudioComponent*                             WindSound;                                                // 0x0930(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   WindSoundSC;                                              // 0x0934(0x0004)
	class UAudioComponent*                             FallingSound;                                             // 0x0938(0x0004) (ExportObject, Component, EditInline)
	float                                              VertigoEdgeProbingHeight;                                 // 0x093C(0x0004) (Edit, Config)
	float                                              VertigoEdgeProbingDistance;                               // 0x0940(0x0004) (Edit, Config)
	float                                              VertigoEffectThreshold;                                   // 0x0944(0x0004) (Edit, Config)
	float                                              EdgeCheckMaxSpeed;                                        // 0x0948(0x0004) (Edit, Config)
	float                                              EdgeCheckDistance;                                        // 0x094C(0x0004) (Edit, Config)
	float                                              EdgeStopMinHeight;                                        // 0x0950(0x0004) (Edit, Config)
	float                                              LastEnemyHitTimeOut;                                      // 0x0954(0x0004) (Transient)
	class ATdReverbVolume*                             CurrentReverbVolume;                                      // 0x0958(0x0004) (Edit)
	float                                              ReverbVolumeTimer;                                        // 0x095C(0x0004) (Transient)
	float                                              ReverbVolumePollTime;                                     // 0x0960(0x0004) (Edit, Config)
	float                                              OcclusionDuckLevel;                                       // 0x0964(0x0004) (Edit, Config)
	float                                              OcclusionDuckFadeTime;                                    // 0x0968(0x0004) (Edit, Config)
	int                                                IndoorSoundGroupIndex;                                    // 0x096C(0x0004) (Transient)
	TArray<int>                                        OutdoorSoundGroupIndexes;                                 // 0x0970(0x000C) (Transient, NeedCtorLink)
	int                                                IndoorMixGroupIndex;                                      // 0x097C(0x0004) (Transient)
	int                                                OutdoorMixGroupIndex;                                     // 0x0980(0x0004) (Transient)
	class UTdCarriable*                                CarriedObject;                                            // 0x0984(0x0004) (Transient)
	float                                              MovementStringAllowedGap;                                 // 0x0988(0x0004) (Const, Config)
	float                                              MovementStringGapTimer;                                   // 0x098C(0x0004) (Transient)
	TArray<class UClass*>                              MovementStringHistory;                                    // 0x0990(0x000C) (Transient, NeedCtorLink)
	float                                              PlayerBulletDamageMultiplier;                             // 0x099C(0x0004) (Const, Config)
	struct FVector                                     FocusLocation;                                            // 0x09A0(0x000C) (Transient)
	struct FVector                                     PlayerCameraLocation;                                     // 0x09AC(0x000C)
	struct FRotator                                    PlayerCameraRotation;                                     // 0x09B8(0x000C)
	TArray<struct FName>                               HairBones;                                                // 0x09C4(0x000C) (Transient, NeedCtorLink)
	int                                                DebugPlayerGraph;                                         // 0x09D0(0x0004)
	float                                              LastDebugGraphValue;                                      // 0x09D4(0x0004)
	int                                                SimulatedBadFPS;                                          // 0x09D8(0x0004)
	float                                              FocusLocationInterpolationSpeed;                          // 0x09DC(0x0004) (Config)
	float                                              LastResetTimeStamp;                                       // 0x09E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerPawn");
		return ptr;
	}


	void SetShadowType(class USkeletalMeshComponent* MyMesh, TEnumAsByte<ELightShadowMode> ShadowMode);
	void NotifyPlayerSwitchedWeapon(class AWeapon* PlayerWeapon);
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void UpdateDPG(class UMeshComponent* MeshComp);
	void FinishAnimControl();
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void CheckForSkippableCutscene();
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void MAT_FinishAnimControl();
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void TurnOffRootMotion();
	void PlayDeathAnim();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DisableHairRagdoll();
	void EnableHairRagdoll();
	void Init1pArms();
	void CacheAnimNodes1P();
	void Enable1P();
	void Init1P();
	void ClientRestart();
	void Restart();
	void PostBeginPlay();
	void ToggleBlendShapes();
	void DisableFootPlacement();
	void EnableFootPlacement(float BlendTime);
	void ToggleFootPlacement();
	void MoveRumbleNotify();
	void BargeHitNotify();
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	class UParticleSystem* GetSpecificFootStepEffect(class UTdPhysicalMaterialFootSteps* FootStepEffects, int FootDown);
	class USoundCue* GetSpecificFootStepSound(class UTdPhysicalMaterialFootSteps* FootStepSounds, int FootDown);
	void SetFocusLocation(const struct FVector& iFocusLocation);
	struct FVector GetFocusLocation();
	void UpdateFocusLocation(float DeltaTime);
	void SetDefaultFov();
	void SetFOV(float NewFOV, float Rate);
	bool CalcCamera(float DeltaTime, struct FVector* out_Location, struct FRotator* out_Rotation, float* out_FOV);
	struct FRotator GetPawnViewRotation();
	struct FVector GetPawnViewLocation();
	void SetHipsOffset(const struct FVector& Offset, float BlendTime, bool bFirstPersonMeshOnly);
	void StartUnStringableMove();
	void StartStringableMove(class UClass* CL);
	void UpdateMovementString(float DeltaTime);
	void StopAgainstWall();
	void ReleaseCameraConstraintsAgainstWall();
	void Tick(float DeltaTime);
	void GoIntoUncontrolledFall();
	void TakeFallingDamage();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void NotifyPlayerDeath();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void PlayMeleeImpact(class UPhysicalMaterial* PhysMat, TEnumAsByte<EMeleeImpactType> Type, const struct FVector& TargetHitLocation, const struct FVector& TargetHitNormal, const struct FVector& TargetHitMomentum, const struct FName& TargetHitBone, class UClass* DamageType);
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void OnTdPause(class USeqAct_TdPause* Action);
	void OnTdFallOnBack(class USeqAct_TdFallOnBack* Action);
	void OnTdPauseTimer(class USeqAct_TdPauseTimer* Action);
	void OnTdInElevator(class USeqAct_TdInElevator* Action);
	void OnTdDisablePlayerInput(class USeqAct_TdDisablePlayerInput* Action);
	void OnTdEnablePlayerInput(class USeqAct_TdEnablePlayerInput* Action);
	void OnTdGiveFullReactionEnergy(class USeqAct_TdGiveFullReactionEnergy* Action);
	void OnTdDisableReactionTime(class USeqAct_TdDisableReactionTime* Action);
	void OnTdEnableReactionTime(class USeqAct_TdEnableReactionTime* Action);
	void SetDifficultyLevel(int Level);
	void SlideOffLedge();
	void SetMovementPhysics();
	void ForceDropBag(const struct FVector& Force);
	bool DropCarriedObject(const struct FVector& StartLocation, const struct FRotator& StartRotation, const struct FVector& WithForce);
	bool CarryObject(class UTdCarriable* InCarriable);
	bool IsCarryingObject();
	bool IsCarryingBag();
	class APawn* GetCarryingPawn();
	void SetFirstPersonLowerBodyDPG(TEnumAsByte<ESceneDepthPriorityGroup> DPG);
	void SetFirstPersonDPG(TEnumAsByte<ESceneDepthPriorityGroup> DPG);
	void ResetAmbientShadowDirection(bool isShadowAlteringMove);
	void SetAmbientShadowDirection(const struct FVector& Direction, bool isShadowAlteringMove);
	TEnumAsByte<ESceneDepthPriorityGroup> GetFirstPersonLowerBodyDPG();
	TEnumAsByte<ESceneDepthPriorityGroup> GetFirstPersonDPG();
	float GetMobilityMultiplier();
	void UpdateAgainstWall();
	TEnumAsByte<EAgainstWallState> CheckAgainstWall();
	void Update1pArms(float DeltaTime);
	bool CheckValidFloor(const struct FVector& CurrentDelta, const struct FVector& CheckFloor, bool bSlideOff);
};


// Class TdGame.TdPlayerReplicationInfo
// 0x000C (0x0264 - 0x0258)
class ATdPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	int                                                ClientVersion;                                            // 0x0258(0x0004)
	int                                                RoleIndexInTeam;                                          // 0x025C(0x0004) (Net)
	unsigned long                                      bPlayerIsReady : 1;                                       // 0x0260(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerReplicationInfo");
		return ptr;
	}


	void RequestSetReady();
	void RequestRoleChange(int NewRoleIndex);
	void RequestTeamChange(int NewTeam);
	void ScoreInterceptedCarriedObject();
	void ScorePassedCarriedObject();
	void OnUseCarriedObject(class AActor* inActor);
	void OnDropCarriedObject(class AActor* inActor);
	void OnCarryObject(class AActor* inActor);
	void ServerSetClientVersion(int I);
	void ClientInitialize(class AController* C);
	void ReplicatedEvent(const struct FName& VarName);
	void Destroyed();
	void UpdateLobbyBackend();
};


// Class TdGame.TdPlayerStart
// 0x0010 (0x032C - 0x031C)
class ATdPlayerStart : public APlayerStart
{
public:
	float                                              Radius;                                                   // 0x031C(0x0004) (Edit)
	int                                                SpawnPointID;                                             // 0x0320(0x0004) (Edit)
	class UDrawSphereComponent*                        SphereRenderComponent;                                    // 0x0324(0x0004) (ExportObject, Component, EditInline)
	class USpriteComponent*                            GenericSprite;                                            // 0x0328(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerStart");
		return ptr;
	}

};


// Class TdGame.TdProfileSettings
// 0x003F (0x00BC - 0x007D)
class UTdProfileSettings : public UOnlineProfileSettings
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	TArray<struct FString>                             DigitalButtonActionsToCommandMapping;                     // 0x0080(0x000C) (NeedCtorLink)
	TArray<struct FName>                               KeyMappingArray;                                          // 0x008C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               GamepadMappingArray;                                      // 0x0098(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        TTUnlockLevelCompletedMap;                                // 0x00A4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FTTUnLockCriteria>                   TTUnlockTTCompletedMap;                                   // 0x00B0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProfileSettings");
		return ptr;
	}


	bool IsProfileSettingEnabled(const struct FName& FieldName, int Index);
	bool GetLastSavedCheckpoint(struct FString* CheckpointName);
	bool GetLastSavedMap(struct FString* MapName);
	bool SetLastSavedCheckpoint(const struct FString& CheckpointName);
	bool SetLastSavedMap(const struct FString& MapName);
	bool IsKeyBoundToCommand(class UPlayerInput* PInput, const struct FString& Command, const struct FString& Key);
	void RemoveDBABindings(class UPlayerInput* PInput);
	void ApplyKeyBinding(class UPlayerInput* PInput, TEnumAsByte<EDigitalButtonActions> Action);
	void ApplyControllerBindings(class UPlayerInput* PInput);
	void InvertGamepadBinds(const struct FString& KeysToInvert, TArray<struct FKeyBind>* Binds);
	void InvertControllerConf_Buttons(TArray<struct FKeyBind>* Binds);
	void InvertControllerConf_Sticks(TArray<struct FKeyBind>* Binds);
	TArray<struct FKeyBind> GetGamepadLayoutBinds(TArray<struct FKeyBind> GamepadBinds, TEnumAsByte<EControllerConfigValues> Layout);
	TArray<struct FKeyBind> GetGamepadBinds();
	void ApplyGamepadBindings(class UPlayerInput* PInput, TArray<struct FKeyBind> PresetMappings);
	void ApplyKeyBindings(class UPlayerInput* PInput);
	void ApplyAllKeyBindings(class UPlayerInput* PInput);
	void UnbindKey(class UPlayerInput* PInput, const struct FName& BindName);
	void SetKeyBinding(TEnumAsByte<EDigitalButtonActions> KeyAction, const struct FName& KeyBinds);
	int FindKeyEnum(const struct FName& KeyName);
	struct FName FindKeyName(TEnumAsByte<ETDBindableKeys> KeyEnum);
	void SetKeyBindingUsingCommand(const struct FString& KeyCommand, const struct FName& KeyBinds);
	void GetKeyNamesFromDBA(TEnumAsByte<EDigitalButtonActions> DBACommand, class UPlayerInput* PInput, TArray<struct FName>* KeyNames);
	int GetDBAFromCommand(const struct FString& Command);
	int GetProfileIDForDBA(TEnumAsByte<EDigitalButtonActions> KeyAction);
	void StoreKeyBindings(TArray<struct FKeyBind> Bindings);
	void StoreKeys(class UPlayerInput* PInput);
	void ScriptSetToDefaults();
	void SetToDefaults();
	void STATIC_ResetKeysToDefault(class ULocalPlayer* InPlayerOwner);
	bool GetProfileSettingValueIdByName(const struct FName& SettingName, int* OutValue);
	bool GetProfileSettingValueStringByName(const struct FName& SettingName, struct FString* OutValue);
	bool GetProfileSettingValueFloatByName(const struct FName& SettingName, float* OutValue);
	bool GetProfileSettingValueIntByName(const struct FName& SettingName, int* OutValue);
	void OnLevelCompleted(int LevelIndex);
	struct FName CanUnlockTTStretch(int CompletedTTStretch, float TotalTime);
	void MarkCompletedUnderQualifyerTime(int CompletedTTStretch, float TotalTime);
	void OnTTStretchCompleted(int TTStretch, float TotalTime, TArray<float> IntermediateTimes, float AverageSpeed, float DistanceRun, int UnlockIdx);
	bool IsAllTTStretchesCompletedUnderQualifierTime(int Difficulty);
	bool IsAllTTStretchesUnlocked();
	bool LockTTStretch(int StretchIndex);
	bool UnlockTTStretch(int StretchIndex);
	void UnLockAllTTStretches();
	void LockAllTTStretches();
	bool IsTTStretchUnlocked(int StretchIndex);
	bool IsTTStretchCompletedUnderQualifyerTime(int StretchIndex);
	bool SetTTStretchCompletedUnderQualifyerTime(int StretchIndex);
	bool IsXBagsFound(class UTdStatsManager* StatsManager);
	bool IsAllBagsFound();
	int NumBagsFoundForLevel(int LevelIndex);
	int NumBagsFoundTotal();
	bool IsHiddenBagFound(int BagIndex);
	bool UnlockAllLevels();
	bool LockAllLevels();
	bool LockLevel(int LevelIndex, bool bHardDifficulty);
	bool UnlockLevel(int LevelIndex, bool bHardDifficulty);
	bool IsLevelUnlocked(int LevelIndex, bool bHardDifficulty);
	bool IsAllLevelsUnlocked(bool bHardDifficulty);
	bool SetTimeTrialRating(int Value);
	int GetTimeTrialRating();
	bool SetTTTimeForStretch(int Stretch, float TotalTime, float AverageSpeed, float DistanceRun, TArray<float>* IntermediateTimes);
	bool GetTTTimeForStretch(int Stretch, float* TotalTime, TArray<float>* IntermediateTimes, float* AverageSpeed, float* DistanceRun);
	bool GetTotalTimeOnlyForStretch(int Stretch, float* TotalTime);
	bool GetTTStretchTime(int ProfileSettingId, float* TotalTime, TArray<float>* IntermediateTimes, float* AverageSpeed, float* DistanceRun);
	bool SetTTStretchTime(int ProfileSettingId, float TotalTime, float AverageSpeed, float DistanceRun, TArray<float>* IntermediateTimes);
	bool GetTTStretchTotalTimeOnly(int ProfileSettingId, float* TotalTime);
	bool IsUnlockViewed(int UnlockProfileId);
	void SetUnlockViewed(int UnlockProfileId);
	bool IsHintShown(int HintId);
	void SetHintShown(int HintId);
	void ResetIdToDefault(int ProfileId);
	void ResetIdsToDefault(TArray<int> ProfileIds);
};


// Class TdGame.TdSkeletalMeshComponent
// 0x0004 (0x0454 - 0x0450)
class UTdSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	float                                              FOV;                                                      // 0x0450(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkeletalMeshComponent");
		return ptr;
	}


	class UPhysicalMaterial* GetPhysicalMaterialFromBone(const struct FName& BoneName);
	bool IsChildBoneOf(const struct FName& BoneName, const struct FName& ParentBoneName);
	void FlushAnimSequenceWeightBoxes();
	void FlushAnimSequenceTimeLine();
	void DrawAnimsWeight(class UCanvas* Canvas, const struct FName& StartingPoint);
	void DrawAnims(class UCanvas* Canvas, const struct FName& StartingPoint);
};


// Class TdGame.TdStashpoint
// 0x0024 (0x01E4 - 0x01C0)
class ATdStashpoint : public AActor
{
public:
	class ATdStashpoint*                               Next;                                                     // 0x01C0(0x0004) (Net, Transient)
	TScriptInterface<class UTdStashpointListener>      Listener;                                                 // 0x01C4(0x0008) (Transient)
	int                                                TerritoryOfTeam;                                          // 0x01CC(0x0004) (Const)
	float                                              TimeOfStashingInitiated;                                  // 0x01D0(0x0004)
	unsigned long                                      bNotifyKismet : 1;                                        // 0x01D4(0x0004) (Const)
	float                                              StashDuration;                                            // 0x01D8(0x0004) (Config)
	int                                                StashPointID;                                             // 0x01DC(0x0004) (Edit)
	int                                                InitiatedTriggerCount;                                    // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdStashpoint");
		return ptr;
	}


	void CompleteStashing();
	void InterceptStashing();
	void InitiateStashing();
	void NotifyProgressed();
	void NotifyCompleted();
	void NotifyIntercepted();
	void NotifyInitiated();
	void SendKismetEvent(class UClass* EventType);
	void SetListener(const TScriptInterface<class UTdStashpointListener>& InListener);
	void ClearStashCompleteTimer();
	void ClearStashInterceptTimer();
	bool IsTeamTerritory(class ATeamInfo* Info);
	float GetDuration();
	void OnStartMatchInProgress();
};


// Class TdGame.TdSwanNeck
// 0x0045 (0x0081 - 0x003C)
class UTdSwanNeck : public UObject
{
public:
	struct FVector                                     WantedTranslation;                                        // 0x003C(0x000C)
	struct FVector                                     Translation;                                              // 0x0048(0x000C)
	struct FVector                                     PreviousTranslation;                                      // 0x0054(0x000C)
	float                                              LinearForwardTranslation;                                 // 0x0060(0x0004) (Edit, Config)
	float                                              LinearDownwardTranslation;                                // 0x0064(0x0004) (Edit, Config)
	float                                              QuadraticForwardTranslation;                              // 0x0068(0x0004) (Edit, Config)
	float                                              QuadraticDownwardTranslation;                             // 0x006C(0x0004) (Edit, Config)
	float                                              StartTranslateAtDegree;                                   // 0x0070(0x0004) (Edit, Config)
	int                                                ForwardPitchWorld;                                        // 0x0074(0x0004) (Const)
	int                                                DownwardPitchWorld;                                       // 0x0078(0x0004) (Const)
	float                                              DegToUnDeg;                                               // 0x007C(0x0004) (Const)
	TEnumAsByte<ESwanNeckType>                         Type;                                                     // 0x0080(0x0001) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSwanNeck");
		return ptr;
	}


	struct FVector GetSwanNeckTranslation(int ControllerPitch);
	void UpdateSwanNeck(float DeltaTime, int ControllerPitch);
	struct FVector GetSwanNeckPos(const struct FRotator& FrameOfRefRotation);
};


// Class TdGame.TdSwingVolume
// 0x0004 (0x02D8 - 0x02D4)
class ATdSwingVolume : public ATdMovementVolume
{
public:
	unsigned long                                      bSnapToCenter : 1;                                        // 0x02D4(0x0004) (Edit)
	unsigned long                                      bThickGrip : 1;                                           // 0x02D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSwingVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
};


// Class TdGame.TdTeamInfo
// 0x0038 (0x0214 - 0x01DC)
class ATdTeamInfo : public ATeamInfo
{
public:
	TArray<class AController*>                         TeamMembers;                                              // 0x01DC(0x000C) (NeedCtorLink)
	int                                                MaxTeamMembers;                                           // 0x01E8(0x0004)
	TArray<struct FColor>                              TeamBaseColor;                                            // 0x01EC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             TeamColorNames;                                           // 0x01F8(0x000C) (NeedCtorLink)
	unsigned long                                      bCanSeeBag : 1;                                           // 0x0204(0x0004)
	TArray<struct FVisibleEnemy>                       VisibleEnemies;                                           // 0x0208(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTeamInfo");
		return ptr;
	}


	struct FColor GetTextColor();
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
};


// Class TdGame.TdTeamPlayerStart
// 0x0010 (0x033C - 0x032C)
class ATdTeamPlayerStart : public ATdPlayerStart
{
public:
	unsigned long                                      CopSpawn : 1;                                             // 0x032C(0x0004) (Edit)
	unsigned long                                      RobberSpawn : 1;                                          // 0x032C(0x0004) (Edit)
	int                                                TeamNumber;                                               // 0x0330(0x0004)
	class USpriteComponent*                            CopSprite;                                                // 0x0334(0x0004) (ExportObject, Component, EditInline)
	class USpriteComponent*                            RunnerSprite;                                             // 0x0338(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTeamPlayerStart");
		return ptr;
	}


	void PreBeginPlay();
};


// Class TdGame.TdToneMappingPostProcess
// 0x0043 (0x00A4 - 0x0061)
class UTdToneMappingPostProcess : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     SceneShadows;                                             // 0x0064(0x000C) (Edit)
	struct FVector                                     SceneHighLights;                                          // 0x0070(0x000C) (Edit)
	struct FVector                                     SceneMidTones;                                            // 0x007C(0x000C) (Edit)
	float                                              SceneDesaturation;                                        // 0x0088(0x0004) (Edit)
	float                                              ExposureManual;                                           // 0x008C(0x0004) (Edit)
	float                                              ExposureSpeedUp;                                          // 0x0090(0x0004) (Edit)
	float                                              ExposureSpeedDown;                                        // 0x0094(0x0004) (Edit)
	float                                              ExposureHigh;                                             // 0x0098(0x0004) (Edit)
	float                                              ExposureLow;                                              // 0x009C(0x0004) (Edit)
	float                                              Debug;                                                    // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdToneMappingPostProcess");
		return ptr;
	}

};


// Class TdGame.TdTrigger
// 0x0024 (0x01F0 - 0x01CC)
class ATdTrigger : public ATrigger
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x01CC(0x0004)
	unsigned long                                      bValveStartOpen : 1;                                      // 0x01CC(0x0004) (Edit)
	int                                                NumberOfRevs;                                             // 0x01D0(0x0004) (Edit)
	class UTexture2D*                                  ValveTexture;                                             // 0x01D4(0x0004)
	class UTexture2D*                                  ButtonTexture;                                            // 0x01D8(0x0004)
	class USpriteComponent*                            EditorSprite;                                             // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UTdDrawArcComponent*                         ArcComponent;                                             // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	TEnumAsByte<ETriggerInteractType>                  TriggerType;                                              // 0x01E4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET
	float                                              AngleLimit;                                               // 0x01E8(0x0004) (Edit)
	int                                                CurrentRev;                                               // 0x01EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTrigger");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	int GetRevCount();
	void DecreaseRevCount();
	void IncreaseRevCount();
	void InitTrigger();
	void Reset();
	void PostBeginPlay();
};


// Class TdGame.TdUIBlurEffect
// 0x000F (0x0070 - 0x0061)
class UTdUIBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              FalloffExponent;                                          // 0x0064(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x0068(0x0004) (Edit)
	float                                              BlurAmount;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIBlurEffect");
		return ptr;
	}

};


// Class TdGame.TdUICompositing
// 0x0000 (0x0061 - 0x0061)
class UTdUICompositing : public UPostProcessEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUICompositing");
		return ptr;
	}

};


// Class TdGame.TdUtils
// 0x0000 (0x003C - 0x003C)
class UTdUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUtils");
		return ptr;
	}


	struct FString STATIC_FormatFloatTime(float Time);
	struct FString STATIC_FormatTime(const struct FString& SecondsString);
	float STATIC_CosineInterp(float A, float B, float T);
};


// Class TdGame.TdVehicle
// 0x0040 (0x0588 - 0x0548)
class ATdVehicle : public ASVehicle
{
public:
	float                                              SeatCameraScale;                                          // 0x0548(0x0004) (Edit)
	TArray<struct FTimePosition>                       OldPositions;                                             // 0x054C(0x000C) (NeedCtorLink)
	float                                              CameraLag;                                                // 0x0558(0x0004)
	struct FVector                                     CameraOffset;                                             // 0x055C(0x000C)
	float                                              LookForwardDist;                                          // 0x0568(0x0004)
	float                                              MinCameraDistSq;                                          // 0x056C(0x0004)
	float                                              CameraSmoothingFactor;                                    // 0x0570(0x0004)
	unsigned long                                      bDeadVehicle : 1;                                         // 0x0574(0x0004) (Net)
	class UPhysicsAsset*                               RagdollAsset;                                             // 0x0578(0x0004)
	TArray<struct FVehicleSeat>                        Seats;                                                    // 0x057C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdVehicle");
		return ptr;
	}


	void PassengerLeave(class APawn* P, int seatIndex);
	bool DriverLeave(bool bForceLeave);
	bool PassengerEnter(class APawn* P, int seatIndex);
	bool DriverEnter(class APawn* P);
	bool CanEnterVehicle(class APawn* P);
	bool TryToDrive(class APawn* P);
	int GetFirstAvailableSeat();
	bool ChangeSeat(class AController* ControllerToMove, int RequestedSeat);
	struct FVector GetCameraStart(int seatIndex);
	void VehicleCalcCamera(float DeltaTime, int seatIndex, class APawn* P, struct FVector* out_CamLoc, struct FRotator* out_CamRot);
	bool CalcCamera(float DeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void ServerChangeSeat(int RequestedSeat);
	class AController* GetControllerForSeatIndex(int seatIndex);
	int GetSeatIndexForController(class AController* ControllerToMove);
	bool SeatAvailable(int seatIndex);
	void InitializeSeats();
	void PostBeginPlay();
};


// Class TdGame.TdVehicle_Helicopter
// 0x0060 (0x05A8 - 0x0548)
class ATdVehicle_Helicopter : public ASVehicle
{
public:
	float                                              MaxAcceleration;                                          // 0x0548(0x0004) (Edit)
	float                                              Force;                                                    // 0x054C(0x0004) (Edit)
	float                                              MaxVelocity;                                              // 0x0550(0x0004) (Edit)
	struct FVector                                     WantedPosition;                                           // 0x0554(0x000C)
	struct FRotator                                    RotationVelocity;                                         // 0x0560(0x000C)
	struct FRotator                                    HoveringNoiceDirection;                                   // 0x056C(0x000C)
	TEnumAsByte<EHeliAttackSide>                       AimWithThisSide;                                          // 0x0578(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0579(0x0003) MISSED OFFSET
	struct FVector                                     AimAtPoint;                                               // 0x057C(0x000C)
	unsigned long                                      bHovering : 1;                                            // 0x0588(0x0004)
	unsigned long                                      bIsHeliDustEffectActive : 1;                              // 0x0588(0x0004)
	int                                                NumberOfGunners;                                          // 0x058C(0x0004)
	class UTdSkeletalMeshComponent*                    HelicopterSkeletalMesh;                                   // 0x0590(0x0004) (ExportObject, Component, EditInline)
	class ATdAI_HeliController*                        myController;                                             // 0x0594(0x0004)
	TArray<struct FGunnerSeat>                         Seats;                                                    // 0x0598(0x000C) (Edit, NeedCtorLink)
	class AEmitter*                                    HeliDustEffectEmitter;                                    // 0x05A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdVehicle_Helicopter");
		return ptr;
	}


	void StartDustEffect();
	int GetNumberOfGunners();
	class APawn* GetGunner(int Index);
	int AddGunner(class APawn* Pawn);
	void Initialize(class ATdAI_HeliController* C);
};


// Class TdGame.TdVehicleSimCar
// 0x0038 (0x00FC - 0x00C4)
class UTdVehicleSimCar : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                        // 0x00C4(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           EngineRPMCurve;                                           // 0x00D4(0x0010) (Edit, NeedCtorLink)
	float                                              LSDFactor;                                                // 0x00E4(0x0004) (Edit)
	float                                              ThrottleSpeed;                                            // 0x00E8(0x0004) (Edit)
	float                                              MinRPM;                                                   // 0x00EC(0x0004)
	float                                              MaxRPM;                                                   // 0x00F0(0x0004)
	float                                              ActualThrottle;                                           // 0x00F4(0x0004)
	unsigned long                                      bForceThrottle : 1;                                       // 0x00F8(0x0004)
	unsigned long                                      bDriverlessBraking : 1;                                   // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdVehicleSimCar");
		return ptr;
	}

};


// Class TdGame.TdZiplineVolume
// 0x0004 (0x02D8 - 0x02D4)
class ATdZiplineVolume : public ATdMovementVolume
{
public:
	float                                              LandingStrip;                                             // 0x02D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdZiplineVolume");
		return ptr;
	}


	void PawnUpdate(class ATdPawn* TdP);
	bool InUse(class APawn* Ignored);
};


// Class TdGame.UIEvent_TdOptionChanged
// 0x0008 (0x0120 - 0x0118)
class UUIEvent_TdOptionChanged : public UUIEvent_ValueChanged
{
public:
	int                                                CurrentIndex;                                             // 0x0118(0x0004) (Transient)
	int                                                PreviousIndex;                                            // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIEvent_TdOptionChanged");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.TdMove
// 0x011C (0x0158 - 0x003C)
class UTdMove : public UObject
{
public:
	class ATdPawn*                                     PawnOwner;                                                // 0x003C(0x0004)
	class ATdBotPawn*                                  BotOwner;                                                 // 0x0040(0x0004)
	float                                              SpeedModifier;                                            // 0x0044(0x0004) (Edit, Const, Config)
	float                                              FrictionModifier;                                         // 0x0048(0x0004) (Edit, Const, Config)
	unsigned long                                      bDebugMove : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bTriggersCompliment : 1;                                  // 0x004C(0x0004) (Edit, Const, Config)
	unsigned long                                      bDisableCollision : 1;                                    // 0x004C(0x0004) (Const)
	unsigned long                                      bShouldHolsterWeapon : 1;                                 // 0x004C(0x0004) (Const)
	unsigned long                                      bShouldUnzoom : 1;                                        // 0x004C(0x0004) (Const)
	unsigned long                                      bIsTimedMove : 1;                                         // 0x004C(0x0004) (Const)
	unsigned long                                      bConstrainLook : 1;                                       // 0x004C(0x0004)
	unsigned long                                      bUseAbsoluteYawConstraint : 1;                            // 0x004C(0x0004)
	unsigned long                                      bDisableActorCollision : 1;                               // 0x004C(0x0004) (Const)
	unsigned long                                      bLookAtTargetLocation : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLookAtTargetAngle : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bDisableFaceRotation : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bDisableControllerFacingPawnYawRotation : 1;              // 0x004C(0x0004)
	unsigned long                                      bAvoidLedges : 1;                                         // 0x004C(0x0004) (Const)
	unsigned long                                      bUsePreciseLocation : 1;                                  // 0x004C(0x0004) (Transient)
	unsigned long                                      bReachedPreciseLocation : 1;                              // 0x004C(0x0004) (Transient)
	unsigned long                                      bDebugPreciseLocation : 1;                                // 0x004C(0x0004) (Edit)
	unsigned long                                      bUsePreciseRotation : 1;                                  // 0x004C(0x0004) (Transient)
	unsigned long                                      bReachedPreciseRotation : 1;                              // 0x004C(0x0004) (Transient)
	unsigned long                                      bDelayRotationAndLocationCallback : 1;                    // 0x004C(0x0004) (Transient)
	unsigned long                                      bResetCameraLook : 1;                                     // 0x004C(0x0004)
	unsigned long                                      bUseCustomCollision : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bUseCameraCollision : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bTwoHandedFullBodyAnimations : 1;                         // 0x004C(0x0004) (Edit)
	unsigned long                                      bStickyAim : 1;                                           // 0x004C(0x0004) (Edit, Config)
	unsigned long                                      bStopAfterMove : 1;                                       // 0x004C(0x0004)
	unsigned long                                      bEnableFootPlacement : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bEnableAgainstWall : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bAllowPickup : 1;                                         // 0x004C(0x0004)
	struct FAIAimingModifierSettings                   AiAimPenalties;                                           // 0x0050(0x000C) (Edit, Const, Config)
	struct FAIAimingModifierSettings                   AiAimOneShotPenalties;                                    // 0x005C(0x000C) (Edit, Const, Config)
	float                                              AiAimPenalty;                                             // 0x0068(0x0004) (Transient)
	float                                              AiAimOneShotPenalty;                                      // 0x006C(0x0004) (Transient)
	TEnumAsByte<EMovementGroup>                        MovementGroup;                                            // 0x0070(0x0001)
	TEnumAsByte<ESceneDepthPriorityGroup>              FirstPersonDPG;                                           // 0x0071(0x0001)
	TEnumAsByte<ESceneDepthPriorityGroup>              FirstPersonLowerBodyDPG;                                  // 0x0072(0x0001)
	TEnumAsByte<EPreciseLocationMode>                  PreciseLocationInterpMode;                                // 0x0073(0x0001)
	TEnumAsByte<EMoveAimMode>                          AimMode;                                                  // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              DisableMovementTime;                                      // 0x0078(0x0004) (Const)
	float                                              DisableLookTime;                                          // 0x007C(0x0004) (Const)
	float                                              LastCanDoMoveTime;                                        // 0x0080(0x0004) (Transient)
	float                                              LastStopMoveTime;                                         // 0x0084(0x0004)
	float                                              MoveActiveTime;                                           // 0x0088(0x0004) (Transient)
	float                                              RedoMoveTime;                                             // 0x008C(0x0004) (Const, Config)
	float                                              PreciseLocationSpeed;                                     // 0x0090(0x0004)
	struct FVector                                     PreciseLocation;                                          // 0x0094(0x000C) (Transient)
	float                                              PreciseRotationInterpolationTime;                         // 0x00A0(0x0004)
	struct FRotator                                    PreciseRotation;                                          // 0x00A4(0x000C) (Transient)
	struct FVector                                     LookAtTargetLocation;                                     // 0x00B0(0x000C) (Transient)
	struct FRotator                                    LookAtTargetAngle;                                        // 0x00BC(0x000C) (Transient)
	float                                              LookAtTargetInterpolationTime;                            // 0x00C8(0x0004)
	float                                              LookAtTargetDuration;                                     // 0x00CC(0x0004)
	float                                              CancelResetCameraLookTime;                                // 0x00D0(0x0004)
	float                                              ResetCameraLookTime;                                      // 0x00D4(0x0004)
	struct FRotator                                    MinLookConstraint;                                        // 0x00D8(0x000C)
	struct FRotator                                    MaxLookConstraint;                                        // 0x00E4(0x000C)
	float                                              CustomCollisionRadius;                                    // 0x00F0(0x0004)
	float                                              CustomCollisionHeight;                                    // 0x00F4(0x0004)
	int                                                WeaponInactivePitchAimingLimit;                           // 0x00F8(0x0004)
	struct FVector                                     RootMotionScale;                                          // 0x00FC(0x000C)
	struct FVector                                     RootOffset;                                               // 0x0108(0x000C) (Edit)
	int                                                SwanNeckEnableAtPitch;                                    // 0x0114(0x0004) (Edit)
	float                                              SwanNeckForward;                                          // 0x0118(0x0004) (Edit)
	float                                              SwanNeckDown;                                             // 0x011C(0x0004) (Edit)
	struct FName                                       CurrentCustomAnimName;                                    // 0x0120(0x0008)
	class UAnimNodeSequence*                           CurrentCustomAnimNode;                                    // 0x0128(0x0004)
	struct FName                                       FireAnimSeqName;                                          // 0x012C(0x0008) (Config)
	struct FName                                       ReloadAnimSeqName;                                        // 0x0134(0x0008) (Config)
	float                                              AnimBlendTime;                                            // 0x013C(0x0004)
	int                                                StickyAngle;                                              // 0x0140(0x0004) (Edit, Config)
	float                                              StickyAimedModifier;                                      // 0x0144(0x0004) (Edit, Config)
	float                                              Timer;                                                    // 0x0148(0x0004)
	TArray<struct FName>                               TimerFunctions;                                           // 0x014C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove");
		return ptr;
	}


	bool TestCanUnCrouch();
	bool CanUseLookAtHint();
	void MoveRumbleNotify();
	bool CanStand(const struct FVector& Location, bool bFromAbove);
	void EnlargeCollision();
	void ShrinkCollision();
	void PlayMoveAnim(TEnumAsByte<ECustomNodeType> Type, const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bRootMotion, bool bRootRotation);
	struct FVector GetFocusLocation();
	TEnumAsByte<EMoveAimMode> GetAimMode(bool bAimingOnly);
	void ClearTimer();
	void ClearMoveTimer(const struct FName& FuncName);
	void OnTimer();
	void OnMoveTimer();
	void SetMoveTimer(float Time, bool bLooping, const struct FName& FuncName);
	void SetTimer(float Time);
	int HandleDeath(int Damage);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void DisarmCompleted();
	void RootRotationCompletedNotify();
	void EnableRootMotionNotify();
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void MeleeAttackNotify();
	void ReachedWall();
	void Bump(const struct FVector& HitNormal, class AActor* BumpedActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	struct FName PlayReloadAnimation();
	struct FName PlayFireAnimation();
	void PostConstrainCamera(const struct FRotator& ConstrainAmount, struct FRotator* DeltaRot);
	void UpdateMeleeAutoLockOn(class ATdPlayerController* TdPC, float DeltaTime, const struct FRotator& ViewRotation, struct FRotator* out_DeltaRotation);
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void ConstrainAxis(int Angle, int MinAngle, int MaxAngle, float InterpolateSpeed, int* DeltaAngle);
	void StartReplicatedMove();
	void StopReplicatedMove();
	void PostStopMove();
	void StopMove();
	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void SetSwanNeckConstraints(int TriggerAtPitchThreshold, float ForwardMotion, float DownwardMotion);
	void ResetMove();
	void StartMove();
	bool CanStopMove();
	bool OnCanDoMove();
	bool CanDoMove();
	void TimeStopMove();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DrawSimulatedProxyAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void SetDifficulty(int Level);
	int GetMaxLookConstrainPitch();
	int GetMinLookConstrainPitch();
	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	void SetCameraYawConstraints(int MinYaw, int MaxYaw);
	void SetCameraPitchConstraints(int MinPitch, int maxPitch);
	void AbortLookAtTarget();
	void ResetCameraLook(float InterpolationTime);
	void SetLookAtTargetAngle(const struct FRotator& Target, float InterpolationTime, float Duration);
	void SetLookAtTargetLocation(const struct FVector& Target, float InterpolationTime, float Duration);
	void SetCustomCollisionSize(float CollisionRadius, float CollisionHeight);
	bool MovementTraceForBlockingBetweenActors(const struct FVector& End, const struct FVector& Start);
	void GetLastMovementTraceInfoStatic(class AActor** HitActor, int* ExcludeHandMoves, int* ExcludeFootMoves);
	bool MovementTraceForBlockingEx(const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal);
	bool MovementTraceForBlocking(const struct FVector& End, const struct FVector& Start, const struct FVector& Extent);
	bool MovementTrace(const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, bool FindClosest, struct FVector* HitLocation, struct FVector* HitNormal);
	void TouchedFallHeightVolume();
	void FailedToReachPreciseLocationAndRotation();
	void ReachedPreciseLocationAndRotation();
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void ReachedPreciseRotation();
	float CalculateRelativeExtent(float BaseExtent);
	void SetPreciseRotation(const struct FRotator& PreciseRotationToReach, float PreciseRotationTimeToUse);
	void SetPreciseLocation(const struct FVector& PreciseLocationToReach, TEnumAsByte<EPreciseLocationMode> InterpMode, float PreciseLocationSpeedToUse);
	int FindLedgeEx(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FLedgeHitInfo* out_LedgeHit);
	bool FindLedge(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FLedgeHitInfo* out_LedgeHit);
	bool FindLedgeInFrontOfPlayer(struct FVector* out_LedgeLocation, struct FVector* out_LedgeNormal, struct FVector* out_MoveNormal);
	class ATdMovementExclusionVolume* GetMovementExclusionVolume(const struct FVector& Loc);
	bool IsThisMoveStringable();
};


// Class TdGame.TdPhysicsMove
// 0x0034 (0x018C - 0x0158)
class UTdPhysicsMove : public UTdMove
{
public:
	TEnumAsByte<EPhysics>                              PawnPhysics;                                              // 0x0158(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	struct FName                                       ControllerState;                                          // 0x015C(0x0008) (Const)
	float                                              HandPlantExtentCheckHeight;                               // 0x0164(0x0004) (Edit, Config)
	float                                              HandPlantExtentCheckWidth;                                // 0x0168(0x0004) (Edit, Config)
	float                                              HandPlantCheckDistance;                                   // 0x016C(0x0004) (Edit, Config)
	float                                              HandPlantCheckHeight;                                     // 0x0170(0x0004) (Edit, Config)
	float                                              ContextMoveDistanceMultiplier;                            // 0x0174(0x0004) (Edit, Config)
	unsigned long                                      bCheckForGrab : 1;                                        // 0x0178(0x0004) (Config)
	unsigned long                                      bCheckForVaultOver : 1;                                   // 0x0178(0x0004) (Config)
	unsigned long                                      bCheckForWallClimb : 1;                                   // 0x0178(0x0004) (Config)
	unsigned long                                      bCheckForEdgeInVelDir : 1;                                // 0x0178(0x0004) (Config)
	unsigned long                                      bCheckExitToFalling : 1;                                  // 0x0178(0x0004)
	unsigned long                                      bCheckExitToUncontrolledFalling : 1;                      // 0x0178(0x0004)
	unsigned long                                      bCheckForSoftLanding : 1;                                 // 0x0178(0x0004)
	float                                              bDelayTimeCheckAutoMoves;                                 // 0x017C(0x0004) (Const)
	float                                              ExitToFallingZSpeed;                                      // 0x0180(0x0004)
	float                                              SoftLandingZSpeedThreshold;                               // 0x0184(0x0004)
	float                                              TimeToSoftLandingThreshold;                               // 0x0188(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicsMove");
		return ptr;
	}


	void ChangeMovementState(const struct FName& NewState);
	void StopMove();
	void StartMove();
	bool FindFloorOverLedge(float ForwardCheckDepth, float CollisionHeight, struct FVector* FloorPosition);
	bool CanHeaveOverLedge(float ForwardCheckDepth, const struct FVector& DestinationFloorPosition, float CollisionHeight, float HighestLedgeLocation);
	bool CanHeaveOverLedgeCrouched(float ForwardCheckDepth, const struct FVector& DestinationFloorPosition, float HighestLedgeLocation);
	bool CanHeaveOverLedgeFullyExtented(float ForwardCheckDepth, const struct FVector& DestinationFloorPosition, float HighestLedgeLocation);
	void FoundReachableHandPlant();
};


// Class TdGame.TdMove_180TurnInAir
// 0x000C (0x0198 - 0x018C)
class UTdMove_180TurnInAir : public UTdPhysicsMove
{
public:
	struct FRotator                                    WantedRotation;                                           // 0x018C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_180TurnInAir");
		return ptr;
	}


	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Barge
// 0x0060 (0x01EC - 0x018C)
class UTdMove_Barge : public UTdPhysicsMove
{
public:
	unsigned long                                      bHasDealtDamage : 1;                                      // 0x018C(0x0004)
	unsigned long                                      bBargeWithHands : 1;                                      // 0x018C(0x0004)
	TArray<struct FBargeHitInfo>                       BargeActorList;                                           // 0x0190(0x000C) (Transient, NeedCtorLink)
	float                                              BargeAnimTime;                                            // 0x019C(0x0004) (Const)
	float                                              BargeMinTraceDistance;                                    // 0x01A0(0x0004) (Config)
	float                                              BargeTraceTime;                                           // 0x01A4(0x0004) (Config)
	float                                              BargeAddOnSpeed;                                          // 0x01A8(0x0004) (Config)
	float                                              BargeMaxSpeed;                                            // 0x01AC(0x0004) (Config)
	float                                              BargeKickThresholdSpeed;                                  // 0x01B0(0x0004) (Config)
	class UForceFeedbackWaveform*                      BargeWaveform;                                            // 0x01B4(0x0004)
	struct FBargeDebugInfo                             AnimDebugInfo;                                            // 0x01B8(0x0034) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Barge");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void HitObject(class AActor* Victim, const struct FVector& HitLocation, const struct FVector& HitNormal, class UClass* inDamageType);
	void TryGiveBargeDamage(const struct FVector& HitNormal, class AActor* BargeActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void Bump(const struct FVector& HitNormal, class AActor* BumpedActor);
	void BargeHitNotify();
	void AbortBarge();
	void StopMove();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartBargin();
	void StartMove();
	bool CanDoMove();
	bool PassThroughDamage(class AActor* HitActor);
	void CalcBargeDamage(const struct FVector& StartTrace, const struct FVector& EndTrace, TArray<struct FBargeHitInfo>* ImpactList);
	void FindAdditionalTargets(const struct FVector& StartTrace, const struct FVector& EndTrace, class AActor* IgnoreActor, TArray<struct FBargeHitInfo>* ImpactList);
};


// Class TdGame.TdMove_AirBarge
// 0x001C (0x0208 - 0x01EC)
class UTdMove_AirBarge : public UTdMove_Barge
{
public:
	float                                              HeightBoostDuration;                                      // 0x01EC(0x0004) (Config)
	float                                              TotalHeightBoost;                                         // 0x01F0(0x0004) (Config)
	float                                              HeightBoostLeft;                                          // 0x01F4(0x0004)
	struct FVector                                     PreCollisionVelocity;                                     // 0x01F8(0x000C)
	unsigned long                                      bUseAirBargeAnim : 1;                                     // 0x0204(0x0004)
	unsigned long                                      bIsLanding : 1;                                           // 0x0204(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_AirBarge");
		return ptr;
	}


	void AbortBarge();
	void PlayLanded();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void TryGiveBargeDamage(const struct FVector& HitNormal, class AActor* BargeActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void Bump(const struct FVector& HitNormal, class AActor* BumpedActor);
	class UPhysicalMaterial* FindPhysicalMaterial(class AActor* A);
	void StartBargin();
	void StopMove();
};


// Class TdGame.TdMove_AISpecialMove
// 0x0000 (0x018C - 0x018C)
class UTdMove_AISpecialMove : public UTdPhysicsMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_AISpecialMove");
		return ptr;
	}

};


// Class TdGame.TdMove_Balance
// 0x0038 (0x01C4 - 0x018C)
class UTdMove_Balance : public UTdPhysicsMove
{
public:
	class ATdBalanceWalkVolume*                        Volume;                                                   // 0x018C(0x0004)
	float                                              CurrentParamOnCurve;                                      // 0x0190(0x0004)
	unsigned long                                      bIsFacingForward : 1;                                     // 0x0194(0x0004)
	unsigned long                                      bIsInDangerMode : 1;                                      // 0x0194(0x0004)
	unsigned long                                      bHasFallen : 1;                                           // 0x0194(0x0004)
	float                                              BalanceFactor;                                            // 0x0198(0x0004)
	float                                              CounterTimer;                                             // 0x019C(0x0004)
	struct FRotator                                    CurrentMoveDirection;                                     // 0x01A0(0x000C)
	float                                              ExternalForce;                                            // 0x01AC(0x0004)
	float                                              TimeToCounter;                                            // 0x01B0(0x0004) (Config)
	float                                              GravityInfluence;                                         // 0x01B4(0x0004) (Config)
	float                                              ControlInfluence;                                         // 0x01B8(0x0004) (Config)
	float                                              SpeedInfluence;                                           // 0x01BC(0x0004) (Config)
	float                                              CameraInfluence;                                          // 0x01C0(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Balance");
		return ptr;
	}


	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void GoIntoFalling();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void Falloff();
	int GetMaxLookConstrainPitch();
	int GetMinLookConstrainPitch();
	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotJump
// 0x0010 (0x019C - 0x018C)
class UTdMove_BotJump : public UTdPhysicsMove
{
public:
	unsigned long                                      bAnticipating : 1;                                        // 0x018C(0x0004) (Transient)
	unsigned long                                      bDoAnticipation : 1;                                      // 0x018C(0x0004) (Transient)
	float                                              ForcedSpeed;                                              // 0x0190(0x0004) (Transient)
	TEnumAsByte<EBotJumpLength>                        JumpLength;                                               // 0x0194(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	float                                              AnticipationTime;                                         // 0x0198(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotJump");
		return ptr;
	}


	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void FailedToReachPreciseLocation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ReachedPreciseLocation();
	void OnTimer();
	void StopMove();
	void StartAnticipation();
	void StartMove();
	bool CanDoMove();
	struct FVector GetPreciseLandingLocation();
};


// Class TdGame.TdMove_BotLanding
// 0x0021 (0x01AD - 0x018C)
class UTdMove_BotLanding : public UTdMove_AISpecialMove
{
public:
	float                                              ShortRunningDistance;                                     // 0x018C(0x0004)
	float                                              MediumRunningDistance;                                    // 0x0190(0x0004)
	float                                              LongRunningDistance;                                      // 0x0194(0x0004)
	float                                              SoftLandingHeight;                                        // 0x0198(0x0004)
	float                                              RollDistance;                                             // 0x019C(0x0004)
	struct FVector                                     StartLocation;                                            // 0x01A0(0x000C) (Transient)
	TEnumAsByte<EBotJumpLength>                        JumpLength;                                               // 0x01AC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotLanding");
		return ptr;
	}


	float CalculateLandingStretch();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void PostStopMove();
	void StopMove();
	void OnTimer();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotMelee
// 0x00B8 (0x0244 - 0x018C)
class UTdMove_BotMelee : public UTdPhysicsMove
{
public:
	float                                              BlendInTime;                                              // 0x018C(0x0004)
	float                                              BlendOutTime;                                             // 0x0190(0x0004)
	struct FName                                       AnimationName;                                            // 0x0194(0x0008)
	struct FVector                                     PredictedEnemyLocation;                                   // 0x019C(0x000C)
	TEnumAsByte<EMeleeStage>                           MeleeStage;                                               // 0x01A8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	struct FMeleeAttackProperties                      AttackProperties;                                         // 0x01AC(0x003C) (NeedCtorLink)
	float                                              AnimationLength;                                          // 0x01E8(0x0004)
	struct FVector                                     EnemyStartLocation;                                       // 0x01EC(0x000C)
	struct FRotator                                    WantedRotation;                                           // 0x01F8(0x000C)
	unsigned long                                      DrawDebug : 1;                                            // 0x0204(0x0004)
	struct FMeleeAttackProperties                      GenericAttackProperties;                                  // 0x0208(0x003C) (Edit, Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMelee");
		return ptr;
	}


	void TriggerHitPlayer();
	class UClass* GetDamageType();
	void TriggerHit();
	void TriggerMiss();
	bool TestHit();
	void TriggerMove();
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnAfterFirstAnimation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void PostStopMove();
	void StopMove();
	float GetAnimationLenght();
	void EnableLOI();
	void OnTimer();
	void StartMove();
	bool CanDoMove();
	bool IsInterruptableByDodge();
};


// Class TdGame.TdMove_BotPursuitGetDistance
// 0x0010 (0x0168 - 0x0158)
class UTdMove_BotPursuitGetDistance : public UTdMove
{
public:
	int                                                InitialPawnRotationYaw;                                   // 0x0158(0x0004)
	int                                                DeltaPawnRotationYaw;                                     // 0x015C(0x0004)
	int                                                InitialLegRotationYaw;                                    // 0x0160(0x0004)
	int                                                DeltaLegRotationYaw;                                      // 0x0164(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotPursuitGetDistance");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotStart
// 0x0040 (0x01CC - 0x018C)
class UTdMove_BotStart : public UTdPhysicsMove
{
public:
	int                                                DeltaPawnRotationYaw;                                     // 0x018C(0x0004)
	int                                                InitialPawnRotationYaw;                                   // 0x0190(0x0004)
	int                                                InitialLegRotationYaw;                                    // 0x0194(0x0004)
	int                                                DeltaLegRotationYaw;                                      // 0x0198(0x0004)
	struct FRotator                                    WantedRotation;                                           // 0x019C(0x000C)
	int                                                AnimationTurnAngle;                                       // 0x01A8(0x0004)
	float                                              BlendInTime;                                              // 0x01AC(0x0004)
	float                                              BlendOutTime;                                             // 0x01B0(0x0004)
	float                                              TimeIntoAnimation;                                        // 0x01B4(0x0004)
	float                                              AnimationLength;                                          // 0x01B8(0x0004)
	unsigned long                                      bUseLegRotation : 1;                                      // 0x01BC(0x0004)
	unsigned long                                      bUsePawnRotation : 1;                                     // 0x01BC(0x0004)
	unsigned long                                      bGoingStraightForwards : 1;                               // 0x01BC(0x0004)
	unsigned long                                      bDrawDebug : 1;                                           // 0x01BC(0x0004)
	struct FName                                       AnimationName;                                            // 0x01C0(0x0008)
	float                                              fMoveStartedTimeStamp;                                    // 0x01C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStart");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void RootRotationCompletedNotify();
	float GetSyncOffset(TEnumAsByte<ELegOffsetType> Offset);
	void StartRunning();
	void StartWalkingWithFocus();
	bool GoingStraightForwards();
	void SetInitialValues();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_BotStartRunning
// 0x0008 (0x01D4 - 0x01CC)
class UTdMove_BotStartRunning : public UTdMove_BotStart
{
public:
	float                                              MoveStartedTimeStamp;                                     // 0x01CC(0x0004)
	float                                              MinTimeBetweenTwoStartMoves;                              // 0x01D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStartRunning");
		return ptr;
	}


	void StopMove();
	void StartMove();
	bool CanDoMove();
	float TimeSinceMoveStarted();
};


// Class TdGame.TdMove_BotStop
// 0x0058 (0x01B0 - 0x0158)
class UTdMove_BotStop : public UTdMove
{
public:
	float                                              MaxRunningStopTriggerDist;                                // 0x0158(0x0004) (Edit)
	float                                              MinRunningStopTriggerDist;                                // 0x015C(0x0004) (Edit)
	float                                              MaxWalkingStopTriggerDist;                                // 0x0160(0x0004) (Edit)
	float                                              MinWalkingStopTriggerDist;                                // 0x0164(0x0004) (Edit)
	float                                              StopMoveDistanceRunning;                                  // 0x0168(0x0004) (Edit)
	float                                              StopMoveDistanceWalking;                                  // 0x016C(0x0004) (Edit)
	int                                                DeltaPawnRotationYaw;                                     // 0x0170(0x0004)
	int                                                InitialPawnRotationYaw;                                   // 0x0174(0x0004)
	int                                                InitialLegRotationYaw;                                    // 0x0178(0x0004)
	int                                                DeltaLegRotationYaw;                                      // 0x017C(0x0004)
	struct FRotator                                    WantedRotation;                                           // 0x0180(0x000C)
	float                                              BlendInTime;                                              // 0x018C(0x0004)
	float                                              BlendOutTime;                                             // 0x0190(0x0004)
	float                                              TimeIntoRotation;                                         // 0x0194(0x0004)
	float                                              RotationTime;                                             // 0x0198(0x0004)
	unsigned long                                      bStopAnimationStarted : 1;                                // 0x019C(0x0004)
	unsigned long                                      bUseLegRotation : 1;                                      // 0x019C(0x0004)
	unsigned long                                      bUsePawnRotation : 1;                                     // 0x019C(0x0004)
	unsigned long                                      bMoveDestinationSet : 1;                                  // 0x019C(0x0004)
	unsigned long                                      bWalkingStop : 1;                                         // 0x019C(0x0004)
	unsigned long                                      bUsePerfectStopDebug : 1;                                 // 0x019C(0x0004)
	unsigned long                                      bShouldCheckFalling : 1;                                  // 0x019C(0x0004)
	struct FVector                                     MoveDestination;                                          // 0x01A0(0x000C)
	float                                              SetMoveDestinationTimeStamp;                              // 0x01AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStop");
		return ptr;
	}


	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopRunning();
	void StopWalking();
	void StopMove();
	void ActivateStopMove();
	void OnTimer();
	void CheckFalling();
	void CalculateBestStop(float IdealStopTime);
	float GetBlendOutTime();
	void StartMove();
	bool IsDistanceOk();
	bool IsWalkingStop();
	void Fail();
	bool WillFallDown(float ExtraDistance, bool AddMoveLength);
	bool CanDoMove();
	void SetMoveDestination(const struct FVector& Dest);
	void UseDebugPerfectStop(bool Input);
	bool GetStopAnimationStarted();
};


// Class TdGame.TdMove_BotTurnRunning
// 0x0034 (0x01C0 - 0x018C)
class UTdMove_BotTurnRunning : public UTdPhysicsMove
{
public:
	struct FRotator                                    WantedDeltaRotation;                                      // 0x018C(0x000C)
	struct FRotator                                    InitialPawnRotation;                                      // 0x0198(0x000C)
	float                                              RotationCompensationRate;                                 // 0x01A4(0x0004)
	struct FRotator                                    DirectionOfMovement;                                      // 0x01A8(0x000C)
	struct FRotator                                    PawnRotation;                                             // 0x01B4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotTurnRunning");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void RootRotationCompletedNotify();
	void AdjustRotation();
	float GetTurnAngle();
	void SetRotationCompensationRate(float AnimationRootRotationAngle);
	void StartTurn();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotTurnStanding
// 0x0038 (0x01C4 - 0x018C)
class UTdMove_BotTurnStanding : public UTdPhysicsMove
{
public:
	int                                                DeltaRotationYaw;                                         // 0x018C(0x0004)
	int                                                DeltaLegRotationYaw;                                      // 0x0190(0x0004)
	int                                                InitialPawnRotationYaw;                                   // 0x0194(0x0004)
	int                                                InitialLegRotationYaw;                                    // 0x0198(0x0004)
	float                                              BlendInTime;                                              // 0x019C(0x0004)
	float                                              BlendOutTime;                                             // 0x01A0(0x0004)
	float                                              TimeIntoRotation;                                         // 0x01A4(0x0004)
	float                                              RotationTime;                                             // 0x01A8(0x0004)
	unsigned long                                      bRotatePawn : 1;                                          // 0x01AC(0x0004)
	unsigned long                                      bIsFocusPointSet : 1;                                     // 0x01AC(0x0004)
	struct FVector                                     FocusPoint;                                               // 0x01B0(0x000C)
	float                                              SetFocusPointTimeStamp;                                   // 0x01BC(0x0004)
	float                                              LegTurnAngle;                                             // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotTurnStanding");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void StopMove();
	void StartAnimation();
	float GetBlendInTime();
	float GetBlendOutTime();
	float CalculateLegTurnAngle();
	void StartMove();
	bool CanDoMove();
	void SetFocusPoint(const struct FVector& P);
};


// Class TdGame.TdMove_Climb
// 0x0040 (0x01CC - 0x018C)
class UTdMove_Climb : public UTdPhysicsMove
{
public:
	TEnumAsByte<EClimbState>                           ClimbState;                                               // 0x018C(0x0001)
	TEnumAsByte<EMovementAction>                       WantedAction;                                             // 0x018D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x018E(0x0002) MISSED OFFSET
	class UTdMove_GrabTransfer*                        TransferMove;                                             // 0x0190(0x0004)
	unsigned long                                      bIsPlayingAnimation : 1;                                  // 0x0194(0x0004)
	class ATdLadderVolume*                             Ladder;                                                   // 0x0198(0x0004)
	float                                              IdleBlendInTime;                                          // 0x019C(0x0004) (Edit, Config)
	float                                              ClimbBlendInTime;                                         // 0x01A0(0x0004) (Edit, Config)
	float                                              ClimbDownBlendInTime;                                     // 0x01A4(0x0004) (Edit, Config)
	float                                              ClimbDownFastVelocity;                                    // 0x01A8(0x0004) (Edit, Config)
	float                                              ClimbFastUpPipeAnimRate;                                  // 0x01AC(0x0004) (Edit, Config)
	TArray<struct FName>                               ClimbAnims;                                               // 0x01B0(0x000C) (NeedCtorLink)
	class UAudioComponent*                             ClimbSoundComponent;                                      // 0x01BC(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   ClimbDownLadderFastSound;                                 // 0x01C0(0x0004)
	class USoundCue*                                   ClimbDownPipeFastSound;                                   // 0x01C4(0x0004)
	int                                                StartTurningAngle;                                        // 0x01C8(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Climb");
		return ptr;
	}


	bool CanUseLookAtHint();
	int HandleDeath(int Damage);
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void InitClimbAnimSeqNames();
	void PostConstrainCamera(const struct FRotator& ConstrainAmount, struct FRotator* DeltaRot);
	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	int GetMinLookConstrainPitch();
	void OnTimer();
	void LetGo();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void ReachedPreciseLocation();
	void ExitAtTop(int ClimbAnimIndex);
	void Climb(int ClimbAnimIndex, float Rate, int StepCount);
	void HandleClimbAction();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void StopClimbDownFast();
	bool HasFloorBelow();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void Reset();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_Coil
// 0x0014 (0x01A0 - 0x018C)
class UTdMove_Coil : public UTdPhysicsMove
{
public:
	float                                              HeightBoostDuration;                                      // 0x018C(0x0004) (Config)
	float                                              TotalHeightBoost;                                         // 0x0190(0x0004) (Config)
	float                                              CoilMinTriggerSpeed;                                      // 0x0194(0x0004) (Config)
	float                                              CoilTime;                                                 // 0x0198(0x0004) (Config)
	float                                              HeightBoostLeft;                                          // 0x019C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Coil");
		return ptr;
	}


	void StopMove();
	bool AreWeCoilingOverSomething();
	bool IsThisMoveStringable();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Crouch
// 0x0000 (0x018C - 0x018C)
class UTdMove_Crouch : public UTdPhysicsMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Crouch");
		return ptr;
	}


	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	struct FVector GetFocusLocation();
	void StopMovingToCrouchSit();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void StopMove();
	void DisableRootOffset();
	void StartMove();
	void StartReplicatedMove();
	void StopReplicatedMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_DodgeJump
// 0x0024 (0x01B0 - 0x018C)
class UTdMove_DodgeJump : public UTdPhysicsMove
{
public:
	float                                              BaseJumpZ;                                                // 0x018C(0x0004) (Edit, Config)
	float                                              JumpAddXY;                                                // 0x0190(0x0004) (Edit, Config)
	float                                              StrafeThreshold;                                          // 0x0194(0x0004) (Edit, Config)
	float                                              DodgeJumpInertiaConservation;                             // 0x0198(0x0004) (Edit, Config)
	float                                              JumpBlendInTime;                                          // 0x019C(0x0004) (Edit, Config)
	float                                              JumpBlendOutTime;                                         // 0x01A0(0x0004) (Edit, Config)
	float                                              LookAtAIVelThreshold;                                     // 0x01A4(0x0004) (Edit, Config)
	float                                              LookAtAITraceDistance;                                    // 0x01A8(0x0004) (Edit, Config)
	float                                              LookAtAIRadiusThreshold;                                  // 0x01AC(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_DodgeJump");
		return ptr;
	}


	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void CheckForAimAssistTarget();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_EnterCover
// 0x0010 (0x0168 - 0x0158)
class UTdMove_EnterCover : public UTdMove
{
public:
	unsigned long                                      bPerformedPhysics : 1;                                    // 0x0158(0x0004) (Transient)
	unsigned long                                      bCheckFailCondition : 1;                                  // 0x0158(0x0004) (Transient)
	struct FVector                                     PreviousLocation;                                         // 0x015C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_EnterCover");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void StopMove();
	void SetCoverEntered();
	void ReachedPreciseLocation();
	void FailedToReachPreciseLocation();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Falling
// 0x000D (0x0199 - 0x018C)
class UTdMove_Falling : public UTdPhysicsMove
{
public:
	float                                              StickyAimAfterAirTime;                                    // 0x018C(0x0004) (Edit, Config)
	float                                              AirTime;                                                  // 0x0190(0x0004)
	unsigned long                                      bCloseToGround : 1;                                       // 0x0194(0x0004)
	TEnumAsByte<EMovement>                             PreviousMove;                                             // 0x0198(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Falling");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	int HandleDeath(int Damage);
	void CloseToGround();
	void Reset();
	void StopMove();
	void StopReplicatedMove();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StartMove();
	void StartReplicatedMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_FallingBot
// 0x0004 (0x0190 - 0x018C)
class UTdMove_FallingBot : public UTdMove_AISpecialMove
{
public:
	unsigned long                                      bPrepareLanding : 1;                                      // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_FallingBot");
		return ptr;
	}


	void CloseToGround();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_FallingUncontrolled
// 0x0000 (0x018C - 0x018C)
class UTdMove_FallingUncontrolled : public UTdPhysicsMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_FallingUncontrolled");
		return ptr;
	}


	void StopMove();
	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Grab
// 0x00C4 (0x0250 - 0x018C)
class UTdMove_Grab : public UTdPhysicsMove
{
public:
	struct FVector                                     GrabDesiredLedgeOffset;                                   // 0x018C(0x000C) (Edit, Config)
	float                                              GrabMaxAngle;                                             // 0x0198(0x0004) (Edit, Config)
	float                                              GrabMinGrabableZNormal;                                   // 0x019C(0x0004) (Edit, Config)
	float                                              HangFreeZDistanceCheck;                                   // 0x01A0(0x0004) (Edit, Config)
	float                                              RelativeExtent;                                           // 0x01A4(0x0004)
	float                                              DistanceToWallFromFeet;                                   // 0x01A8(0x0004)
	class UTdMove_GrabTransfer*                        TransferMove;                                             // 0x01AC(0x0004)
	float                                              StartTurningAngle;                                        // 0x01B0(0x0004) (Config)
	unsigned long                                      bIsWithinForwardView : 1;                                 // 0x01B4(0x0004)
	unsigned long                                      bIsTurnedRight : 1;                                       // 0x01B4(0x0004)
	unsigned long                                      bSlopedLedge : 1;                                         // 0x01B4(0x0004)
	unsigned long                                      bClimpUpFoldedActionReceived : 1;                         // 0x01B4(0x0004)
	unsigned long                                      bRequestDropDown : 1;                                     // 0x01B4(0x0004)
	unsigned long                                      bHangFreeVertigoEffect : 1;                               // 0x01B4(0x0004)
	unsigned long                                      bGrabFromVerticalWallrun : 1;                             // 0x01B4(0x0004)
	unsigned long                                      bGrabFromHighZSpeed : 1;                                  // 0x01B4(0x0004)
	struct FName                                       PendingShimmyCornerAnimation;                             // 0x01B8(0x0008)
	TEnumAsByte<EGrabType>                             GrabType;                                                 // 0x01C0(0x0001)
	TEnumAsByte<EGrabType>                             PreviousGrabType;                                         // 0x01C1(0x0001)
	TEnumAsByte<EShimmyType>                           CurrentShimmyMove;                                        // 0x01C2(0x0001)
	TEnumAsByte<EGrabFoldedType>                       CurrentFoldedType;                                        // 0x01C3(0x0001)
	struct FRotator                                    HangFreeMinLookContraint;                                 // 0x01C4(0x000C)
	struct FRotator                                    HangFreeMaxLookContraint;                                 // 0x01D0(0x000C)
	struct FRotator                                    SlopeMinLookContraint;                                    // 0x01DC(0x000C)
	struct FRotator                                    SlopeMaxLookContraint;                                    // 0x01E8(0x000C)
	struct FRotator                                    ShimmyAroundCornerMinLookContraint;                       // 0x01F4(0x000C)
	struct FRotator                                    ShimmyAroundCornerMaxLookContraint;                       // 0x0200(0x000C)
	struct FRotator                                    ShimmyAroundCornerFreeMinLookContraint;                   // 0x020C(0x000C)
	struct FRotator                                    ShimmyAroundCornerFreeMaxLookContraint;                   // 0x0218(0x000C)
	int                                                TargetYaw;                                                // 0x0224(0x0004)
	struct FVector                                     TargetLocation;                                           // 0x0228(0x000C)
	float                                              ShimmyVelocity;                                           // 0x0234(0x0004)
	float                                              ShimmyTime;                                               // 0x0238(0x0004)
	float                                              LastShimmyTimeSeconds;                                    // 0x023C(0x0004)
	float                                              DisableShimmyTime;                                        // 0x0240(0x0004)
	class UTdAnimNodeSequence*                         CustomAnimNode;                                           // 0x0244(0x0004)
	float                                              StartLookingAtLedgeTime;                                  // 0x0248(0x0004)
	float                                              StopLookingAtLedgeTime;                                   // 0x024C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Grab");
		return ptr;
	}


	int GetMinLookConstrainPitch();
	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	int HandleDeath(int Damage);
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void StartReplicatedMove();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void AbortShimmy(bool bForceVelStop);
	void StartRootRotation();
	void StartShimmyAroundCorner(TEnumAsByte<EMovementAction> ShimmyAction);
	void StartShimmy(TEnumAsByte<EMovementAction> ShimmyAction);
	bool CanShimmyAroundCorner(TEnumAsByte<EMovementAction> ShimmyAction);
	bool CanShimmy(TEnumAsByte<EMovementAction> ShimmyAction);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void UpdateViewConstraints();
	void OnTimer();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void DropDown();
	void OnChangeDPGTimer();
	void RequestDropDown();
	bool CanPullUp();
	bool CanDropDown();
	void SetCurrentFoldedType(TEnumAsByte<EGrabFoldedType> NewFoldedType);
	TEnumAsByte<EGrabFoldedType> GetCurrentFoldedType();
	void EnableFoldedHang();
	void SetGrabFromVerticalWallrun(bool bNewValue);
	TEnumAsByte<EGrabType> GetGrabType();
	void SetGrabType(TEnumAsByte<EGrabType> NewGrabType);
	void UpdateGrabType(bool bMovingLeft);
	bool IsFacingLedge();
	bool IsHangingFree();
	void StopMove();
	void EnableGrabIK();
	void SetDPG();
	void StartMove();
	bool CanDoMove();
	TEnumAsByte<EGrabType> CheckWallLegPlacement();
};


// Class TdGame.TdMove_GrabJump
// 0x0024 (0x01B0 - 0x018C)
class UTdMove_GrabJump : public UTdPhysicsMove
{
public:
	float                                              GrabJumpOffZHeight;                                       // 0x018C(0x0004) (Edit, Config)
	float                                              GrabJumpPushAwayMaxSpeed;                                 // 0x0190(0x0004) (Edit, Config)
	float                                              GrabJumpPushAwayMinSpeed;                                 // 0x0194(0x0004) (Edit, Config)
	float                                              GrabAllowedJumpAngle;                                     // 0x0198(0x0004) (Edit, Config)
	struct FVector                                     JumpVelocity;                                             // 0x019C(0x000C)
	unsigned long                                      TurnedLeft : 1;                                           // 0x01A8(0x0004)
	int                                                DeltaJumpYaw;                                             // 0x01AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_GrabJump");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void OnTimer();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_GrabPullUpBot
// 0x0048 (0x01D4 - 0x018C)
class UTdMove_GrabPullUpBot : public UTdMove_AISpecialMove
{
public:
	unsigned long                                      bControlPawnMovement : 1;                                 // 0x018C(0x0004) (Transient)
	struct FVector                                     PawnLocation;                                             // 0x0190(0x000C) (Transient)
	struct FVector                                     PawnRotation;                                             // 0x019C(0x000C) (Transient)
	float                                              VerticalTranslation;                                      // 0x01A8(0x0004) (Transient)
	float                                              HorizontalTranslation;                                    // 0x01AC(0x0004) (Transient)
	struct FVector                                     MoveStartLocation;                                        // 0x01B0(0x000C) (Transient)
	struct FVector                                     MoveIntermediateLocation;                                 // 0x01BC(0x000C) (Transient)
	struct FVector                                     MoveEndLocation;                                          // 0x01C8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_GrabPullUpBot");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void HeaveCompletedNotify();
	void HeaveInitiatedNotify();
	void PostStopMove();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_GrabTransfer
// 0x0050 (0x01DC - 0x018C)
class UTdMove_GrabTransfer : public UTdPhysicsMove
{
public:
	float                                              Allowed2DTransferDistance;                                // 0x018C(0x0004) (Edit, Config)
	float                                              AllowedZTransferDistance;                                 // 0x0190(0x0004) (Edit, Config)
	struct FVector                                     TransferLocation;                                         // 0x0194(0x000C)
	struct FVector                                     TransferNormal;                                           // 0x01A0(0x000C)
	struct FVector                                     TransferLookAtLocation;                                   // 0x01AC(0x000C)
	struct FVector                                     TransferLedgeNormal;                                      // 0x01B8(0x000C)
	TEnumAsByte<EMoveActionHint>                       TransferHint;                                             // 0x01C4(0x0001)
	TEnumAsByte<EMovement>                             TransferMove;                                             // 0x01C5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01C6(0x0002) MISSED OFFSET
	class ATdLadderVolume*                             Ladder;                                                   // 0x01C8(0x0004)
	class ATdLadderVolume*                             TransferLadder;                                           // 0x01CC(0x0004)
	float                                              TransferSpeed;                                            // 0x01D0(0x0004)
	float                                              TransferDistance;                                         // 0x01D4(0x0004)
	unsigned long                                      bFitForGrab : 1;                                          // 0x01D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_GrabTransfer");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void OnTimer();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void PlayTransferAnimation();
	bool CheckReachableVaultOver();
	void StopMove();
	void StartMove();
	bool CanDoMove();
	bool CheckContextMove(struct FVector* out_MoveLocation, struct FVector* out_MoveNormal, struct FVector* out_LedgeLocation, struct FVector* out_LedgeNormal);
};


// Class TdGame.TdMove_IntoGrab
// 0x0050 (0x01DC - 0x018C)
class UTdMove_IntoGrab : public UTdPhysicsMove
{
public:
	float                                              IntoGrabMaxAngle;                                         // 0x018C(0x0004) (Edit, Config)
	float                                              IntoGrabAlignSpeed;                                       // 0x0190(0x0004) (Edit, Config)
	float                                              IntoGrabMinInitialAlignSpeed;                             // 0x0194(0x0004) (Edit, Config)
	float                                              GrabMinGrabableZNormal;                                   // 0x0198(0x0004) (Edit, Config)
	struct FVector                                     GrabDesiredLedgeOffset;                                   // 0x019C(0x000C) (Edit, Config)
	float                                              MinGrabLedgeAdjustDistance;                               // 0x01A8(0x0004) (Edit, Config)
	float                                              IntoGrabMaxDistance;                                      // 0x01AC(0x0004) (Edit, Config)
	float                                              IntoGrabZVelocityThreshold;                               // 0x01B0(0x0004) (Edit, Config)
	float                                              IntoGrabSpeed;                                            // 0x01B4(0x0004)
	float                                              HangFoldedDownwardSpeedLimit;                             // 0x01B8(0x0004) (Edit, Config)
	float                                              HangFoldedIntoGrabZSpeedThreshold;                        // 0x01BC(0x0004) (Edit, Config)
	float                                              HangFoldedIntoGrabSpeed2DThreshold;                       // 0x01C0(0x0004) (Edit, Config)
	float                                              HangFoldedUpperDeltaDistance;                             // 0x01C4(0x0004) (Edit, Config)
	float                                              HangFoldedLowerDeltaDistance;                             // 0x01C8(0x0004) (Edit, Config)
	float                                              HangFoldedMaxDistance;                                    // 0x01CC(0x0004) (Edit, Config)
	float                                              HangImpactMinZSpeed;                                      // 0x01D0(0x0004) (Edit, Config)
	float                                              HangHardImpactMinZSpeed;                                  // 0x01D4(0x0004) (Edit, Config)
	unsigned long                                      bPrepareToGrab : 1;                                       // 0x01D8(0x0004)
	unsigned long                                      bSlopedLedge : 1;                                         // 0x01D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_IntoGrab");
		return ptr;
	}


	void StopMove();
	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void CheckForFoldedHang();
	void StartMove();
	bool CanDoMove();
	void ReachedPreciseLocation();
	int HandleDeath(int Damage);
	void FailedToReachPreciseLocation();
};


// Class TdGame.TdMove_Jump
// 0x0038 (0x01C4 - 0x018C)
class UTdMove_Jump : public UTdPhysicsMove
{
public:
	float                                              BaseJumpZ;                                                // 0x018C(0x0004) (Edit, Config)
	float                                              BaseJumpZHeavy;                                           // 0x0190(0x0004) (Edit, Config)
	float                                              JumpAddXY;                                                // 0x0194(0x0004) (Edit, Config)
	float                                              LongJumpSlowThreshold;                                    // 0x0198(0x0004) (Edit, Config)
	float                                              LongJumpNormalThreshold;                                  // 0x019C(0x0004) (Edit, Config)
	float                                              LongJumpFastThreshold;                                    // 0x01A0(0x0004) (Edit, Config)
	float                                              JumpBlendInTime;                                          // 0x01A4(0x0004) (Edit, Config)
	float                                              JumpBlendOutTime;                                         // 0x01A8(0x0004) (Edit, Config)
	float                                              JumpStillBlendOutTime;                                    // 0x01AC(0x0004) (Edit, Config)
	float                                              PreJumpMomentum;                                          // 0x01B0(0x0004)
	struct FVector                                     WantedJumpVelocity;                                       // 0x01B4(0x000C)
	float                                              CanDoMoveTaserLimit;                                      // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Jump");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	int HandleDeath(int Damage);
	void ReachedPreciseLocation();
	void StartJump();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StopMove();
	void StopReplicatedMove();
	bool IsThisMoveStringable();
	void StartMove();
	bool CanDoMove();
	bool IsOkToJump();
};


// Class TdGame.TdMove_JumpBot_Base
// 0x000C (0x0198 - 0x018C)
class UTdMove_JumpBot_Base : public UTdMove_AISpecialMove
{
public:
	unsigned long                                      bAnticipating : 1;                                        // 0x018C(0x0004) (Transient)
	unsigned long                                      bDoAnticipation : 1;                                      // 0x018C(0x0004) (Transient)
	float                                              ForcedSpeed;                                              // 0x0190(0x0004) (Transient)
	float                                              AnticipationTime;                                         // 0x0194(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_JumpBot_Base");
		return ptr;
	}


	void Pause();
	void StopMove();
	void StartAnticipation();
	void BeginJump();
	void SafetyLanding();
	void StartMove();
	bool CanDoMove();
	struct FVector GetPreciseLandingLocation();
};


// Class TdGame.TdMove_JumpBot_Long
// 0x0000 (0x0198 - 0x0198)
class UTdMove_JumpBot_Long : public UTdMove_JumpBot_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_JumpBot_Long");
		return ptr;
	}


	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void OnTimer();
	void StartAnticipation();
	void BeginJump();
};


// Class TdGame.TdMove_JumpBot_Medium
// 0x0000 (0x0198 - 0x0198)
class UTdMove_JumpBot_Medium : public UTdMove_JumpBot_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_JumpBot_Medium");
		return ptr;
	}


	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void OnTimer();
	void StartAnticipation();
	void BeginJump();
};


// Class TdGame.TdMove_JumpIntoGrabBot
// 0x0018 (0x01A4 - 0x018C)
class UTdMove_JumpIntoGrabBot : public UTdMove_AISpecialMove
{
public:
	struct FVector                                     MoveStartLocation;                                        // 0x018C(0x000C) (Transient)
	struct FVector                                     MoveEndLocation;                                          // 0x0198(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_JumpIntoGrabBot");
		return ptr;
	}


	void PrepareForGrab();
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_Landing
// 0x0028 (0x0180 - 0x0158)
class UTdMove_Landing : public UTdMove
{
public:
	float                                              HardLandingDamage;                                        // 0x0158(0x0004) (Config)
	float                                              LandingSpeedReduction;                                    // 0x015C(0x0004) (Config)
	float                                              HardLandingHeight;                                        // 0x0160(0x0004) (Config)
	float                                              SkillRollLandingHeight;                                   // 0x0164(0x0004) (Config)
	float                                              SoftLandingHeight;                                        // 0x0168(0x0004) (Config)
	class UForceFeedbackWaveform*                      ImpactHeavyWaveform;                                      // 0x016C(0x0004)
	class UForceFeedbackWaveform*                      ImpactMediumWaveform;                                     // 0x0170(0x0004)
	unsigned long                                      bForceLandBack : 1;                                       // 0x0174(0x0004)
	unsigned long                                      bLastLandingWasOnSoftObject : 1;                          // 0x0174(0x0004) (Transient)
	class UMaterialInstance*                           SoftLandingMaterialInstance;                              // 0x0178(0x0004)
	class UParticleSystem*                             SoftLandingEffect;                                        // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Landing");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void LandBackwards();
	void LandOnSoftObject();
	void LandHard();
	void EndLanding();
	void LandNormal(float LandingAmount);
	float GetLandingAmount();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void SubtractLandingSpeed();
	void PlaySoftLandingEffect();
	void StopMove();
	void StartMove();
	void StartReplicatedMove();
	bool CanDoMove();
	bool IsLandingOnSoftObject();
};


// Class TdGame.TdMove_LedgeWalk
// 0x0014 (0x01A0 - 0x018C)
class UTdMove_LedgeWalk : public UTdPhysicsMove
{
public:
	class ATdLedgeWalkVolume*                          Volume;                                                   // 0x018C(0x0004)
	float                                              CurrentParamOnCurve;                                      // 0x0190(0x0004)
	float                                              StrafeFactor;                                             // 0x0194(0x0004)
	float                                              StrafeSpeed;                                              // 0x0198(0x0004)
	unsigned long                                      bPendingLeavingVolume : 1;                                // 0x019C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_LedgeWalk");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void StopMove();
	void OnTimer();
	void NotifyEnteringVolume();
	void NotifyLeavingVolume();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void CheckLedgeWalkType();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeBase
// 0x0060 (0x01EC - 0x018C)
class UTdMove_MeleeBase : public UTdPhysicsMove
{
public:
	TEnumAsByte<EMeleeState>                           MeleeState;                                               // 0x018C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	unsigned long                                      bTargeting : 1;                                           // 0x0190(0x0004)
	unsigned long                                      bHitDetection : 1;                                        // 0x0190(0x0004)
	float                                              TargetingRotationSpeed;                                   // 0x0194(0x0004)
	class ATdPawn*                                     TargetPawn;                                               // 0x0198(0x0004)
	float                                              TargetingMaxDistance;                                     // 0x019C(0x0004)
	struct FVector                                     HitDetectionStart;                                        // 0x01A0(0x000C)
	struct FVector                                     HitDetectionLastStart;                                    // 0x01AC(0x000C)
	struct FName                                       HitDetectionBone;                                         // 0x01B8(0x0008)
	struct FVector                                     TraceOffset;                                              // 0x01C0(0x000C)
	struct FVector                                     TraceExtent;                                              // 0x01CC(0x000C)
	float                                              MeleeDamage;                                              // 0x01D8(0x0004) (Edit, Config)
	float                                              MaxMeleeDistance;                                         // 0x01DC(0x0004) (Edit, Config)
	float                                              MaxMeleeAngle;                                            // 0x01E0(0x0004) (Edit, Config)
	float                                              CanDoMoveTaserLimit;                                      // 0x01E4(0x0004)
	class UForceFeedbackWaveform*                      MeleeWaveform;                                            // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeBase");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void UpdateTargetPawn();
	class UClass* GetDamageType();
	void SetMeleeState(unsigned char NewState);
	void TriggerMiss();
	void TriggerHit();
	void TriggerMove();
	void DeliverDamage(float Damage, const struct FVector& HitLocation, const struct FVector& ImpactMomentum, class UClass* DamageType, const struct FTraceHitInfo& Hit);
	void TriggerDamage(class ATdPawn* TracePawn);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_RumpSlide
// 0x0024 (0x01B0 - 0x018C)
class UTdMove_RumpSlide : public UTdPhysicsMove
{
public:
	class UForceFeedbackWaveform*                      SlideWaveform;                                            // 0x018C(0x0004)
	float                                              TimeFalling;                                              // 0x0190(0x0004)
	float                                              MaxSlideSpeed;                                            // 0x0194(0x0004) (Config)
	float                                              SideControl;                                              // 0x0198(0x0004) (Config)
	float                                              GravityModifier;                                          // 0x019C(0x0004) (Config)
	float                                              InitialSpeedLoss;                                         // 0x01A0(0x0004) (Config)
	float                                              MinSlideFloorZ;                                           // 0x01A4(0x0004) (Config)
	float                                              OldFloorZ;                                                // 0x01A8(0x0004)
	unsigned long                                      bTouchedFallHeightVolume : 1;                             // 0x01AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_RumpSlide");
		return ptr;
	}


	void StartSliding();
	void OnTimer();
	void TouchedFallHeightVolume();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Slide
// 0x0018 (0x0170 - 0x0158)
class UTdMove_Slide : public UTdMove
{
public:
	float                                              SlideAbortSpeed;                                          // 0x0158(0x0004) (Edit, Config)
	float                                              SlideAbortTime;                                           // 0x015C(0x0004) (Edit, Config)
	float                                              MaxFloorInclineZ;                                         // 0x0160(0x0004) (Edit, Config)
	int                                                SlideAngleTarget;                                         // 0x0164(0x0004)
	unsigned long                                      bGoingInto : 1;                                           // 0x0168(0x0004)
	unsigned long                                      bRequestUncrouch : 1;                                     // 0x0168(0x0004)
	class UForceFeedbackWaveform*                      SlideWaveform;                                            // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Slide");
		return ptr;
	}


	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	struct FVector GetFocusLocation();
	void OnTimer();
	void AbortMove();
	void DisableSwingControl();
	void EnableSwingControl();
	void StopReplicatedMove();
	void StopMove();
	void StartReplicatedMove();
	bool AreWeSlidingUnderSomething();
	bool IsThisMoveStringable();
	void StartMove();
	bool CanStopMove();
	bool CanDoMove();
	bool FloorDeclineTooSteep();
};


// Class TdGame.TdMove_SlideBot
// 0x0020 (0x01AC - 0x018C)
class UTdMove_SlideBot : public UTdMove_AISpecialMove
{
public:
	float                                              SlideAbortSpeed;                                          // 0x018C(0x0004) (Edit, Config)
	struct FVector                                     EndTarget;                                                // 0x0190(0x000C)
	struct FVector                                     startPos;                                                 // 0x019C(0x000C)
	float                                              DistanceToTravel;                                         // 0x01A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SlideBot");
		return ptr;
	}


	void AbortSlide();
	void StopMove();
	void StartMove();
	void SetEndTarget(const struct FVector& P);
};


// Class TdGame.TdMove_SoftLanding
// 0x0004 (0x0190 - 0x018C)
class UTdMove_SoftLanding : public UTdPhysicsMove
{
public:
	unsigned long                                      bMovingBackwards : 1;                                     // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SoftLanding");
		return ptr;
	}


	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StartMove();
	void StopMove();
};


// Class TdGame.TdMove_StandGrabHeaveBot
// 0x0074 (0x0200 - 0x018C)
class UTdMove_StandGrabHeaveBot : public UTdMove_AISpecialMove
{
public:
	struct FVector                                     GrabLocation;                                             // 0x018C(0x000C) (Transient)
	struct FVector                                     StartLocation;                                            // 0x0198(0x000C) (Transient)
	struct FVector                                     EndLocation;                                              // 0x01A4(0x000C) (Transient)
	float                                              ForcedSpeed;                                              // 0x01B0(0x0004) (Transient)
	float                                              WallDistance;                                             // 0x01B4(0x0004) (Transient)
	float                                              GrabZOffset;                                              // 0x01B8(0x0004) (Transient)
	unsigned long                                      bStopWhenDone : 1;                                        // 0x01BC(0x0004) (Transient)
	unsigned long                                      bControlPawnMovement : 1;                                 // 0x01BC(0x0004) (Transient)
	struct FVector                                     PawnLocation;                                             // 0x01C0(0x000C) (Transient)
	struct FVector                                     PawnRotation;                                             // 0x01CC(0x000C) (Transient)
	float                                              VerticalTranslation;                                      // 0x01D8(0x0004) (Transient)
	float                                              HorizontalTranslation;                                    // 0x01DC(0x0004) (Transient)
	struct FVector                                     StartJumpLocation;                                        // 0x01E0(0x000C) (Transient)
	float                                              StartTime;                                                // 0x01EC(0x0004) (Transient)
	float                                              EndTime;                                                  // 0x01F0(0x0004) (Transient)
	float                                              JumpStartTime;                                            // 0x01F4(0x0004) (Transient)
	float                                              JumpEndTime;                                              // 0x01F8(0x0004) (Transient)
	float                                              HeaveStartTime;                                           // 0x01FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StandGrabHeaveBot");
		return ptr;
	}


	void ControllerScreenLog(const struct FString& Text);
	void Pause();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void HeaveNotify();
	void JumpDoneNotify();
	void JumpInitiatedNotify();
	void FindClimbNotifiers();
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Swing
// 0x0060 (0x01EC - 0x018C)
class UTdMove_Swing : public UTdPhysicsMove
{
public:
	class ATdSwingVolume*                              Volume;                                                   // 0x018C(0x0004)
	float                                              SwingVelocity;                                            // 0x0190(0x0004)
	float                                              MaxSwingVelocity;                                         // 0x0194(0x0004)
	float                                              ExitVelocityModifier;                                     // 0x0198(0x0004) (Config)
	float                                              SwingAngle;                                               // 0x019C(0x0004)
	struct FVector                                     SwingDirection;                                           // 0x01A0(0x000C)
	struct FVector                                     BarDirection;                                             // 0x01AC(0x000C)
	struct FVector                                     SwingLocation;                                            // 0x01B8(0x000C)
	float                                              SwingPendulumLength;                                      // 0x01C4(0x0004) (Config)
	unsigned long                                      bIsInterpolatingInto : 1;                                 // 0x01C8(0x0004)
	unsigned long                                      bIsShimmying : 1;                                         // 0x01C8(0x0004)
	unsigned long                                      bIsTurning : 1;                                           // 0x01C8(0x0004)
	class UTdAnimNodeSequence*                         CustomAnimNode;                                           // 0x01CC(0x0004)
	float                                              ShimmyVelocity;                                           // 0x01D0(0x0004)
	float                                              ShimmyTime;                                               // 0x01D4(0x0004)
	float                                              SwingAngleTimingOffset;                                   // 0x01D8(0x0004) (Config)
	float                                              SwingExitGravityModifier;                                 // 0x01DC(0x0004) (Config)
	float                                              SwingExitGravityModifierTime;                             // 0x01E0(0x0004) (Config)
	class UAudioComponent*                             SwingSoundComponent;                                      // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   SwingSound;                                               // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Swing");
		return ptr;
	}


	bool CanUseLookAtHint();
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void AbortShimmy();
	void SetPawnRotation(float RadAngle);
	void LetGo();
	void JumpOff(float JumpAngle);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnTimer();
	void StopInterpolating();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void DisableSwingControl();
	void EnableSwingControl();
	void StopSwingSound();
	void InitSwingSound();
	void StopMove();
	void StopReplicatedMove();
	void StartMove();
	void StartReplicatedMove();
	bool CanDoMove();
	class ATdSwingVolume* CheckForTargetVolume(const struct FVector& Direction);
	bool CanShimmy(float Delta);
	void UpdateShimmy(float DeltaTime);
	float GetPawnAngle(const struct FVector& Location);
	struct FVector GetPawnLocation(float Angle);
};


// Class TdGame.TdMove_VaultBot
// 0x0028 (0x01B4 - 0x018C)
class UTdMove_VaultBot : public UTdMove_AISpecialMove
{
public:
	unsigned long                                      bVaultOnto : 1;                                           // 0x018C(0x0004)
	unsigned long                                      bHighVault : 1;                                           // 0x018C(0x0004)
	struct FVector                                     StartLocation;                                            // 0x0190(0x000C)
	struct FVector                                     EndLocation;                                              // 0x019C(0x000C)
	struct FVector                                     HandLocation;                                             // 0x01A8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_VaultBot");
		return ptr;
	}


	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnLandedTimer();
	void EnableHeadAim();
	void SetRootMotionScale();
	struct FName GetAnimationName();
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
	struct FRotator GetPreciseRotation();
	struct FVector GetPreciseLocation();
};


// Class TdGame.TdMove_Vertigo
// 0x0024 (0x01B0 - 0x018C)
class UTdMove_Vertigo : public UTdPhysicsMove
{
public:
	struct FVector                                     LastVertigoEdgePosition;                                  // 0x018C(0x000C)
	struct FVector                                     LastActualVertigoEdgePosition;                            // 0x0198(0x000C)
	float                                              ZoomFOV;                                                  // 0x01A4(0x0004) (Config)
	float                                              ZoomRate;                                                 // 0x01A8(0x0004) (Config)
	float                                              ZoomOutTime;                                              // 0x01AC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Vertigo");
		return ptr;
	}


	bool CanUseLookAtHint();
	void StopMove();
	void OnTimer();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void OnTimerEnableAiming();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_WallClimb
// 0x005C (0x01E8 - 0x018C)
class UTdMove_WallClimb : public UTdPhysicsMove
{
public:
	float                                              WallClimbingVelocityStartLimit;                           // 0x018C(0x0004) (Edit, Config)
	float                                              WallClimbingVerticalStartAngle;                           // 0x0190(0x0004) (Edit, Config)
	float                                              WallClimbingVerticalFriction;                             // 0x0194(0x0004) (Edit, Config)
	float                                              WallClimbingMaxDistance2D;                                // 0x0198(0x0004) (Edit, Config)
	float                                              AddOnSpeed2DHeight;                                       // 0x019C(0x0004) (Edit, Config)
	float                                              AddOnSpeed2DMaxLimit;                                     // 0x01A0(0x0004) (Edit, Config)
	float                                              AddOnSpeedZHeight;                                        // 0x01A4(0x0004) (Edit, Config)
	float                                              AddOnSpeedZMaxLimit;                                      // 0x01A8(0x0004) (Edit, Config)
	float                                              WallClimbingGravity;                                      // 0x01AC(0x0004) (Edit, Config)
	float                                              MinLegdeZNormal;                                          // 0x01B0(0x0004) (Edit, Config)
	float                                              MinWallHeight;                                            // 0x01B4(0x0004) (Edit, Config)
	float                                              MinUpwardsVelocityToDoubleJump;                           // 0x01B8(0x0004) (Edit, Config)
	float                                              MaxIntoWallClimbVelocityToDoubleJump;                     // 0x01BC(0x0004) (Edit, Config)
	unsigned long                                      bHasReachedWall : 1;                                      // 0x01C0(0x0004)
	unsigned long                                      bFoundPossibleHandPlant : 1;                              // 0x01C0(0x0004)
	unsigned long                                      bPerformedDoubleJump : 1;                                 // 0x01C0(0x0004) (Transient)
	struct FRotator                                    LookAtEdgeAngle;                                          // 0x01C4(0x000C)
	struct FVector                                     PossibleEdgeDestination;                                  // 0x01D0(0x000C)
	float                                              IntoWallClimbSpeed;                                       // 0x01DC(0x0004)
	float                                              GroundZLoc;                                               // 0x01E0(0x0004) (Transient)
	class UForceFeedbackWaveform*                      IntoWallClimbWaveform;                                    // 0x01E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallClimb");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PerformDoubleJump();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void ReachedWall();
	void StopMove();
	bool IsThisMoveStringable();
	void StartMove();
	void LookAtLedge(const struct FVector& LedgeLocation);
	void FoundPossibleHandPlant();
	int HandleDeath(int Damage);
	void CheckDoubleJump();
	bool DetectPossibleHandPlant();
};


// Class TdGame.TdMove_WallClimbDodgeJump
// 0x0014 (0x01A0 - 0x018C)
class UTdMove_WallClimbDodgeJump : public UTdPhysicsMove
{
public:
	float                                              BaseJumpZ;                                                // 0x018C(0x0004) (Edit, Config)
	float                                              JumpAddXY;                                                // 0x0190(0x0004) (Edit, Config)
	float                                              DodgeJumpInertiaConservation;                             // 0x0194(0x0004) (Edit, Config)
	float                                              JumpBlendInTime;                                          // 0x0198(0x0004) (Edit, Config)
	float                                              JumpBlendOutTime;                                         // 0x019C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallClimbDodgeJump");
		return ptr;
	}


	void StopMove();
	void OnTimer();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_WallRun
// 0x00A4 (0x0230 - 0x018C)
class UTdMove_WallRun : public UTdPhysicsMove
{
public:
	float                                              WallRunningForwardCheckDistance;                          // 0x018C(0x0004) (Edit, Config)
	float                                              WallRunningStrafeCheckDistance;                           // 0x0190(0x0004) (Edit, Config)
	float                                              WallRunningVerticalCheckDistance;                         // 0x0194(0x0004) (Edit, Config)
	float                                              WallRunningMinWallHeight;                                 // 0x0198(0x0004) (Edit, Config)
	float                                              WallRunningMinSpeed;                                      // 0x019C(0x0004) (Edit, Config)
	float                                              WallRunningVelocityStartLimit;                            // 0x01A0(0x0004) (Edit, Config)
	float                                              WallRunningVelocityStopLimit;                             // 0x01A4(0x0004) (Edit, Config)
	float                                              WallRunningForwardMinStartAngle;                          // 0x01A8(0x0004) (Edit, Config)
	float                                              WallRunningForwardMaxStartAngle;                          // 0x01AC(0x0004) (Edit, Config)
	float                                              WallRunningStrafeStartAngle;                              // 0x01B0(0x0004) (Edit, Config)
	float                                              WallRunningHorisontalFriction;                            // 0x01B4(0x0004) (Edit, Config)
	float                                              WallRunningHorisontalInitialZHeight;                      // 0x01B8(0x0004) (Edit, Config)
	float                                              WallRunningHorisontalAcceleration;                        // 0x01BC(0x0004) (Edit, Config)
	float                                              WallRunningHorisontalDeceleration;                        // 0x01C0(0x0004) (Edit, Config)
	float                                              WallRunningHorisontalAlignSpeed;                          // 0x01C4(0x0004) (Edit, Config)
	float                                              WallRunningIntoWallrunBlendInTime;                        // 0x01C8(0x0004) (Edit, Config)
	float                                              WallRunningIntoWallrunBlendOutTime;                       // 0x01CC(0x0004) (Edit, Config)
	unsigned long                                      PlayCameraHitWallEffect : 1;                              // 0x01D0(0x0004) (Edit, Config)
	unsigned long                                      bHasReachedWall : 1;                                      // 0x01D0(0x0004)
	unsigned long                                      bStartMovingIntoWall : 1;                                 // 0x01D0(0x0004)
	unsigned long                                      bTurned90FromWall : 1;                                    // 0x01D0(0x0004)
	unsigned long                                      bChangedConstraints : 1;                                  // 0x01D0(0x0004)
	float                                              WallRunningDelayPawnRotationTime;                         // 0x01D4(0x0004) (Edit, Config)
	float                                              WallRunningDistanceForIntoWall;                           // 0x01D8(0x0004) (Edit, Config)
	float                                              WallRunningRotatePawnAlongWallTime;                       // 0x01DC(0x0004) (Edit, Config)
	float                                              WallRunningMoveToIntoPositionDegreeThreshold;             // 0x01E0(0x0004) (Edit, Config)
	float                                              MinimumVelocityIntoWall;                                  // 0x01E4(0x0004) (Edit, Config)
	float                                              MaximumVelocityIntoWall;                                  // 0x01E8(0x0004) (Edit, Config)
	float                                              WallrunStartUpperBodyAnimPlayRate;                        // 0x01EC(0x0004) (Edit, Config)
	float                                              LookAlongWallInterpolationTime;                           // 0x01F0(0x0004) (Edit, Config)
	float                                              WallRunningBeginSpeed;                                    // 0x01F4(0x0004)
	TEnumAsByte<EMovement>                             NextMove;                                                 // 0x01F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	struct FVector                                     WallNormal;                                               // 0x01FC(0x000C)
	struct FVector                                     PredictedWallHitLocation;                                 // 0x0208(0x000C)
	struct FVector                                     IntoWallrunLocationTarget;                                // 0x0214(0x000C)
	int                                                ConsequtiveWallruns;                                      // 0x0220(0x0004)
	class UForceFeedbackWaveform*                      IntoWallrunWaveform;                                      // 0x0224(0x0004)
	int                                                MinContraintWorld;                                        // 0x0228(0x0004)
	int                                                MaxContraintWorld;                                        // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallRun");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void StopMove();
	bool IsThisMoveStringable();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void FacePawnAlongWall();
	void OnTimer();
	void StartMove();
	void ReachedWall();
	int HandleDeath(int Damage);
	bool CanDoMove();
	bool FindWallSide(TEnumAsByte<EMovement> WallRunSide, struct FLedgeHitInfo* out_LedgeHit);
	TEnumAsByte<EMovement> FindWallForward(struct FLedgeHitInfo* out_LedgeHit);
};


// Class TdGame.TdMove_WallRunBot
// 0x004C (0x01D8 - 0x018C)
class UTdMove_WallRunBot : public UTdMove_AISpecialMove
{
public:
	unsigned long                                      bControlPawnMovement : 1;                                 // 0x018C(0x0004) (Transient)
	struct FVector                                     PawnLocation;                                             // 0x0190(0x000C) (Transient)
	struct FVector                                     PawnRotation;                                             // 0x019C(0x000C) (Transient)
	float                                              VerticalTranslation;                                      // 0x01A8(0x0004) (Transient)
	float                                              HorizontalTranslation;                                    // 0x01AC(0x0004) (Transient)
	struct FVector                                     MoveStartLocation;                                        // 0x01B0(0x000C) (Transient)
	struct FVector                                     MoveEndLocation;                                          // 0x01BC(0x000C) (Transient)
	float                                              StartTime;                                                // 0x01C8(0x0004) (Transient)
	float                                              EndTime;                                                  // 0x01CC(0x0004) (Transient)
	float                                              ClimbNotifierStartTime;                                   // 0x01D0(0x0004) (Transient)
	float                                              ClimbNotifierEndTime;                                     // 0x01D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallRunBot");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ClimbCompletedNotify();
	void ClimbInitiatedNotify();
	void FindClimbNotifiers();
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_WallrunDodgeJump
// 0x0014 (0x01A0 - 0x018C)
class UTdMove_WallrunDodgeJump : public UTdPhysicsMove
{
public:
	float                                              BaseJumpZ;                                                // 0x018C(0x0004) (Edit, Config)
	float                                              JumpAddXY;                                                // 0x0190(0x0004) (Edit, Config)
	float                                              DodgeJumpInertiaConservation;                             // 0x0194(0x0004) (Edit, Config)
	float                                              JumpBlendInTime;                                          // 0x0198(0x0004) (Edit, Config)
	float                                              JumpBlendOutTime;                                         // 0x019C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallrunDodgeJump");
		return ptr;
	}


	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_ZipLine
// 0x0041 (0x01CD - 0x018C)
class UTdMove_ZipLine : public UTdPhysicsMove
{
public:
	class ATdZiplineVolume*                            ZipLine;                                                  // 0x018C(0x0004)
	struct FVector                                     HangOffset;                                               // 0x0190(0x000C) (Edit)
	float                                              MinZipVelocity;                                           // 0x019C(0x0004) (Edit, Config)
	float                                              MinZipAcceleration;                                       // 0x01A0(0x0004) (Edit, Config)
	float                                              CurrentParamOnCurve;                                      // 0x01A4(0x0004)
	class UAudioComponent*                             ZippingSoundComponent;                                    // 0x01A8(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   ZippingSound;                                             // 0x01AC(0x0004)
	float                                              ZipFadeInTime;                                            // 0x01B0(0x0004) (Edit, Config)
	float                                              ZipFadeOutTime;                                           // 0x01B4(0x0004) (Edit, Config)
	class UForceFeedbackWaveform*                      ZiplineWaveform;                                          // 0x01B8(0x0004)
	struct FVector                                     CurrentLookAtPoint;                                       // 0x01BC(0x000C) (Transient)
	unsigned long                                      bZipLineLookAssist : 1;                                   // 0x01C8(0x0004) (Transient)
	TEnumAsByte<EZipLineStatus>                        ZipLineStatus;                                            // 0x01CC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_ZipLine");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	int HandleDeath(int Damage);
	void TakeTaserDamage(const struct FVector& ImpactMomentum);
	void OnTimer();
	void PrepareForForwardImpact();
	void PlayForwardImpact();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdWeapon
// 0x02FC (0x05B8 - 0x02BC)
class ATdWeapon : public AWeapon
{
public:
	TArray<struct FName>                               AimOffsetProfileNames;                                    // 0x02BC(0x000C) (Const, NeedCtorLink)
	struct FName                                       WeaponPoseProfileName;                                    // 0x02C8(0x0008) (Const)
	struct FRotator                                    OneHandedRightShoulderRotationOffset;                     // 0x02D0(0x000C) (Edit)
	struct FVector                                     OneHandedRightShoulderTranslationOffset;                  // 0x02DC(0x000C) (Edit)
	struct FVector                                     weaponDrawOffset;                                         // 0x02E8(0x000C) (Edit)
	struct FRotator                                    weaponRotationOffset;                                     // 0x02F4(0x000C) (Edit)
	unsigned long                                      bTakingDamage : 1;                                        // 0x0300(0x0004)
	unsigned long                                      bAutoReload : 1;                                          // 0x0300(0x0004)
	unsigned long                                      bAutoDrop : 1;                                            // 0x0300(0x0004)
	unsigned long                                      bCanZoom : 1;                                             // 0x0300(0x0004)
	unsigned long                                      bPlayFlyBys : 1;                                          // 0x0300(0x0004)
	unsigned long                                      bRemoteWeapon : 1;                                        // 0x0300(0x0004)
	unsigned long                                      bStickyAim : 1;                                           // 0x0300(0x0004) (Edit, Config)
	unsigned long                                      bDebugStickyAim : 1;                                      // 0x0300(0x0004) (Edit, Config)
	unsigned long                                      OverrideWeaponFireTypeForAI : 1;                          // 0x0300(0x0004)
	struct FName                                       ReloadingState;                                           // 0x0304(0x0008)
	struct FVector                                     WeaponDropAngularVelocity;                                // 0x030C(0x000C) (Edit, Config)
	struct FVector                                     WeaponDropLinearVelocity;                                 // 0x0318(0x000C) (Edit, Config)
	int                                                TimeThrownWeaponStaysInWorld;                             // 0x0324(0x0004) (Edit, Config)
	class UTdAnimNodeSlot*                             WeaponAnimationNode1p;                                    // 0x0328(0x0004) (Edit)
	class UTdAnimNodeSlot*                             WeaponAnimationNode3p;                                    // 0x032C(0x0004) (Edit)
	class UParticleSystemComponent*                    MuzzleFlashPSC;                                           // 0x0330(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                                   // 0x0334(0x0004) (Edit)
	struct FName                                       MuzzleFlashSocket;                                        // 0x0338(0x0008)
	class UParticleSystem*                             BulletTraceTemplate;                                      // 0x0340(0x0004) (Edit)
	class UParticleSystem*                             ShellEjectPS;                                             // 0x0344(0x0004) (Edit)
	struct FName                                       ShellEjectSocket;                                         // 0x0348(0x0008)
	float                                              ShellEjectDelay;                                          // 0x0350(0x0004)
	class ATdEmitter*                                  ShellEjectEmitter;                                        // 0x0354(0x0004) (Transient)
	class UForceFeedbackWaveform*                      FiringWaveform;                                           // 0x0358(0x0004)
	int                                                MaxAmmo;                                                  // 0x035C(0x0004) (Edit, Net)
	float                                              StartReloadTime;                                          // 0x0360(0x0004) (Edit)
	float                                              ReloadTime;                                               // 0x0364(0x0004) (Edit)
	float                                              EndReloadTime;                                            // 0x0368(0x0004) (Edit)
	int                                                BurstMax;                                                 // 0x036C(0x0004) (Edit)
	int                                                AmmoCount;                                                // 0x0370(0x0004) (Net)
	int                                                BurstCnt;                                                 // 0x0374(0x0004)
	int                                                ClipCount;                                                // 0x0378(0x0004) (Net)
	int                                                PassThroughLimit;                                         // 0x037C(0x0004)
	TArray<float>                                      InstantHitDamageMP;                                       // 0x0380(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  NormalCrossHair;                                          // 0x038C(0x0004) (Const)
	class UTexture2D*                                  OnTargetCrossHair;                                        // 0x0390(0x0004) (Const)
	struct FLinearColor                                OnTargetCrossHairColor;                                   // 0x0394(0x0010) (Const)
	TArray<unsigned long>                              bAutomaticReFire;                                         // 0x03A4(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned long>                              bStallReFire;                                             // 0x03B0(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      FireIntervalNoise;                                        // 0x03BC(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      ActualFireIntervalNoise;                                  // 0x03C8(0x000C) (Transient, NeedCtorLink)
	TArray<TEnumAsByte<EWeaponFallOffType>>            WeaponFallOffTypes;                                       // 0x03D4(0x000C) (NeedCtorLink)
	float                                              FallOffDistance;                                          // 0x03E0(0x0004) (Edit)
	int                                                DeathAnimType;                                            // 0x03E4(0x0004) (Config)
	struct FFloatDifficultySettings                    FallOffDistances;                                         // 0x03E8(0x000C) (Config)
	struct FFloatDifficultySettings                    Ranges;                                                   // 0x03F4(0x000C) (Config)
	struct FFloatDifficultySettings                    Damages;                                                  // 0x0400(0x000C) (Config)
	float                                              MovementRecoilWhenFire;                                   // 0x040C(0x0004) (Edit)
	TArray<class USoundCue*>                           WeaponFireSnd1p;                                          // 0x0410(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           WeaponReverbSnd1p;                                        // 0x041C(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           WeaponFireSnd3p;                                          // 0x0428(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           WeaponReverbSnd3p;                                        // 0x0434(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   WeaponCollisionSnd;                                       // 0x0440(0x0004) (Edit)
	class USoundCue*                                   WeaponClickSnd;                                           // 0x0444(0x0004) (Edit)
	class USoundCue*                                   WeaponSlapBackSnd;                                        // 0x0448(0x0004) (Edit)
	int                                                MaxNumberOfSlapBackRays;                                  // 0x044C(0x0004) (Edit)
	int                                                NumberOfSlapBacks;                                        // 0x0450(0x0004) (Edit)
	int                                                RangeOfSlapBackRays;                                      // 0x0454(0x0004) (Edit)
	struct FName                                       OutOfAmmoAnimName;                                        // 0x0458(0x0008)
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0460(0x0001)
	TEnumAsByte<EWeaponDecalType>                      DecalTypeToUse;                                           // 0x0461(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0462(0x0002) MISSED OFFSET
	class UAnimSet*                                    AnimationSetCharacter1p;                                  // 0x0464(0x0004)
	class UAnimSet*                                    AnimationSetFemale3p;                                     // 0x0468(0x0004)
	class UAnimSet*                                    AnimationSetMale3p;                                       // 0x046C(0x0004)
	class UTdSkeletalMeshComponent*                    Mesh1p;                                                   // 0x0470(0x0004) (ExportObject, Component, EditInline)
	class UTdSkeletalMeshComponent*                    Mesh3p;                                                   // 0x0474(0x0004) (ExportObject, Component, EditInline)
	int                                                MaxAssistDistance;                                        // 0x0478(0x0004) (Edit)
	float                                              AssistInnerRadius;                                        // 0x047C(0x0004) (Edit)
	float                                              AssistInnerHeight;                                        // 0x0480(0x0004) (Edit)
	float                                              MaxAssistValueYaw;                                        // 0x0484(0x0004) (Edit)
	float                                              MaxAssistValuePitch;                                      // 0x0488(0x0004) (Edit)
	float                                              StrafeAssistMultiplier;                                   // 0x048C(0x0004) (Edit)
	float                                              MaxAssistScaleDist;                                       // 0x0490(0x0004) (Edit)
	float                                              MaxAssistScaleVal;                                        // 0x0494(0x0004) (Edit)
	float                                              MinAssistScaleDist;                                       // 0x0498(0x0004) (Edit)
	float                                              MinAssistScaleVal;                                        // 0x049C(0x0004) (Edit)
	float                                              StickyAimModifier;                                        // 0x04A0(0x0004) (Edit, Config)
	float                                              StickyMaxDistance;                                        // 0x04A4(0x0004) (Edit)
	class AActor*                                      StickyActor;                                              // 0x04A8(0x0004) (Edit)
	struct FRotator                                    StickyRotation;                                           // 0x04AC(0x000C) (Edit)
	float                                              AIDamageMultiplier;                                       // 0x04B8(0x0004) (Config)
	float                                              CombatRange_Min;                                          // 0x04BC(0x0004) (Config)
	float                                              CombatRange_Max;                                          // 0x04C0(0x0004) (Config)
	float                                              CombatRange_Preferred;                                    // 0x04C4(0x0004) (Config)
	struct FAIBurstInfo                                AimedBurst_Near;                                          // 0x04C8(0x0010) (Edit, Config)
	struct FAIBurstInfo                                AimedBurst_Mid;                                           // 0x04D8(0x0010) (Edit, Config)
	struct FAIBurstInfo                                AimedBurst_Far;                                           // 0x04E8(0x0010) (Edit, Config)
	struct FAIReloadInfo                               ReloadReadyTime;                                          // 0x04F8(0x0008) (Edit, Config)
	float                                              MinKeepFiringTime;                                        // 0x0500(0x0004) (Edit, Config)
	float                                              MaxKeepFiringTime;                                        // 0x0504(0x0004) (Edit, Config)
	float                                              CombatRange_Max_CHASE;                                    // 0x0508(0x0004) (Config)
	float                                              CombatRange_Preferred_CHASE;                              // 0x050C(0x0004) (Config)
	float                                              MinKeepFiringTime_CHASE;                                  // 0x0510(0x0004) (Edit, Config)
	float                                              MaxKeepFiringTime_CHASE;                                  // 0x0514(0x0004) (Edit, Config)
	struct FAIBurstInfo                                AimedBurst_Near_CHASE;                                    // 0x0518(0x0010) (Edit, Config)
	struct FAIBurstInfo                                AimedBurst_Mid_CHASE;                                     // 0x0528(0x0010) (Edit, Config)
	struct FAIBurstInfo                                AimedBurst_Far_CHASE;                                     // 0x0538(0x0010) (Edit, Config)
	float                                              PreReloadTime;                                            // 0x0548(0x0004) (Edit, Config)
	float                                              ReloadWaitTime;                                           // 0x054C(0x0004)
	class UDecalComponent*                             DefaultDecalComponent;                                    // 0x0550(0x0004) (ExportObject, Component, EditInline)
	class UMaterial*                                   DefaultDecalMaterial;                                     // 0x0554(0x0004)
	class UPhysicalMaterial*                           DefaultImpactMaterial;                                    // 0x0558(0x0004)
	float                                              DecalStretchingMultiplier;                                // 0x055C(0x0004) (Edit, Config)
	float                                              DecalCullDistance;                                        // 0x0560(0x0004) (Edit)
	TArray<struct FPendingImpact>                      PendingImpacts;                                           // 0x0564(0x000C) (Transient, Component, NeedCtorLink)
	class ATdEmitter*                                  TracerEmitters[0x3];                                      // 0x0570(0x0004)
	int                                                TracerEmitterIdx;                                         // 0x057C(0x0004)
	float                                              RecoilAmount;                                             // 0x0580(0x0004) (Config)
	float                                              RecoilRecoverTime;                                        // 0x0584(0x0004) (Config)
	float                                              MinRecoil;                                                // 0x0588(0x0004) (Config)
	float                                              MaxRecoil;                                                // 0x058C(0x0004) (Config)
	float                                              KickbackAmount;                                           // 0x0590(0x0004) (Config)
	TArray<class UMaterialInstanceConstant*>           LOIMaterialInstances;                                     // 0x0594(0x000C) (Transient, NeedCtorLink)
	float                                              LOILastUpdateEffectAmount;                                // 0x05A0(0x0004) (Transient)
	float                                              LOIDisplayEffectTime;                                     // 0x05A4(0x0004) (Transient)
	struct FName                                       LOIparameter;                                             // 0x05A8(0x0008)
	float                                              LOIOriginalDisplayEffectTime;                             // 0x05B0(0x0004) (Transient)
	float                                              DebugDistance;                                            // 0x05B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeapon");
		return ptr;
	}


	void DropFromEx(const struct FVector& StartLocation, const struct FVector& StartVelocity, const struct FRotator& StartRotation, const struct FVector& StartAngularVelocity);
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	float GetInstantHitMomentum(int Mode, float Distance);
	float GetInstantHitDamage(int Mode, float Distance);
	void AbortBurst();
	int GetMaxBurstCnt();
	void RefireCheckTimer();
	void WeaponStoppedReloading();
	void WeaponStartReloading(float WaitTime);
	void FireAmmunition();
	void ServerStartFire(unsigned char FireModeNum);
	void ServerStartStickyFire(unsigned char FireModeNum, int StickyYaw, int StickyPitch, class AActor* SA);
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	void StartFire(unsigned char FireModeNum);
	void SetStickyAimOffset(float DeltaTime, const struct FRotator& ControllerRotation);
	void ServerUpdateStickyActor(class AActor* inActor);
	void ServerResetStickyActor();
	void UpdateStickyActor(class ATdHUD* HUD, class AController* Controller, class UTdMove* CurrentMove, float DeltaTime);
	void ForceNewStickyActor(class AActor* NewStickyActor, class ATdHUD* HUD, class AController* Controller, class UTdMove* CurrentMove, float DeltaTime);
	int GetFinalStickyAngle(class UTdMove* CurrentMove, class ATdPawn* StickyPawn);
	bool IsValidStickyActor(class AActor* PotentialStickyActor, class APawn* myPawn);
	bool IsValidCrosshairTarget(class ATdHUD* myHUD);
	void ActiveRenderOverlays(class AHUD* H);
	void TimeReloadWait();
	void TimeWeaponPutAway();
	void TimeWeaponPutDown();
	void TimeWeaponEndReloading();
	void TimeWeaponReloading();
	void ZoomOut(float* outDesiredFOV, float* outZoomRate);
	bool ToggleZoom(float* outDesiredFOV, float* outZoomRate, float* outDelay);
	bool IsZooming();
	bool IsZoomingOrZoomed();
	void ServerReloadWeapon();
	void ReloadWeapon();
	void WeaponReloaded(bool SuccessfulReload);
	void AssignAmmo();
	void WeaponReloadedTimer();
	void ReloadWaitComplete();
	void WeaponEmpty();
	void ClearReloadCount();
	void IncrementReloadCount();
	bool HasAnyAmmo();
	bool HasAmmo(unsigned char FireModeNum, int Amount);
	void StopReloading(float BlendTime, bool SuccessfulReload);
	bool IsInStateReloading();
	bool IsReloading();
	void StopFiring(float BlendTime);
	bool IsFiring();
	void PlayReloadAnimation(TEnumAsByte<EWeaponReloadAnimationType> ReloadType);
	void ConsumeAmmo(unsigned char FireModeNum);
	void PlayCustomWeaponAnimation(const struct FName& AnimationName);
	void PlayFiringAnimation();
	bool GetFireAnimName(struct FName* FireAnimName);
	void ClearFlashLocation();
	void InstantFire();
	void InitDefaultDecalProperties();
	class UDecalComponent* ActuallyGetDecal(class UPhysicalMaterial* mtrl, float Angle);
	class UDecalComponent* GetDecalData(const struct FTraceHitInfo& HitInfo, float ImpactAngle);
	bool IsDecalRelevant(const struct FVector& SpawnLocation, float CullDistance);
	void SpawnImpactDecal(const struct FImpactInfo& Impact);
	class UParticleSystem* GetSpecificImpactEffectPhysX(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
	class UParticleSystem* GetSpecificImpactEffect(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
	class UParticleSystem* GetImpactEffect(class UPhysicalMaterial* PMaterial);
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float CullDistance);
	void SpawnImpactEffects(const struct FImpactInfo& Impact);
	class USoundCue* GetWeaponSpecificImpactSound(class UTdPhysicalMaterialImpactSounds* ImpactSounds);
	class USoundCue* GetImpactSound(class UPhysicalMaterial* PMaterial);
	void SpawnImpactSounds(const struct FImpactInfo& Impact);
	void SpawnTracerEffect(const struct FVector& HitLocation);
	void PlayImpactEffects(const struct FImpactInfo& Impact);
	void RegisterPendingImpact(const struct FImpactInfo& Impact);
	void ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact);
	struct FImpactInfo CalcRemoteWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace);
	void CalcRemoteImpactEffects(unsigned char FireModeNum, const struct FVector& GivenHitLocation);
	void FlashLocationUpdated(unsigned char FiringMode, const struct FVector& FlashLocation, bool bViaReplication);
	void FlashCountUpdated(unsigned char FlashCount, unsigned char FiringMode, bool bViaReplication);
	void WeaponStoppedFiring(unsigned char FiringMode);
	void WeaponFired(unsigned char FiringMode, const struct FVector& HitLocation);
	bool ShouldRefire();
	void AdjustPlayerDamage(class AController* InstigatedBy, const struct FVector& Hit, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	void HideShellEject();
	void PlayShellCaseEject();
	void StopFireEffects(unsigned char FireModeNum);
	void PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation);
	void StopMuzzleFlash();
	void MuzzleFlashTimer();
	void CauseMuzzleFlash();
	void DetachWeaponEffects(class UTdSkeletalMeshComponent* SKMesh);
	void AttachWeaponEffects(class UTdSkeletalMeshComponent* SKMesh);
	void DetachWeapon();
	void AttachWeaponComponentsToPlayer(bool bIsFirstPerson);
	void PlayReverbSound();
	void PlayFiringSound();
	void WeaponPlaySlapBackSound(class USoundCue* SC);
	void WeaponPlaySounds1p();
	void WeaponPlaySounds3p();
	bool GetReloadAnimName(TEnumAsByte<EWeaponReloadAnimationType> ReloadType, struct FName* ReloadAnimName);
	bool PassThroughDamage(class AActor* HitActor, const struct FTraceHitInfo& HitInfo);
	struct FImpactInfo CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, TArray<struct FImpactInfo>* ImpactList);
	void SetFirstPerson(bool bActive);
	void UpdateAnimations();
	void UpdateAnimSets(bool bIsFemale, bool bIsFirstPerson);
	class UAnimNodeSequence* GetWeaponAnimation();
	class UTdAnimNodeSlot* GetWeaponAnimationNode3p();
	class UTdAnimNodeSlot* GetWeaponAnimationNode1p();
	void SetDifficultyLevel(int Difficulty);
	float GetFireInterval(unsigned char FireModeNum);
	struct FString GetOwnerName();
	void Destroyed();
	void PostBeginPlay();
	void PreBeginPlay();
	float GetMaxKeepFiringTime();
	float GetMinKeepFiringTime();
	void InitLOIMtrlInstances();
	void LOINotify(bool toggle);
	void GetWeaponDebug(TArray<struct FString>* DebugInfo);
	void DrawWeaponFallOff(class AHUD* HUD);
	void DebugWeapons();
	void DebugSlapBacks();
};


// Class TdGame.TdAIAnimationController
// 0x0028 (0x01E8 - 0x01C0)
class ATdAIAnimationController : public AActor
{
public:
	class ATdBotPawn*                                  AiPawn;                                                   // 0x01C0(0x0004) (Transient)
	class ATdAIController*                             AIController;                                             // 0x01C4(0x0004) (Transient)
	class UTdSkeletalMeshComponent*                    SkeletalComponent;                                        // 0x01C8(0x0004) (ExportObject, Transient, Component, EditInline)
	TEnumAsByte<EAiAnimationState>                     AnimationState;                                           // 0x01CC(0x0001) (Transient)
	TEnumAsByte<EAimState>                             AimState;                                                 // 0x01CD(0x0001) (Transient)
	TEnumAsByte<ECoverState>                           CoverState;                                               // 0x01CE(0x0001) (Transient)
	TEnumAsByte<ECoverState>                           PendingCoverState;                                        // 0x01CF(0x0001) (Transient)
	TEnumAsByte<ECoverDirectionState>                  CoverDirection;                                           // 0x01D0(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	float                                              AimStateBlendValue;                                       // 0x01D4(0x0004) (Transient)
	unsigned long                                      bPendingLegRotationState : 1;                             // 0x01D8(0x0004) (Transient)
	unsigned long                                      bIsInCover : 1;                                           // 0x01D8(0x0004) (Transient)
	unsigned long                                      bUseLazySpring : 1;                                       // 0x01D8(0x0004) (Transient)
	unsigned long                                      bPendingLazySpringState : 1;                              // 0x01D8(0x0004) (Transient)
	float                                              ReloadPlaybackRate;                                       // 0x01DC(0x0004) (Transient)
	struct FName                                       CoverAnimationSequenceName;                               // 0x01E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIAnimationController");
		return ptr;
	}


	void OnReleaseCrouch();
	void OnSetCrouch();
	void ReleaseCrouchState();
	void SetCrouchState();
	void OnReleaseMelee();
	void OnSetMelee();
	void ReleaseMeleeState();
	void SetMeleeState();
	void ClearAnimationState();
	void ResetAnimationState();
	void OnCoverExited();
	void OnCoverEntered();
	void SetUseLazySpring(bool bUse, float Time);
	void TimerSetUseLazySpring();
	bool IsWalking();
	bool CanFireWeapon();
	void UpdateLegRotation();
	void SetAimState(TEnumAsByte<EAimState> iAimState, float BlendTime, bool bInstantRotationUpdate);
	class UAnimNodeAimOffset* GetActiveAimNode();
	void StopFaceAnimation();
	void PlayFaceAnimation(const struct FName& AnimName, bool bLooping);
	void PlayCustomCannedAnimation(const struct FName& AnimationName);
	float GetReloadPlaybackRate();
	void PlayReloadAnimation();
	void PlayFireAnimation();
	struct FName GetFireAnimationName();
	void StopAimFire(TEnumAsByte<ECoverDirectionState> CoverAnimationDirectionState, TEnumAsByte<ECoverType> CoverType);
	void StartAimFire(TEnumAsByte<ECoverDirectionState> CoverAnimationDirectionState, TEnumAsByte<ECoverType> CoverType);
	TEnumAsByte<ECoverDirectionState> GetCoverDirection();
	void SetCoverDirection(TEnumAsByte<ECoverDirectionState> iCoverDirection);
	void UpdateCoverState();
	TEnumAsByte<ECoverState> GetPendingCoverState();
	void SetPendingCoverState(TEnumAsByte<ECoverState> iPendingCoverState);
	TEnumAsByte<ECoverState> GetCoverState();
	void SetCoverState(TEnumAsByte<ECoverState> iCoverState);
	void CoverAnimationOnCeaseRelevantRootMotion(class UAnimNodeSequence* SequenceNode);
	void CoverAnimationOnCustomAnimEnd(class UAnimNodeSequence* SequenceNode, float PlayedTime, float ExcessTime);
	struct FName GetCoverAnimationSequenceName();
	void SetCoverAnimationSequenceName(const struct FName& AnimationName);
	void PlayCoverAnimation(TEnumAsByte<ECoverAnimation> CoverAnimation, TEnumAsByte<ECoverDirectionState> CoverAnimationDirectionState, TEnumAsByte<ECoverType> CoverType, bool Short);
	class UAnimNodeSequence* GetCoverAnimation();
	bool StopCoverAnimation(float StopTime);
	bool IsPlayingCustomAnimation();
	bool IsPlayingCoverAnimation();
	void Tick(float DeltaTime);
	void AssignController(class ATdAIController* iAiController, class ATdBotPawn* iAiPawn);
	void Init(class UTdSkeletalMeshComponent* Component);
	TEnumAsByte<ECoverDirection> GetCoverDirectionNative();
	TEnumAsByte<ECoverState> GetCoverStateNative();
	bool IsInCover();
	bool UseLazySpring();
	bool IsInCrouchState();
	bool IsInMeleeState();
	bool IsBusyCrouching();
	bool IsBusyMelee();
	float GetAimStateBlendValue();
	TEnumAsByte<EAimState> GetAimState();
	TEnumAsByte<EAiAnimationState> GetAnimationState();
};


// Class TdGame.TdAnimNodeBlendList
// 0x0024 (0x0108 - 0x00E4)
class UTdAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	TArray<float>                                      BlendWeight;                                              // 0x00E4(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      BlendOutWeight;                                           // 0x00F0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bScaleBlendTimeBySpeed : 1;                               // 0x00FC(0x0004) (Edit)
	int                                                EditorSliderIndex;                                        // 0x0100(0x0004)
	class ATdPawn*                                     TdPawnOwner;                                              // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBlendList");
		return ptr;
	}


	bool SetActiveMove(int ChildIndex, bool ForceActive);
};


// Class TdGame.TdAnimNodeState
// 0x0034 (0x013C - 0x0108)
class UTdAnimNodeState : public UTdAnimNodeBlendList
{
public:
	TArray<int>                                        StateMapping;                                             // 0x0108(0x000C) (NeedCtorLink)
	struct FString                                     EnumStringName;                                           // 0x0114(0x000C) (NeedCtorLink)
	TArray<class UTdAnimNodeState*>                    FriendNodes;                                              // 0x0120(0x000C) (NeedCtorLink)
	int                                                SavedEnum;                                                // 0x012C(0x0004)
	int                                                CurrentUsedEnum;                                          // 0x0130(0x0004)
	int                                                PreviousUsedEnum;                                         // 0x0134(0x0004)
	unsigned long                                      bUseCustomBlend : 1;                                      // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeState");
		return ptr;
	}


	void OverrideStateMapping();
	int GetState();
	void OnBecomeRelevant();
	void OnInit();
	float GetBlendValue(int PreviousState, int NewState);
	int GetActiveState();
	void UpdateChildNames();
	bool SetActiveMove(int ChildIndex, bool ForceActive);
};


// Class TdGame.TdAnimNodeAgainstWallState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeAgainstWallState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EAgainstWallState>>             EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAgainstWallState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
	float GetBlendValue(int PreviousState, int NewState);
};


// Class TdGame.TdAnimNodeAiAnimationState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeAiAnimationState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EAiAnimationState>>             EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAiAnimationState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeAimNodeState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeAimNodeState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EAimState>>                     EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAimNodeState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
	float GetBlendValue(int PreviousState, int PendingState);
	int GetActiveState();
};


// Class TdGame.TdAnimNodeAimOffset
// 0x0018 (0x012C - 0x0114)
class UTdAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	unsigned long                                      bInterpolateHorizontalAiming : 1;                         // 0x0114(0x0004) (Edit)
	unsigned long                                      bAimSourceIsLegRotation : 1;                              // 0x0114(0x0004) (Edit)
	unsigned long                                      bManualAim : 1;                                           // 0x0114(0x0004) (Edit)
	float                                              HorizontalInterpolationSpeed;                             // 0x0118(0x0004) (Edit)
	struct FVector2D                                   WantedAiming;                                             // 0x011C(0x0008) (Transient)
	float                                              DeltaTime;                                                // 0x0124(0x0004) (Native)
	float                                              InterpolationValue;                                       // 0x0128(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAimOffset");
		return ptr;
	}


	void EditorProfileUpdated(const struct FName& ProfileName);
	void OnBecameRelevant();
};


// Class TdGame.TdAnimNodeAimState
// 0x0010 (0x014C - 0x013C)
class UTdAnimNodeAimState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EMoveAimMode>>                  EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)
	unsigned long                                      bOnlyMoveMode : 1;                                        // 0x0148(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAimState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeSwitch : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSwitch");
		return ptr;
	}


	void StateSwitched();
	bool EditorGetState();
	void OnBecomeRelevant();
	void OnInitialize();
	bool GetState();
	int GetActiveState();
};


// Class TdGame.TdAnimNodeAllowAimOffsetSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeAllowAimOffsetSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAllowAimOffsetSwitch");
		return ptr;
	}

};


// Class TdGame.TdAnimNodePoseOffset
// 0x0038 (0x0104 - 0x00CC)
class UTdAnimNodePoseOffset : public UAnimNodeBlendBase
{
public:
	TArray<struct FPoseProfile>                        Profiles;                                                 // 0x00CC(0x000C) (NeedCtorLink)
	struct FPoseProfile                                ActivePoseProfile;                                        // 0x00D8(0x0024) (NeedCtorLink)
	unsigned long                                      bDisable : 1;                                             // 0x00FC(0x0004) (Edit, Transient)
	unsigned long                                      BuildPoseOffsets : 1;                                     // 0x00FC(0x0004) (Edit, Transient)
	int                                                ActivePoseProfileIndex;                                   // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodePoseOffset");
		return ptr;
	}


	void SetActiveProfileByName(const struct FName& ProfileName);
	void EditorProfileUpdated(const struct FName& ProfileName);
};


// Class TdGame.TdAnimNodeAnimationPoseOffset
// 0x000C (0x0110 - 0x0104)
class UTdAnimNodeAnimationPoseOffset : public UTdAnimNodePoseOffset
{
public:
	TArray<struct FAnimationPoseProfile>               AnimationPoseProfiles;                                    // 0x0104(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeAnimationPoseOffset");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeBalanceBlend
// 0x000C (0x0114 - 0x0108)
class UTdAnimNodeBalanceBlend : public UTdAnimNodeBlendList
{
public:
	float                                              BalanceFactor;                                            // 0x0108(0x0004)
	float                                              RandomLeanTarget;                                         // 0x010C(0x0004)
	float                                              RandomLean;                                               // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBalanceBlend");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeBalanceWalk
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeBalanceWalk : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBalanceWalk");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeBlendBoneArmed
// 0x0001 (0x0101 - 0x0100)
class UTdAnimNodeBlendBoneArmed : public UAnimNodeBlendPerBone
{
public:
	TEnumAsByte<EArmedNodeType>                        ArmedType;                                                // 0x0100(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBlendBoneArmed");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeBlendByGender
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeBlendByGender : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBlendByGender");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeBlendBySpeed
// 0x0004 (0x010C - 0x0108)
class UTdAnimNodeBlendBySpeed : public UAnimNodeBlendBySpeed
{
public:
	unsigned long                                      bDebugThis : 1;                                           // 0x0108(0x0004) (Edit)
	unsigned long                                      bUseAverageSpeed : 1;                                     // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBlendBySpeed");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeBlendDirectional
// 0x0018 (0x00E4 - 0x00CC)
class UTdAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Direction;                                                // 0x00CC(0x0008)
	float                                              DirInterpTime;                                            // 0x00D4(0x0004)
	float                                              ForwardInterpTime;                                        // 0x00D8(0x0004)
	float                                              ForwardBlend;                                             // 0x00DC(0x0004)
	unsigned long                                      bGoingForward : 1;                                        // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeBlendDirectional");
		return ptr;
	}


	void OnBecomeRelevant();
	void UpdateDirection(float DeltaSeconds);
};


// Class TdGame.TdAnimNodeCinematicSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeCinematicSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeCinematicSwitch");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeClimb
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeClimb : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeClimb");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeCoverDirection
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeCoverDirection : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<ECoverDirectionState>>          EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeCoverDirection");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeCoverState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeCoverState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<ECoverState>>                   EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeCoverState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeCoverType
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeCoverType : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<ECoverType>>                    EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeCoverType");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeCustomBlend
// 0x0008 (0x0110 - 0x0108)
class UTdAnimNodeCustomBlend : public UTdAnimNodeBlendList
{
public:
	float                                              Duration;                                                 // 0x0108(0x0004)
	float                                              BlendOutTime;                                             // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeCustomBlend");
		return ptr;
	}


	void OnBecomeRelevant();
	void Activate(float Amount, float _Duration, float BlendIn, float BlendOut);
};


// Class TdGame.TdAnimNodeDirBone
// 0x0010 (0x0124 - 0x0114)
class UTdAnimNodeDirBone : public UAnimNodeAimOffset
{
public:
	unsigned long                                      bUsePitch : 1;                                            // 0x0114(0x0004) (Edit)
	unsigned long                                      bInvertXAxis : 1;                                         // 0x0114(0x0004) (Edit)
	TArray<class UTdAnimNodeDirBone*>                  FriendNodes;                                              // 0x0118(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeDirBone");
		return ptr;
	}


	void EditorProfileUpdated(const struct FName& ProfileName);
};


// Class TdGame.TdAnimNodeDirBoneAI
// 0x0004 (0x0128 - 0x0124)
class UTdAnimNodeDirBoneAI : public UTdAnimNodeDirBone
{
public:
	unsigned long                                      DoesNothingTdAnimNodeDirBoneAI : 1;                       // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeDirBoneAI");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeDirSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeDirSwitch : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeDirSwitch");
		return ptr;
	}


	void OnBecomeRelevant();
	bool IsGoingForward();
};


// Class TdGame.TdAnimNodeGrabAimOffset
// 0x0000 (0x012C - 0x012C)
class UTdAnimNodeGrabAimOffset : public UTdAnimNodeAimOffset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeGrabAimOffset");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeGrabbing
// 0x0008 (0x0110 - 0x0108)
class UTdAnimNodeGrabbing : public UTdAnimNodeBlendList
{
public:
	int                                                PreviousDeltaYaw;                                         // 0x0108(0x0004)
	int                                                CurrentDeltaYaw;                                          // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeGrabbing");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeGrabSlope
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeGrabSlope : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeGrabSlope");
		return ptr;
	}


	void OnBecomeRelevant();
	void UpdateWeights();
};


// Class TdGame.TdAnimNodeGrabTransfer
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeGrabTransfer : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeGrabTransfer");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeIdleAnimationSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeIdleAnimationSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIdleAnimationSwitch");
		return ptr;
	}


	bool EditorGetState();
	void OnInitialize();
	bool CruddyCelesteTaserTest(class AController* C);
};


// Class TdGame.TdAnimNodeIgnoreTransforms
// 0x001C (0x00E8 - 0x00CC)
class UTdAnimNodeIgnoreTransforms : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bHierarchicalInclusion : 1;                               // 0x00CC(0x0004) (Edit)
	TArray<struct FName>                               BoneNames;                                                // 0x00D0(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        BoneIndices;                                              // 0x00DC(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIgnoreTransforms");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeIKEffectorController
// 0x000C (0x00D8 - 0x00CC)
class UTdAnimNodeIKEffectorController : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bCached : 1;                                              // 0x00CC(0x0004) (Transient)
	unsigned long                                      bDisable : 1;                                             // 0x00CC(0x0004) (Transient)
	class ATdPawn*                                     PawnOwner;                                                // 0x00D0(0x0004) (Transient)
	class USkelControlLimb*                            LeftHandLocalIKController;                                // 0x00D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIKEffectorController");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeInAir
// 0x0008 (0x0110 - 0x0108)
class UTdAnimNodeInAir : public UTdAnimNodeBlendList
{
public:
	float                                              FallVelThreshold;                                         // 0x0108(0x0004) (Edit, Config)
	class UTdMove_Falling*                             FallingMove;                                              // 0x010C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeInAir");
		return ptr;
	}


	void OnInit();
	void OnBecomeRelevant();
	int GetInAirState();
};


// Class TdGame.TdAnimNodeIsCrouchSittingSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeIsCrouchSittingSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIsCrouchSittingSwitch");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeIsInCoverSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeIsInCoverSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIsInCoverSwitch");
		return ptr;
	}


	bool EditorGetState();
};


// Class TdGame.TdAnimNodeIsReloadingSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeIsReloadingSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIsReloadingSwitch");
		return ptr;
	}


	void StateSwitched();
	bool EditorGetState();
	void OnInitialize();
};


// Class TdGame.TdAnimNodeIsWalkingSwitch
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeIsWalkingSwitch : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeIsWalkingSwitch");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeLandOffset
// 0x001C (0x0130 - 0x0114)
class UTdAnimNodeLandOffset : public UAnimNodeAimOffset
{
public:
	float                                              Landed;                                                   // 0x0114(0x0004) (Edit)
	unsigned long                                      IsLanding : 1;                                            // 0x0118(0x0004)
	float                                              LandTimer;                                                // 0x011C(0x0004)
	float                                              LandInto;                                                 // 0x0120(0x0004) (Edit)
	float                                              LandOut;                                                  // 0x0124(0x0004) (Edit)
	float                                              LandOverlap;                                              // 0x0128(0x0004) (Edit)
	float                                              OverlapSize;                                              // 0x012C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeLandOffset");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeLean
// 0x0008 (0x011C - 0x0114)
class UTdAnimNodeLean : public UAnimNodeAimOffset
{
public:
	unsigned long                                      bCached : 1;                                              // 0x0114(0x0004) (Native)
	float                                              InterpolatedCurveSteepness;                               // 0x0118(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeLean");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeLedgeWalk
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeLedgeWalk : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeLedgeWalk");
		return ptr;
	}


	void OnInit();
};


// Class TdGame.TdAnimNodeMeleeIdleAnimation
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeMeleeIdleAnimation : public UTdAnimNodeSwitch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeMeleeIdleAnimation");
		return ptr;
	}


	bool EditorGetState();
	void OnInitialize();
};


// Class TdGame.TdAnimNodeMovementState
// 0x0010 (0x014C - 0x013C)
class UTdAnimNodeMovementState : public UTdAnimNodeState
{
public:
	unsigned long                                      bUseOldState : 1;                                         // 0x013C(0x0004) (Edit)
	TArray<TEnumAsByte<EMovement>>                     EnumStates;                                               // 0x0140(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeMovementState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
	float GetBlendValue(int PreviousState, int NewState);
	int GetActiveState();
};


// Class TdGame.TdAnimNodePawnRotation
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodePawnRotation : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodePawnRotation");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeRandom
// 0x0010 (0x0118 - 0x0108)
class UTdAnimNodeRandom : public UTdAnimNodeBlendList
{
public:
	TArray<struct FTdRandomAnimInfo>                   RandomInfo;                                               // 0x0108(0x000C) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bRunOnce : 1;                                             // 0x0114(0x0004) (Edit)
	unsigned long                                      bCallPlayOnChild : 1;                                     // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeRandom");
		return ptr;
	}


	void OnBecomeRelevant();
	void ChooseNextAnimation();
};


// Class TdGame.TdAnimNodeSequence
// 0x002A (0x0168 - 0x013E)
class UTdAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x013E(0x0002) MISSED OFFSET
	float                                              AccualCurrentTime;                                        // 0x0140(0x0004) (Native)
	unsigned long                                      bSnapToKeyFrames : 1;                                     // 0x0144(0x0004) (Edit)
	unsigned long                                      bForceFullPlayback : 1;                                   // 0x0144(0x0004) (Edit)
	unsigned long                                      bLoopingWithNotify : 1;                                   // 0x0144(0x0004) (Edit)
	unsigned long                                      bHasLockedAnimation : 1;                                  // 0x0144(0x0004)
	unsigned long                                      bCauseActorCeaseRelevant : 1;                             // 0x0144(0x0004)
	unsigned long                                      bResetOnBecomeRelevant : 1;                               // 0x0144(0x0004) (Edit)
	unsigned long                                      bDeltaCameraAnimation : 1;                                // 0x0144(0x0004) (Edit)
	unsigned long                                      bForceNoWeaponPose : 1;                                   // 0x0144(0x0004) (Edit)
	unsigned long                                      ScalePlayRateBySpeed : 1;                                 // 0x0144(0x0004) (Edit)
	unsigned long                                      InversePlayRate : 1;                                      // 0x0144(0x0004) (Edit)
	unsigned long                                      bUpdateSequenceOnAnimSetsUpdated : 1;                     // 0x0144(0x0004)
	unsigned long                                      bCached : 1;                                              // 0x0144(0x0004)
	float                                              NormalizedStartPosition;                                  // 0x0148(0x0004)
	TEnumAsByte<EScalePlayRateType>                    ScalePlayRateType;                                        // 0x014C(0x0001) (Edit)
	TEnumAsByte<EAnimType>                             AnimationType;                                            // 0x014D(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x014E(0x0002) MISSED OFFSET
	float                                              BaseSpeed;                                                // 0x0150(0x0004) (Edit)
	float                                              ScaleByValue;                                             // 0x0154(0x0004) (Edit)
	float                                              RateMin;                                                  // 0x0158(0x0004) (Edit)
	float                                              RateMax;                                                  // 0x015C(0x0004) (Edit)
	class UTdAnimNodeWeaponPoseOffset*                 WeaponPoseOffsetNode;                                     // 0x0160(0x0004)
	class ATdPawn*                                     TdPawnOwner;                                              // 0x0164(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSequence");
		return ptr;
	}


	void OnCeaseRelevant();
	void ResetNodeStates();
	void OnBecomeRelevant();
	void UpdateBaseSpeed();
};


// Class TdGame.TdAnimNodeSequencer
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeSequencer : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSequencer");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeSlot
// 0x0000 (0x00F0 - 0x00F0)
class UTdAnimNodeSlot : public UAnimNodeSlot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSlot");
		return ptr;
	}


	void AccelerateBlend(float BlendAmount);
	void SetRootBoneRotationAxisOption(TEnumAsByte<ERootRotationOption> AxisX, TEnumAsByte<ERootRotationOption> AxisY, TEnumAsByte<ERootRotationOption> AxisZ);
	void SetCauseActorCeaseRelevant(bool bNewStatus);
	void SetBlendOutTime(float BlendTime);
};


// Class TdGame.TdAnimNodeSwing
// 0x0000 (0x0108 - 0x0108)
class UTdAnimNodeSwing : public UTdAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSwing");
		return ptr;
	}


	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeTurn
// 0x0024 (0x012C - 0x0108)
class UTdAnimNodeTurn : public UTdAnimNodeBlendList
{
public:
	unsigned long                                      PlayingTurnAnimation : 1;                                 // 0x0108(0x0004) (Transient)
	float                                              LegTurnPerSecond;                                         // 0x010C(0x0004) (Transient)
	float                                              TimeStandingStill;                                        // 0x0110(0x0004) (Transient)
	float                                              IdleTimer;                                                // 0x0114(0x0004) (Edit)
	float                                              SafeRegionLimit;                                          // 0x0118(0x0004) (Edit)
	float                                              ExtendedRegionLimit;                                      // 0x011C(0x0004) (Edit)
	TArray<class UTdAnimNodeDirBone*>                  AimNodes;                                                 // 0x0120(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeTurn");
		return ptr;
	}


	void OnCeaseRelevant();
	void OnBecomeRelevant();
};


// Class TdGame.TdAnimNodeWalkingState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeWalkingState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EWalkingState>>                 EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeWalkingState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeWeaponPoseOffset
// 0x000C (0x0110 - 0x0104)
class UTdAnimNodeWeaponPoseOffset : public UTdAnimNodePoseOffset
{
public:
	TArray<struct FWeaponPoseProfile>                  WeaponPoseProfiles;                                       // 0x0104(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeWeaponPoseOffset");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeWeaponState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeWeaponState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EWeaponAnimState>>              EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeWeaponState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNodeWeaponTypeState
// 0x000C (0x0148 - 0x013C)
class UTdAnimNodeWeaponTypeState : public UTdAnimNodeState
{
public:
	TArray<TEnumAsByte<EWeaponType>>                   EnumStates;                                               // 0x013C(0x000C) (Edit, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeWeaponTypeState");
		return ptr;
	}


	void OverrideStateMapping();
	void OnInit();
};


// Class TdGame.TdAnimNotify_CharacterSound
// 0x000D (0x0049 - 0x003C)
class UTdAnimNotify_CharacterSound : public UAnimNotify
{
public:
	unsigned long                                      bFollowActor : 1;                                         // 0x003C(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0040(0x0008) (Edit)
	TEnumAsByte<ECharacterSoundTriggerType>            TriggerType;                                              // 0x0048(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNotify_CharacterSound");
		return ptr;
	}

};


// Class TdGame.TdHeadControl
// 0x0059 (0x0095 - 0x003C)
class UTdHeadControl : public UObject
{
public:
	unsigned long                                      bInitialized : 1;                                         // 0x003C(0x0004)
	unsigned long                                      bYawActivated : 1;                                        // 0x003C(0x0004)
	unsigned long                                      bShouldUseEyelidControls : 1;                             // 0x003C(0x0004)
	unsigned long                                      bHasEyelids : 1;                                          // 0x003C(0x0004)
	class ATdBotPawn*                                  myPawn;                                                   // 0x0040(0x0004)
	class UTdSkelControlHeadAim*                       HeadOffsetYawControl;                                     // 0x0044(0x0004)
	class UTdSkelControlHeadAim*                       HeadOffsetPitchControl;                                   // 0x0048(0x0004)
	class UTdSkelControlHeadAim*                       LeftUpEyelidControl;                                      // 0x004C(0x0004)
	class UTdSkelControlHeadAim*                       LeftLowEyelidControl;                                     // 0x0050(0x0004)
	class UTdSkelControlHeadAim*                       RightUpEyelidControl;                                     // 0x0054(0x0004)
	class UTdSkelControlHeadAim*                       RightLowEyelidControl;                                    // 0x0058(0x0004)
	class UTdSkelControlHeadAim*                       LeftUpEyelidControl2;                                     // 0x005C(0x0004)
	class UTdSkelControlHeadAim*                       LeftLowEyelidControl2;                                    // 0x0060(0x0004)
	class UTdSkelControlHeadAim*                       RightUpEyelidControl2;                                    // 0x0064(0x0004)
	class UTdSkelControlHeadAim*                       RightLowEyelidControl2;                                   // 0x0068(0x0004)
	class UTdSkelControlLookAt*                        EyeControl;                                               // 0x006C(0x0004)
	class UTdSkelControlLookAt*                        LeftEyeControl;                                           // 0x0070(0x0004)
	class UTdSkelControlLookAt*                        RightEyeControl;                                          // 0x0074(0x0004)
	float                                              EyelidOffsetLower;                                        // 0x0078(0x0004)
	float                                              EyelidOffsetUpper;                                        // 0x007C(0x0004)
	float                                              BlinkTime;                                                // 0x0080(0x0004)
	float                                              BlinkStartTime;                                           // 0x0084(0x0004)
	float                                              ClosingTimeStamp;                                         // 0x0088(0x0004)
	float                                              OpeningTimeStamp;                                         // 0x008C(0x0004)
	int                                                ClosedFrames;                                             // 0x0090(0x0004)
	TEnumAsByte<EBlinkingState>                        BlinkingState;                                            // 0x0094(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHeadControl");
		return ptr;
	}


	void AddSpecialOutput(struct FString* Text);
	void ToggleEyelids();
	void Initialize(class ATdBotPawn* OwnerPawn);
};


// Class TdGame.TdInterpTrackDOFFocusDistance
// 0x0000 (0x006C - 0x006C)
class UTdInterpTrackDOFFocusDistance : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInterpTrackDOFFocusDistance");
		return ptr;
	}

};


// Class TdGame.TdInterpTrackInstDOFFocusDistance
// 0x0010 (0x004C - 0x003C)
class UTdInterpTrackInstDOFFocusDistance : public UInterpTrackInst
{
public:
	float                                              OldFocusDistance;                                         // 0x003C(0x0004)
	float                                              OldMaxFarBlurAmount;                                      // 0x0040(0x0004)
	unsigned long                                      bOldShowInEditor : 1;                                     // 0x0044(0x0004)
	class UDOFAndBloomEffect*                          Effect;                                                   // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInterpTrackInstDOFFocusDistance");
		return ptr;
	}

};


// Class TdGame.TdSkelControlAgainstWall
// 0x0034 (0x00F8 - 0x00C4)
class UTdSkelControlAgainstWall : public USkelControlLimb
{
public:
	unsigned long                                      bLeftHand : 1;                                            // 0x00C4(0x0004) (Edit)
	struct FVector                                     MinLocation;                                              // 0x00C8(0x000C) (Edit)
	struct FVector                                     MaxLocation;                                              // 0x00D4(0x000C) (Edit)
	struct FVector                                     TargetLocation;                                           // 0x00E0(0x000C) (Edit)
	struct FVector                                     HandOffset;                                               // 0x00EC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlAgainstWall");
		return ptr;
	}

};


// Class TdGame.TdSkelControlAim1p
// 0x0015 (0x00D9 - 0x00C4)
class UTdSkelControlAim1p : public USkelControlSingleBone
{
public:
	unsigned long                                      bApplySwanNeckTranslation : 1;                            // 0x00C4(0x0004) (Edit)
	unsigned long                                      bBlendInUnarmedAim : 1;                                   // 0x00C4(0x0004)
	float                                              UnarmedAimingMomentumThreshold;                           // 0x00C8(0x0004) (Config)
	float                                              UnarmedAimingBlendInTime;                                 // 0x00CC(0x0004) (Config)
	float                                              UnarmedAimingBlendOutTime;                                // 0x00D0(0x0004) (Config)
	float                                              CurrentUnarmedAimingMomentumThreshold;                    // 0x00D4(0x0004)
	TEnumAsByte<EAimingType>                           AimingType;                                               // 0x00D8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlAim1p");
		return ptr;
	}


	void OnInit();
	void UpdateTransformation(class ATdPawn* PawnOwner);
};


// Class TdGame.TdSkelControlFootPlacement
// 0x003C (0x0100 - 0x00C4)
class UTdSkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                               // 0x00C4(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 FootUpAxis;                                               // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	struct FRotator                                    FootRotOffset;                                            // 0x00CC(0x000C) (Edit)
	unsigned long                                      bInvertFootUpAxis : 1;                                    // 0x00D8(0x0004) (Edit)
	unsigned long                                      bAlignFootPlacement : 1;                                  // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOrientFootToGround : 1;                                  // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                           // 0x00D8(0x0004) (Edit)
	unsigned long                                      bAdjustFootPlacement : 1;                                 // 0x00D8(0x0004) (Transient)
	unsigned long                                      bAdjustFootRotation : 1;                                  // 0x00D8(0x0004) (Transient)
	unsigned long                                      bInterpolateRotation : 1;                                 // 0x00D8(0x0004) (Edit)
	unsigned long                                      bInterpolatePosition : 1;                                 // 0x00D8(0x0004) (Edit)
	unsigned long                                      bResetOnActivated : 1;                                    // 0x00D8(0x0004) (Transient)
	float                                              MaxUpAdjustment;                                          // 0x00DC(0x0004) (Edit)
	float                                              MaxDownAdjustment;                                        // 0x00E0(0x0004) (Edit)
	float                                              MaxFootOrientAdjust;                                      // 0x00E4(0x0004) (Edit)
	struct FRotator                                    InterpolatedRotation;                                     // 0x00E8(0x000C)
	float                                              RotationInterpolationSpeed;                               // 0x00F4(0x0004) (Edit)
	float                                              InterpolatedPosition;                                     // 0x00F8(0x0004)
	float                                              PositionInterpolationSpeed;                               // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlFootPlacement");
		return ptr;
	}


	void OnSkelControlActive();
};


// Class TdGame.TdSkelControlHeadAim
// 0x0000 (0x00C4 - 0x00C4)
class UTdSkelControlHeadAim : public USkelControlSingleBone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlHeadAim");
		return ptr;
	}

};


// Class TdGame.TdSkelControlLazySpring
// 0x0028 (0x00EC - 0x00C4)
class UTdSkelControlLazySpring : public USkelControlSingleBone
{
public:
	TEnumAsByte<ESpringAxis>                           AffectedAxis;                                             // 0x00C4(0x0001) (Edit)
	TEnumAsByte<ESpringAxis>                           SourceAxis;                                               // 0x00C5(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET
	int                                                MaxAngle;                                                 // 0x00C8(0x0004) (Edit)
	int                                                MinAngle;                                                 // 0x00CC(0x0004) (Edit)
	float                                              InterpolateTime;                                          // 0x00D0(0x0004) (Edit)
	float                                              SpringMultiplier;                                         // 0x00D4(0x0004) (Edit)
	unsigned long                                      bScaleByVelocity : 1;                                     // 0x00D8(0x0004) (Edit)
	unsigned long                                      bIgnoreSlomo : 1;                                         // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOnlyPositiveInput : 1;                                   // 0x00D8(0x0004) (Edit)
	float                                              MaxVelocity;                                              // 0x00DC(0x0004) (Edit)
	float                                              MinVelocity;                                              // 0x00E0(0x0004) (Edit)
	float                                              HeavyWeaponModifier;                                      // 0x00E4(0x0004) (Edit)
	int                                                LazyRotation;                                             // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlLazySpring");
		return ptr;
	}

};


// Class TdGame.TdSkelControlLimb
// 0x0028 (0x00EC - 0x00C4)
class UTdSkelControlLimb : public USkelControlLimb
{
public:
	unsigned long                                      bDisableRotationAdjustment : 1;                           // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInterpolateLocation : 1;                                 // 0x00C4(0x0004) (Edit)
	unsigned long                                      bClampLocation : 1;                                       // 0x00C4(0x0004) (Edit)
	struct FVector                                     MinLocation;                                              // 0x00C8(0x000C) (Edit)
	struct FVector                                     MaxLocation;                                              // 0x00D4(0x000C) (Edit)
	struct FVector                                     TargetLocation;                                           // 0x00E0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlLimb");
		return ptr;
	}

};


// Class TdGame.TdSkelControlLookAt
// 0x0010 (0x0114 - 0x0104)
class UTdSkelControlLookAt : public USkelControlLookAt
{
public:
	float                                              DeadZoneBehindAngle;                                      // 0x0104(0x0004) (Edit)
	struct FVector                                     LimitCenterTweak;                                         // 0x0108(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlLookAt");
		return ptr;
	}

};


// Class TdGame.TdSkelControlRandom
// 0x0030 (0x00F4 - 0x00C4)
class UTdSkelControlRandom : public USkelControlSingleBone
{
public:
	TEnumAsByte<ERandomAxis>                           AffectedAxis;                                             // 0x00C4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	int                                                MinAngle;                                                 // 0x00C8(0x0004) (Edit)
	int                                                MaxAngle;                                                 // 0x00CC(0x0004) (Edit)
	float                                              Frequency;                                                // 0x00D0(0x0004) (Edit)
	float                                              TargetInterpolationTime;                                  // 0x00D4(0x0004) (Edit)
	unsigned long                                      bAlwaysSwitchSign : 1;                                    // 0x00D8(0x0004) (Edit)
	unsigned long                                      bScaleByVelocity : 1;                                     // 0x00D8(0x0004) (Edit)
	float                                              MaxVelocity;                                              // 0x00DC(0x0004) (Edit)
	float                                              MinVelocity;                                              // 0x00E0(0x0004) (Edit)
	float                                              TimeToUpdate;                                             // 0x00E4(0x0004)
	int                                                CurrentAngle;                                             // 0x00E8(0x0004)
	int                                                TargetAngle;                                              // 0x00EC(0x0004)
	int                                                LastSign;                                                 // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlRandom");
		return ptr;
	}

};


// Class TdGame.TdSkelControlRecoil
// 0x0014 (0x0100 - 0x00EC)
class UTdSkelControlRecoil : public UTdSkelControlLimb
{
public:
	float                                              InterpFactor;                                             // 0x00EC(0x0004)
	float                                              MinInterpValue;                                           // 0x00F0(0x0004)
	float                                              CurrentRecoil;                                            // 0x00F4(0x0004)
	float                                              TargetRecoil;                                             // 0x00F8(0x0004)
	float                                              RecoverDelay;                                             // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlRecoil");
		return ptr;
	}


	void AddImpulse(float Value, float delay, float Min, float Max);
};


// Class TdGame.TdSkelControlSimpleSpring
// 0x0040 (0x0104 - 0x00C4)
class UTdSkelControlSimpleSpring : public USkelControlSingleBone
{
public:
	struct FRotator                                    MaxAngle;                                                 // 0x00C4(0x000C) (Edit)
	struct FRotator                                    MinAngle;                                                 // 0x00D0(0x000C) (Edit)
	float                                              Inertia;                                                  // 0x00DC(0x0004) (Edit)
	float                                              Stiffness;                                                // 0x00E0(0x0004) (Edit)
	struct FVector                                     SpeedModifier;                                            // 0x00E4(0x000C) (Edit)
	unsigned long                                      bScaleByVelocity : 1;                                     // 0x00F0(0x0004) (Edit)
	float                                              MaxVelocity;                                              // 0x00F4(0x0004) (Edit)
	struct FRotator                                    PreviousRotation;                                         // 0x00F8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlSimpleSpring");
		return ptr;
	}

};


// Class TdGame.TdSkelControlSpring
// 0x0218 (0x02DC - 0x00C4)
class UTdSkelControlSpring : public USkelControlSingleBone
{
public:
	unsigned long                                      EnableVelocityDependedTranslationSpring : 1;              // 0x00C4(0x0004) (Edit, Config)
	unsigned long                                      EnableOnSpecificWeaponType : 1;                           // 0x00C4(0x0004) (Edit, Config)
	unsigned long                                      bInvertYaw : 1;                                           // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInvertPitch : 1;                                         // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInvertRoll : 1;                                          // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x00C4(0x0004)
	unsigned long                                      bLag : 1;                                                 // 0x00C4(0x0004)
	unsigned long                                      bOverlap : 1;                                             // 0x00C4(0x0004)
	unsigned long                                      EnableAccelerationBased : 1;                              // 0x00C4(0x0004) (Edit, Config)
	unsigned long                                      bIsAppliedToWrist : 1;                                    // 0x00C4(0x0004) (Edit, Config)
	unsigned long                                      HasReachedTargetVelocity : 1;                             // 0x00C4(0x0004)
	unsigned long                                      bDeltaIsIncreasing : 1;                                   // 0x00C4(0x0004)
	TEnumAsByte<EWeaponType>                           SpringWeaponType;                                         // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              SpringYawInterpVel;                                       // 0x00CC(0x0004) (Edit, Config)
	float                                              SpringPitchInterpVel;                                     // 0x00D0(0x0004) (Edit, Config)
	float                                              SpringRollInterpVel;                                      // 0x00D4(0x0004) (Edit, Config)
	float                                              TimeBetweenSpringUpdates;                                 // 0x00D8(0x0004) (Edit, Config)
	float                                              PreviousYaw;                                              // 0x00DC(0x0004)
	float                                              PreviousPitch;                                            // 0x00E0(0x0004)
	float                                              YawTargetDiff;                                            // 0x00E4(0x0004)
	float                                              PitchTargetDiff;                                          // 0x00E8(0x0004)
	float                                              RollTargetDiff;                                           // 0x00EC(0x0004)
	float                                              CurrentYawInterp;                                         // 0x00F0(0x0004)
	float                                              CurrentPitchInterp;                                       // 0x00F4(0x0004)
	float                                              CurrentRollInterp;                                        // 0x00F8(0x0004)
	float                                              CurrentYawInterpVel;                                      // 0x00FC(0x0004)
	float                                              YawDeltaTarget;                                           // 0x0100(0x0004)
	float                                              YawTargetSpeed;                                           // 0x0104(0x0004)
	float                                              MaxPitchDeltaOffset;                                      // 0x0108(0x0004) (Edit, Config)
	float                                              MaxYawDeltaOffset;                                        // 0x010C(0x0004) (Edit, Config)
	float                                              MaxRollDeltaOffset;                                       // 0x0110(0x0004) (Edit, Config)
	float                                              CurrTime;                                                 // 0x0114(0x0004)
	struct FRotator                                    PreviousPlayerControllerRotation;                         // 0x0118(0x000C)
	struct FVector                                     PreviousLinearVelocity;                                   // 0x0124(0x000C)
	struct FVector                                     PreviousAngularVelocity;                                  // 0x0130(0x000C)
	struct FVector                                     PreviousAngularAcceleration;                              // 0x013C(0x000C)
	struct FRotator                                    PreviousDeltaRotation;                                    // 0x0148(0x000C)
	struct FRotator                                    PreviousDeltaInterpolation;                               // 0x0154(0x000C)
	struct FRotator                                    TargetRotator;                                            // 0x0160(0x000C)
	struct FRotator                                    InterpolatedRotator;                                      // 0x016C(0x000C)
	struct FRotator                                    AngularRotationLimiter;                                   // 0x0178(0x000C)
	struct FRotator                                    PreviousInterpolatedRotator;                              // 0x0184(0x000C)
	struct FVector                                     VelocityIncrement;                                        // 0x0190(0x000C)
	struct FVector                                     InterpolationVelocity;                                    // 0x019C(0x000C)
	struct FVector                                     TargetInterpolationVelocity;                              // 0x01A8(0x000C)
	struct FVector                                     VelocityInterpolationSpeed;                               // 0x01B4(0x000C)
	struct FVector                                     DefaultInterpolationVelocity;                             // 0x01C0(0x000C) (Edit, Config)
	struct FVector                                     DefaultVelocityIncrement;                                 // 0x01CC(0x000C) (Edit, Config)
	struct FVector                                     DefaultVelocityDecrement;                                 // 0x01D8(0x000C) (Edit, Config)
	struct FRotator                                    DefaultAngularRotationLimiter;                            // 0x01E4(0x000C) (Edit, Config)
	struct FVector                                     AngularVelocityTargetMuliplier;                           // 0x01F0(0x000C) (Edit, Config)
	struct FVector                                     AngularVelocityLowerThresholdMuliplier;                   // 0x01FC(0x000C) (Edit, Config)
	struct FVector                                     AngularVelocityDecreaseInterpSpeed;                       // 0x0208(0x000C) (Edit, Config)
	struct FRotator                                    OverlapRotator;                                           // 0x0214(0x000C)
	struct FRotator                                    InterpolatedOverlapRotator;                               // 0x0220(0x000C)
	struct FRotator                                    TargetOverlapRotator;                                     // 0x022C(0x000C)
	struct FVector                                     OverlapVelocity;                                          // 0x0238(0x000C)
	struct FVector                                     OverlapVelocityIncrement;                                 // 0x0244(0x000C) (Edit, Config)
	struct FVector                                     ThresholdSmall;                                           // 0x0250(0x000C) (Edit, Config)
	struct FVector                                     ThresholdMedium;                                          // 0x025C(0x000C) (Edit, Config)
	struct FVector                                     ThresholdLarge;                                           // 0x0268(0x000C) (Edit, Config)
	struct FVector                                     VelocitySmall;                                            // 0x0274(0x000C) (Edit, Config)
	struct FVector                                     VelocityMedium;                                           // 0x0280(0x000C) (Edit, Config)
	struct FVector                                     VelocityLarge;                                            // 0x028C(0x000C) (Edit, Config)
	struct FRotator                                    RotatorSmall;                                             // 0x0298(0x000C) (Edit, Config)
	struct FRotator                                    RotatorMedium;                                            // 0x02A4(0x000C) (Edit, Config)
	struct FRotator                                    RotatorLarge;                                             // 0x02B0(0x000C) (Edit, Config)
	float                                              ControllerTime;                                           // 0x02BC(0x0004)
	float                                              ControllerTimeLimit;                                      // 0x02C0(0x0004) (Edit, Config)
	struct FRotator                                    ZeroRotator;                                              // 0x02C4(0x000C)
	struct FVector                                     ZeroVector;                                               // 0x02D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSkelControlSpring");
		return ptr;
	}

};


// Class TdGame.TdReverbVolume
// 0x0018 (0x0228 - 0x0210)
class ATdReverbVolume : public AReverbVolume
{
public:
	struct FStereoAmbientStruct                        StereoAmbient;                                            // 0x0210(0x0010) (Edit)
	TEnumAsByte<EVolumeType>                           vType;                                                    // 0x0220(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x0224(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReverbVolume");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeADSR
// 0x0078 (0x00C4 - 0x004C)
class UTdSoundNodeADSR : public USoundNode
{
public:
	TEnumAsByte<ESoundInterpolationMethod>             AttackInterpolationMethod;                                // 0x004C(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             DecayInterpolationMethod;                                 // 0x004D(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             ReleaseInterpolationMethod;                               // 0x004E(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	struct FRawDistributionFloat                       Attack;                                                   // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Decay;                                                    // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Sustain;                                                  // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Release;                                                  // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bModulatePitch : 1;                                       // 0x00C0(0x0004) (Edit)
	unsigned long                                      bModulateVolume : 1;                                      // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeADSR");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeAttack
// 0x0088 (0x00D4 - 0x004C)
class UTdSoundNodeAttack : public USoundNode
{
public:
	unsigned long                                      bModulatePitch : 1;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bModulateVolume : 1;                                      // 0x004C(0x0004) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             AttackInterpolationMethod;                                // 0x0050(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             DecayInterpolationMethod;                                 // 0x0051(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             AttackDistanceModel;                                      // 0x0052(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             DecayDistanceModel;                                       // 0x0053(0x0001) (Edit)
	float                                              AttackAtMinRadius;                                        // 0x0054(0x0004) (Edit)
	float                                              AttackAtMaxRadius;                                        // 0x0058(0x0004) (Edit)
	float                                              DecayAtMinRadius;                                         // 0x005C(0x0004) (Edit)
	float                                              DecayAtMaxRadius;                                         // 0x0060(0x0004) (Edit)
	struct FRawDistributionFloat                       AttackMinRadius;                                          // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AttackMaxRadius;                                          // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DecayMinRadius;                                           // 0x009C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DecayMaxRadius;                                           // 0x00B8(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeAttack");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeAttenuation
// 0x0020 (0x00E8 - 0x00C8)
class UTdSoundNodeAttenuation : public USoundNodeAttenuation
{
public:
	struct FRawDistributionFloat                       SpeedOfSound;                                             // 0x00C8(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bDelay : 1;                                               // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeAttenuation");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeDelayToDistance
// 0x0020 (0x006C - 0x004C)
class UTdSoundNodeDelayToDistance : public USoundNode
{
public:
	struct FRawDistributionFloat                       SpeedOfSound;                                             // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	float                                              MaxDistance;                                              // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeDelayToDistance");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeDuckTrigger
// 0x0054 (0x00A0 - 0x004C)
class UTdSoundNodeDuckTrigger : public USoundNode
{
public:
	TArray<struct FName>                               MixGroups;                                                // 0x004C(0x000C) (Edit, NeedCtorLink)
	float                                              DuckDuration;                                             // 0x0058(0x0004) (Edit)
	float                                              DuckLevel;                                                // 0x005C(0x0004) (Edit)
	struct FRawDistributionFloat                       MinRadius;                                                // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       MaxRadius;                                                // 0x007C(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned long                                      bAttenuate : 1;                                           // 0x009C(0x0004) (Edit)
	unsigned long                                      bInvertMixGroupSelection : 1;                             // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeDuckTrigger");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeInsideOutside
// 0x0000 (0x004C - 0x004C)
class UTdSoundNodeInsideOutside : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeInsideOutside");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeMixGroup
// 0x001C (0x0068 - 0x004C)
class UTdSoundNodeMixGroup : public USoundNode
{
public:
	unsigned long                                      bModulateVolume : 1;                                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bModulatePitch : 1;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bModulateLowPass : 1;                                     // 0x004C(0x0004) (Edit)
	unsigned long                                      bFirstRun : 1;                                            // 0x004C(0x0004) (Transient)
	TArray<struct FName>                               MixGroups;                                                // 0x0050(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        MixGroupIDs;                                              // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeMixGroup");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeRelativePosition
// 0x0010 (0x005C - 0x004C)
class UTdSoundNodeRelativePosition : public USoundNode
{
public:
	unsigned long                                      bCalculateOnce : 1;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bDebugDraw : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bRelativeToCamera : 1;                                    // 0x004C(0x0004) (Edit)
	struct FVector                                     RelativePos;                                              // 0x0050(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeRelativePosition");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeRelease
// 0x0028 (0x0074 - 0x004C)
class UTdSoundNodeRelease : public USoundNode
{
public:
	TEnumAsByte<ESoundInterpolationMethod>             ReleaseInterpolationMethod;                               // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       Release;                                                  // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	float                                              ReleaseToDistanceFactor;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bReleaseToDistance : 1;                                   // 0x0070(0x0004) (Edit)
	unsigned long                                      bModulatePitch : 1;                                       // 0x0070(0x0004) (Edit)
	unsigned long                                      bModulateVolume : 1;                                      // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeRelease");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeSlowMotion
// 0x0008 (0x0054 - 0x004C)
class UTdSoundNodeSlowMotion : public USoundNode
{
public:
	TEnumAsByte<ESoundInterpolationMethod>             PitchInterpolationMethod;                                 // 0x004C(0x0001) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             VolumeInterpolationMethod;                                // 0x004D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	unsigned long                                      bModulatePitch : 1;                                       // 0x0050(0x0004) (Edit)
	unsigned long                                      bModulateVolume : 1;                                      // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeSlowMotion");
		return ptr;
	}

};


// Class TdGame.TdSoundNodeVelocity
// 0x0028 (0x0074 - 0x004C)
class UTdSoundNodeVelocity : public USoundNode
{
public:
	unsigned long                                      bModulateVolume : 1;                                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bModulatePitch : 1;                                       // 0x004C(0x0004) (Edit)
	float                                              MinSpeed;                                                 // 0x0050(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x0054(0x0004) (Edit)
	float                                              VolumeAtMinSpeed;                                         // 0x0058(0x0004) (Edit)
	float                                              VolumeAtMaxSpeed;                                         // 0x005C(0x0004) (Edit)
	float                                              PitchAtMinSpeed;                                          // 0x0060(0x0004) (Edit)
	float                                              PitchAtMaxSpeed;                                          // 0x0064(0x0004) (Edit)
	TEnumAsByte<ESoundInterpolationMethod>             InterpolationMethod;                                      // 0x0068(0x0001) (Edit)
	TEnumAsByte<ESpeedType>                            TypeOfSpeed;                                              // 0x0069(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              FadeInTimeFilter;                                         // 0x006C(0x0004) (Edit)
	float                                              FadeOutTimeFilter;                                        // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundNodeVelocity");
		return ptr;
	}

};


// Class TdGame.AIGroup
// 0x0004 (0x0040 - 0x003C)
class UAIGroup : public UObject
{
public:
	class AAITeam*                                     Team;                                                     // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AIGroup");
		return ptr;
	}

};


// Class TdGame.AITeam
// 0x009C (0x025C - 0x01C0)
class AAITeam : public AActor
{
public:
	TEnumAsByte<EForcedAggressionLevel>                ForcedAggressionLevel;                                    // 0x01C0(0x0001)
	TEnumAsByte<ESide>                                 Side;                                                     // 0x01C1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01C2(0x0002) MISSED OFFSET
	unsigned long                                      bAILogging : 1;                                           // 0x01C4(0x0004) (Edit, Config)
	unsigned long                                      TabsOutOfSync : 1;                                        // 0x01C4(0x0004)
	unsigned long                                      scriptingActivated : 1;                                   // 0x01C4(0x0004)
	unsigned long                                      bHaveDrawnDebug : 1;                                      // 0x01C4(0x0004)
	TArray<class ATdAIController*>                     Members;                                                  // 0x01C8(0x000C) (NeedCtorLink)
	struct FString                                     TeamName;                                                 // 0x01D4(0x000C) (NeedCtorLink)
	class ATdAIController*                             Leader;                                                   // 0x01E0(0x0004)
	class AFileLog*                                    AILogFile;                                                // 0x01E4(0x0004)
	int                                                logTabs;                                                  // 0x01E8(0x0004)
	float                                              lastLogTime;                                              // 0x01EC(0x0004)
	struct FName                                       lastLogStateName;                                         // 0x01F0(0x0008)
	TArray<struct FName>                               AILogFilter;                                              // 0x01F8(0x000C) (Config, NeedCtorLink)
	TArray<class ATdAIController*>                     FiringMembers;                                            // 0x0204(0x000C) (NeedCtorLink)
	TArray<class ATdAIController*>                     MovingMembers;                                            // 0x0210(0x000C) (NeedCtorLink)
	TArray<class ARoute*>                              PatrolRoutes;                                             // 0x021C(0x000C) (Transient, NeedCtorLink)
	TArray<unsigned long>                              PatrolRoutesPicked;                                       // 0x0228(0x000C) (NeedCtorLink)
	TArray<class ANavigationPoint*>                    GuardSpots;                                               // 0x0234(0x000C) (Transient, NeedCtorLink)
	TArray<unsigned long>                              GuardSpotsPicked;                                         // 0x0240(0x000C) (NeedCtorLink)
	class ATdPawn*                                     Enemy;                                                    // 0x024C(0x0004)
	float                                              EnemyNotSeenTime;                                         // 0x0250(0x0004)
	class ATdAIManager*                                AIManager;                                                // 0x0254(0x0004)
	class ATdAI_Riot*                                  ShieldFormationMaster;                                    // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITeam");
		return ptr;
	}


	void OnForceAggression(TEnumAsByte<EForcedAggressionLevel> A);
	void OnSetCoverGroup(class USeqAct_SetCoverGroup* Action);
	void OnSetCombatRange(class USeqAct_SetCombatRange* Action);
	void OnAIFireAt(class USeqAct_AIFireAt* Action);
	void OnTdAIPerfectAim(class USeqAct_TdAIPerfectAim* Action);
	void OnAIForceWalking(class USeqAct_AIForceWalking* Action);
	void OnAIHoldFire(class USeqAct_AIHoldFire* Action);
	void OnTdSetPathLimits(class USeqAct_TdSetPathLimits* Action);
	void OnTdAIStasis(class USeqAct_TdAIStasis* Action);
	void OnAIImmobile(class USeqAct_AIImmobile* Action);
	void OnAIReleaseScripting(class USeqAct_AIReleaseScripting* Action);
	class ATdAI_Riot* GetShieldMasterAll(class ATdAIController* C);
	class ATdAI_Riot* GetShieldMaster(class ATdAIController* C);
	void Destroyed();
	void PostBeginPlay();
	void AskForClosestIdleTask(class ATdAIController* C, class ARoute** R, class ANavigationPoint** G);
	void NotifyEnemyIsDead();
	void Tick(float DeltaTime);
	void SetEnemy(class ATdPawn* aPawn);
	void ForgetEnemy();
	TEnumAsByte<EForcedAggressionLevel> GetForcedAggressionLevel();
	void SetForcedAggressionLevel(TEnumAsByte<EForcedAggressionLevel> A);
	void ReportSuspect(const struct FVector& pos);
	void ReportNoise(const struct FVector& pos);
	void HeardEnemy(class ATdAIController* Drone, class ATdPawn* aPawn);
	void ExposedEnemy(class ATdPawn* aPawn);
	void NoticedEnemy(class ATdAIController* Drone, class ATdPawn* aPawn);
	void NotifyDamage(class ATdAIController* Drone, class ATdPawn* InstigatedBy);
	void HandleEnemyExposed(class ATdPawn* aPawn);
	void HandleEnemySeen(class ATdAIController* Drone, class ATdPawn* aPawn);
	void OnMemberRemoved(class ATdAIController* Drone);
	void OnMemberAdded(class ATdAIController* Drone);
	void NotifyCombatStarted();
	void DrawDebug(struct FString* Text);
	void ClientMessage(const struct FString& S);
	class ATdAIController* GetClosestMember(const struct FVector& P);
	void SetShieldFormationMaster(class ATdAI_Riot* Master);
	bool HaveDrawnDebug();
	void SetHaveDrawnDebug(bool flag);
	void Reset();
	void LogFunction_Internal(const struct FString& FuncName, bool Start, const struct FString& S, const struct FName& LogCategory);
	void AILog_Internal(const struct FString& LogText, const struct FName& LogCategory, bool bForce);
	class ANavigationPoint* GetNearestNavToPoint(const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList);
	void RemoveMember(class ATdAIController* Member);
	void AddMember(class ATdAIController* NewMember);
};


// Class TdGame.AITemplate
// 0x0250 (0x028C - 0x003C)
class UAITemplate : public UObject
{
public:
	struct FString                                     ControllerClass;                                          // 0x003C(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     PawnClass;                                                // 0x0048(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ProfileName;                                              // 0x0054(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     AnimationSets[0x2];                                       // 0x0060(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     SkeletalMesh;                                             // 0x0078(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     AdditionalSkeletalMesh;                                   // 0x0084(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ExtraFaithAnimationSet1p;                                 // 0x0090(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ExtraFaithAnimationSet3p;                                 // 0x009C(0x000C) (Edit, Config, NeedCtorLink)
	float                                              LegOffsetWalkFwd;                                         // 0x00A8(0x0004) (Edit, Config)
	float                                              LegOffsetWalkLeft60;                                      // 0x00AC(0x0004) (Edit, Config)
	float                                              LegOffsetWalkLeftBwd120;                                  // 0x00B0(0x0004) (Edit, Config)
	float                                              LegOffsetWalkRight60;                                     // 0x00B4(0x0004) (Edit, Config)
	float                                              LegOffsetWalkRightBwd120;                                 // 0x00B8(0x0004) (Edit, Config)
	float                                              LegOffsetWalkBack;                                        // 0x00BC(0x0004) (Edit, Config)
	float                                              LegOffsetRunFwd;                                          // 0x00C0(0x0004) (Edit, Config)
	float                                              LegOffsetRunLeft90;                                       // 0x00C4(0x0004) (Edit, Config)
	float                                              LegOffsetRunLeft180;                                      // 0x00C8(0x0004) (Edit, Config)
	float                                              LegOffsetRunRight90;                                      // 0x00CC(0x0004) (Edit, Config)
	float                                              LegOffsetRunRight180;                                     // 0x00D0(0x0004) (Edit, Config)
	unsigned long                                      bLeftFootWalkCycle : 1;                                   // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      bCanDoSpecialMoves : 1;                                   // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      CanRun : 1;                                               // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      bMute : 1;                                                // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      CanUseSuppressionFire : 1;                                // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      bEnableInverseKinematics : 1;                             // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      bEnableFootPlacement : 1;                                 // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      bEnableMeleePose : 1;                                     // 0x00D4(0x0004) (Edit, Config)
	unsigned long                                      ShouldBlink : 1;                                          // 0x00D4(0x0004) (Edit, Config)
	float                                              Dispersion_Max;                                           // 0x00D8(0x0004) (Edit, Config)
	float                                              Dispersion_Min;                                           // 0x00DC(0x0004) (Edit, Config)
	struct FDistanceBasedValue                         HorizontalOffset_Max;                                     // 0x00E0(0x000C) (Edit, Config)
	float                                              HorizontalOffset_Min;                                     // 0x00EC(0x0004) (Edit, Config)
	float                                              VerticalOffset_Max;                                       // 0x00F0(0x0004) (Edit, Config)
	float                                              VerticalOffset_Min;                                       // 0x00F4(0x0004) (Edit, Config)
	struct FDistanceBasedValue                         OffsetThreshold;                                          // 0x00F8(0x000C) (Edit, Config)
	float                                              MoveSidewaysMultiplier;                                   // 0x0104(0x0004) (Edit, Config)
	float                                              MoveAwayMultiplier;                                       // 0x0108(0x0004) (Edit, Config)
	float                                              MoveTowardMultiplier;                                     // 0x010C(0x0004) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Near;                                    // 0x0110(0x000C) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Medium;                                  // 0x011C(0x000C) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Far;                                     // 0x0128(0x000C) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Near_CHASE;                              // 0x0134(0x000C) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Medium_CHASE;                            // 0x0140(0x000C) (Edit, Config)
	struct FImprovementRateSettings                    ImprovementRates_Far_CHASE;                               // 0x014C(0x000C) (Edit, Config)
	struct FAmmoDropSettings                           MainWeaponAmmoDrops_Dropped_CHASE;                        // 0x0158(0x000C) (Edit, Const, Config)
	struct FAmmoDropSettings                           MainWeaponAmmoDrops_Disarmed_CHASE;                       // 0x0164(0x000C) (Edit, Const, Config)
	float                                              SoftLockStrength_CHASE;                                   // 0x0170(0x0004) (Edit, Config)
	int                                                MeleeAttackLimit_CHASE;                                   // 0x0174(0x0004) (Edit, Config)
	struct FImprovementRateSettings                    RegenerationDelay;                                        // 0x0178(0x000C) (Edit, Config)
	float                                              MovementRate_Horizontal;                                  // 0x0184(0x0004) (Edit, Config)
	float                                              MovementRate_Vertical;                                    // 0x0188(0x0004) (Edit, Config)
	float                                              CosHalfAttackAngle;                                       // 0x018C(0x0004) (Edit, Config)
	float                                              DamageMultiplier_Head;                                    // 0x0190(0x0004) (Edit, Config)
	float                                              DamageMultiplier_Body;                                    // 0x0194(0x0004) (Edit, Config)
	float                                              VisionAngle;                                              // 0x0198(0x0004) (Edit, Config)
	float                                              CertainVisionRange;                                       // 0x019C(0x0004) (Edit, Config)
	float                                              UncertainVisionRange;                                     // 0x01A0(0x0004) (Edit, Config)
	float                                              HearingRange;                                             // 0x01A4(0x0004) (Edit, Config)
	struct FInterpCurveFloat                           SpeedCurve_HeavyWeapon;                                   // 0x01A8(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           SpeedCurve_LightWeapon;                                   // 0x01B8(0x0010) (Edit, NeedCtorLink)
	int                                                RotationSpeed;                                            // 0x01C8(0x0004) (Edit, Config)
	struct FString                                     MainWeaponClass;                                          // 0x01CC(0x000C) (Edit, Config, NeedCtorLink)
	struct FAmmoDropSettings                           MainWeaponAmmoDrops_Dropped;                              // 0x01D8(0x000C) (Edit, Const, Config)
	struct FAmmoDropSettings                           MainWeaponAmmoDrops_Disarmed;                             // 0x01E4(0x000C) (Edit, Const, Config)
	TArray<struct FString>                             OtherWeaponClasses;                                       // 0x01F0(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     DroppedGrenadeClass;                                      // 0x01FC(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ShieldClass;                                              // 0x0208(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     AimProfileName;                                           // 0x0214(0x000C) (Edit, Config, NeedCtorLink)
	int                                                MaxHealth;                                                // 0x0220(0x0004) (Edit, Config)
	float                                              SuppressionRecoveryTime;                                  // 0x0224(0x0004) (Edit, Config)
	float                                              SuppressionDeclineTime;                                   // 0x0228(0x0004) (Edit, Config)
	float                                              SuppressionDistance;                                      // 0x022C(0x0004) (Edit, Config)
	float                                              SuppressionFactorForDirectHit;                            // 0x0230(0x0004) (Edit, Config)
	float                                              MeleeRange;                                               // 0x0234(0x0004) (Edit, Config)
	float                                              MeleeRangeSecondAttack;                                   // 0x0238(0x0004) (Edit, Config)
	float                                              DisarmWindow;                                             // 0x023C(0x0004) (Edit, Config)
	float                                              MeleePredictionTimeMin;                                   // 0x0240(0x0004) (Edit, Config)
	float                                              MeleePredictionTimeMax;                                   // 0x0244(0x0004) (Edit, Config)
	int                                                MeleeAttackLimit;                                         // 0x0248(0x0004) (Edit, Config)
	float                                              MeleeLayDownIdleTime;                                     // 0x024C(0x0004) (Edit, Config)
	float                                              SoftLockStrength;                                         // 0x0250(0x0004) (Edit, Config)
	float                                              SuppressionTime;                                          // 0x0254(0x0004) (Edit, Config)
	float                                              YawLimitDrop;                                             // 0x0258(0x0004) (Edit, Config)
	float                                              YawLimitActivate;                                         // 0x025C(0x0004) (Edit, Config)
	float                                              YawLimitMin;                                              // 0x0260(0x0004) (Edit, Config)
	float                                              YawLimitMax;                                              // 0x0264(0x0004) (Edit, Config)
	float                                              PitchLimitMin;                                            // 0x0268(0x0004) (Edit, Config)
	float                                              PitchLimitMax;                                            // 0x026C(0x0004) (Edit, Config)
	float                                              HeadAimScale;                                             // 0x0270(0x0004) (Edit, Config)
	float                                              MaxEyesOffsetUpper;                                       // 0x0274(0x0004) (Edit, Config)
	float                                              MinEyesOffsetUpper;                                       // 0x0278(0x0004) (Edit, Config)
	float                                              MaxEyesOffsetLower;                                       // 0x027C(0x0004) (Edit, Config)
	float                                              MinEyesOffsetLower;                                       // 0x0280(0x0004) (Edit, Config)
	float                                              ClosedEyeOffsetUpper;                                     // 0x0284(0x0004) (Edit, Config)
	float                                              ClosedEyeOffsetLower;                                     // 0x0288(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate");
		return ptr;
	}


	float GetRandomMeleePredictionTime();
	class UClass* GetClassFromName(const struct FString& TheClassName);
};


// Class TdGame.AITemplate_Default
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Default : public UAITemplate
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Default");
		return ptr;
	}

};


// Class TdGame.AITemplate_Assault
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Assault : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Assault");
		return ptr;
	}

};


// Class TdGame.TdActorFactoryAI
// 0x0008 (0x0094 - 0x008C)
class UTdActorFactoryAI : public UActorFactoryAI
{
public:
	class UClass*                                      Template;                                                 // 0x008C(0x0004)
	class UAITemplate*                                 LastTemplate;                                             // 0x0090(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdActorFactoryAI");
		return ptr;
	}

};


// Class TdGame.TdAIController
// 0x031C (0x0600 - 0x02E4)
class ATdAIController : public AAIController
{
public:
	struct FPointer                                    VfTable_ITdController;                                    // 0x02E4(0x0004) (Const, Native, NoExport)
	int                                                SetupTemplateCount;                                       // 0x02E8(0x0004)
	TEnumAsByte<EMeleeType>                            MeleeType;                                                // 0x02EC(0x0001)
	TEnumAsByte<EAggressionLevel>                      AggressionLevel;                                          // 0x02ED(0x0001)
	TEnumAsByte<EFocusType>                            WantedFocus;                                              // 0x02EE(0x0001)
	TEnumAsByte<ECoverDirectionState>                  CoverDirection;                                           // 0x02EF(0x0001)
	TEnumAsByte<ECoverDirectionState>                  ForcedCoverDirection;                                     // 0x02F0(0x0001) (Transient)
	TEnumAsByte<EPose>                                 WantedPose;                                               // 0x02F1(0x0001)
	TEnumAsByte<EAdvanceAction>                        CurrentAdvanceAction;                                     // 0x02F2(0x0001)
	TEnumAsByte<EMoveDir>                              LineOfFireMoveDir;                                        // 0x02F3(0x0001)
	TEnumAsByte<EMoveDir>                              MovingBackMoveDir;                                        // 0x02F4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	TArray<struct FTdLine>                             BatchedLines;                                             // 0x02F8(0x000C) (NeedCtorLink)
	class AHUD*                                        HUD;                                                      // 0x0304(0x0004)
	float                                              PlayerLookAtOffsetZ;                                      // 0x0308(0x0004)
	unsigned long                                      bForceKeepMoving : 1;                                     // 0x030C(0x0004)
	unsigned long                                      bDebugHalt : 1;                                           // 0x030C(0x0004)
	unsigned long                                      bFirstShot : 1;                                           // 0x030C(0x0004)
	unsigned long                                      IAmShieldMaster : 1;                                      // 0x030C(0x0004)
	unsigned long                                      bTrailingBehind : 1;                                      // 0x030C(0x0004)
	unsigned long                                      bTrailingBehindAlot : 1;                                  // 0x030C(0x0004)
	unsigned long                                      bIsInPosition : 1;                                        // 0x030C(0x0004)
	unsigned long                                      bHasDoneEnemyReachableTest : 1;                           // 0x030C(0x0004)
	unsigned long                                      bEnemyIsReachable : 1;                                    // 0x030C(0x0004)
	unsigned long                                      tempBool : 1;                                             // 0x030C(0x0004)
	unsigned long                                      bRandomCrouch : 1;                                        // 0x030C(0x0004)
	unsigned long                                      HasTriggeredMeleeAttack : 1;                              // 0x030C(0x0004)
	unsigned long                                      ExitMeleeAsSoonAsPossible : 1;                            // 0x030C(0x0004)
	unsigned long                                      bAllowFocus : 1;                                          // 0x030C(0x0004) (Transient)
	unsigned long                                      bAllowFocusRotation : 1;                                  // 0x030C(0x0004) (Transient)
	unsigned long                                      bAtGoodFiringPosition : 1;                                // 0x030C(0x0004)
	unsigned long                                      bCurrentRouteContainsMoves : 1;                           // 0x030C(0x0004)
	unsigned long                                      bForceSniperCrouched : 1;                                 // 0x030C(0x0004)
	unsigned long                                      bFailedLastPathToEnemy : 1;                               // 0x030C(0x0004)
	unsigned long                                      bIsOkToFire : 1;                                          // 0x030C(0x0004)
	unsigned long                                      bCanFireFromHere : 1;                                     // 0x030C(0x0004)
	unsigned long                                      bIsWithinAttackAngle : 1;                                 // 0x030C(0x0004)
	unsigned long                                      bHasLineOfFire : 1;                                       // 0x030C(0x0004)
	unsigned long                                      bIsWithinFiringDistance : 1;                              // 0x030C(0x0004)
	unsigned long                                      bHoldFire : 1;                                            // 0x030C(0x0004)
	unsigned long                                      EnemyVisible : 1;                                         // 0x030C(0x0004)
	unsigned long                                      bPlayerSeenForReal : 1;                                   // 0x030C(0x0004)
	unsigned long                                      PlayerLookingTowardsMe : 1;                               // 0x030C(0x0004)
	unsigned long                                      FireWeapon : 1;                                           // 0x030C(0x0004)
	unsigned long                                      bForceFire : 1;                                           // 0x030C(0x0004)
	unsigned long                                      bReachedMoveGoal : 1;                                     // 0x030C(0x0004)
	unsigned long                                      bStopMoveToGoal : 1;                                      // 0x030C(0x0004)
	unsigned long                                      bSkipReachableTest : 1;                                   // 0x0310(0x0004)
	unsigned long                                      bUseMomentum : 1;                                         // 0x0310(0x0004)
	unsigned long                                      bSkipPathFind : 1;                                        // 0x0310(0x0004)
	unsigned long                                      bMovingToGoal : 1;                                        // 0x0310(0x0004)
	unsigned long                                      bFirstSearch : 1;                                         // 0x0310(0x0004)
	unsigned long                                      bFirstMoveTowards : 1;                                    // 0x0310(0x0004)
	unsigned long                                      bClearFirstMoveTowards : 1;                               // 0x0310(0x0004)
	unsigned long                                      bFirstDestination : 1;                                    // 0x0310(0x0004)
	unsigned long                                      bForceMoveTowardToReturn : 1;                             // 0x0310(0x0004)
	unsigned long                                      bMoveJustFinished : 1;                                    // 0x0310(0x0004)
	unsigned long                                      bLandingDone : 1;                                         // 0x0310(0x0004)
	unsigned long                                      HaltAfterMoveToGoal : 1;                                  // 0x0310(0x0004)
	unsigned long                                      MoveGoalIsEnemy : 1;                                      // 0x0310(0x0004)
	unsigned long                                      IsMovingToCover : 1;                                      // 0x0310(0x0004)
	unsigned long                                      bRetreatFromCoverWhenExited : 1;                          // 0x0310(0x0004)
	unsigned long                                      bExitedCover : 1;                                         // 0x0310(0x0004)
	unsigned long                                      IsAdvancing : 1;                                          // 0x0310(0x0004)
	unsigned long                                      bIsWalkingToNode : 1;                                     // 0x0310(0x0004)
	unsigned long                                      bWaitForRotation : 1;                                     // 0x0310(0x0004)
	unsigned long                                      bAdvance : 1;                                             // 0x0310(0x0004)
	unsigned long                                      bIsImmobile : 1;                                          // 0x0310(0x0004)
	unsigned long                                      bSliding : 1;                                             // 0x0310(0x0004)
	unsigned long                                      bCheckForLedges : 1;                                      // 0x0310(0x0004)
	unsigned long                                      IsInCover : 1;                                            // 0x0310(0x0004)
	unsigned long                                      bCoverDirectionValid : 1;                                 // 0x0310(0x0004)
	unsigned long                                      bUseCoverCPOL : 1;                                        // 0x0310(0x0004)
	unsigned long                                      bUseCoverDetour : 1;                                      // 0x0310(0x0004)
	unsigned long                                      bUseCoverPathRestrictions : 1;                            // 0x0310(0x0004)
	unsigned long                                      bForceValidCoverDirection : 1;                            // 0x0310(0x0004) (Transient)
	unsigned long                                      bUseSaferPaths : 1;                                       // 0x0310(0x0004)
	unsigned long                                      bAvoidPopulatedPaths : 1;                                 // 0x0310(0x0004)
	unsigned long                                      bOldUseSaferPaths : 1;                                    // 0x0310(0x0004)
	unsigned long                                      bOldAvoidPopulatedPaths : 1;                              // 0x0314(0x0004)
	unsigned long                                      bEnemyIsAimingAtUs : 1;                                   // 0x0314(0x0004)
	unsigned long                                      bAnimationPlaybackInterrupted : 1;                        // 0x0314(0x0004) (Transient)
	unsigned long                                      bIsInMeleeState : 1;                                      // 0x0314(0x0004)
	unsigned long                                      bIsFirstBackupTestToTheSide : 1;                          // 0x0314(0x0004)
	unsigned long                                      bUsingBackupDir : 1;                                      // 0x0314(0x0004)
	unsigned long                                      bHasBackupDir : 1;                                        // 0x0314(0x0004)
	unsigned long                                      scriptingActivated : 1;                                   // 0x0314(0x0004)
	unsigned long                                      finishedScriptedMove : 1;                                 // 0x0314(0x0004)
	unsigned long                                      bDoAimingLag : 1;                                         // 0x0314(0x0004) (Edit)
	unsigned long                                      bDrawAimingLines : 1;                                     // 0x0314(0x0004) (Edit)
	unsigned long                                      bAILogging : 1;                                           // 0x0314(0x0004) (Edit, Config)
	unsigned long                                      bAILogToWindow : 1;                                       // 0x0314(0x0004) (Edit, Config)
	unsigned long                                      bPlayerInvisibleToAI : 1;                                 // 0x0314(0x0004)
	unsigned long                                      TabsOutOfSync : 1;                                        // 0x0314(0x0004)
	unsigned long                                      bEnemyDead : 1;                                           // 0x0314(0x0004)
	unsigned long                                      bAllowStumbleRotation : 1;                                // 0x0314(0x0004)
	unsigned long                                      bDebugLineOfSight : 1;                                    // 0x0314(0x0004)
	unsigned long                                      bUseVoiceOver : 1;                                        // 0x0314(0x0004) (Config)
	unsigned long                                      bMuted : 1;                                               // 0x0314(0x0004)
	float                                              ForceKeepMovingEndedTimeStamp;                            // 0x0318(0x0004)
	float                                              fMinCombatDistance;                                       // 0x031C(0x0004)
	float                                              fMaxCombatDistance;                                       // 0x0320(0x0004)
	float                                              fPreferredCombatDistance;                                 // 0x0324(0x0004)
	int                                                iRecursionGuard;                                          // 0x0328(0x0004)
	int                                                MaxDistFromLineToBlock;                                   // 0x032C(0x0004)
	class AAITeam*                                     Team;                                                     // 0x0330(0x0004)
	float                                              fLookbackTime;                                            // 0x0334(0x0004)
	class UAITemplate*                                 myTemplate;                                               // 0x0338(0x0004)
	TArray<struct FString>                             myScreenLog;                                              // 0x033C(0x000C) (NeedCtorLink)
	class UTdAimBotBase*                               AimBot;                                                   // 0x0348(0x0004)
	class UTdAimBotBase*                               RealAimBot;                                               // 0x034C(0x0004) (Edit, EditInline)
	class UTdAimBotBase*                               PerfectAimBot;                                            // 0x0350(0x0004)
	class AActor*                                      ScriptedAimTarget;                                        // 0x0354(0x0004)
	class ATdPawn*                                     myEnemy;                                                  // 0x0358(0x0004)
	struct FVector                                     PredictedEnemyLocation;                                   // 0x035C(0x000C)
	TArray<class ANavigationPoint*>                    OccupiedNodes;                                            // 0x0368(0x000C) (NeedCtorLink)
	int                                                PathNetworkMask;                                          // 0x0374(0x0004)
	TArray<class UReachSpec*>                          OldPath;                                                  // 0x0378(0x000C) (NeedCtorLink)
	class ANavigationPoint*                            OldAnchor;                                                // 0x0384(0x0004)
	struct FStoredMovementVarsStruct                   StoredMovementVars;                                       // 0x0388(0x0058) (NeedCtorLink)
	class ATdAI_Riot*                                  ShieldMaster;                                             // 0x03E0(0x0004)
	struct FVector                                     ShieldWallLocation;                                       // 0x03E4(0x000C)
	struct FVector                                     tempVector;                                               // 0x03F0(0x000C)
	float                                              tempFloat;                                                // 0x03FC(0x0004)
	int                                                tempInt;                                                  // 0x0400(0x0004)
	float                                              StandUpTimeStamp;                                         // 0x0404(0x0004)
	float                                              CrouchRange;                                              // 0x0408(0x0004)
	float                                              ExitedMelee;                                              // 0x040C(0x0004)
	float                                              EnteredMelee;                                             // 0x0410(0x0004)
	float                                              ExitMeleeDelay;                                           // 0x0414(0x0004)
	class UTdFocusHandler*                             PawnFocus;                                                // 0x0418(0x0004)
	class UTdHeadFocusHandler*                         HeadFocus;                                                // 0x041C(0x0004)
	int                                                HeadFocusPointCount;                                      // 0x0420(0x0004)
	class ANavigationPoint*                            GuardSpot;                                                // 0x0424(0x0004)
	class ARoute*                                      PatrolRoute;                                              // 0x0428(0x0004)
	class ANavigationPoint*                            ReachablePlayerNavigationPoint;                           // 0x042C(0x0004)
	class ANavigationPoint*                            GoodFiringPosition;                                       // 0x0430(0x0004)
	class ANavigationPoint*                            TempGoodFiringPosition;                                   // 0x0434(0x0004)
	class ATdPathLimits*                               PathLimits;                                               // 0x0438(0x0004)
	float                                              fCurrentRouteDistance;                                    // 0x043C(0x0004)
	int                                                VisiblePointsIndex;                                       // 0x0440(0x0004)
	float                                              WeaponFiredTimeStamp;                                     // 0x0444(0x0004)
	float                                              AdvanceTimer;                                             // 0x0448(0x0004)
	float                                              EnemyDistance;                                            // 0x044C(0x0004)
	float                                              EnemyDistance2d;                                          // 0x0450(0x0004)
	float                                              EnemyDistanceSq;                                          // 0x0454(0x0004)
	struct FVector                                     EnemyDir;                                                 // 0x0458(0x000C)
	struct FVector                                     EnemyDir2D;                                               // 0x0464(0x000C)
	float                                              EnemyDot;                                                 // 0x0470(0x0004)
	class ATdCoverController*                          CoverController;                                          // 0x0474(0x0004)
	class ATdAIGrenadeController*                      GrenadeController;                                        // 0x0478(0x0004)
	float                                              OkToTryAgainTimeStamp;                                    // 0x047C(0x0004)
	struct FVector                                     LastFailedPathLocation;                                   // 0x0480(0x000C)
	struct FVector                                     LastReachableEnemyPos;                                    // 0x048C(0x000C)
	class ATdBotPawn*                                  BlockingPawn;                                             // 0x0498(0x0004)
	float                                              CheckedBlockingPawnTimeStamp;                             // 0x049C(0x0004)
	float                                              EnemySeenLastTime;                                        // 0x04A0(0x0004)
	struct FVector                                     LastActuallySeenLocation;                                 // 0x04A4(0x000C)
	float                                              MeleePredictionTime;                                      // 0x04B0(0x0004)
	class ATdPlayerPawn*                               Player;                                                   // 0x04B4(0x0004)
	class ATdPlayerController*                         PlayerController;                                         // 0x04B8(0x0004)
	float                                              PlayerLookingTowardsMeDot;                                // 0x04BC(0x0004)
	float                                              PlayerLookingTowardsMeTimeStamp;                          // 0x04C0(0x0004)
	float                                              TimeSincePlayerLookedAtMe;                                // 0x04C4(0x0004)
	float                                              EnemyNotVisibleTimeStamp;                                 // 0x04C8(0x0004)
	struct FRotator                                    AimingRotation;                                           // 0x04CC(0x000C)
	float                                              SuppressionRecoveryTime;                                  // 0x04D8(0x0004) (Edit)
	float                                              SuppressionDeclineTime;                                   // 0x04DC(0x0004) (Edit)
	float                                              SuppressionDistance;                                      // 0x04E0(0x0004) (Edit)
	float                                              SuppressionFactorForDirectHit;                            // 0x04E4(0x0004) (Edit)
	float                                              Suppression;                                              // 0x04E8(0x0004)
	float                                              KeepFiringTime;                                           // 0x04EC(0x0004)
	int                                                RotationSpeedCFG;                                         // 0x04F0(0x0004) (Edit)
	class AActor*                                      MoveGoal;                                                 // 0x04F4(0x0004)
	struct FVector                                     MovePoint;                                                // 0x04F8(0x000C)
	struct FVector                                     PathfindingGoalPos;                                       // 0x0504(0x000C)
	struct FVector                                     StartingLocation;                                         // 0x0510(0x000C)
	float                                              MoveOffset;                                               // 0x051C(0x0004)
	int                                                UpdatePathInFrames;                                       // 0x0520(0x0004)
	class AActor*                                      OldMoveTarget;                                            // 0x0524(0x0004)
	float                                              MoveToGoalTimeStamp;                                      // 0x0528(0x0004)
	float                                              LastShouldRunTimeStamp;                                   // 0x052C(0x0004)
	float                                              AdvanceTime;                                              // 0x0530(0x0004) (Const)
	float                                              fTimeUntilPlayerWithinMeleeRange;                         // 0x0534(0x0004)
	class AActor*                                      tempDest;                                                 // 0x0538(0x0004)
	class UTdCover*                                    CurrentCover;                                             // 0x053C(0x0004)
	class ACoverGroup*                                 ActiveCoverGroup;                                         // 0x0540(0x0004)
	struct FVector                                     OldFocalPoint;                                            // 0x0544(0x000C)
	float                                              PopulatedPathsCost;                                       // 0x0550(0x0004)
	struct FName                                       MeleeState;                                               // 0x0554(0x0008)
	struct FVector                                     BackupDir;                                                // 0x055C(0x000C)
	class UTdBubbleStack*                              Interruptable;                                            // 0x0568(0x0004)
	struct FVector                                     tempMovePos;                                              // 0x056C(0x000C)
	class AActor*                                      tempMoveToActor;                                          // 0x0578(0x0004)
	struct FVector                                     temporaryMovePos;                                         // 0x057C(0x000C)
	float                                              BotAimingLag;                                             // 0x0588(0x0004) (Edit, Config)
	int                                                DifficultyLevel;                                          // 0x058C(0x0004) (Transient)
	float                                              lastLogTime;                                              // 0x0590(0x0004)
	struct FName                                       lastLogStateName;                                         // 0x0594(0x0008)
	class AFileLog*                                    AILogFile;                                                // 0x059C(0x0004)
	TArray<struct FName>                               AILogFilter;                                              // 0x05A0(0x000C) (Config, NeedCtorLink)
	int                                                logTabs;                                                  // 0x05AC(0x0004)
	TArray<struct FName>                               ScreenLogFilter;                                          // 0x05B0(0x000C) (Config, NeedCtorLink)
	struct FString                                     DebugString;                                              // 0x05BC(0x000C) (NeedCtorLink)
	struct FString                                     DebugString2;                                             // 0x05C8(0x000C) (NeedCtorLink)
	float                                              LastStumbleTime;                                          // 0x05D4(0x0004)
	class AActor*                                      ActorBlockingLineOfSight;                                 // 0x05D8(0x0004)
	float                                              CurrentAimDispersion;                                     // 0x05DC(0x0004)
	class ATdBotPawn*                                  myPawn;                                                   // 0x05E0(0x0004)
	class ATdAIVoiceOverManager*                       VoiceOverManager;                                         // 0x05E4(0x0004)
	class ATdAIManager*                                AIManager;                                                // 0x05E8(0x0004)
	int                                                voice;                                                    // 0x05EC(0x0004)
	class UTdMove_BotMelee*                            BotMeleeMove;                                             // 0x05F0(0x0004) (Edit, EditInline)
	TArray<class USeqEvt_TdWeaponFired*>               WeaponFiredEvents;                                        // 0x05F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIController");
		return ptr;
	}


	void StopHere();
	bool OkToBeEvaded();
	bool OkToEvade();
	void RecycleBot();
	void ToggleCoverPath();
	void ToggleCoverDetour();
	void ToggleCoverCPOL();
	void NotifyPawnHasStopped();
	void NotifyBossFightOver();
	bool ShouldStopAfterMove();
	bool PreStopMove();
	void InterruptMovement();
	void NotifyLandingDone();
	void NotifyMoveChanged(TEnumAsByte<EMovement> OldMove, TEnumAsByte<EMovement> CurrentMove, int iCounter);
	void NotifySetMove(TEnumAsByte<EMovement> OldMove, TEnumAsByte<EMovement> NewMove, int iCounter);
	void NotifyMoveFinished();
	void SetMoveTarget(class AActor* A);
	void AfterMovePathCleanup();
	void SkipPathNode();
	void NotifyFalling();
	bool CanSkipPathNode(bool testIsSkippable);
	struct FVector GetStartPoint();
	int PointsLeftInPath();
	void ScriptActivated(bool Active);
	void SetStasisMode(bool flag);
	void SetImmobile(bool flag);
	void OnTdAddAdditionalAnimSets(class USeqAct_TdAddAdditionalAnimSets* Action);
	void OnTdTutorialReset(class USeqAct_TdTutorialReset* Action);
	void OnTdAIPlayAnimation(class USeqAct_TdAIPlayAnimation* Action);
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* seqAct);
	void OnTdAIPerfectAim(class USeqAct_TdAIPerfectAim* Action);
	void OnTdSetPathLimits(class USeqAct_TdSetPathLimits* Action);
	void SetCoverGroup(class ACoverGroup* NewGroup);
	void OnSetCoverGroup(class USeqAct_SetCoverGroup* seqAct);
	void AdjustRotation();
	void MoveToGoalTimedOut();
	bool IsAtMoveGoal();
	float GetMoveTimeOutDuration();
	void MoveToTarget();
	bool SetMovePoint(const struct FVector& NewMovePoint, class AActor* NewMoveFocus, float OffsetDist, bool HaltAfterMove, bool CanMoveDirectly);
	bool SetMoveGoal(class AActor* NewMoveGoal, class AActor* NewMoveFocus, float OffsetDist, bool HaltAfterMove);
	bool SetMoveLocationEnemy(class AActor* NewMoveFocus, float OffsetDist, bool HaltAfterMove);
	bool ShouldUsePlayerNavigationPoint();
	void TimedAbortMove();
	void CheckForceWalk();
	bool OkToMoveDirectlyToActor();
	bool OkToMoveDirectlyToPoint();
	void AddToMoveTimer(float Time);
	void ClearExitedCover();
	struct FVector GetRetreatFromCoverDir();
	void MoveToCover(bool IsTeamManouver);
	void SwitchDirection();
	bool CanSwitchDirection();
	void FireFromCover();
	bool HandlePathObstruction(class AActor* BlockedBy);
	void UpdateStumbleRotation(bool bAllowRotation);
	void TestExitStumble();
	void OnMovementStateChange(const struct FName& NewState);
	bool FindNewCover(float minDot);
	bool FindClosestCover();
	void CheckCurrentCover();
	void OnFailedEnterCover();
	void ClaimCover(class UTdCover* NewCover, bool CheckCover);
	void NotifyCoverDropped();
	void DropCover(bool ShouldNotify, bool bShouldMarkCoverInvalid, bool bRetreatFromCover);
	void AnimationPlaybackInterrupted();
	void StopAnimationPlayback();
	void StartAnimationPlayback();
	void OnAnimationPlaybackExit();
	void OnAnimationPlaybackStart();
	void SetAnimationProperties(const struct FName& AnimationName, float PlayRate, float BlendInTime, float BlendOutTime, bool bUseRootMotion, bool bUseRootRotation, bool bLoopAnimation, int FinalAnimationState);
	bool IsInAnimationPlaybackState();
	void OnStopCustomAnimation();
	void OnStartCustomAnimation(const struct FName& AnimationName, float PlayRate, float BlendInTime, float BlendOutTime, bool bUseRootMotion, bool bUseRootRotation, bool bLoopAnimation, int FinalAnimationState, bool OverrideAll);
	bool IsTrailingBehindAlot();
	bool IsTrailingBehind();
	void LeaveFormation();
	void ForceLeaveFormation();
	void UpdateFormationPos(const struct FVector& pos);
	bool UseFullBodyMelee();
	void SetMeleeType(const struct FString& mt);
	void UpdateMoveGoal();
	bool RotationOkForMelee();
	bool EnemyIsDisarming();
	bool ShouldDoSecondSwing();
	void NotifyMeleeFinished();
	bool IsPredictedPositionWithinMeleeRange(float Range);
	bool ShouldEnterMelee(float Range);
	bool EnemyHarmless();
	bool ShouldGetWithinPathlimits();
	void NotifyPlayerReachable();
	struct FVector GetFindLineOfFirePos(float Dist);
	bool FindBackupDir();
	void SetAdvanceAction(TEnumAsByte<EAdvanceAction> aa);
	void LookBack();
	bool OkToLookBack();
	void UpdateBackup();
	bool FindBackupDirFromHitNormal(const struct FVector& HitNormal);
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	bool NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool CheckBackupDirectionValid(const struct FVector& Dir);
	struct FVector GetAdvancePoint();
	void EndAdvance();
	void BeginAdvance();
	void CheckCrouching();
	bool AskToCrouch();
	bool RandomCrouch();
	bool IsEnemyOnDifferentNetwork();
	void NotifyNewPlayerNavigationPoint();
	bool ShouldMoveIn();
	bool ShouldBackaway();
	bool IsEnemyBehindMe();
	void UpdateAdvanceState(const struct FName& Label, const struct FString& Reason);
	void TestAdvanceMovement();
	void UpdateWalking();
	bool IsReadyToMove();
	bool IsOkToRun();
	bool ShouldWeAdvance();
	void ReportMoveBack(int VO);
	void ReportAdvancing(const struct FVector& Dest);
	void AdvanceTimerCallback();
	void ActivateStasis(bool flag, bool UpdateState);
	void MoveStraightToActor(class AActor* TargetActor);
	void MoveStraightToPos(const struct FVector& pos);
	void RunToPos(const struct FVector& pos);
	void WalkToPos(const struct FVector& pos);
	void MoveToPos(const struct FVector& pos);
	void CoverGoToState(const struct FString& iState);
	void StartScriptedFire(class AActor* ScriptedTarget);
	void WaitForKismetCommand();
	bool IsThrowingKismetTriggeredGrenade();
	void OnAIThrowGrenade(class USeqAct_AIThrowGrenade* seqAct);
	bool ThrowGrenadeRequest(class ATdGrenadeTargetArea* TargetArea);
	bool ForceGrenadeThrow(class ATdGrenadeTargetArea* TargetArea);
	bool ForceShootAt(class ATdExplosiveTargetArea* TargetArea);
	void SetIsInCover(bool bActivateInCover);
	void SetCameraRotationAid(const struct FRotator& desiredRot);
	float GetGrabJumpTime();
	struct FVector GetFloor();
	void EnableBumps();
	bool AdjustAround(class APawn* Other);
	void ClearPathFor(class AController* C);
	void RemoveFromOccupied(class ANavigationPoint* P);
	void UnoccupyPath();
	void OccupyPath();
	void ClearMovementVariables();
	void RestoreMovementVariables();
	void StoreMovementVariables();
	void ClearOldPath();
	void BackupPath();
	void ClearRouteCache();
	bool IsWalkingToNode();
	void SetWalkingToNode(bool flag);
	void ClearMovementFlags();
	void TdFindPathTo(const struct FVector& aPoint);
	bool TdFindPathToward(class AActor* anActor);
	void RestorePathfindingParams();
	void SetPathfindingParams(bool UseSaferPaths, bool AvoidPopulatedPaths);
	void StorePathfindingParams();
	void TriggerCannedAnim(int Move, const struct FName& CannedAnimationName);
	bool StartCannedMove(int Move);
	TEnumAsByte<EDisarmState> QueryDisarmState(class ATdPawn* Disarmer);
	void OnDisarmed();
	void OnMeleedFromAir();
	void OnStumbleEnded();
	void OnStumble(bool bAllowRotation);
	void OnStoppedBlocking();
	void StartBlocking();
	bool NotifyPrepareForMeleeAttack(class UClass* MeleeDamageType);
	void StopSlide();
	void Slide(const struct FVector& EndTarget);
	void TdGrabHeave();
	void TdLongJump();
	void TdMediumJump();
	void TdShortJump();
	void TdJump();
	void TdSpeedVault();
	void TdVaultOver();
	struct FRotator GetAdjustedAimFor(class AWeapon* iWeapon, const struct FVector& StartFireLocation);
	bool IsHitRelevant(class UClass* DamageType, const struct FName& BoneName);
	class ANavigationPoint* GetNearestAnchor();
	bool CanBeDestination(class ANavigationPoint* P);
	bool CanBeAnchor(class ANavigationPoint* P);
	class ANavigationPoint* GetNavpointClosestToPoint(const struct FVector& Point, int NetworkID, float MaxDist, float MinDist, float MaxDistZ, float MinDistZ, class UClass* RequiredClass);
	class ANavigationPoint* SelectAdvancePoint(int NetworkID, float MaxDist, float MinDist, class UClass* RequiredClass, bool bTestVisibility);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	bool CanSeePlayerFromPoint(class ANavigationPoint* np);
	class ATdBotPawn* IsAIBlockingPath(const struct FVector& pos, float minTimeToCollision, float minDistFromLine);
	void StopFiring();
	void StartFiring();
	void ForceFire(bool bForce);
	bool AllowFire();
	void CheckFireCondition();
	bool ShouldKeepFiring();
	bool IsWithinAttackAngle();
	bool CanFireFromHere();
	bool IsOkToFire();
	void SwitchToBestWeapon(bool bForceNewWeapon);
	void OnWeaponFired(class AWeapon* PawnWeapon);
	void NotifyWeaponFired(class AWeapon* W, unsigned char FireMode);
	void NotifyReloaded();
	bool OkToLaySuppressionFire();
	void AiReload();
	void NotifyWeaponEmpty();
	void ResetFocus();
	bool HasEnemyMovedSinceLastFailedPath();
	void SetFailedPathToEnemy();
	void SucceededPathToEnemy(const struct FVector& GoalPosition);
	bool AskToPathfindToEnemy();
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType);
	void NotifySuppressed();
	bool WeAreSuppressed();
	void AddSuppressionFactor(float S);
	void ReportNearMiss(float Distance);
	void NotifyDamage(class AController* InstigatedBy, class UClass* DamageType, int Damage);
	void TestLastKnownLocationVisible();
	void NotifyEnemyVisibilityChange(bool visible);
	void SetEnemy(class APawn* NewEnemy);
	bool HasAnyEnemies();
	void EnemyNotVisible();
	void HandleEnemyExposed(class APawn* aPawn);
	void HandleSuspectSpotted(class APawn* aPawn);
	void HandleEnemySeen(class APawn* aPawn);
	void SeePlayer(class APawn* P);
	void ExposePlayer();
	void StartTestingCombatTransitions();
	void UpdateCombatState();
	bool IsInCombat();
	bool CanInvestigate();
	bool CanSearch();
	void TestCombatTransitions();
	void TdPushState(const struct FName& NewState, const struct FName& NewLabel, const struct FString& Reason, bool ForceStateChange);
	void TdGotoState(const struct FName& NewState, const struct FName& Label, const struct FString& Reason, bool bForceEvents, bool ForceStateChange);
	void DebugGotoState(const struct FName& NewState, const struct FName& Label, const struct FString& Reason, bool bForceEvents, bool ForceStateChange);
	void SetRotationReduction(float reductionFactor);
	void SetPose(TEnumAsByte<EPose> P);
	void SetWantedPose(TEnumAsByte<EPose> P);
	void UpdatePose();
	void SetFocus(TEnumAsByte<EFocusType> F);
	void SetWantedFocus(TEnumAsByte<EFocusType> F);
	void UpdatePawnFocus();
	void UpdateCombatDistances();
	void UpdateAggressionLevel();
	void UpdateFiringMood();
	void ForceNewPath();
	bool TryToTeleportToNearestAnchor();
	void NoReachableAnchor();
	void SetBestAnchor();
	void UpdateAnchor();
	void Tick(float DeltaTime);
	void PostSuperTick(float DeltaTime);
	void PreSuperTick(float DeltaTime);
	void NotifyGrenadeExploded(const struct FVector& ExplosionLocation, float Lifetime);
	struct FVector GetMoveToDestination();
	void UpdateCurrentRouteDistDirect(const struct FVector& Goal);
	void UpdateCurrentRouteDist();
	bool CurrentRouteContainsMoves();
	float GetCurrentRouteDist();
	bool OkToDoStartMove();
	bool AreFlagsOkForPathUpdate();
	bool IsOkToUpdatePath();
	void Restart(bool bVehicleTransition);
	void Reset();
	void Destroyed();
	int SetupTemplate(class UAITemplate* TheTemplate);
	int RetrieveDifficultyLevel();
	void SetDifficultyLevel(int Difficulty);
	void UpdateDifficultyLevel();
	int GetDifficultyLevel();
	void OnMute(bool bMute);
	void OnNewTeam(class AAITeam* NewTeam);
	void NotifyStumbleComplete();
	void NotifyEnemyKilled();
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn);
	void ReportBotDied();
	void PawnDied(class APawn* inPawn);
	class ATdAIController* ClosestFriend();
	void Say(int VO, float probability, int answer, float answerprob);
	class UTdAimBotBase* CreateAimBot();
	void ResetAI();
	void Initialize();
	void UnPossess();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void PostBeginPlay();
	void DrawNavigation();
	void RemoveFromTimeline();
	void DrawTimeline(class UCanvas* aCanvas);
	bool IsForcedToKeepMoving();
	void ForceKeepMoving(bool flag);
	void Freeze();
	void Halt();
	bool IsFriendlyPawn(class APawn* TestPlayer);
	bool AllowFocusRotation();
	float GetPreferredCombatDistance();
	float GetCombatDistance();
	bool IsEnemy(class AController* C);
	bool IsPointAwayFromEnemy(const struct FVector& P);
	bool IsEnemyAimingAtMe(float Dist);
	bool IsEnemyLookingAtMe2D(float dotLimit);
	struct FVector GetLeftEnemyDir();
	struct FVector vec3(float X, float Y, float Z);
	void ClientMessage(const struct FString& S);
	bool IsAtEnd(const struct FVector& Start, const struct FVector& End);
	void SetLocationXY(const struct FVector& PawnLocation);
	void SetPawnRotation(const struct FRotator& PawnRotation);
	void SetInterruptable(bool flag, const struct FName& Identifier);
	bool IsCurrentStateInterruptable();
	struct FName GetCurrentStateName();
	bool HasShield();
	void Pause();
	bool IsInMelee();
	bool IsRunning();
	bool IsMoving();
	bool IsInLatentMovement();
	void AbortMovement();
	void AbortMoveTo();
	bool UpdatePath();
	void Crouch(bool flag);
	bool IsEnemyWithinDot(float dotValue);
	bool IsLastActuallySeenLocationWithinDot(float dotValue);
	void SetBossStage(int stage);
	void UnholdFire();
	void HoldFire(bool flag);
	bool IsPredictedEnemyReachable(bool bTestBotPawns);
	struct FVector GetPredictedEnemyLocation();
	bool TdActorReachable(class AActor* anActor, bool bTestBotPawns, float minTimeToCollision, float minDistFromLine);
	bool TdPointReachable(const struct FVector& aPoint, bool bTestBotPawns, float minTimeToCollision, float minDistFromLine);
	void LogFunction_Internal(const struct FString& FuncName, bool Start, const struct FString& S, const struct FName& LogCategory);
	void AILog_Internal(const struct FString& LogText, const struct FName& LogCategory, bool bForce);
	void ShowAimingLines();
	void DebugMeleeDamageBot(class ATdPlayerController* PC);
	void DrawReachSpecCost(class APlayerController* PlayerC, class UCanvas* aCanvas, class UTdReachSpec* Spec);
	void DrawNeighbourCosts(class APlayerController* PlayerC, class UCanvas* aCanvas, class ANavigationPoint* Node, TArray<class ANavigationPoint*>* out_Visited);
	void DrawNavigationCost(class APlayerController* PlayerC, class UCanvas* aCanvas);
	void DrawGages(class UCanvas* aCanvas);
	void DrawPathnodesCloseToCamera(class UCanvas* aCanvas);
	void DrawPath();
	void DrawOldPath();
	void DrawLatentAction(struct FString* Text);
	void DrawDebugInfo(class APlayerController* PlayerC, class UCanvas* aCanvas);
	void ToggleDebugLineOfSight();
	void ToggleDebugHalt();
	void ClearScreenLog();
	void DrawScreenLog(class UCanvas* aCanvas);
	void ToggleAILogFilter(const struct FName& Category);
	void ToggleScreenLogFilter(const struct FName& Category);
	bool IsFiltered(const struct FName& Category);
	void AddToScreenLog(const struct FString& Text, const struct FName& Category);
	void UpdateMoveToActorPosition();
	void AddSpecialOutput(struct FString* Text);
	bool HaveAValidCoverPath();
	bool WillShotHitPlayer(class ATdPlayerPawn* PlayerPawn, const struct FVector& StartLocation, const struct FVector& AimRotation);
	bool EnoughSpaceForStartMove(float SpaceNeeded);
	bool IsForcedToWalkToNextNode(int NodeOffset);
	bool PointReachableFrom(const struct FVector& Start, const struct FVector& End);
	void TdMoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, bool bShouldWalk);
	void ThrowGrenade();
	void STATIC_TdFlushLines();
	void STATIC_TdDrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B);
	void STATIC_TdDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B);
	float GetForcedSpeed(struct FVector* EndLocation);
	bool ShouldForceSpeed();
	bool NextNodeIsJumpNode();
	void SetCoverAction(unsigned char CoverAction);
	bool IsFiringPositionUsed(class ANavigationPoint* Nav);
	class ATdSuppressionSpot* FindSuppressionSpot();
	class ANavigationPoint* FindGoodFiringPosition(int NetworkID, class UClass* RequiredClass);
	float CheckRemainingPathLength(float AngularLimit);
	float CurrentRouteDist();
};


// Class TdGame.TdAI_Assault
// 0x0010 (0x0610 - 0x0600)
class ATdAI_Assault : public ATdAIController
{
public:
	unsigned long                                      bGrenadeExploded : 1;                                     // 0x0600(0x0004)
	struct FVector                                     Explosion;                                                // 0x0604(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Assault");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ResetCombatRange();
	void NotifyGrenadeExploded(const struct FVector& ExplosionLocation, float Lifetime);
	bool ThrowGrenadeRequest(class ATdGrenadeTargetArea* TargetArea);
};


// Class TdGame.TdAI_Pursuit
// 0x00C0 (0x06C0 - 0x0600)
class ATdAI_Pursuit : public ATdAIController
{
public:
	TEnumAsByte<EMeleeSubState>                        MeleeSubState;                                            // 0x0600(0x0001)
	TEnumAsByte<EPursuitMeleeAttackType>               PendingMeleeAttack;                                       // 0x0601(0x0001)
	TEnumAsByte<EPrepMoveType>                         PrepMoveType;                                             // 0x0602(0x0001)
	TEnumAsByte<EPrepMoveType>                         OldPrepMoveType;                                          // 0x0603(0x0001)
	TEnumAsByte<EPursuitMeleeAttackType>               DebugMeleeAttack;                                         // 0x0604(0x0001) (Edit)
	TEnumAsByte<EPrepMoveType>                         DebugPrepMove;                                            // 0x0605(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0606(0x0002) MISSED OFFSET
	struct FRotator                                    tempRotator;                                              // 0x0608(0x000C)
	float                                              MinMeleeAttackRange;                                      // 0x0614(0x0004)
	float                                              MaxMeleeAttackRange;                                      // 0x0618(0x0004)
	float                                              MeleeAttackMoveDist;                                      // 0x061C(0x0004)
	float                                              MinVelocity;                                              // 0x0620(0x0004)
	int                                                HealthLastTick;                                           // 0x0624(0x0004)
	int                                                NrOfDodges;                                               // 0x0628(0x0004)
	float                                              TimeOfLastMeleeAttack;                                    // 0x062C(0x0004)
	unsigned long                                      bIsDoingFinishingAttack : 1;                              // 0x0630(0x0004)
	unsigned long                                      bUpdateMelee : 1;                                         // 0x0630(0x0004)
	float                                              fAdvanceStartedTimeStamp;                                 // 0x0634(0x0004)
	float                                              fPursuitStartedTimeStamp;                                 // 0x0638(0x0004)
	float                                              WantDistanceTimeStamp;                                    // 0x063C(0x0004)
	float                                              PeneltyTimeStamp;                                         // 0x0640(0x0004)
	float                                              PeneltyTime;                                              // 0x0644(0x0004)
	class ANavigationPoint*                            TaserSpot;                                                // 0x0648(0x0004)
	float                                              AquireTaserSpotTimeStamp;                                 // 0x064C(0x0004)
	class ANavigationPoint*                            TempNavigationPoint;                                      // 0x0650(0x0004)
	float                                              FirstTaserDelay;                                          // 0x0654(0x0004)
	float                                              TaserBurstLength;                                         // 0x0658(0x0004)
	float                                              BetweenTaserDelay;                                        // 0x065C(0x0004)
	struct FAttackDistance                             JumpKickAttackDistance;                                   // 0x0660(0x0010) (Edit, Config)
	struct FAttackDistance                             RunAttackDistance;                                        // 0x0670(0x0010) (Edit, Config)
	struct FAttackDistance                             StandAttackDistance;                                      // 0x0680(0x0010) (Edit, Config)
	struct FAttackDistance                             ShoveAttackDistance;                                      // 0x0690(0x0010) (Edit, Config)
	struct FAttackDistance                             SlideAttackDistance;                                      // 0x06A0(0x0010) (Edit, Config)
	class UTdMove_PursuitMelee*                        PursuitMeleeMove;                                         // 0x06B0(0x0004) (Edit, EditInline)
	struct FSAttackDelays                              AttackDelays;                                             // 0x06B4(0x000C) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Pursuit");
		return ptr;
	}


	void PrepMoveTimerFunction();
	void SetAttackMoveProperties();
	void ChoosePointBlankAttackMove();
	void ChooseLongRangeAttackMove();
	void ChoosePrepAndAttackMove();
	void NotifyAttackMiss(TEnumAsByte<EPursuitMeleeAttackType> AttackType);
	bool ShouldTaserOnInterruptedMelee();
	void ReleaseMeleeLock();
	float GetPredictedEnemyDistance(float Time);
	void NotifyFinishingMovePossible();
	bool NotifyPrepareForMeleeAttack(class UClass* MeleeDamageType);
	void ShoveEnemy();
	void ExitMelee(const struct FString& S);
	void TriggerMeleeMove();
	void TestMelee();
	void UpdateMeleeSubstate();
	void GoTo_WantToMeleeAttack();
	void GoTo_MeleePenelty();
	void GoTo_WantMeleeDistance();
	bool OkToMelee();
	bool ShouldExitMelee();
	bool ShouldEnterMelee(float Range);
	float GetAttackDelay();
	bool IsDoingFinishingAttack();
	bool AskToCrouch();
	float GetAttackSpeedFactor(TEnumAsByte<EPursuitMeleeAttackType> AttackType);
	struct FVector GetPredictedEnemyLocationAfterDoingMeleeAttack(TEnumAsByte<EPursuitMeleeAttackType> MeleeAttackType);
	struct FVector GetPredictedEnemyLocation();
	bool ThrowGrenadeRequest(class ATdGrenadeTargetArea* TargetArea);
	bool ShouldEnterHold();
	void EndAdvance();
	void BeginAdvance();
	void TestAdvanceMovement();
	bool IsOkToRun();
	bool AllowFire();
	bool ShouldMoveIn();
	bool ShouldBackaway();
	void UpdateCombatDistances();
	void CheckCrouching();
	bool ShouldExitAdvance();
	bool ShouldEnterAdvance();
	void UpdatePlayerLookAtOffset();
	void NotifyPlayerReachable();
	bool ShouldEnterTaserState();
	void CheckExitTaserState();
	void TaserStateChange();
	void NotifyMoveStopped();
	bool PreStopMove();
	void ForceNewPath();
	void StartRunning();
	void StartWalkingOrRunning();
	bool UseGetDistance();
	void NotifyDamage(class AController* InstigatedBy, class UClass* DamageType, int Damage);
	void Tick(float DeltaTime);
	void ReportNearMiss(float Distance);
	bool IsOkToUpdatePath();
	void TestCombatTransitions();
	TEnumAsByte<EDisarmState> QueryDisarmState(class ATdPawn* Disarmer);
	bool ShouldStopAfterMove();
	bool CanSetGoal();
	bool CanInvestigate();
	bool CanSearch();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	bool HasSpawned();
	TEnumAsByte<EPursuitMeleeAttackType> GetPendingMeleeAttack();
	void AddSpecialOutput(struct FString* Text);
};


// Class TdGame.TdAi_Celeste
// 0x001C (0x06DC - 0x06C0)
class ATdAi_Celeste : public ATdAI_Pursuit
{
public:
	int                                                RecentHitsTaken;                                          // 0x06C0(0x0004)
	unsigned long                                      bAfterDisarm : 1;                                         // 0x06C4(0x0004)
	unsigned long                                      bIsVulnerableToDisarm : 1;                                // 0x06C4(0x0004)
	unsigned long                                      bRestrictFire : 1;                                        // 0x06C4(0x0004)
	class UClass*                                      LastTakenDamageType;                                      // 0x06C8(0x0004)
	class ATdPathLimits*                               OtherPlatformPathLimit;                                   // 0x06CC(0x0004)
	TEnumAsByte<ECelesteStage>                         bStageInFight;                                            // 0x06D0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x06D1(0x0003) MISSED OFFSET
	int                                                bMeleeHitCount;                                           // 0x06D4(0x0004)
	float                                              RestrictFireTimestamp;                                    // 0x06D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAi_Celeste");
		return ptr;
	}


	void ChoosePrepAndAttackMove();
	void ChooseLongRangeAttackMove();
	void NotifyAttackMiss(TEnumAsByte<EPursuitMeleeAttackType> AttackType);
	void ClearRecentHitsTaken();
	void NotifyDamage(class AController* InstigatedBy, class UClass* DamageType, int Damage);
	void Destroyed();
	void RemovePlayerStuckOnGround();
	void NotifyDisarmed();
	bool NotifyPrepareForMeleeAttack(class UClass* MeleeDamageType);
	bool OkToMoveDirectlyToPoint();
	TEnumAsByte<EDisarmState> QueryDisarmState(class ATdPawn* Disarmer);
	bool ShouldEnterMelee(float Range);
	bool UseGetDistance();
	bool ShouldTaserOnInterruptedMelee();
	bool ShouldEnterHold();
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void PostBeginPlay();
	TEnumAsByte<EPursuitMeleeAttackType> GetPendingCelesteMeleeAttack();
	TEnumAsByte<ECelesteStage> GetCelesteBossFightStage();
	bool IsGapBetweenMeAndEnemyAprox();
	bool AllowFire();
	void AddSpecialOutput(struct FString* Text);
};


// Class TdGame.TdAI_Gunner
// 0x0000 (0x0600 - 0x0600)
class ATdAI_Gunner : public ATdAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Gunner");
		return ptr;
	}


	void UpdatePawnFocus();
	void UpdateAnchor();
	void UpdatePose();
	bool CanSetGoal();
	bool CanInvestigate();
	bool CanSearch();
	void TestCombatTransitions();
};


// Class TdGame.TdAI_HeliController
// 0x005C (0x0340 - 0x02E4)
class ATdAI_HeliController : public AAIController
{
public:
	class ATdPlayerPawn*                               Player;                                                   // 0x02E4(0x0004)
	class ATdVehicle_Helicopter*                       HelicopterPawn;                                           // 0x02E8(0x0004)
	TEnumAsByte<EHeliAttackSide>                       FireFromThisSide;                                         // 0x02EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02ED(0x0003) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x02F0(0x0004)
	TArray<struct FVisitedNode>                        VisitedNodes;                                             // 0x02F4(0x000C) (NeedCtorLink)
	float                                              MaxRememberTime;                                          // 0x0300(0x0004)
	float                                              DistanceNodePlayerWeight;                                 // 0x0304(0x0004)
	float                                              DistanceNodeHeliWeight;                                   // 0x0308(0x0004)
	float                                              AngleToPlayerWeight;                                      // 0x030C(0x0004)
	float                                              LastVisitWeight;                                          // 0x0310(0x0004)
	class ATdAttackPathNode*                           BestAttackNode;                                           // 0x0314(0x0004)
	float                                              CurrentPrioValue;                                         // 0x0318(0x0004)
	TArray<class ATdAttackPathNode*>                   AttackNodes;                                              // 0x031C(0x000C) (NeedCtorLink)
	class ATdAIVoiceOverManager*                       VoiceOverManager;                                         // 0x0328(0x0004)
	float                                              BigFloat;                                                 // 0x032C(0x0004) (Const)
	unsigned long                                      bMuted : 1;                                               // 0x0330(0x0004)
	struct FVector                                     LastLoc;                                                  // 0x0334(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_HeliController");
		return ptr;
	}


	struct FVector vec3(float X, float Y, float Z);
	void OnMute(bool bMute);
	void SeePlayer(class APawn* Seen);
	void FindPlayerController();
	float VerticalAngleToPos(const struct FVector& pos, const struct FVector& Source);
	float GetPrio(class ATdAttackPathNode* Node, const struct FVector& PlayerPosition);
	class ATdAttackPathNode* FindBestAttackPoint(float* PrioValue);
	TEnumAsByte<EAdjustPosition> CurrentPositionOk();
	void SkipPathNode();
	void DebugMoveTo(class ANavigationPoint* navpoint);
	void CheckTargetPoint();
	void OnAIAbortMoveToActor(class USeqAct_AIAbortMoveToActor* inAction);
	float GetTimeFactor(class ATdAttackPathNode* Node);
	void UpdateVisitedNodes();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void DrawPath();
	void DrawDebugInfo(class APlayerController* PlayerC, class UCanvas* aCanvas);
	void Say(int VO);
	void SetHeliSpeed(TEnumAsByte<EHeliSpeed> Speed);
	void OnSetHeliSpeed(class USeqAct_SetHeliSpeed* seqAct);
	void OnSetHeliTarget(class USeqAct_SetHeliTarget* seqAct);
	void DrawPosition();
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class TdGame.TdAI_HeliSniper
// 0x0000 (0x0600 - 0x0600)
class ATdAI_HeliSniper : public ATdAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_HeliSniper");
		return ptr;
	}


	bool ShouldEnterMelee(float Range);
	void UpdatePose();
	void UpdateAnchor();
};


// Class TdGame.TdAI_Riot
// 0x004C (0x064C - 0x0600)
class ATdAI_Riot : public ATdAIController
{
public:
	TArray<class ATdAIController*>                     Clients;                                                  // 0x0600(0x000C) (NeedCtorLink)
	TArray<struct FVector>                             FormationPositions;                                       // 0x060C(0x000C) (NeedCtorLink)
	TArray<unsigned long>                              IgnoredClients;                                           // 0x0618(0x000C) (NeedCtorLink)
	float                                              fEnemyNotVisibleToWholeFormationTime;                     // 0x0624(0x0004)
	float                                              LastMeleeTimeStamp;                                       // 0x0628(0x0004)
	float                                              MeleeTimer;                                               // 0x062C(0x0004)
	unsigned long                                      bUsingWideFormation : 1;                                  // 0x0630(0x0004)
	float                                              LeftWideFormationTimeStamp;                               // 0x0634(0x0004)
	float                                              CFormationWidth;                                          // 0x0638(0x0004) (Const)
	float                                              CFormationDepth;                                          // 0x063C(0x0004) (Const)
	float                                              FormationCollisionRadius;                                 // 0x0640(0x0004)
	int                                                FormationWidthCount;                                      // 0x0644(0x0004)
	class UTdMove_Melee_Riot*                          RiotMeleeMove;                                            // 0x0648(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Riot");
		return ptr;
	}


	bool AskToCrouch();
	TEnumAsByte<EDisarmState> QueryDisarmState(class ATdPawn* Disarmer);
	bool ShouldEnterMelee(float Range);
	void UpdateShieldFormation(float FormationWidth, float FormationDepth);
	float GetMoveDist();
	bool AnyClientsTrailingBehindAlot();
	bool AnyClientsTrailingBehind();
	void SwitchPositions(int P1, int P2);
	void TrySwitchPositions(int P1, int P2);
	void SwitchFormationPositions();
	void Tick(float DeltaTime);
	void SetShieldMaster();
	void ApplyForShieldMasterPosition();
	bool EnemyVisibleToWholeFormation();
	bool AreClientsReadyToMove();
	bool IsReadyToMove();
	void BreakFormation();
	void RemoveFromFormation(class ATdAIController* C);
	bool CanMoveIntoPosition(class ATdAIController* C);
	bool ApplyForFormationPosition(class ATdAIController* C);
	bool CloserThanCurrentClient(class ATdAIController* C, int I);
	void ResignPosition(int pos);
	void AssignPosition(class ATdAIController* C, int pos);
	void TestAdvanceMovement();
	bool ShouldStop();
	void NotifyNewPlayerNavigationPointForShieldWall();
	bool ShouldMoveIn();
	bool ShouldBackaway();
	bool IsWide();
	struct FVector GetAdvancePoint();
	void EndAdvance();
	void BeginAdvance();
	void AddSpecialOutput(struct FString* Text);
	bool IsOkToRun();
	void CheckCrouching();
	bool AllowFire();
	void ReportBotDied();
	void Initialize();
	void PostBeginPlay();
	bool IsInFormation(class APawn* P);
	bool OkToMoveDirectlyToPoint();
	void SetBestAnchor();
	void TdFindPathTo(const struct FVector& aPoint);
	bool TdFindPathToward(class AActor* anActor);
	void UpdateFormationRadius();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
};


// Class TdGame.TdAI_Sniper
// 0x003C (0x063C - 0x0600)
class ATdAI_Sniper : public ATdAIController
{
public:
	class ATdSniperSpot*                               SniperSpot;                                               // 0x0600(0x0004)
	float                                              LoseTargetTime;                                           // 0x0604(0x0004) (Edit, Config)
	float                                              AimOffset;                                                // 0x0608(0x0004) (Edit, Config)
	float                                              RandomWalkSpeed;                                          // 0x060C(0x0004) (Edit, Config)
	float                                              TimeToCalibrate;                                          // 0x0610(0x0004) (Edit, Config)
	float                                              TimeToCalibrateOnObjectFactor;                            // 0x0614(0x0004) (Edit, Config)
	float                                              TriggerBotAccuracy;                                       // 0x0618(0x0004) (Edit, Config)
	float                                              HomingInOnTargetSpeed;                                    // 0x061C(0x0004) (Edit, Config)
	float                                              BreakDistance;                                            // 0x0620(0x0004) (Edit, Config)
	unsigned long                                      UseLaser : 1;                                             // 0x0624(0x0004)
	unsigned long                                      ReadyToFire : 1;                                          // 0x0624(0x0004)
	class UTdAimBot*                                   NormalAimBot;                                             // 0x0628(0x0004)
	class UTdAimBotSniper*                             SniperAimBot;                                             // 0x062C(0x0004)
	class AActor*                                      AlternativeTarget;                                        // 0x0630(0x0004)
	class ATdExplosiveTargetArea*                      AlternativeTargetArea;                                    // 0x0634(0x0004)
	class APathNode*                                   WhenPlayerNotVisibleAimAtThisPoint;                       // 0x0638(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Sniper");
		return ptr;
	}


	bool ForceShootAt(class ATdExplosiveTargetArea* TargetArea);
	bool LaserActive();
	TEnumAsByte<EFindResult> FindSniperSpot();
	bool AllowFire();
	void UpdateFocalPoint();
	bool EnemyClose();
	void CheckFireCondition();
	void TestCombatTransitions();
	void UpdateAlternativeTarget();
	void OnTdAIPerfectAim(class USeqAct_TdAIPerfectAim* Action);
	void UpdateCombatState();
	void Tick(float DeltaTime);
	class UTdAimBotBase* CreateAimBot();
	int SetupTemplate(class UAITemplate* TheTemplate);
	void OnAISetSniperBlindAimSpot(class USeqAct_AISetSniperBlindAimSpot* seqAct);
	void NotifyWeaponFired(class AWeapon* W, unsigned char FireMode);
	struct FVector GetWeaponStartTraceLocation();
	void PostBeginPlay();
	void DrawDebugInfo(class APlayerController* PlayerC, class UCanvas* aCanvas);
	bool CanInvestigate();
	bool CanSearch();
};


// Class TdGame.TdAI_Tutorial
// 0x0010 (0x0610 - 0x0600)
class ATdAI_Tutorial : public ATdAIController
{
public:
	TScriptInterface<class UTdTutorialListener>        TutorialListener;                                         // 0x0600(0x0008) (Transient)
	unsigned long                                      bAttackInitiated : 1;                                     // 0x0608(0x0004) (Transient)
	unsigned long                                      bHasEmittedPreAttackEvent : 1;                            // 0x0608(0x0004) (Transient)
	unsigned long                                      bHasEmittedPostAttackEvent : 1;                           // 0x0608(0x0004) (Transient)
	int                                                DisarmEventIdentifier;                                    // 0x060C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Tutorial");
		return ptr;
	}


	int SetupTemplate(class UAITemplate* TheTemplate);
	void SetIdleState();
	void TestCombatTransitions();
	void SeePlayer(class APawn* iPawn);
	void UpdatePawnFocus();
	void UpdatePose();
	void ResetPose();
	void OnResetChallenge();
	void SetBestAnchor();
	bool PlayerHasWeapon();
	bool IsDisarmChallenge();
	bool IsFacingPlayer();
	bool IsCloseToPlayer();
	void OnTdAiInitiateAttack(class USeqAct_TdAiInitiateAttack* Action);
	void EmitWeaponDroppedEvent();
	void EmitDisarmSucceededEvent();
	void EmitPostAttackEvent();
	void EmitPreAttackEvent();
	void EmitMeleeAttackSucceededEvent();
	void EmitFailedEvent();
	void TriggerCannedAnim(int Move, const struct FName& AnimationName);
	void OnDisarmed();
	void NotifyMeleeFinished();
	bool IsHitRelevant(class UClass* DamageType, const struct FName& BoneName);
	void NotifyDamage(class AController* ControllerInstigator, class UClass* DamageType, int Damage);
	bool NotifyPrepareForMeleeAttack(class UClass* MeleeDamageType);
	bool ShouldBlockAttack(class UClass* AttackType);
	bool CanAttack();
	void Tick(float DeltaTime);
	void Initialize();
	void UpdateAnchor();
};


// Class TdGame.TdAIBlockingVolume
// 0x0000 (0x0200 - 0x0200)
class ATdAIBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIBlockingVolume");
		return ptr;
	}

};


// Class TdGame.TdAIDroppableItem
// 0x0000 (0x003C - 0x003C)
class UTdAIDroppableItem : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIDroppableItem");
		return ptr;
	}


	void Drop(class ATdBotPawn* Dropper);
	bool CanDrop(class ATdBotPawn* Dropper);
};


// Class TdGame.TdAIGrenadeController
// 0x0028 (0x01E8 - 0x01C0)
class ATdAIGrenadeController : public AActor
{
public:
	struct FName                                       ThrowAnimationName;                                       // 0x01C0(0x0008)
	class ATdBotPawn*                                  MyBotPawn;                                                // 0x01C8(0x0004)
	unsigned long                                      bAnimationStarted : 1;                                    // 0x01CC(0x0004)
	unsigned long                                      bDoFreeGrenadeThrow : 1;                                  // 0x01CC(0x0004)
	unsigned long                                      bDone : 1;                                                // 0x01CC(0x0004)
	class ATdGrenadeTargetArea*                        GrenadeTargetArea;                                        // 0x01D0(0x0004)
	class ANavigationPoint*                            GrenadeNode;                                              // 0x01D4(0x0004)
	class ATdProj_Grenade*                             Grenade;                                                  // 0x01D8(0x0004)
	class AActor*                                      TargetActor;                                              // 0x01DC(0x0004)
	TEnumAsByte<EGrenadeThrowType>                     ThrowType;                                                // 0x01E0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	class UClass*                                      GrenadeClass;                                             // 0x01E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIGrenadeController");
		return ptr;
	}


	bool SecondDegreeSolver(float A, float bx, float cx2, float* s0, float* s1);
	bool SolveParabolaLineProblem(const struct FVector& Target, const struct FVector& TargetSpeed, const struct FVector& FromPos, float Gravity, float WantedSpeedInXYPlane, struct FVector* ResultVelocity);
	void SetTrowAtTargetValues(const struct FVector& Target, const struct FVector& SpawnLoc);
	void SetGrenadeDropValues(const struct FVector& SpawnLoc);
	void SetNormalThrowGrenadeValues(const struct FVector& Target, const struct FVector& SpawnLoc);
	void SetLowThrowGrenadeValues(const struct FVector& Target, const struct FVector& SpawnLoc);
	void SetThrowGrenadeInFrontValues(const struct FVector& Target, const struct FVector& SpawnLoc);
	void AnimNotifyGrenadeThrow();
	void GrenadeAnimationOnCustomAnimEnd(class UAnimNodeSequence* SequenceNode, float PlayedTime, float ExcessTime);
	bool ThrowGrenadeTick();
	void InitGrenadeThrow(class ATdBotPawn* BotPawn, class AActor* inTargetActor, TEnumAsByte<EGrenadeThrowType> Drop, class UClass* inGrenadeClass);
	void InitGrenadeThrowToGrenadeTargetArea(class ATdBotPawn* BotPawn, class ANavigationPoint* GrenadeNodeIn, class ATdGrenadeTargetArea* GrenadeTargetAreaIn);
	void ThrowInstantGrenade(class ATdGrenadeTargetArea* TargetArea, const struct FVector& FromPosition);
	struct FName GetThrowAnimationName();
	class ANavigationPoint* GetGrenadeNode();
	class ATdGrenadeTargetArea* GetTargetArea();
	class ATdProj_Grenade* GetGrenade();
};


// Class TdGame.TdAIKeepMovingVolume
// 0x0000 (0x0238 - 0x0238)
class ATdAIKeepMovingVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIKeepMovingVolume");
		return ptr;
	}

};


// Class TdGame.TdAIManager
// 0x0124 (0x02E4 - 0x01C0)
class ATdAIManager : public AActor
{
public:
	TArray<class ATdAIController*>                     AIControllers;                                            // 0x01C0(0x000C) (NeedCtorLink)
	TArray<class AAITeam*>                             Teams;                                                    // 0x01CC(0x000C) (NeedCtorLink)
	class ATdPlayerPawn*                               Player;                                                   // 0x01D8(0x0004)
	class ATdPawn*                                     Enemy;                                                    // 0x01DC(0x0004)
	TArray<class ATdGrenadeTargetArea*>                GrenadeTargetAreas;                                       // 0x01E0(0x000C) (NeedCtorLink)
	class ATdAIController*                             GrenadeThrowingBot;                                       // 0x01EC(0x0004)
	class ATdProj_Grenade*                             ActiveGrenade;                                            // 0x01F0(0x0004)
	unsigned long                                      bPlayerInvisibleToAI : 1;                                 // 0x01F4(0x0004)
	unsigned long                                      bHasAnyoneStartedTestingCombatTransitionsThisFrame : 1;   // 0x01F4(0x0004)
	unsigned long                                      bLastSeenLocationHasBeenRestored : 1;                     // 0x01F4(0x0004)
	unsigned long                                      bPredictedLastSeenLocationHasBeenSet : 1;                 // 0x01F4(0x0004)
	unsigned long                                      bHaveTriedToPredict : 1;                                  // 0x01F4(0x0004)
	unsigned long                                      CheckedLastSeenLocation : 1;                              // 0x01F4(0x0004)
	unsigned long                                      bAggressiveChaseAI : 1;                                   // 0x01F4(0x0004)
	unsigned long                                      UseBurstControl : 1;                                      // 0x01F4(0x0004) (Edit)
	unsigned long                                      UseBulletControl : 1;                                     // 0x01F4(0x0004) (Edit)
	TArray<class ATdAIController*>                     BotsUsingMelee;                                           // 0x01F8(0x000C) (NeedCtorLink)
	int                                                NumNotifiedAI;                                            // 0x0204(0x0004)
	int                                                NotifiedIndex;                                            // 0x0208(0x0004)
	int                                                TaserSpotSearchesThisFrame;                               // 0x020C(0x0004)
	int                                                UpdateVisibilityIndex;                                    // 0x0210(0x0004)
	int                                                MaxNumPathfindsPerFrame;                                  // 0x0214(0x0004)
	int                                                NumPathfindsThisFrame;                                    // 0x0218(0x0004)
	TArray<struct FPathfindingStruct>                  PathfindingData;                                          // 0x021C(0x000C) (NeedCtorLink)
	TArray<int>                                        PathfindsPerFrameHistory;                                 // 0x0228(0x000C) (NeedCtorLink)
	int                                                PathfindsArrayIndex;                                      // 0x0234(0x0004)
	float                                              BiggestAveragePathfindsPerSecond;                         // 0x0238(0x0004)
	float                                              LongestWaitTime;                                          // 0x023C(0x0004)
	struct FVector                                     PlayerViewLocation;                                       // 0x0240(0x000C)
	struct FRotator                                    PlayerViewRotation;                                       // 0x024C(0x000C)
	struct FVector                                     PlayerViewpointLocation;                                  // 0x0258(0x000C)
	class ANavigationPoint*                            PlayerNavigationPointForShieldWall;                       // 0x0264(0x0004)
	int                                                ShieldFormations;                                         // 0x0268(0x0004)
	class ANavigationPoint*                            PlayerNavigationPoint;                                    // 0x026C(0x0004)
	float                                              LSLTimeStamp;                                             // 0x0270(0x0004)
	struct FVector                                     LastSeenLocation;                                         // 0x0274(0x000C)
	struct FVector                                     OldLastSeenLocation;                                      // 0x0280(0x000C)
	struct FVector                                     ReallyOldLastSeenLocation;                                // 0x028C(0x000C)
	struct FVector                                     LastSeenHeadLocation;                                     // 0x0298(0x000C)
	class ANavigationPoint*                            CurrentNavPointToCheck;                                   // 0x02A4(0x0004)
	int                                                ShotsFiredThisFrame;                                      // 0x02A8(0x0004)
	int                                                MaxShotsFiredPerFrame;                                    // 0x02AC(0x0004) (Edit)
	int                                                ShotsFiredThisSecond;                                     // 0x02B0(0x0004)
	int                                                MaxShotsFiredPerSecond;                                   // 0x02B4(0x0004) (Edit)
	float                                              CurrentMeasuringSecond;                                   // 0x02B8(0x0004)
	float                                              LastShotFiredTimeStamp;                                   // 0x02BC(0x0004)
	int                                                NumCleanFramesSinceLastShotFired;                         // 0x02C0(0x0004)
	int                                                MaxNumCleanFrames;                                        // 0x02C4(0x0004) (Edit)
	TArray<struct FBurst>                              Bursts;                                                   // 0x02C8(0x000C) (NeedCtorLink)
	int                                                NumberOfActiveBursts;                                     // 0x02D4(0x0004)
	int                                                BurstPriorityCount;                                       // 0x02D8(0x0004)
	int                                                MaxSimultaneousBursts;                                    // 0x02DC(0x0004) (Edit)
	int                                                NumberOfFireIntentsThisFrame;                             // 0x02E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIManager");
		return ptr;
	}


	bool IsGoalForAnyBot(class ANavigationPoint* np, class ATdAIController* exclude);
	bool FindBestTaserSpot(class ATdAIController* C, const struct FVector& Point, int NetworkID, float MaxDist, float MaxDistZ, class ANavigationPoint** np);
	int GetNumberOfFriendsWithinRadius2D(class ATdAIController* me, const struct FVector& pos, float Radius);
	void ChaseAI();
	void NotifyPlayerReachable();
	bool IsAnyoneEngagedInCloseCombat(class ATdAIController* me);
	bool IsAnyoneDoingAFinishingAttack(class ATdAIController* exclude);
	bool SomeoneElseIsPursuingOrMeleeing(class ATdAIController* me);
	bool OkToMelee(class ATdAIController* C);
	void ReportUsingMelee(class ATdAIController* C, bool flag);
	void NotifyPlayerSpotted(class APawn* TheEnemy);
	void GrenadeTick();
	void NotifyGrenadeExploded(const struct FVector& ExplosionLocation, float Lifetime);
	bool NearbyOffensiveGrenadeExists(class ATdBotPawn* Pawn);
	void FinishedThrowingGrenade(class ATdProj_Grenade* Grenade);
	void RemoveGrenadeArea(class ATdGrenadeTargetArea* TargetArea);
	void AddGrenadeArea(class ATdGrenadeTargetArea* TargetArea);
	void RemoveBot(class ATdAIController* Bot);
	void Add(class ATdAIController* Bot);
	void SetPlayer(class ATdPlayerPawn* InPlayer);
	void RestoreOldLastSeenLocation(const struct FVector& L);
	void SetLastSeenLocationLocal(const struct FVector& Loc);
	void FindPredictedLastSeenLocation();
	void SetLastSeenLocation(class ATdPawn* aPawn, const struct FVector& L);
	bool PlayerMoveOkForLastSeenLocationUpdate(class ATdPawn* aPawn);
	void NotifyCheckedLastSeenPosition();
	class ANavigationPoint* GetPlayerNavigationPointForShieldWall();
	void RemoveTeam(class AAITeam* T);
	void AddTeam(class AAITeam* T);
	void UpdatePlayerNavigationPointForShieldWall(class AAITeam* Team);
	void UpdatePlayerNavigationPoint();
	float GetAveragePathfindsPerSecond();
	void ShowPrioritizedBurst();
	void DrawDebugInfo(class APlayerController* PlayerC, class UCanvas* aCanvas);
	void RegisterWaitTime(float WaitTime);
	void TimestampPathfind(class ATdAIController* C);
	void RegisterPathfind(class ATdAIController* C);
	bool IsPathfindingTimestampOkForNewPathfind(class ATdAIController* C);
	bool AllowPathfinding(class ATdAIController* C);
	bool IsOkToUpdateVisibility(class ATdAIController* C);
	void NotifyPlayerNavigationPointChanged();
	class ATdBotPawn* GetBlockingPawn(class ATdAIController* me, bool bCrouching, bool UpdateMoveDir);
	bool OkToStartTestingCombatTransitions();
	void RemoveBurst(class ATdBotPawn* Pawn);
	void ReportBurstFinished(class ATdBotPawn* Pawn);
	void UpdateBursts();
	bool PrioritizedOver(class ATdBotPawn* P1, class ATdBotPawn* P2);
	bool CheckBurstPriority(class ATdBotPawn* Pawn);
	bool AskToBurst(class ATdBotPawn* Pawn, float BurstDuration);
	void ClearFiringStats();
	bool OkToFireBullet();
	void ReportFireIntent();
	void ReportBulletFired();
	void UpdateFiringStats();
	void Tick(float DeltaTime);
};


// Class TdGame.TdAimBotBase
// 0x004C (0x0088 - 0x003C)
class UTdAimBotBase : public UObject
{
public:
	float                                              MaxDispersion;                                            // 0x003C(0x0004) (Edit)
	float                                              MinDispersion;                                            // 0x0040(0x0004) (Edit)
	float                                              MinOffset;                                                // 0x0044(0x0004) (Edit)
	float                                              MaxYOffset;                                               // 0x0048(0x0004) (Edit)
	float                                              MinYOffset;                                               // 0x004C(0x0004) (Edit)
	float                                              ImprovementRate_Far;                                      // 0x0050(0x0004) (Edit)
	float                                              ImprovementRate_Medium;                                   // 0x0054(0x0004) (Edit)
	float                                              ImprovementRate_Near;                                     // 0x0058(0x0004) (Edit)
	float                                              MovementRateX;                                            // 0x005C(0x0004) (Edit)
	float                                              MovementRateY;                                            // 0x0060(0x0004) (Edit)
	float                                              MoveSidewaysMultiplier;                                   // 0x0064(0x0004) (Edit)
	float                                              MoveAwayMultiplier;                                       // 0x0068(0x0004) (Edit)
	float                                              MoveTowardMultiplier;                                     // 0x006C(0x0004) (Edit)
	float                                              ImprovementRate;                                          // 0x0070(0x0004)
	float                                              OverriddenImprovementRate;                                // 0x0074(0x0004)
	class AWeapon*                                     CurrentWeapon;                                            // 0x0078(0x0004)
	float                                              BaseDispersion;                                           // 0x007C(0x0004)
	float                                              BaseOffset;                                               // 0x0080(0x0004)
	float                                              BaseYOffset;                                              // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAimBotBase");
		return ptr;
	}


	bool CanHit();
	bool MoveControlledDisperion();
	float GetTowardMultiplier();
	float GetAwayMultiplier();
	float GetSidewaysMultiplier();
	void OverrideImprovementRate(float NewImprovementRate);
	float GetMinOffset();
	float GetMaxOffset();
	float GetOffset();
	float GetOffsetThreshold();
	bool IsHitRelevant(class UClass* DamageType, const struct FName& BoneName);
	void SetWeapon(class AWeapon* iWeapon);
	float GetDispersionModifier();
	struct FVector GetAimLocation(class ATdPlayerPawn* Target, bool bUseFullDispersion);
	void Render(class ATdPlayerPawn* PlayerPawn);
	float GetImprovementRate();
	void Tick(float DeltaTime);
};


// Class TdGame.TdAimBot
// 0x0024 (0x00AC - 0x0088)
class UTdAimBot : public UTdAimBotBase
{
public:
	struct FVector                                     CurrentLocation;                                          // 0x0088(0x000C)
	float                                              TimeOfLastShot;                                           // 0x0094(0x0004)
	float                                              CurrentX;                                                 // 0x0098(0x0004)
	float                                              CurrentY;                                                 // 0x009C(0x0004)
	float                                              TargetX;                                                  // 0x00A0(0x0004)
	float                                              TargetY;                                                  // 0x00A4(0x0004)
	float                                              DiffX;                                                    // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAimBot");
		return ptr;
	}


	struct FVector PickPoint(class ATdPlayerPawn* Target);
	struct FVector GetOffsetPoint(const struct FVector& StartLocation, const struct FVector& TargetLocation, float X, float Y);
	struct FVector GetTargetPoint(const struct FVector& StartLocation, const struct FVector& TargetLocation, float X, float Y);
	float GetDispersionHeight(class ATdPlayerPawn* Target);
	float GetDispersionOffset(class ATdPlayerPawn* Target);
	float GetDispersionWidth(class ATdPlayerPawn* Target);
	struct FVector GetTargetViewpointLocation(class ATdPlayerPawn* Target);
	struct FVector GetTargetLocation(class ATdPlayerPawn* Target);
	struct FVector GetNextLocation(class ATdPlayerPawn* Target);
	float sign(float X);
	struct FVector StartBurst(class ATdPlayerPawn* Target, class AWeapon* WeaponUsed);
	bool IsBulletDamage(class UClass* DamageType);
	bool ShouldMiss();
	bool IsHitRelevant(class UClass* DamageType, const struct FName& BoneName);
	void Render(class ATdPlayerPawn* Target);
	void UpdateDispersion(float DeltaTime);
	void Tick(float DeltaTime);
	float GetDispersionModifier();
	struct FVector GetAimLocation(class ATdPlayerPawn* Target, bool bUseFullDispersion);
	float GetImprovementRate();
};


// Class TdGame.TdAimBot_Perfect
// 0x0000 (0x0088 - 0x0088)
class UTdAimBot_Perfect : public UTdAimBotBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAimBot_Perfect");
		return ptr;
	}


	bool IsHitRelevant(class UClass* DamageType, const struct FName& BoneName);
	void SetWeapon(class AWeapon* iWeapon);
	float GetDispersionModifier();
	struct FVector GetAimLocation(class ATdPlayerPawn* Target, bool bUseFullDispersion);
};


// Class TdGame.TdAimBotSniper
// 0x0060 (0x00E8 - 0x0088)
class UTdAimBotSniper : public UTdAimBotBase
{
public:
	TEnumAsByte<ESniperAimbotState>                    AimbotState;                                              // 0x0088(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	struct FRotator                                    CurrentRot;                                               // 0x008C(0x000C)
	float                                              CalibrateTime;                                            // 0x0098(0x0004)
	float                                              RandomWalkPosition;                                       // 0x009C(0x0004)
	float                                              RandomWalkTarget;                                         // 0x00A0(0x0004)
	float                                              EnemyInvisibleTime;                                       // 0x00A4(0x0004)
	struct FVector                                     CurrentAimPoint;                                          // 0x00A8(0x000C)
	struct FVector                                     BlindPosBase;                                             // 0x00B4(0x000C)
	struct FVector                                     BlindPosAdjustment;                                       // 0x00C0(0x000C)
	struct FVector                                     BlindPos;                                                 // 0x00CC(0x000C)
	float                                              DistanceToLaserPoint;                                     // 0x00D8(0x0004)
	float                                              HeadShotAdjustment;                                       // 0x00DC(0x0004)
	unsigned long                                      bPullTrigger : 1;                                         // 0x00E0(0x0004)
	float                                              CheckPullTriggerTime;                                     // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAimBotSniper");
		return ptr;
	}


	bool AllowFire(class ATdPlayerPawn* Target);
	struct FVector GetAimLocation(class ATdPlayerPawn* Target, bool bUseFullDispersion);
	void Render(class ATdPlayerPawn* Target);
	struct FRotator GetRotation(class ATdPlayerPawn* Target);
	void UpdateBlindPos(float DeltaTime);
	struct FVector GetTargetPos(class ATdPlayerPawn* Target);
	void ResetAiming();
	void Tick(float DeltaTime);
	void NotifyWeaponFired(class AWeapon* W, unsigned char FireMode);
};


// Class TdGame.TdAIPawnBlockingVolume
// 0x0000 (0x0200 - 0x0200)
class ATdAIPawnBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIPawnBlockingVolume");
		return ptr;
	}

};


// Class TdGame.TdAIVoiceOverManager
// 0x0088 (0x0248 - 0x01C0)
class ATdAIVoiceOverManager : public AActor
{
public:
	class ATdAIManager*                                AIManager;                                                // 0x01C0(0x0004)
	float                                              NextTriggerDelay;                                         // 0x01C4(0x0004)
	TEnumAsByte<EVoiceOver>                            LastVo;                                                   // 0x01C8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C9(0x0003) MISSED OFFSET
	class APawn*                                       LastSpeaker;                                              // 0x01CC(0x0004)
	class ATdBotPawn*                                  LastSpeakerBot;                                           // 0x01D0(0x0004)
	TArray<struct FAIVoiceItem>                        ChatterQueue;                                             // 0x01D4(0x000C) (NeedCtorLink)
	TArray<struct FAIVoiceOver>                        VoiceOvers;                                               // 0x01E0(0x000C) (NeedCtorLink)
	TArray<float>                                      NoiseHistory;                                             // 0x01EC(0x000C) (NeedCtorLink)
	float                                              LastTriggerTime;                                          // 0x01F8(0x0004)
	float                                              QuietUntil;                                               // 0x01FC(0x0004)
	float                                              FriendsNearDistance;                                      // 0x0200(0x0004)
	float                                              PrioRecoveryTime;                                         // 0x0204(0x0004) (Edit)
	float                                              WindowSize;                                               // 0x0208(0x0004) (Edit)
	float                                              NoiseFactor;                                              // 0x020C(0x0004) (Edit)
	TArray<struct FSoundHistoryItem>                   DebugHistory;                                             // 0x0210(0x000C) (NeedCtorLink)
	int                                                VoiceCounter;                                             // 0x021C(0x0004)
	TArray<class USoundCue*>                           RadioStart;                                               // 0x0220(0x000C) (NeedCtorLink)
	TArray<class USoundCue*>                           RadioStop;                                                // 0x022C(0x000C) (NeedCtorLink)
	TArray<struct FPostponedSoundCue>                  PostponedItems;                                           // 0x0238(0x000C) (NeedCtorLink)
	unsigned long                                      bMuted : 1;                                               // 0x0244(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIVoiceOverManager");
		return ptr;
	}


	void SetLastSpeaker(class APawn* Speaker);
	void RemoveSpeaker(class APawn* Speaker);
	bool IsDelayed(int VO);
	void DrawDebugInfo(class UCanvas* aCanvas);
	float NoiseLevel();
	class APawn* FindFriendWithVoice(class APawn* Bot, int voice);
	void Speak(TEnumAsByte<EVoiceOver> VO, class APawn* Speaker, int voice, TEnumAsByte<EVoiceOver> answer);
	void UnMute();
	void Mute();
	float PlayWithRadioNoise(class USoundCue* Cue, class APawn* Source);
	struct FAIVoiceItem InitItem(TEnumAsByte<EVoiceOver> VO, class APawn* Bot, float TimeTriggered, int voice, TEnumAsByte<EVoiceOver> answer);
	void TriggerVO(class APawn* Bot, int VO, int voice, int answer);
	int GetVariation(TEnumAsByte<EVoiceOver> VO, int voice, int* subvariant);
	int GetVoiceNumber();
	void Reset();
	bool ReadVOData(class UClass* Data);
	void InitializeVoiceOvers();
	void PostBeginPlay();
};


// Class TdGame.TdAttackPathNodeRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdAttackPathNodeRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAttackPathNodeRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdBotPawn
// 0x0524 (0x0E1C - 0x08F8)
class ATdBotPawn : public ATdPawn
{
public:
	int                                                SetupTemplateCount;                                       // 0x08F8(0x0004)
	unsigned long                                      bInitializing : 1;                                        // 0x08FC(0x0004)
	unsigned long                                      bShouldNextMeleeCausePlayerFall : 1;                      // 0x08FC(0x0004)
	unsigned long                                      bAllowStandingTurning : 1;                                // 0x08FC(0x0004)
	unsigned long                                      bImmobile : 1;                                            // 0x08FC(0x0004) (Edit)
	unsigned long                                      SpawnedFromKismet : 1;                                    // 0x08FC(0x0004)
	unsigned long                                      bDyingFromCover : 1;                                      // 0x08FC(0x0004)
	unsigned long                                      bAIGodMode : 1;                                           // 0x08FC(0x0004)
	unsigned long                                      bChaseAI : 1;                                             // 0x08FC(0x0004)
	unsigned long                                      bForceWalking : 1;                                        // 0x08FC(0x0004)
	unsigned long                                      bWantsToWalk : 1;                                         // 0x08FC(0x0004)
	unsigned long                                      bIsSlowWalking : 1;                                       // 0x08FC(0x0004)
	unsigned long                                      bDebuggingFalling : 1;                                    // 0x08FC(0x0004)
	unsigned long                                      bHasStoppedAtFinalGoal : 1;                               // 0x08FC(0x0004)
	unsigned long                                      bForceStasis : 1;                                         // 0x08FC(0x0004)
	unsigned long                                      bAIIgnoreMoveInput : 1;                                   // 0x08FC(0x0004)
	unsigned long                                      bCanDoTakedownMoves : 1;                                  // 0x08FC(0x0004)
	unsigned long                                      bIgnoreAIPawnBlockingVolumes : 1;                         // 0x08FC(0x0004)
	unsigned long                                      bIsWalkingOrStanding : 1;                                 // 0x08FC(0x0004)
	unsigned long                                      bDebugOutput : 1;                                         // 0x08FC(0x0004)
	unsigned long                                      bUseLegRotationHack1 : 1;                                 // 0x08FC(0x0004)
	unsigned long                                      bUseLegRotationHack2 : 1;                                 // 0x08FC(0x0004)
	unsigned long                                      bUseLegRotation : 1;                                      // 0x08FC(0x0004)
	unsigned long                                      bDebugDeathAnim : 1;                                      // 0x08FC(0x0004) (Config)
	unsigned long                                      IsPressingWeaponTrigger : 1;                              // 0x08FC(0x0004)
	unsigned long                                      bWantsToFire : 1;                                         // 0x08FC(0x0004)
	unsigned long                                      bBurstWait : 1;                                           // 0x08FC(0x0004)
	unsigned long                                      bNewBurst : 1;                                            // 0x08FC(0x0004)
	unsigned long                                      bOkToBurst : 1;                                           // 0x08FC(0x0004)
	unsigned long                                      bForceCombatRange_Preferred : 1;                          // 0x08FC(0x0004)
	unsigned long                                      bForceCombatRange_Max : 1;                                // 0x08FC(0x0004)
	unsigned long                                      bUseTemporaryCombatRange : 1;                             // 0x08FC(0x0004)
	unsigned long                                      bRunPastNode : 1;                                         // 0x08FC(0x0004)
	unsigned long                                      bShowPathInfo : 1;                                        // 0x0900(0x0004)
	unsigned long                                      bDebugShowVelocity : 1;                                   // 0x0900(0x0004)
	unsigned long                                      bForceWaitForDamage : 1;                                  // 0x0900(0x0004)
	unsigned long                                      bEnableMeleePose : 1;                                     // 0x0900(0x0004) (Transient)
	unsigned long                                      bIsAccelerating : 1;                                      // 0x0900(0x0004)
	unsigned long                                      bEnableInverseKinematics : 1;                             // 0x0900(0x0004) (Transient)
	unsigned long                                      bHeadPitchAlwaysOk : 1;                                   // 0x0900(0x0004)
	unsigned long                                      bCanFire : 1;                                             // 0x0900(0x0004)
	unsigned long                                      bIsRunnerVisionEnabled : 1;                               // 0x0900(0x0004) (Transient)
	unsigned long                                      bPawnRunnerVision : 1;                                    // 0x0900(0x0004) (Transient)
	float                                              AudibleFeetRange;                                         // 0x0904(0x0004)
	class ATdPawn*                                     Target;                                                   // 0x0908(0x0004)
	float                                              TurnTimer;                                                // 0x090C(0x0004)
	TArray<struct FInvulnerableDamageTypeStruct>       InvulnerableDamageTypes;                                  // 0x0910(0x000C) (NeedCtorLink)
	class ATdAIController*                             myController;                                             // 0x091C(0x0004)
	class ATdInv_Shield*                               myShield;                                                 // 0x0920(0x0004)
	class UAnimNodeSynch*                              LegMovementSyncGroup;                                     // 0x0924(0x0004)
	class UTdAnimNodeAimOffset*                        HitReactionNode;                                          // 0x0928(0x0004)
	class UTdAnimNodeAimOffset*                        HitReactionNode2;                                         // 0x092C(0x0004)
	float                                              HitReactionRelay1;                                        // 0x0930(0x0004)
	float                                              HitReactionRelay2;                                        // 0x0934(0x0004)
	float                                              LegOffsetWalkFwd;                                         // 0x0938(0x0004) (Config)
	float                                              LegOffsetWalkLeft60;                                      // 0x093C(0x0004) (Config)
	float                                              LegOffsetWalkLeftBwd120;                                  // 0x0940(0x0004) (Config)
	float                                              LegOffsetWalkRight60;                                     // 0x0944(0x0004) (Config)
	float                                              LegOffsetWalkRightBwd120;                                 // 0x0948(0x0004) (Config)
	float                                              LegOffsetWalkBack;                                        // 0x094C(0x0004) (Config)
	float                                              LegOffsetRunFwd;                                          // 0x0950(0x0004) (Config)
	float                                              LegOffsetRunLeft90;                                       // 0x0954(0x0004) (Config)
	float                                              LegOffsetRunLeft180;                                      // 0x0958(0x0004) (Config)
	float                                              LegOffsetRunRight90;                                      // 0x095C(0x0004) (Config)
	float                                              LegOffsetRunRight180;                                     // 0x0960(0x0004) (Config)
	float                                              CMaxPathDistSq;                                           // 0x0964(0x0004) (Const)
	class UTdBubbleStack*                              ForcedWalkingStack;                                       // 0x0968(0x0004)
	int                                                iSetMoveCounter;                                          // 0x096C(0x0004)
	class UAITemplate*                                 myTemplate;                                               // 0x0970(0x0004)
	float                                              StartedRunningTimeStamp;                                  // 0x0974(0x0004)
	struct FVector                                     DebugFallingPos;                                          // 0x0978(0x000C)
	struct FVector                                     DebugFallingSpeed;                                        // 0x0984(0x000C)
	float                                              EvadedTimeStamp;                                          // 0x0990(0x0004)
	int                                                LastAnchorNetworkId;                                      // 0x0994(0x0004)
	float                                              DamageMultiplier_Head;                                    // 0x0998(0x0004)
	float                                              DamageMultiplier_Body;                                    // 0x099C(0x0004)
	class USoundCue*                                   bulletFlyby;                                              // 0x09A0(0x0004)
	float                                              ReloadReadyTime;                                          // 0x09A4(0x0004)
	TEnumAsByte<EDeathAnimType>                        ActiveDeathAnimType;                                      // 0x09A8(0x0001)
	TEnumAsByte<EAIFiringMood>                         FiringMood;                                               // 0x09A9(0x0001)
	TEnumAsByte<EAIFiringRange>                        FiringRange;                                              // 0x09AA(0x0001)
	TEnumAsByte<EWeaponAnimState>                      AiInitializeWeaponAnimationState;                         // 0x09AB(0x0001) (Transient)
	struct FDeathAnimData                              DeathAnim;                                                // 0x09AC(0x0040)
	struct FDeathAnimData                              DeathAnimRagdoll;                                         // 0x09EC(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimRagdollHard;                                     // 0x0A2C(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathFront;                                      // 0x0A6C(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathFrontHard;                                  // 0x0AAC(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathBack;                                       // 0x0AEC(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathBackHard;                                   // 0x0B2C(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathRight;                                      // 0x0B6C(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathRightHard;                                  // 0x0BAC(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathLeft;                                       // 0x0BEC(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathLeftHard;                                   // 0x0C2C(0x0040) (Edit, Config)
	struct FDeathAnimData                              DeathAnimDeathByAuto;                                     // 0x0C6C(0x0040) (Edit, Config)
	TArray<struct FName>                               RagdollBones;                                             // 0x0CAC(0x000C) (NeedCtorLink)
	float                                              RagdollMotorBlendOut;                                     // 0x0CB8(0x0004)
	float                                              RagdollTimer;                                             // 0x0CBC(0x0004)
	class USoundCue*                                   BodyFallHard;                                             // 0x0CC0(0x0004) (Edit)
	class USoundCue*                                   BodyFallMedium;                                           // 0x0CC4(0x0004) (Edit)
	class USoundCue*                                   BodyFallSoft;                                             // 0x0CC8(0x0004) (Edit)
	int                                                AccelRateNormal;                                          // 0x0CCC(0x0004) (Edit, Config)
	int                                                AccelRateFast;                                            // 0x0CD0(0x0004) (Edit, Config)
	float                                              CertainSightRadius;                                       // 0x0CD4(0x0004)
	int                                                CurrentBurstLength;                                       // 0x0CD8(0x0004) (Edit)
	float                                              BurstDelayMin;                                            // 0x0CDC(0x0004) (Edit)
	float                                              BurstDelayMax;                                            // 0x0CE0(0x0004) (Edit)
	int                                                CurrentBurstMin;                                          // 0x0CE4(0x0004) (Edit)
	int                                                CurrentBurstMax;                                          // 0x0CE8(0x0004) (Edit)
	float                                              ForcedCombatRange_Preferred;                              // 0x0CEC(0x0004)
	float                                              ForcedCombatRange_Max;                                    // 0x0CF0(0x0004)
	float                                              TemporaryCombatRange;                                     // 0x0CF4(0x0004)
	int                                                DeltaRotation;                                            // 0x0CF8(0x0004)
	float                                              ThisTick;                                                 // 0x0CFC(0x0004)
	float                                              SavedRotationTime;                                        // 0x0D00(0x0004)
	int                                                MainWeaponAmmo_Dropped;                                   // 0x0D04(0x0004) (Transient)
	int                                                MainWeaponAmmo_Disarmed;                                  // 0x0D08(0x0004) (Transient)
	int                                                FactoryAmmoDrop_Easy;                                     // 0x0D0C(0x0004) (Transient)
	int                                                FactoryAmmoDrop_Medium;                                   // 0x0D10(0x0004) (Transient)
	int                                                FactoryAmmoDrop_Hard;                                     // 0x0D14(0x0004) (Transient)
	int                                                FactoryAmmoDisarm_Easy;                                   // 0x0D18(0x0004) (Transient)
	int                                                FactoryAmmoDisarm_Medium;                                 // 0x0D1C(0x0004) (Transient)
	int                                                FactoryAmmoDisarm_Hard;                                   // 0x0D20(0x0004) (Transient)
	class UClass*                                      DroppedGrenadeClass;                                      // 0x0D24(0x0004)
	class UAnimNodeSlot*                               CustomFullBodyAnimNode;                                   // 0x0D28(0x0004)
	class ATdAIAnimationController*                    myAnimationController;                                    // 0x0D2C(0x0004)
	struct FVector                                     DirectionOfMovement;                                      // 0x0D30(0x000C)
	float                                              CurveSteepness;                                           // 0x0D3C(0x0004)
	int                                                CurrentRotationSpeed;                                     // 0x0D40(0x0004)
	int                                                OldYaw;                                                   // 0x0D44(0x0004)
	struct FVector                                     aimPos;                                                   // 0x0D48(0x000C)
	float                                              AccumulatedDeltaTime;                                     // 0x0D54(0x0004)
	int                                                MaxLookAhead;                                             // 0x0D58(0x0004) (Edit, Config)
	int                                                DiffForMaxRotationSpeed;                                  // 0x0D5C(0x0004) (Edit, Config)
	int                                                MaxRotationSpeed;                                         // 0x0D60(0x0004) (Edit, Config)
	int                                                MaxRotationAcceleration;                                  // 0x0D64(0x0004) (Edit, Config)
	int                                                MinRotationAcceleration;                                  // 0x0D68(0x0004) (Edit, Config)
	int                                                RotationSpeedDiffForMaxAcceleration;                      // 0x0D6C(0x0004) (Edit, Config)
	int                                                TurnFrictionTweak;                                        // 0x0D70(0x0004) (Edit, Config)
	float                                              RotationSpeedForMaxLean;                                  // 0x0D74(0x0004) (Edit, Config)
	float                                              WalkToRun;                                                // 0x0D78(0x0004) (Edit, Config)
	float                                              RunToWalk;                                                // 0x0D7C(0x0004) (Edit, Config)
	float                                              StandToWalk;                                              // 0x0D80(0x0004) (Edit, Config)
	float                                              DamageTime;                                               // 0x0D84(0x0004) (Config)
	int                                                MeleeAttackLimit;                                         // 0x0D88(0x0004) (Transient)
	int                                                ConsecutiveHitCount;                                      // 0x0D8C(0x0004) (Transient)
	int                                                ConsecutiveCrouchHitCount;                                // 0x0D90(0x0004) (Transient)
	int                                                ConsecutiveAirHitCount;                                   // 0x0D94(0x0004) (Transient)
	float                                              MeleeAttackTime;                                          // 0x0D98(0x0004) (Transient)
	float                                              CrouchMeleeAttackTime;                                    // 0x0D9C(0x0004) (Transient)
	float                                              AirMeleeAttackTime;                                       // 0x0DA0(0x0004) (Transient)
	float                                              BlockResetTime;                                           // 0x0DA4(0x0004) (Config)
	float                                              InterpolatedSlope;                                        // 0x0DA8(0x0004)
	struct FEaseStructure                              InterpolationInformation;                                 // 0x0DAC(0x0014) (Transient)
	struct FName                                       AiProfileName;                                            // 0x0DC0(0x0008) (Transient)
	float                                              AnimationRunSpeed;                                        // 0x0DC8(0x0004) (Transient)
	float                                              AnimationWalkSpeed;                                       // 0x0DCC(0x0004) (Transient)
	float                                              AnimationExitReloadTime;                                  // 0x0DD0(0x0004) (Transient)
	float                                              StartFallingZ;                                            // 0x0DD4(0x0004)
	struct FVector                                     StartingLocation;                                         // 0x0DD8(0x000C)
	struct FRotator                                    StartingRotation;                                         // 0x0DE4(0x000C)
	class USkeletalMeshComponent*                      AdditionalSkeletalMesh;                                   // 0x0DF0(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FVector                                     ViewPointLocation;                                        // 0x0DF4(0x000C)
	struct FVector                                     ViewPointLocation_Crouching;                              // 0x0E00(0x000C)
	class ATdAI_RunnerVisionEffect*                    RVEffect;                                                 // 0x0E0C(0x0004)
	struct FScriptDelegate                             __OnDeath__Delegate;                                      // 0x0E10(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBotPawn");
		return ptr;
	}


	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void UseRootRotation(bool Use);
	void UseRootMotion(bool Use);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsInMeleeMove();
	bool UseWeaponLOI();
	void DetachFromController(bool bDestroyController);
	void RemoveRagDoll();
	void RecycleBot();
	bool IsDoingSpecialMove();
	void SetIgnoreAIPawnBlockingVolumes(bool flag);
	bool ShouldIgnoreAIPawnBlockingVolumes();
	void UpdateDebugFalling();
	void StartDebugFalling();
	float GetWalkSpeed();
	float GetRunSpeed();
	bool GetIsSlowWalking();
	void SetIsSlowWalking(bool flag);
	void ForceWalking(bool flag, const struct FName& Identifier);
	void SetWalking(bool bNewIsWalking);
	bool WantsToRun();
	bool IsForcedToWalk();
	void OnCoverExitedNotify();
	void OnExitCoverNotify();
	void OnStumbleCompletedNotifier();
	void BotGrabHeave_HeaveNotify();
	void BotGrabHeave_JumpDoneNotify();
	void BotGrabHeave_JumpInitiatedNotify();
	void HeaveCompletedNotify();
	void HeaveInitiatedNotify();
	void ClimbCompletedNotify();
	void ClimbInitiatedNotify();
	bool ShouldStumbleOffLedge();
	void Falling();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	struct FVector GetViewpointLocation(bool ForceCrouch);
	void CheckForProximityShots(const struct FVector& Start, const struct FVector& End);
	void UpdateAnimationBaseSpeed();
	void SetDifficultyLevel(int Difficulty);
	int GetMainWeaponAmmoDropsDropped(int Difficulty);
	int GetMainWeaponAmmoDropsDisarmed(int Difficulty);
	int GetDifficultyLevel();
	void SetMainWeaponAmmoDrop(int Drop_Easy, int Drop_Medium, int Drop_Hard, int Disarm_Easy, int Disarm_Medium, int Disarm_Hard);
	void TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity, class UClass* DamageType);
	void SetArmorDifficultyLevel(int Difficulty);
	int SetupTemplate(class UAITemplate* TheTemplate, bool bGiveDefaultInventory);
	void OnContentLoaded();
	void FullBodyRagdoll();
	void TurnOffMotors();
	void StartBlendOutMotors();
	void EnableRagdoll();
	void TickRagdoll(float DeltaTime);
	void GiveBoneImpulse();
	void ImpulseHisAss(const struct FVector& Direction);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void GetDeathAnim(TEnumAsByte<EDeathAnimType> Type, struct FDeathAnimData* Data);
	void PlayDeathAnim();
	bool IsDead();
	void UpdateWalkingState();
	void StopVOAnimation(const struct FName& VOAnimSeqName, float BlendOutTime);
	void PlayVOAnimation(const struct FName& VOAnimSeqName, bool bLooping, float BlendInTime, float BlendOutTime);
	void StopLookback();
	void LookBack();
	void PlayWeaponDeploy();
	void UpdateAgainstWall();
	bool CanAttack(class AActor* ATarget);
	float GetGroundSpeed();
	struct FRotator GetViewpointRotation();
	struct FName GetCurrentProfileName(class UAnimNodeAimOffset* AimNode);
	void DrawDebugAnims(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DrawDebugInfo(class APlayerController* Player, class UCanvas* aCanvas);
	void SetAnchor(class ANavigationPoint* NewAnchor);
	void SetEnemyTarget(class ATdPawn* aPawn);
	void AddToInventory(class UClass* WeaponClass);
	void AddDefaultInventory();
	void DoGrabHeave();
	void DoSpeedVault();
	void DoVaultOver();
	void DoLongJump();
	void DoMediumJump();
	void DoShortJump();
	void DoBotJump();
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	float GetWeaponRange();
	void ResetTemporaryCombatRange();
	void SetTemporaryCombatRange(float Range);
	void ResetCombatRange();
	void ForceMaxCombatRange(float Distance);
	void ForcePreferredCombatRange(float Distance);
	float GetPreferredCombatDistance_Internal();
	float GetPreferredCombatDistance();
	float GetMaxCombatDistance_Internal();
	float GetMaxCombatDistance();
	float GetMinCombatDistance();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	void SpawnedByKismet();
	void UpdateHitReaction(float DeltaTime);
	void Tick(float DeltaTime);
	void Turn(float DeltaTime);
	void AllowStandingTurning(bool bAllowTurning);
	void InterpolateSlope(float DeltaSeconds);
	bool GetIgnoreMoveInput();
	void IgnoreMoveInput(bool bIgnore);
	class ATdAIAnimationController* GetAnimationController();
	void SetAnimationController();
	void InitializeWeaponAnimationSets();
	void InitSyncNodes();
	void InitAnimationSettings();
	void CacheAnimNodes();
	void PostBeginPlay();
	void OnStoppedBlocking();
	void OnMeleedFromAir();
	void OnDisarmed();
	void OnStumbleEnded();
	void OnStumble(bool bAllowRotation);
	void CrushedBy(class APawn* OtherPawn);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	bool ShouldMeleeCauseStumbleFar();
	bool ShouldMeleeCauseFall();
	void ResetAirBlockingParameters();
	void ResetCrouchBlockingParameters();
	void ResetBlockingParameters();
	void StartBlocking();
	bool ShouldBlock(class UClass* MeleeDamageType);
	bool CanBlock();
	bool HasMeleeTransitionAnimation();
	bool HasMeleeIdleAnimation();
	void PrepareForMeleeAttack(class UClass* MeleeDamageType);
	void SetForceWaitForDamageTimer(float TimeToWait);
	void ForceWaitForDamage();
	void BulletDamage(class ATdPawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType);
	void StumbleDamage(class ATdPawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType);
	bool PreventWeaponImpactEffect(class AController* InstigatorController);
	void PlayMeleeImpact(class UPhysicalMaterial* PhysMat, TEnumAsByte<EMeleeImpactType> Type, const struct FVector& TargetHitLocation, const struct FVector& TargetHitNormal, const struct FVector& TargetHitMomentum, const struct FName& TargetHitBone, class UClass* DamageType);
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* OutMomentum);
	bool IsInvulnerableToThisDamageType(class UClass* DamageType);
	void RemoveAllInvulnerableTo(const struct FName& Identifier);
	void RemoveInvulnerableTo(class UClass* DamageType, const struct FName& Identifier);
	void MakeInvulnerableTo_StringVersion(TArray<struct FName> DamageTypeNames, const struct FName& Identifier);
	void MakeInvulnerableTo(class UClass* DamageType, const struct FName& Identifier);
	void StopSliding();
	void StartSliding(const struct FVector& EndTarget);
	bool HasShield();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	TEnumAsByte<EPose> GetCurrentPose();
	void SetPose(TEnumAsByte<EPose> pose);
	bool IsBusyCrouching();
	bool IsCrouching();
	void SetAIFiringState(TEnumAsByte<EAIFiringMood> M, float DistanceSquared);
	TEnumAsByte<EAIFiringRange> ClassifyAIFiringRange(float DistanceSquared);
	TEnumAsByte<EAIFiringRange> GetFiringRange();
	float FRandRange(float Min, float Max);
	struct FName PlayReloadAnimation(const struct FName& WeaponAnimSeqName, bool bPlayWeaponAnimSeq);
	float GetReloadPlaybackRate();
	struct FName PlayFireAnimation(const struct FName& WeaponAnimSeqName, bool bPlayWeaponAnimSeq);
	void WeaponStoppedFiring(bool bViaReplication);
	void InterruptBurst();
	void BurstOver();
	void WeaponFired(bool bViaReplication, const struct FVector& HitLocation);
	void StartNewBurst();
	void PauseFiring();
	void NotifyOkToBurst();
	bool IsOkToFireBullet();
	void StopFiringWeapon();
	void StartFiringWeapon();
	void CheckFire();
	void CeaseFire();
	void FireWhenReady();
	bool WalkingOrStanding();
	bool CanFireWeapon();
	float WhereInWalkCykle();
	bool AllowStickyAim();
	void EncroachedBy(class AActor* Other);
	void SetArmed();
	void SetUnarmed();
	void SetWeaponPoseOffsetProfile(const struct FName& ProfileName);
	void SetAimOffsetNodesProfile(const struct FName& ProfileName);
	void UpdateAnimSets(class ATdWeapon* NewWeapon);
	void InitializePoseOffsetNodes();
	void InitializeAimOffsetNodes();
	struct FName GetPoseProfileName(const struct FName& PoseNodeName);
	struct FName GetAimProfileName(const struct FName& AimNodeName);
	void SetWeaponAnimState(TEnumAsByte<EWeaponAnimState> AnimState);
	bool HasAmmo();
	void AnimNotifyGrenadeThrow();
	bool IsFirstPerson();
	void ActivateStasis(bool flag, bool UpdateControllerState);
	void OnSetCoverGroup(class USeqAct_SetCoverGroup* Action);
	void OnSetCombatRange(class USeqAct_SetCombatRange* RangeData);
	void OnAIFireAt(class USeqAct_AIFireAt* Action);
	void OnTdAIPerfectAim(class USeqAct_TdAIPerfectAim* Action);
	void OnAIForceWalking(class USeqAct_AIForceWalking* Action);
	void OnAIHoldFire(class USeqAct_AIHoldFire* Action);
	void OnTdSetPathLimits(class USeqAct_TdSetPathLimits* Action);
	void OnTdAIStasis(class USeqAct_TdAIStasis* Action);
	void OnAIImmobile(class USeqAct_AIImmobile* Action);
	void OnAIReleaseScripting(class USeqAct_AIReleaseScripting* Action);
	void StopMoving();
	void SetDeathCallback(const struct FScriptDelegate& callback);
	void OnDeath(class ATdBotPawn* Victim);
	bool LoseWeaponAfterDisarm();
	void AddSpecialOutput(struct FString* Text);
	bool OkToUpdatePath();
	bool OkToChangeState();
	bool CanDoMove(TEnumAsByte<EMovement> NewMove);
	bool SetMove(TEnumAsByte<EMovement> NewMove, bool bViaReplication, bool bCheckCanDo);
	bool TdSetRotation(const struct FRotator& NewRotation);
	bool CanDoRunStopTurnMoves();
	void SetCustomAnimsBlendOutTime(TEnumAsByte<ECustomNodeType> Type, float BlendOutTime);
	void PlayCustomAnim(TEnumAsByte<ECustomNodeType> Type, const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, bool bRootMotion, bool bRootRotation);
	bool HasUseLegRotationFlagSet();
	void UseLegRotation(bool bLegRotation);
	void SetChaseAI(bool bFlag);
	void UpdateRunnerVision();
	void SetRunnerVisionEnabled(bool bEnabled);
	void SetPawnRunnerVision(bool bEnabled);
	void ResetLocation();
	void Destroyed();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void PlayFootStepSound(int FootDown);
	void Initialize(class ATdAIController* C);
	bool ValidAnchor();
	void InitMoveObjects();
	void UpdateLeaning(float DeltaTime);
};


// Class TdGame.TdBotPawnNoPhysics
// 0x0000 (0x0E1C - 0x0E1C)
class ATdBotPawnNoPhysics : public ATdBotPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBotPawnNoPhysics");
		return ptr;
	}


	bool SetMove(TEnumAsByte<EMovement> NewMove, bool bViaReplication, bool bCheckCanDo);
};


// Class TdGame.TdCoverController
// 0x0080 (0x0240 - 0x01C0)
class ATdCoverController : public AActor
{
public:
	class ATdAIAnimationController*                    AnimationController;                                      // 0x01C0(0x0004) (Transient)
	TEnumAsByte<ECoverControllerAction>                CurrentCoverAction;                                       // 0x01C4(0x0001) (Transient)
	TEnumAsByte<ECoverControllerPosition>              CurrentCoverPosition;                                     // 0x01C5(0x0001) (Transient)
	TEnumAsByte<ECoverControllerAction>                PendingCoverAction;                                       // 0x01C6(0x0001) (Transient)
	TEnumAsByte<ECoverControllerAction>                DebugCoverAction;                                         // 0x01C7(0x0001) (Transient)
	class ATdAIController*                             AIController;                                             // 0x01C8(0x0004) (Transient)
	struct FCoverInformation                           Cover;                                                    // 0x01CC(0x004C) (Transient)
	class ATdBotPawn*                                  AiPawn;                                                   // 0x0218(0x0004) (Transient)
	unsigned long                                      bSkipTick : 1;                                            // 0x021C(0x0004) (Transient)
	unsigned long                                      bUpdatePawnLocation : 1;                                  // 0x021C(0x0004) (Transient)
	unsigned long                                      bUpdatePawnRotation : 1;                                  // 0x021C(0x0004) (Transient)
	unsigned long                                      bWait : 1;                                                // 0x021C(0x0004) (Transient)
	unsigned long                                      bCoverExited : 1;                                         // 0x021C(0x0004) (Transient)
	unsigned long                                      bNeverUsed : 1;                                           // 0x021C(0x0004) (Transient)
	unsigned long                                      bDebugCoverController : 1;                                // 0x021C(0x0004) (Edit, Config)
	struct FVector                                     PawnLocation;                                             // 0x0220(0x000C) (Transient)
	struct FRotator                                    PawnRotation;                                             // 0x022C(0x000C) (Transient)
	float                                              OnExitCoverTransitionTime;                                // 0x0238(0x0004) (Edit, Config)
	float                                              OnCoverExitedTransitionTime;                              // 0x023C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCoverController");
		return ptr;
	}


	bool VerifyExitedCoverValid();
	bool VerifyEnteredCoverValid();
	bool VerifyCoverDirection(const struct FRotator& CoverDirection);
	bool VerifyCoverPosition(const struct FVector& CoverPosition);
	void VerifyCoverValidity();
	int sign(int Value);
	bool IsControllerWaiting();
	void ReleaseControllerWaiting();
	void SetControllerWaiting(float Time);
	void SetPawnCoverPosition(TEnumAsByte<ECoverControllerPosition> CoverPosition, bool bIgnoreInPosition);
	void SetPawnRotation(const struct FRotator& iPawnRotation);
	void SetPawnLocation(const struct FVector& iPawnLocation);
	void ExitCoverAction();
	void EnterCoverAction();
	void AimFireRightAction();
	void AimFireLeftAction();
	void AimFireAction();
	void CoverIdleAction();
	bool PerformCoverAction(TEnumAsByte<ECoverControllerAction> CoverAction);
	void PrePerformCoverAction();
	void Tick(float DeltaTime);
	bool CanFireWeapon();
	bool AllowFocusRotation();
	TEnumAsByte<ECoverControllerPosition> GetCoverControllerPosition();
	TEnumAsByte<ECoverControllerAction> GetCoverControllerAction();
	void SetCoverExited();
	void ForceExitCover();
	void SetCoverEntered();
	void OnCoverExited();
	void OnExitCover();
	void OnEnterCover(class ATdBotPawn* BotPawn, class UTdCover* CurrentCover);
	bool IsCoverExited();
	TEnumAsByte<ECoverControllerAction> GetCurrentCoverAction();
	class ATdAIAnimationController* GetAnimationController();
	void Reset();
	void Initialize(class ATdBotPawn* myPawn);
};


// Class TdGame.TdCoverGroup
// 0x0010 (0x01E4 - 0x01D4)
class ATdCoverGroup : public ACoverGroup
{
public:
	class ATdCoverGroupVolume*                         RestraintVolume;                                          // 0x01D4(0x0004) (Edit)
	TArray<struct FNavReference>                       GeneratedCoverLinkRefs;                                   // 0x01D8(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCoverGroup");
		return ptr;
	}


	bool Contains(class ACoverLink* Link);
	void ToggleGroup();
	void DisableGroup();
	void EnableGroup();
};


// Class TdGame.TdCoverGroupRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdCoverGroupRenderingComponent : public UCoverGroupRenderingComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCoverGroupRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdCoverGroupVolume
// 0x000C (0x0208 - 0x01FC)
class ATdCoverGroupVolume : public AVolume
{
public:
	TArray<class ATdCoverGroup*>                       Owners;                                                   // 0x01FC(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCoverGroupVolume");
		return ptr;
	}


	void CollisionChanged();
	void OnToggle(class USeqAct_Toggle* Action);
};


// Class TdGame.TdGrenadeArea
// 0x0010 (0x01D0 - 0x01C0)
class ATdGrenadeArea : public AActor
{
public:
	float                                              Radius;                                                   // 0x01C0(0x0004) (Edit)
	float                                              Height;                                                   // 0x01C4(0x0004) (Edit)
	struct FColor                                      AreaColor;                                                // 0x01C8(0x0004)
	unsigned long                                      bUsedAsTrigger : 1;                                       // 0x01CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGrenadeArea");
		return ptr;
	}

};


// Class TdGame.TdGrenadeTargetArea
// 0x0034 (0x0204 - 0x01D0)
class ATdGrenadeTargetArea : public ATdGrenadeArea
{
public:
	TEnumAsByte<EGrenadeType>                          GrenadeType;                                              // 0x01D0(0x0001) (Edit)
	TEnumAsByte<EThrowType>                            TypeOfThrow;                                              // 0x01D1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01D2(0x0002) MISSED OFFSET
	TArray<class ANavigationPoint*>                    GrenadeNodes;                                             // 0x01D4(0x000C) (Edit, NeedCtorLink)
	TArray<class ATdGrenadeArea*>                      TriggerAreas;                                             // 0x01E0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bForceAIThrow : 1;                                        // 0x01EC(0x0004) (Edit)
	unsigned long                                      bUsePlayerAsTarget : 1;                                   // 0x01EC(0x0004) (Edit)
	unsigned long                                      bOnlyUseOnce : 1;                                         // 0x01EC(0x0004) (Edit)
	float                                              ThrowSpeedTweak;                                          // 0x01F0(0x0004) (Edit)
	float                                              YawAngleTweak;                                            // 0x01F4(0x0004) (Edit)
	float                                              TimeToExplode;                                            // 0x01F8(0x0004) (Edit)
	struct FColor                                      NodeLinkColor;                                            // 0x01FC(0x0004)
	struct FColor                                      TriggerLinkColor;                                         // 0x0200(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGrenadeTargetArea");
		return ptr;
	}


	void ThrowGrenade();
	void PostBeginPlay();
	bool IsPawnInArea(class APawn* inPawn);
};


// Class TdGame.TdExplosiveTargetArea
// 0x0014 (0x0218 - 0x0204)
class ATdExplosiveTargetArea : public ATdGrenadeTargetArea
{
public:
	class AActor*                                      TargetActor;                                              // 0x0204(0x0004) (Edit)
	struct FVector                                     OffsetFromTargetActorsPivot;                              // 0x0208(0x000C) (Edit)
	struct FColor                                      ExplosiveLinkColor;                                       // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdExplosiveTargetArea");
		return ptr;
	}

};


// Class TdGame.TdFocusHandler
// 0x0015 (0x0051 - 0x003C)
class UTdFocusHandler : public UObject
{
public:
	struct FVector                                     FocusPoint;                                               // 0x003C(0x000C)
	class AActor*                                      FocusedActor;                                             // 0x0048(0x0004)
	class ATdAIController*                             myOwner;                                                  // 0x004C(0x0004)
	TEnumAsByte<EFocusType>                            CurrentFocus;                                             // 0x0050(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdFocusHandler");
		return ptr;
	}


	struct FString GetDescription();
	void SetActorFocus(class AActor* NewFocus);
	void SetFocalPoint(const struct FVector& NewFocus);
	bool HasFocus();
	struct FVector GetFocusLocation();
	bool GetFocus(struct FVector* out_Focus);
	void SetFocus(TEnumAsByte<EFocusType> Focus);
	void Initialize(class ATdAIController* C);
};


// Class TdGame.TdGrenadeTargetAreaRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdGrenadeTargetAreaRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGrenadeTargetAreaRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdGuardSpot
// 0x0004 (0x0318 - 0x0314)
class ATdGuardSpot : public ANavigationPoint
{
public:
	float                                              ProtectionAngle;                                          // 0x0314(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGuardSpot");
		return ptr;
	}

};


// Class TdGame.TdGuardSpotRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdGuardSpotRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGuardSpotRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdHeadFocusHandler
// 0x004C (0x0088 - 0x003C)
class UTdHeadFocusHandler : public UObject
{
public:
	class AActor*                                      FocusActor;                                               // 0x003C(0x0004)
	class ATdPawn*                                     FocusPlayer;                                              // 0x0040(0x0004)
	class ATdBotPawn*                                  AiPawn;                                                   // 0x0044(0x0004)
	class UTdHeadControl*                              HeadControl;                                              // 0x0048(0x0004)
	struct FVector                                     ActorOffset;                                              // 0x004C(0x000C)
	class UTdBubbleStack*                              HeadFocusEnabledStack;                                    // 0x0058(0x0004)
	unsigned long                                      bIsActivated : 1;                                         // 0x005C(0x0004)
	unsigned long                                      bHasBeenUpdatedThisFrame : 1;                             // 0x005C(0x0004)
	unsigned long                                      bAllowStateChanges : 1;                                   // 0x005C(0x0004)
	struct FVector                                     PointOfInterest;                                          // 0x0060(0x000C)
	struct FRotator                                    HeadOffset;                                               // 0x006C(0x000C)
	int                                                MinYawLimit;                                              // 0x0078(0x0004)
	int                                                MaxYawLimit;                                              // 0x007C(0x0004)
	int                                                MinPitchLimit;                                            // 0x0080(0x0004)
	int                                                MaxPitchLimit;                                            // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHeadFocusHandler");
		return ptr;
	}


	void ToggleEyelids();
	void ActivateHeadControl(bool flag);
	void UpdateFocusState();
	void PopEnabled(const struct FName& Identifier);
	void PushEnabled(bool bEnable, const struct FName& Identifier);
	void SetAllowStateChanges(bool iAllowStateChanges);
	bool AllowStateChanges();
	void FocusOnActor(class AActor* Focus, const struct FVector& Offset, const struct FName& Identifier);
	bool IsActivated();
	void Tick(float DeltaTime);
	void AddSpecialOutput(struct FString* Text);
	void Initialize(class ATdAIController* Controller);
};


// Class TdGame.TdPathLimits
// 0x0010 (0x01D0 - 0x01C0)
class ATdPathLimits : public AInfo
{
public:
	class AVolume*                                     VolumeLimit;                                              // 0x01C0(0x0004) (Edit)
	float                                              LimitRadius;                                              // 0x01C4(0x0004) (Edit)
	float                                              LimitHeight;                                              // 0x01C8(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x01CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPathLimits");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	bool Contains(const struct FVector& TestLocation);
};


// Class TdGame.TdPathLimitsRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdPathLimitsRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPathLimitsRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdPathLimitsVolume
// 0x0004 (0x0200 - 0x01FC)
class ATdPathLimitsVolume : public AVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPathLimitsVolume");
		return ptr;
	}


	void CollisionChanged();
	void OnToggle(class USeqAct_Toggle* Action);
};


// Class TdGame.TdSniperNodeRenderingComponent
// 0x0000 (0x01BC - 0x01BC)
class UTdSniperNodeRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSniperNodeRenderingComponent");
		return ptr;
	}

};


// Class TdGame.TdSniperSpot
// 0x0014 (0x0328 - 0x0314)
class ATdSniperSpot : public ANavigationPoint
{
public:
	unsigned long                                      Occupied : 1;                                             // 0x0314(0x0004)
	unsigned long                                      Crouch : 1;                                               // 0x0314(0x0004) (Edit)
	float                                              AttackVolumeHeight;                                       // 0x0318(0x0004) (Edit)
	float                                              AttackVolumeAngle;                                        // 0x031C(0x0004) (Edit)
	float                                              AttackVolumeRadius;                                       // 0x0320(0x0004) (Edit)
	float                                              AttackVolumeInnerRadius;                                  // 0x0324(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSniperSpot");
		return ptr;
	}


	bool PointInside(const struct FVector& Point);
};


// Class TdGame.TdSuppressionSpot
// 0x0004 (0x0318 - 0x0314)
class ATdSuppressionSpot : public ANavigationPoint
{
public:
	unsigned long                                      Occupied : 1;                                             // 0x0314(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSuppressionSpot");
		return ptr;
	}

};


// Class TdGame.SeqAct_AIFireAt
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIFireAt : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIFireAt");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_AIImmobile
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIImmobile : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIImmobile");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_AIReleaseScripting
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIReleaseScripting : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIReleaseScripting");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_AIThrowGrenade
// 0x0004 (0x00F0 - 0x00EC)
class USeqAct_AIThrowGrenade : public USeqAct_Latent
{
public:
	class ATdGrenadeTargetArea*                        GrenadeTargetArea;                                        // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIThrowGrenade");
		return ptr;
	}

};


// Class TdGame.SeqAct_SetCoverGroup
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_SetCoverGroup : public USequenceAction
{
public:
	class ACoverGroup*                                 Group;                                                    // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_SetCoverGroup");
		return ptr;
	}

};


// Class TdGame.SeqAct_StreamingZone
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_StreamingZone : public USequenceAction
{
public:
	TArray<struct FString>                             Levels;                                                   // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x00E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_StreamingZone");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdActorFactory
// 0x0048 (0x0160 - 0x0118)
class USeqAct_TdActorFactory : public USeqAct_ActorFactoryEx
{
public:
	int                                                DeathCount;                                               // 0x0118(0x0004)
	class AAITeam*                                     Team;                                                     // 0x011C(0x0004)
	class UAIGroup*                                    Group;                                                    // 0x0120(0x0004)
	class ACoverGroup*                                 InitialCoverGroup;                                        // 0x0124(0x0004)
	class UClass*                                      BotTemplate;                                              // 0x0128(0x0004) (Edit)
	unsigned long                                      bSeePlayerOnSpawn : 1;                                    // 0x012C(0x0004) (Edit)
	unsigned long                                      SpawnIntoKismetState : 1;                                 // 0x012C(0x0004) (Edit)
	unsigned long                                      bUseRunnerVision : 1;                                     // 0x012C(0x0004) (Edit)
	unsigned long                                      bChaseAI : 1;                                             // 0x012C(0x0004) (Edit)
	TEnumAsByte<ESide>                                 Side;                                                     // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                MainWeaponAmmoDrop_Easy;                                  // 0x0134(0x0004) (Edit)
	int                                                MainWeaponAmmoDrop_Medium;                                // 0x0138(0x0004) (Edit)
	int                                                MainWeaponAmmoDrop_Hard;                                  // 0x013C(0x0004) (Edit)
	int                                                MainWeaponAmmoDisarm_Easy;                                // 0x0140(0x0004) (Edit)
	int                                                MainWeaponAmmoDisarm_Medium;                              // 0x0144(0x0004) (Edit)
	int                                                MainWeaponAmmoDisarm_Hard;                                // 0x0148(0x0004) (Edit)
	class UTdActorFactoryAI*                           TdFactory;                                                // 0x014C(0x0004)
	int                                                DeferState;                                               // 0x0150(0x0004) (Transient)
	int                                                DeferIndex;                                               // 0x0154(0x0004) (Transient)
	class ATdBotPawn*                                  DeferPawn;                                                // 0x0158(0x0004) (Transient)
	class UAITemplate*                                 DeferTemplate;                                            // 0x015C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdActorFactory");
		return ptr;
	}


	void OnDeath(class ATdBotPawn* Victim);
	void Reset();
	void OnSpawn(class ATdBotPawn* NewBot);
	void EveryoneDied();
};


// Class TdGame.SeqAct_TdAIPlayAnimation
// 0x003D (0x0129 - 0x00EC)
class USeqAct_TdAIPlayAnimation : public USeqAct_Latent
{
public:
	struct FName                                       AnimationName;                                            // 0x00EC(0x0008) (Edit)
	TArray<class UTdAnimSet*>                          AdditionalAnimSets;                                       // 0x00F4(0x000C) (Edit, NeedCtorLink)
	float                                              PlayRate;                                                 // 0x0100(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0104(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0108(0x0004) (Edit)
	unsigned long                                      bUseRootMotion : 1;                                       // 0x010C(0x0004) (Edit)
	unsigned long                                      bUseRootRotation : 1;                                     // 0x010C(0x0004) (Edit)
	unsigned long                                      bLoopAnimation : 1;                                       // 0x010C(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x010C(0x0004) (Edit)
	unsigned long                                      bOverridePosition : 1;                                    // 0x010C(0x0004) (Edit)
	unsigned long                                      bOverrideRotation : 1;                                    // 0x010C(0x0004) (Edit)
	unsigned long                                      bForcePlay : 1;                                           // 0x010C(0x0004) (Edit)
	unsigned long                                      bStartedAnimation : 1;                                    // 0x010C(0x0004) (Transient)
	unsigned long                                      bStoppedAnimation : 1;                                    // 0x010C(0x0004) (Transient)
	unsigned long                                      bScriptActivated : 1;                                     // 0x010C(0x0004) (Deprecated)
	struct FVector                                     PawnLocation;                                             // 0x0110(0x000C) (Edit)
	struct FRotator                                    PawnRotation;                                             // 0x011C(0x000C) (Edit)
	TEnumAsByte<EPlayAnimationEndState>                FinalAnimationState;                                      // 0x0128(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdAIPlayAnimation");
		return ptr;
	}


	void Reset();
};


// Class TdGame.SeqAct_TdBalanceBias
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdBalanceBias : public USequenceAction
{
public:
	float                                              Force;                                                    // 0x00DC(0x0004) (Edit)
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdBalanceBias");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdCameraFOV
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdCameraFOV : public USequenceAction
{
public:
	float                                              NewFOV;                                                   // 0x00DC(0x0004) (Edit)
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdCameraFOV");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdCameraShake
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdCameraShake : public USequenceAction
{
public:
	float                                              Duration;                                                 // 0x00DC(0x0004) (Edit)
	float                                              Amplitude;                                                // 0x00E0(0x0004) (Edit)
	float                                              Frequency;                                                // 0x00E4(0x0004) (Edit)
	float                                              BlendIn;                                                  // 0x00E8(0x0004) (Edit)
	float                                              BlendOut;                                                 // 0x00EC(0x0004) (Edit)
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdCameraShake");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdDisarmRopeburn
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdDisarmRopeburn : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdDisarmRopeburn");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdFadeEffect
// 0x0015 (0x00F1 - 0x00DC)
class USeqAct_TdFadeEffect : public USequenceAction
{
public:
	unsigned long                                      bFadeCompleted : 1;                                       // 0x00DC(0x0004) (Transient)
	unsigned long                                      bFadeSound2 : 1;                                          // 0x00DC(0x0004) (Edit)
	class ATdHUD*                                      TargetDisplay;                                            // 0x00E0(0x0004) (Transient)
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00E4(0x0004) (Transient)
	float                                              FadeTime;                                                 // 0x00E8(0x0004) (Edit)
	struct FColor                                      FadeColor;                                                // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EFadeEffectType>                       FadeEffect;                                               // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdFadeEffect");
		return ptr;
	}


	void ActivateFadeInEffect();
	void ActivateFadeOutEffect();
	void FadeCompleted();
	void Activated();
};


// Class TdGame.SeqAct_TdForceAggressionLevel
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdForceAggressionLevel : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdForceAggressionLevel");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdHairPhysicsControl
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdHairPhysicsControl : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdHairPhysicsControl");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdHelicopterFactory
// 0x0010 (0x0128 - 0x0118)
class USeqAct_TdHelicopterFactory : public USeqAct_ActorFactoryEx
{
public:
	class UTdActorFactoryHelicopter*                   TdHelicopterFactory;                                      // 0x0118(0x0004)
	TArray<class AActor*>                              SpawnedChoppers;                                          // 0x011C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdHelicopterFactory");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdIntoCutscene
// 0x0008 (0x00F4 - 0x00EC)
class USeqAct_TdIntoCutscene : public USeqAct_Latent
{
public:
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00EC(0x0004) (Transient)
	class AActor*                                      DestinationActor;                                         // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdIntoCutscene");
		return ptr;
	}


	bool Update(float DeltaTime);
	void Activated();
	void FinishScriptedMove();
	void AbortScriptedMove();
};


// Class TdGame.SeqAct_TdMuteAI
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdMuteAI : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdMuteAI");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdPhysXGate
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdPhysXGate : public USequenceAction
{
public:
	unsigned long                                      bPhysXNotGate : 1;                                        // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPhysXGate");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdPlayFullscreenMovie
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_TdPlayFullscreenMovie : public USequenceAction
{
public:
	struct FString                                     File;                                                     // 0x00DC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPlayFullscreenMovie");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdPlaySound
// 0x0024 (0x0130 - 0x010C)
class USeqAct_TdPlaySound : public USeqAct_PlaySound
{
public:
	float                                              LowPassMultiplier;                                        // 0x010C(0x0004) (Edit)
	float                                              OcclusionCheckInterval;                                   // 0x0110(0x0004) (Edit)
	float                                              OcclusionVolumeDuckLevel;                                 // 0x0114(0x0004) (Edit)
	float                                              OcclusionFilterDuckLevel;                                 // 0x0118(0x0004) (Edit)
	float                                              OcclusionFadeTime;                                        // 0x011C(0x0004) (Edit)
	unsigned long                                      MuteVoiceOvers : 1;                                       // 0x0120(0x0004) (Edit)
	unsigned long                                      bDebugDraw : 1;                                           // 0x0120(0x0004) (Edit)
	TArray<struct FVector>                             Offset;                                                   // 0x0124(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPlaySound");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdPlaySoundOnRandomAI
// 0x0008 (0x0138 - 0x0130)
class USeqAct_TdPlaySoundOnRandomAI : public USeqAct_TdPlaySound
{
public:
	float                                              MaxDistanceToPlayer;                                      // 0x0130(0x0004) (Edit)
	float                                              MinDistanceToPlayer;                                      // 0x0134(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPlaySoundOnRandomAI");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdScriptedMove
// 0x0020 (0x010C - 0x00EC)
class USeqAct_TdScriptedMove : public USeqAct_Latent
{
public:
	class ATdPlayerPawn*                               PlayerPawn;                                               // 0x00EC(0x0004) (Transient)
	class AActor*                                      DestinationActor;                                         // 0x00F0(0x0004) (Transient)
	struct FVector                                     WorldTranslationOffset;                                   // 0x00F4(0x000C) (Edit)
	struct FRotator                                    WorldRotationOffset;                                      // 0x0100(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdScriptedMove");
		return ptr;
	}


	bool Update(float DeltaTime);
	int DeltaAngle(int AngleOne, int AngleTwo);
	void FinishScriptedMove();
	void AbortScriptedMove();
};


// Class TdGame.SeqAct_TdSetCrowdVelDamping
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdSetCrowdVelDamping : public USequenceAction
{
public:
	float                                              MinDamping;                                               // 0x00DC(0x0004) (Edit)
	float                                              MaxDamping;                                               // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSetCrowdVelDamping");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdSetTdTimeDilation
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdSetTdTimeDilation : public USequenceAction
{
public:
	float                                              DesiredTimeDilation;                                      // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSetTdTimeDilation");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdTeleport
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdTeleport : public USequenceAction
{
public:
	unsigned long                                      bOnlyTeleportZ : 1;                                       // 0x00DC(0x0004)
	unsigned long                                      bDrawDebug : 1;                                           // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTeleport");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdTimer
// 0x0000 (0x00E4 - 0x00E4)
class USeqAct_TdTimer : public USeqAct_Timer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTimer");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdTriggerSubtitle
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdTriggerSubtitle : public USequenceAction
{
public:
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x00DC(0x000C) (Edit, NeedCtorLink)
	float                                              Priority;                                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      bManualWordWrap : 1;                                      // 0x00EC(0x0004) (Edit)
	float                                              Duration;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTriggerSubtitle");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdTutorialCompleted
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdTutorialCompleted : public USequenceAction
{
public:
	unsigned long                                      bFinished : 1;                                            // 0x00DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTutorialCompleted");
		return ptr;
	}


	void OnStayInTutorial(bool bStayInTutorial);
	void Activated();
};


// Class TdGame.SeqAct_TdTutorialMessage
// 0x002C (0x0108 - 0x00DC)
class USeqAct_TdTutorialMessage : public USequenceAction
{
public:
	struct FString                                     TutorialMessage;                                          // 0x00DC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bReplaceCurrentMessage : 1;                               // 0x00E8(0x0004) (Edit)
	unsigned long                                      bRequireAccept : 1;                                       // 0x00E8(0x0004) (Edit)
	unsigned long                                      bPauseGame : 1;                                           // 0x00E8(0x0004) (Edit)
	unsigned long                                      bTriggerSlomo : 1;                                        // 0x00E8(0x0004) (Edit)
	unsigned long                                      bCustomButtonFallThrough : 1;                             // 0x00E8(0x0004) (Edit)
	unsigned long                                      bFinished : 1;                                            // 0x00E8(0x0004) (Transient)
	float                                              Duration;                                                 // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EDigitalButtonActions>                 CustomButtonKey;                                          // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	struct FString                                     CustomButtonCallOut;                                      // 0x00F4(0x000C) (Edit, NeedCtorLink)
	class UTdUIScene_TutorialHUDMessage*               Scene;                                                    // 0x0100(0x0004) (Transient)
	class UTdGameUISceneClient*                        SceneClient;                                              // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTutorialMessage");
		return ptr;
	}


	bool IsValidLevelSequenceObject();
	void OnSceneDeactivated(class UUIScene* DeactivatedScene);
	void OnTutorialMessageOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowTutorialMessage();
	void OnPrevScene_Deactivated(class UUIScene* ClosedScene);
	void BeginShowTutorialMessage();
	void Activated();
	void Reset();
	class ULocalPlayer* GetFirstLocalPlayer();
};


// Class TdGame.SeqCond_TdCaseLanguage
// 0x0000 (0x00C4 - 0x00C4)
class USeqCond_TdCaseLanguage : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqCond_TdCaseLanguage");
		return ptr;
	}

};


// Class TdGame.SeqEvent_TdTouch
// 0x0004 (0x0120 - 0x011C)
class USeqEvent_TdTouch : public USeqEvent_Touch
{
public:
	float                                              Momentum;                                                 // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvent_TdTouch");
		return ptr;
	}


	bool ShouldActivate(class AActor* InOriginator, class AActor* InInstigator);
};


// Class TdGame.SeqEvent_TdUsed
// 0x0008 (0x0114 - 0x010C)
class USeqEvent_TdUsed : public USeqEvent_Used
{
public:
	unsigned long                                      bInteract : 1;                                            // 0x010C(0x0004) (Transient)
	class ATdValveSkeletalMeshActor*                   InteractSkelMeshRef;                                      // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvent_TdUsed");
		return ptr;
	}


	void Reset();
};


// Class TdGame.SeqVar_AIGroup
// 0x0010 (0x00AC - 0x009C)
class USeqVar_AIGroup : public USeqVar_Object
{
public:
	struct FString                                     GroupName;                                                // 0x009C(0x000C) (Edit, NeedCtorLink)
	class UAIGroup*                                    TheGroup;                                                 // 0x00A8(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqVar_AIGroup");
		return ptr;
	}

};


// Class TdGame.SeqVar_AITeam
// 0x0011 (0x00AD - 0x009C)
class USeqVar_AITeam : public USeqVar_Object
{
public:
	struct FString                                     TeamName;                                                 // 0x009C(0x000C) (Edit, NeedCtorLink, EditInline)
	class AAITeam*                                     Team;                                                     // 0x00A8(0x0004) (Transient)
	TEnumAsByte<ESide>                                 Side;                                                     // 0x00AC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqVar_AITeam");
		return ptr;
	}

};


// Class TdGame.SeqVar_AITemplate
// 0x0004 (0x00A0 - 0x009C)
class USeqVar_AITemplate : public USeqVar_Object
{
public:
	class UClass*                                      Template;                                                 // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqVar_AITemplate");
		return ptr;
	}

};


// Class TdGame.SeqVar_TdLocalPawn
// 0x0000 (0x009C - 0x009C)
class USeqVar_TdLocalPawn : public USeqVar_Object
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqVar_TdLocalPawn");
		return ptr;
	}


	class UObject* GetObjectValue();
};


// Class TdGame.TdAttackPathNode
// 0x000C (0x0344 - 0x0338)
class ATdAttackPathNode : public ATdConfinedVolumePathNode
{
public:
	float                                              AttackVolumeHeight;                                       // 0x0338(0x0004) (Edit)
	float                                              AttackVolumeAngle;                                        // 0x033C(0x0004) (Edit)
	float                                              AttackVolumeRadius;                                       // 0x0340(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAttackPathNode");
		return ptr;
	}


	bool PointInside(const struct FVector& Point);
};


// Class TdGame.TdCrowdReachSpec
// 0x0000 (0x0098 - 0x0098)
class UTdCrowdReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCrowdReachSpec");
		return ptr;
	}

};


// Class TdGame.TdReachSpec
// 0x0034 (0x00CC - 0x0098)
class UTdReachSpec : public UReachSpec
{
public:
	float                                              ExposureWeight;                                           // 0x0098(0x0004) (Config)
	float                                              CanSeeWeight;                                             // 0x009C(0x0004) (Config)
	float                                              ExposureDistanceLimit;                                    // 0x00A0(0x0004) (Config)
	unsigned long                                      bSquaredExposureDistance : 1;                             // 0x00A4(0x0004) (Config)
	unsigned long                                      bIsSkippable : 1;                                         // 0x00A4(0x0004) (Edit)
	float                                              UsageCost;                                                // 0x00A8(0x0004) (Config)
	int                                                WalkToNodeCost;                                           // 0x00AC(0x0004) (Config)
	int                                                CostFor90DegTurn;                                         // 0x00B0(0x0004) (Config)
	int                                                CostForHeightDiff;                                        // 0x00B4(0x0004) (Config)
	int                                                CostForJumpSpecs;                                         // 0x00B8(0x0004) (Config)
	int                                                CostForDirectionSwitch;                                   // 0x00BC(0x0004) (Config)
	int                                                FlagsHack;                                                // 0x00C0(0x0004) (Edit)
	float                                              DropOffDistance;                                          // 0x00C4(0x0004) (Edit, EditConst)
	float                                              NeededSpeed;                                              // 0x00C8(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec");
		return ptr;
	}


	int AdjustedCostFor(class APawn* P, class ANavigationPoint* Anchor, class ANavigationPoint* Goal, int Cost);
	int GetDefaultCostFor(class ATdBotPawn* P);
	int GetCostFor(class APawn* P);
};


// Class TdGame.TdForcedReachSpec
// 0x0000 (0x00CC - 0x00CC)
class UTdForcedReachSpec : public UTdReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdForcedReachSpec");
		return ptr;
	}

};


// Class TdGame.TdJumpNode
// 0x0010 (0x0334 - 0x0324)
class ATdJumpNode : public ATdMoveNode
{
public:
	float                                              ForcedSpeed;                                              // 0x0324(0x0004) (Edit)
	unsigned long                                      bFallOff : 1;                                             // 0x0328(0x0004)
	float                                              MaxShortJump;                                             // 0x032C(0x0004)
	float                                              MaxMediumJump;                                            // 0x0330(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdJumpNode");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_GrabHeave
// 0x0014 (0x0338 - 0x0324)
class ATdMoveNode_GrabHeave : public ATdMoveNode
{
public:
	float                                              WallDistance;                                             // 0x0324(0x0004)
	float                                              MinWallHeight;                                            // 0x0328(0x0004)
	float                                              MaxWallHeight;                                            // 0x032C(0x0004)
	unsigned long                                      bDoAutoWallAdjustment : 1;                                // 0x0330(0x0004) (Edit)
	class USpriteComponent*                            MoveIcon;                                                 // 0x0334(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_GrabHeave");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_JumpIntoGrab
// 0x0008 (0x032C - 0x0324)
class ATdMoveNode_JumpIntoGrab : public ATdMoveNode
{
public:
	unsigned long                                      bForceSpeed : 1;                                          // 0x0324(0x0004) (Edit)
	float                                              InitialSpeed;                                             // 0x0328(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_JumpIntoGrab");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_Slide
// 0x0000 (0x0324 - 0x0324)
class ATdMoveNode_Slide : public ATdMoveNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_Slide");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_Vault
// 0x0034 (0x0358 - 0x0324)
class ATdMoveNode_Vault : public ATdMoveNode
{
public:
	float                                              ForcedSpeed;                                              // 0x0324(0x0004) (Edit)
	float                                              VaultOverWallDistance_LowVault;                           // 0x0328(0x0004)
	float                                              VaultOntoWallDistance_LowVault;                           // 0x032C(0x0004)
	float                                              VaultOverWallDistance_HighVault;                          // 0x0330(0x0004)
	float                                              VaultOntoWallDistance_HighVault;                          // 0x0334(0x0004)
	float                                              MinWallHeight_LowVault;                                   // 0x0338(0x0004)
	float                                              MaxWallHeight_LowVault;                                   // 0x033C(0x0004)
	float                                              MinWallHeight_HighVault;                                  // 0x0340(0x0004)
	float                                              MaxWallHeight_HighVault;                                  // 0x0344(0x0004)
	class USpriteComponent*                            VaultOntoIcon;                                            // 0x0348(0x0004) (Const, ExportObject, Component, EditInline)
	class USpriteComponent*                            VaultOverIcon;                                            // 0x034C(0x0004) (Const, ExportObject, Component, EditInline)
	int                                                iHighVaultCost;                                           // 0x0350(0x0004) (Config)
	int                                                iVaultOntoCost;                                           // 0x0354(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_Vault");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_WallRun
// 0x0028 (0x034C - 0x0324)
class ATdMoveNode_WallRun : public ATdMoveNode
{
public:
	struct FVector                                     StartLocation;                                            // 0x0324(0x000C)
	struct FVector                                     EndLocation;                                              // 0x0330(0x000C)
	float                                              ForcedSpeed;                                              // 0x033C(0x0004)
	float                                              WallDistance;                                             // 0x0340(0x0004)
	float                                              MinWallHeight;                                            // 0x0344(0x0004)
	float                                              MaxWallHeight;                                            // 0x0348(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_WallRun");
		return ptr;
	}

};


// Class TdGame.TdMoveReachSpec
// 0x0004 (0x00D0 - 0x00CC)
class UTdMoveReachSpec : public UTdReachSpec
{
public:
	unsigned long                                      NetworkLinker : 1;                                        // 0x00CC(0x0004) (Edit)
	unsigned long                                      MustJump : 1;                                             // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveReachSpec");
		return ptr;
	}


	int GetDefaultCostFor(class ATdBotPawn* P);
};


// Class TdGame.TdReachSpec_GrabHeave
// 0x0024 (0x00F4 - 0x00D0)
class UTdReachSpec_GrabHeave : public UTdMoveReachSpec
{
public:
	struct FVector                                     HandPlantLocation;                                        // 0x00D0(0x000C)
	struct FVector                                     StartLocation;                                            // 0x00DC(0x000C)
	struct FVector                                     EndLocation;                                              // 0x00E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_GrabHeave");
		return ptr;
	}

};


// Class TdGame.TdReachSpec_Jump
// 0x0010 (0x00E0 - 0x00D0)
class UTdReachSpec_Jump : public UTdMoveReachSpec
{
public:
	float                                              LandingHeightDifference;                                  // 0x00D0(0x0004) (Edit)
	float                                              SoftLandingHeight;                                        // 0x00D4(0x0004)
	float                                              HardLandingHeight;                                        // 0x00D8(0x0004)
	float                                              SlowHardLandingHeight;                                    // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_Jump");
		return ptr;
	}

};


// Class TdGame.TdReachSpec_JumpIntoGrab
// 0x0018 (0x00E8 - 0x00D0)
class UTdReachSpec_JumpIntoGrab : public UTdMoveReachSpec
{
public:
	struct FVector                                     StartLocation;                                            // 0x00D0(0x000C)
	struct FVector                                     EndLocation;                                              // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_JumpIntoGrab");
		return ptr;
	}

};


// Class TdGame.TdReachSpec_Slide
// 0x0000 (0x00D0 - 0x00D0)
class UTdReachSpec_Slide : public UTdMoveReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_Slide");
		return ptr;
	}

};


// Class TdGame.TdReachSpec_Vault
// 0x001C (0x00EC - 0x00D0)
class UTdReachSpec_Vault : public UTdMoveReachSpec
{
public:
	unsigned long                                      bVaultOnto : 1;                                           // 0x00D0(0x0004) (Edit)
	unsigned long                                      bHighVault : 1;                                           // 0x00D0(0x0004) (Edit)
	struct FVector                                     HandPlantLocation;                                        // 0x00D4(0x000C) (Edit)
	struct FVector                                     LandingLocation;                                          // 0x00E0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_Vault");
		return ptr;
	}


	int GetDefaultCostFor(class ATdBotPawn* P);
};


// Class TdGame.TdReachSpec_Wallrun
// 0x0000 (0x00D0 - 0x00D0)
class UTdReachSpec_Wallrun : public UTdMoveReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReachSpec_Wallrun");
		return ptr;
	}

};


// Class TdGame.TdScout
// 0x0004 (0x03F0 - 0x03EC)
class ATdScout : public AScout
{
public:
	class UClass*                                      PrototypePawnClass;                                       // 0x03EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdScout");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdSetMinimap
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdSetMinimap : public USequenceAction
{
public:
	struct FString                                     minimapWidgetName;                                        // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMinimapMap>                         maps;                                                     // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSetMinimap");
		return ptr;
	}

};


// Class TdGame.TdGameUISceneClient
// 0x0068 (0x01F0 - 0x0188)
class UTdGameUISceneClient : public UGameUISceneClient
{
public:
	int                                                LastViewportX;                                            // 0x0188(0x0004)
	struct FName                                       ResourceDataStoreName;                                    // 0x018C(0x0008) (Const)
	unsigned long                                      bShowRenderTimes : 1;                                     // 0x0194(0x0004) (Edit)
	float                                              PreRenderTime;                                            // 0x0198(0x0004)
	float                                              RenderTime;                                               // 0x019C(0x0004)
	float                                              TickTime;                                                 // 0x01A0(0x0004)
	float                                              AvgTime;                                                  // 0x01A4(0x0004)
	float                                              AvgRenderTime;                                            // 0x01A8(0x0004)
	float                                              FrameCount;                                               // 0x01AC(0x0004)
	float                                              StringRenderTime;                                         // 0x01B0(0x0004)
	struct FString                                     LoadingSceneText;                                         // 0x01B4(0x000C) (NeedCtorLink)
	struct FColor                                      SceneFadeColor;                                           // 0x01C0(0x0004)
	class UUIScene*                                    DiskAccessScene;                                          // 0x01C4(0x0004) (Transient)
	int                                                BGSatMask;                                                // 0x01C8(0x0004) (Transient)
	struct FScriptDelegate                             StoredMsgBoxInit;                                         // 0x01CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LoadingSceneOpened__Delegate;                           // 0x01D8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LoadingSceneFullyOpened__Delegate;                      // 0x01E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameUISceneClient");
		return ptr;
	}


	void ForceStopMovie();
	bool CloseDiskAccessScene();
	bool OpenDiskAccessScene(class UUIScene* Scene, class UUIScene** OpenedScene);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void NotifyGameSessionEnded();
	class UUIDataStore_TdGameData* GetGameDataStore();
	class UUIDataStore* FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner);
	void LoadingScene_FullyOpened(class UUIScene* OpenedScene);
	void LoadingScene_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void OpenLoadingScene(const struct FString& Text, class ULocalPlayer* Player, const struct FScriptDelegate& SceneOpened, const struct FScriptDelegate& SceneFullyOpened);
	void OnMsgBoxInit(class UUIScene* ActivatedScene, bool bInitialActivation);
	void OpenImageMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenTinyMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	class UUIScene* InstantOpenScene(class UUIScene* SceneToOpen, class ULocalPlayer* Player, const struct FScriptDelegate& SceneDelegate, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenSceneEx(class UUIScene* SceneToOpen, class ULocalPlayer* Player, TEnumAsByte<ESceneTransitionAnim> SceneAnim, const struct FScriptDelegate& SceneDelegate);
	bool IsTransitioning();
	void ActivateBGSaturation(bool bActive, int Mask);
	void LoadingSceneFullyOpened(class UUIScene* OpenedScene);
	void LoadingSceneOpened(class UUIScene* OpenedScene, bool bInitialActivation);
};


// Class TdGame.TdGameViewportClient
// 0x0014 (0x0114 - 0x0100)
class UTdGameViewportClient : public UGameViewportClient
{
public:
	class UTdUIInteraction*                            ViewportUI;                                               // 0x0100(0x0004)
	class UTexture2D*                                  TransitionImage;                                          // 0x0104(0x0004)
	class UMaterialEffect*                             FadeInEffect;                                             // 0x0108(0x0004)
	class UMaterialInstanceConstant*                   FadeInEffectMaterialInstance;                             // 0x010C(0x0004) (Transient)
	class UTdDebugMenu*                                DebugMenu;                                                // 0x0110(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameViewportClient");
		return ptr;
	}


	bool GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos);
	void DrawLoading(class UCanvas* Canvas);
	void PostRender(class UCanvas* Canvas);
	void DrawTransition(class UCanvas* Canvas);
	struct FString GetHintMessage(int GameType);
	bool Init(struct FString* OutError);
};


// Class TdGame.TdHUD
// 0x00A4 (0x04E8 - 0x0444)
class ATdHUD : public AHUD
{
public:
	unsigned long                                      bDisplayConsoleMessages : 1;                              // 0x0444(0x0004)
	unsigned long                                      bDisplayGameMessages : 1;                                 // 0x0444(0x0004)
	unsigned long                                      bCrosshairOnEnemy : 1;                                    // 0x0444(0x0004)
	unsigned long                                      bAnimatedFocusDistance : 1;                               // 0x0444(0x0004) (Transient)
	unsigned long                                      bIsFadingIn : 1;                                          // 0x0444(0x0004) (Transient)
	unsigned long                                      bUseRealTimeFade : 1;                                     // 0x0444(0x0004) (Transient)
	class UFont*                                       TinyFont;                                                 // 0x0448(0x0004) (Const)
	class UFont*                                       SmallFont;                                                // 0x044C(0x0004) (Const)
	class UFont*                                       MediumFont;                                               // 0x0450(0x0004) (Const)
	class UFont*                                       LargeFont;                                                // 0x0454(0x0004) (Const)
	struct FString                                     AnnouncerClassName;                                       // 0x0458(0x000C) (NeedCtorLink)
	struct FString                                     HUDContentClassName;                                      // 0x0464(0x000C) (NeedCtorLink)
	class UClass*                                      HUDContentClass;                                          // 0x0470(0x0004)
	float                                              TargetingMaxDistance;                                     // 0x0474(0x0004)
	struct FVector                                     TargetingHitLocation;                                     // 0x0478(0x000C)
	float                                              TargetingHitDistance;                                     // 0x0484(0x0004)
	class AActor*                                      TargetingActor;                                           // 0x0488(0x0004)
	class UUIScene*                                    PauseSceneRef;                                            // 0x048C(0x0004) (Transient)
	class UUIScene*                                    InGameMenuRef;                                            // 0x0490(0x0004) (Transient)
	class UUIScene*                                    DiskAccessIndicatorScene;                                 // 0x0494(0x0004) (Transient)
	class UUIScene*                                    DiskAccessIndicatorInstance;                              // 0x0498(0x0004) (Transient)
	float                                              FontDSOffset;                                             // 0x049C(0x0004) (Config)
	struct FColor                                      FontDSColor;                                              // 0x04A0(0x0004) (Config)
	class UTdHudEffectManager*                         EffectManager;                                            // 0x04A4(0x0004) (Edit, EditInline)
	class UMaterialEffect*                             FadeEffect;                                               // 0x04A8(0x0004)
	class UMaterialInstanceConstant*                   FadeEffectMaterialInstance;                               // 0x04AC(0x0004) (Transient)
	float                                              FadeInTime;                                               // 0x04B0(0x0004) (Transient)
	float                                              FadeOutTime;                                              // 0x04B4(0x0004) (Transient)
	float                                              FadeAmount;                                               // 0x04B8(0x0004) (Transient)
	float                                              LatentFadeIn;                                             // 0x04BC(0x0004) (Transient)
	float                                              LastRealTimeHUDRenderTime;                                // 0x04C0(0x0004) (Transient)
	float                                              RealTimeRenderDelta;                                      // 0x04C4(0x0004) (Transient)
	class UTdHUDDebug*                                 DebugHUD;                                                 // 0x04C8(0x0004)
	int                                                PendingPauseTicks;                                        // 0x04CC(0x0004) (Transient)
	struct FScriptDelegate                             __OnMaxFade__Delegate;                                    // 0x04D0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDoneFade__Delegate;                                   // 0x04DC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUD");
		return ptr;
	}


	void NotifyDiskAccess(bool IsAccessing, TEnumAsByte<ETsDiskAccess> AccessType);
	void PostRender();
	class UFont* STATIC_GetFontSizeIndex(int FontSize);
	void ProjectOntoScreen(const struct FVector& WorldLocation, const struct FVector& WorldOffset, const struct FVector2D& ClipXBounds, const struct FVector2D& ClipYBounds, struct FVector* ScreenLocation);
	void DrawPausedHUD();
	void DrawWarmupHUD();
	void DrawLivingHUD();
	void DrawDeadHUD();
	void DrawHUD();
	struct FString GetFormattedTime(int Time);
	struct FString GetTimeString(float Seconds);
	void DrawTextWithOutLine(float XPos, float YPos, float OffsetX, float OffsetY, const struct FString& TextToDraw, const struct FColor& TextColor);
	void GetScreenCoordsEx(float PosX, float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage);
	void DrawMessage(int MessageIdx, float PosY, float* DX, float* DY);
	void ClearLocalMessages();
	void ComputeHUDPosition(float PosX, float PosY, float Width, float Height, struct FVector2D* FinalPos);
	void ToggleToneMapping();
	void SetFocusDistance(float NewDistance);
	void CloseSceneByName(const struct FName& SceneToClose);
	void OpenSceneByName(const struct FName& SceneToShow);
	void Reset();
	void PlayerOwnerRestart();
	void PlayerOwnerDied();
	void EndLaserEffect();
	void PlayTakeHit(const struct FVector& HitDir, int Damage, class UClass* DamageType);
	bool IsInMainMenu();
	void OpenInGameMenu();
	void DelayedPauseGame();
	void UnPauseGame(class UUIScene* DeactivatedScene);
	void OnPauseSceneOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void PauseGame();
	void ToggleZoomState(bool bZoom);
	void TriggerCustomFadeOut(float Time, bool bRealTime, const struct FScriptDelegate& InOnDone);
	void TriggerCustomFadeIn(float Time, bool bRealTime, const struct FScriptDelegate& InOnDone, bool bForceFullFadeAmount);
	void TriggerCustomColorFadeOut(float Time, const struct FLinearColor& FadeColor, bool bRealTime, const struct FScriptDelegate& InOnDone);
	void TriggerCustomColorFadeIn(float Time, const struct FLinearColor& FadeColor, bool bRealTime, const struct FScriptDelegate& InOnDone, bool bForceFullFadeAmount);
	void TriggerCustomBlink(float InFadeOutTime, float InFadeInTime, bool bRealTime, const struct FScriptDelegate& InOnMaxFade);
	void TriggerCustomColorBlink(float InFadeOutTime, float InFadeInTime, float R, float G, float B, bool bRealTime, const struct FScriptDelegate& InOnMaxFade);
	void TriggerUIBlurOut(float BlurOutTime);
	void TriggerUIBlurIn(float BlurInTime);
	void LoadHUDContent(class UClass* ContentClass);
	void Destroyed();
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void LinkHUDContent();
	void PreBeginPlay();
	void ToggleReactionTime(bool toggle);
	void LinkToHudScene(class UUIScene* SceneToLink);
	void SetPostProcessVars(float DeltaTime, float RealTimeDelta);
	void OnDoneFade();
	void OnMaxFade();
};


// Class TdGame.TdHUDDebug
// 0x0054 (0x0090 - 0x003C)
class UTdHUDDebug : public UObject
{
public:
	struct FPointer                                    VfTable_FSelfRegisteringExec;                             // 0x003C(0x0004) (Const, Native, NoExport)
	unsigned long                                      bShowInvisibleMode : 1;                                   // 0x0040(0x0004) (Config)
	unsigned long                                      bShowGodMode : 1;                                         // 0x0040(0x0004) (Config)
	unsigned long                                      bDebugAnimTimeline : 1;                                   // 0x0040(0x0004) (Edit)
	unsigned long                                      bDebugAnimWeights : 1;                                    // 0x0040(0x0004) (Edit)
	unsigned long                                      bDebugSkeletalMeshInfo : 1;                               // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawGraph : 1;                                           // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawMemoryBudget : 1;                                    // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawLookAtPoints : 1;                                    // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawAIStates : 1;                                        // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawSafeRegion : 1;                                      // 0x0040(0x0004) (Edit)
	unsigned long                                      bDrawDebugAnims : 1;                                      // 0x0040(0x0004) (Edit)
	unsigned long                                      bFixedSlomo : 1;                                          // 0x0040(0x0004) (Edit)
	unsigned long                                      bDebugSceneStack : 1;                                     // 0x0040(0x0004) (Edit)
	unsigned long                                      bShowCheckpoints : 1;                                     // 0x0040(0x0004) (Edit)
	unsigned long                                      bShowCheckpointsPath : 1;                                 // 0x0040(0x0004) (Edit)
	float                                              TimedMessageTimestamp;                                    // 0x0044(0x0004)
	float                                              TimedMessageTime;                                         // 0x0048(0x0004)
	struct FString                                     TimedMessage;                                             // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     DebugKismetOutput;                                        // 0x0058(0x000C) (Edit, NeedCtorLink)
	class ATdPawn*                                     ActiveActor;                                              // 0x0064(0x0004) (Edit)
	int                                                BufferSize;                                               // 0x0068(0x0004)
	TArray<struct FString>                             ScreenBuffer;                                             // 0x006C(0x000C) (NeedCtorLink)
	struct FName                                       AnimationStartingPoint;                                   // 0x0078(0x0008)
	class UTdCheatManager*                             CheatManager;                                             // 0x0080(0x0004) (Transient)
	TArray<class ATdCheckpoint*>                       Checkpoints;                                              // 0x0084(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDDebug");
		return ptr;
	}


	void DebugCheckpointsPath();
	void PopulateCheckpointList();
	void DebugCheckpointsOrder();
	void DebugCheckpoints();
	void PPToggle(int Index);
	void DumpMemoryAllocations();
	void ShowMemoryBudget();
	void ShowPathInfo(int Index);
	void DrawVisibilityValues();
	void DrawPath(class APawn* Target, float Time);
	void ShowAIStates();
	void ShowGraph();
	void PlayAnimation(const struct FName& AnimationName, TEnumAsByte<ECustomNodeType> AnimationType, bool RootMotion, bool RootRotation, float BlendTime, int Index);
	void FlushAnimWeightBoxes();
	void FlushAnimTimeLine();
	void FixedSlomo(float Speed);
	void DebugAnims();
	void ShowSkeletalMeshInfo();
	void DebugNetAnim();
	void SetShowDebug(bool flag, const struct FName& DebugType);
	void ShowAnimTimeLine();
	void SetShowAnimTimeLine(bool flag);
	void ShowAnims(const struct FName& StartingPoint);
	void SetAiTutorialPawnActive();
	void CycleActiveActor();
	void SetActiveActor(int Index);
	void ShowLookAtPoints();
	void TimedScreenMessage(const struct FString& Message, float Time);
	void DrawDebugHUD();
};


// Class TdGame.TdHudEffect
// 0x005C (0x0098 - 0x003C)
class UTdHudEffect : public UObject
{
public:
	struct FBlurSettings                               Blur;                                                     // 0x003C(0x0014) (Edit, Config)
	struct FPPSettings                                 PPStrength;                                               // 0x0050(0x0014) (Edit, Config)
	class UParticleSystem*                             Particles;                                                // 0x0064(0x0004)
	struct FVector                                     ParticleOrigin;                                           // 0x0068(0x000C) (Config)
	unsigned long                                      bIsActive : 1;                                            // 0x0074(0x0004) (Transient)
	unsigned long                                      bEnablePPEffect : 1;                                      // 0x0074(0x0004) (Edit)
	unsigned long                                      bDebugEffect : 1;                                         // 0x0074(0x0004) (Edit, Config)
	float                                              PPFadeInTimer;                                            // 0x0078(0x0004) (Transient)
	float                                              PPFadeInStart;                                            // 0x007C(0x0004) (Transient)
	float                                              PPPeakDurationTimer;                                      // 0x0080(0x0004) (Transient)
	float                                              PPFadeOutTimer;                                           // 0x0084(0x0004) (Transient)
	float                                              PPTargetStrength;                                         // 0x0088(0x0004) (Transient)
	float                                              PPCurrentStrength;                                        // 0x008C(0x0004) (Transient)
	class UMaterialEffect*                             Effect;                                                   // 0x0090(0x0004)
	class UMaterialInstanceConstant*                   MaterialInstance;                                         // 0x0094(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect");
		return ptr;
	}


	void ResetPP();
	void InitializePP(class UPostProcessEffect* PPE);
};


// Class TdGame.TdHudEffect_Bullet
// 0x0000 (0x0098 - 0x0098)
class UTdHudEffect_Bullet : public UTdHudEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_Bullet");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_Taser
// 0x002C (0x00C4 - 0x0098)
class UTdHudEffect_Taser : public UTdHudEffect
{
public:
	struct FPPSettings                                 PPInstantShock;                                           // 0x0098(0x0014) (Config)
	float                                              PPIFadeInTimer;                                           // 0x00AC(0x0004) (Transient)
	float                                              PPIFadeInStart;                                           // 0x00B0(0x0004) (Transient)
	float                                              PPIPeakDurationTimer;                                     // 0x00B4(0x0004) (Transient)
	float                                              PPIFadeOutTimer;                                          // 0x00B8(0x0004) (Transient)
	float                                              PPITargetStrength;                                        // 0x00BC(0x0004) (Transient)
	float                                              PPICurrentStrength;                                       // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_Taser");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_ElectricShock
// 0x0000 (0x00C4 - 0x00C4)
class UTdHudEffect_ElectricShock : public UTdHudEffect_Taser
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_ElectricShock");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_ExplosionDamage
// 0x0000 (0x0098 - 0x0098)
class UTdHudEffect_ExplosionDamage : public UTdHudEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_ExplosionDamage");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_FallDamage
// 0x003C (0x00D4 - 0x0098)
class UTdHudEffect_FallDamage : public UTdHudEffect
{
public:
	struct FPPSettings                                 PPDistortion;                                             // 0x0098(0x0014) (Config)
	float                                              DurationWhenDying;                                        // 0x00AC(0x0004) (Config)
	float                                              FadeInWhenDying;                                          // 0x00B0(0x0004) (Config)
	float                                              PPDFadeInTimer;                                           // 0x00B4(0x0004) (Transient)
	float                                              PPDFadeInStart;                                           // 0x00B8(0x0004) (Transient)
	float                                              PPDPeakDurationTimer;                                     // 0x00BC(0x0004) (Transient)
	float                                              PPDFadeOutTimer;                                          // 0x00C0(0x0004) (Transient)
	float                                              PPDTargetStrength;                                        // 0x00C4(0x0004) (Transient)
	float                                              PPDCurrentStrength;                                       // 0x00C8(0x0004) (Transient)
	struct FName                                       DirectionName;                                            // 0x00CC(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_FallDamage");
		return ptr;
	}


	void ResetPP();
};


// Class TdGame.TdHudEffect_Flashbang
// 0x0044 (0x00DC - 0x0098)
class UTdHudEffect_Flashbang : public UTdHudEffect
{
public:
	float                                              PPFadeInTimerHeavy;                                       // 0x0098(0x0004) (Transient)
	float                                              PPFadeInStartHeavy;                                       // 0x009C(0x0004) (Transient)
	float                                              PPPeakDurationTimerHeavy;                                 // 0x00A0(0x0004) (Transient)
	float                                              PPFadeOutTimerHeavy;                                      // 0x00A4(0x0004) (Transient)
	float                                              PPTargetStrengthHeavy;                                    // 0x00A8(0x0004) (Transient)
	float                                              PPCurrentStrengthHeavy;                                   // 0x00AC(0x0004) (Transient)
	TEnumAsByte<EFlash_Type>                           Type;                                                     // 0x00B0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	struct FBlurSettings                               BlurHeavy;                                                // 0x00B4(0x0014) (Edit, Config, EditInline)
	struct FPPSettings                                 PPStrengthHeavy;                                          // 0x00C8(0x0014) (Edit, Config, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_Flashbang");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_Melee
// 0x0008 (0x00A0 - 0x0098)
class UTdHudEffect_Melee : public UTdHudEffect
{
public:
	struct FName                                       DirectionName;                                            // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_Melee");
		return ptr;
	}

};


// Class TdGame.TdHudEffect_ReactionTime
// 0x0044 (0x00DC - 0x0098)
class UTdHudEffect_ReactionTime : public UTdHudEffect
{
public:
	float                                              UsedTargetingDistance;                                    // 0x0098(0x0004) (Transient)
	float                                              NormalizedTargetingDistance;                              // 0x009C(0x0004) (Transient)
	float                                              TargetingDistanceFilter;                                  // 0x00A0(0x0004) (Config)
	float                                              DOFMaxNearBlurAmount;                                     // 0x00A4(0x0004) (Config)
	float                                              DOFMaxFarBlurAmount;                                      // 0x00A8(0x0004) (Config)
	float                                              PPFadeInTimerCharged;                                     // 0x00AC(0x0004) (Transient)
	float                                              PPPeakDurationTimerCharged;                               // 0x00B0(0x0004) (Transient)
	float                                              PPFadeOutTimerCharged;                                    // 0x00B4(0x0004) (Transient)
	float                                              PPTargetStrengthCharged;                                  // 0x00B8(0x0004) (Transient)
	float                                              PPCurrentStrengthCharged;                                 // 0x00BC(0x0004) (Transient)
	struct FPPSettings                                 PPStrengthCharged;                                        // 0x00C0(0x0014) (Edit, Config, EditInline)
	float                                              MaxNearBlurAmountBackUp;                                  // 0x00D4(0x0004) (Transient)
	float                                              MaxFarBlurAmountBackUp;                                   // 0x00D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_ReactionTime");
		return ptr;
	}


	void Hide();
	void ActivateCharged();
};


// Class TdGame.TdHudEffect_Saturation
// 0x0000 (0x0098 - 0x0098)
class UTdHudEffect_Saturation : public UTdHudEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffect_Saturation");
		return ptr;
	}


	void SpecialDeActivatePP();
	void SpecialActivatePP();
};


// Class TdGame.TdHudEffectManager
// 0x01DC (0x0218 - 0x003C)
class UTdHudEffectManager : public UObject
{
public:
	class ATdHUD*                                      TheHUD;                                                   // 0x003C(0x0004)
	float                                              SpazzElapse;                                              // 0x0040(0x0004) (Transient)
	float                                              SpazzThrottle;                                            // 0x0044(0x0004) (Config)
	struct FVector                                     SunLocation;                                              // 0x0048(0x000C)
	float                                              LastSunScale;                                             // 0x0054(0x0004)
	float                                              NextSunScale;                                             // 0x0058(0x0004)
	float                                              LastSunScaleTime;                                         // 0x005C(0x0004)
	float                                              SunScaleTime;                                             // 0x0060(0x0004)
	class UTdDirectionalHazePostProcess*               SunHazePP;                                                // 0x0064(0x0004)
	float                                              AverageFocusDistance;                                     // 0x0068(0x0004)
	class UDOFAndBloomEffect*                          DOFAndBloomPP;                                            // 0x006C(0x0004)
	class UTdToneMappingPostProcess*                   ToneMappingPP;                                            // 0x0070(0x0004)
	class UTdMotionBlurPostProcess*                    MotionBlur;                                               // 0x0074(0x0004)
	unsigned long                                      bEnableHitEffect : 1;                                     // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableHitEffectPP : 1;                                   // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableHitEffectBlur : 1;                                 // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableHitEffectCameraShake : 1;                          // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableHitEffectParticles : 1;                            // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableFallDamageEffect : 1;                              // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableSaturationEffect : 1;                              // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableReactionTimeEffect : 1;                            // 0x0078(0x0004) (Config)
	unsigned long                                      bReactionTimeActivated : 1;                               // 0x0078(0x0004) (Transient)
	unsigned long                                      bEnableHealthEffect : 1;                                  // 0x0078(0x0004) (Config)
	unsigned long                                      bFadeInDeathEffect : 1;                                   // 0x0078(0x0004)
	unsigned long                                      bEnableDeathEffect : 1;                                   // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableStreakEffect : 1;                                  // 0x0078(0x0004) (Config)
	unsigned long                                      bEnableUncontrolledFallingEffect : 1;                     // 0x0078(0x0004) (Config)
	unsigned long                                      bForceUncontrolledFall : 1;                               // 0x0078(0x0004) (Transient)
	unsigned long                                      bEnableUIPostProcessing : 1;                              // 0x0078(0x0004) (Config)
	unsigned long                                      UIBlurDemo : 1;                                           // 0x0078(0x0004) (Transient)
	unsigned long                                      bDebugBlur : 1;                                           // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugHealth : 1;                                         // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugParticles : 1;                                      // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugTaserDamage : 1;                                    // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugStunDamage : 1;                                     // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugReactionTime : 1;                                   // 0x0078(0x0004) (Config)
	unsigned long                                      bDebugUncontrolledFallingEffect : 1;                      // 0x0078(0x0004) (Config)
	class UTdHudEffect_Bullet*                         BulletHitEffect;                                          // 0x007C(0x0004)
	class UTdHudEffect_Taser*                          TaserHitEffect;                                           // 0x0080(0x0004)
	class UTdHudEffect_ElectricShock*                  ElectricShockHitEffect;                                   // 0x0084(0x0004)
	class UTdHudEffect_Melee*                          MeleeHitEffect;                                           // 0x0088(0x0004)
	class UTdHudEffect_FallDamage*                     FallDamageEffect;                                         // 0x008C(0x0004)
	class UTdHudEffect_ExplosionDamage*                ExplosionDamageEffect;                                    // 0x0090(0x0004)
	class UTdHudEffect_Saturation*                     SaturationEffect;                                         // 0x0094(0x0004)
	class UTdHudEffect_Flashbang*                      FlashbangEffect;                                          // 0x0098(0x0004) (Edit, EditInline)
	class UTdHudEffect_ReactionTime*                   ReactionTimeEffect;                                       // 0x009C(0x0004)
	TArray<class UTdHudEffect*>                        HudImpactEffects;                                         // 0x00A0(0x000C) (Transient, NeedCtorLink)
	struct FDirectionalParticleSystemSlot              DirectionalParticleSystemSlots[0x4];                      // 0x00AC(0x0014) (Transient)
	int                                                HitEmitterPointer;                                        // 0x00FC(0x0004) (Transient)
	float                                              HitEffectBlurTimer;                                       // 0x0100(0x0004) (Transient)
	float                                              HitEffectBlurFadeInTimer;                                 // 0x0104(0x0004) (Transient)
	float                                              HitEffectBlurFadeInDuration;                              // 0x0108(0x0004) (Transient)
	float                                              HitEffectBlurFadeInStart;                                 // 0x010C(0x0004) (Transient)
	float                                              HitEffectBlurFadeOutTimer;                                // 0x0110(0x0004) (Transient)
	float                                              HitEffectBlurFadeOutDuration;                             // 0x0114(0x0004) (Transient)
	float                                              HitEffectFocusDistance;                                   // 0x0118(0x0004) (Transient)
	float                                              HitEffectFocusDistanceStart;                              // 0x011C(0x0004) (Transient)
	float                                              HitEffectMaxFarBlurAmount;                                // 0x0120(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HealthEffectMaterialInstance;                             // 0x0124(0x0004) (Transient)
	class UMaterialEffect*                             HealthEffect;                                             // 0x0128(0x0004)
	struct FPPSettings                                 PPHealthSaturationSettings;                               // 0x012C(0x0014) (Config)
	float                                              PPHSSFadeInTimer;                                         // 0x0140(0x0004) (Transient)
	float                                              PPHSSFadeInStart;                                         // 0x0144(0x0004) (Transient)
	float                                              PPHSSPeakDurationTimer;                                   // 0x0148(0x0004) (Transient)
	float                                              PPHSSFadeOutTimer;                                        // 0x014C(0x0004) (Transient)
	float                                              PPHSSTargetStrength;                                      // 0x0150(0x0004) (Transient)
	float                                              PPHSSCurrentStrength;                                     // 0x0154(0x0004) (Transient)
	class UMaterialEffect*                             DeathEffect;                                              // 0x0158(0x0004)
	class UMaterialInstanceConstant*                   DeathEffectMaterialInstance;                              // 0x015C(0x0004) (Transient)
	float                                              DeathEffectSpeed;                                         // 0x0160(0x0004) (Config)
	class UParticleSystem*                             StreakEffectParticles;                                    // 0x0164(0x0004)
	float                                              StreakDistanceInMovementDirection;                        // 0x0168(0x0004) (Config)
	float                                              StreakDistanceInCameraDirection;                          // 0x016C(0x0004) (Config)
	float                                              StreakEffectFadeTime;                                     // 0x0170(0x0004) (Config)
	float                                              StreakEffectMaxSpeed;                                     // 0x0174(0x0004)
	class AEmitter*                                    StreakEffectEmitter;                                      // 0x0178(0x0004) (Transient)
	float                                              StreakEffectStrength;                                     // 0x017C(0x0004) (Transient)
	struct FVector                                     StreakEffectDirection;                                    // 0x0180(0x000C) (Transient)
	float                                              UncontrolledFallingSpeedLimit;                            // 0x018C(0x0004) (Config)
	float                                              UncontrolledFallingEffectSpeed;                           // 0x0190(0x0004) (Config)
	float                                              UncontrolledFallingEffectClamp;                           // 0x0194(0x0004) (Config)
	struct FVector                                     UncontrolledFallingEmitterOffset;                         // 0x0198(0x000C) (Config)
	class UParticleSystem*                             UncontrolledFallingParticles;                             // 0x01A4(0x0004)
	class UMaterialInstanceConstant*                   UncontrolledFallingMaterialInstance;                      // 0x01A8(0x0004) (Transient)
	class UMaterialEffect*                             UncontrolledFallingEffect;                                // 0x01AC(0x0004)
	class ATdEmitter*                                  UncontrolledFallingEffectEmitter;                         // 0x01B0(0x0004) (Transient)
	float                                              UncontrolledFallingEffectFader;                           // 0x01B4(0x0004) (Transient)
	struct FVector                                     ForcedUncontrolledFallVelocity;                           // 0x01B8(0x000C) (Transient)
	float                                              ZoomMaxFarBlurAmount;                                     // 0x01C4(0x0004) (Edit, Config)
	float                                              ZoomMaxNearBlurAmount;                                    // 0x01C8(0x0004) (Edit, Config)
	float                                              ZoomAutofocusSpeedUp;                                     // 0x01CC(0x0004) (Edit, Config)
	float                                              ZoomAutofocusSpeedDown;                                   // 0x01D0(0x0004) (Edit, Config)
	float                                              ZoomAutofocusMaxDistance;                                 // 0x01D4(0x0004) (Edit, Config)
	float                                              SavedMaxFarBlurAmount;                                    // 0x01D8(0x0004) (Transient)
	float                                              SavedMaxNearBlurAmount;                                   // 0x01DC(0x0004) (Transient)
	float                                              SavedAutofocusSpeedUp;                                    // 0x01E0(0x0004) (Transient)
	float                                              SavedAutofocusSpeedDown;                                  // 0x01E4(0x0004) (Transient)
	float                                              SavedAutofocusMaxDistance;                                // 0x01E8(0x0004) (Transient)
	struct FVector                                     CamLoc;                                                   // 0x01EC(0x000C) (Transient)
	struct FRotator                                    CamRot;                                                   // 0x01F8(0x000C) (Transient)
	class UTdUIBlurEffect*                             UIBlurPP_UI;                                              // 0x0204(0x0004)
	float                                              UIBlurTimer;                                              // 0x0208(0x0004) (Transient)
	float                                              UIBlurInSpeed;                                            // 0x020C(0x0004) (Transient)
	float                                              UIBlurOutSpeed;                                           // 0x0210(0x0004) (Transient)
	class ATdPlayerPawn*                               ThePlayerPawn;                                            // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudEffectManager");
		return ptr;
	}


	void TogglePostProcessEffects(bool bEnable);
	void DeActivateForcedUncontrolledFall();
	void ActivateForcedUncontrolledFall(const struct FVector& Direction);
	void ResetMotionBlurEffects();
	void DeActivateForcedMotionBlur();
	void ActivateForcedMotionBlur(const struct FVector& Direction, float Amount);
	void ActivateReactionTimeTeaser();
	void InitSavedDOFValues();
	void DeActivateZoomInDOF();
	void DeActivateSaturationEffect();
	void ActivateSaturationEffect();
	void ActivateZoomInDOF();
	void UpdateBlur_UI(float DeltaTime);
	void UpdateDOF(float DeltaTime);
	void UnDisplayDeath();
	void DisplayDeath();
	void ResetScopeEffect();
	void ResetHealthEffect();
	void UpdateStreakEffect(float Delta);
	void ResetPPEffects();
	void ResetParticles();
	bool IsPlayerInUncontrolledSpeed(struct FVector* FallingVelocity);
	void UpdateUncontrolledFalling(float DeltaTime);
	void Update(float DeltaTime, float RenderDelta);
	void SetUIBlurEnabled(bool bEnabled);
	void SetUIBlur(float T);
	void BlurOutUI(float FadeOutTime);
	void BlurInUI(float FadeInTime);
	void ToggleUIPostProcess();
	void InitUIPostProcess();
	void StartUp();
	void FadeOutHelper(float Time, const struct FLinearColor& FadeColor, bool bRealTime);
	struct FVector GetRelativeHitPos(const struct FVector& Offset, const struct FRotator& CameraRotation, float Direction);
	void DisplayHit(const struct FVector& HitDir, int Damage, TEnumAsByte<EDamageType> DamageType);
};


// Class TdGame.TdUIObject
// 0x0010 (0x03EC - 0x03DC)
class UTdUIObject : public UUIObject
{
public:
	unsigned long                                      requiresTick : 1;                                         // 0x03DC(0x0004)
	unsigned long                                      bShowBounds : 1;                                          // 0x03DC(0x0004) (Edit, Transient)
	TArray<class UTdUIObject*>                         TickStack;                                                // 0x03E0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIObject");
		return ptr;
	}


	void RemovedChild(class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray<class UUIObject*> ExclusionSet);
	void AddedChild(class UUIScreenObject* WidgetOwner, class UUIObject* NewChild);
	void RemoveChildFromTickStack(class UTdUIObject* ChildToRemove);
	void AddChildToTickStack(class UTdUIObject* ChildToAdd);
	void Initialized();
	class AWorldInfo* GetWorldInfo();
	class ATdPlayerReplicationInfo* GetPRI();
	class ATdPawn* GetTdPawn();
	class ATdPlayerController* GetTdPlayerController(int Index);
};


// Class TdGame.TdHUDObject
// 0x0000 (0x03EC - 0x03EC)
class UTdHUDObject : public UTdUIObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDObject");
		return ptr;
	}


	class AHUD* GetHud();
};


// Class TdGame.TdHudHitIndicator
// 0x0028 (0x0414 - 0x03EC)
class UTdHudHitIndicator : public UTdHUDObject
{
public:
	int                                                MaxNoOfIndicators;                                        // 0x03EC(0x0004)
	TArray<struct FDamageDataInfo>                     DamageData;                                               // 0x03F0(0x000C) (NeedCtorLink)
	class UMaterial*                                   BaseMaterial;                                             // 0x03FC(0x0004) (Edit)
	float                                              FadeTime;                                                 // 0x0400(0x0004) (Edit)
	struct FName                                       PositionalParamName;                                      // 0x0404(0x0008) (Edit)
	struct FName                                       FadeParamName;                                            // 0x040C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHudHitIndicator");
		return ptr;
	}


	void FlashDamage(float FlashPosition);
	void TrackDamage(const struct FVector& HitDir, int Damage, class UClass* DamageType);
	void Initialized();
};


// Class TdGame.TdHUDWidget
// 0x0000 (0x03EC - 0x03EC)
class UTdHUDWidget : public UTdHUDObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget");
		return ptr;
	}

};


// Class TdGame.TdListElement
// 0x0018 (0x0054 - 0x003C)
class UTdListElement : public UObject
{
public:
	class UUIList*                                     OwnerList;                                                // 0x003C(0x0004)
	struct FUIListItemDataBinding                      DataSource;                                               // 0x0040(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdListElement");
		return ptr;
	}

};


// Class TdGame.TdImageListElement
// 0x0010 (0x0064 - 0x0054)
class UTdImageListElement : public UTdListElement
{
public:
	struct FString                                     CaptionString;                                            // 0x0054(0x000C) (NeedCtorLink)
	class USurface*                                    ImageTexture;                                             // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdImageListElement");
		return ptr;
	}

};


// Class TdGame.TdKeyBindingHandler
// 0x006C (0x00A8 - 0x003C)
class UTdKeyBindingHandler : public UObject
{
public:
	TArray<struct FKeyBindWidgetData>                  KeyBindWidgets;                                           // 0x003C(0x000C) (Transient, NeedCtorLink)
	struct FKeyBindData                                CurrKeyBindData;                                          // 0x0048(0x0020) (Transient, NeedCtorLink)
	TArray<struct FCurrentBindKeyStruct>               CurrentBindings;                                          // 0x0068(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bSettingsWasChanged : 1;                                  // 0x0074(0x0004)
	unsigned long                                      bCurrentlyBindingKey : 1;                                 // 0x0074(0x0004) (Transient)
	unsigned long                                      bPromptForBindStomp : 1;                                  // 0x0074(0x0004) (Transient)
	class UUILabelButton*                              CurrentBindingObject;                                     // 0x0078(0x0004) (Transient)
	class UTdUIScene*                                  OwnerScene;                                               // 0x007C(0x0004)
	class UTdUIScene_MessageBox*                       BindKeyMessageBox;                                        // 0x0080(0x0004) (Transient)
	TArray<struct FKeyBind>                            CurrentBindingsMap;                                       // 0x0084(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnSettingsChangedDelegate__Delegate;                    // 0x0090(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __IsAllowedBindingKey__Delegate;                          // 0x009C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdKeyBindingHandler");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	bool AllActionsHaveBind();
	void FinishBinding();
	void OnFinisKeyBinding_MsgBoxClosed();
	void FinishKeyBinding(bool bInPromptForBindStomp);
	void UnbindKey(const struct FName& BindName);
	void BindKey();
	void AttemptKeyBind();
	void CancelKeyBind();
	void OnMessageBox_BindOverwriteConfirm(class UTdUIScene_MessageBox* MessageBox, int SelectedItem, int PlayerIndex);
	void OnSpawnBindStompWarningMessage_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void SpawnBindStompWarningMessage();
	bool IsAlreadyBound(const struct FName& KeyName);
	bool BindingsHaveChanged();
	bool OnBindKeyMessageBox_HandleInputKey(struct FInputEventParameters* EventParms);
	void OnKeyBindButton_Clicked_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialAcivation);
	bool OnBindButton_InputKey(struct FInputEventParameters* EventParms);
	void ResetToDefaults();
	bool GetKeyBindIndicesFromObject(class UUIObject* Sender, int* WidgetsIndexResult, int* ButtonsIndexResult);
	void Initialize(class UTdUIScene* inOwnerScene, TArray<struct FKeyBindWidgetData> InKeyBindWidgets, const struct FScriptDelegate& OnChangedDelegate);
	bool IsAllowedBindingKey(const struct FName& Key);
	void OnSettingsChangedDelegate();
	struct FString GetBindKeyFromCommand(const struct FString& Command, int* StartIdx);
	void RefreshBindingButtons();
};


// Class TdGame.TdLeaderboardSettings
// 0x0000 (0x006C - 0x006C)
class UTdLeaderboardSettings : public USettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardSettings");
		return ptr;
	}


	void StepSettingValue(int SettingId, bool bIncrease);
};


// Class TdGame.TdLevelListElement
// 0x0000 (0x0064 - 0x0064)
class UTdLevelListElement : public UTdImageListElement
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLevelListElement");
		return ptr;
	}

};


// Class TdGame.TdLobbyBackend
// 0x0008 (0x0044 - 0x003C)
class UTdLobbyBackend : public UObject
{
public:
	TScriptInterface<class UTdLobbyEventListener>      Listener;                                                 // 0x003C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyBackend");
		return ptr;
	}


	void StartGame(const struct FString& MapName, const struct FString& GameMode);
	bool AllPlayersReady();
	void RequestSetReady(class AController* C);
	void RequestRoleChange(class AController* C, int Dir);
	void RequestTeamChange(class AController* C, int Dir);
	void OnGameStarted();
	void OnSetReady(class AController* C);
	void OnChangeRole(class AController* C);
	void OnChangeTeam(class AController* C);
	void OnPlayerLogout(class AController* C);
	void OnPlayerLogin(class AController* C);
	void Cleanup();
	void Update();
	void SetListener(const TScriptInterface<class UTdLobbyEventListener>& InListener);
};


// Class TdGame.TdLobbyGameInfo
// 0x0020 (0x03A0 - 0x0380)
class ATdLobbyGameInfo : public ATdGameInfo
{
public:
	class UUIScene*                                    LobbyScene;                                               // 0x0380(0x0004) (Transient)
	class APlayerController*                           ControllingPlayer;                                        // 0x0384(0x0004) (Transient)
	TArray<class ATdTeamInfo*>                         Teams;                                                    // 0x0388(0x000C) (NeedCtorLink)
	TArray<struct FLobbyTeamDataStruct>                TeamData;                                                 // 0x0394(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyGameInfo");
		return ptr;
	}


	void ProcessServerTravel(const struct FString& URL, bool bAbsolute);
	void StartGame(const struct FString& URL);
	void HandleLobby(class ATdPlayerController* PC);
	void UpdateAdminPlayer();
	bool ShowLobby(class ATdPlayerController* PC);
	void PostLogin(class APlayerController* NewPlayer);
	void SetPlayerReady(class AController* C, bool bIsReady);
	bool ChangeRole(class AController* C, int NewRoleIndex);
	int GetRandomRoleIndex(int Team);
	void SetTeam(class AController* Other, class ATdTeamInfo* NewTeam, bool bNewTeam);
	bool ChangeTeam(class AController* C, int TeamId, bool bNewTeam);
	unsigned char GetBalancedTeam(unsigned char Current, class AController* C);
	unsigned char PickTeam(unsigned char Current, class AController* C);
	void Logout(class AController* Exiting);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, struct FString* ErrorMessage);
	void InitializeTeams();
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdLobbyListenServerBackend
// 0x0028 (0x006C - 0x0044)
class UTdLobbyListenServerBackend : public UTdLobbyBackend
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0044(0x0004) (Const, Native, NoExport)
	class ATdGameReplicationInfo*                      GRI;                                                      // 0x0048(0x0004) (Transient)
	class UUIDataStore_TdGameData*                     TdGameData;                                               // 0x004C(0x0004)
	class UUIDataStore_TdMPData*                       TdMPData;                                                 // 0x0050(0x0004)
	struct FName                                       ResourceDataStoreName;                                    // 0x0054(0x0008) (Edit)
	struct FName                                       SettingsDataStoreName;                                    // 0x005C(0x0008) (Edit)
	float                                              TimeAccumulator;                                          // 0x0064(0x0004) (Transient)
	float                                              TickTrigger;                                              // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyListenServerBackend");
		return ptr;
	}


	void StartGame(const struct FString& MapName, const struct FString& GameMode);
	bool AllPlayersReady();
	void RequestSetReady(class AController* C);
	void RequestRoleChange(class AController* C, int Dir);
	void RequestTeamChange(class AController* C, int Dir);
	void OnGameStarted();
	void OnSetReady(class AController* C);
	void OnChangeRole(class AController* C);
	void OnChangeTeam(class AController* C);
	void OnPlayerLogout(class AController* C);
	void OnPlayerLogin(class AController* C);
	struct FLobbyPlayerStruct InitPlayerData(class APlayerReplicationInfo* PRI);
	void Update();
	void Cleanup();
	void CheckGRI(class AWorldInfo* InInfo);
};


// Class TdGame.TdLoginSettings
// 0x0000 (0x006C - 0x006C)
class UTdLoginSettings : public USettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLoginSettings");
		return ptr;
	}

};


// Class TdGame.TdMenuListElement
// 0x0018 (0x006C - 0x0054)
class UTdMenuListElement : public UTdListElement
{
public:
	struct FString                                     CaptionString;                                            // 0x0054(0x000C) (NeedCtorLink)
	struct FString                                     DescriptionString;                                        // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMenuListElement");
		return ptr;
	}

};


// Class TdGame.TdMiniMapMeshComponent
// 0x0048 (0x0250 - 0x0208)
class UTdMiniMapMeshComponent : public UStaticMeshComponent
{
public:
	class UStaticMesh*                                 MeshObjects[0x5];                                         // 0x0208(0x0004) (Const)
	TArray<struct FMiniMapObject>                      MiniMapObjects;                                           // 0x021C(0x000C) (NeedCtorLink)
	class UStaticMesh*                                 MapMesh;                                                  // 0x0228(0x0004) (Transient)
	class UMaterial*                                   MiniMapBaseMaterial;                                      // 0x022C(0x0004)
	class UMaterial*                                   InactiveStashPointMaterial;                               // 0x0230(0x0004)
	struct FVector                                     WorldToMiniMapOrigo;                                      // 0x0234(0x000C) (Transient)
	float                                              DefaultScale;                                             // 0x0240(0x0004) (Const)
	struct FVector                                     DefaultTranslation;                                       // 0x0244(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMiniMapMeshComponent");
		return ptr;
	}

};


// Class TdGame.TdTTInput
// 0x017C (0x01B8 - 0x003C)
class UTdTTInput : public UObject
{
public:
	unsigned long                                      bIsOnlineInfo : 1;                                        // 0x003C(0x0004)
	struct FTTData                                     WorldsBest;                                               // 0x0040(0x0038) (NeedCtorLink)
	struct FTTData                                     WorldsMonthlyBest;                                        // 0x0078(0x0038) (NeedCtorLink)
	struct FTTData                                     WorldsWeeklyBest;                                         // 0x00B0(0x0038) (NeedCtorLink)
	struct FTTData                                     FriendsBest;                                              // 0x00E8(0x0038) (NeedCtorLink)
	struct FTTData                                     TargetTime;                                               // 0x0120(0x0038) (NeedCtorLink)
	struct FTTData                                     PlayerBest;                                               // 0x0158(0x0038) (NeedCtorLink)
	float                                              PlayerWeeklyBest;                                         // 0x0190(0x0004)
	float                                              PlayerMonthlyBest;                                        // 0x0194(0x0004)
	TArray<float>                                      PlayerMonthlyCache;                                       // 0x0198(0x000C) (NeedCtorLink)
	TArray<float>                                      PlayerWeeklyCache;                                        // 0x01A4(0x000C) (NeedCtorLink)
	float                                              WeeklyGhostQualifyingTime;                                // 0x01B0(0x0004)
	float                                              MonthlyGhostQualifyingTime;                               // 0x01B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTTInput");
		return ptr;
	}


	void PrintInput();
	void ClearTTData(struct FTTData* Data);
	void ClearTimeData();
};


// Class TdGame.TdTTResult
// 0x019C (0x01D8 - 0x003C)
class UTdTTResult : public UObject
{
public:
	unsigned long                                      bIsOnlineResult : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bBeatWorldRecord : 1;                                     // 0x003C(0x0004)
	unsigned long                                      bBeatWorldMonthlyRecord : 1;                              // 0x003C(0x0004)
	unsigned long                                      bBeatWorldWeeklyRecord : 1;                               // 0x003C(0x0004)
	unsigned long                                      bBeatFriendsRecord : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bBeatPersonalRecord : 1;                                  // 0x003C(0x0004)
	unsigned long                                      bBeatTargetTime : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bBeatQualifyerTime : 1;                                   // 0x003C(0x0004)
	struct FTTData                                     WorldsBest;                                               // 0x0040(0x0038) (NeedCtorLink)
	struct FTTData                                     WorldsMonthlyBest;                                        // 0x0078(0x0038) (NeedCtorLink)
	struct FTTData                                     WorldsWeeklyBest;                                         // 0x00B0(0x0038) (NeedCtorLink)
	struct FTTData                                     FriendsBest;                                              // 0x00E8(0x0038) (NeedCtorLink)
	struct FTTData                                     TargetTime;                                               // 0x0120(0x0038) (NeedCtorLink)
	struct FTTData                                     CurrentTime;                                              // 0x0158(0x0038) (NeedCtorLink)
	struct FTTData                                     OldPlayerBest;                                            // 0x0190(0x0038) (NeedCtorLink)
	int                                                UnlockedTTStretch;                                        // 0x01C8(0x0004)
	TArray<float>                                      TrackSegmentPct;                                          // 0x01CC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTTResult");
		return ptr;
	}


	void PrintResult();
	bool IncreasedStarRating();
	bool WasNewRecord();
};


// Class TdGame.TdTutorialListElement
// 0x0000 (0x0064 - 0x0064)
class UTdTutorialListElement : public UTdImageListElement
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialListElement");
		return ptr;
	}

};


// Class TdGame.TdUIButtonBar
// 0x0024 (0x0410 - 0x03EC)
class UTdUIButtonBar : public UTdUIObject
{
public:
	class UTdUIButtonBarButton*                        Buttons[0x6];                                             // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FScriptDelegate                             __OnPlayClickNotification__Delegate;                      // 0x0404(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIButtonBar");
		return ptr;
	}


	void PlayInputNotificationClickToKey(class UUIScreenObject* EventObject, const struct FInputEventParameters& EventParms);
	void DisableAllButtons(bool bDisable);
	void DisableButton(int ButtonIndex, bool bDisable);
	void ToggleSetButtons(bool bActive);
	void ToggleAllButtons(bool bActive);
	void ToggleButton(int ButtonIndex, bool bActive);
	void ClearButtons();
	void ClearButton(int ButtonIndex);
	void SetButton(int ButtonIndex, const struct FString& ButtonTextMarkup, const struct FScriptDelegate& ButtonDelegate);
	void CheckMarkup(struct FString* ButtonTextMarkup);
	int AppendButton(const struct FString& ButtonTextMarkup, const struct FScriptDelegate& ButtonDelegate);
	void OnControllerChange(int ControllerId, bool Connected);
	void PostInitialize();
	struct FInputEventParameters BuildFakeInputEvent(const struct FName& FakeKey, struct FInputEventParameters* SourceEvent);
	bool CanAcceptFocus(int PlayerIndex);
	bool OnPlayClickNotification(struct FInputEventParameters* EventParms);
};


// Class TdGame.TdUIButtonBarButton
// 0x000C (0x042C - 0x0420)
class UTdUIButtonBarButton : public UUILabelButton
{
public:
	struct FScriptDelegate                             __OnClickNotification__Delegate;                          // 0x0420(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIButtonBarButton");
		return ptr;
	}


	bool CanAcceptFocus(int PlayerIndex);
	void OnClickNotification(class UUIScreenObject* EventObject, const struct FInputEventParameters& EventParms);
};


// Class TdGame.TdUIComp_DrawScrollString
// 0x0000 (0x016C - 0x016C)
class UTdUIComp_DrawScrollString : public UUIComp_DrawString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_DrawScrollString");
		return ptr;
	}

};


// Class TdGame.TdUIComp_ListPresenterBase
// 0x0010 (0x0104 - 0x00F4)
class UTdUIComp_ListPresenterBase : public UUIComp_ListPresenter
{
public:
	TArray<class UTdListElement*>                      ListElements;                                             // 0x00F4(0x000C) (Transient, EditConst, AlwaysInit, NeedCtorLink, NoImport, EditInline)
	int                                                SelectedItemHeight;                                       // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_ListPresenterBase");
		return ptr;
	}


	void DrawElement(class UCanvas* Canvas, int ElementIndex, const struct FRenderParameters& Parameters, bool bElementIsSelected);
};


// Class TdGame.TdUIComp_ImageListPresenter
// 0x001C (0x0120 - 0x0104)
class UTdUIComp_ImageListPresenter : public UTdUIComp_ListPresenterBase
{
public:
	class UFont*                                       SelectedFont;                                             // 0x0104(0x0004) (Edit)
	class UFont*                                       UnselectedFont;                                           // 0x0108(0x0004) (Edit)
	struct FColor                                      SelectedBgColor;                                          // 0x010C(0x0004) (Edit)
	struct FColor                                      UnselectedBgColor;                                        // 0x0110(0x0004) (Edit)
	unsigned long                                      bDrawBackground : 1;                                      // 0x0114(0x0004) (Edit)
	float                                              Padding_X;                                                // 0x0118(0x0004) (Edit)
	float                                              Padding_Y;                                                // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_ImageListPresenter");
		return ptr;
	}


	void DrawElement(class UCanvas* Canvas, int ElementIndex, const struct FRenderParameters& Parameters, bool bElementIsSelected);
};


// Class TdGame.TdUIComp_LevelListPresenter
// 0x0000 (0x0120 - 0x0120)
class UTdUIComp_LevelListPresenter : public UTdUIComp_ImageListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_LevelListPresenter");
		return ptr;
	}

};


// Class TdGame.TdUIComp_MenuListPresenter
// 0x0004 (0x0108 - 0x0104)
class UTdUIComp_MenuListPresenter : public UTdUIComp_ListPresenterBase
{
public:
	int                                                CaptionHeight;                                            // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_MenuListPresenter");
		return ptr;
	}


	void DrawElement(class UCanvas* Canvas, int ElementIndex, const struct FRenderParameters& Parameters, bool bElementIsSelected);
};


// Class TdGame.TdUIComp_TutorialListPresenter
// 0x0000 (0x0120 - 0x0120)
class UTdUIComp_TutorialListPresenter : public UTdUIComp_ImageListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIComp_TutorialListPresenter");
		return ptr;
	}


	void DrawElement(class UCanvas* Canvas, int ElementIndex, const struct FRenderParameters& Parameters, bool bElementIsSelected);
};


// Class TdGame.TdUIDrawPanel
// 0x0028 (0x0414 - 0x03EC)
class UTdUIDrawPanel : public UTdUIObject
{
public:
	unsigned long                                      bUseFullViewport : 1;                                     // 0x03EC(0x0004) (Edit)
	class UCanvas*                                     Canvas;                                                   // 0x03F0(0x0004)
	float                                              pLeft;                                                    // 0x03F4(0x0004)
	float                                              pTop;                                                     // 0x03F8(0x0004)
	float                                              pWidth;                                                   // 0x03FC(0x0004)
	float                                              pHeight;                                                  // 0x0400(0x0004)
	float                                              ResolutionScale;                                          // 0x0404(0x0004)
	struct FScriptDelegate                             __DrawDelegate__Delegate;                                 // 0x0408(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIDrawPanel");
		return ptr;
	}


	void DrawPanel();
	bool DrawDelegate(class UCanvas* C);
	void Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor);
};


// Class TdGame.TdUIDrawPlayersPanel
// 0x0050 (0x0464 - 0x0414)
class UTdUIDrawPlayersPanel : public UTdUIDrawPanel
{
public:
	struct FName                                       ClickedCue;                                               // 0x0414(0x0008) (Edit)
	class UUIDataStore_TdGameData*                     TdGameData;                                               // 0x041C(0x0004) (Transient)
	struct FName                                       ResourceDataStoreName;                                    // 0x0420(0x0008) (Edit)
	int                                                MaxTeams;                                                 // 0x0428(0x0004)
	int                                                MaxPlayersInTeam;                                         // 0x042C(0x0004)
	int                                                SelectedTeam;                                             // 0x0430(0x0004)
	int                                                SelectedPlayer;                                           // 0x0434(0x0004)
	class UFont*                                       SelectedFont;                                             // 0x0438(0x0004) (Edit)
	class UFont*                                       UnselectedFont;                                           // 0x043C(0x0004) (Edit)
	struct FColor                                      PlayerSlotBGColor;                                        // 0x0440(0x0004) (Edit)
	struct FColor                                      PlayerSlotSelectedBgColor;                                // 0x0444(0x0004) (Edit)
	int                                                TeamSpacing;                                              // 0x0448(0x0004) (Edit)
	TArray<struct FTdTeamPlayerSlots>                  TeamSlots;                                                // 0x044C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerSlotClicked__Delegate;                          // 0x0458(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIDrawPlayersPanel");
		return ptr;
	}


	int GetMaxTeams();
	int GetMaxPlayersInTeam();
	void SetSelectedSlot(int TeamIndex, int PlayerIndex);
	class ATdPlayerReplicationInfo* GetSelectedTdPRI();
	bool TdUIDrawPlayerPanel_OnClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void DrawPlayer(class UCanvas* C, class ATdPlayerReplicationInfo* TdPRI, int TeamIndex, bool bIsSelected, int Left, int Top, int Width, int Height);
	void DrawPlayerSlotBG(class UCanvas* C, int TeamIndex, int PlayerSlotIndex, int X, int Y, int XL, int YL);
	void DrawTeam(class UCanvas* C, int TeamIndex, int X, int Y, int XL, int YL);
	bool Draw(class UCanvas* C);
	void UpdatePlayers(TArray<class APlayerReplicationInfo*> pris);
	void PostInitialize();
	void OnPlayerSlotClicked(class ATdPlayerReplicationInfo* TdPRI);
};


// Class TdGame.TdUIFocusLabel
// 0x0000 (0x041C - 0x041C)
class UTdUIFocusLabel : public UUILabel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIFocusLabel");
		return ptr;
	}

};


// Class TdGame.TdUIImage
// 0x002C (0x0418 - 0x03EC)
class UTdUIImage : public UTdUIObject
{
public:
	class USurface*                                    Image;                                                    // 0x03EC(0x0004) (Edit, Const)
	struct FTextureCoordinates                         Coordinates;                                              // 0x03F0(0x0010) (Edit)
	struct FLinearColor                                ImageColor;                                               // 0x0400(0x0010) (Edit, Const)
	unsigned long                                      centered : 1;                                             // 0x0410(0x0004) (Edit)
	unsigned long                                      stretched : 1;                                            // 0x0410(0x0004) (Edit)
	float                                              Scale;                                                    // 0x0414(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIImage");
		return ptr;
	}


	void SetScale(float _newScale);
	void SetImage(class USurface* _newImage, const struct FTextureCoordinates& _newCoordinates);
};


// Class TdGame.TdUIListBase
// 0x0000 (0x0664 - 0x0664)
class UTdUIListBase : public UUIList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIListBase");
		return ptr;
	}


	float GetRowHeight(int RowIndex, bool bColHeader, bool bReturnUnformattedValue);
	bool GetCellFieldValue(class UUIList* InList, const struct FName& InCellTag, int InListIndex, struct FUIProviderFieldValue* OutValue);
	void PostInitialize();
};


// Class TdGame.TdUIImageList
// 0x0000 (0x0664 - 0x0664)
class UTdUIImageList : public UTdUIListBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIImageList");
		return ptr;
	}


	float GetRowHeight(int RowIndex, bool bColHeader, bool bReturnUnformattedValue);
};


// Class TdGame.TdUIInteraction
// 0x0004 (0x01AC - 0x01A8)
class UTdUIInteraction : public UUIInteraction
{
public:
	int                                                BlockUIInputSemaphore;                                    // 0x01A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIInteraction");
		return ptr;
	}


	void BlockUIInput(bool bBlock);
	bool ShouldProcessUIInput();
	void ClearUIInputBlocks();
};


// Class TdGame.TdUIWidgetList
// 0x0080 (0x0494 - 0x0414)
class UTdUIWidgetList : public UTdUIDrawPanel
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                           // 0x0414(0x0004) (Const, Native, NoExport)
	class UUIScrollbar*                                VerticalScrollbar;                                        // 0x0418(0x0004) (Transient)
	int                                                CurrentIndex;                                             // 0x041C(0x0004) (Transient)
	int                                                PreviousIndex;                                            // 0x0420(0x0004) (Transient)
	TArray<struct FGeneratedObjectInfo>                GeneratedObjects;                                         // 0x0424(0x000C) (Transient, NeedCtorLink)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0430(0x0030) (Edit, NeedCtorLink)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x0460(0x0008) (Const, Transient)
	int                                                MaxVisibleItems;                                          // 0x0468(0x0004) (Transient)
	unsigned long                                      bRegenOptions : 1;                                        // 0x046C(0x0004) (Transient)
	struct FScriptDelegate                             __OnOptionFocused__Delegate;                              // 0x0470(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnOptionChanged__Delegate;                              // 0x047C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnAcceptOptions__Delegate;                              // 0x0488(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIWidgetList");
		return ptr;
	}


	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
	void DrawPanel();
	bool ProcessInputKey(struct FSubscribedInputEventParameters* EventParms);
	void SelectPreviousItem(bool bWrap);
	void SelectNextItem(bool bWrap);
	void SetNewCurrentOption(int OptionIndex);
	void SelectItem(int OptionIdx);
	void OnOption_NotifyActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void OnValueChanged(class UUIObject* Sender, int PlayerIndex);
	int GetObjectInfoIndexFromObject(class UUIObject* Sender);
	int GetObjectInfoIndexFromName(const struct FName& ProviderName);
	bool ScrollVertical(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed);
	void ClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex);
	void SetupOptionBindings();
	void PostInitialize();
	void RefreshAllOptions();
	void GetSupportedUIActionKeyNames(TArray<struct FName>* out_KeyNames);
	void InitializeScrollbars();
	void SetSelectedOptionIndex(int OptionIdx);
	void OnAcceptOptions(class UUIScreenObject* InObject, int PlayerIndex);
	void OnOptionChanged(class UUIScreenObject* InObject, const struct FName& OptionName, int PlayerIndex);
	void OnOptionFocused(class UUIScreenObject* InObject, class UUIDataProvider* OptionProvider);
};


// Class TdGame.TdUIKeyBindingList
// 0x0058 (0x04EC - 0x0494)
class UTdUIKeyBindingList : public UTdUIWidgetList
{
public:
	struct FBindKeyData                                CurrKeyBindData;                                          // 0x0494(0x0024) (Transient, NeedCtorLink)
	int                                                NumButtons;                                               // 0x04B8(0x0004) (Transient)
	unsigned long                                      bCurrentlyBindingKey : 1;                                 // 0x04BC(0x0004) (Transient)
	class UUIObject*                                   CurrentlyBindingObject;                                   // 0x04C0(0x0004) (Transient)
	class UTdUIScene_MessageBox*                       BindKeyMessageBox;                                        // 0x04C4(0x0004) (Transient)
	TArray<struct FString>                             CurrentBindings;                                          // 0x04C8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             StoredBindings;                                           // 0x04D4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             LocalizedFriendlyNames;                                   // 0x04E0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIKeyBindingList");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void FinishBinding();
	void FinishKeyBinding(bool bPromptForBindStomp);
	bool OnBindKeyMessageBox_HandleInputKey(struct FInputEventParameters* EventParms);
	bool OnClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void UnbindKey(const struct FName& BindName);
	void CancelKeyBind();
	void BindKey();
	void AttemptKeyBind();
	void OnMessageBox_BindOverwriteConfirm(class UTdUIScene_MessageBox* MessageBox, int SelectedItem, int PlayerIndex);
	void SpawnBindStompWarningMessage();
	bool IsAlreadyBound(const struct FName& KeyName);
	bool BindingsHaveChanged();
	void SelectPreviousItem(bool bWrap);
	void SelectNextItem(bool bWrap);
	bool ScrollVertical(class UUIScrollbar* Sender, float PositionChange, bool bPositionMaxed);
	void ClickedScrollZone(class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex);
	bool OnButton_InputKey(struct FInputEventParameters* EventParms);
	void ReloadDefaults();
	class UPlayerInput* GetPlayerInput();
	void PostInitialize();
	struct FString GetBindKeyFromCommand(class UPlayerInput* PInput, const struct FString& Command, int* StartIdx);
	void RefreshBindingLabels();
};


// Class TdGame.TdUIPlayerSlotBase
// 0x0000 (0x03E8 - 0x03E8)
class UTdUIPlayerSlotBase : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIPlayerSlotBase");
		return ptr;
	}

};


// Class TdGame.TdUIRaceProgressBar
// 0x006C (0x0458 - 0x03EC)
class UTdUIRaceProgressBar : public UTdUIObject
{
public:
	TEnumAsByte<EPB_Type>                              BarType;                                                  // 0x03EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	TArray<float>                                      SectionData;                                              // 0x03F0(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      SectionPctLength;                                         // 0x03FC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             SectionTexts;                                             // 0x0408(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        SectionTextureId;                                         // 0x0414(0x000C) (Transient, NeedCtorLink)
	class UTexture2D*                                  BottomBar[0x3];                                           // 0x0420(0x0004) (Transient)
	class UTexture2D*                                  MiddleBar[0x3];                                           // 0x042C(0x0004) (Transient)
	class UTexture2D*                                  TopBar[0x3];                                              // 0x0438(0x0004) (Transient)
	unsigned long                                      bHorisontalBar : 1;                                       // 0x0444(0x0004) (Edit)
	unsigned long                                      bDrawDropShadow : 1;                                      // 0x0444(0x0004) (Edit)
	float                                              BarPctPosition;                                           // 0x0448(0x0004) (Edit)
	float                                              TextPctOffset;                                            // 0x044C(0x0004) (Edit)
	float                                              DropShadowHorisontalOffset;                               // 0x0450(0x0004) (Edit)
	float                                              DropShadowVerticalOffset;                                 // 0x0454(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIRaceProgressBar");
		return ptr;
	}


	void SetProgressBarInfo(TArray<float> InSectionData, TArray<float> InSectionPctLength);
	void UpdateSectionData();
};


// Class TdGame.TdUIScene
// 0x00B0 (0x02F8 - 0x0248)
class UTdUIScene : public UUIScene
{
public:
	unsigned long                                      bPreventCloseScene : 1;                                   // 0x0248(0x0004)
	unsigned long                                      bCurrentlyPlayingMovie : 1;                               // 0x0248(0x0004)
	unsigned long                                      bIsBlockingInputDuringMovie : 1;                          // 0x0248(0x0004)
	unsigned long                                      bShowingScene : 1;                                        // 0x0248(0x0004) (Transient)
	unsigned long                                      bHidingScene : 1;                                         // 0x0248(0x0004) (Transient)
	unsigned long                                      bHasBeenShown : 1;                                        // 0x0248(0x0004) (Transient)
	TEnumAsByte<ESaturationOptions>                    SaturateBackground;                                       // 0x024C(0x0001) (Edit)
	TEnumAsByte<ESceneTransitionAnim>                  SceneTransitionAnim;                                      // 0x024D(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x024E(0x0002) MISSED OFFSET
	struct FName                                       TdSceneOpenedCue;                                         // 0x0250(0x0008) (Edit)
	struct FName                                       TdSceneClosedCue;                                         // 0x0258(0x0008) (Edit)
	class UUIScene*                                    MiniMenuScene;                                            // 0x0260(0x0004) (Transient)
	class UUIScene*                                    SendMessageScene;                                         // 0x0264(0x0004) (Transient)
	class UUIScene*                                    FriendsScene;                                             // 0x0268(0x0004) (Transient)
	class UTdUIScene_MessageBox*                       LoadingGamerCardMessageBox;                               // 0x026C(0x0004) (Transient)
	struct FUniqueNetId                                GamerCardNetId;                                           // 0x0270(0x0008) (Transient)
	class UTdUIButtonBar*                              ButtonBar;                                                // 0x0278(0x0004) (Transient)
	struct FString                                     CurrentPlayingMovieName;                                  // 0x027C(0x000C) (NeedCtorLink)
	struct FString                                     SimpleMessageBox_Message;                                 // 0x0288(0x000C) (Transient, NeedCtorLink)
	struct FString                                     SimpleMessageBox_Title;                                   // 0x0294(0x000C) (Transient, NeedCtorLink)
	class UUIScene*                                    PendingOpenScene;                                         // 0x02A0(0x0004) (Transient)
	class UUIScene*                                    PendingCloseScene;                                        // 0x02A4(0x0004) (Transient)
	float                                              SceneAnimStepPos;                                         // 0x02A8(0x0004) (Transient)
	float                                              SceneAnimDuration;                                        // 0x02AC(0x0004) (Config)
	struct FScriptDelegate                             __OnMessageBoxClosedCallback__Delegate;                   // 0x02B0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PrivateOnShowAnimationEnded__Delegate;                  // 0x02BC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PrivateOnHideAnimationEnded__Delegate;                  // 0x02C8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSceneOpened__Delegate;                                // 0x02D4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSceneFullyOpened__Delegate;                           // 0x02E0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRawPreInputKey__Delegate;                             // 0x02EC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene");
		return ptr;
	}


	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	int GetPlayerControllerId(int PlayerIndex);
	bool IsControllerInput(const struct FName& KeyName);
	class UTdProfileSettings* GetProfileSettings(int PlayerIndex);
	TScriptInterface<class UOnlineStatsInterface> GetStatsInterface();
	TScriptInterface<class UOnlinePlayerInterfaceEx> GetPlayerInterfaceEx();
	TScriptInterface<class UOnlinePlayerInterface> GetPlayerInterface();
	class UOnlineSubsystem* GetOnlineSubsystem();
	class UUIDataStore_TdGameData* GetGameDataStore();
	class UUIDataStore* FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner);
	void OnViewXBoxAchievements_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ViewXBoxAchievements();
	void ShowGamerCardFailedMessage_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowGamerCardFailedMessage();
	void OnViewGamerCardMessageBoxPressed(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnViewGamerCard(bool bWasSuccessful);
	void OnViewGamerCardMessageBoxFullyOpened(class UUIScene* OpenedScene);
	void OnViewGamerCardMessageBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ViewGamerCard(const struct FUniqueNetId& TargetPlayerId);
	void OpenFriendsScene(const struct FScriptDelegate& FriendsInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnInitMessageBox_ShowFriendsScene(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowFriendsScene(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void SimpleMessageBox_Callback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void SimpleMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void DisplaySimpleMessageBox(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& OnMessageBoxClosed);
	void OpenAddFriend(const struct FScriptDelegate& AddFriendInit);
	void OpenMiniMenu(const struct FScriptDelegate& MiniMenuInit);
	void OpenImageMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenTinyMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenMessageBox(const struct FScriptDelegate& MsgBoxInit, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	struct FString ParseOption(const struct FString& Options, const struct FString& InKey);
	bool IsAnimatingScene();
	void SetAnimatingScene(bool bShowing);
	void UpdateSceneAnimVis();
	void SceneAnimEnded();
	void AnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq);
	bool BeginHideAnimation(bool bClosingScene);
	bool BeginShowAnimation(bool bInitialActivation);
	void FinishCloseScene(class UUIScene* SceneToClose);
	void OnPendingCloseScene_HideAnimationEnded();
	bool CloseScene(class UUIScene* SceneToClose, bool bSkipKismetNotify, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	class UUIScene* FinishOpenScene(class UUIScene* SceneToOpen);
	void OnCurrentScene_HideAnimationEnded();
	class UUIScene* OpenScene(class UUIScene* SceneToOpen, TEnumAsByte<ESceneTransitionAnim> SceneAnim, const struct FScriptDelegate& SceneDelegate);
	void OpenSceneByName(const struct FString& SceneToOpen, TEnumAsByte<ESceneTransitionAnim> SceneAnim, const struct FScriptDelegate& SceneDelegate);
	struct FString FormatTime(float Seconds);
	struct FString TrimWhitespace(const struct FString& InString);
	void SetupButtonBar();
	void ConsoleCommand(const struct FString& Cmd);
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	void OnPreTick(float DeltaTime, bool bTopmostScene);
	void PreventClose();
	class ATdHUD* GetTdHUD();
	class UTdUIInteraction* GetTdInteraction();
	int GetPlayerIndex();
	void TopSceneChanged(class UUIScene* NewTopScene);
	void OnControllerChange(int ControllerId, bool Connected);
	void SceneDeactivated();
	void SceneActivated(bool bInitialActivation);
	void PostInitialize();
	bool TextureFullyStreamed(class UTexture2D* Image);
	bool IsStreamingLevels();
	bool IsPlayingMovie();
	void UpdateMovieStatus();
	void StopMovie();
	void StartMovie(const struct FString& MovieName, bool bForceSkippable, bool bBlockInput);
	int GetVideoSettingValue(TEnumAsByte<EPossibleVideoSettings> Setting);
	void SetVideoSettingValueArray(TArray<TEnumAsByte<EPossibleVideoSettings>> Settings, TArray<int> Values);
	void SetVideoSettingValue(TEnumAsByte<EPossibleVideoSettings> Setting, int Value);
	void SetAudioDeviceToUse(const struct FString& InAudioDevice);
	struct FString GetCurrentAudioDevice();
	void GetPossibleAudioDevices(TArray<struct FString>* OutResults);
	void GetPossibleScreenResolutions(TArray<struct FString>* OutResults);
	void SetScreenResolution(int ResX, int ResY, bool bFullscreen);
	class ATdPlayerController* GetTdPlayerController(int PlayerIndex);
	bool ActivateLevelEvent(const struct FName& EventName);
	void ConvertUnicodeCharsToReadable(struct FString* Str);
	bool IsGame();
	bool OnRawPreInputKey(struct FInputEventParameters* EventParms);
	void OnSceneFullyOpened(class UUIScene* OpenedScene);
	void OnSceneOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void PrivateOnHideAnimationEnded();
	void PrivateOnShowAnimationEnded();
	void OnMessageBoxClosedCallback();
};


// Class TdGame.TdUIScene_SubMenu
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_SubMenu : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SubMenu");
		return ptr;
	}


	void UpdateFocusLabelState(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void RegisterFocusLabelParents(class UUIScreenObject* Parent);
	void PostInitialize();
};


// Class TdGame.TdUIScene_OptionMenu
// 0x0028 (0x0320 - 0x02F8)
class UTdUIScene_OptionMenu : public UTdUIScene_SubMenu
{
public:
	class UUIPanel*                                    SettingsPanel;                                            // 0x02F8(0x0004) (Transient)
	TArray<class UUIObject*>                           OptionObjects;                                            // 0x02FC(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        OldOptionValues;                                          // 0x0308(0x000C) (NeedCtorLink)
	unsigned long                                      bChanged : 1;                                             // 0x0314(0x0004)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x0318(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_OptionMenu");
		return ptr;
	}


	void ResetSettingsToDefault();
	void SaveWidgetValues();
	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnChange();
	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void OnCloseScene(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void DoReset();
	void OnProfileWriteFailed_Closed(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void OnProfileWriteFailed_PreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void ProfileWriteFailed_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnProfileWriteComplete(bool bSucceeded);
	void InitializeSettings();
	void OnAccept();
	void OnCancelChanges();
	void OnCancel_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void OnWillNotSave_OptionSelected(class UTdUIScene_MessageBox* MsgBoxScene, int SelectedOption, int PlayerIndex);
	void WillNotSave_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnCancel();
	void OnReset_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnReset();
	void OnReset_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	bool OnButtonBar_Reset(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void ResetWidgetValues();
	void BackupWidgetValues();
	void InitWidgets();
	void PostInitialize();
};


// Class TdGame.TdUIScene_ControlsSettings
// 0x0054 (0x0374 - 0x0320)
class UTdUIScene_ControlsSettings : public UTdUIScene_OptionMenu
{
public:
	struct FString                                     PCControllerImagePath;                                    // 0x0320(0x000C) (NeedCtorLink)
	struct FString                                     XBoxControllerImagePath;                                  // 0x032C(0x000C) (NeedCtorLink)
	struct FString                                     PS3ControllerImagePath;                                   // 0x0338(0x000C) (NeedCtorLink)
	class UUIPanel*                                    ControllerPanel;                                          // 0x0344(0x0004) (Transient)
	TArray<class UUILabel*>                            ControllerButtonLabels;                                   // 0x0348(0x000C) (Transient, NeedCtorLink)
	class UUILabel*                                    TitleLabel;                                               // 0x0354(0x0004) (Transient)
	class UUIImage*                                    ControllerImage;                                          // 0x0358(0x0004) (Transient)
	TArray<class UUIDataProvider_TdKeyBinding*>        KeyData;                                                  // 0x035C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FKeyBind>                            ControllerBinds;                                          // 0x0368(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ControlsSettings");
		return ptr;
	}


	void SetControllerButtonLabel(const struct FString& KeyName, const struct FString& Str);
	void SetControllerButtonTags();
	void UpdateFocusLabelState(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void InitializeSettings();
	void ResetSettingsToDefault();
	void HideChild(const struct FName& ChildName);
	void InitWidgets();
	void PostInitialize();
	bool GetKeyBindingsData(TArray<class UUIDataProvider_TdKeyBinding*>* LabelData);
};


// Class TdGame.TdUIScene_KeyMappings
// 0x0030 (0x0350 - 0x0320)
class UTdUIScene_KeyMappings : public UTdUIScene_OptionMenu
{
public:
	class UTdUITabControl*                             KeyBindsTabControl;                                       // 0x0320(0x0004) (Transient)
	class UUIImage*                                    KeyBindsTab0BgImage;                                      // 0x0324(0x0004) (Transient)
	class UUIImage*                                    KeyBindsTab0BgTopImage;                                   // 0x0328(0x0004) (Transient)
	class UUIImage*                                    KeyBindsTab1BgImage;                                      // 0x032C(0x0004) (Transient)
	class UUIImage*                                    KeyBindsTab1BgTopImage;                                   // 0x0330(0x0004) (Transient)
	class UUIObject*                                   KeyBindButton_MoveForward_1;                              // 0x0334(0x0004) (Transient)
	class UUIObject*                                   KeyBindButton_Fire_1;                                     // 0x0338(0x0004) (Transient)
	class UTdKeyBindingHandler*                        KeyBindingHandler;                                        // 0x033C(0x0004) (Transient)
	TArray<struct FKeyBindWidgetData>                  KeyBindWidgets;                                           // 0x0340(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bMouseSettingsChanged : 1;                                // 0x034C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_KeyMappings");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnChange();
	void OnMouseSettingsChanges();
	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void InitializeSettings();
	void OnMessageBox_UnboundKeys(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnAccept();
	void DoReset();
	void ResetSettingsToDefault();
	void SetBindLabelState(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	bool IsAllowedBindingKey(const struct FName& Key);
	void InitWidgets();
	void OnTabPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex);
	void PostInitialize();
	void RebuildNavigationLinks();
};


// Class TdGame.TdUIScene_LoadIndicator
// 0x0094 (0x038C - 0x02F8)
class UTdUIScene_LoadIndicator : public UTdUIScene
{
public:
	unsigned long                                      bIsLoadingLevel : 1;                                      // 0x02F8(0x0004) (Transient)
	unsigned long                                      bIsDiscAccess : 1;                                        // 0x02F8(0x0004) (Transient)
	class ATdPlayerController*                         PlayerController;                                         // 0x02FC(0x0004) (Transient)
	class UTdUILoadIndicator*                          IndicatorWidget;                                          // 0x0300(0x0004) (Transient)
	struct FString                                     WriteMessage;                                             // 0x0304(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LongWriteMessage;                                         // 0x0310(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ReadMessage;                                              // 0x031C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LongReadMessage;                                          // 0x0328(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UploadMessage;                                            // 0x0334(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DownloadMessage;                                          // 0x0340(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CreatingSaveDataMessage;                                  // 0x034C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LoadingSaveDataMessage;                                   // 0x0358(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CheckingSaveDataMessage;                                  // 0x0364(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LoadingLevelMessage;                                      // 0x0370(0x000C) (Const, Localized, NeedCtorLink)
	class UMaterialInterface*                          SaveMaterial;                                             // 0x037C(0x0004) (Transient)
	class UMaterialInterface*                          SaveMaterialBlack;                                        // 0x0380(0x0004) (Transient)
	class UMaterialInterface*                          LoadMaterial;                                             // 0x0384(0x0004) (Transient)
	class UMaterialInterface*                          LoadMaterialBlack;                                        // 0x0388(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_LoadIndicator");
		return ptr;
	}


	void Setup(const struct FString& Message, bool bSaving, bool bBlack);
};


// Class TdGame.TdUIScene_LoadLevel
// 0x0054 (0x034C - 0x02F8)
class UTdUIScene_LoadLevel : public UTdUIScene_SubMenu
{
public:
	class UUIPanel*                                    BgPanel;                                                  // 0x02F8(0x0004) (Transient)
	class UUIPanel*                                    MapPreviewPanel;                                          // 0x02FC(0x0004) (Transient)
	class UUIPanel*                                    LevelPanel;                                               // 0x0300(0x0004) (Transient)
	class UUIPanel*                                    CheckpointPanel;                                          // 0x0304(0x0004) (Transient)
	class UUIImage*                                    BgImage;                                                  // 0x0308(0x0004) (Transient)
	class UUIPanel*                                    LevelStatsPanel;                                          // 0x030C(0x0004) (Edit, Transient)
	class UUILabel*                                    BagsFoundDataLabel;                                       // 0x0310(0x0004) (Edit, Transient)
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x0314(0x0004)
	float                                              AnimDuration;                                             // 0x0318(0x0004)
	float                                              AnimTimeCount;                                            // 0x031C(0x0004)
	unsigned long                                      bSceneInitialized : 1;                                    // 0x0320(0x0004)
	unsigned long                                      bToggleVisible : 1;                                       // 0x0320(0x0004)
	float                                              BgPanelDefaultY;                                          // 0x0324(0x0004)
	float                                              MapPreviewPanelDefaultY;                                  // 0x0328(0x0004)
	float                                              LevelPanelDefaultY;                                       // 0x032C(0x0004)
	float                                              LevelPanelDefaultHeight;                                  // 0x0330(0x0004)
	float                                              CheckpointPanelDefaultY;                                  // 0x0334(0x0004)
	float                                              CheckpointPanelDefaultHeight;                             // 0x0338(0x0004)
	float                                              BgImageDefaultY;                                          // 0x033C(0x0004)
	float                                              BgImageDefaultHeight;                                     // 0x0340(0x0004)
	class UUITdOptionButton*                           LevelOptionButton;                                        // 0x0344(0x0004) (Transient)
	class UUIScene*                                    LoadCheckpointScene;                                      // 0x0348(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_LoadLevel");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene_StartGame(class UUIScene* ClosedScene);
	void TryOpenScene();
	void UpdateLevelEvent();
	void OnReadTimesCompleteDelegate(bool bSuccessful);
	void UpdateLevelData();
	void OnCloseScene();
	void OnLevelOptionButton_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void TopSceneChanged(class UUIScene* NewTopScene);
	void SceneActivated(bool bInitialActivation);
	void PostInitialize();
};


// Class TdGame.TdUIScene_MainMenu
// 0x0148 (0x0440 - 0x02F8)
class UTdUIScene_MainMenu : public UTdUIScene
{
public:
	class UUISafeRegionPanel*                          SafeRegionPanel;                                          // 0x02F8(0x0004) (Transient)
	class UUISafeRegionPanel*                          ScreenRegionPanel;                                        // 0x02FC(0x0004) (Transient)
	struct FName                                       PanelNames[0x4];                                          // 0x0300(0x0008)
	struct FName                                       PanelBgNames[0x4];                                        // 0x0320(0x0008)
	struct FName                                       CaptionNames[0x4];                                        // 0x0340(0x0008)
	struct FName                                       BigCaptionNames[0x4];                                     // 0x0360(0x0008)
	class UTdOnlineLoginHandler*                       LoginHandler;                                             // 0x0380(0x0004) (Transient)
	unsigned long                                      bIsAnimatingPanel : 1;                                    // 0x0384(0x0004)
	unsigned long                                      bIsInitialTick : 1;                                       // 0x0384(0x0004)
	unsigned long                                      bShowDownloadsButton : 1;                                 // 0x0384(0x0004) (Config)
	class UUIObject*                                   LastFocusedObject;                                        // 0x0388(0x0004) (Transient)
	struct FTdMainMenuPanelStruct                      PanelData[0x4];                                           // 0x038C(0x0024)
	int                                                CurrentPanelIndex;                                        // 0x041C(0x0004)
	int                                                LastPanelIndex;                                           // 0x0420(0x0004)
	float                                              DefaultStickWidth;                                        // 0x0424(0x0004)
	class UUILabel*                                    DescriptionLabel;                                         // 0x0428(0x0004) (Transient)
	float                                              TimeToFadeStart;                                          // 0x042C(0x0004) (Transient)
	float                                              FadeTime;                                                 // 0x0430(0x0004) (Transient)
	float                                              FadeTimer;                                                // 0x0434(0x0004) (Transient)
	class UTdMenuPostProcesWrapper*                    PanelBGRenderer;                                          // 0x0438(0x0004) (Transient)
	class UUIButton*                                   ButtonFromSceneRestored;                                  // 0x043C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_MainMenu");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnActivated(class UUIScene* ActivatedScene, bool bInitialActivation);
	void SetCaptionVisibility(int PanelIndex, bool bVisible);
	void SetPanelVisibility(int PanelIndex, bool bVisible);
	void PanelAnimFinished(int FinishedPanelIndex, bool bPanelActive);
	void SetActivePanel(int PanelIndex, bool Silent);
	void SwitchTab(int Dir);
	void OnQuitConfirmed(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnQuitConfirm_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnQuitGame();
	void SetInitialWidgetValues();
	void ReadInitialWidgetValues();
	void UpdateSelectionField();
	void Tick(float DeltaTime);
	bool OnButtonClicked_Panel3(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonClicked_Panel2(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonClicked_Panel1(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonClicked_Panel0(class UUIScreenObject* Sender, int PlayerIndex);
	void OpenLeaderboardSceneCallback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenLevelRaceOfflineSceneCallback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenLevelRaceSceneCallback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenTimeTrialOfflineSceneCallback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OpenTimeTrialSceneCallback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnUnlocks();
	void OnCredits();
	void OnAchievements();
	void OnDownloads_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDownloads();
	void OnGamepadSettings();
	void OnGameSettings();
	void OnVideoSettings();
	void OnAudioSettings();
	void OnControlsSettings();
	void OnShowFriendsScene_Callback(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnShowFriends();
	void OnTimeTrialLeaderboard();
	void OnLevelRace();
	void OnTimeTrialRace();
	bool CanContinueGame();
	void OnLoadSaveGame();
	void OnLoadLevel();
	void OpenNewGameScene(bool bSkipPrevSceneAnim);
	void OnNewGameWarning_Callback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnNewGameWarning_PreCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnStartGame_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnStartGame();
	bool HandleButtonClicked(class UUILabelButton* InButton);
	void SceneRestored();
	void SceneSavedForRestore();
	void SceneDeactivated();
	void OnRebootErrorMessageCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ConnectionLost_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void SceneActivated(bool bInitialActivation);
	bool OnPanelButton_Clicked(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_QuitGame(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_ShowFriends(class UUIScreenObject* Sender, int PlayerIndex);
	void OnControllerChange(int ControllerId, bool Connected);
	void UpdateGamepadSettingVis(bool bIsVisible);
	void UpdateButtonBar(bool bAcceptVisible);
	void SetupButtonBar();
	void ButtonStateChange(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void InitializeWidgetsData();
	void PostInitialize();
};


// Class TdGame.TdUIScene_Overlay
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_Overlay : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Overlay");
		return ptr;
	}

};


// Class TdGame.TdUIScene_MessageBox
// 0x0084 (0x037C - 0x02F8)
class UTdUIScene_MessageBox : public UTdUIScene_Overlay
{
public:
	class UUILabel*                                    TitleLabel;                                               // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    MessageLabel;                                             // 0x02FC(0x0004) (Transient)
	class UUISafeRegionPanel*                          SafeRegionPanel;                                          // 0x0300(0x0004) (Transient)
	class UUIScrollFrame*                              ScrollFrame;                                              // 0x0304(0x0004) (Transient)
	class UUIPanel*                                    ScenePanel;                                               // 0x0308(0x0004) (Transient)
	TArray<struct FString>                             PotentialOptions;                                         // 0x030C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPotentialOptionKeys>                PotentialOptionKeyMappings;                               // 0x0318(0x000C) (Transient, NeedCtorLink)
	int                                                DefaultOptionIdx;                                         // 0x0324(0x0004) (Transient)
	float                                              MinimumDisplayTime;                                       // 0x0328(0x0004) (Transient)
	float                                              DisplayTimeElapsed;                                       // 0x032C(0x0004) (Transient)
	unsigned long                                      bCloseHasBeenInvoked : 1;                                 // 0x0330(0x0004) (Transient)
	unsigned long                                      bModalIsClosing : 1;                                      // 0x0330(0x0004) (Transient)
	unsigned long                                      bIsModal : 1;                                             // 0x0330(0x0004) (Transient)
	unsigned long                                      bHandleDeviceRemoved : 1;                                 // 0x0330(0x0004) (Transient)
	int                                                SelectedOptionIndex;                                      // 0x0334(0x0004) (Transient)
	int                                                SelectedOptionPlayerIndex;                                // 0x0338(0x0004) (Transient)
	TEnumAsByte<ESceneTransitionAnim>                  SceneTransitionAnimOveride;                               // 0x033C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnSelection__Delegate;                                  // 0x0340(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClosed__Delegate;                                     // 0x034C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMBInputKey__Delegate;                                 // 0x0358(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPreSelecting__Delegate;                               // 0x0364(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnNotifyOptionSelected__Delegate;                       // 0x0370(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_MessageBox");
		return ptr;
	}


	int FindCancelButtonIndex(const struct FString& CancelButtonMarkupString);
	bool OnOptionButton_Clicked(class UUIScreenObject* EventObject, int PlayerIndex);
	void OnOptionSelected(class UUIScene* ClosedScene);
	void OnSceneClosed(class UUIScene* ClosedScene);
	void OnCloseScene(const struct FScriptDelegate& SceneClosedDelegate);
	void OptionSelected(int OptionIdx, int PlayerIndex);
	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void Display(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate, bool RenderParents, int InDefaultOptionIdx);
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	void DisplayModalBox(const struct FString& Message, const struct FString& Title, float InMinDisplayTime);
	void DisplayAcceptCancelRetryBox(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate, bool RenderParents);
	void DisplayAcceptCancelRetryBoxOnline(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate, bool RenderParents);
	bool IsDeviceRemoved();
	void DisplayAcceptCancelBox(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate, bool RenderParents);
	void DisplayCancelBox(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate);
	void DisplayAcceptBox(const struct FString& Message, const struct FString& Title, const struct FScriptDelegate& InSelectionDelegate);
	void Close(bool bOverrideTimeDelay, bool bSimulateCancel, int PlayerIndex);
	void ReSize();
	void SetScale(float ScaleX, float ScaleY);
	void SetMessage(const struct FString& NewMessage);
	void SetTitle(const struct FString& NewTitle);
	void SetPotentialOptionKeyMappings(TArray<struct FPotentialOptionKeys> InPotentialOptionKeyMappings);
	void SetPotentialOptions(TArray<struct FString> InPotentialOptions, TArray<struct FPotentialOptionKeys> InPotentialOptionKeyMappings);
	void OnNotifyOptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnPreSelecting();
	bool OnMBInputKey(struct FInputEventParameters* EventParms);
	void OnClosed();
	void OnSelection(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
};


// Class TdGame.TdUIScene_MiniMenu
// 0x003C (0x0334 - 0x02F8)
class UTdUIScene_MiniMenu : public UTdUIScene_Overlay
{
public:
	class UUIList*                                     OptionList;                                               // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    TitleLabel;                                               // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    SubtitleLabel;                                            // 0x0300(0x0004) (Transient)
	class UUIDataStore_TdMiniMenuData*                 MenuData;                                                 // 0x0304(0x0004)
	struct FName                                       MenuDataStoreName;                                        // 0x0308(0x0008)
	TArray<struct FString>                             Options;                                                  // 0x0310(0x000C) (Transient, NeedCtorLink)
	TArray<struct FScriptDelegate>                     OptionCallbacks;                                          // 0x031C(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnOptionCallback__Delegate;                             // 0x0328(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_MiniMenu");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	bool OnMBInputKey(struct FInputEventParameters* EventParms);
	void OnSceneClosed_FireOption(class UUIScene* ClosedScene);
	void FireOptionSelected(const struct FScriptDelegate& OptionCallback);
	void OnOptionSelected();
	void AddOption(const struct FString& Option, const struct FScriptDelegate& CallbackFunc);
	void OnOptionsList_SubmitSelection(class UUIList* Sender, int PlayerIndex);
	void SceneDeactivated();
	void OnCloseScene();
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
	void OnOptionCallback();
};


// Class TdGame.TdUIScene_Popup
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_Popup : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Popup");
		return ptr;
	}

};


// Class TdGame.TdUIScene_Start
// 0x0054 (0x034C - 0x02F8)
class UTdUIScene_Start : public UTdUIScene
{
public:
	class UUIScene*                                    MainMenuScene;                                            // 0x02F8(0x0004)
	class UUILabel*                                    PressStartLabel;                                          // 0x02FC(0x0004) (Transient)
	class UUISafeRegionPanel*                          SafeRegionPanel;                                          // 0x0300(0x0004) (Transient)
	unsigned char                                      StoredLocalUserNum;                                       // 0x0304(0x0001) (Transient)
	TEnumAsByte<ETsResult>                             SaveInitResult;                                           // 0x0305(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0306(0x0002) MISSED OFFSET
	float                                              TimeElapsed;                                              // 0x0308(0x0004) (Transient)
	struct FString                                     MovieName;                                                // 0x030C(0x000C) (Transient, Config, NeedCtorLink)
	float                                              TimeTillAttractMovie;                                     // 0x0318(0x0004) (Transient, Config)
	unsigned long                                      bBlockAttractMode : 1;                                    // 0x031C(0x0004) (Transient)
	unsigned long                                      bSkippedfirstTick : 1;                                    // 0x031C(0x0004) (Transient)
	unsigned long                                      bGoToLoadGame : 1;                                        // 0x031C(0x0004) (Config)
	float                                              TimeElapsedInScene;                                       // 0x0320(0x0004) (Transient)
	float                                              TimeTillStartButton;                                      // 0x0324(0x0004) (Transient, Config)
	class UTdInitSaveSystem*                           InitSaveSystem;                                           // 0x0328(0x0004) (Transient)
	class UTdUIScene_MessageBox*                       ModalInitSavefileMessageBox;                              // 0x032C(0x0004) (Transient)
	struct FString                                     SaveErrorMessageBody;                                     // 0x0330(0x000C) (Transient, NeedCtorLink)
	struct FString                                     SaveErrorMessageTitle;                                    // 0x033C(0x000C) (Transient, NeedCtorLink)
	class UUIScene*                                    LoadLevelScene;                                           // 0x0348(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Start");
		return ptr;
	}


	void StartGame();
	void StartGameNoSave();
	void OnInitSavefileSystemDone();
	void InitSavefileSystem(bool bAutoReplaceCorrupt);
	void OnShowSaveInfoBox(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowSaveInfoBox_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowSaveInfoBox();
	void OnShowNoProfileErrorBox(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowNoProfileErrorBox_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowNoProfileErrorBox();
	void OnUIChanged(bool bIsOpening);
	void CheckProfile();
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnRebootErrorMessageCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void RebootReasonSigninChangeTitle_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void SceneActivated(bool bInitialActivation);
	void StopMovie();
};


// Class TdGame.TdUIScene_SupersMessage
// 0x0008 (0x0300 - 0x02F8)
class UTdUIScene_SupersMessage : public UTdUIScene
{
public:
	class UUILabel*                                    SupersLabel;                                              // 0x02F8(0x0004) (Transient)
	float                                              Duration;                                                 // 0x02FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SupersMessage");
		return ptr;
	}


	void SetupSupersMessage(const struct FString& Text, float TextDuration);
};


// Class TdGame.TdUIScene_TdCredits
// 0x0060 (0x0358 - 0x02F8)
class UTdUIScene_TdCredits : public UTdUIScene
{
public:
	class UUIPanel*                                    CreditsPanel;                                             // 0x02F8(0x0004) (Transient)
	class UUIImage*                                    LogoImage;                                                // 0x02FC(0x0004) (Transient)
	class UUIImage*                                    StickImage;                                               // 0x0300(0x0004) (Transient)
	class UTdMenuPostProcesWrapper*                    PanelBGRenderer;                                          // 0x0304(0x0004) (Transient)
	TArray<struct FTdCreditsBlock>                     CreditBlocks;                                             // 0x0308(0x000C) (Transient, NeedCtorLink)
	float                                              StartTime;                                                // 0x0314(0x0004) (Transient)
	float                                              ScrollSpeed;                                              // 0x0318(0x0004) (Transient)
	struct FLinearColor                                CurrentCreditsTextColor;                                  // 0x031C(0x0010) (Transient)
	int                                                MaxBlocksToRead;                                          // 0x032C(0x0004) (Transient)
	int                                                NumBlocks;                                                // 0x0330(0x0004) (Transient)
	int                                                BlockWindowOffset;                                        // 0x0334(0x0004) (Transient)
	float                                              BlockYOffset;                                             // 0x0338(0x0004) (Transient)
	class UMultiFont*                                  Fonts[0x3];                                               // 0x033C(0x0004)
	unsigned long                                      bIsFinalCredits : 1;                                      // 0x0348(0x0004)
	struct FScriptDelegate                             __OnCloseCredits__Delegate;                               // 0x034C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TdCredits");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void SceneClosed(class UUIScene* ClosedScene);
	void OnCloseScene();
	void SetFinalCredits(const struct FScriptDelegate& OnClose);
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	void SceneDeactivated();
	void UpdateSceneWidgets();
	void PostInitialize();
	void OnCloseCredits();
};


// Class TdGame.TdUIScene_TutorialHUDMessage
// 0x0038 (0x0330 - 0x02F8)
class UTdUIScene_TutorialHUDMessage : public UTdUIScene
{
public:
	class UUILabel*                                    MessageText;                                              // 0x02F8(0x0004) (Transient)
	float                                              PopUpTimeStamp;                                           // 0x02FC(0x0004) (Transient)
	unsigned long                                      bAutoClose : 1;                                           // 0x0300(0x0004) (Transient)
	unsigned long                                      bFallButtonThrough : 1;                                   // 0x0300(0x0004) (Transient)
	unsigned long                                      bIgnoreCloseOnContinue : 1;                               // 0x0300(0x0004) (Transient)
	float                                              Duration;                                                 // 0x0304(0x0004) (Transient)
	TArray<struct FName>                               ContinueKeyNames;                                         // 0x0308(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               PauseKeyNames;                                            // 0x0314(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               IGMKeyNames;                                              // 0x0320(0x000C) (Transient, NeedCtorLink)
	class UUIPanel*                                    ScenePanel;                                               // 0x032C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TutorialHUDMessage");
		return ptr;
	}


	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnOpenInGameMenu();
	void OnPauseGame();
	void SetText(const struct FString& Text);
	void OnContinue();
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupCustomButtonBar(const struct FString& ButtonCallout, TEnumAsByte<EDigitalButtonActions> Key, bool bFallThrough);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_VideoSettings
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_VideoSettings : public UTdUIScene_OptionMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_VideoSettings");
		return ptr;
	}


	void SaveWidgetValues();
	void InitializeSettings();
	void ResetSettingsToDefault();
};


// Class TdGame.TdUIScene_VideoSettingsPC
// 0x0034 (0x0354 - 0x0320)
class UTdUIScene_VideoSettingsPC : public UTdUIScene_VideoSettings
{
public:
	class UUIDataStore_TdStringList*                   StringList;                                               // 0x0320(0x0004)
	struct FScreenResSetting                           OldResolution;                                            // 0x0324(0x000C) (Transient)
	struct FScreenResSetting                           NewResolution;                                            // 0x0330(0x000C) (Transient)
	int                                                OldVSyncVal;                                              // 0x033C(0x0004)
	int                                                OldTexDetailVal;                                          // 0x0340(0x0004)
	int                                                OldGfxQualVal;                                            // 0x0344(0x0004)
	int                                                OldAAVal;                                                 // 0x0348(0x0004)
	int                                                OldPhysXVal;                                              // 0x034C(0x0004)
	unsigned long                                      bSupportsCSAA : 1;                                        // 0x0350(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_VideoSettingsPC");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void ResetSettingsToDefault();
	void ApplyDetectedSettings();
	int GetAAValue(const struct FString& AAStr);
	struct FString GetAntiAliasingString(int MaxMultiSamples);
	void ApplyVideoSettings();
	void PhysXChangedMsgBox_Selection(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void PhysXChangedMsgBox_PreSelection(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void DisplayPhysXChangedMsgBox(class UTdUIScene_MessageBox* MsgBox, const struct FString& Message, const struct FString& Title);
	void PhysXChangedNotSupported(class UUIScene* OpenedScene, bool bInitialActivation);
	void PhysXChanged(class UUIScene* OpenedScene, bool bInitialActivation);
	bool CheckPhysXChanged();
	void OnAcceptForce();
	void OnAccept();
	void SetupCurrentSettings();
	void OnReset();
	void DisableVideoSettings();
	void PostInitialize();
	bool GetPhysXSupported();
	bool GetSupportedAAModes(TArray<struct FString>* AAModes);
};


// Class TdGame.TdUITabButton
// 0x0000 (0x0430 - 0x0430)
class UTdUITabButton : public UUITabButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabButton");
		return ptr;
	}

};


// Class TdGame.TdUITextSlider
// 0x0050 (0x04B4 - 0x0464)
class UTdUITextSlider : public UUISlider
{
public:
	struct FUIStyleReference                           LeftArrowStyle;                                           // 0x0464(0x0020)
	struct FUIStyleReference                           RightArrowStyle;                                          // 0x0484(0x0020)
	class UClass*                                      LeftArrowState;                                           // 0x04A4(0x0004)
	class UClass*                                      RightArrowState;                                          // 0x04A8(0x0004)
	class UUITexture*                                  LeftArrowTexture;                                         // 0x04AC(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline, EditInlineUse)
	class UUITexture*                                  RightArrowTexture;                                        // 0x04B0(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline, EditInlineUse)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITextSlider");
		return ptr;
	}

};


// Class TdGame.UIAction_DisplayMiniMenu
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_DisplayMiniMenu : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                              // 0x00E4(0x0004)
	class UUIScene*                                    OpenedScene;                                              // 0x00E8(0x0004) (Transient)
	class UUIScene*                                    MessageBoxScene;                                          // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_DisplayMiniMenu");
		return ptr;
	}


	void OnMenuClosed(int InPlayerIndex, bool bInAcceptOk);
};


// Class TdGame.UIAction_TdAddMapToCycle
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_TdAddMapToCycle : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdAddMapToCycle");
		return ptr;
	}

};


// Class TdGame.UIAction_TdCloseScene
// 0x0004 (0x00EC - 0x00E8)
class UUIAction_TdCloseScene : public UUIAction_Scene
{
public:
	class UTdUIScene*                                  ClosedScene;                                              // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdCloseScene");
		return ptr;
	}

};


// Class TdGame.UIAction_TdCreateGame
// 0x0030 (0x0114 - 0x00E4)
class UUIAction_TdCreateGame : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                            // 0x00E4(0x0008) (Edit)
	struct FString                                     startLevelName;                                           // 0x00EC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     startCheckpointName;                                      // 0x00F8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      attemptLoad : 1;                                          // 0x0104(0x0004) (Edit)
	unsigned long                                      done : 1;                                                 // 0x0104(0x0004)
	unsigned long                                      Success : 1;                                              // 0x0104(0x0004)
	struct FString                                     ExecCmd;                                                  // 0x0108(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdCreateGame");
		return ptr;
	}

};


// Class TdGame.UIAction_TdCreateLobby
// 0x0018 (0x00FC - 0x00E4)
class UUIAction_TdCreateLobby : public UUIAction
{
public:
	struct FString                                     LobbyLevel;                                               // 0x00E4(0x000C) (NeedCtorLink)
	struct FString                                     LobbyGameMode;                                            // 0x00F0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdCreateLobby");
		return ptr;
	}

};


// Class TdGame.UIAction_TdCreateMPGame
// 0x0030 (0x0114 - 0x00E4)
class UUIAction_TdCreateMPGame : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                            // 0x00E4(0x0008) (Edit)
	struct FString                                     MapName;                                                  // 0x00EC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsDone : 1;                                              // 0x00F8(0x0004)
	unsigned long                                      bSuccess : 1;                                             // 0x00F8(0x0004)
	struct FString                                     Parameters;                                               // 0x00FC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ExecCmd;                                                  // 0x0108(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdCreateMPGame");
		return ptr;
	}

};


// Class TdGame.UIAction_TdEnableOnFocus
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdEnableOnFocus : public UUIAction
{
public:
	unsigned long                                      isOwnerFocused : 1;                                       // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdEnableOnFocus");
		return ptr;
	}

};


// Class TdGame.UIAction_TdGetCheckpointData
// 0x003C (0x0120 - 0x00E4)
class UUIAction_TdGetCheckpointData : public UUIAction
{
public:
	struct FName                                       ResourceDataStoreName;                                    // 0x00E4(0x0008)
	int                                                CheckpointIndex;                                          // 0x00EC(0x0004) (Edit)
	struct FString                                     FriendlyName;                                             // 0x00F0(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x00FC(0x000C) (NeedCtorLink)
	struct FString                                     CheckpointName;                                           // 0x0108(0x000C) (NeedCtorLink)
	struct FString                                     ImageMarkup;                                              // 0x0114(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdGetCheckpointData");
		return ptr;
	}

};


// Class TdGame.UIAction_TdGetFirstMapCycleMap
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_TdGetFirstMapCycleMap : public UUIAction
{
public:
	struct FString                                     MapFileName;                                              // 0x00E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdGetFirstMapCycleMap");
		return ptr;
	}

};


// Class TdGame.UIAction_TdGetMapData
// 0x004C (0x0130 - 0x00E4)
class UUIAction_TdGetMapData : public UUIAction
{
public:
	struct FName                                       ResourceDataStoreName;                                    // 0x00E4(0x0008)
	int                                                MapIndex;                                                 // 0x00EC(0x0004) (Edit)
	struct FString                                     Filename;                                                 // 0x00F0(0x000C) (NeedCtorLink)
	struct FString                                     FriendlyName;                                             // 0x00FC(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x0108(0x000C) (NeedCtorLink)
	struct FString                                     MapName;                                                  // 0x0114(0x000C) (NeedCtorLink)
	struct FString                                     ImageMarkup;                                              // 0x0120(0x000C) (NeedCtorLink)
	int                                                NumCheckPoints;                                           // 0x012C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdGetMapData");
		return ptr;
	}

};


// Class TdGame.UIAction_TdGetOptionButtonCellValue
// 0x0000 (0x0124 - 0x0124)
class UUIAction_TdGetOptionButtonCellValue : public UUIAction_GetCellValue
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdGetOptionButtonCellValue");
		return ptr;
	}

};


// Class TdGame.UIAction_TdGetOptionButtonIndex
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_TdGetOptionButtonIndex : public UUIAction_GetValue
{
public:
	int                                                CurrentIndex;                                             // 0x00E4(0x0004)
	int                                                CurrentListIndex;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdGetOptionButtonIndex");
		return ptr;
	}

};


// Class TdGame.UIAction_TdInitializeMapCycle
// 0x0000 (0x00E4 - 0x00E4)
class UUIAction_TdInitializeMapCycle : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdInitializeMapCycle");
		return ptr;
	}

};


// Class TdGame.UIAction_TdLoadMap
// 0x000C (0x00F0 - 0x00E4)
class UUIAction_TdLoadMap : public UUIAction
{
public:
	struct FString                                     Filename;                                                 // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdLoadMap");
		return ptr;
	}

};


// Class TdGame.UIAction_TdMainMenuStickCaptionAnimation
// 0x0008 (0x00EC - 0x00E4)
class UUIAction_TdMainMenuStickCaptionAnimation : public UUIAction
{
public:
	class UTdUIScene_MainMenu*                         MainMenuScene;                                            // 0x00E4(0x0004)
	unsigned long                                      bIsDone : 1;                                              // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdMainMenuStickCaptionAnimation");
		return ptr;
	}


	void CaptionDoneCallback();
	void Activated();
};


// Class TdGame.UIAction_TdMessageBox
// 0x001C (0x0100 - 0x00E4)
class UUIAction_TdMessageBox : public UUIAction
{
public:
	struct FString                                     TitleMarkup;                                              // 0x00E4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MessageMarkup;                                            // 0x00F0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bSimpleBox : 1;                                           // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDone : 1;                                                // 0x00FC(0x0004)
	unsigned long                                      bReturnedTrue : 1;                                        // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdMessageBox");
		return ptr;
	}


	void OnMessageBox_Cancel();
	void OnMessageBox_Accept();
	void OnMessageBox_OptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PIndex);
	void OnMessageBoxOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnActivated();
};


// Class TdGame.UIAction_TdMoveMapCycleMap
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdMoveMapCycleMap : public UUIAction
{
public:
	int                                                MoveAmount;                                               // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdMoveMapCycleMap");
		return ptr;
	}

};


// Class TdGame.UIAction_TdOpenScene
// 0x0004 (0x00EC - 0x00E8)
class UUIAction_TdOpenScene : public UUIAction_Scene
{
public:
	class UTdUIScene*                                  OpenedScene;                                              // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdOpenScene");
		return ptr;
	}

};


// Class TdGame.UIAction_TdRemoveMapFromCycle
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdRemoveMapFromCycle : public UUIAction
{
public:
	unsigned long                                      bRemoveAll : 1;                                           // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdRemoveMapFromCycle");
		return ptr;
	}

};


// Class TdGame.UIAction_TdResetToDefault
// 0x0001 (0x00E5 - 0x00E4)
class UUIAction_TdResetToDefault : public UUIAction
{
public:
	TEnumAsByte<ETdOptionGroup>                        OptionGroup;                                              // 0x00E4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdResetToDefault");
		return ptr;
	}

};


// Class TdGame.UIAction_TdSaveGameExists
// 0x0014 (0x00F8 - 0x00E4)
class UUIAction_TdSaveGameExists : public UUIAction
{
public:
	struct FString                                     Filename;                                                 // 0x00E4(0x000C) (Edit, NeedCtorLink)
	int                                                bIsDone;                                                  // 0x00F0(0x0004)
	int                                                bFileExists;                                              // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdSaveGameExists");
		return ptr;
	}

};


// Class TdGame.UIAction_TdServerTravel
// 0x0018 (0x00FC - 0x00E4)
class UUIAction_TdServerTravel : public UUIAction
{
public:
	struct FString                                     MapName;                                                  // 0x00E4(0x000C) (NeedCtorLink)
	struct FString                                     OnlineSettingsDataStore;                                  // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdServerTravel");
		return ptr;
	}

};


// Class TdGame.UIAction_TdTransferMap
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdTransferMap : public UUIAction
{
public:
	unsigned long                                      bTransferToProfile : 1;                                   // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdTransferMap");
		return ptr;
	}

};


// Class TdGame.UIAction_TdTransferMapCycle
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdTransferMapCycle : public UUIAction
{
public:
	unsigned long                                      bTransferToProfile : 1;                                   // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdTransferMapCycle");
		return ptr;
	}

};


// Class TdGame.UIAction_TdTransferSettings
// 0x0004 (0x00E8 - 0x00E4)
class UUIAction_TdTransferSettings : public UUIAction
{
public:
	unsigned long                                      bTransferToProfile : 1;                                   // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdTransferSettings");
		return ptr;
	}

};


// Class TdGame.UIComp_TdDropShadowString
// 0x0028 (0x0194 - 0x016C)
class UUIComp_TdDropShadowString : public UUIComp_DrawString
{
public:
	struct FUIStyleReference                           DropShadowStyle;                                          // 0x016C(0x0020) (Edit)
	float                                              VerticalPctOffset;                                        // 0x018C(0x0004) (Edit)
	float                                              HorizontalPctOffset;                                      // 0x0190(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIComp_TdDropShadowString");
		return ptr;
	}

};


// Class TdGame.UIComp_TdOutlineString
// 0x0024 (0x0190 - 0x016C)
class UUIComp_TdOutlineString : public UUIComp_DrawString
{
public:
	struct FUIStyleReference                           OutlineStyle;                                             // 0x016C(0x0020) (Edit)
	float                                              OutlineThickness;                                         // 0x018C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIComp_TdOutlineString");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdResource
// 0x0004 (0x006C - 0x0068)
class UUIDataProvider_TdResource : public UUIResourceDataProvider
{
public:
	int                                                Filter;                                                   // 0x0068(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdResource");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_UnlocksProvider
// 0x002C (0x0098 - 0x006C)
class UUIDataProvider_UnlocksProvider : public UUIDataProvider_TdResource
{
public:
	struct FString                                     FriendlyName;                                             // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     ResourcePath;                                             // 0x0084(0x000C) (Config, NeedCtorLink)
	int                                                LevelId;                                                  // 0x0090(0x0004) (Config)
	int                                                UnlockId;                                                 // 0x0094(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_UnlocksProvider");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_ArtworkUnlocks
// 0x0000 (0x0098 - 0x0098)
class UUIDataProvider_ArtworkUnlocks : public UUIDataProvider_UnlocksProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_ArtworkUnlocks");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_MusicUnlocks
// 0x0000 (0x0098 - 0x0098)
class UUIDataProvider_MusicUnlocks : public UUIDataProvider_UnlocksProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_MusicUnlocks");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdAccountProvider
// 0x000C (0x0078 - 0x006C)
class UUIDataProvider_TdAccountProvider : public UUIDataProvider_TdResource
{
public:
	TArray<struct FECountryPair>                       Countries;                                                // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdAccountProvider");
		return ptr;
	}


	void ClearCountries();
	void AddCountry(const struct FString& CountryName, const struct FString& CountryTag, int RegisterMinAge, int ParentalControlMinAge);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class TdGame.UIDataProvider_TdGameObjectiveProvider
// 0x0034 (0x00A0 - 0x006C)
class UUIDataProvider_TdGameObjectiveProvider : public UUIDataProvider_TdResource
{
public:
	struct FString                                     FriendlyName;                                             // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     ImagePath;                                                // 0x0084(0x000C) (Config, NeedCtorLink)
	TArray<struct FSubObjectiveStruct>                 SubObjectives;                                            // 0x0090(0x000C) (Config, NeedCtorLink)
	int                                                CurrentActiveSubObjectiveIndex;                           // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdGameObjectiveProvider");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdChallengeObjectiveProvider
// 0x0004 (0x00A4 - 0x00A0)
class UUIDataProvider_TdChallengeObjectiveProvider : public UUIDataProvider_TdGameObjectiveProvider
{
public:
	int                                                ChallengeId;                                              // 0x00A0(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdChallengeObjectiveProvider");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdGameModes
// 0x0030 (0x009C - 0x006C)
class UUIDataProvider_TdGameModes : public UUIDataProvider_TdResource
{
public:
	struct FString                                     GameModeClass;                                            // 0x006C(0x000C) (Config, NeedCtorLink)
	struct FString                                     FriendlyName;                                             // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0084(0x000C) (Const, Config, Localized, NeedCtorLink)
	TArray<struct FTdGameModes_RoleIdStruct>           Roles;                                                    // 0x0090(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdGameModes");
		return ptr;
	}


	bool IsProviderDisabled();
};


// Class TdGame.UIDataProvider_TdKeyBinding
// 0x0018 (0x0084 - 0x006C)
class UUIDataProvider_TdKeyBinding : public UUIDataProvider_TdResource
{
public:
	struct FString                                     FriendlyName;                                             // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Command;                                                  // 0x0078(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdKeyBinding");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdStretch
// 0x002C (0x0098 - 0x006C)
class UUIDataProvider_TdStretch : public UUIDataProvider_TdResource
{
public:
	struct FString                                     FriendlyName;                                             // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     MapFileName;                                              // 0x0084(0x000C) (Config, NeedCtorLink)
	struct FName                                       StretchNameId;                                            // 0x0090(0x0008) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdStretch");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdLevelRaceStretch
// 0x0004 (0x009C - 0x0098)
class UUIDataProvider_TdLevelRaceStretch : public UUIDataProvider_TdStretch
{
public:
	float                                              QualifyingTime;                                           // 0x0098(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdLevelRaceStretch");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdMainMenuItems_Singleplayer
// 0x0018 (0x0084 - 0x006C)
class UUIDataProvider_TdMainMenuItems_Singleplayer : public UUIDataProvider_TdResource
{
public:
	struct FString                                     FriendlyName;                                             // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdMainMenuItems_Singleplayer");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdMaps
// 0x0058 (0x00C4 - 0x006C)
class UUIDataProvider_TdMaps : public UUIDataProvider_TdResource
{
public:
	struct FString                                     Filename;                                                 // 0x006C(0x000C) (Config, NeedCtorLink)
	struct FString                                     MapName;                                                  // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0084(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     LevelImageMarkup;                                         // 0x0090(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bIsTutorialMap : 1;                                       // 0x009C(0x0004) (Config)
	struct FString                                     LevelEvent;                                               // 0x00A0(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameMode;                                                 // 0x00AC(0x000C) (Config, NeedCtorLink)
	TArray<struct FTdMapCheckpoint>                    Checkpoints;                                              // 0x00B8(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdMaps");
		return ptr;
	}


	bool IsProviderDisabled();
};


// Class TdGame.UIDataProvider_TdOnlineFriendMessages
// 0x0000 (0x00B4 - 0x00B4)
class UUIDataProvider_TdOnlineFriendMessages : public UUIDataProvider_OnlineFriendMessages
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdOnlineFriendMessages");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdOnlineFriends
// 0x0000 (0x00C0 - 0x00C0)
class UUIDataProvider_TdOnlineFriends : public UUIDataProvider_OnlineFriends
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdOnlineFriends");
		return ptr;
	}


	void OnFriendsChange();
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class TdGame.UIDataProvider_TdPersonaProvider
// 0x000C (0x0078 - 0x006C)
class UUIDataProvider_TdPersonaProvider : public UUIDataProvider_TdResource
{
public:
	TArray<struct FString>                             Personas;                                                 // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdPersonaProvider");
		return ptr;
	}


	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class TdGame.UIDataProvider_TdRoles
// 0x0034 (0x00A0 - 0x006C)
class UUIDataProvider_TdRoles : public UUIDataProvider_TdResource
{
public:
	int                                                RoleId;                                                   // 0x006C(0x0004) (Config)
	struct FString                                     RoleClass;                                                // 0x0070(0x000C) (Config, NeedCtorLink)
	struct FString                                     RoleName;                                                 // 0x007C(0x000C) (Config, NeedCtorLink)
	struct FString                                     RoleImageMarkup;                                          // 0x0088(0x000C) (Config, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0094(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdRoles");
		return ptr;
	}


	bool IsProviderDisabled();
};


// Class TdGame.UIDataProvider_TdSimpleElementProvider
// 0x0004 (0x005C - 0x0058)
class UUIDataProvider_TdSimpleElementProvider : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x0058(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdSimpleElementProvider");
		return ptr;
	}


	int GetElementCount();
};


// Class TdGame.UIDataProvider_TdSimpleMenuItem
// 0x0014 (0x0080 - 0x006C)
class UUIDataProvider_TdSimpleMenuItem : public UUIDataProvider_TdResource
{
public:
	struct FName                                       FieldName;                                                // 0x006C(0x0008) (Config)
	TArray<struct FString>                             Options;                                                  // 0x0074(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdSimpleMenuItem");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdStringArray
// 0x000C (0x0068 - 0x005C)
class UUIDataProvider_TdStringArray : public UUIDataProvider_TdSimpleElementProvider
{
public:
	TArray<struct FString>                             Strings;                                                  // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdStringArray");
		return ptr;
	}


	int GetElementCount();
};


// Class TdGame.UIDataStore_TdGameResource
// 0x0000 (0x00C4 - 0x00C4)
class UUIDataStore_TdGameResource : public UUIDataStore_GameResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdGameResource");
		return ptr;
	}


	bool GetStringValueFromProviderSet(const struct FName& ProviderFieldName, const struct FName& SearchTag, int ListIndex, struct FString* OutString);
	bool GetValueFromProviderSet(const struct FName& ProviderFieldName, const struct FName& SearchTag, int ListIndex, struct FUIProviderFieldValue* OutValue);
	int GetProviderCount(const struct FName& FieldName, bool bDoNotFilter);
};


// Class TdGame.TdGhost
// 0x0024 (0x0060 - 0x003C)
class UTdGhost : public UObject
{
public:
	struct FTdGhostInfo                                Info;                                                     // 0x003C(0x0018) (NeedCtorLink)
	TArray<unsigned char>                              RawBytes;                                                 // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGhost");
		return ptr;
	}

};


// Class TdGame.UIDataStore_TdTimeTrialData
// 0x00FC (0x01C0 - 0x00C4)
class UUIDataStore_TdTimeTrialData : public UUIDataStore_TdGameResource
{
public:
	class UUIDataProvider_TdTimeTrialDataHandler*      TimeTrialDataProvider;                                    // 0x00C4(0x0004)
	struct FTTUIInfo                                   ProviderData;                                             // 0x00C8(0x0030) (NeedCtorLink)
	int                                                CurrentRaceModeId;                                        // 0x00F8(0x0004)
	int                                                CurrentStretchProviderIndex;                              // 0x00FC(0x0004)
	int                                                CurrentStretchId;                                         // 0x0100(0x0004)
	int                                                CurrentControllerId;                                      // 0x0104(0x0004)
	TArray<struct FName>                               StretchIdMapping;                                         // 0x0108(0x000C) (Const, NeedCtorLink)
	int                                                WeeklyGhostCutoffRank;                                    // 0x0114(0x0004) (Config)
	int                                                MonthlyGhostCutoffRank;                                   // 0x0118(0x0004) (Config)
	class UTdTTInput*                                  TTOfflineInput;                                           // 0x011C(0x0004) (Transient)
	class UTdTTInput*                                  TTOnlineInput;                                            // 0x0120(0x0004) (Transient)
	class UTdTTResult*                                 TTOfflineResult;                                          // 0x0124(0x0004) (Transient)
	class UTdTTResult*                                 TTOnlineResult;                                           // 0x0128(0x0004) (Transient)
	class UTdGhostStorageManager*                      GhostStorageManager;                                      // 0x012C(0x0004)
	class UTdGhost*                                    CurrentGhost;                                             // 0x0130(0x0004)
	TEnumAsByte<ETdTimeFilterSettings>                 LeaderboardEntryPeriod;                                   // 0x0134(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	unsigned long                                      bReadLeaderboardEntry : 1;                                // 0x0138(0x0004)
	unsigned long                                      bReadParamsSet : 1;                                       // 0x0138(0x0004)
	unsigned long                                      bOnlineMode : 1;                                          // 0x0138(0x0004)
	unsigned long                                      TdSROM4 : 1;                                              // 0x0138(0x0004) (Transient)
	struct FUniqueNetId                                LeaderboardEntryNetId;                                    // 0x013C(0x0008)
	struct FString                                     LeaderboardEntryPlayerName;                               // 0x0144(0x000C) (NeedCtorLink)
	int                                                CurrentPlasmaStretchId;                                   // 0x0150(0x0004)
	class UTdLeaderboardFullReadSPTT*                  FullStatsRead;                                            // 0x0154(0x0004)
	class UTdLeaderboardReadTotalOnlySPTT*             TotalTimeOnlyStatsRead;                                   // 0x0158(0x0004)
	class UTdOnlineStatsReadAllStretches*              AllStretchesStatsRead;                                    // 0x015C(0x0004)
	class UTdOnlineStatsReadForUI*                     ForUIStatsRead;                                           // 0x0160(0x0004)
	struct FUniqueNetId                                PlayerId;                                                 // 0x0164(0x0008)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x016C(0x0004)
	int                                                NextReadRequestIndex;                                     // 0x0170(0x0004)
	TArray<struct FScriptDelegate>                     ReadRequests;                                             // 0x0174(0x000C) (NeedCtorLink)
	class UTdOnlineStatsRead*                          CurrentStatsRead;                                         // 0x0180(0x0004)
	struct FScriptDelegate                             __ReadRequest__Delegate;                                  // 0x0184(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ReadResultParser__Delegate;                             // 0x0190(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTimeDataReadCompleted__Delegate;                      // 0x019C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSaveGhostComplete__Delegate;                          // 0x01A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnOpenGhostComplete__Delegate;                          // 0x01B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdTimeTrialData");
		return ptr;
	}


	void OpenGhostComplete(TEnumAsByte<EGhostStorageResult> Result, class UTdGhost* Ghost);
	void SaveGhostComplete(TEnumAsByte<EGhostStorageResult> Result, int GhostTag);
	void SaveGhost(int StretchId, const struct FString& PlayerName, float TotalTime, bool bStoreOnline, class ATdGhostManager* InGhostManager, const struct FScriptDelegate& SaveComplete);
	void OpenGhost(const struct FScriptDelegate& OpenComplete);
	void OnOpenGhostComplete(TEnumAsByte<EGhostStorageResult> Result);
	int CalculateRating(float TotalTime);
	class UTdTTResult* GetTimeTrialResult();
	struct FTTData GetTargetRaceData();
	void ClearTimeData();
	void ParsePlayerTimeAllStretches(class UTdOnlineStatsRead* StatResult);
	void ParseLeaderboardEntryData(class UTdOnlineStatsRead* StatResult);
	void ParseMonthlyGhostCutoffData(class UTdOnlineStatsRead* StatResult);
	void ParseWeeklyGhostCutoffData(class UTdOnlineStatsRead* StatResult);
	void ParseWorldsMonthlyData(class UTdOnlineStatsRead* StatResult);
	void ParseWorldsWeeklyData(class UTdOnlineStatsRead* StatResult);
	void ParseMyMonthlyData(class UTdOnlineStatsRead* StatResult);
	void ParseMyWeeklyData(class UTdOnlineStatsRead* StatResult);
	void ParseWorldsBestData(class UTdOnlineStatsRead* StatResult);
	void ParseMeAndFriendsData(class UTdOnlineStatsRead* StatResult);
	void ParseWorldsBestDataForUI(class UTdOnlineStatsRead* StatResult);
	void ParseMeAndFriendsDataForUI(class UTdOnlineStatsRead* StatResult);
	bool RequestPlayerTimeAllStretches();
	bool RequestLeaderboardEntry();
	bool RequestMonthlyGhostCutoff();
	bool RequestWeeklyGhostCutoff();
	bool RequestWorldsMonthly();
	bool RequestWorldsWeekly();
	bool RequestMyMonthly();
	bool RequestMyWeekly();
	bool RequestWorldsBest();
	bool RequestForMeAndFriends();
	bool RequestWorldsBestForUI();
	bool RequestForMeAndFriendsForUI();
	void FinishTimeDataRead(bool bWasSuccessful);
	void BreakStatsRead();
	void RunReadRequests(bool bSuccess);
	void PrepareReadRequest(class UTdOnlineStatsRead* StatsRead, const struct FScriptDelegate& ResultParser, bool bIndefinite, bool bMonthly, bool bWeekly);
	void SetStartReadState();
	bool ReadOfflineDataForStretch();
	void ReadOfflinePlayerBestForAllStretchs();
	bool StartReadDataForStretch(const struct FScriptDelegate& OnReadCompleted);
	bool ReadFullDataForStretch(bool bInReadOnline, const struct FScriptDelegate& OnReadCompleted);
	bool ReadDataForStretch(bool bInReadOnline, const struct FScriptDelegate& OnReadCompleted);
	bool NotifyGameSessionEnded();
	void OnLoginChange();
	void OnConnectionChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	void Unregistered(class ULocalPlayer* P);
	void Registered(class ULocalPlayer* P);
	void ReInit(int ControllerId);
	void InitCaches();
	void ClearCaches();
	int GetRaceModeId();
	void SetRaceModeId(int RaceMode);
	int GetCurrentWorkingStretchId();
	int GetCurrentWorkingStretchProviderIndex();
	struct FName GetCurrentWorkingStretchNameId();
	void SetStretchReadParams(int ControllerId, int StretchProviderIndex, const struct FName& FieldName, const struct FUniqueNetId& PlayerNetId, const struct FString& PlayerName, TEnumAsByte<ETdTimeFilterSettings> TimeFrame);
	int GetStretchProviderIndexFromId(int StretchId, const struct FName& FieldName);
	int GetStretchIdFromName(const struct FName& StretchName);
	int GetStretchId(int ProviderIndex, const struct FName& FieldName);
	struct FString GetStretchMapFilename(int ProviderIndex, const struct FName& FieldName);
	void OnSaveGhostComplete(TEnumAsByte<EGhostStorageResult> Result, int GhostTag);
	void OnTimeDataReadCompleted(bool bWasSuccessful);
	void ReadResultParser(class UTdOnlineStatsRead* StatResult);
	bool ReadRequest();
};


// Class TdGame.UIDataProvider_TdTimeTrialDataHandler
// 0x0000 (0x006C - 0x006C)
class UUIDataProvider_TdTimeTrialDataHandler : public UUIDataProvider_TdResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdTimeTrialDataHandler");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdTimeTrialStretch
// 0x0034 (0x00CC - 0x0098)
class UUIDataProvider_TdTimeTrialStretch : public UUIDataProvider_TdStretch
{
public:
	struct FString                                     ImageMarkup;                                              // 0x0098(0x000C) (Config, NeedCtorLink)
	float                                              QualifyingTime;                                           // 0x00A4(0x0004) (Config)
	float                                              Rating1Time;                                              // 0x00A8(0x0004) (Config)
	float                                              Rating2Time;                                              // 0x00AC(0x0004) (Config)
	float                                              Rating3Time;                                              // 0x00B0(0x0004) (Config)
	struct FString                                     UnlockDesc;                                               // 0x00B4(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     StretchFlags;                                             // 0x00C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdTimeTrialStretch");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_TdTutorialChallenge
// 0x0034 (0x00A0 - 0x006C)
class UUIDataProvider_TdTutorialChallenge : public UUIDataProvider_TdResource
{
public:
	int                                                ChallengeId;                                              // 0x006C(0x0004) (Config)
	struct FString                                     FriendlyName;                                             // 0x0070(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x007C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     ImageMarkup;                                              // 0x0088(0x000C) (Config, NeedCtorLink)
	TArray<float>                                      GradeTimeSeconds;                                         // 0x0094(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_TdTutorialChallenge");
		return ptr;
	}

};


// Class TdGame.UIDataProvider_VideosUnlocks
// 0x0000 (0x0098 - 0x0098)
class UUIDataProvider_VideosUnlocks : public UUIDataProvider_UnlocksProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataProvider_VideosUnlocks");
		return ptr;
	}

};


// Class TdGame.UIDataStore_TdGameData
// 0x0058 (0x011C - 0x00C4)
class UUIDataStore_TdGameData : public UUIDataStore_TdGameResource
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x00C4(0x0004) (Const, Native, NoExport)
	TEnumAsByte<ERebootReasonType>                     RebootReason;                                             // 0x00C8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	unsigned long                                      bSkipRestoreScenes : 1;                                   // 0x00CC(0x0004) (Transient)
	unsigned long                                      bViewGhost : 1;                                           // 0x00CC(0x0004)
	struct FString                                     RestoredScenesSerialized;                                 // 0x00D0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     RestoredMenuSerialized;                                   // 0x00DC(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentMap;                                               // 0x00E8(0x0004) (Transient)
	int                                                SkipTitleScreen;                                          // 0x00EC(0x0004) (Transient)
	TArray<int>                                        MapCycle;                                                 // 0x00F0(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentGameMode;                                          // 0x00FC(0x0004) (Transient)
	class UTdCheckpointManager*                        CheckpointManager;                                        // 0x0100(0x0004) (Transient)
	TArray<unsigned char>                              CheckpointDataArray;                                      // 0x0104(0x000C) (NeedCtorLink)
	int                                                CurrentMapForCheckpoints;                                 // 0x0110(0x0004)
	float                                              TimeAttackClock;                                          // 0x0114(0x0004)
	float                                              TimeAttackDistance;                                       // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdGameData");
		return ptr;
	}


	void Registered(class ULocalPlayer* PlayerOwner);
	void RestartFromLastCheckpoint(bool bShouldSaveCheckpointProgress, bool bAllowSPLevelAchievements);
	void QuitToMainMenu();
	void StartGame(const struct FString& LevelName, const struct FString& CheckpointName, const struct FString& GameMode, const struct FString& URL, bool bShouldSaveCheckpointProgress, bool bAllowSPLevelAchievements);
	void StartNewGame(bool bShouldSaveCheckpointProgress, bool bAllowSPLevelAchievements);
	void StartNewGameWithTutorial(bool bPlayCutScene);
	bool IsElementEnabled(const struct FName& FieldName, int CollectionIndex);
	struct FString GetCheckpointImageMarkupFromIndex(int Index);
	struct FString GetCheckpointNameFromIndexAndMap(int MapIndex, int CheckpointIndex);
	struct FString GetCheckpointNameFromIndex(int Index);
	struct FString GetCheckpointDescriptionFromIndex(int Index);
	struct FString GetCheckpointFriendlyNameFromIndex(int Index);
	int GetMapNumCheckpoints(int Index);
	struct FString GetGameModeClassNameFromIndex(int Index);
	struct FString GetRoleImageMarkupFromIndex(int RoleIndex);
	struct FString GetRoleNameFromIndex(int RoleIndex);
	struct FString GetRoleClassNameFromIndex(int RoleIndex);
	int GetRoleIdFromRoleIndex(int RoleIndex);
	int GetRoleIndexFromRoleId(int RoleId);
	int GetNumRoles(int Team);
	TArray<int> GetRolesList(int Team);
	int GetTutorialMapIndex();
	struct FString GetMapNameFromMapIndex(int MapIndex);
	struct FString GetFileNameFromMapIndex(int MapIndex);
	int GetMapIndexFromMapName(const struct FString& MapName);
	int GetMapIndexFromFileName(const struct FString& Filename);
};


// Class TdGame.UIDataStore_TdGameObjectivesData
// 0x0014 (0x00D8 - 0x00C4)
class UUIDataStore_TdGameObjectivesData : public UUIDataStore_TdGameResource
{
public:
	TArray<struct FObjectiveMappingStruct>             ObjectiveMappings;                                        // 0x00C4(0x000C) (Config, NeedCtorLink)
	int                                                CurrentObjectiveIndex;                                    // 0x00D0(0x0004) (Transient)
	int                                                LastReachedChallengeIndex;                                // 0x00D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdGameObjectivesData");
		return ptr;
	}


	void ClearCurrentSubObjective();
	void ResolveAndSetCheckpointObjective(const struct FName& ObjectiveGameType, const struct FName& CheckpointName, bool bOnlyHigher);
	bool IsElementEnabled(const struct FName& FieldName, int CollectionIndex);
	bool ResolveSubObjectiveMapping(const struct FName& MappingName, struct FName* SubObjectiveName);
	void SetActiveSubObjective(const struct FName& FieldName, const struct FName& SubObjectiveTag, bool bOnlyHigher);
	bool GetActiveSubObjective(const struct FName& FieldName, struct FSubObjectiveStruct* CurrentObjective);
	bool GetSubObjectives(const struct FName& FieldName, bool bFilter, TArray<struct FSubObjectiveStruct>* Objectives);
	void UpdateObjectives(const struct FName& FieldName);
	int GetNumFinishedObjectives(const struct FName& FieldName);
};


// Class TdGame.UIDataStore_TdLoginData
// 0x0034 (0x00F8 - 0x00C4)
class UUIDataStore_TdLoginData : public UUIDataStore_TdGameResource
{
public:
	class UClass*                                      LoginSettingsClass;                                       // 0x00C4(0x0004)
	class UTdLoginSettings*                            LoginSettings;                                            // 0x00C8(0x0004)
	class UUIDataProvider_Settings*                    LoginSettingsProvider;                                    // 0x00CC(0x0004)
	struct FString                                     PersonaProviderClassName;                                 // 0x00D0(0x000C) (Config, NeedCtorLink)
	class UClass*                                      PersonaProviderClass;                                     // 0x00DC(0x0004)
	class UUIDataProvider_TdPersonaProvider*           PersonaProvider;                                          // 0x00E0(0x0004)
	struct FString                                     AccountProviderClassName;                                 // 0x00E4(0x000C) (Config, NeedCtorLink)
	class UClass*                                      AccountProviderClass;                                     // 0x00F0(0x0004)
	class UUIDataProvider_TdAccountProvider*           AccountProvider;                                          // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdLoginData");
		return ptr;
	}


	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class TdGame.UIDataStore_TdMenuItems
// 0x0000 (0x00C4 - 0x00C4)
class UUIDataStore_TdMenuItems : public UUIDataStore_TdGameResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdMenuItems");
		return ptr;
	}


	void STATIC_GetAllResourceDataProviders(class UClass* ProviderClass, TArray<class UUIResourceDataProvider*>* Providers);
};


// Class TdGame.UIDataStore_TdMiniMenuData
// 0x0008 (0x00CC - 0x00C4)
class UUIDataStore_TdMiniMenuData : public UUIDataStore_TdGameResource
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x00C4(0x0004) (Const, Native, NoExport)
	class UTdUIScene_MiniMenu*                         MenuScene;                                                // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdMiniMenuData");
		return ptr;
	}


	void Clean();
	void Initialize(class UTdUIScene_MiniMenu* InMenuScene);
};


// Class TdGame.UIDataStore_TdOnlineStats
// 0x0064 (0x014C - 0x00E8)
class UUIDataStore_TdOnlineStats : public UUIDataStore_OnlineStats
{
public:
	TEnumAsByte<ETdOnlineStatsReadState>               CurrentReadState;                                         // 0x00E8(0x0001)
	unsigned char                                      CurrentControllerIndex;                                   // 0x00E9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00EA(0x0002) MISSED OFFSET
	class UClass*                                      LeaderboardSettingsClass;                                 // 0x00EC(0x0004)
	class UTdLeaderboardSettings*                      LeaderboardSettings;                                      // 0x00F0(0x0004)
	class UUIDataProvider_Settings*                    SettingsProvider;                                         // 0x00F4(0x0004)
	struct FName                                       PlayerStatsReadName;                                      // 0x00F8(0x0008) (Const)
	class UOnlineStatsRead*                            PlayerStatsRead;                                          // 0x0100(0x0004)
	int                                                CurrentStretchId;                                         // 0x0104(0x0004)
	int                                                PlayerStatsReadIndex;                                     // 0x0108(0x0004)
	TArray<class UOnlineStatsRead*>                    PlayerStatsReadCache;                                     // 0x010C(0x000C) (NeedCtorLink)
	int                                                StatsReadIndex;                                           // 0x0118(0x0004)
	TArray<class UOnlineStatsRead*>                    StatsReadCache;                                           // 0x011C(0x000C) (NeedCtorLink)
	struct FString                                     PlayerNickColumnNameXbox;                                 // 0x0128(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerNickColumnNamePS3;                                  // 0x0134(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __StatsReadComplete__Delegate;                            // 0x0140(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdOnlineStats");
		return ptr;
	}


	int FindLocalPlayerIndex();
	int GetPlayerRank(int PlayerIndex);
	bool ReadLeaderboardStats();
	bool ReadPlayerStats();
	void OnReadComplete(bool bWasSuccessful);
	bool RefreshStats(unsigned char ControllerIndex);
	void ClearCaches();
	void InitCaches();
	void SetStatsReadInfo();
	class UOnlineStatsRead* GetStatsReadObject(const struct FName& FieldName);
	void SetCurrentStretchId(int StretchId);
	void Init();
	void StatsReadComplete(bool bSuccess);
};


// Class TdGame.UIDataStore_TdStringAliasBindingsMap
// 0x0050 (0x0114 - 0x00C4)
class UUIDataStore_TdStringAliasBindingsMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                             // 0x00C4(0x0004) (Config)
	unsigned long                                      bControllerConnected : 1;                                 // 0x00C8(0x0004) (Transient)
	struct FMap_Mirror                                 CommandToBindNames;                                       // 0x00CC(0x003C) (Const, Native, Transient)
	TArray<struct FControllerMap>                      ControllerMapArray;                                       // 0x0108(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdStringAliasBindingsMap");
		return ptr;
	}


	void OnControllerChange(int ControllerId, bool Connected);
	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void ClearBoundKeyCache();
	void AddMappingToBoundKeyCache(const struct FString& Command, const struct FString& MappingStr, int FieldIndex);
	bool FindMappingInBoundKeyCache(const struct FString& Command, struct FString* MappingStr, int* FieldIndex);
	int GetBoundStringWithFieldName(const struct FString& FieldName, struct FString* MappedString, int* StartIndex, struct FString* BindString);
	int GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString);
};


// Class TdGame.UIDataStore_TdStringAliasMap
// 0x0008 (0x00CC - 0x00C4)
class UUIDataStore_TdStringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                             // 0x00C4(0x0004) (Config)
	unsigned long                                      bControllerConnected : 1;                                 // 0x00C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdStringAliasMap");
		return ptr;
	}


	void OnControllerChange(int ControllerId, bool Connected);
	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	int GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString);
};


// Class TdGame.UIDataStore_TdStringList
// 0x0014 (0x008C - 0x0078)
class UUIDataStore_TdStringList : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004) (Const, Native, NoExport)
	TArray<struct FEStringListData>                    StringData;                                               // 0x0080(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdStringList");
		return ptr;
	}


	void ResetValueIndex(const struct FName& FieldName);
	int Num(const struct FName& FieldName);
	int SetCurrentValueIndex(const struct FName& FieldName, int NewValueIndex);
	int GetCurrentValueIndex(const struct FName& FieldName);
	bool GetCurrentValue(const struct FName& FieldName, struct FString* out_Value);
	TArray<struct FString> GetList(const struct FName& FieldName);
	struct FString GetStr(const struct FName& FieldName, int StrIndex);
	int FindStr(const struct FName& FieldName, const struct FString& SearchString);
	void Empty(const struct FName& FieldName, bool bBatchOp);
	void RemoveStrByIndex(const struct FName& FieldName, int Index, int Count, bool bBatchOp);
	void RemoveStr(const struct FName& FieldName, const struct FString& StringToRemove, bool bBatchOp);
	void InsertStr(const struct FName& FieldName, const struct FString& NewString, int InsertIndex, bool bBatchOp);
	void AddStr(const struct FName& FieldName, const struct FString& NewString, bool bBatchOp);
	int GetFieldIndex(const struct FName& FieldName);
	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class TdGame.UIDataStore_TdTutorialData
// 0x000C (0x00D0 - 0x00C4)
class UUIDataStore_TdTutorialData : public UUIDataStore_TdGameResource
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x00C4(0x0004) (Const, Native, NoExport)
	int                                                CurrentTutorialChallengeId;                               // 0x00C8(0x0004)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdTutorialData");
		return ptr;
	}


	class UTdProfileSettings* GetProfileSettings();
	void Registered(class ULocalPlayer* Player);
	float GetTimeForChallengeGrade(int ChallengeId, int Grade);
	int GetChallengeIdFromIndex(int Index);
};


// Class TdGame.UIDataStore_TdUnlocksData
// 0x0000 (0x00C4 - 0x00C4)
class UUIDataStore_TdUnlocksData : public UUIDataStore_TdGameResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdUnlocksData");
		return ptr;
	}


	bool IsElementEnabled(const struct FName& FieldName, int CollectionIndex);
};


// Class TdGame.UITdOptionButton
// 0x00C8 (0x04B4 - 0x03EC)
class UUITdOptionButton : public UTdUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x03EC(0x0004) (Const, Native, NoExport)
	class UUIButton*                                   ArrowLeftButton;                                          // 0x03F0(0x0004)
	class UUIButton*                                   ArrowRightButton;                                         // 0x03F4(0x0004)
	struct FUIStyleReference                           IncrementStyle;                                           // 0x03F8(0x0020)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x0418(0x0020)
	struct FUIScreenValue                              ButtonSize;                                               // 0x0438(0x0008) (Edit)
	struct FUIScreenValue                              ButtonSpacing;                                            // 0x0440(0x0008) (Edit)
	unsigned long                                      bIncludeDisabledItems : 1;                                // 0x0448(0x0004) (Edit)
	unsigned long                                      bWrapOptions : 1;                                         // 0x0448(0x0004) (Edit)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x044C(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x0450(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	int                                                CurrentIndex;                                             // 0x0454(0x0004) (Transient)
	struct FName                                       IncrementCue;                                             // 0x0458(0x0008) (Edit)
	struct FName                                       DecrementCue;                                             // 0x0460(0x0008) (Edit)
	struct FName                                       ClickedCue;                                               // 0x0468(0x0008) (Edit)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0470(0x0030) (Edit, NeedCtorLink)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x04A0(0x0008) (Const, Transient)
	struct FName                                       CellTag;                                                  // 0x04A8(0x0008) (Edit)
	float                                              PreventChangeSelection;                                   // 0x04B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UITdOptionButton");
		return ptr;
	}


	bool OnArrowRight_Clicked(class UUIScreenObject* InButton, int PlayerIndex);
	bool OnArrowLeft_Clicked(class UUIScreenObject* InButton, int PlayerIndex);
	void OnMoveSelectionRight(int PlayerIndex);
	void OnMoveSelectionLeft(int PlayerIndex);
	void PostInitialize();
	void VerifyArrowButtons();
	void Initialized();
	int GetCurrentValue();
	bool IsCurrentElementEnabled();
	void SetCurrentIndex(int NewIndex);
	int GetCurrentIndex();
	void UpdateArrowStates();
	void SetNextValue();
	void SetPrevValue();
	bool HasNextValue();
	bool HasPrevValue();
	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
};


// Class TdGame.TdEmitter
// 0x0000 (0x01C8 - 0x01C8)
class ATdEmitter : public AEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdEmitter");
		return ptr;
	}


	void KillProjectile();
};


// Class TdGame.TdGameEngine
// 0x0074 (0x0520 - 0x04AC)
class UTdGameEngine : public UGameEngine
{
public:
	struct FString                                     DefaultLoadSPMapMoviePrefix;                              // 0x04AC(0x000C) (Transient, Config, NeedCtorLink)
	int                                                NumberOfSPMovies;                                         // 0x04B8(0x0004) (Transient, Config)
	struct FString                                     DefaultLoadTTMapMoviePrefix;                              // 0x04BC(0x000C) (Transient, Config, NeedCtorLink)
	int                                                NumberOfTTMovies;                                         // 0x04C8(0x0004) (Transient, Config)
	struct FString                                     DefaultLoadGameMovie;                                     // 0x04CC(0x000C) (Transient, Config, NeedCtorLink)
	struct FString                                     DefaultCutSceneMoviePrefix;                               // 0x04D8(0x000C) (Transient, Config, NeedCtorLink)
	struct FString                                     LoadMapMovie;                                             // 0x04E4(0x000C) (Transient, NeedCtorLink)
	struct FPointer                                    MovieIni;                                                 // 0x04F0(0x0004) (Transient)
	unsigned long                                      bShouldWaitForMovieAfterLoad : 1;                         // 0x04F4(0x0004) (Transient)
	unsigned long                                      bShouldContinueLoadingTextures : 1;                       // 0x04F4(0x0004) (Transient)
	unsigned long                                      bEnabledSkipMovie : 1;                                    // 0x04F4(0x0004) (Transient)
	unsigned long                                      bHasLoaded : 1;                                           // 0x04F4(0x0004) (Transient)
	class URequestedTextureResources*                  ActiveRequestedTextureResources;                          // 0x04F8(0x0004) (Transient)
	struct FVector2D                                   LoadingPos;                                               // 0x04FC(0x0008)
	struct FVector2D                                   HintPos;                                                  // 0x0504(0x0008)
	struct FString                                     CurrentMapName;                                           // 0x050C(0x000C) (NeedCtorLink)
	float                                              LoadMapLoadTime;                                          // 0x0518(0x0004) (Config)
	int                                                NumStreamingZonesCleared;                                 // 0x051C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameEngine");
		return ptr;
	}


	void OnLoadLevel();
	struct FString GetHintMessage(bool bIsTTGame);
	struct FName STATIC_GetLanguage();
};


// Class TdGame.TdOnlineStatsRead
// 0x0004 (0x00B8 - 0x00B4)
class UTdOnlineStatsRead : public UOnlineStatsRead
{
public:
	int                                                StretchId;                                                // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineStatsRead");
		return ptr;
	}


	void SetStretchId(int InStretchId);
	int GetIntStatFromRow(int Row, int StatId);
	float GetFloatStatFromRow(int Row, int StatId);
	int GetIntStat(const struct FUniqueNetId& UniqId, int StatId);
	float GetFloatStat(const struct FUniqueNetId& UniqId, int StatId);
};


// Class TdGame.TdOnlineStatsReadAllStretches
// 0x0000 (0x00B8 - 0x00B8)
class UTdOnlineStatsReadAllStretches : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineStatsReadAllStretches");
		return ptr;
	}


	void SetStretchId(int InStretchId);
	void SetStatId(int InStatId, TEnumAsByte<ESettingsDataType> InDataType);
};


// Class TdGame.TdOnlineStatsWrite
// 0x0004 (0x009C - 0x0098)
class UTdOnlineStatsWrite : public UOnlineStatsWrite
{
public:
	int                                                StretchId;                                                // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineStatsWrite");
		return ptr;
	}


	void SetStretchId(int InStretchId);
	void WriteStats(const struct FUniqueNetId& UniqId, class AInfo* StatInfo, const TScriptInterface<class UOnlineStatsInterface>& StatsInterface);
};


// Class TdGame.TdCheckpointManager
// 0x0050 (0x008C - 0x003C)
class UTdCheckpointManager : public UObject
{
public:
	struct FString                                     ActiveCheckpoint;                                         // 0x003C(0x000C) (Transient, NeedCtorLink)
	struct FString                                     ActiveMap;                                                // 0x0048(0x000C) (Transient, NeedCtorLink)
	int                                                ActiveCheckpointWeight;                                   // 0x0054(0x0004) (Transient)
	struct FString                                     LastSavedMap;                                             // 0x0058(0x000C) (Transient, NeedCtorLink)
	struct FString                                     LastSavedCheckpoint;                                      // 0x0064(0x000C) (Transient, NeedCtorLink)
	int                                                NumProfileSaveTries;                                      // 0x0070(0x0004) (Transient)
	class ATdPlayerController*                         ActivePlayerController;                                   // 0x0074(0x0004) (Transient)
	TArray<struct FCheckpointInformation>              CachedCheckpointInformation;                              // 0x0078(0x000C) (Transient, NeedCtorLink)
	class UUIDataStore_TdGameData*                     GameData;                                                 // 0x0084(0x0004) (Transient)
	unsigned long                                      bDebugCheckpoints : 1;                                    // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheckpointManager");
		return ptr;
	}


	void CacheCheckpointInformation(class UUIDataStore_TdGameData* TdGameData);
	void GetMapAndCheckpointIndex(const struct FString& MapName, const struct FString& CheckpointName, int* MapIndex, int* CheckpointIndex);
	void ClearGameProgress();
	void OnErrorMessageBoxClosed(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnShowErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowErrorMessageBox();
	void OnProfileWriteComplete(bool bSuccess);
	void TryWriteProfile();
	void SetNewCheckpoint(class ATdCheckpoint* NewCheckpoint, class ATdPlayerController* PC, bool skipSaveToDisk);
	struct FString GetActiveMap();
	void SetActiveCheckpoint(const struct FString& NewCheckpoint);
	struct FString GetActiveCheckpoint();
	bool GetContinueGame(struct FString* Map, struct FString* Checkpoint);
	bool CanContinueGame();
	void OnLoginChange();
	void OnProfileReadComplete(bool bSuccess);
	void Initialize(class UUIDataStore_TdGameData* TdGameData);
	class ATdCheckpoint* FindCurrentCheckpoint();
};


// Class TdGame.TdGhostStorageManager
// 0x0034 (0x0070 - 0x003C)
class UTdGhostStorageManager : public UObject
{
public:
	int                                                StorageFormatVersion;                                     // 0x003C(0x0004) (Const)
	struct FTdGhostInfo                                ReadInfo;                                                 // 0x0040(0x0018) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadGhostComplete__Delegate;                          // 0x0058(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWriteGhostComplete__Delegate;                         // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGhostStorageManager");
		return ptr;
	}


	TEnumAsByte<EGhostStorageResult> DeSerializeGhost(class UTdGhost** Ghost, TArray<unsigned char>* Bytes);
	void SerializeGhost(class UTdGhost** Ghost, TArray<unsigned char>* Bytes);
	bool InfoIsConsistent(const struct FTdGhostInfo& Info1, const struct FTdGhostInfo& Info2);
	bool WriteGhost(class UTdGhost* Ghost, const struct FUniqueNetId& PlayerId, const struct FScriptDelegate& WriteCompleted);
	bool ReadGhost(const struct FTdGhostInfo& GhostInfo, const struct FScriptDelegate& ReadCompleted);
	void OnConnectionLost();
	void OnWriteGhostComplete(TEnumAsByte<EGhostStorageResult> Result, int GhostTag);
	void OnReadGhostComplete(TEnumAsByte<EGhostStorageResult> Result, class UTdGhost* Ghost);
};


// Class TdGame.TdOnlineGhostStorageManager
// 0x00BC (0x012C - 0x0070)
class UTdOnlineGhostStorageManager : public UTdGhostStorageManager
{
public:
	struct FString                                     GhostFilePrefix;                                          // 0x0070(0x000C) (Const, NeedCtorLink)
	int                                                MaxFilesInLocker;                                         // 0x007C(0x0004) (Config)
	int                                                MaxGhostsDeletedPerSweep;                                 // 0x0080(0x0004) (Config)
	TScriptInterface<class UOnlineFileLockerInterface> LockerIF;                                                 // 0x0084(0x0008) (Transient)
	struct FOnlineFileLockerFile                       OnlineGhostFileWrite;                                     // 0x008C(0x0028) (Transient, NeedCtorLink)
	int                                                UsedGhostTag;                                             // 0x00B4(0x0004) (Transient)
	TArray<struct FOnlineFileLockerFileInfo>           FileList;                                                 // 0x00B8(0x000C) (Transient, NeedCtorLink)
	class UTdOnlineStatsReadAllStretches*              StatsRead;                                                // 0x00C4(0x0004) (Transient)
	struct FUniqueNetId                                PlayerId;                                                 // 0x00C8(0x0008) (Transient)
	TScriptInterface<class UOnlineStatsInterface>      StatsIF;                                                  // 0x00D0(0x0008) (Transient)
	int                                                StatReadIndex;                                            // 0x00D8(0x0004) (Transient)
	int                                                FileDeletionIndex;                                        // 0x00DC(0x0004) (Transient)
	TArray<int>                                        GhostReferences;                                          // 0x00E0(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        GhostFiletags;                                            // 0x00EC(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        UnusedTags;                                               // 0x00F8(0x000C) (Transient, NeedCtorLink)
	struct FOnlineFileLockerFile                       OnlineGhostFileRead;                                      // 0x0104(0x0028) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineGhostStorageManager");
		return ptr;
	}


	void CacheGhost(const struct FTdGhostInfo& GhostInfo, TArray<unsigned char>* GhostBytes);
	class UTdGhost* GetCachedGhost(const struct FTdGhostInfo& GhostInfo);
	void FindUnusedTags();
	void ExtractGhostReferences(class UTdOnlineStatsRead* Stats);
	int GetNewGhostTag();
	void WriteGhostCompleteCallback(bool bSuccess);
	void TryWriteFile();
	void OnFileDeleted(bool bSuccess);
	void RunFileDeletions();
	void DeleteUnreferencedFiles();
	void OnStatReadDone(bool bSuccess);
	void RunStatReads();
	void CleanLocker();
	void FetchLockerCompleteCallbackWrite(bool Success);
	void ReadGhostCompleteCallback(bool bSuccess);
	void FetchLockerCompleteCallbackRead(bool bSuccess);
	bool WriteGhost(class UTdGhost* Ghost, const struct FUniqueNetId& InPlayerId, const struct FScriptDelegate& WriteCompleted);
	bool ReadGhost(const struct FTdGhostInfo& GhostInfo, const struct FScriptDelegate& ReadCompleted);
	void OnConnectionLost();
};


// Class TdGame.SeqEvt_TdCombatStarted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdCombatStarted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdCombatStarted");
		return ptr;
	}

};


// Class TdGame.TdSPGame
// 0x002C (0x03AC - 0x0380)
class ATdSPGame : public ATdGameInfo
{
public:
	unsigned long                                      bShouldSaveCheckpointProgress : 1;                        // 0x0380(0x0004)
	unsigned long                                      bAllowSPLevelAchievements : 1;                            // 0x0380(0x0004)
	float                                              PlayerRespawnTime;                                        // 0x0384(0x0004) (Config)
	struct FOnLevelCompletedAsyncHelper                OnLCAsyncHelper;                                          // 0x0388(0x0020) (Transient, NeedCtorLink)
	class ATdAIManager*                                AIManager;                                                // 0x03A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPGame");
		return ptr;
	}


	void OnLoadNextLevel();
	void SetPlayerStart(const struct FString& StartLocation);
	void OnErrorMessageBoxClosed(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnShowErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowErrorMessageBox();
	void OnCreditsOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnProfileWriteCompleted(bool bWasSuccessful);
	void TryWriteProfeile();
	void OnLevelCompleted(class ATdPlayerController* PC, const struct FString& CurrentLevelName, const struct FString& InNextLevelName, const struct FString& InNextCheckpointName);
	bool CanOpenPauseMenu();
	void Reset();
	void PreBeginPlay();
	void KillBots();
	void StartOnlineGame();
	void RespawnTimer();
	void RestartFromLastCheckpointDead();
	void RestartFromLastCheckpoint();
	void OnPlayerDead();
	void InitAI();
	void InitGameDebug();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.SeqAct_TdAIStasis
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdAIStasis : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdAIStasis");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdSetPathLimits
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdSetPathLimits : public USequenceAction
{
public:
	class ATdPathLimits*                               Limits;                                                   // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSetPathLimits");
		return ptr;
	}

};


// Class TdGame.SeqAct_AIHoldFire
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIHoldFire : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIHoldFire");
		return ptr;
	}

};


// Class TdGame.SeqAct_AIForceWalking
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_AIForceWalking : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AIForceWalking");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdAIPerfectAim
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdAIPerfectAim : public USequenceAction
{
public:
	float                                              AccuracyImprovementRate;                                  // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdAIPerfectAim");
		return ptr;
	}


	bool ShouldEnable();
};


// Class TdGame.SeqAct_SetCombatRange
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetCombatRange : public USequenceAction
{
public:
	float                                              MaxRange;                                                 // 0x00DC(0x0004)
	float                                              PreferredRange;                                           // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_SetCombatRange");
		return ptr;
	}


	bool ShouldSet();
	bool ShouldReset();
};


// Class TdGame.AITemplate_Assault_HKG36C
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Assault_HKG36C : public UAITemplate_Assault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Assault_HKG36C");
		return ptr;
	}

};


// Class TdGame.AITemplate_Assault_MP5K
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Assault_MP5K : public UAITemplate_Assault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Assault_MP5K");
		return ptr;
	}

};


// Class TdGame.AITemplate_Assault_Neostead
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Assault_Neostead : public UAITemplate_Assault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Assault_Neostead");
		return ptr;
	}

};


// Class TdGame.AITemplate_PursuitCop
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PursuitCop : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PursuitCop");
		return ptr;
	}

};


// Class TdGame.AITemplate_Celeste
// 0x000C (0x0298 - 0x028C)
class UAITemplate_Celeste : public UAITemplate_PursuitCop
{
public:
	struct FHitsToTakeStruct                           NrOfHitsToTake;                                           // 0x028C(0x000C) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Celeste");
		return ptr;
	}

};


// Class TdGame.AITemplate_Dummy
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Dummy : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Dummy");
		return ptr;
	}

};


// Class TdGame.AITemplate_Gunner
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Gunner : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Gunner");
		return ptr;
	}

};


// Class TdGame.AITemplate_HeliSniper
// 0x0000 (0x028C - 0x028C)
class UAITemplate_HeliSniper : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_HeliSniper");
		return ptr;
	}

};


// Class TdGame.AITemplate_MeleeDummy
// 0x0000 (0x028C - 0x028C)
class UAITemplate_MeleeDummy : public UAITemplate_Dummy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_MeleeDummy");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop1
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop1 : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop1");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop2
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop2 : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop2");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop3
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop3 : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop3");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop_Glock
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop_Glock : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop_Glock");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop_SteyrTMP
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop_SteyrTMP : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop_SteyrTMP");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop_MiniUzi
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop_MiniUzi : public UAITemplate_PatrolCop_SteyrTMP
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop_MiniUzi");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolCop_Remington
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolCop_Remington : public UAITemplate_PatrolCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolCop_Remington");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolDummy
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolDummy : public UAITemplate_Dummy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolDummy");
		return ptr;
	}

};


// Class TdGame.AITemplate_PatrolMeleeDummy
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PatrolMeleeDummy : public UAITemplate_MeleeDummy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PatrolMeleeDummy");
		return ptr;
	}

};


// Class TdGame.AITemplate_PursuitDummy
// 0x0000 (0x028C - 0x028C)
class UAITemplate_PursuitDummy : public UAITemplate_Dummy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_PursuitDummy");
		return ptr;
	}

};


// Class TdGame.AITemplate_RB
// 0x0000 (0x028C - 0x028C)
class UAITemplate_RB : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_RB");
		return ptr;
	}

};


// Class TdGame.AITemplate_RiotCop
// 0x0000 (0x028C - 0x028C)
class UAITemplate_RiotCop : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_RiotCop");
		return ptr;
	}

};


// Class TdGame.AITemplate_SniperCop
// 0x0028 (0x02B4 - 0x028C)
class UAITemplate_SniperCop : public UAITemplate_Default
{
public:
	float                                              LoseTargetTime;                                           // 0x028C(0x0004) (Edit, Config)
	float                                              AimOffset;                                                // 0x0290(0x0004) (Edit, Config)
	float                                              RandomWalkSpeed;                                          // 0x0294(0x0004) (Edit, Config)
	float                                              TimeToCalibrateEasy;                                      // 0x0298(0x0004) (Edit, Config)
	float                                              TimeToCalibrateMedium;                                    // 0x029C(0x0004) (Edit, Config)
	float                                              TimeToCalibrateHard;                                      // 0x02A0(0x0004) (Edit, Config)
	float                                              TimeToCalibrateOnObjectFactor;                            // 0x02A4(0x0004) (Edit, Config)
	float                                              TriggerBotAccuracy;                                       // 0x02A8(0x0004) (Edit, Config)
	float                                              BreakDistance;                                            // 0x02AC(0x0004) (Edit, Config)
	float                                              HomingInOnTargetSpeed;                                    // 0x02B0(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_SniperCop");
		return ptr;
	}

};


// Class TdGame.AITemplate_SniperCeleste
// 0x0000 (0x02B4 - 0x02B4)
class UAITemplate_SniperCeleste : public UAITemplate_SniperCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_SniperCeleste");
		return ptr;
	}

};


// Class TdGame.AITemplate_SniperIdiot
// 0x0000 (0x02B4 - 0x02B4)
class UAITemplate_SniperIdiot : public UAITemplate_SniperCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_SniperIdiot");
		return ptr;
	}

};


// Class TdGame.AITemplate_Support
// 0x0008 (0x0294 - 0x028C)
class UAITemplate_Support : public UAITemplate_Default
{
public:
	float                                              GrenadeRange;                                             // 0x028C(0x0004) (Config)
	float                                              GrenadeDelay;                                             // 0x0290(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Support");
		return ptr;
	}

};


// Class TdGame.AITemplate_TempPursuit
// 0x0000 (0x028C - 0x028C)
class UAITemplate_TempPursuit : public UAITemplate_PursuitCop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_TempPursuit");
		return ptr;
	}

};


// Class TdGame.AITemplate_Tutorial
// 0x0000 (0x028C - 0x028C)
class UAITemplate_Tutorial : public UAITemplate_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.AITemplate_Tutorial");
		return ptr;
	}

};


// Class TdGame.HelloWorldCommandlet
// 0x0010 (0x008C - 0x007C)
class UHelloWorldCommandlet : public UCommandlet
{
public:
	int                                                intparm;                                                  // 0x007C(0x0004)
	struct FString                                     strparm;                                                  // 0x0080(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.HelloWorldCommandlet");
		return ptr;
	}


	int Main(const struct FString& Parms);
};


// Class TdGame.SeqAct_AISetSniperBlindAimSpot
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_AISetSniperBlindAimSpot : public USequenceAction
{
public:
	class APathNode*                                   BlindAimSpot;                                             // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_AISetSniperBlindAimSpot");
		return ptr;
	}

};


// Class TdGame.SeqAct_DisableLoadFromLastCheckpoint
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_DisableLoadFromLastCheckpoint : public USequenceAction
{
public:
	unsigned long                                      bShouldBeDisabled : 1;                                    // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_DisableLoadFromLastCheckpoint");
		return ptr;
	}

};


// Class TdGame.SeqAct_HideLoading
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_HideLoading : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_HideLoading");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_SetHeliSpeed
// 0x0001 (0x00DD - 0x00DC)
class USeqAct_SetHeliSpeed : public USequenceAction
{
public:
	TEnumAsByte<EHeliSpeed>                            Speed;                                                    // 0x00DC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_SetHeliSpeed");
		return ptr;
	}

};


// Class TdGame.SeqAct_SetHeliTarget
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_SetHeliTarget : public USequenceAction
{
public:
	TEnumAsByte<EHeliAttackSide>                       SideOfHelicopter;                                         // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	class AActor*                                      AimTarget;                                                // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_SetHeliTarget");
		return ptr;
	}

};


// Class TdGame.SeqAct_ShowLoading
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_ShowLoading : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_ShowLoading");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdActivateLookAtPoint
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdActivateLookAtPoint : public USequenceAction
{
public:
	float                                              LookAtInterpolationTime;                                  // 0x00DC(0x0004) (Edit)
	float                                              LookAtDuration;                                           // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdActivateLookAtPoint");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdActivatePlayerWeaponEvents
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdActivatePlayerWeaponEvents : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdActivatePlayerWeaponEvents");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqEvt_TdWeaponFired
// 0x0008 (0x00FC - 0x00F4)
class USeqEvt_TdWeaponFired : public USequenceEvent
{
public:
	class AVolume*                                     ConditionalVolume;                                        // 0x00F4(0x0004) (Edit)
	class UClass*                                      ConditionalWeaponClass;                                   // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdWeaponFired");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdActivateRopeburnDisarm
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdActivateRopeburnDisarm : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdActivateRopeburnDisarm");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdAddAdditionalAnimSets
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_TdAddAdditionalAnimSets : public USequenceAction
{
public:
	unsigned long                                      bIsFirstPerson : 1;                                       // 0x00DC(0x0004) (Edit)
	unsigned long                                      bRemoveAdditionalAnimSets : 1;                            // 0x00DC(0x0004) (Edit)
	TArray<class UAnimSet*>                            AnimationSets;                                            // 0x00E0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdAddAdditionalAnimSets");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdAiInitiateAttack
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdAiInitiateAttack : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdAiInitiateAttack");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdBlockWhileLoading
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdBlockWhileLoading : public USequenceAction
{
public:
	unsigned long                                      bOnlyInSpeedrun : 1;                                      // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdBlockWhileLoading");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdChangeMap
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdChangeMap : public USequenceAction
{
public:
	struct FString                                     LevelName;                                                // 0x00DC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CheckpointName;                                           // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdChangeMap");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdCheckpoint
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdCheckpoint : public USequenceAction
{
public:
	unsigned long                                      done : 1;                                                 // 0x00DC(0x0004)
	unsigned long                                      skipSaveToDisk : 1;                                       // 0x00DC(0x0004) (Edit)
	unsigned long                                      teleportPawnToCheckpoint : 1;                             // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdCheckpoint");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdCrowdSpawner
// 0x0000 (0x02D4 - 0x02D4)
class USeqAct_TdCrowdSpawner : public USeqAct_CrowdSpawner
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdCrowdSpawner");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdDisablePlayerInput
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdDisablePlayerInput : public USequenceAction
{
public:
	unsigned long                                      bSetCinematicMode : 1;                                    // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisableSkipCutscenes : 1;                                // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisablePlayerMoveInput : 1;                              // 0x00DC(0x0004) (Edit)
	unsigned long                                      bDisablePlayerLookInput : 1;                              // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdDisablePlayerInput");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdDisableReactionTime
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdDisableReactionTime : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdDisableReactionTime");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdDummyWeaponFire
// 0x0028 (0x0114 - 0x00EC)
class USeqAct_TdDummyWeaponFire : public USeqAct_Latent
{
public:
	class ATdDummyPawn*                                DummyPawn;                                                // 0x00EC(0x0004)
	int                                                ShotsToFire;                                              // 0x00F0(0x0004) (Edit)
	class UClass*                                      WeaponClass;                                              // 0x00F4(0x0004) (Edit)
	unsigned char                                      FireMode;                                                 // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	class AActor*                                      Origin;                                                   // 0x00FC(0x0004) (Edit)
	class AActor*                                      Target;                                                   // 0x0100(0x0004) (Edit)
	struct FRotator                                    MaxSpread;                                                // 0x0104(0x000C) (Edit)
	int                                                ShotsFired;                                               // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdDummyWeaponFire");
		return ptr;
	}


	bool Update(float DeltaTime);
	void NotifyDummyFire();
	void Activated();
};


// Class TdGame.TdDummyPawn
// 0x0004 (0x03C8 - 0x03C4)
class ATdDummyPawn : public AGamePawn
{
public:
	class USeqAct_TdDummyWeaponFire*                   FireAction;                                               // 0x03C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDummyPawn");
		return ptr;
	}


	void Tick(float DeltaTime);
	struct FVector GetPawnViewLocation();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	struct FRotator GetAdjustedAimFor(class AWeapon* InWeapon, const struct FVector& projStart);
	void WeaponFired(bool bViaReplication, const struct FVector& HitLocation);
	bool StopWeaponFiring();
};


// Class TdGame.SeqAct_TdEnablePlayerInput
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdEnablePlayerInput : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdEnablePlayerInput");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdEnableReactionTime
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdEnableReactionTime : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdEnableReactionTime");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdFakePostProcessEffect
// 0x0014 (0x00F0 - 0x00DC)
class USeqAct_TdFakePostProcessEffect : public USequenceAction
{
public:
	TEnumAsByte<EFakedPPEffect>                        Effect;                                                   // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              Amount;                                                   // 0x00E0(0x0004) (Edit)
	struct FVector                                     Direction;                                                // 0x00E4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdFakePostProcessEffect");
		return ptr;
	}


	class ATdPlayerController* GetPlayerController();
	void Activated();
};


// Class TdGame.TdDamageType
// 0x0034 (0x00C0 - 0x008C)
class UTdDamageType : public UDamageType
{
public:
	TArray<struct FName>                               PhysicsImpactSpringList;                                  // 0x008C(0x000C) (NeedCtorLink, EditInline)
	TArray<struct FName>                               PhysicsBodyImpactBoneList;                                // 0x0098(0x000C) (NeedCtorLink, EditInline)
	float                                              PhysicsHitReactionBlendOutTime;                           // 0x00A4(0x0004)
	float                                              PhysicsHitReactionDuration;                               // 0x00A8(0x0004)
	struct FVector2D                                   PhysHitReactionMotorStrength;                             // 0x00AC(0x0008)
	struct FVector2D                                   PhysHitReactionSpringStrength;                            // 0x00B4(0x0008)
	unsigned long                                      bCausePhysicalHitReaction : 1;                            // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDamageType");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Melee
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_Melee : public UTdDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Melee");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdFallOnBack
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdFallOnBack : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdFallOnBack");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdRegisterStat
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdRegisterStat : public USequenceAction
{
public:
	TEnumAsByte<EAchievementStatsID>                   StatId;                                                   // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	class ATdPlayerController*                         PlayerController;                                         // 0x00E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdRegisterStat");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdGetStatCount
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_TdGetStatCount : public USequenceAction
{
public:
	TEnumAsByte<EAchievementStatsID>                   StatId;                                                   // 0x00DC(0x0001) (Edit)
	TEnumAsByte<EStatCompType>                         ComparisonType;                                           // 0x00DD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00DE(0x0002) MISSED OFFSET
	int                                                ComparisonValue;                                          // 0x00E0(0x0004) (Edit)
	int                                                StatCount;                                                // 0x00E4(0x0004)
	class ATdPlayerController*                         PlayerController;                                         // 0x00E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdGetStatCount");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdGiveFullReactionEnergy
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdGiveFullReactionEnergy : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdGiveFullReactionEnergy");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdInElevator
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdInElevator : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdInElevator");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdInitiateStashing
// 0x0010 (0x00EC - 0x00DC)
class USeqAct_TdInitiateStashing : public USequenceAction
{
public:
	class ATdStashpoint*                               Stashpoint;                                               // 0x00DC(0x0004)
	int                                                StashDuration;                                            // 0x00E0(0x0004) (Edit)
	int                                                FirstStashDuration;                                       // 0x00E4(0x0004) (Edit)
	unsigned long                                      bFirstStashpoint : 1;                                     // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdInitiateStashing");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdInterceptStashing
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdInterceptStashing : public USequenceAction
{
public:
	class ATdStashpoint*                               Stashpoint;                                               // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdInterceptStashing");
		return ptr;
	}


	void Activated();
};


// Class TdGame.TdMove_Cutscene
// 0x0018 (0x01A4 - 0x018C)
class UTdMove_Cutscene : public UTdPhysicsMove
{
public:
	struct FVector                                     TargetLocation;                                           // 0x018C(0x000C)
	struct FRotator                                    TargetRotation;                                           // 0x0198(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Cutscene");
		return ptr;
	}


	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void AlignToTargetRotation();
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.SeqAct_TdLevelCompleted
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdLevelCompleted : public USequenceAction
{
public:
	struct FString                                     NextLevelName;                                            // 0x00DC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     NextCheckpointName;                                       // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdLevelCompleted");
		return ptr;
	}


	void Activated();
};


// Class TdGame.TdSPStoryGame
// 0x0014 (0x03C0 - 0x03AC)
class ATdSPStoryGame : public ATdSPGame
{
public:
	TArray<class UTdBossFight*>                        BossFights;                                               // 0x03AC(0x000C) (NeedCtorLink)
	int                                                ActiveBossFight;                                          // 0x03B8(0x0004)
	unsigned long                                      bAllowStreamingVolumes : 1;                               // 0x03BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPStoryGame");
		return ptr;
	}


	void TriggerEventsOnLevelReload(class ATdCheckpoint* CurrentCheckpoint, class AController* NewPlayer);
	void CheckDeviceConnected();
	void PostSublevelStreaming(const struct FString& Options);
	void RestartPlayer(class AController* NewPlayer);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void OnScriptLevelsReloaded();
	void ResetLevel();
	bool UseStreamingVolumes(bool bInFreeCam);
	void InitAI();
	bool STATIC_AllowReactionTime();
	void PostLogin(class APlayerController* NewPlayer);
	void PreBeginPlay();
	void Tick(float DeltaTime);
};


// Class TdGame.SeqAct_TdLevelStarted
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdLevelStarted : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdLevelStarted");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdPause
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdPause : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPause");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdPauseTimer
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdPauseTimer : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPauseTimer");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdPlayerFail
// 0x0000 (0x00DC - 0x00DC)
class USeqAct_TdPlayerFail : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdPlayerFail");
		return ptr;
	}

};


// Class TdGame.SeqAct_TdSlideShow
// 0x0024 (0x0100 - 0x00DC)
class USeqAct_TdSlideShow : public USequenceAction
{
public:
	TArray<class UTexture2D*>                          Pictures;                                                 // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      PictureDisplayTimes;                                      // 0x00E8(0x000C) (Edit, NeedCtorLink)
	float                                              TransitionSpeed;                                          // 0x00F4(0x0004) (Edit)
	unsigned long                                      bBlackStart : 1;                                          // 0x00F8(0x0004) (Edit)
	class USoundCue*                                   SoundCue;                                                 // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSlideShow");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdSpawnPooledEmitter
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdSpawnPooledEmitter : public USequenceAction
{
public:
	class UParticleSystem*                             ParticleSystem;                                           // 0x00DC(0x0004) (Edit)
	TArray<class AActor*>                              SpawnPoints;                                              // 0x00E0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bRandomizeSpawnPoints : 1;                                // 0x00EC(0x0004) (Edit)
	int                                                SpawnIndex;                                               // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSpawnPooledEmitter");
		return ptr;
	}


	void Reset();
	void Activated();
};


// Class TdGame.TdSPTutorialGame
// 0x0054 (0x0400 - 0x03AC)
class ATdSPTutorialGame : public ATdSPGame
{
public:
	TArray<struct FInitialTutorialState>               InitialTutorialStates;                                    // 0x03AC(0x000C) (Transient, NeedCtorLink)
	class ATdPlaceableCheckpointManager*               CheckpointManager;                                        // 0x03B8(0x0004) (Transient)
	struct FVector                                     LastValidPlayerLocation;                                  // 0x03BC(0x000C) (Transient)
	TEnumAsByte<EMovementChallenge>                    ActiveMovementChallenge;                                  // 0x03C8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	class ATdTutorialPawn*                             TutorialPawn;                                             // 0x03CC(0x0004) (Transient)
	class ATdPlayerController*                         TutorialPlayer;                                           // 0x03D0(0x0004) (Transient)
	class UClass*                                      TutorialMessageClass;                                     // 0x03D4(0x0004) (Transient)
	class UClass*                                      FeedbackMessageClass;                                     // 0x03D8(0x0004) (Transient)
	TArray<class ATdPlaceableCheckpoint*>              NextCheckPoints;                                          // 0x03DC(0x000C) (Transient, NeedCtorLink)
	class ATdPlaceableCheckpoint*                      LastCheckPoint;                                           // 0x03E8(0x0004) (Transient)
	unsigned long                                      bTutorialReactionTimeHelper : 1;                          // 0x03EC(0x0004) (Transient)
	class ATdAI_Tutorial*                              AiTutorialController;                                     // 0x03F0(0x0004) (Transient)
	struct FScriptDelegate                             __OnStayInTutorial__Delegate;                             // 0x03F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPTutorialGame");
		return ptr;
	}


	void SetObjective(const struct FName& CheckpointName);
	void ClearIgnoreInput();
	void OnSelection(class UTdUIScene_MessageBox* MsgBox, int SIndex, int PIndex);
	void OnPreSelectionAnim(class UTdUIScene_MessageBox* MsgBox, int SIndex, int PIndex);
	void OnMsgInit(class UUIScene* OpenScene, bool bInitialActivation);
	void OnLoadNextLevel();
	void CheckDeviceConnected();
	void PostSublevelStreaming(const struct FString& Options);
	void OnLevelCompleted(class ATdPlayerController* PC, const struct FString& CurrentLevelName, const struct FString& InNextLevelName, const struct FString& InNextCheckpointName);
	void OnTutorialCompleted(const struct FScriptDelegate& InOnStayInTutorial, const struct FString& NextLevelName);
	bool IsVaultAttack(class UClass* AttackType);
	bool IsSlideKickAttack(class UClass* AttackType);
	bool IsJumpKickAttack(class UClass* AttackType);
	bool IsLowMeleeAttack(class UClass* AttackType);
	bool IsPunchAttack(class UClass* AttackType);
	bool STATIC_AllowReactionTime();
	void DisableTutorialReactiontimeHelper();
	void EnableTutorialReactiontimeHelper();
	void CheckTouching(class ATdPlayerPawn* Pawn, TArray<class ATdPlaceableCheckpoint*> InNextCheckPoints);
	bool IsCheckpointIn(class ATdPlaceableCheckpoint* Test, TArray<class ATdPlaceableCheckpoint*> InCheckPoints);
	bool GetNextCheckpoints(class ATdPlaceableCheckpoint* Current, TArray<class ATdPlaceableCheckpoint*>* outCheckpoints);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void SendTutorialKismetEvent(TEnumAsByte<EMovementChallenge> MovementChallange, int TutorialEvent, class ATdTutorialCheckpoint* Sender);
	void SendMCKismetEvent(TEnumAsByte<EMovementChallenge> MovementChallange, class UClass* EventClass, class ATdTutorialCheckpoint* Sender);
	bool PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ResetPlayer(class ATdPlayerPawn* PawnToReset, class ANavigationPoint* StartSpot);
	void ResetGameSequence();
	class APlayerStart* GetActivePlayerStart();
	class APlayerStart* FindMCStartSpot(TEnumAsByte<EMovementChallenge> Track);
	void GetStartSpots(TEnumAsByte<EMovementChallenge> Track, TArray<class ATdTutorialStart*>* TutorialStartSpots);
	bool IsCombatTutorialChallenge(int Index);
	bool IsInWalkTrough();
	void ReStartCurrentMovementChallenge();
	void ReStartCurrentMovementChallengeLight();
	void ClearActivateTutorialMessages();
	void ReStartMovementChallenge(int Index);
	void StartMovementChallenge(int Index);
	void StoreLastValidPlayerLocation();
	void Timer();
	int GetActiveMovementChallenge();
	void OnAiKismetEvent(int EventIdentifier);
	void OnAttackEvent(class UClass* AttackType, class ATdPawn* Pawn);
	bool ValidAttack(class UClass* AttackType);
	bool CanAttack();
	void OnTutorialEvent(int TutorialEvent, class ATdPawn* Pawn);
	void OnPlayerSetMove(TEnumAsByte<EMovement> NewMove, class ATdPlayerPawn* Pawn);
	void OnCheckpointCompleted(class ATdPlaceableCheckpoint* Checkpoint, class ATdPlayerPawn* Pawn, class ATdPlayerController* Controller);
	void RegisterAiController(class ATdAIController* AIController);
	void RestartPlayer(class AController* C);
	void PreBeginPlay();
	void PostLogin(class APlayerController* NewPlayer);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void OnStayInTutorial(bool bStayInTutorial);
};


// Class TdGame.SeqAct_TdStartMovementChallenge
// 0x0001 (0x00DD - 0x00DC)
class USeqAct_TdStartMovementChallenge : public USequenceAction
{
public:
	TEnumAsByte<EMovementChallenge>                    MovementChallege;                                         // 0x00DC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdStartMovementChallenge");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdSupersMessage
// 0x0018 (0x00F4 - 0x00DC)
class USeqAct_TdSupersMessage : public USequenceAction
{
public:
	struct FString                                     SupersMessage;                                            // 0x00DC(0x000C) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x00E8(0x0004) (Edit)
	class UTdGameUISceneClient*                        SceneClient;                                              // 0x00EC(0x0004)
	class ULocalPlayer*                                Player;                                                   // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdSupersMessage");
		return ptr;
	}


	class ULocalPlayer* GetFirstLocalPlayer();
	void OnSupersSceneOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OpenNextSupersScene();
	void OnSupersSceneClosed(class UUIScene* ClosedScene);
	void Activated();
};


// Class TdGame.TdHUDContent
// 0x0030 (0x006C - 0x003C)
class UTdHUDContent : public UObject
{
public:
	TArray<class UTexture2D*>                          Textures;                                                 // 0x003C(0x000C) (Const, NeedCtorLink)
	TArray<class UUIScene*>                            Scenes;                                                   // 0x0048(0x000C) (Const, NeedCtorLink)
	TArray<class USoundCue*>                           SoundCues;                                                // 0x0054(0x000C) (Const, NeedCtorLink)
	TArray<class UMultiFont*>                          MultiFonts;                                               // 0x0060(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDContent");
		return ptr;
	}


	class UMultiFont* STATIC_GetMultiFontByName(const struct FName& FontName, const struct FString& InLoaderClass);
	class USoundCue* STATIC_GetSoundCueByName(const struct FName& SoundCueName, const struct FString& InLoaderClass);
	class UUIScene* STATIC_GetUISceneByName(const struct FName& UISceneName, const struct FString& InLoaderClass);
	class UTexture2D* STATIC_GetTextureByName(const struct FName& TextureName, const struct FString& InLoaderClass);
};


// Class TdGame.SeqAct_TdTimerWriter
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdTimerWriter : public USequenceAction
{
public:
	int                                                Time;                                                     // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTimerWriter");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class TdGame.SeqAct_TdTriggerBoss
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdTriggerBoss : public USequenceAction
{
public:
	int                                                BossFightIndex;                                           // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTriggerBoss");
		return ptr;
	}


	void Activated();
};


// Class TdGame.TdMOVE_Disarm
// 0x003C (0x01C8 - 0x018C)
class UTdMOVE_Disarm : public UTdPhysicsMove
{
public:
	class ATdPawn*                                     DisarmedPawn;                                             // 0x018C(0x0004)
	TEnumAsByte<EDisarmState>                          DisarmState;                                              // 0x0190(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	class UClass*                                      WeaponClass;                                              // 0x0194(0x0004)
	class ATdWeapon*                                   DisarmedWeapon;                                           // 0x0198(0x0004)
	float                                              DisarmOffset;                                             // 0x019C(0x0004)
	struct FName                                       DisarmAnim;                                               // 0x01A0(0x0008)
	struct FVector                                     TargetLocation;                                           // 0x01A8(0x000C)
	struct FRotator                                    TargetRotation;                                           // 0x01B4(0x000C)
	unsigned long                                      bMoveEnemy : 1;                                           // 0x01C0(0x0004)
	unsigned long                                      bForceMiss : 1;                                           // 0x01C0(0x0004)
	class UForceFeedbackWaveform*                      DisarmWaveform;                                           // 0x01C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMOVE_Disarm");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void MoveRumbleNotify();
	void AbortDisarm();
	void OnTimer();
	void PlayDisarmStart();
	void FailedToReachPreciseLocation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ReachedPreciseLocation();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StopMove();
	void TakeDisarmedPawnsWeapon();
	void ChooseDisarmType(struct FRotator* YawOffset);
	void StartMiss();
	void ForceMiss(bool bMiss);
	void AlignPawn();
	void HandleHeightDifference(const struct FRotator& YawOffset);
	void HandlePlayerUnableToMove(const struct FRotator& YawOffset);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Disarm_Celeste
// 0x0000 (0x01C8 - 0x01C8)
class UTdMove_Disarm_Celeste : public UTdMOVE_Disarm
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarm_Celeste");
		return ptr;
	}


	void ChooseDisarmType(struct FRotator* YawOffset);
	void MeleeAttackNotify();
	void TakeDisarmedPawnsWeapon();
	bool CanDoMove();
};


// Class TdGame.TdMove_HeadButtedByCeleste
// 0x0000 (0x01C8 - 0x01C8)
class UTdMove_HeadButtedByCeleste : public UTdMOVE_Disarm
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_HeadButtedByCeleste");
		return ptr;
	}


	void TriggerHitPlayer();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ChooseDisarmType(struct FRotator* YawOffset);
	void TakeDisarmedPawnsWeapon();
	bool CanDoMove();
};


// Class TdGame.TdSPHUD
// 0x0040 (0x0528 - 0x04E8)
class ATdSPHUD : public ATdHUD
{
public:
	TEnumAsByte<EReticuleValues>                       DrawReticuleFlag;                                         // 0x04E8(0x0001)
	TEnumAsByte<EPopUpType>                            PopUpType;                                                // 0x04E9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	unsigned long                                      bIsInZoomState : 1;                                       // 0x04EC(0x0004)
	unsigned long                                      bDisableDrawCrossHair : 1;                                // 0x04EC(0x0004) (Edit, Config)
	struct FVector2D                                   PopUpPos;                                                 // 0x04F0(0x0008)
	float                                              PopUpDuration;                                            // 0x04F8(0x0004)
	float                                              PopUpStartTime;                                           // 0x04FC(0x0004)
	struct FString                                     PopUpMessage;                                             // 0x0500(0x000C) (NeedCtorLink)
	class UFont*                                       ButtonFontPS3;                                            // 0x050C(0x0004) (Const)
	class UFont*                                       ButtonFontXBOX;                                           // 0x0510(0x0004) (Const)
	class UTexture2D*                                  UnarmedCrossHair;                                         // 0x0514(0x0004) (Const)
	class UTexture2D*                                  ReactionCrossHair;                                        // 0x0518(0x0004) (Const)
	class UTexture2D*                                  WeaponCrossHair;                                          // 0x051C(0x0004) (Const)
	class UTexture2D*                                  BagIcon;                                                  // 0x0520(0x0004) (Const)
	class UTexture2D*                                  CheckIcon;                                                // 0x0524(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPHUD");
		return ptr;
	}


	struct FString LocalizeKeyCommand(const struct FString& KeyCommand);
	void DrawPopUp();
	struct FString BuildBagString();
	void ActivatePopUp(TEnumAsByte<EPopUpType> Type, float Duration, const struct FString& Message);
	void SetDrawCrosshairFlag(TEnumAsByte<EReticuleValues> flag);
	void ToggleZoomState(bool bZoom);
	void DrawLivingHUD();
	void LoadHUDContent(class UClass* ContentClass);
};


// Class TdGame.SeqAct_TdTriggerPopUp
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdTriggerPopUp : public USequenceAction
{
public:
	TEnumAsByte<EPopUpType>                            PopUpType;                                                // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTriggerPopUp");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqAct_TdTriggerSplashHint
// 0x000C (0x00E8 - 0x00DC)
class USeqAct_TdTriggerSplashHint : public USequenceAction
{
public:
	int                                                HintNumber;                                               // 0x00DC(0x0004) (Edit)
	class UTdGameUISceneClient*                        SceneClient;                                              // 0x00E0(0x0004)
	class ULocalPlayer*                                Player;                                                   // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTriggerSplashHint");
		return ptr;
	}


	class ULocalPlayer* GetFirstLocalPlayer();
	void OnHintSceneOpened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OpenNextHintScene();
	void OnHintSceneClosed(class UUIScene* ClosedScene);
	void Activated();
};


// Class TdGame.TdSPLevelRace
// 0x0014 (0x03D4 - 0x03C0)
class ATdSPLevelRace : public ATdSPStoryGame
{
public:
	class ATdPlayerController*                         RacingController;                                         // 0x03C0(0x0004)
	float                                              TargetTime;                                               // 0x03C4(0x0004)
	unsigned long                                      bRaceOver : 1;                                            // 0x03C8(0x0004)
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x03CC(0x0004)
	class UTdSPPostProcessingBase*                     PostProcess;                                              // 0x03D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPLevelRace");
		return ptr;
	}


	void OnlineConnectionLost();
	void OnAllPostProcessDone(class UTdTTResult* FinalResult);
	void OnOfflinePostProcessDone(class UTdTTResult* Result);
	void OnOnlinePostProcessDone(class UTdTTResult* Result);
	void OnLevelCompleted(class ATdPlayerController* PC, const struct FString& CurrentLevelName, const struct FString& InNextLevelName, const struct FString& InNextCheckpointName);
	bool CanOpenPauseMenu();
	void RestartRace();
	void OnPlayerDead();
	void PostLogin(class APlayerController* NewPlayer);
	void Reset();
	void PostBeginPlay();
	bool ShouldIncremetLevelTimer();
	void Tick(float DeltaTime);
};


// Class TdGame.TdPlaceableCheckpointManager
// 0x002C (0x01EC - 0x01C0)
class ATdPlaceableCheckpointManager : public AActor
{
public:
	TScriptInterface<class UTdCheckpointListener>      Listener;                                                 // 0x01C0(0x0008) (Transient)
	TArray<struct FCheckpointTrack>                    Tracks;                                                   // 0x01C8(0x000C) (Transient, NeedCtorLink)
	TArray<class ATdPlaceableCheckpoint*>              ActiveTrack;                                              // 0x01D4(0x000C) (Transient, NeedCtorLink)
	TArray<class ATdPlaceableCheckpoint*>              AllCheckPoints;                                           // 0x01E0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlaceableCheckpointManager");
		return ptr;
	}


	int GetIndexOfCheckPoint(class ATdPlaceableCheckpoint* Checkpoint);
	class ATdPlaceableCheckpoint* GetCheckpointPointAtIndex(int Index);
	class ATdPlaceableCheckpoint* GetPreviousCheckpoint(class ATdPlaceableCheckpoint* Checkpoint);
	class ATdPlaceableCheckpoint* GetNextCheckpoint(class ATdPlaceableCheckpoint* Checkpoint);
	class ATdPlaceableCheckpoint* GetFinalCheckpoint();
	class ATdPlaceableCheckpoint* GetFirstCheckpoint();
	float GetTrackDistance(int TrackIndex);
	TArray<class ATdPlaceableCheckpoint*> GetTrackForIndex(int TrackIndex);
	int GetTrackSizeForIndex(int TrackIndex);
	struct FTrackData GetTrackData(int TrackIndex, class APlayerStart* SeperateStartSpot);
	int GetTrackSize();
	bool ActivateTrack(int TrackIndex);
	bool CanFindTrack(int TrackIndex);
	void DeactivateAllCheckpoints();
	void ShowTrack(int TrackIndex, bool bShow);
	void ClearAllTracks();
	void ComputeDirectionHints();
	void ListCheckpoints();
	void InsertCheckpointIntoTrack(class ATdPlaceableCheckpoint* CheckpointToInsert, int CheckpointOrderIndex, int TrackArrayIndex);
	void Initialize(class UClass* CheckpointClass, const TScriptInterface<class UTdCheckpointListener>& InListener);
};


// Class TdGame.TdSPTimeTrialGame
// 0x00D4 (0x0480 - 0x03AC)
class ATdSPTimeTrialGame : public ATdSPGame
{
public:
	int                                                RaceFinishLineTime;                                       // 0x03AC(0x0004) (Config)
	float                                              RaceFinishLineFadeTimePct;                                // 0x03B0(0x0004) (Config)
	float                                              RaceFinishLineTimer;                                      // 0x03B4(0x0004)
	int                                                RaceCountDownTime;                                        // 0x03B8(0x0004) (Config)
	int                                                RaceCountDownTimer;                                       // 0x03BC(0x0004)
	class ATdPlaceableCheckpointManager*               CheckpointManager;                                        // 0x03C0(0x0004) (Transient)
	class ATdLookAtPoint*                              CheckpointLookAtHelper;                                   // 0x03C4(0x0004) (Transient)
	class ATdPlaceableCheckpoint*                      NextCheckPoint;                                           // 0x03C8(0x0004) (Transient)
	class ATdPlaceableCheckpoint*                      LastCheckPoint;                                           // 0x03CC(0x0004) (Transient)
	int                                                NumCheckPoints;                                           // 0x03D0(0x0004) (Transient)
	int                                                NumPassedCheckPoints;                                     // 0x03D4(0x0004) (Transient)
	int                                                NumPassedTimerCheckPoints;                                // 0x03D8(0x0004) (Transient)
	float                                              LastCheckpointTimeStamp;                                  // 0x03DC(0x0004) (Transient)
	class ATdPlayerPawn*                               RacingPawn;                                               // 0x03E0(0x0004) (Transient)
	class ATdPlayerController*                         RacingPlayer;                                             // 0x03E4(0x0004) (Transient)
	struct FVector                                     LastValidPlayerLocation;                                  // 0x03E8(0x000C) (Transient)
	float                                              LastPlayerResetTime;                                      // 0x03F4(0x0004) (Transient)
	unsigned char                                      bDelayPauseUntilRaceStarted;                              // 0x03F8(0x0001) (Transient)
	TEnumAsByte<ETTStretch>                            ActiveTTStretch;                                          // 0x03F9(0x0001) (Transient)
	TEnumAsByte<ERaceType>                             RaceType;                                                 // 0x03FA(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03FB(0x0001) MISSED OFFSET
	unsigned long                                      HasGhost : 1;                                             // 0x03FC(0x0004) (Transient)
	unsigned long                                      bInitailRaceSpawn : 1;                                    // 0x03FC(0x0004)
	class UTdSPPostProcessingBase*                     PostProcess;                                              // 0x0400(0x0004) (Transient)
	float                                              QualifyingTime;                                           // 0x0404(0x0004)
	float                                              StarRatingTimes[0x3];                                     // 0x0408(0x0004)
	struct FTrackData                                  CurrentTackData;                                          // 0x0414(0x0010) (Transient, NeedCtorLink)
	struct FTimeData                                   CurrentTimeData;                                          // 0x0424(0x001C) (Transient, NeedCtorLink)
	struct FTimeData                                   TimeDataToBeat;                                           // 0x0440(0x001C) (Transient, NeedCtorLink)
	float                                              RaceStartTimeStamp;                                       // 0x045C(0x0004) (Transient)
	float                                              RaceEndTimeStamp;                                         // 0x0460(0x0004) (Transient)
	float                                              PlayerDistance;                                           // 0x0464(0x0004) (Transient)
	class UClass*                                      TdTTMessageClass;                                         // 0x0468(0x0004) (Transient)
	class UClass*                                      VictoryMessageClass;                                      // 0x046C(0x0004) (Transient)
	class UClass*                                      TimeMessageClass;                                         // 0x0470(0x0004) (Transient)
	class UClass*                                      TimeFinishMessageClass;                                   // 0x0474(0x0004) (Transient)
	class ATdGhostManager*                             GhostManager;                                             // 0x0478(0x0004)
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x047C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPTimeTrialGame");
		return ptr;
	}


	void OnMaxFaded();
	void DisableIgnoreInputTimer();
	void ClearIgnoreInput();
	void GameEnding();
	void CountDownTimer();
	void SendKismetEvent(class UClass* EventClass);
	void ViewGhost();
	bool IsSpectatingGhost();
	void StopGhostRecording();
	void RecordGhost();
	void OnlineConnectionLost();
	void OnAllPostProcessDone(class UTdTTResult* FinalResult);
	void OnOfflinePostProcessDone(class UTdTTResult* Result);
	void OnOnlinePostProcessDone(class UTdTTResult* Result);
	void WriteOnlineStats();
	void WriteOnlinePlayerScores();
	struct FTimeData ReadTimeData(int Stretch, int InRaceType);
	void CreateTimeData(const struct FTrackData& InTrackData, float InTotalTime, TArray<float> InTimes, struct FTimeData* NewTimeData);
	struct FTimeData CreateFakeTimeData(TEnumAsByte<ETTStretch> Stretch, float TimeToBeat);
	void TriggerEventsOnLevelReload(class AController* NewPlayer);
	void PrepareRace();
	void StartRaceCountDown();
	void ResetPlayerToLatestCheckpoint();
	void SetIgnoreInput(bool bIgnore);
	bool PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void StoreLastValidPlayerLocation();
	void ResetPlayer(class ATdPlayerPawn* PawnToReset, class ANavigationPoint* StartSpot);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	void OnCheckpointCompleted(class ATdPlaceableCheckpoint* Checkpoint, class ATdPlayerPawn* Pawn, class ATdPlayerController* Controller);
	void RestartPlayer(class AController* C);
	void PostLogin(class APlayerController* NewPlayer);
	void PostSublevelStreaming(const struct FString& Options);
	void PreBeginPlay();
	bool CanOpenPauseMenu();
	void OnPlayerDead();
	class ATdLookAtPoint* GetLookAtPoint(class ATdPawn* Player);
	float GetPlayerTime();
	TEnumAsByte<ERaceType> STATIC_GetRaceTypeFromInt(int InRaceType);
	TEnumAsByte<ETTStretch> STATIC_GetStretchFromName(const struct FName& Stretch);
	struct FTrackData GetTrackData(int Stretch);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdUIScene_SplashHint
// 0x002C (0x0324 - 0x02F8)
class UTdUIScene_SplashHint : public UTdUIScene
{
public:
	class UUILabel*                                    TitleLabel;                                               // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    SectionLabel;                                             // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    DescriptionLabel;                                         // 0x0300(0x0004) (Transient)
	class UUIImage*                                    HintImage;                                                // 0x0304(0x0004) (Transient)
	class UTdProfileSettings*                          Profile;                                                  // 0x0308(0x0004)
	int                                                HintNumber;                                               // 0x030C(0x0004)
	struct FString                                     CurrentMap;                                               // 0x0310(0x000C) (NeedCtorLink)
	float                                              ActivateTimer;                                            // 0x031C(0x0004)
	unsigned long                                      bInputActive : 1;                                         // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SplashHint");
		return ptr;
	}


	void InitSceneLabels();
	void ActivateInput(bool bActive);
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void SetupHint(int Number);
	void Initialized();
};


// Class TdGame.SeqAct_TdTutorialReset
// 0x0004 (0x00E0 - 0x00DC)
class USeqAct_TdTutorialReset : public USequenceAction
{
public:
	unsigned long                                      bResetPlayerPawn : 1;                                     // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdTutorialReset");
		return ptr;
	}


	void Activated();
};


// Class TdGame.TdBotPawn_Tutorial
// 0x0000 (0x0E1C - 0x0E1C)
class ATdBotPawn_Tutorial : public ATdBotPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBotPawn_Tutorial");
		return ptr;
	}


	void UseLegRotation(bool UseLegRotation);
	bool ShouldMeleeCauseStumbleFar();
	bool ShouldMeleeCauseFall();
	bool ShouldBlock(class UClass* MeleeDamageType);
	void Landed(const struct FVector& iNormal, class AActor* iActor);
	bool PreventWeaponImpactEffect(class AController* InstigatorController);
	void AddToInventory(class UClass* WeaponClass);
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& damageMomentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void PostBeginPlay();
	void Turn(float DeltaTime);
	void AnimationHideWeapon();
};


// Class TdGame.SeqAct_TdUnlockAchievement
// 0x0008 (0x00E4 - 0x00DC)
class USeqAct_TdUnlockAchievement : public USequenceAction
{
public:
	TEnumAsByte<ETdAchievements>                       AchievementId;                                            // 0x00DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	class ATdPlayerController*                         PlayerController;                                         // 0x00E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqAct_TdUnlockAchievement");
		return ptr;
	}


	void Activated();
};


// Class TdGame.SeqCond_TdCaseInt
// 0x000C (0x00D0 - 0x00C4)
class USeqCond_TdCaseInt : public USequenceCondition
{
public:
	int                                                Input;                                                    // 0x00C4(0x0004) (Edit)
	int                                                ValueA;                                                   // 0x00C8(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqCond_TdCaseInt");
		return ptr;
	}


	void Activated();
};


// Class TdGame.TdValveSkeletalMeshActor
// 0x0000 (0x01F4 - 0x01F4)
class ATdValveSkeletalMeshActor : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdValveSkeletalMeshActor");
		return ptr;
	}


	void AddValveRoll(int RollValue);
	void PlayAnimation(const struct FName& AnimSeqName, float Rate);
};


// Class TdGame.SeqEvt_TdBeginStashingGame
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdBeginStashingGame : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdBeginStashingGame");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdBossfightOver
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdBossfightOver : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdBossfightOver");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdCelesteBossFight
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdCelesteBossFight : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdCelesteBossFight");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdMovementChallengeEvent
// 0x0001 (0x00F5 - 0x00F4)
class USeqEvt_TdMovementChallengeEvent : public USequenceEvent
{
public:
	TEnumAsByte<EMovementChallenge>                    MovementChallenge;                                        // 0x00F4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdMovementChallengeEvent");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdMovementChallengeCompleted
// 0x0000 (0x00F5 - 0x00F5)
class USeqEvt_TdMovementChallengeCompleted : public USeqEvt_TdMovementChallengeEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdMovementChallengeCompleted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdMovementChallengeReset
// 0x0000 (0x00F5 - 0x00F5)
class USeqEvt_TdMovementChallengeReset : public USeqEvt_TdMovementChallengeEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdMovementChallengeReset");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdMovementChallengeStarted
// 0x0000 (0x00F5 - 0x00F5)
class USeqEvt_TdMovementChallengeStarted : public USeqEvt_TdMovementChallengeEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdMovementChallengeStarted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdPlayerDeath
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdPlayerDeath : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdPlayerDeath");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdPlayerSpotted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdPlayerSpotted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdPlayerSpotted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdPlayerSwitchedWeapon
// 0x0008 (0x00FC - 0x00F4)
class USeqEvt_TdPlayerSwitchedWeapon : public USequenceEvent
{
public:
	class AVolume*                                     ConditionalVolume;                                        // 0x00F4(0x0004) (Edit)
	class UClass*                                      ConditionalWeaponClass;                                   // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdPlayerSwitchedWeapon");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdStashPoint
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdStashPoint : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdStashPoint");
		return ptr;
	}


	void HandleStashPointEvent(class ATdStashpoint* TriggerStashpoint);
};


// Class TdGame.SeqEvt_TdStashingCompleted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdStashingCompleted : public USeqEvt_TdStashPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdStashingCompleted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdStashingInitiated
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdStashingInitiated : public USeqEvt_TdStashPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdStashingInitiated");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdStashingIntercepted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdStashingIntercepted : public USeqEvt_TdStashPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdStashingIntercepted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdTutorialCheckpointCompleted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TdTutorialCheckpointCompleted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdTutorialCheckpointCompleted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdTutorialEvent
// 0x000F (0x0104 - 0x00F5)
class USeqEvt_TdTutorialEvent : public USeqEvt_TdMovementChallengeEvent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ETutorialEvents>>               TutorialEvents;                                           // 0x00F8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdTutorialEvent");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TdTutorialMessage
// 0x0001 (0x00F5 - 0x00F4)
class USeqEvt_TdTutorialMessage : public USequenceEvent
{
public:
	TEnumAsByte<ETutorialMessage>                      Message;                                                  // 0x00F4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TdTutorialMessage");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TTFinishLine
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TTFinishLine : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TTFinishLine");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TTRaceCountDownStarted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TTRaceCountDownStarted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TTRaceCountDownStarted");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TTRaceFinished
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TTRaceFinished : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TTRaceFinished");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TTRaceLoaded
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TTRaceLoaded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TTRaceLoaded");
		return ptr;
	}

};


// Class TdGame.SeqEvt_TTRaceStarted
// 0x0000 (0x00F4 - 0x00F4)
class USeqEvt_TTRaceStarted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SeqEvt_TTRaceStarted");
		return ptr;
	}

};


// Class TdGame.SimpleCommandlet
// 0x0004 (0x0080 - 0x007C)
class USimpleCommandlet : public UCommandlet
{
public:
	int                                                intparm;                                                  // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.SimpleCommandlet");
		return ptr;
	}


	int Main(const struct FString& Parms);
	int TestFunction();
};


// Class TdGame.TdBubbleStack
// 0x0020 (0x005C - 0x003C)
class UTdBubbleStack : public UObject
{
public:
	class ATdAIController*                             myDebugController;                                        // 0x003C(0x0004)
	struct FName                                       myDebugFilter;                                            // 0x0040(0x0008)
	int                                                myMaxDepth;                                               // 0x0048(0x0004)
	unsigned long                                      myStartValue : 1;                                         // 0x004C(0x0004)
	TArray<struct FBoolItem>                           BoolStack;                                                // 0x0050(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBubbleStack");
		return ptr;
	}


	int FindIdentifier(const struct FName& Identifier);
	void PopBool(const struct FName& Identifier, bool bDebug);
	void PushBool(bool flag, const struct FName& Identifier, bool bDebug);
	struct FName GetIdentifier();
	bool GetBool();
	void Reset();
	void Initialize(bool StartValue, int MaxDepth, class ATdAIController* DebugController, const struct FName& DebugFilter);
};


// Class TdGame.TdAI_RunnerVisionEffect
// 0x0000 (0x0244 - 0x0244)
class ATdAI_RunnerVisionEffect : public AInterpActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_RunnerVisionEffect");
		return ptr;
	}


	void Initialize();
};


// Class TdGame.TdProjectile
// 0x0010 (0x020C - 0x01FC)
class ATdProjectile : public AProjectile
{
public:
	int                                                InnerCoreDamage;                                          // 0x01FC(0x0004)
	int                                                InnerCoreDamageRadius;                                    // 0x0200(0x0004)
	float                                              OuterCoreDamage;                                          // 0x0204(0x0004)
	int                                                OuterCoreDamageRadius;                                    // 0x0208(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProjectile");
		return ptr;
	}


	bool HurtRadius(float BaseDamage, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
};


// Class TdGame.TdProj_Grenade
// 0x0024 (0x0230 - 0x020C)
class ATdProj_Grenade : public ATdProjectile
{
public:
	class UPrimitiveComponent*                         Mesh;                                                     // 0x020C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              TimeToExplode;                                            // 0x0210(0x0004)
	class USoundCue*                                   ExplodingSound;                                           // 0x0214(0x0004) (Edit)
	class USoundCue*                                   BouncingSound;                                            // 0x0218(0x0004) (Edit)
	class UParticleSystem*                             ExplodingEffect;                                          // 0x021C(0x0004) (Edit)
	class UParticleSystemComponent*                    PSC_SmokeTrail;                                           // 0x0220(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bHasExploded : 1;                                         // 0x0224(0x0004) (Net)
	class UAudioComponent*                             InFlightSound;                                            // 0x0228(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   InFlightSoundTemplate;                                    // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProj_Grenade");
		return ptr;
	}


	void GrenadeExplosion(const struct FVector& HitLocation, const struct FVector& HitNormal, bool bOnGround);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void WarnProjExplode();
	void HideProjectile();
	void DestroyTheProjectile(class UParticleSystemComponent* PSC);
	void DoExplosion();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void ActivateCollision();
	void Init(const struct FVector& Direction);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class TdGame.TdEquipment
// 0x0004 (0x0214 - 0x0210)
class ATdEquipment : public AInventory
{
public:
	unsigned long                                      bIsActive : 1;                                            // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdEquipment");
		return ptr;
	}


	void Deactivate();
	bool IsActive();
	void Activate();
	void RenderOverlays(class AHUD* H);
};


// Class TdGame.TdInv_Shield
// 0x0008 (0x021C - 0x0214)
class ATdInv_Shield : public ATdEquipment
{
public:
	class UTdSkeletalMeshComponent*                    Mesh3p;                                                   // 0x0214(0x0004) (ExportObject, Component, EditInline)
	int                                                Health;                                                   // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInv_Shield");
		return ptr;
	}


	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void Activate();
};


// Class TdGame.TdDmgType_Bullet
// 0x0004 (0x00C4 - 0x00C0)
class UTdDmgType_Bullet : public UTdDamageType
{
public:
	float                                              AngularVelocity;                                          // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Bullet");
		return ptr;
	}

};


// Class TdGame.TdMove_Disarmed
// 0x0000 (0x018C - 0x018C)
class UTdMove_Disarmed : public UTdPhysicsMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarmed");
		return ptr;
	}


	void AbortDisarm();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnTimer();
	void PlayDisarmStart(const struct FName& DisarmAnim, bool bUseRootMotion, bool bUseRootRotation);
	void SetLookAtDirection(const struct FRotator& LookAtDirection);
	void ReachedPreciseLocation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeAirAboveBot
// 0x0000 (0x01EC - 0x01EC)
class UTdMove_MeleeAirAboveBot : public UTdMove_MeleeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeAirAboveBot");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnTimer();
	void StopMove();
	void PlayCannedAnim(const struct FName& AnimationName);
};


// Class TdGame.TdDmgType_MeleeLeft
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeLeft : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeLeft");
		return ptr;
	}

};


// Class TdGame.TdMove_AnimationPlayback
// 0x0018 (0x0170 - 0x0158)
class UTdMove_AnimationPlayback : public UTdMove
{
public:
	struct FName                                       AnimationName;                                            // 0x0158(0x0008) (Transient)
	float                                              PlayRate;                                                 // 0x0160(0x0004) (Transient)
	float                                              BlendInTime;                                              // 0x0164(0x0004) (Transient)
	float                                              BlendOutTime;                                             // 0x0168(0x0004) (Transient)
	unsigned long                                      bUseRootMotion : 1;                                       // 0x016C(0x0004) (Transient)
	unsigned long                                      bUseRootRotation : 1;                                     // 0x016C(0x0004) (Transient)
	unsigned long                                      bLoop : 1;                                                // 0x016C(0x0004) (Transient)
	unsigned long                                      bForceWalkingStateToIdle : 1;                             // 0x016C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_AnimationPlayback");
		return ptr;
	}


	void SetPhysics(TEnumAsByte<EPhysics> iPhysics);
	void UseRootRotation(bool iRootRotation);
	void UseRootMotion(bool iUseRootMotion);
	void ForceToIdle(bool bForce);
	void SetLoopAnimation(bool iLoop);
	void SetBlendTime(float iBlendInTime, float iBlendOutTime);
	void SetPlayRate(float iPlayRate);
	struct FName GetAnimationName();
	void SetAnimationName(const struct FName& iAnimationName);
	void Landed(const struct FVector& iNormal, class AActor* iActor);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartAnimation();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMoveManager
// 0x0000 (0x003C - 0x003C)
class UTdMoveManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveManager");
		return ptr;
	}


	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
};


// Class TdGame.TdAI_Boss
// 0x0000 (0x0600 - 0x0600)
class ATdAI_Boss : public ATdAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Boss");
		return ptr;
	}


	bool CanInvestigate();
	bool CanSearch();
};


// Class TdGame.TdAI_BossHeliController
// 0x0014 (0x0354 - 0x0340)
class ATdAI_BossHeliController : public ATdAI_HeliController
{
public:
	float                                              NodeInvalidatedTime;                                      // 0x0340(0x0004)
	unsigned long                                      bNodeInvalidated : 1;                                     // 0x0344(0x0004)
	float                                              PlayerNearDistance;                                       // 0x0348(0x0004)
	float                                              TimeToInvalidateNode;                                     // 0x034C(0x0004)
	float                                              PlayerNearTimeToInvalidate;                               // 0x0350(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_BossHeliController");
		return ptr;
	}


	void CheckForPlayer();
	void InvalidateNode();
	class ATdAttackPathNode* FindBestAttackPoint(float* PrioValue);
	float GetPrio(class ATdAttackPathNode* Node, const struct FVector& PlayerPosition);
	void Tick(float DeltaTime);
};


// Class TdGame.TdMove_PursuitMelee
// 0x0389 (0x05CD - 0x0244)
class UTdMove_PursuitMelee : public UTdMove_BotMelee
{
public:
	struct FMeleeAttackProperties                      JumpKickAttackPropertiesE;                                // 0x0244(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      RunAttackPropertiesE;                                     // 0x0280(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      StandAttackPropertiesE;                                   // 0x02BC(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      SlideAttackPropertiesE;                                   // 0x02F8(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      ShoveAttackPropertiesE;                                   // 0x0334(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      JumpKickAttackPropertiesN;                                // 0x0370(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      RunAttackPropertiesN;                                     // 0x03AC(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      StandAttackPropertiesN;                                   // 0x03E8(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      SlideAttackPropertiesN;                                   // 0x0424(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      ShoveAttackPropertiesN;                                   // 0x0460(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      JumpKickAttackPropertiesH;                                // 0x049C(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      RunAttackPropertiesH;                                     // 0x04D8(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      StandAttackPropertiesH;                                   // 0x0514(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      SlideAttackPropertiesH;                                   // 0x0550(0x003C) (Edit, Config, NeedCtorLink)
	struct FMeleeAttackProperties                      ShoveAttackPropertiesH;                                   // 0x058C(0x003C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bAttackDidHit : 1;                                        // 0x05C8(0x0004)
	TEnumAsByte<EPursuitMeleeAttackType>               AttackType;                                               // 0x05CC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_PursuitMelee");
		return ptr;
	}


	void EnableLOI();
	class UClass* GetDamageType();
	void StopMissAnimation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void TriggerMiss();
	void TriggerHit();
	struct FMeleeAttackProperties GetAttackProperties(TEnumAsByte<EPursuitMeleeAttackType> Attack);
	void TriggerMove();
	bool IsInterruptableByDodge();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdDmgType_MeleeRight
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeRight : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeRight");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Barge
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_Barge : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Barge");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeAir
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeAir : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeAir");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeCrouch
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeCrouch : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeCrouch");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeSlide
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeSlide : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeSlide");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeWallRun
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeWallRun : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeWallRun");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeSoccerKick
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeSoccerKick : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeSoccerKick");
		return ptr;
	}

};


// Class TdGame.TdProj_FlashbangGrenade
// 0x0018 (0x0248 - 0x0230)
class ATdProj_FlashbangGrenade : public ATdProj_Grenade
{
public:
	float                                              LookAwayDamageScale;                                      // 0x0230(0x0004)
	float                                              DynamicLightFlashDuration;                                // 0x0234(0x0004) (Edit)
	float                                              DynamicLightFlashTimer;                                   // 0x0238(0x0004) (Transient)
	struct FColor                                      DynamicLightFlashColor;                                   // 0x023C(0x0004) (Edit)
	float                                              DynamicLightFlashBrightness;                              // 0x0240(0x0004) (Edit)
	class UPointLightComponent*                        DynamicLightFlashLight;                                   // 0x0244(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProj_FlashbangGrenade");
		return ptr;
	}


	void DisableDynamicLightFlash();
	void Tick(float DeltaTime);
	void TriggerDynamicLightFlash();
	bool HurtRadius(float BaseDamage, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
};


// Class TdGame.TdProj_SmokeGrenade
// 0x0000 (0x0230 - 0x0230)
class ATdProj_SmokeGrenade : public ATdProj_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProj_SmokeGrenade");
		return ptr;
	}


	void GrenadeExplosion(const struct FVector& HitLocation, const struct FVector& HitNormal, bool bOnGround);
};


// Class TdGame.TdAI_Dummy
// 0x0004 (0x0604 - 0x0600)
class ATdAI_Dummy : public ATdAIController
{
public:
	unsigned long                                      bCanSee : 1;                                              // 0x0600(0x0004)
	unsigned long                                      bCanHear : 1;                                             // 0x0600(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Dummy");
		return ptr;
	}


	void UpdatePawnFocus();
	void TestCombatTransitions();
	bool AllowFire();
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType);
	void SeePlayer(class APawn* aPawn);
};


// Class TdGame.TdAI_MeleeDummy
// 0x000C (0x0610 - 0x0604)
class ATdAI_MeleeDummy : public ATdAI_Dummy
{
public:
	struct FVector                                     pos;                                                      // 0x0604(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_MeleeDummy");
		return ptr;
	}


	void TestCombatTransitions();
	void TestMelee();
	void NotifyEnemyVisibilityChange(bool visible);
};


// Class TdGame.TdAI_PatrolCop
// 0x0000 (0x0600 - 0x0600)
class ATdAI_PatrolCop : public ATdAIController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_PatrolCop");
		return ptr;
	}

};


// Class TdGame.TdMove_Melee_Riot
// 0x0040 (0x0284 - 0x0244)
class UTdMove_Melee_Riot : public UTdMove_BotMelee
{
public:
	unsigned long                                      bHit : 1;                                                 // 0x0244(0x0004)
	struct FMeleeAttackProperties                      ShieldPushProperties;                                     // 0x0248(0x003C) (Edit, Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_Riot");
		return ptr;
	}


	void TriggerMiss();
	void TriggerHit();
	void TriggerMove();
};


// Class TdGame.TdAI_SniperCeleste
// 0x0000 (0x063C - 0x063C)
class ATdAI_SniperCeleste : public ATdAI_Sniper
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_SniperCeleste");
		return ptr;
	}


	void CheckCrouching();
	TEnumAsByte<EDisarmState> QueryDisarmState(class ATdPawn* Disarmer);
	bool LaserActive();
	void UpdatePose();
};


// Class TdGame.TdAI_Support
// 0x0008 (0x0608 - 0x0600)
class ATdAI_Support : public ATdAIController
{
public:
	class ATdSuppressionSpot*                          SuppressionSpot;                                          // 0x0600(0x0004)
	unsigned long                                      HaveReachedSuppressionSpot : 1;                           // 0x0604(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAI_Support");
		return ptr;
	}


	void TestCombatTransitions();
};


// Class TdGame.TdTutorialListener
// 0x0000 (0x003C - 0x003C)
class UTdTutorialListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialListener");
		return ptr;
	}


	int GetActiveMovementChallenge();
	void OnAiKismetEvent(int EventIdentifier);
	void OnAttackEvent(class UClass* AttackType, class ATdPawn* Pawn);
	bool ValidAttack(class UClass* AttackType);
	bool CanAttack();
	void OnTutorialEvent(int TutorialEvent, class ATdPawn* Pawn);
	void OnPlayerSetMove(TEnumAsByte<EMovement> NewMove, class ATdPlayerPawn* Pawn);
	void RegisterAiController(class ATdAIController* AIController);
};


// Class TdGame.TdDmgType_MeleeDisarm
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeDisarm : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeDisarm");
		return ptr;
	}

};


// Class TdGame.TdAIDroppableAmmo
// 0x0000 (0x003C - 0x003C)
class UTdAIDroppableAmmo : public UTdAIDroppableItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIDroppableAmmo");
		return ptr;
	}


	void Drop(class ATdBotPawn* Dropper);
	bool CanDrop(class ATdBotPawn* Dropper);
};


// Class TdGame.TdDmgType_LowCaliber_Bullet
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_LowCaliber_Bullet : public UTdDmgType_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_LowCaliber_Bullet");
		return ptr;
	}

};


// Class TdGame.TdDmgType_HighCaliber_Bullet
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_HighCaliber_Bullet : public UTdDmgType_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_HighCaliber_Bullet");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Shotgun
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_Shotgun : public UTdDmgType_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Shotgun");
		return ptr;
	}

};


// Class TdGame.TdAITestScripts
// 0x0058 (0x0218 - 0x01C0)
class ATdAITestScripts : public AActor
{
public:
	class ATdAIController*                             AIController;                                             // 0x01C0(0x0004)
	struct FVector                                     TargetLocation;                                           // 0x01C4(0x000C)
	struct FVector                                     PlayerLocation;                                           // 0x01D0(0x000C)
	int                                                TestAngle;                                                // 0x01DC(0x0004)
	int                                                AngleStep;                                                // 0x01E0(0x0004)
	int                                                FocusAngle;                                               // 0x01E4(0x0004)
	int                                                FocusAngleStep;                                           // 0x01E8(0x0004)
	float                                              PauseTime;                                                // 0x01EC(0x0004)
	float                                              LongPauseTime;                                            // 0x01F0(0x0004)
	int                                                ActiveTestNr;                                             // 0x01F4(0x0004)
	int                                                ActiveSubTestNr;                                          // 0x01F8(0x0004)
	unsigned long                                      bRunAllTests : 1;                                         // 0x01FC(0x0004)
	unsigned long                                      bHasReachedTarget : 1;                                    // 0x01FC(0x0004)
	unsigned long                                      bDrawDebug : 1;                                           // 0x01FC(0x0004)
	unsigned long                                      bUsePerfectStop : 1;                                      // 0x01FC(0x0004)
	class UTdCheatManager*                             CheatManager;                                             // 0x0200(0x0004)
	class AActor*                                      DestinationActor;                                         // 0x0204(0x0004)
	struct FVector                                     OldDebugPos;                                              // 0x0208(0x000C)
	float                                              Distance;                                                 // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAITestScripts");
		return ptr;
	}


	void DrawDebug();
	void AdjustRotationForMovingBackwards(float Angle);
	struct FVector GetStopLocation();
	void PutPlayerInPositionForTurningTest(float Angle);
	void PutAiInPositionForStopTest(float Angle, float Dist);
	bool HasReachedStopTarget(const struct FVector& Target);
	bool HasReachedTarget(const struct FVector& Target);
	void PutPlayerInDefaultPosition();
	void PutAiInPositionForStartTest();
	void SetAiRotation(int AiRotation);
	struct FVector GetMoveToLocation(float Angle);
	void SlomoSpeed(float SlomoSpeed);
	void NextTest();
	void BackOneTest();
	void StartTestAimPoses();
	void TestTurningRandomAngles();
	void TestTurningAllAngles();
	void TestTurningAnimAngles();
	void TestStopWalkDynamicTarget();
	void TestStopWalkAllAngles();
	void TestStopWalkAnimAngles();
	void TestStopRunDynamicTarget();
	void TestStopRunAllAngles();
	void TestStopRunAnimAngles();
	void TestStartWalkAllAnglesLegRotation();
	void TestStartWalkAllAngles();
	void TestStartWalkNativeAngles();
	void TestStartRunDynamicAngles();
	void TestStartRunAllAnglesLegRotation();
	void TestStartRunAllAngles();
	void TestStartRunNativeAngles();
	void RunAllTests();
	void Init(class UTdCheatManager* InCheatManager, class ATdAIController* Controller);
};


// Class TdGame.TdCheatManager
// 0x0060 (0x009C - 0x003C)
class UTdCheatManager : public UCheatManager
{
public:
	struct FVector                                     P1;                                                       // 0x003C(0x000C)
	struct FVector                                     P2;                                                       // 0x0048(0x000C)
	struct FVector                                     oldPos;                                                   // 0x0054(0x000C)
	class ATdAIController*                             DebugController;                                          // 0x0060(0x0004)
	class APawn*                                       aPawn;                                                    // 0x0064(0x0004)
	struct FVector                                     OldHitLocation;                                           // 0x0068(0x000C)
	struct FVector                                     StoredPosition;                                           // 0x0074(0x000C)
	unsigned long                                      bStefan : 1;                                              // 0x0080(0x0004)
	unsigned long                                      bQA : 1;                                                  // 0x0080(0x0004)
	unsigned long                                      bShowTestAnimHud : 1;                                     // 0x0080(0x0004)
	class ATdAITestScripts*                            AITests;                                                  // 0x0084(0x0004)
	float                                              SlomoSpeed;                                               // 0x0088(0x0004)
	struct FVector                                     enemyPos;                                                 // 0x008C(0x000C)
	class ATdPawn*                                     ActiveActor;                                              // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheatManager");
		return ptr;
	}


	void ChaseAI();
	void InvertMouseCheat();
	void AiHoldFire(bool bHoldFire);
	void SetAimState(TEnumAsByte<EAimState> iAimState);
	void DebugFalling();
	void Eyelids();
	void SetHeliSpeed(int I);
	void HeliMove(const struct FString& navpointName);
	void RenameNodes();
	void ResetAI();
	void CoverPath();
	void CoverDetour();
	void CoverCPOL();
	void SetMeleeType(const struct FString& mt);
	void AICrouch();
	void PrintLog(const struct FString& iString);
	void DebugLineOfSight();
	void DebugHalt();
	class ATdAIController* GetClosestAI();
	void KillClosest();
	void KillAllAI();
	void KillAllButOne();
	void SaveProfile();
	void DefaultProfile();
	void ReadTTTime(int Stretch);
	void WriteTTTime(int Stretch, float Time, int NumIntermediateTimes);
	void CP();
	void ShowScenes();
	void CompleteLevel(int Level);
	void CompleteLR(float Time);
	void UnlockLevel(int Index);
	void LockLevel(int Index);
	void LockAllLevels();
	void UnlockAllLevels();
	void DumpAudioAllocations();
	void DebugReverbVolumes();
	void DebugVelocitySounds();
	void DebugMixGroups();
	void Bullet(int dmg);
	void Taser(int dmg);
	void Flashbang(int dmg);
	void UncontrolledFallingClamp(float Clamp);
	void UncontrolledFalling(int On);
	void FindBag(int Bag);
	void FindAllBags();
	void DeActivateSaturation();
	void ActivateSaturation();
	void UnLockAllTT();
	void IsTTUnlocked(int Index);
	void LockAllTT();
	void IsAllTTStretchesUnlocked();
	void LockTT(int Index);
	void UnlockTT(int Index);
	void SetGameProgress(const struct FString& Map, const struct FString& Checkpoint);
	void IsBagFound(int Index);
	void IsLevelUnlocked(int Index);
	void GiveStarRating(int NumStars);
	void InterpolateFootRotation(bool bEnable);
	void FootPositionInterpolationSpeed(float Speed);
	void InterpolateFootPosition(bool bEnable);
	void AlignFootRotation(bool bEnable);
	void AlignFootPosition(bool bEnable);
	void FootPlacement(bool bEnable);
	void TdToggleSlomo();
	void ShowAIDebug();
	void Boss(int stage);
	void rb();
	void Helicopter();
	void Platform();
	void subway();
	void Atrium();
	void Training();
	void SpawnAt(const struct FVector& pos);
	void Roll();
	void TestReachable();
	void AILogFilter(const struct FName& F);
	void ScreenLogFilter(const struct FName& F);
	void ClearScreenLog();
	void UpdatePath();
	void DebugStop();
	void mp();
	void sp();
	void MoveAIHere();
	void SetHeadFocusOnPlayer();
	void HeadFocus(bool flag);
	void RunHere();
	void RunStraightHere();
	void MoveStraightHere();
	void GoHereAll();
	void WalkHere();
	void GoAngle(int Angle, float Distance);
	void GoHere();
	void AiRootRotation();
	void pe();
	void PS();
	void dc();
	void pp();
	void ShowAll();
	void ShowThisOne();
	void ShowClosest();
	void DropMe();
	void DebugTrace(int Type);
	void QA();
	void Stefan();
	void Jesus();
	void God();
	void RemoveGod();
	void SetGod();
	void AIGod();
	void AIGotoState(const struct FName& NewState, bool onlyFirst);
	void Idle();
	void TestCovers();
	void ToggleAICrouching();
	void ToggleAIFocus();
	void ToggleAIWalking();
	void Invisible();
	void hack2();
	void hack1();
	void PlayAnim(const struct FName& AnimationName);
	void ToggleSlomo();
	void CoverGoToState(const struct FString& iState);
	void ChangeCover(bool bSelectClosestCover);
	void DebugCover(bool bSelectClosestCover);
	void Run();
	void Test();
	void SeeMe();
	void ToggleDifficultyLevel();
	void Ammo();
	void Difficulty(int Level);
	void SuppressAI();
	void InitAITestScripts();
	void SetDebugControllers();
};


// Class TdGame.TdMove_BotStartWalking
// 0x0004 (0x01D0 - 0x01CC)
class UTdMove_BotStartWalking : public UTdMove_BotStart
{
public:
	float                                              MinTimeBetweenTwoStartMoves;                              // 0x01CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStartWalking");
		return ptr;
	}


	bool CanDoMove();
};


// Class TdGame.TdAIVoiceOverData
// 0x002C (0x0068 - 0x003C)
class UTdAIVoiceOverData : public UObject
{
public:
	TArray<struct FAIVoiceOver>                        VOs;                                                      // 0x003C(0x000C) (NeedCtorLink)
	TArray<class USoundCue*>                           RadioStart;                                               // 0x0048(0x000C) (NeedCtorLink)
	TArray<class USoundCue*>                           RadioStop;                                                // 0x0054(0x000C) (NeedCtorLink)
	int                                                FirstVO;                                                  // 0x0060(0x0004)
	int                                                LastVo;                                                   // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAIVoiceOverData");
		return ptr;
	}

};


// Class TdGame.TdAnimNodeSynch
// 0x0000 (0x00D8 - 0x00D8)
class UTdAnimNodeSynch : public UAnimNodeSynch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnimNodeSynch");
		return ptr;
	}

};


// Class TdGame.TdAnnouncerBase
// 0x0010 (0x01D0 - 0x01C0)
class ATdAnnouncerBase : public AInfo
{
public:
	class UClass*                                      PlayingAnnouncementClass;                                 // 0x01C0(0x0004)
	class ATdPlayerController*                         PlayerOwner;                                              // 0x01C4(0x0004)
	class USoundCue*                                   RadioSoundCueTemplate;                                    // 0x01C8(0x0004)
	class UAudioComponent*                             CurrentAnnouncementComponent;                             // 0x01CC(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdAnnouncerBase");
		return ptr;
	}


	void PlayAnnouncement(class UClass* InMessageClass, class USoundNodeWave* Announcement);
	void STATIC_Play3DLocationalAnnouncement(class AActor* Announcer, class UClass* InMessageClass, int Switch, bool bReplicateToGhosts, bool bReplicateToOwner, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void PostBeginPlay();
};


// Class TdGame.TdLocalMessage
// 0x0005 (0x0055 - 0x0050)
class UTdLocalMessage : public ULocalMessage
{
public:
	float                                              RadioAnnouncementVolume;                                  // 0x0050(0x0004)
	TEnumAsByte<EMessageArea>                          MessageArea;                                              // 0x0054(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLocalMessage");
		return ptr;
	}


	float STATIC_GetPos(int Switch, class AHUD* myHUD);
	int STATIC_GetMessageArea(int Switch);
	class USoundNodeWave* STATIC_GetAnnouncementSound(class APlayerController* P, int Switch, class APlayerReplicationInfo* PitcherPRI, class APlayerReplicationInfo* RecieverPRI, class UObject* OptionalObject);
};


// Class TdGame.TdBagGRI
// 0x0018 (0x0280 - 0x0268)
class ATdBagGRI : public ATdGameReplicationInfo
{
public:
	unsigned long                                      bBagIsOnGround : 1;                                       // 0x0268(0x0004)
	class ATdPlayerReplicationInfo*                    LastBagHolderPRI;                                         // 0x026C(0x0004)
	class ATdPlayerReplicationInfo*                    BagHolderPRI;                                             // 0x0270(0x0004) (Net)
	class AActor*                                      Bag;                                                      // 0x0274(0x0004) (Net)
	float                                              UnreachableBagDetectionTimeout;                           // 0x0278(0x0004) (Config)
	class UClass*                                      TdBagMessageClass;                                        // 0x027C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBagGRI");
		return ptr;
	}


	void OnCarriedObjectTouchedGround(class AActor* CarriedActor);
	void OnRespawnCarriedObject(class AActor* CarriedActor);
	void OnDropCarriedObject(class ATdPlayerReplicationInfo* PRI, class AActor* CarriedActor);
	void OnCarryObject(class ATdPlayerReplicationInfo* PRI, class AActor* CarriedActor);
	struct FVector FindBestBagStart();
	bool IsBagGame();
	void PreBeginPlay();
};


// Class TdGame.TdBagKActor
// 0x0020 (0x02B8 - 0x0298)
class ATdBagKActor : public AKActor
{
public:
	TScriptInterface<class UTdCarriableMediator>       Mediator;                                                 // 0x0298(0x0008) (Transient)
	class APawn*                                       LastCarrierPawn;                                          // 0x02A0(0x0004) (Transient)
	struct FString                                     InventoryClassName;                                       // 0x02A4(0x000C) (NeedCtorLink)
	unsigned long                                      bTouchedGround : 1;                                       // 0x02B0(0x0004)
	class UCylinderComponent*                          ActorCylinderComponent;                                   // 0x02B4(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBagKActor");
		return ptr;
	}


	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* Damage);
	void DelayedFellOutOfWorld();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void BaseChange();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	class AInventory* SpawnInventoryFor(class APawn* P);
	void EquipInvetoryPlaceHolderFor(class APawn* P);
	void Resurrect();
	bool IsCarried();
	void SetDropped(class APawn* CarrierPawn, const struct FVector& StartLocation, const struct FRotator& StartRotation, const struct FVector& WithForce);
	void SetCarried(class APawn* CarrierPawn, const struct FName& InBone, const struct FRotator& InRotation, const struct FVector& InOffset);
	void SetFreeze();
	void TimeEnableReTouch();
	class AActor* GetCarriableActor();
	void Finalize();
	void WakeRigidBody();
	void Unreachable();
	void ClearUnreachableTimer();
	void SetUnreachableTimer(float TimeToRespawn);
	void Initialize(const TScriptInterface<class UTdCarriableMediator>& InMediator);
};


// Class TdGame.TdCarriableMediator
// 0x0000 (0x003C - 0x003C)
class UTdCarriableMediator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCarriableMediator");
		return ptr;
	}


	void HintUnreachable();
	bool IsCarried();
	void OnResurrected();
	void OnTouchedGround();
	void OnTouched(class ATdPlayerPawn* CarrierPawn);
};


// Class TdGame.TdDmgType_OutOfBounds
// 0x0000 (0x008C - 0x008C)
class UTdDmgType_OutOfBounds : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_OutOfBounds");
		return ptr;
	}

};


// Class TdGame.TdCarriableActorProxy
// 0x0000 (0x003C - 0x003C)
class UTdCarriableActorProxy : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCarriableActorProxy");
		return ptr;
	}


	void SetDropped(class APawn* CarrierPawn, const struct FVector& StartLocation, const struct FRotator& StartRotation, const struct FVector& WithForce);
	void SetCarried(class APawn* Carrier, const struct FName& Bone, const struct FRotator& Rotation, const struct FVector& Offset);
	void WakeRigidBody();
	void ClearUnreachableTimer();
	void SetUnreachableTimer(float TimeToRespawn);
	void EquipInvetoryPlaceHolderFor(class APawn* P);
	class AActor* GetCarriableActor();
	void Finalize();
	void Initialize(const TScriptInterface<class UTdCarriableMediator>& InMediator);
};


// Class TdGame.TdGameMessage
// 0x0000 (0x0164 - 0x0164)
class UTdGameMessage : public UGameMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameMessage");
		return ptr;
	}

};


// Class TdGame.TdBagPRI
// 0x000C (0x0270 - 0x0264)
class ATdBagPRI : public ATdPlayerReplicationInfo
{
public:
	unsigned long                                      bHasBag : 1;                                              // 0x0264(0x0004) (Net)
	float                                              LastBagCarrierDamageTime;                                 // 0x0268(0x0004) (Transient)
	class UClass*                                      TdBagMessageClass;                                        // 0x026C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBagPRI");
		return ptr;
	}


	void AnnounceYouHaveTheBag();
	void OnDropCarriedObject(class AActor* inActor);
	void OnCarryObject(class AActor* inActor);
	void PreBeginPlay();
};


// Class TdGame.TdBagStart
// 0x0004 (0x0320 - 0x031C)
class ATdBagStart : public APlayerStart
{
public:
	int                                                PursuitSpawnID;                                           // 0x031C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBagStart");
		return ptr;
	}

};


// Class TdGame.TdBarbedWireVolume
// 0x0018 (0x02EC - 0x02D4)
class ATdBarbedWireVolume : public ATdMovementVolume
{
public:
	struct FVector                                     LatestHitLocation;                                        // 0x02D4(0x000C) (Transient)
	struct FVector                                     LatestHitNormal;                                          // 0x02E0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBarbedWireVolume");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class TdGame.TdMove_StumbleBase
// 0x0031 (0x01BD - 0x018C)
class UTdMove_StumbleBase : public UTdPhysicsMove
{
public:
	struct FVector                                     DamageLocation;                                           // 0x018C(0x000C)
	struct FVector                                     damageMomentum;                                           // 0x0198(0x000C)
	struct FVector                                     InstigatorLocation;                                       // 0x01A4(0x000C)
	class ATdPawn*                                     Instigator;                                               // 0x01B0(0x0004)
	class UClass*                                      HitDamageType;                                            // 0x01B4(0x0004)
	float                                              DirectionalBias;                                          // 0x01B8(0x0004)
	TEnumAsByte<EStumbleState>                         StumbleState;                                             // 0x01BC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StumbleBase");
		return ptr;
	}


	TEnumAsByte<EStumbleState> GetStumbleState();
	void StartMove();
};


// Class TdGame.TdDmgType_BarbedWire
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_BarbedWire : public UTdDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_BarbedWire");
		return ptr;
	}

};


// Class TdGame.TdBossFight
// 0x0000 (0x003C - 0x003C)
class UTdBossFight : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBossFight");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class TdGame.TdBotMoveManager
// 0x0000 (0x003C - 0x003C)
class UTdBotMoveManager : public UTdMoveManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdBotMoveManager");
		return ptr;
	}


	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
};


// Class TdGame.TdMove_IntoZipLine
// 0x0040 (0x01CC - 0x018C)
class UTdMove_IntoZipLine : public UTdPhysicsMove
{
public:
	class ATdZiplineVolume*                            ZipLine;                                                  // 0x018C(0x0004)
	struct FVector                                     HangOffset;                                               // 0x0190(0x000C) (Edit)
	float                                              ZVelocityFallLimit;                                       // 0x019C(0x0004) (Edit, Config)
	float                                              IntoZiplineBlendInTime;                                   // 0x01A0(0x0004) (Edit, Config)
	float                                              IntoZiplineBlendOutTime;                                  // 0x01A4(0x0004) (Edit, Config)
	float                                              EnterZipLineParam;                                        // 0x01A8(0x0004)
	struct FVector                                     SavedInitial2DVelocity;                                   // 0x01AC(0x000C)
	class UTdAnimNodeSequence*                         ZipLineIdleAnimation1p;                                   // 0x01B8(0x0004)
	class UTdAnimNodeSequence*                         ZipLineIdleAnimation3p;                                   // 0x01BC(0x0004)
	struct FName                                       LastZipLineVolumeName;                                    // 0x01C0(0x0008)
	float                                              SameZipLineRedoMoveTime;                                  // 0x01C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_IntoZipLine");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void SetIdleAnimationReference3p(class UTdAnimNodeSequence* AnimNode);
	void SetIdleAnimationReference1p(class UTdAnimNodeSequence* AnimNode);
	int HandleDeath(int Damage);
	void StopMove();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdInventoryManager
// 0x0005 (0x01E1 - 0x01DC)
class ATdInventoryManager : public AInventoryManager
{
public:
	float                                              WeaponPickupTime;                                         // 0x01DC(0x0004) (Edit, Config)
	TEnumAsByte<EInventorySlot>                        LastActiveGunSlot;                                        // 0x01E0(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInventoryManager");
		return ptr;
	}


	void ListInventory();
	void ClientSwitchToBestWeaponAfterDrop();
	void RemoveFromInventory(class AInventory* ItemToRemove);
	void ChangedWeapon();
	float GetWeaponRatingFor(class AWeapon* W);
	void SetCurrentWeapon(class AWeapon* DesiredWeapon);
	void PrevWeapon();
	void NextWeapon();
	TEnumAsByte<EInventorySlot> FindFreeSlotForWeaponClass(class UClass* WeaponClass);
	class ATdPickup* FindNearbyPickup();
	void TryToPickUpWeapon();
	void PressedSwitchWeapon();
	class ATdWeapon* GetWeaponFromSlot(TEnumAsByte<EInventorySlot> Slot);
	bool SwitchToWeaponInSlot(TEnumAsByte<EInventorySlot> Slot);
	void SwitchToBestWeapon(bool bForceADifferentWeapon);
	void SwitchToSpecificWeapon(int Index);
	void SwitchGun();
};


// Class TdGame.TdMove_Walking
// 0x0040 (0x01CC - 0x018C)
class UTdMove_Walking : public UTdPhysicsMove
{
public:
	unsigned long                                      bIsPlayingIdleAnim : 1;                                   // 0x018C(0x0004) (Transient)
	float                                              TriggerIdleAnimMinTime;                                   // 0x0190(0x0004) (Edit, Config)
	float                                              TriggerIdleAnimMaxTime;                                   // 0x0194(0x0004) (Edit, Config)
	TArray<struct FIdleAnimStruct>                     UnarmedIdleAnims;                                         // 0x0198(0x000C) (Config, NeedCtorLink)
	TArray<struct FIdleAnimStruct>                     LightIdleAnims;                                           // 0x01A4(0x000C) (Config, NeedCtorLink)
	TArray<struct FIdleAnimStruct>                     HeavyIdleAnims;                                           // 0x01B0(0x000C) (Config, NeedCtorLink)
	struct FIdleAnimStruct                             CurrentIdleAnim;                                          // 0x01BC(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Walking");
		return ptr;
	}


	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopIdle(float BlendOutTime);
	bool IsPlayingIdleAnim();
	void PlayIdle();
	bool CanPlayIdle();
	void OnIdleTimer();
	float GetNewIdleTriggerTime();
	void OnBlendOutJumpLandTimer();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdWeapon_Grenade
// 0x000D (0x05C5 - 0x05B8)
class ATdWeapon_Grenade : public ATdWeapon
{
public:
	float                                              ThrowAnimLength;                                          // 0x05B8(0x0004)
	float                                              CockAnimLength;                                           // 0x05BC(0x0004)
	unsigned long                                      bIsTapping : 1;                                           // 0x05C0(0x0004)
	unsigned long                                      bPendingEndFire : 1;                                      // 0x05C0(0x0004)
	TEnumAsByte<EGrenadeState>                         GrenadeState;                                             // 0x05C4(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeapon_Grenade");
		return ptr;
	}


	struct FVector GetMuzzleLoc();
	void AnimNotifyGrenadeThrow();
	void ThrowGrenade();
	void StartGrenadeThrow();
	void CockGrenade();
	void GrenadeReEquipped();
	void AttachNewGrenade();
	void FinishedThrow();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void EndFire(unsigned char FireModeNum);
	bool GetFireAnimName(struct FName* FireAnimName);
};


// Class TdGame.TdMove_Interact
// 0x0038 (0x01C4 - 0x018C)
class UTdMove_Interact : public UTdPhysicsMove
{
public:
	float                                              AnimationInteractionDelay;                                // 0x018C(0x0004)
	float                                              EventDelay;                                               // 0x0190(0x0004)
	class ATdTrigger*                                  CurrentTrigger;                                           // 0x0194(0x0004)
	class USeqEvent_TdUsed*                            CurrentEvent;                                             // 0x0198(0x0004)
	struct FVector                                     MoveLocation;                                             // 0x019C(0x000C)
	struct FVector                                     NormalFromTrigger2D;                                      // 0x01A8(0x000C)
	float                                              DistanceToAButton;                                        // 0x01B4(0x0004) (Config)
	float                                              DistanceToAValve;                                         // 0x01B8(0x0004) (Config)
	float                                              DistanceToInteractableObject;                             // 0x01BC(0x0004)
	unsigned long                                      bReverseRev : 1;                                          // 0x01C0(0x0004)
	unsigned long                                      bReachedTrigger : 1;                                      // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Interact");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool CanUseLookAtHint();
	void ActivateOutputLink(int OutputLinkNumber);
	void DecreaseValveRotation();
	void IncreaseValveRotation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void PlayInteractAnimation(const struct FName& AnimSeqName, float Rate, float BlendInTime, float BlendOutTime);
	void StopMove();
	void StartMove();
	void OnTimer();
	void ActivateFirstOuputLink();
	void ReachedPreciseLocationAndRotation();
	void StartInteract();
	void UpdateEventDelay();
	void SetCurrentEvent(class USeqEvent_TdUsed* ActiveUsedEvent);
	void SetCurrentTrigger(class ATdTrigger* ActiveTrigger);
	void ReleaseCurrentTriggerAndEvent();
	bool CanDoMove();
};


// Class TdGame.TdDmgType_Shove
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_Shove : public UTdDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Shove");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Taser
// 0x0008 (0x00C8 - 0x00C0)
class UTdDmgType_Taser : public UTdDamageType
{
public:
	float                                              ContiniousTaserDamage;                                    // 0x00C0(0x0004)
	float                                              InitialTaserDamage;                                       // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Taser");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Flashbang
// 0x0004 (0x00C4 - 0x00C0)
class UTdDmgType_Flashbang : public UTdDamageType
{
public:
	float                                              StunDamage;                                               // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Flashbang");
		return ptr;
	}

};


// Class TdGame.TdDmgType_HeavyFlashbang
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_HeavyFlashbang : public UTdDmgType_Flashbang
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_HeavyFlashbang");
		return ptr;
	}

};


// Class TdGame.TdDmgType_ElectricShock
// 0x0008 (0x00C8 - 0x00C0)
class UTdDmgType_ElectricShock : public UTdDamageType
{
public:
	float                                              DamageImpulse;                                            // 0x00C0(0x0004)
	float                                              DamageZDirection;                                         // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_ElectricShock");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeSecondSwing
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeSecondSwing : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeSecondSwing");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialFootSteps
// 0x00CC (0x0108 - 0x003C)
class UTdPhysicalMaterialFootSteps : public UTdPhysicalMaterialBase
{
public:
	unsigned long                                      bPlayOnTopOfParent : 1;                                   // 0x003C(0x0004) (Edit)
	class USoundCue*                                   _01_Female_FootStepCrouch;                                // 0x0040(0x0004) (Edit)
	class USoundCue*                                   _02_Female_FootStepWalk;                                  // 0x0044(0x0004) (Edit)
	class USoundCue*                                   _03_Female_FootStepRun;                                   // 0x0048(0x0004) (Edit)
	class USoundCue*                                   _04_Female_FootStepSprint;                                // 0x004C(0x0004) (Edit)
	class USoundCue*                                   _05_Female_FootStepSprintRelease;                         // 0x0050(0x0004) (Edit)
	class USoundCue*                                   _06_Female_FootStepWallRun;                               // 0x0054(0x0004) (Edit)
	class USoundCue*                                   _07_Female_FootStepWallrunRelease;                        // 0x0058(0x0004) (Edit)
	class USoundCue*                                   _08_Female_FootStepLandSoft;                              // 0x005C(0x0004) (Edit)
	class USoundCue*                                   _09_Female_FootStepLandMedium;                            // 0x0060(0x0004) (Edit)
	class USoundCue*                                   _10_Female_FootStepLandHard;                              // 0x0064(0x0004) (Edit)
	class USoundCue*                                   _11_Female_FootStepAttack;                                // 0x0068(0x0004) (Edit)
	class USoundCue*                                   _21_Female_HandStepSoft;                                  // 0x006C(0x0004) (Edit)
	class USoundCue*                                   _22_Female_HandStepMedium;                                // 0x0070(0x0004) (Edit)
	class USoundCue*                                   _23_Female_HandStepHard;                                  // 0x0074(0x0004) (Edit)
	class USoundCue*                                   _24_Female_HandStepLongRelease;                           // 0x0078(0x0004) (Edit)
	class USoundCue*                                   _25_Female_HandStepShortRelease;                          // 0x007C(0x0004) (Edit)
	class USoundCue*                                   _26_Female_HandStepAttack;                                // 0x0080(0x0004) (Edit)
	class USoundCue*                                   _31_Female_BodyAttack;                                    // 0x0084(0x0004) (Edit)
	class USoundCue*                                   _32_Female_BodyLandSoft;                                  // 0x0088(0x0004) (Edit)
	class USoundCue*                                   _33_Female_BodyLandHard;                                  // 0x008C(0x0004) (Edit)
	class USoundCue*                                   _34_Female_BodyLandRoll;                                  // 0x0090(0x0004) (Edit)
	class USoundCue*                                   _35_Female_BodyVault;                                     // 0x0094(0x0004) (Edit)
	class USoundCue*                                   _36_Female_BodySlide;                                     // 0x0098(0x0004) (Edit)
	class USoundCue*                                   _01_Pursuit_FootStepCrouch;                               // 0x009C(0x0004) (Edit)
	class USoundCue*                                   _02_Pursuit_FootStepWalk;                                 // 0x00A0(0x0004) (Edit)
	class USoundCue*                                   _03_Pursuit_FootStepRun;                                  // 0x00A4(0x0004) (Edit)
	class USoundCue*                                   _04_Pursuit_FootStepSprint;                               // 0x00A8(0x0004) (Edit)
	class USoundCue*                                   _05_Pursuit_FootStepSprintRelease;                        // 0x00AC(0x0004) (Edit)
	class USoundCue*                                   _06_Pursuit_FootStepWallRun;                              // 0x00B0(0x0004) (Edit)
	class USoundCue*                                   _07_Pursuit_FootStepWallrunRelease;                       // 0x00B4(0x0004) (Edit)
	class USoundCue*                                   _08_Pursuit_FootStepLandSoft;                             // 0x00B8(0x0004) (Edit)
	class USoundCue*                                   _09_Pursuit_FootStepLandMedium;                           // 0x00BC(0x0004) (Edit)
	class USoundCue*                                   _10_Pursuit_FootStepLandHard;                             // 0x00C0(0x0004) (Edit)
	class USoundCue*                                   _11_Pursuit_FootStepAttack;                               // 0x00C4(0x0004) (Edit)
	class USoundCue*                                   SwatFootSteps;                                            // 0x00C8(0x0004) (Edit)
	class UParticleSystem*                             _03_Effect_FootStepRun;                                   // 0x00CC(0x0004) (Edit)
	class UParticleSystem*                             _06_Effect_FootStepWallRun;                               // 0x00D0(0x0004) (Edit)
	class UParticleSystem*                             _08_Effect_FootStepLandSoft;                              // 0x00D4(0x0004) (Edit)
	class UParticleSystem*                             _10_Effect_FootStepLandHard;                              // 0x00D8(0x0004) (Edit)
	class UParticleSystem*                             _11_Effect_FootStepAttack;                                // 0x00DC(0x0004) (Edit)
	class UParticleSystem*                             _12_Effect_FootStepVertigo;                               // 0x00E0(0x0004) (Edit)
	class UParticleSystem*                             _21_Effect_HandStepSoft;                                  // 0x00E4(0x0004) (Edit)
	class UParticleSystem*                             _23_Effect_HandStepHard;                                  // 0x00E8(0x0004) (Edit)
	class UParticleSystem*                             _25_Effect_HandStepShortRelease;                          // 0x00EC(0x0004) (Edit)
	class UParticleSystem*                             _26_Effect_HandStepAttack;                                // 0x00F0(0x0004) (Edit)
	class UParticleSystem*                             _27_Effect_FemaleHandGrabHard;                            // 0x00F4(0x0004) (Edit)
	class UParticleSystem*                             _28_Effect_FemaleHandStrafeSlow;                          // 0x00F8(0x0004) (Edit)
	class UParticleSystem*                             _29_Effect_FemaleHandStrafeFast;                          // 0x00FC(0x0004) (Edit)
	class UParticleSystem*                             _31_Effect_BodyAttack;                                    // 0x0100(0x0004) (Edit)
	class UParticleSystem*                             _36_Effect_BodySlide;                                     // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialFootSteps");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialMelee
// 0x0014 (0x0050 - 0x003C)
class UTdPhysicalMaterialMelee : public UTdPhysicalMaterialBase
{
public:
	class USoundCue*                                   ImpactSoundGun;                                           // 0x003C(0x0004) (Edit)
	class USoundCue*                                   ImpactSoundFist;                                          // 0x0040(0x0004) (Edit)
	class USoundCue*                                   ImpactSoundFoot;                                          // 0x0044(0x0004) (Edit)
	class UParticleSystem*                             ImpactEffect;                                             // 0x0048(0x0004) (Edit)
	class UParticleSystem*                             ImpactEffectHead;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialMelee");
		return ptr;
	}

};


// Class TdGame.TdMove_Melee
// 0x0024 (0x0210 - 0x01EC)
class UTdMove_Melee : public UTdMove_MeleeBase
{
public:
	unsigned long                                      bLeft : 1;                                                // 0x01EC(0x0004)
	unsigned long                                      bWindowOpen : 1;                                          // 0x01EC(0x0004)
	int                                                ComboCounter;                                             // 0x01F0(0x0004)
	float                                              ComboTimer;                                               // 0x01F4(0x0004)
	int                                                ComboQueuedActions;                                       // 0x01F8(0x0004)
	TEnumAsByte<EMoveMeleeType>                        MeleeType;                                                // 0x01FC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET
	float                                              SoccerKickDamage;                                         // 0x0200(0x0004) (Config)
	float                                              PreventTime;                                              // 0x0204(0x0004)
	float                                              BlendInMissed;                                            // 0x0208(0x0004) (Config)
	float                                              BlendOutMissed;                                           // 0x020C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee");
		return ptr;
	}


	bool TestHit();
	class UClass* GetDamageType();
	void TriggerHit();
	void TriggerMiss();
	void TriggerMove();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void Reset();
	void OnTimer();
	void CloseWindow();
	void OpenWindow(float delay);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdPlayerMoveManager
// 0x0000 (0x003C - 0x003C)
class UTdPlayerMoveManager : public UTdMoveManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerMoveManager");
		return ptr;
	}


	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
};


// Class TdGame.TdMove_SpringBoard
// 0x0048 (0x01D4 - 0x018C)
class UTdMove_SpringBoard : public UTdPhysicsMove
{
public:
	float                                              SpringBoardMaxHeight;                                     // 0x018C(0x0004) (Edit, Config)
	float                                              SpringBoardMinHeight;                                     // 0x0190(0x0004) (Edit, Config)
	float                                              SpringBoardJumpZ;                                         // 0x0194(0x0004) (Edit, Config)
	float                                              SpringBoardJumpXYAdd;                                     // 0x0198(0x0004) (Edit, Config)
	float                                              SpringBoardJumpXYMin;                                     // 0x019C(0x0004) (Edit, Config)
	float                                              IntermediateFootPlantHeight;                              // 0x01A0(0x0004) (Edit, Config)
	float                                              IntermediateFootPlantDistance;                            // 0x01A4(0x0004) (Edit, Config)
	float                                              CheckDistanceTime;                                        // 0x01A8(0x0004) (Edit, Config)
	struct FVector                                     IntermediateFootPlantLedgeLocation;                       // 0x01AC(0x000C)
	struct FVector                                     SpringBoardFootPlantLedgeLocation;                        // 0x01B8(0x000C)
	float                                              StepTime1;                                                // 0x01C4(0x0004)
	float                                              StepTime2;                                                // 0x01C8(0x0004)
	int                                                SpringBoardState;                                         // 0x01CC(0x0004)
	int                                                SavedInitialSpeed;                                        // 0x01D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SpringBoard");
		return ptr;
	}


	int HandleDeath(int Damage);
	void StopMove();
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_SpeedVault
// 0x0094 (0x0220 - 0x018C)
class UTdMove_SpeedVault : public UTdPhysicsMove
{
public:
	float                                              VaultClearObjectHeight;                                   // 0x018C(0x0004) (Edit, Config)
	float                                              MaxTimeToLedge;                                           // 0x0190(0x0004) (Edit, Config)
	int                                                ActiveVaultType;                                          // 0x0194(0x0004)
	TArray<struct FVaultType>                          VaultTypes;                                               // 0x0198(0x000C) (Config, NeedCtorLink)
	struct FVector                                     VaultEndPosition;                                         // 0x01A4(0x000C)
	struct FVector                                     OverEndLocation;                                          // 0x01B0(0x000C)
	struct FVector                                     OntoEndLocation;                                          // 0x01BC(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x01C8(0x000C)
	struct FVector                                     StartToHandplant;                                         // 0x01D4(0x000C)
	int                                                VaultState;                                               // 0x01E0(0x0004)
	struct FVector                                     MoveDirection;                                            // 0x01E4(0x000C)
	struct FVector                                     HandLocation;                                             // 0x01F0(0x000C)
	struct FVector                                     TargetLocation;                                           // 0x01FC(0x000C)
	unsigned long                                      bVaultOnto : 1;                                           // 0x0208(0x0004)
	unsigned long                                      bEndMoveFalling : 1;                                      // 0x0208(0x0004)
	unsigned long                                      bEndMoveInMelee : 1;                                      // 0x0208(0x0004)
	float                                              VaultSpeed;                                               // 0x020C(0x0004)
	float                                              HandplantHeight;                                          // 0x0210(0x0004)
	struct FVector                                     CameraCollisionDirection;                                 // 0x0214(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SpeedVault");
		return ptr;
	}


	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	int HandleDeath(int Damage);
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void FailedToReachPreciseLocation();
	void UpdateVaultMovement();
	void OnTimer();
	void DisableVaultIK(float BlendOutTime);
	void EnableVaultIK(float BlendInTime);
	void StopMove();
	bool IsThisMoveStringable();
	void StartMove();
	void StartReplicatedMove();
	bool CheckCollision(const struct FVector& LedgeLocation, const struct FVector& PawnRefLocation, float FloorVelocity);
	bool FindVaultFloor(const struct FVector& NewMoveLedgeLocation, const struct FVector& WantedEndLocation, float* VaultFloorZ);
	int FindValidOverEndLocation(const struct FVector& NewMoveLedgeLocation, float MaxLedgeWidth);
	bool FindValidOntoEndLocation(const struct FVector& NewMoveLedgeLocation);
	bool CanDoMove();
	int UpdateActiveVaultType(float TimeToHandPlant);
};


// Class TdGame.TdMove_VaultOver
// 0x0000 (0x0220 - 0x0220)
class UTdMove_VaultOver : public UTdMove_SpeedVault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_VaultOver");
		return ptr;
	}

};


// Class TdGame.TdMove_GrabPullUp
// 0x0014 (0x01A0 - 0x018C)
class UTdMove_GrabPullUp : public UTdPhysicsMove
{
public:
	TEnumAsByte<EGrabPullUpType>                       GrabPullUpType;                                           // 0x018C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	struct FVector                                     FloorOverLedgeLocation;                                   // 0x0190(0x000C)
	int                                                GrabAllowedPullUpAngle;                                   // 0x019C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_GrabPullUp");
		return ptr;
	}


	void CheckForCameraCollision(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	int HandleDeath(int Damage);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void StopMove();
	void EnableCollision();
	void ReleaseCamera();
	void StartMove();
	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool CanPullUp(float CheckDepth);
	bool CanDoMove();
};


// Class TdGame.TdMove_WallrunJump
// 0x0020 (0x01AC - 0x018C)
class UTdMove_WallrunJump : public UTdPhysicsMove
{
public:
	float                                              WallRunningPushAwaySpeedNoob;                             // 0x018C(0x0004) (Edit, Config)
	float                                              WallRunningPushAwaySpeedProAdd;                           // 0x0190(0x0004) (Edit, Config)
	float                                              WallRunningPushForwardSpeedMin;                           // 0x0194(0x0004) (Edit, Config)
	float                                              WallRunningJumpOffZHeightForward;                         // 0x0198(0x0004) (Edit, Config)
	float                                              WallRunningJumpOffZHeightMaxAddTurned;                    // 0x019C(0x0004) (Edit, Config)
	float                                              WallRunningJumpOffZSpeed;                                 // 0x01A0(0x0004)
	int                                                MinContraintWorld;                                        // 0x01A4(0x0004)
	int                                                MaxContraintWorld;                                        // 0x01A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallrunJump");
		return ptr;
	}


	int GetMaxLookConstrainYaw();
	int GetMinLookConstrainYaw();
	void StopMove();
	bool IsThisMoveStringable();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_IntoClimb
// 0x0018 (0x01A4 - 0x018C)
class UTdMove_IntoClimb : public UTdPhysicsMove
{
public:
	TEnumAsByte<EClimbEnterState>                      ClimbState;                                               // 0x018C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	class ATdLadderVolume*                             Ladder;                                                   // 0x0190(0x0004)
	unsigned long                                      AtBottomStep : 1;                                         // 0x0194(0x0004)
	unsigned long                                      bPlayingImpact : 1;                                       // 0x0194(0x0004)
	float                                              FirstStepZDistance;                                       // 0x0198(0x0004)
	class UForceFeedbackWaveform*                      ImpactHardWaveform;                                       // 0x019C(0x0004)
	class UForceFeedbackWaveform*                      ImpactSoftWaveform;                                       // 0x01A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_IntoClimb");
		return ptr;
	}


	bool CanUseLookAtHint();
	int HandleDeath(int Damage);
	void FailedToReachPreciseLocation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartClimbMove();
	void ReachedPreciseLocation();
	void StopMove();
	void PlayStartAnimation();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Disabled
// 0x0000 (0x0158 - 0x0158)
class UTdMove_Disabled : public UTdMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disabled");
		return ptr;
	}


	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_180Turn
// 0x0008 (0x0160 - 0x0158)
class UTdMove_180Turn : public UTdMove
{
public:
	float                                              TurnAnimBlendInTime;                                      // 0x0158(0x0004) (Edit, Config)
	float                                              TurnAnimBlendOutTime;                                     // 0x015C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_180Turn");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ReachedPreciseRotation();
	void OnTimer();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_LayOnGround
// 0x0004 (0x0190 - 0x018C)
class UTdMove_LayOnGround : public UTdPhysicsMove
{
public:
	unsigned long                                      bIsGettingUpFromGround : 1;                               // 0x018C(0x0004)
	unsigned long                                      bIsDoingBackRoll : 1;                                     // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_LayOnGround");
		return ptr;
	}


	bool CanUseLookAtHint();
	struct FVector GetFocusLocation();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopWeaponHandling();
	void GetUpBack();
	void GetUp();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	int HandleDeath(int Damage);
	void StopMove();
	void StartMove();
	bool IsGettingUp();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeAir
// 0x002C (0x0218 - 0x01EC)
class UTdMove_MeleeAir : public UTdMove_MeleeBase
{
public:
	TEnumAsByte<EMeleeAirType>                         MeleeType;                                                // 0x01EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01ED(0x0003) MISSED OFFSET
	struct FVector                                     ImpactMomentum;                                           // 0x01F0(0x000C)
	struct FRotator                                    LookAtAngle;                                              // 0x01FC(0x000C)
	unsigned long                                      bHasRecievedLandedEvent : 1;                              // 0x0208(0x0004)
	float                                              MeleeAirAboveMinAngle;                                    // 0x020C(0x0004) (Config)
	float                                              MeleeAirAboveMinSeparation;                               // 0x0210(0x0004) (Config)
	float                                              MeleeAirAboveMaxSeparation;                               // 0x0214(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeAir");
		return ptr;
	}


	void TriggerDamage(class ATdPawn* Victim);
	void OnTimer();
	void TriggerMove();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	class UClass* GetDamageType();
	void HitObject(class AActor* Victim, const struct FVector& HitLocation, const struct FVector& HitNormal, class UClass* inDamageType);
	void Bump(const struct FVector& HitNormal, class AActor* BumpedActor);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Stumble
// 0x0007 (0x01C4 - 0x01BD)
class UTdMove_Stumble : public UTdMove_StumbleBase
{
public:
	TEnumAsByte<EStumbleStage>                         stage;                                                    // 0x01BD(0x0001)
	TEnumAsByte<EWeaponAnimState>                      PrevWeaponAnimState;                                      // 0x01BE(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x01BF(0x0001) MISSED OFFSET
	unsigned long                                      bInAir : 1;                                               // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Stumble");
		return ptr;
	}


	void UpdateFall();
	void PlayStumbleFall(const struct FVector& Direction);
	struct FVector GetFocusLocation();
	void OnTimer();
	void PlayStumbleAnimation();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_StepUp
// 0x0044 (0x01D0 - 0x018C)
class UTdMove_StepUp : public UTdPhysicsMove
{
public:
	float                                              StepUpDistanceLimit;                                      // 0x018C(0x0004) (Edit, Config)
	float                                              StepUpSpeedLimit;                                         // 0x0190(0x0004) (Edit, Config)
	float                                              StepUpLowMinHeight;                                       // 0x0194(0x0004) (Edit, Config)
	float                                              StepUpMediumMinHeight;                                    // 0x0198(0x0004) (Edit, Config)
	float                                              StepUpHighMinHeight;                                      // 0x019C(0x0004) (Edit, Config)
	float                                              StepUpHighMaxHeight;                                      // 0x01A0(0x0004) (Edit, Config)
	float                                              StepUpOptimalLowHeight;                                   // 0x01A4(0x0004) (Edit, Config)
	float                                              StepUpOptimalMediumHeight;                                // 0x01A8(0x0004) (Edit, Config)
	float                                              StepUpOptimalHighHeight;                                  // 0x01AC(0x0004) (Edit, Config)
	struct FVector                                     EndPosition;                                              // 0x01B0(0x000C)
	TEnumAsByte<EStepUpType>                           StepUpType;                                               // 0x01BC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01BD(0x0003) MISSED OFFSET
	float                                              StartDistance;                                            // 0x01C0(0x0004)
	struct FVector                                     SavedVelocity;                                            // 0x01C4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StepUp");
		return ptr;
	}


	void StopMove();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void ReachedPreciseLocation();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeSlide
// 0x0008 (0x01F4 - 0x01EC)
class UTdMove_MeleeSlide : public UTdMove_MeleeBase
{
public:
	unsigned long                                      bInMove : 1;                                              // 0x01EC(0x0004)
	float                                              BargeTraceDistance;                                       // 0x01F0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeSlide");
		return ptr;
	}


	void TriggerDamage(class ATdPawn* TracePawn);
	void OnFindBargeTargetTimer();
	void OnTimer();
	void TriggerMove();
	class UClass* GetDamageType();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void HitObject(class AActor* Victim, const struct FVector& HitLocation, const struct FVector& HitNormal, class UClass* inDamageType);
	void BargeObject(const struct FBargeHitInfo& HitInfo);
	void FindBargeTarget();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_WallClimb180TurnJump
// 0x001C (0x01A8 - 0x018C)
class UTdMove_WallClimb180TurnJump : public UTdPhysicsMove
{
public:
	float                                              JumpOffZHeight;                                           // 0x018C(0x0004) (Edit, Config)
	float                                              JumpPushAwaySpeed;                                        // 0x0190(0x0004) (Edit, Config)
	float                                              JumpTimeWindow;                                           // 0x0194(0x0004) (Edit, Config)
	unsigned long                                      bJumpingFromWall : 1;                                     // 0x0198(0x0004)
	struct FVector                                     WantedJumpDir;                                            // 0x019C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallClimb180TurnJump");
		return ptr;
	}


	void ReachedPreciseRotation();
	void OnTimer();
	void JumpFromWall();
	bool IsThisMoveStringable();
	void HandleMoveAction(TEnumAsByte<EMovementAction> Action);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeVault
// 0x0034 (0x0220 - 0x01EC)
class UTdMove_MeleeVault : public UTdMove_MeleeBase
{
public:
	struct FVector                                     ImpactMomentum;                                           // 0x01EC(0x000C)
	struct FRotator                                    LookAtAngle;                                              // 0x01F8(0x000C)
	float                                              VaultTimeDown;                                            // 0x0204(0x0004)
	struct FVector                                     VaultEndPosition;                                         // 0x0208(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x0214(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeVault");
		return ptr;
	}


	void TriggerDamage(class ATdPawn* Victim);
	void OnTimer();
	void TriggerMove();
	class UClass* GetDamageType();
	void SetVaultProperties(const struct FVector& InVaultEndPosition, float InVaultTimeDown, const struct FVector& InSavedVelocity);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void SetStoredVelocity();
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void StartMove();
};


// Class TdGame.TdMove_StumbleHard
// 0x0000 (0x01C4 - 0x01C4)
class UTdMove_StumbleHard : public UTdMove_Stumble
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StumbleHard");
		return ptr;
	}


	struct FVector GetFocusLocation();
	void PlayStumbleAnimation();
};


// Class TdGame.TdMove_BotRoll
// 0x0000 (0x0158 - 0x0158)
class UTdMove_BotRoll : public UTdMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotRoll");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_MeleeWallrun
// 0x0010 (0x01FC - 0x01EC)
class UTdMove_MeleeWallrun : public UTdMove_MeleeBase
{
public:
	struct FVector                                     WallrunNormal;                                            // 0x01EC(0x000C)
	unsigned long                                      bLeft : 1;                                                // 0x01F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeWallrun");
		return ptr;
	}


	void TriggerDamage(class ATdPawn* TracePawn);
	void TriggerMove();
	void OnTimer();
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartMove();
};


// Class TdGame.TdMove_MeleeCrouch
// 0x0010 (0x01FC - 0x01EC)
class UTdMove_MeleeCrouch : public UTdMove_MeleeBase
{
public:
	float                                              BargeTraceDistance;                                       // 0x01EC(0x0004) (Const)
	TArray<struct FBargeHitInfo>                       BargeImpactList;                                          // 0x01F0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeCrouch");
		return ptr;
	}


	struct FVector GetFocusLocation();
	void HitObject(const struct FBargeHitInfo& HitInfo);
	void FindBargeTarget();
	bool TestHit();
	void TriggerDamage(class ATdPawn* TracePawn);
	void TriggerMiss();
	void TriggerHit();
	void TriggerMove();
	class UClass* GetDamageType();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_SwingJump
// 0x0018 (0x01A4 - 0x018C)
class UTdMove_SwingJump : public UTdPhysicsMove
{
public:
	class ATdSwingVolume*                              TargetVolume;                                             // 0x018C(0x0004)
	float                                              GravityModifier;                                          // 0x0190(0x0004) (Config)
	float                                              GravityModifierTimer;                                     // 0x0194(0x0004) (Config)
	struct FVector                                     TargetVolumeOffset;                                       // 0x0198(0x000C) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SwingJump");
		return ptr;
	}


	void OnTimer();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_AutoStepUp
// 0x0040 (0x01CC - 0x018C)
class UTdMove_AutoStepUp : public UTdPhysicsMove
{
public:
	float                                              StepUpDistanceLimit;                                      // 0x018C(0x0004) (Edit, Config)
	float                                              StepUpSpeedLimit;                                         // 0x0190(0x0004) (Edit, Config)
	float                                              StepUpLowMinHeight;                                       // 0x0194(0x0004) (Edit, Config)
	float                                              StepUpMediumMinHeight;                                    // 0x0198(0x0004) (Edit, Config)
	float                                              StepUpHighMinHeight;                                      // 0x019C(0x0004) (Edit, Config)
	float                                              StepUpHighMaxHeight;                                      // 0x01A0(0x0004) (Edit, Config)
	float                                              StepUpOptimalLowHeight;                                   // 0x01A4(0x0004) (Edit, Config)
	float                                              StepUpOptimalMediumHeight;                                // 0x01A8(0x0004) (Edit, Config)
	float                                              StepUpOptimalHighHeight;                                  // 0x01AC(0x0004) (Edit, Config)
	struct FVector                                     EndPosition;                                              // 0x01B0(0x000C)
	float                                              StartDistance;                                            // 0x01BC(0x0004)
	struct FVector                                     SavedVelocity;                                            // 0x01C0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_AutoStepUp");
		return ptr;
	}


	void StopMove();
	void ReachedPreciseLocation();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeAirAbove
// 0x0018 (0x0204 - 0x01EC)
class UTdMove_MeleeAirAbove : public UTdMove_MeleeBase
{
public:
	struct FRotator                                    TargetRotation;                                           // 0x01EC(0x000C)
	struct FVector                                     TargetLocation;                                           // 0x01F8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeAirAbove");
		return ptr;
	}


	void DrawAnimDebugInfo(class AHUD* HUD, float* out_YL, float* out_YPos);
	void TriggerDamage(class ATdPawn* Victim);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnTimer();
	void PlayCannedAnim();
	void UpdateViewRotation(float DeltaTime, struct FRotator* out_Rotation, struct FRotator* DeltaRot);
	void FailedToReachPreciseLocation();
	void ReachedPreciseLocation();
	void StartMove();
};


// Class TdGame.TdMove_SkillRoll
// 0x0004 (0x0190 - 0x018C)
class UTdMove_SkillRoll : public UTdPhysicsMove
{
public:
	class UForceFeedbackWaveform*                      ImpactSkilledWaveform;                                    // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SkillRoll");
		return ptr;
	}


	bool CanUseLookAtHint();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void Landed(const struct FVector& aNormal, class AActor* anActor);
	void StopMove();
	bool IsThisMoveStringable();
	void DisableSwanneck();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdDmgType_Sniper_Bullet
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_Sniper_Bullet : public UTdDmgType_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Sniper_Bullet");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeAirAbove
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeAirAbove : public UTdDmgType_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeAirAbove");
		return ptr;
	}

};


// Class TdGame.TdMove_LayOnGroundBot
// 0x0004 (0x015C - 0x0158)
class UTdMove_LayOnGroundBot : public UTdMove
{
public:
	float                                              LayDownIdleTime;                                          // 0x0158(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_LayOnGroundBot");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnTimer();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_StumbleBot
// 0x0007 (0x01C4 - 0x01BD)
class UTdMove_StumbleBot : public UTdMove_StumbleBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01BD(0x0003) MISSED OFFSET
	unsigned long                                      bStandMeleeToStand : 1;                                   // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StumbleBot");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void EnableHeadFocus();
	void PlayStumbleAnimation();
	void StopMove();
	void StartMove();
	bool DiscardHitReaction();
	bool CanDoMove();
};


// Class TdGame.TdMove_DisarmedBot
// 0x0000 (0x018C - 0x018C)
class UTdMove_DisarmedBot : public UTdMove_Disarmed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_DisarmedBot");
		return ptr;
	}


	void StopMove();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_ExitCover
// 0x0000 (0x0158 - 0x0158)
class UTdMove_ExitCover : public UTdMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_ExitCover");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void RootRotationCompletedNotify();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_Cover
// 0x0000 (0x0158 - 0x0158)
class UTdMove_Cover : public UTdMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Cover");
		return ptr;
	}


	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotStumbleFalling
// 0x0000 (0x01BD - 0x01BD)
class UTdMove_BotStumbleFalling : public UTdMove_StumbleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStumbleFalling");
		return ptr;
	}


	void Landed(const struct FVector& iNormal, class AActor* iActor);
	bool IsValidTrace();
	void OnCeaseRelevantRootMotion(class UAnimNodeSequence* SeqNode);
	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartAnimation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotBlock
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotBlock : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotBlock");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void OnStartPlayerStumble();
	class UClass* GetDamageType();
	void TriggerMove();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_MeleeDummy
// 0x0000 (0x0244 - 0x0244)
class UTdMove_MeleeDummy : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeDummy");
		return ptr;
	}

};


// Class TdGame.TdMove_StumbleTutorialBot
// 0x0000 (0x01C4 - 0x01C4)
class UTdMove_StumbleTutorialBot : public UTdMove_StumbleBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_StumbleTutorialBot");
		return ptr;
	}


	void PlayStumbleAnimation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_DisarmedTutorial
// 0x0000 (0x018C - 0x018C)
class UTdMove_DisarmedTutorial : public UTdMove_DisarmedBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_DisarmedTutorial");
		return ptr;
	}


	void StopMove();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdCarriable
// 0x003C (0x0078 - 0x003C)
class UTdCarriable : public UObject
{
public:
	TScriptInterface<class UTdCarriableActorProxy>     ActorProxy;                                               // 0x003C(0x0008) (Transient)
	TScriptInterface<class UTdCarriableListener>       Listener;                                                 // 0x0044(0x0008) (Transient)
	class ATdPlayerPawn*                               CarrierPawn;                                              // 0x004C(0x0004) (Transient)
	struct FTdCarriableAttachInfo                      AttachInfo;                                               // 0x0050(0x0020)
	class ATdBagGRI*                                   MyGRI;                                                    // 0x0070(0x0004)
	float                                              UnreachableTimeout;                                       // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCarriable");
		return ptr;
	}


	bool OnDropped(class ATdPlayerPawn* InCarrierPawn, const struct FVector& StartLocation, const struct FRotator& StartRotation, const struct FVector& WithForce);
	bool OnCarried(class ATdPlayerPawn* InCarrierPawn);
	class AActor* GetCarriedActor();
	class APawn* GetCarryingPawn();
	struct FVector GetLocation();
	void HintUnreachable();
	void OnTouchedGround();
	bool IsCarried();
	void OnResurrected();
	void OnTouched(class ATdPlayerPawn* InCarrierPawn);
	void RespawnActorProxy(const struct FVector& InLocation);
	void Initialize(const TScriptInterface<class UTdCarriableListener>& InListener, class ATdBagGRI* InGRI);
};


// Class TdGame.TdCarriableListener
// 0x0000 (0x003C - 0x003C)
class UTdCarriableListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCarriableListener");
		return ptr;
	}


	void OnResurrected(class UTdCarriable* Carriable);
	void OnTouchedGround(class UTdCarriable* Carriable);
	void OnDropped(class UTdCarriable* Carriable);
	void OnCarried(class UTdCarriable* Carriable);
};


// Class TdGame.TdCheckpointListener
// 0x0000 (0x003C - 0x003C)
class UTdCheckpointListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheckpointListener");
		return ptr;
	}


	void OnCheckpointCompleted(class ATdPlaceableCheckpoint* Checkpoint, class ATdPlayerPawn* Pawn, class ATdPlayerController* Controller);
};


// Class TdGame.TdCheckpointVolume
// 0x000C (0x0208 - 0x01FC)
class ATdCheckpointVolume : public AVolume
{
public:
	TArray<TScriptInterface<class UTdCheckpointVolumeListener>> Listeners;                                                // 0x01FC(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheckpointVolume");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void AddListener(const TScriptInterface<class UTdCheckpointVolumeListener>& InListener);
};


// Class TdGame.TdCheckpointVolumeListener
// 0x0000 (0x003C - 0x003C)
class UTdCheckpointVolumeListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCheckpointVolumeListener");
		return ptr;
	}


	void OnTouchedVolume(class ATdPlayerPawn* Pawn, class ATdPlayerController* Controller);
};


// Class TdGame.TdCopSpawnMarker
// 0x0000 (0x01CC - 0x01CC)
class ATdCopSpawnMarker : public ATdMarker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCopSpawnMarker");
		return ptr;
	}

};


// Class TdGame.TdStashpointListener
// 0x0000 (0x003C - 0x003C)
class UTdStashpointListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdStashpointListener");
		return ptr;
	}


	void OnStashingProgressed(class ATdStashpoint* Stashpoint, float Completed);
	void OnStashingCompleted(class ATdStashpoint* Stashpoint);
	void OnStashingIntercepted(class ATdStashpoint* Stashpoint);
	void OnStashingInitiated(class ATdStashpoint* Stashpoint);
};


// Class TdGame.TdCopStashpoint
// 0x0004 (0x01E8 - 0x01E4)
class ATdCopStashpoint : public ATdStashpoint
{
public:
	class ATdPawn*                                     StashingPawn;                                             // 0x01E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCopStashpoint");
		return ptr;
	}

};


// Class TdGame.TdCopTeamInfo
// 0x0000 (0x0214 - 0x0214)
class ATdCopTeamInfo : public ATdTeamInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCopTeamInfo");
		return ptr;
	}

};


// Class TdGame.TdCover_Fallback
// 0x0000 (0x00D4 - 0x00D4)
class UTdCover_Fallback : public UTdCover
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdCover_Fallback");
		return ptr;
	}

};


// Class TdGame.TdDebugMenu
// 0x0000 (0x006C - 0x006C)
class UTdDebugMenu : public UInteraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDebugMenu");
		return ptr;
	}

};


// Class TdGame.TdDmgType_ArmourPiercing_Bullet
// 0x0000 (0x00C4 - 0x00C4)
class UTdDmgType_ArmourPiercing_Bullet : public UTdDmgType_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_ArmourPiercing_Bullet");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Explosion
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_Explosion : public UTdDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Explosion");
		return ptr;
	}

};


// Class TdGame.TdDmgType_Fell
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_Fell : public UTdDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_Fell");
		return ptr;
	}

};


// Class TdGame.TdDmgType_MeleeVaultKick
// 0x0000 (0x00C0 - 0x00C0)
class UTdDmgType_MeleeVaultKick : public UTdDmgType_MeleeAir
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDmgType_MeleeVaultKick");
		return ptr;
	}

};


// Class TdGame.TdEmitterPool
// 0x0000 (0x0218 - 0x0218)
class ATdEmitterPool : public AEmitterPool
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdEmitterPool");
		return ptr;
	}

};


// Class TdGame.TdFallHeightVolume
// 0x0004 (0x02D8 - 0x02D4)
class ATdFallHeightVolume : public ATdMovementVolume
{
public:
	float                                              FallHeightOffset;                                         // 0x02D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdFallHeightVolume");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class TdGame.TdSpectatorPoint
// 0x0004 (0x0494 - 0x0490)
class ATdSpectatorPoint : public ACameraActor
{
public:
	int                                                OrderIndex;                                               // 0x0490(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSpectatorPoint");
		return ptr;
	}

};


// Class TdGame.TdLookAtPoint
// 0x001C (0x01DC - 0x01C0)
class ATdLookAtPoint : public AKeypoint
{
public:
	float                                              LookAtInterpolationTime;                                  // 0x01C0(0x0004)
	float                                              LookAtInterpolationTimer;                                 // 0x01C4(0x0004)
	float                                              LookAtDurationTimer;                                      // 0x01C8(0x0004)
	struct FVector                                     ActivatedLocation;                                        // 0x01CC(0x000C) (Transient)
	unsigned long                                      bDoNotRegisterAsLookAt : 1;                               // 0x01D8(0x0004) (Edit)
	unsigned long                                      bAutoRegisterOnStartup : 1;                               // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLookAtPoint");
		return ptr;
	}


	void UnRegisterLookAtPoint();
	void UpdateViewRotation(const struct FRotator& InViewRotation, float DeltaTime, const struct FVector& PlayerLocation, struct FRotator* out_DeltaRot);
	void SetupTime(float InLookAtInterpolationTime, float InLookAtDuration);
	void RegisterLookAtPoint(bool bForceLookAt);
	void OnTdActivateLookAtPoint(class USeqAct_TdActivateLookAtPoint* Action);
	void Destroyed();
	void PostBeginPlay();
};


// Class TdGame.TdGameSearch_Pursuit
// 0x0000 (0x00CC - 0x00CC)
class UTdGameSearch_Pursuit : public UOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameSearch_Pursuit");
		return ptr;
	}

};


// Class TdGame.TdGameTypeSettings
// 0x0008 (0x0044 - 0x003C)
class UTdGameTypeSettings : public UObject
{
public:
	float                                              AimAssistYawBias;                                         // 0x003C(0x0004) (Config)
	float                                              AimAssistPitchBias;                                       // 0x0040(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameTypeSettings");
		return ptr;
	}

};


// Class TdGame.TdGameTypeMPSettings
// 0x0000 (0x0044 - 0x0044)
class UTdGameTypeMPSettings : public UTdGameTypeSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameTypeMPSettings");
		return ptr;
	}

};


// Class TdGame.TdGameTypeSPSettings
// 0x0000 (0x0044 - 0x0044)
class UTdGameTypeSPSettings : public UTdGameTypeSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGameTypeSPSettings");
		return ptr;
	}

};


// Class TdGame.TdGenericSpawnMarker
// 0x0000 (0x01CC - 0x01CC)
class ATdGenericSpawnMarker : public ATdMarker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGenericSpawnMarker");
		return ptr;
	}

};


// Class TdGame.TdGhostPawnBase
// 0x007C (0x0974 - 0x08F8)
class ATdGhostPawnBase : public ATdPawn
{
public:
	class UParticleSystem*                             TrailParticleSystem_Normal;                               // 0x08F8(0x0004)
	class UParticleSystem*                             TrailParticleSystem_Wide;                                 // 0x08FC(0x0004)
	class UParticleSystemComponent*                    TrailHeadPSC;                                             // 0x0900(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailNeckPSC;                                             // 0x0904(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailSpinePSC;                                            // 0x0908(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailSpine2PSC;                                           // 0x090C(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailRightHandPSC;                                        // 0x0910(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailLeftHandPSC;                                         // 0x0914(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailRightFootPSC;                                        // 0x0918(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    TrailLeftFootPSC;                                         // 0x091C(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FName                                       TrailHeadSocket;                                          // 0x0920(0x0008)
	struct FName                                       TrailNeckSocket;                                          // 0x0928(0x0008)
	struct FName                                       TrailSpineSocket;                                         // 0x0930(0x0008)
	struct FName                                       TrailSpine2Socket;                                        // 0x0938(0x0008)
	struct FName                                       TrailRightHandSocket;                                     // 0x0940(0x0008)
	struct FName                                       TrailLeftHandSocket;                                      // 0x0948(0x0008)
	struct FName                                       TrailLeftFootSocket;                                      // 0x0950(0x0008)
	struct FName                                       TrailRightFootSocket;                                     // 0x0958(0x0008)
	class UDecalMaterial*                              FootDecalMaterial;                                        // 0x0960(0x0004)
	class UAudioComponent*                             AmbientSound;                                             // 0x0964(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   AmbientSoundSC;                                           // 0x0968(0x0004)
	int                                                SmoothYaw;                                                // 0x096C(0x0004)
	int                                                TargetYaw;                                                // 0x0970(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGhostPawnBase");
		return ptr;
	}


	bool IsSameTeam(class APawn* Other);
	void Destroyed();
	void ActuallyPlayFootParticleEffect(int FootDown, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void SetShowGhost(bool bShow);
	void PostBeginPlay();
	void RotateSmooth(float DeltaTime);
	void Tick(float DeltaTime);
	void ActivateGhostEffects();
};


// Class TdGame.TdGoldenPathNode
// 0x0000 (0x0314 - 0x0314)
class ATdGoldenPathNode : public APathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdGoldenPathNode");
		return ptr;
	}

};


// Class TdGame.TdUILoadIndicator
// 0x000C (0x03F8 - 0x03EC)
class UTdUILoadIndicator : public UTdUIObject
{
public:
	class UUILabel*                                    IndicatorLabel;                                           // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    IndicatorImage;                                           // 0x03F0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUILabel*                                    IndicatorLabelBlack;                                      // 0x03F4(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUILoadIndicator");
		return ptr;
	}

};


// Class TdGame.TdUIScene_Pause
// 0x0028 (0x0320 - 0x02F8)
class UTdUIScene_Pause : public UTdUIScene
{
public:
	class UTdMenuPostProcesWrapper*                    PanelBGRenderer;                                          // 0x02F8(0x0004) (Transient)
	class UUIPanel*                                    ContentPanel;                                             // 0x02FC(0x0004) (Transient)
	class UUISafeRegionPanel*                          SafeRegionPanel;                                          // 0x0300(0x0004) (Transient)
	class UUISafeRegionPanel*                          ScreenRegionPanel;                                        // 0x0304(0x0004) (Transient)
	class UUILabel*                                    TitleLabel;                                               // 0x0308(0x0004) (Transient)
	class UUIImage*                                    PanelBgImage;                                             // 0x030C(0x0004) (Transient)
	TArray<class UUILabelButton*>                      OptionButtons;                                            // 0x0310(0x000C) (Transient, NeedCtorLink)
	class UUIObject*                                   LastFocusedObject;                                        // 0x031C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Pause");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	bool IsAnimatingScene();
	void PlayClosingAnim();
	void UpdateSelectionField();
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	void PanelAnimFinished(int FinishedPanelIndex, bool bPanelActive);
	void OpenPanel();
	void SetTitleLabel(const struct FString& Text);
	void OnQuitToMainMenu();
	void OnOpenOptions();
	bool CloseScene(class UUIScene* SceneToClose, bool bSkipKismetNotify, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnResumeGame();
	bool OnResumeGameButton(class UUIScreenObject* Sender, int PlayerIndex);
	void OnQuit_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void NotifyQuitMsgBox_OptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void Quit_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	bool HandleOptionButton(class UUILabelButton* OptionButton);
	bool OnOptionButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void OnBack();
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SceneDeactivated();
	void OnControllerChange(int ControllerId, bool Connected);
	void UpdateButtonBar(bool bAcceptVisible);
	void SetupButtonBar();
	void UpdateNoClickDuringSave();
	bool NoClickDuringSave(const struct FName& buttonname);
	void PostInitialize();
};


// Class TdGame.TdMenuPostProcesWrapper
// 0x0034 (0x0070 - 0x003C)
class UTdMenuPostProcesWrapper : public UObject
{
public:
	class UMaterial*                                   PanelMaterial;                                            // 0x003C(0x0004)
	TArray<struct FTdEffectPanelStruct>                PanelsData;                                               // 0x0040(0x000C) (NeedCtorLink)
	float                                              PanelAnimDuration;                                        // 0x004C(0x0004)
	float                                              UnfocusedPanelBGWidth;                                    // 0x0050(0x0004)
	struct FLinearColor                                SelectionColor;                                           // 0x0054(0x0010)
	struct FScriptDelegate                             __OnPanelAnimFinished__Delegate;                          // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMenuPostProcesWrapper");
		return ptr;
	}


	void SetParamFloat(int PanelIndex, const struct FName& ParamName, float Value);
	void SetSelectionColor(const struct FLinearColor& SelColor);
	void SetPanelMovementAmount(int PanelIndex, float Amount);
	void SetPanelSideOffset(int PanelIndex, float LeftOffset, float RightOffset);
	void SetPanelMovementOffset(int PanelIndex, float Offset);
	void SetPanelSelFieldVis(int PanelIndex, bool bVisible);
	void SetSelectionField(int PanelIndex, float TopPos, float BottomPos);
	void SetPanelWidth(int PanelIndex, float NewWidth);
	void SetActivePanel(int PanelIndexToActivate, bool bSkipAnimation);
	void DeativatePanel(int PanelIndex);
	void SetSelectionFieldPos(int PanelIndex, float Top, float Bottom);
	int GetActivePanelIndex();
	void UpdatePanelAnimation(int PanelIndex);
	void Tick(float DeltaTime);
	bool IsAnimating();
	void SetAnimDurations(float PanelAnimDur);
	void Destroy();
	void Initialize(TArray<class UUIImage*> PanelImages, const struct FScriptDelegate& PanelAnimFinished, float UnfocusedMinWidth);
	void OnPanelAnimFinished(int FinishedPanelIndex, bool bPanelActive);
};


// Class TdGame.TdUIScene_PauseOptions
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_PauseOptions : public UTdUIScene_Pause
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_PauseOptions");
		return ptr;
	}


	void OnOpenGamepadSettings();
	void OnOpenGameSettings();
	void OnOpenVideoSettings();
	void OnOpenAudioSettings();
	void OnOpenControlsSettings();
	bool HandleOptionButton(class UUILabelButton* OptionButton);
	void UpdateGamepadSettingVis(bool bIsVisible);
	void OnControllerChange(int ControllerId, bool Connected);
	void PostInitialize();
};


// Class TdGame.TdOnScreenErrorHandler
// 0x0030 (0x006C - 0x003C)
class UTdOnScreenErrorHandler : public UTpOnScreenErrorHandler
{
public:
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x003C(0x0004) (Transient)
	class UTsSystem*                                   SaveSystem;                                               // 0x0040(0x0004) (Transient)
	class UTdUIScene_MessageBox*                       GeneralErrorMessageBox;                                   // 0x0044(0x0004) (Transient)
	unsigned long                                      IgnoreStorageChanges : 1;                                 // 0x0048(0x0004) (Transient)
	class UTdInitSaveSystem*                           InitSaveSystem;                                           // 0x004C(0x0004) (Transient)
	struct FString                                     TitleErrStr;                                              // 0x0050(0x000C) (Transient, NeedCtorLink)
	struct FString                                     MessageErrStr;                                            // 0x005C(0x000C) (Transient, NeedCtorLink)
	int                                                PendingConnectionChangeTicks;                             // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnScreenErrorHandler");
		return ptr;
	}


	void OnGeneralErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowErrorMessageBox(const struct FString& UnLoc_Title, const struct FString& UnLoc_Message);
	void OnCriticalErrorMessageBoxDone(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnShowCriticalErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowCriticalErrorMessageBox(const struct FString& UnLoc_Message);
	void STATIC_CheckRestartGame(TEnumAsByte<ERebootReasonType> Reason);
	void OnLoginChange();
	void OnConnectionChange_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void HandleConnectionLost();
	void OnConnectionChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	void Finalize();
	void Initialize();
	void Tick(float DeltaSeconds);
};


// Class TdGame.TdUIScene_ImageMessageBox
// 0x0004 (0x0380 - 0x037C)
class UTdUIScene_ImageMessageBox : public UTdUIScene_MessageBox
{
public:
	class UUIImage*                                    Image;                                                    // 0x037C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ImageMessageBox");
		return ptr;
	}


	void SetImageMarkup(const struct FString& Markup);
	void SetImage(class USurface* InImage);
};


// Class TdGame.TdUIState_FakeActive
// 0x0000 (0x0066 - 0x0066)
class UTdUIState_FakeActive : public UUIState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIState_FakeActive");
		return ptr;
	}

};


// Class TdGame.TdUIScene_ControlsSettingsPC
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_ControlsSettingsPC : public UTdUIScene_OptionMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ControlsSettingsPC");
		return ptr;
	}


	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void InitializeSettings();
	void ResetSettingsToDefault();
	bool OnGamepadSettingsButton_Clicked(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnKeyMappingsButton_Clicked(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
};


// Class TdGame.TdUIScene_AudioSettings
// 0x0014 (0x0334 - 0x0320)
class UTdUIScene_AudioSettings : public UTdUIScene_OptionMenu
{
public:
	class UUIDataStore_TdStringList*                   StringList;                                               // 0x0320(0x0004)
	class UUITdOptionButton*                           AudioDeviceOptionButton;                                  // 0x0324(0x0004) (Transient)
	struct FString                                     OldAudioDevice;                                           // 0x0328(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_AudioSettings");
		return ptr;
	}


	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void ApplyAudioSettings();
	void OnAccept();
	void SaveWidgetValues();
	void InitializeSettings();
	void ResetSettingsToDefault();
	void PostInitialize();
};


// Class TdGame.TdUIScene_GameSettings
// 0x001C (0x033C - 0x0320)
class UTdUIScene_GameSettings : public UTdUIScene_OptionMenu
{
public:
	class UUITdOptionButton*                           LOIOptionButton;                                          // 0x0320(0x0004) (Transient)
	class UUITdOptionButton*                           DifficultyOptionButton;                                   // 0x0324(0x0004) (Transient)
	class UUITdOptionButton*                           ReticuleOptionButton;                                     // 0x0328(0x0004) (Transient)
	class UUITdOptionButton*                           SubtitlesOptionButton;                                    // 0x032C(0x0004) (Transient)
	class UTdProfileSettings*                          TdProfile;                                                // 0x0330(0x0004) (Transient)
	int                                                CachedDifficulty;                                         // 0x0334(0x0004) (Transient)
	unsigned long                                      bAllowDifficultyChange : 1;                               // 0x0338(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_GameSettings");
		return ptr;
	}


	void InitializeSettings();
	void ResetSettingsToDefault();
	void SaveWidgetValues();
	void OnSetStorageLoc();
	bool OnButtonBar_StorageLoc(class UUIScreenObject* Sender, int PlayerIndex);
	void UpdateLOIState();
	void UpdateFocusLabelState(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void DoReset();
	void OnReset_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ProRunnerWarning_OnSelection(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ProRunnerWarning_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void SceneActivated(bool bInitialActivation);
	void PostInitialize();
};


// Class TdGame.TdUITabControl
// 0x0008 (0x0484 - 0x047C)
class UTdUITabControl : public UUITabControl
{
public:
	struct FName                                       DefaultTabWidgetTag;                                      // 0x047C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabControl");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void RemoveTabByTag(const struct FName& TabTag, int PlayerIndex);
	bool ActivateTabByTag(const struct FName& TabTag, int PlayerIndex, bool bFocusPage);
	int FindPageIndexByTag(const struct FName& TabTag);
	bool ActivateBestTab(int PlayerIndex, bool bFocusPage, int StartIndex);
	bool ActivatePage(class UUITabPage* PageToActivate, int PlayerIndex, bool bFocusPage);
	void PostInitialize();
};


// Class TdGame.TdHUDWidget_GameMessageBox
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_GameMessageBox : public UTdHUDWidget
{
public:
	class UUILabel*                                    MessageLabel;                                             // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_GameMessageBox");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_GameTimeRemaining
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_GameTimeRemaining : public UTdHUDWidget
{
public:
	class UUILabel*                                    timeLabel;                                                // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_GameTimeRemaining");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_Health
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_Health : public UTdHUDWidget
{
public:
	class UUILabel*                                    healthLabel;                                              // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_Health");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_ProgressBar
// 0x001D (0x0409 - 0x03EC)
class UTdHUDWidget_ProgressBar : public UTdHUDWidget
{
public:
	class UUIComp_DrawImage*                           ProgressBarBackgroundImage;                               // 0x03EC(0x0004) (Const, ExportObject, Component, NoClear, EditInline, Deprecated)
	class UUIComp_DrawImage*                           ProgressBarFillImage;                                     // 0x03F0(0x0004) (Const, ExportObject, Component, NoClear, EditInline, Deprecated)
	struct FUIRangeData                                ProgressBarValue;                                         // 0x03F4(0x0014) (Deprecated)
	TEnumAsByte<EUIOrientation>                        ProgressBarOrientation;                                   // 0x0408(0x0001) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_ProgressBar");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_InterrogationBar
// 0x0000 (0x0409 - 0x0409)
class UTdHUDWidget_InterrogationBar : public UTdHUDWidget_ProgressBar
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_InterrogationBar");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_OnlineMessageTicker
// 0x0014 (0x0400 - 0x03EC)
class UTdHUDWidget_OnlineMessageTicker : public UTdHUDWidget
{
public:
	class UUIImage*                                    LogoImage;                                                // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)
	class UUIImage*                                    TickerBGImage;                                            // 0x03F0(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)
	class UUILabel*                                    TickerTextLabel;                                          // 0x03F4(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)
	class UTexture*                                    LogoImageTextre;                                          // 0x03F8(0x0004) (Deprecated)
	class UTexture*                                    TickerBGImageTexture;                                     // 0x03FC(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_OnlineMessageTicker");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_ReactionTime
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_ReactionTime : public UTdHUDWidget
{
public:
	class UUILabel*                                    ReactionTimeLabel;                                        // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_ReactionTime");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_StashpointTimer
// 0x0014 (0x0400 - 0x03EC)
class UTdHUDWidget_StashpointTimer : public UTdHUDWidget
{
public:
	class UUILabel*                                    StashpointTimerLabel;                                     // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)
	struct FString                                     Text;                                                     // 0x03F0(0x000C) (NeedCtorLink, Deprecated)
	float                                              Completed;                                                // 0x03FC(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_StashpointTimer");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_Team
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_Team : public UTdHUDWidget
{
public:
	class UUILabel*                                    teamLabel;                                                // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_Team");
		return ptr;
	}

};


// Class TdGame.TdHUDWidget_WeaponAmmo
// 0x0004 (0x03F0 - 0x03EC)
class UTdHUDWidget_WeaponAmmo : public UTdHUDWidget
{
public:
	class UUILabel*                                    ammoLabel;                                                // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdHUDWidget_WeaponAmmo");
		return ptr;
	}

};


// Class TdGame.TdInitSaveSystem
// 0x004C (0x0088 - 0x003C)
class UTdInitSaveSystem : public UObject
{
public:
	TEnumAsByte<ETsResult>                             SaveInitResult;                                           // 0x003C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FString                                     SaveErrorMessageBody;                                     // 0x0040(0x000C) (Transient, NeedCtorLink)
	struct FString                                     SaveErrorMessageTitle;                                    // 0x004C(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnInitSavefileSystemDone__Delegate;                     // 0x0058(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnContinueWithoutSavingDelegate__Delegate;              // 0x0064(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnOverwriteDelegate__Delegate;                          // 0x0070(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRetryDelegate__Delegate;                              // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInitSaveSystem");
		return ptr;
	}


	class UTdGameUISceneClient* GetSceneClient();
	void BlockUIInput(bool bBlock);
	void ShowBadOwnerMsgBox_OnAction(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowBadOwnerMsgBox_OnInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowBadOwnerMsgBox();
	void OnRetryContinueWithoutSavingDialogue(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnShowRetryContinueWithoutSavingDialoguePreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void ShowRetryContinueWithoutSavingDialogue_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowRetryContinueWithoutSavingDialogue(const struct FString& Body, const struct FString& Title, const struct FScriptDelegate& ContinueWithoutSaving, const struct FScriptDelegate& Retry);
	void OnShowConfirmOverwriteDialogue(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnShowConfirmOverwriteDialoguePreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void ShowConfirmOverwriteDialogue_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowConfirmOverwriteDialogue();
	void OnShowOverwriteCorruptDialogue(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnShowOverwriteCorruptDialoguePreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void ShowOverwriteCorruptDialogue_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowOverwriteCorruptDialogue(const struct FString& Body, const struct FString& Title, const struct FScriptDelegate& Overwrite, const struct FScriptDelegate& Retry);
	void OnRetryDelegate();
	void OnOverwriteDelegate();
	void OnContinueWithoutSavingDelegate();
	void FinishReadProfile();
	void OnOverwriteProfileRetry();
	void ShowProfileWriteRetryDialogue();
	void OnProfileWriteComplete(bool bWasSuccessful);
	void OnOverwriteProfileOverwrite();
	void OnOverwriteProfileRetryRead();
	void OnOverwriteProfileContinueWithoutSaving();
	void ShowOverwriteCorruptProfileDialogue();
	void OnProfileReadComplete(bool bWasSuccessful);
	void ReadProfile();
	void FinishInit();
	void OnOverwriteSavefileRetry();
	void OnOverwriteSavefileOverwrite();
	void OnOverwriteSavefileContinueWithoutSaving();
	void ShowOverwriteCorruptSavefileDialogue();
	void OnShowXenonDeviceRemoved(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowXenonDeviceRemoved_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowXenonDeviceRemoved();
	void OnShowXenonReselectDevice(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowXenonReselectDevice_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowXenonReselectDevice();
	void OnSaveSystemErrorRetry();
	void OnSaveSystemErrorContinueWithoutSaving();
	void ShowSaveSystemErrorBox();
	void OnSaveSystemInitialized(TEnumAsByte<ETsResult> Result);
	void InitSavefileSystem(bool bAutoReplaceCorrupt);
	void OnInitSavefileSystemDone();
};


// Class TdGame.TdInterestPoint
// 0x000C (0x0320 - 0x0314)
class ATdInterestPoint : public ANavigationPoint
{
public:
	float                                              InvestigationDistance;                                    // 0x0314(0x0004) (Edit)
	float                                              InvestigationInterval;                                    // 0x0318(0x0004) (Edit)
	float                                              InvestigationTime;                                        // 0x031C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInterestPoint");
		return ptr;
	}


	void MarkInvestigated(float GameTime);
	bool ShouldBeInvestigated(float GameTime);
};


// Class TdGame.TdInterrogationSubject
// 0x001C (0x01DC - 0x01C0)
class ATdInterrogationSubject : public AActor
{
public:
	float                                              StartTime;                                                // 0x01C0(0x0004)
	float                                              Duration;                                                 // 0x01C4(0x0004)
	float                                              Lifetime;                                                 // 0x01C8(0x0004)
	class ATdPursuitPRI*                               VictimPRI;                                                // 0x01CC(0x0004)
	class APawn*                                       VictimPawn;                                               // 0x01D0(0x0004)
	class ATdPursuitPRI*                               InstigatorPRI;                                            // 0x01D4(0x0004)
	class APawn*                                       InstigatorPawn;                                           // 0x01D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInterrogationSubject");
		return ptr;
	}


	void InterceptInterrogation();
	void TimeDestroy();
	void SetVictimPawn(class ATdPawn* NewVictimPawn);
	void SetVictimPRI(class ATdPursuitPRI* NewVictimPRI);
	void InitiateInterrogation(class AActor* InstigatingActor);
	void PreBeginPlay();
};


// Class TdGame.TdPursuitPRI
// 0x0014 (0x0284 - 0x0270)
class ATdPursuitPRI : public ATdBagPRI
{
public:
	float                                              LastBagRequestTime;                                       // 0x0270(0x0004)
	float                                              MaxRequestDistance;                                       // 0x0274(0x0004) (Config)
	float                                              AllowedBagRequestedInterval;                              // 0x0278(0x0004) (Config)
	float                                              LastBagRequestedTime;                                     // 0x027C(0x0004)
	class AActor*                                      RequesterActor;                                           // 0x0280(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitPRI");
		return ptr;
	}


	void ClientBagRequested(class AActor* Requester);
	void ScoreInterceptedCarriedObject();
	void OnUseCarriedObject(class AActor* inActor);
};


// Class TdGame.TdInv_Disguise
// 0x0000 (0x0214 - 0x0214)
class ATdInv_Disguise : public ATdEquipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInv_Disguise");
		return ptr;
	}

};


// Class TdGame.TdInv_GasMask
// 0x0000 (0x0214 - 0x0214)
class ATdInv_GasMask : public ATdEquipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInv_GasMask");
		return ptr;
	}

};


// Class TdGame.TdInv_ThermalGoggles
// 0x0000 (0x0214 - 0x0214)
class ATdInv_ThermalGoggles : public ATdEquipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInv_ThermalGoggles");
		return ptr;
	}

};


// Class TdGame.TdInventory
// 0x0000 (0x0210 - 0x0210)
class ATdInventory : public AInventory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdInventory");
		return ptr;
	}

};


// Class TdGame.TdKillVolume
// 0x0008 (0x0240 - 0x0238)
class ATdKillVolume : public APhysicsVolume
{
public:
	class UClass*                                      KillDamageType;                                           // 0x0238(0x0004) (Edit)
	unsigned long                                      AffectPlayer : 1;                                         // 0x023C(0x0004) (Edit)
	unsigned long                                      AffectAI : 1;                                             // 0x023C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdKillVolume");
		return ptr;
	}


	void KillActor(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PawnEnteredVolume(class APawn* Other);
	void ActorEnteredVolume(class AActor* Other);
};


// Class TdGame.TdKillZoneKiller
// 0x0000 (0x01C0 - 0x01C0)
class ATdKillZoneKiller : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdKillZoneKiller");
		return ptr;
	}

};


// Class TdGame.TdKillZoneVolume
// 0x0050 (0x024C - 0x01FC)
class ATdKillZoneVolume : public AVolume
{
public:
	TArray<class ATdKillZoneKiller*>                   LaserShooters;                                            // 0x01FC(0x000C) (Edit, NeedCtorLink)
	float                                              DamagePerShot;                                            // 0x0208(0x0004) (Edit)
	class UParticleSystem*                             LaserBeamTemplate;                                        // 0x020C(0x0004)
	class UParticleSystem*                             LaserHitTemplate;                                         // 0x0210(0x0004)
	class UParticleSystem*                             LaserSourceTemplate;                                      // 0x0214(0x0004)
	TArray<struct FLaserInfo>                          LaserInfos;                                               // 0x0218(0x000C) (NeedCtorLink)
	int                                                CurrentFire;                                              // 0x0224(0x0004)
	unsigned long                                      bFire : 1;                                                // 0x0228(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0228(0x0004) (Transient)
	float                                              TimeToAim;                                                // 0x022C(0x0004)
	class USoundCue*                                   WeaponSound;                                              // 0x0230(0x0004)
	class USoundCue*                                   WeaponReverbSound;                                        // 0x0234(0x0004)
	class USoundCue*                                   WeaponSlapBackSound;                                      // 0x0238(0x0004)
	int                                                MaxNumberOfSlapBackRays;                                  // 0x023C(0x0004)
	int                                                NumberOfSlapBacks;                                        // 0x0240(0x0004)
	float                                              RangeOfSlapBackRays;                                      // 0x0244(0x0004)
	class ATdPlayerPawn*                               Player;                                                   // 0x0248(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdKillZoneVolume");
		return ptr;
	}


	void UpdateBeam(const struct FVector& PlayerLoc, const struct FLaserInfo& LI, float DeltaTime);
	void UpdateLasers(float DeltaTime);
	struct FRotator UpdateAim(const struct FLaserInfo& LI, const struct FVector& TargetLoc, float DeltaTime);
	struct FRotator CalculateAim(const struct FLaserInfo& LI, float Dist);
	void Hide(const struct FLaserInfo& LI);
	void Show(const struct FLaserInfo& LI);
	void StopLasers();
	void StartLasers();
	void TimedFire();
	void PlaySlapback(const struct FLaserInfo& LI, class USoundCue* SC);
	void PlayFireSound(const struct FLaserInfo& LI);
	void Fire(const struct FLaserInfo& LI);
	void Tick(float DeltaTime);
	class ATdEmitter* CreateEmitter(class UParticleSystem* Template, const struct FVector& Loc);
	struct FLaserInfo CreateLaser(const struct FVector& Loc);
	void SetupLasers();
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class TdGame.TdLandingNode
// 0x0000 (0x0324 - 0x0324)
class ATdLandingNode : public ATdMoveNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLandingNode");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardFullReadSPTT
// 0x0014 (0x00CC - 0x00B8)
class UTdLeaderboardFullReadSPTT : public UTdOnlineStatsRead
{
public:
	class ATdSPTimeTrialGame*                          GameStat;                                                 // 0x00B8(0x0004)
	TScriptInterface<class UOnlineStatsInterface>      GameStatInterface;                                        // 0x00BC(0x0008)
	struct FUniqueNetId                                PlayerId;                                                 // 0x00C4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardFullReadSPTT");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Possession
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Possession : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Possession");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Possession_AllTime
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Possession_AllTime : public UTdLeaderboardRead_Possession
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Possession_AllTime");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Possession_Monthly
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Possession_Monthly : public UTdLeaderboardRead_Possession
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Possession_Monthly");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Possession_Weekly
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Possession_Weekly : public UTdLeaderboardRead_Possession
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Possession_Weekly");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Pursuit
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Pursuit : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Pursuit");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Pursuit_AllTime
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Pursuit_AllTime : public UTdLeaderboardRead_Pursuit
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Pursuit_AllTime");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Pursuit_Monthly
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Pursuit_Monthly : public UTdLeaderboardRead_Pursuit
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Pursuit_Monthly");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardRead_Pursuit_Weekly
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardRead_Pursuit_Weekly : public UTdLeaderboardRead_Pursuit
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardRead_Pursuit_Weekly");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardReadSPTT
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardReadSPTT : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardReadSPTT");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardReadTotalOnlySPTT
// 0x0000 (0x00B8 - 0x00B8)
class UTdLeaderboardReadTotalOnlySPTT : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardReadTotalOnlySPTT");
		return ptr;
	}

};


// Class TdGame.TdLeaderboardWriteSPTT
// 0x0000 (0x009C - 0x009C)
class UTdLeaderboardWriteSPTT : public UTdOnlineStatsWrite
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLeaderboardWriteSPTT");
		return ptr;
	}

};


// Class TdGame.TdLensFlareSource
// 0x0000 (0x01C8 - 0x01C8)
class ATdLensFlareSource : public ALensFlareSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLensFlareSource");
		return ptr;
	}

};


// Class TdGame.TdLevelRaceLauncher
// 0x0038 (0x0074 - 0x003C)
class UTdLevelRaceLauncher : public UObject
{
public:
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x003C(0x0004)
	class UTdUIScene_LoadIndicator*                    LoadIndicator;                                            // 0x0040(0x0004)
	unsigned long                                      bDataReadCorrectly : 1;                                   // 0x0044(0x0004)
	unsigned long                                      bStartOnlineMode : 1;                                     // 0x0044(0x0004)
	struct FString                                     ErrorTitle;                                               // 0x0048(0x000C) (NeedCtorLink)
	struct FString                                     ErrorMessage;                                             // 0x0054(0x000C) (NeedCtorLink)
	int                                                RaceModeId;                                               // 0x0060(0x0004)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x0064(0x0004) (Transient)
	struct FScriptDelegate                             __OnRaceLauncherFinished__Delegate;                       // 0x0068(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLevelRaceLauncher");
		return ptr;
	}


	void SetErrorMessage(const struct FString& Title, const struct FString& Message);
	void OnLoadFailedQuitToMain(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnStartRaceErrorMessagePreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnStartRaceErrorMessage_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnStartStretch();
	void CloseLoadMessage();
	void OnLoadMessageClosed(class UUIScene* Scene);
	void OnShowLoadingScene_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowLoadMessage();
	void OnStretchDataReadComplete(bool bSuccess);
	void StartStretch(int InRaceModeId, bool bOnlineMode, class ULocalPlayer* Player, const struct FScriptDelegate& OnFinish);
	void OnRaceLauncherFinished(int Result);
};


// Class TdGame.TdLobbyEventListener
// 0x0000 (0x003C - 0x003C)
class UTdLobbyEventListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyEventListener");
		return ptr;
	}


	void OnGameStarted();
	void OnPlayerSetReady(class AController* Player);
	void OnPlayerSwitchRole(class AController* Player);
	void OnPlayerSwitchTeam(class AController* Player);
	void OnPlayerLeave(class AController* Player);
	void OnPlayerJoin(class AController* Player);
	void UpdatePlayers(TArray<class APlayerReplicationInfo*> pris);
};


// Class TdGame.TdLobbyHud
// 0x0000 (0x04E8 - 0x04E8)
class ATdLobbyHud : public ATdHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyHud");
		return ptr;
	}

};


// Class TdGame.UIDataStore_TdMPData
// 0x0000 (0x0088 - 0x0088)
class UUIDataStore_TdMPData : public UUIDataStore_OnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdMPData");
		return ptr;
	}

};


// Class TdGame.TdLobbyPlasmaBackend
// 0x0000 (0x0044 - 0x0044)
class UTdLobbyPlasmaBackend : public UTdLobbyBackend
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLobbyPlasmaBackend");
		return ptr;
	}

};


// Class TdGame.TdTutorialPawn
// 0x0008 (0x09EC - 0x09E4)
class ATdTutorialPawn : public ATdPlayerPawn
{
public:
	TScriptInterface<class UTdTutorialListener>        TutorialListener;                                         // 0x09E4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialPawn");
		return ptr;
	}


	void UpdateAnimSets(class ATdWeapon* iWeapon);
	void TossWeapon(class AWeapon* Weap, const struct FVector& ForceVelocity);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void OnTutorialEvent(int TutorialEvent);
	bool SetMove(TEnumAsByte<EMovement> NewMove, bool bViaReplication, bool bCheckCanDo);
};


// Class TdGame.TdLookAtPointSpawnable
// 0x0000 (0x01DC - 0x01DC)
class ATdLookAtPointSpawnable : public ATdLookAtPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdLookAtPointSpawnable");
		return ptr;
	}

};


// Class TdGame.TdMenuGameInfo
// 0x0000 (0x03AC - 0x03AC)
class ATdMenuGameInfo : public ATdSPGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMenuGameInfo");
		return ptr;
	}

};


// Class TdGame.TdMove_BargeBot
// 0x0000 (0x01EC - 0x01EC)
class UTdMove_BargeBot : public UTdMove_Barge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BargeBot");
		return ptr;
	}


	bool CanDoMove();
};


// Class TdGame.TdMove_BotFlip
// 0x0000 (0x0158 - 0x0158)
class UTdMove_BotFlip : public UTdMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotFlip");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_BotMeleeCounterAttack
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeCounterAttack : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeCounterAttack");
		return ptr;
	}


	void OnAnimationStopped(class UAnimNodeSequence* SeqNode);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void SetPawnRotation();
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotMeleeDodge
// 0x0001 (0x0159 - 0x0158)
class UTdMove_BotMeleeDodge : public UTdMove
{
public:
	TEnumAsByte<EMeleeDodgeType>                       MeleeDodgeType;                                           // 0x0158(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeDodge");
		return ptr;
	}


	void TriggerMove(TEnumAsByte<EMeleeDodgeType> MoveToDo);
	bool IsThereRoomForMove(TEnumAsByte<EMeleeDodgeType> MoveToDo);
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StopMove();
	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotMeleeSecondSwing
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeSecondSwing : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeSecondSwing");
		return ptr;
	}


	class UClass* GetDamageType();
	void TriggerEndAnimation();
	void TriggerStartAnimation();
	void StartMove();
	void TriggerHit();
	void TriggerMiss();
	void TriggerMove();
	bool CanDoMove();
};


// Class TdGame.TdMove_BotMeleeSecondSwing_Assault
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeSecondSwing_Assault : public UTdMove_BotMeleeSecondSwing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeSecondSwing_Assault");
		return ptr;
	}

};


// Class TdGame.TdMove_BotMeleeSecondSwing_CopRemington
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeSecondSwing_CopRemington : public UTdMove_BotMeleeSecondSwing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeSecondSwing_CopRemington");
		return ptr;
	}

};


// Class TdGame.TdMove_BotMeleeSecondSwing_Sniper
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeSecondSwing_Sniper : public UTdMove_BotMeleeSecondSwing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeSecondSwing_Sniper");
		return ptr;
	}

};


// Class TdGame.TdMove_BotMeleeSecondSwing_Support
// 0x0000 (0x0244 - 0x0244)
class UTdMove_BotMeleeSecondSwing_Support : public UTdMove_BotMeleeSecondSwing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotMeleeSecondSwing_Support");
		return ptr;
	}

};


// Class TdGame.TdMove_BotPursuitFinishingAttack
// 0x003C (0x0280 - 0x0244)
class UTdMove_BotPursuitFinishingAttack : public UTdMove_BotMelee
{
public:
	struct FMeleeAttackProperties                      FinishingAttackProperties;                                // 0x0244(0x003C) (Edit, Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotPursuitFinishingAttack");
		return ptr;
	}


	bool TestHit();
	void OnTimer();
	void TriggerHit();
	void TriggerMiss();
	void StopMove();
	void TriggerMove();
};


// Class TdGame.TdMove_BotStopCeleste
// 0x0000 (0x01B0 - 0x01B0)
class UTdMove_BotStopCeleste : public UTdMove_BotStop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotStopCeleste");
		return ptr;
	}


	float GetBlendOutTime();
};


// Class TdGame.TdMove_BotTurnStandingCeleste
// 0x0000 (0x01C4 - 0x01C4)
class UTdMove_BotTurnStandingCeleste : public UTdMove_BotTurnStanding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_BotTurnStandingCeleste");
		return ptr;
	}


	float GetBlendInTime();
	float GetBlendOutTime();
};


// Class TdGame.TdWeapon_Light
// 0x0000 (0x05B8 - 0x05B8)
class ATdWeapon_Light : public ATdWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeapon_Light");
		return ptr;
	}


	class UParticleSystem* GetSpecificImpactEffectPhysX(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
	class UParticleSystem* GetSpecificImpactEffect(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
	void ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact);
};


// Class TdGame.TdWeapon_Pistol_Taser
// 0x001C (0x05D4 - 0x05B8)
class ATdWeapon_Pistol_Taser : public ATdWeapon_Light
{
public:
	class UParticleSystem*                             ImpactMissPSCTemplate;                                    // 0x05B8(0x0004) (Edit)
	class UParticleSystem*                             ImpactHitPSCTemplate;                                     // 0x05BC(0x0004) (Edit)
	unsigned long                                      bIsFirstFire : 1;                                         // 0x05C0(0x0004) (Transient)
	class USoundCue*                                   WeaponFireSndLoop;                                        // 0x05C4(0x0004) (Edit)
	class UAudioComponent*                             LoopingSoundComponent;                                    // 0x05C8(0x0004) (ExportObject, Transient, Component, EditInline)
	class USoundCue*                                   WeaponNotBodyImpactSnd;                                   // 0x05CC(0x0004) (Edit)
	class USoundCue*                                   WeaponBodyImpactSnd;                                      // 0x05D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeapon_Pistol_Taser");
		return ptr;
	}


	void SpawnTracerEffect(const struct FVector& HitLocation);
	void SpawnImpactEffects(const struct FImpactInfo& Impact);
	void ProcessTaserHit(unsigned char FiringMode, const struct FImpactInfo& Impact);
	void SetFlashLocation(const struct FVector& HitLocation);
	void CauseMuzzleFlash();
	void SpawnImpactSounds(const struct FImpactInfo& Impact);
	void PlayReverbSound();
	void PlayFiringSound();
	void CustomFire();
};


// Class TdGame.TdMove_Disarm_Tutorial
// 0x0008 (0x01D0 - 0x01C8)
class UTdMove_Disarm_Tutorial : public UTdMOVE_Disarm
{
public:
	unsigned long                                      bIsFrontalDisarm : 1;                                     // 0x01C8(0x0004)
	class ATdAIController*                             DisarmedController;                                       // 0x01CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarm_Tutorial");
		return ptr;
	}


	void TakeDisarmedPawnsWeapon();
	void ChooseDisarmType(struct FRotator* YawOffset);
	void UpdateViewRotation(float DeltaTime, struct FRotator* PawnRotation, struct FRotator* DeltaRotation);
	void AlignPawn();
	void StopMove();
	void StartMove();
};


// Class TdGame.TdMove_Disarmed_Boss
// 0x0001 (0x018D - 0x018C)
class UTdMove_Disarmed_Boss : public UTdMove_DisarmedBot
{
public:
	TEnumAsByte<EDisarmState>                          DisarmState;                                              // 0x018C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarmed_Boss");
		return ptr;
	}

};


// Class TdGame.TdMove_Disarmed_BossCeleste
// 0x0000 (0x018C - 0x018C)
class UTdMove_Disarmed_BossCeleste : public UTdMove_DisarmedBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarmed_BossCeleste");
		return ptr;
	}


	void DisarmCompleted();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
};


// Class TdGame.TdMove_Disarmed_BossJK
// 0x0000 (0x018D - 0x018D)
class UTdMove_Disarmed_BossJK : public UTdMove_Disarmed_Boss
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Disarmed_BossJK");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartMove();
};


// Class TdGame.TdMove_IntoGrabBot
// 0x0000 (0x01DC - 0x01DC)
class UTdMove_IntoGrabBot : public UTdMove_IntoGrab
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_IntoGrabBot");
		return ptr;
	}

};


// Class TdGame.TdMove_JumpBot_Short
// 0x0000 (0x0198 - 0x0198)
class UTdMove_JumpBot_Short : public UTdMove_JumpBot_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_JumpBot_Short");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void BeginJump();
};


// Class TdGame.TdWeapon_Heavy
// 0x0000 (0x05B8 - 0x05B8)
class ATdWeapon_Heavy : public ATdWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeapon_Heavy");
		return ptr;
	}


	class UParticleSystem* GetSpecificImpactEffectPhysX(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
	class UParticleSystem* GetSpecificImpactEffect(class UTdPhysicalMaterialImpactEffects* ImpactEffects);
};


// Class TdGame.TdMove_Melee_Assault
// 0x0000 (0x0244 - 0x0244)
class UTdMove_Melee_Assault : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_Assault");
		return ptr;
	}

};


// Class TdGame.TdMove_Melee_BossCeleste
// 0x0000 (0x05CD - 0x05CD)
class UTdMove_Melee_BossCeleste : public UTdMove_PursuitMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_BossCeleste");
		return ptr;
	}


	bool CanDoMove();
};


// Class TdGame.TdMove_Melee_PatrolCop
// 0x0000 (0x0244 - 0x0244)
class UTdMove_Melee_PatrolCop : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_PatrolCop");
		return ptr;
	}


	void TriggerMiss();
};


// Class TdGame.TdMove_Melee_PatrolCop_Remington
// 0x0000 (0x0244 - 0x0244)
class UTdMove_Melee_PatrolCop_Remington : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_PatrolCop_Remington");
		return ptr;
	}

};


// Class TdGame.TdMove_Melee_SupportCop
// 0x0000 (0x0244 - 0x0244)
class UTdMove_Melee_SupportCop : public UTdMove_BotMelee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Melee_SupportCop");
		return ptr;
	}

};


// Class TdGame.TdMove_MeleeBarge
// 0x0000 (0x01EC - 0x01EC)
class UTdMove_MeleeBarge : public UTdMove_MeleeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_MeleeBarge");
		return ptr;
	}

};


// Class TdGame.TdMove_SpeedVaultBot
// 0x0000 (0x01B4 - 0x01B4)
class UTdMove_SpeedVaultBot : public UTdMove_VaultBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_SpeedVaultBot");
		return ptr;
	}

};


// Class TdGame.TdMove_Stumble_Boss
// 0x0001 (0x01C5 - 0x01C4)
class UTdMove_Stumble_Boss : public UTdMove_StumbleBot
{
public:
	TEnumAsByte<EStumbleStageBoss>                     StumbleStage;                                             // 0x01C4(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Stumble_Boss");
		return ptr;
	}

};


// Class TdGame.TdMove_Stumble_BossCeleste
// 0x0000 (0x01C4 - 0x01C4)
class UTdMove_Stumble_BossCeleste : public UTdMove_StumbleBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Stumble_BossCeleste");
		return ptr;
	}


	void StopMove();
	void OnTimer();
	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void PlayStumbleAnimation();
};


// Class TdGame.TdMove_Stumble_Pursuit
// 0x0000 (0x01C4 - 0x01C4)
class UTdMove_Stumble_Pursuit : public UTdMove_StumbleBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_Stumble_Pursuit");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
};


// Class TdGame.TdMove_VaultOverBot
// 0x0000 (0x01B4 - 0x01B4)
class UTdMove_VaultOverBot : public UTdMove_VaultBot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_VaultOverBot");
		return ptr;
	}

};


// Class TdGame.TdMove_WallKick
// 0x0018 (0x01A4 - 0x018C)
class UTdMove_WallKick : public UTdPhysicsMove
{
public:
	float                                              WallKickMaxDistance;                                      // 0x018C(0x0004) (Edit, Config)
	float                                              WallKickCheckHeight;                                      // 0x0190(0x0004) (Edit, Config)
	float                                              WallKickExtentWidth;                                      // 0x0194(0x0004) (Edit, Config)
	float                                              WallKickExtentHeight;                                     // 0x0198(0x0004) (Edit, Config)
	float                                              WallKickVelocity2D;                                       // 0x019C(0x0004) (Edit, Config)
	float                                              WallKickVelocityZ;                                        // 0x01A0(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMove_WallKick");
		return ptr;
	}


	void StartMove();
	bool CanDoMove();
};


// Class TdGame.TdMoveNode_Destination
// 0x0000 (0x0324 - 0x0324)
class ATdMoveNode_Destination : public ATdMoveNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_Destination");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_HighVault
// 0x0000 (0x0358 - 0x0358)
class ATdMoveNode_HighVault : public ATdMoveNode_Vault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_HighVault");
		return ptr;
	}

};


// Class TdGame.TdMoveNode_SpeedVault
// 0x0000 (0x0358 - 0x0358)
class ATdMoveNode_SpeedVault : public ATdMoveNode_Vault
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMoveNode_SpeedVault");
		return ptr;
	}

};


// Class TdGame.TdMPGame
// 0x0058 (0x03D8 - 0x0380)
class ATdMPGame : public ATdGameInfo
{
public:
	struct FString                                     IpServerNumber;                                           // 0x0380(0x000C) (Config, NeedCtorLink)
	float                                              GlobalPlayerRespawnTime;                                  // 0x038C(0x0004) (Const, Config)
	float                                              IndividualPlayerMinRespawnTime;                           // 0x0390(0x0004) (Const, Config)
	float                                              TimeBetweenRounds;                                        // 0x0394(0x0004) (Const, Config)
	float                                              TimeBetweenMatches;                                       // 0x0398(0x0004) (Const, Config)
	int                                                MaxRounds;                                                // 0x039C(0x0004) (Const, Config)
	int                                                RoundCount;                                               // 0x03A0(0x0004)
	TArray<struct FString>                             CriminalClasses;                                          // 0x03A4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             PoliceClasses;                                            // 0x03B0(0x000C) (NeedCtorLink)
	TArray<struct FDeadPlayerController>               DeadControllers;                                          // 0x03BC(0x000C) (NeedCtorLink)
	unsigned long                                      bInitialSpawn : 1;                                        // 0x03C8(0x0004)
	unsigned long                                      bUseWarmup : 1;                                           // 0x03C8(0x0004) (Config)
	class UClass*                                      VictoryMessageClass;                                      // 0x03CC(0x0004)
	int                                                MinWarmupPlayersNeeded;                                   // 0x03D0(0x0004) (Config)
	int                                                WarmupCountDownTime;                                      // 0x03D4(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPGame");
		return ptr;
	}


	void SetGameTimer(bool bEnable, float RemainingTime, float RemainingMinute);
	bool CheckStartGame();
	void HandleLateWarmupJoin(class AController* NewPlayer);
	void StartWarmup();
	void EndWarmup();
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	void RemoveFromRespawnList(class AController* C);
	void ClearRespawnList();
	void AddToRespawnList(class AController* C);
	void OpenPostGameScene();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	class UClass* GetDefaultPlayerClass(class AController* C);
	void RespawnBag();
	void KillRemainingPlayers();
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void StartMatch();
	void InitGameReplicationInfo();
	void Reset();
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdVictoryMessage
// 0x0000 (0x0055 - 0x0055)
class UTdVictoryMessage : public UTdLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdVictoryMessage");
		return ptr;
	}


	struct FString STATIC_GetRoundVictoryReason(class APlayerReplicationInfo* Winner);
	struct FString STATIC_GetRoundVictoryMessage(class APlayerReplicationInfo* Winner);
	struct FString STATIC_GetMacthVictoryMessage(class APlayerReplicationInfo* Winner);
};


// Class TdGame.TdMPHUD
// 0x006C (0x0554 - 0x04E8)
class ATdMPHUD : public ATdHUD
{
public:
	class UTexture2D*                                  AmmoCountTexture[0x2];                                    // 0x04E8(0x0004)
	class UTexture2D*                                  ClipCountTexture[0x2];                                    // 0x04F0(0x0004)
	class UTexture2D*                                  PlayerIconTexture[0x2];                                   // 0x04F8(0x0004)
	struct FVector2D                                   AmmoCountOffsetPos;                                       // 0x0500(0x0008) (Edit)
	struct FVector2D                                   ClipCountPos;                                             // 0x0508(0x0008) (Edit)
	struct FVector2D                                   PlayerIconPos;                                            // 0x0510(0x0008) (Edit)
	struct FVector2D                                   RoundTimerPos;                                            // 0x0518(0x0008) (Edit)
	struct FVector2D                                   ScorePos;                                                 // 0x0520(0x0008) (Edit)
	struct FVector2D                                   WarmupTimerPos;                                           // 0x0528(0x0008) (Edit)
	struct FString                                     GameTimeLeft;                                             // 0x0530(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WarmupTimeLeft;                                           // 0x053C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WaitingForPlayers;                                        // 0x0548(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPHUD");
		return ptr;
	}


	void PlayerOwnerDied();
	void ProjectOntoScreen(const struct FVector& WorldLocation, const struct FVector& WorldOffset, const struct FVector2D& ClipXBounds, const struct FVector2D& ClipYBounds, struct FVector* ScreenLocation);
	void DisplayWeaponAmmo(class ATdWeapon* Weapon);
	void DrawLivingHUD();
	void DrawWarmupHUD();
	void DrawWaitingForMorePlayers();
	void DrawWarmupTimer(class ATdGameReplicationInfo* MyGRI);
	void DrawPawnNameOverlay(class ATdPawn* ATdPawn, const struct FVector& CameraRotation);
	void DrawScore();
	void DrawRoundTimer();
	void DrawPawnOverlays();
	void DisplayTeam();
	void LoadHUDContent(class UClass* ContentClass);
};


// Class TdGame.TdMPDMGame
// 0x0000 (0x03D8 - 0x03D8)
class ATdMPDMGame : public ATdMPGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPDMGame");
		return ptr;
	}


	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void PostLogin(class APlayerController* NewPlayer);
	void Logout(class AController* Exiting);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdTeamDMHUD
// 0x0010 (0x0564 - 0x0554)
class ATdTeamDMHUD : public ATdMPHUD
{
public:
	struct FVector2D                                   RunnerScore;                                              // 0x0554(0x0008) (Edit)
	struct FVector2D                                   CopScore;                                                 // 0x055C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTeamDMHUD");
		return ptr;
	}


	void DrawScore();
};


// Class TdGame.TdMPPossessionGame
// 0x0008 (0x03E0 - 0x03D8)
class ATdMPPossessionGame : public ATdMPGame
{
public:
	class UTdPossessionLogic*                          PossessionLogic;                                          // 0x03D8(0x0004) (Transient)
	float                                              MinBagSpawnRaduis;                                        // 0x03DC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPPossessionGame");
		return ptr;
	}


	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void PreBeginPlay();
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
};


// Class TdGame.TdPossessionLogic
// 0x000C (0x0048 - 0x003C)
class UTdPossessionLogic : public UObject
{
public:
	class ATdMPPossessionGame*                         MyGameInfo;                                               // 0x003C(0x0004) (Transient)
	class ATdPossessionGRI*                            MyGameReplicationInfo;                                    // 0x0040(0x0004) (Transient)
	class UTdCarriable*                                BagHandler;                                               // 0x0044(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPossessionLogic");
		return ptr;
	}


	void OnTouchedGround(class UTdCarriable* Carriable);
	void OnResurrected(class UTdCarriable* Carriable);
	void OnDropped(class UTdCarriable* Carriable);
	void OnCarried(class UTdCarriable* Carriable);
	void OnEndMatchInProgress();
	void OnStartMatchInProgress();
	void Initialize(class ATdGameInfo* InGameInfo);
	class AActor* GetBagActor();
};


// Class TdGame.TdPossessionHUD
// 0x0024 (0x0578 - 0x0554)
class ATdPossessionHUD : public ATdMPHUD
{
public:
	class UTexture2D*                                  BagIconTexture;                                           // 0x0554(0x0004)
	class UTexture2D*                                  ProjectedBagTexture;                                      // 0x0558(0x0004)
	class UTexture2D*                                  ProjectedArrow;                                           // 0x055C(0x0004)
	struct FVector2D                                   BagHolderIcon;                                            // 0x0560(0x0008) (Edit)
	struct FVector2D                                   BagHolderName;                                            // 0x0568(0x0008) (Edit)
	float                                              BagFadeDistance;                                          // 0x0570(0x0004) (Const)
	class UClass*                                      TdBagMessageClass;                                        // 0x0574(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPossessionHUD");
		return ptr;
	}


	void DrawScore();
	void DisplayBagHolder(class ATdPlayerReplicationInfo* MyPRI, class ATdPossessionGRI* MyGRI);
	void DrawLivingHUD();
	void DrawProjectedBag(class ATdBagPRI* MyPRI, class ATdPossessionGRI* MyGRI);
	void LoadHUDContent(class UClass* ContentClass);
	void PreBeginPlay();
};


// Class TdGame.TdPossessionGRI
// 0x0008 (0x0288 - 0x0280)
class ATdPossessionGRI : public ATdBagGRI
{
public:
	float                                              BagPossessionLimit;                                       // 0x0280(0x0004) (Config)
	class ATdPlayerReplicationInfo*                    Leader;                                                   // 0x0284(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPossessionGRI");
		return ptr;
	}


	void Timer();
};


// Class TdGame.TdMPTeamGame
// 0x0021 (0x03F9 - 0x03D8)
class ATdMPTeamGame : public ATdMPGame
{
public:
	TArray<class ATdTeamInfo*>                         Teams;                                                    // 0x03D8(0x000C) (NeedCtorLink)
	TArray<struct FTdTeamData>                         TeamData;                                                 // 0x03E4(0x000C) (NeedCtorLink)
	int                                                NumTeams;                                                 // 0x03F0(0x0004)
	unsigned long                                      bAutoBalanceTeams : 1;                                    // 0x03F4(0x0004)
	unsigned long                                      bSwitchSides : 1;                                         // 0x03F4(0x0004)
	unsigned char                                      FriendlyFireScale;                                        // 0x03F8(0x0001) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPTeamGame");
		return ptr;
	}


	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	bool CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget);
	void SetTeam(class AController* Other, class ATdTeamInfo* NewTeam, bool bNewTeam);
	bool ChangeTeam(class AController* Other, int Num, bool bNewTeam);
	unsigned char PickTeam(unsigned char Current, class AController* C);
	unsigned char GetRandomTeam(unsigned char Current, class AController* C);
	unsigned char GetBalancedTeam(unsigned char Current, class AController* C);
	void InitializeTeams();
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TdGame.TdRunnerTeamInfo
// 0x0000 (0x0214 - 0x0214)
class ATdRunnerTeamInfo : public ATdTeamInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdRunnerTeamInfo");
		return ptr;
	}

};


// Class TdGame.TdMPTeamDMGame
// 0x0000 (0x03F9 - 0x03F9)
class ATdMPTeamDMGame : public ATdMPTeamGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPTeamDMGame");
		return ptr;
	}


	bool CheckScore(class APlayerReplicationInfo* Scorer);
	void ScoreKill(class AController* Killer, class AController* Other);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
};


// Class TdGame.TdMPTeamPursuitGame
// 0x001F (0x0418 - 0x03F9)
class ATdMPTeamPursuitGame : public ATdMPTeamGame
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	class UTdPursuitLogic*                             PursuitLogic;                                             // 0x03FC(0x0004) (Transient)
	int                                                RunnerRespawnTime;                                        // 0x0400(0x0004) (Const, Config)
	int                                                CopRespawnTime;                                           // 0x0404(0x0004) (Const, Config)
	int                                                CopOffsetSpawnTime;                                       // 0x0408(0x0004) (Const, Config)
	int                                                MinBagSpawnRaduis;                                        // 0x040C(0x0004) (Const, Config)
	int                                                FriendOrFoeScoringDistance;                               // 0x0410(0x0004) (Const, Config)
	class UClass*                                      TdPursuitMessageClass;                                    // 0x0414(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdMPTeamPursuitGame");
		return ptr;
	}


	class UClass* GetDefaultPlayerClass(class AController* C);
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	void ScoreKill(class AController* Killer, class AController* Other);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void PreBeginPlay();
};


// Class TdGame.TdPursuitLogic
// 0x0018 (0x0054 - 0x003C)
class UTdPursuitLogic : public UObject
{
public:
	class ATdStashpointManager*                        StashpointManager;                                        // 0x003C(0x0004) (Transient)
	class ATdMPTeamPursuitGame*                        MyGameInfo;                                               // 0x0040(0x0004) (Transient)
	class ATdPursuitGRI*                               MyGameReplicationInfo;                                    // 0x0044(0x0004) (Transient)
	class UTdCarriable*                                BagHandler;                                               // 0x0048(0x0004) (Transient)
	int                                                ActiveStashpointID;                                       // 0x004C(0x0004) (Transient)
	class UClass*                                      TdPursuitMessageClass;                                    // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitLogic");
		return ptr;
	}


	void OnTouchedGround(class UTdCarriable* Carriable);
	void OnResurrected(class UTdCarriable* Carriable);
	void OnBeginBagSearch(const struct FVector& StashLocation, class ATdPlayerReplicationInfo* PRI);
	void OnDropped(class UTdCarriable* Carriable);
	void OnCarried(class UTdCarriable* Carriable);
	void OnStashingProgressed(class ATdStashpoint* Stashpoint, float TimeUntilCompletion);
	void OnStashingCompleted(class ATdStashpoint* Stashpoint);
	void OnStashingIntercepted(class ATdStashpoint* Stashpoint);
	void OnStashingInitiated(class ATdStashpoint* Stashpoint);
	void OnEndMatchInProgress();
	void OnStartMatchInProgress();
	void Initialize(class ATdGameInfo* InGameInfo);
	class AActor* GetBagActor();
};


// Class TdGame.TdPursuitScore
// 0x0030 (0x006C - 0x003C)
class UTdPursuitScore : public UObject
{
public:
	int                                                Kill;                                                     // 0x003C(0x0004) (Config)
	int                                                Suicide;                                                  // 0x0040(0x0004) (Config)
	int                                                Intercept;                                                // 0x0044(0x0004) (Config)
	int                                                Stash;                                                    // 0x0048(0x0004) (Config)
	int                                                StashAssist;                                              // 0x004C(0x0004) (Config)
	int                                                Search;                                                   // 0x0050(0x0004) (Config)
	int                                                SearchAssist;                                             // 0x0054(0x0004) (Config)
	int                                                TeamStashFirstAttempt;                                    // 0x0058(0x0004) (Config)
	int                                                TeamStashSecondAttempt;                                   // 0x005C(0x0004) (Config)
	int                                                TeamStashThirdAttempt;                                    // 0x0060(0x0004) (Config)
	int                                                TeamHasBagAtEndOfRound;                                   // 0x0064(0x0004) (Config)
	int                                                TeamSearch;                                               // 0x0068(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitScore");
		return ptr;
	}

};


// Class TdGame.TdPursuitVictoryMessage
// 0x003F (0x0094 - 0x0055)
class UTdPursuitVictoryMessage : public UTdVictoryMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FString                                     RoundWon;                                                 // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MathcWon;                                                 // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CopWonRoundReason;                                        // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RunnerWonRoundReason;                                     // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DrawRoundReason;                                          // 0x0088(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitVictoryMessage");
		return ptr;
	}


	struct FString STATIC_GetRoundVictoryReason(class APlayerReplicationInfo* Winner);
	struct FString STATIC_GetRoundVictoryMessage(class APlayerReplicationInfo* Winner);
	struct FString STATIC_GetMacthVictoryMessage(class APlayerReplicationInfo* Winner);
};


// Class TdGame.TdPursuitHUD
// 0x0054 (0x05A8 - 0x0554)
class ATdPursuitHUD : public ATdMPHUD
{
public:
	class UTexture2D*                                  BagIconTexture[0x3];                                      // 0x0554(0x0004)
	class UTexture2D*                                  HelicopterTexture;                                        // 0x0560(0x0004)
	class UTexture2D*                                  ProjectedBagTexture;                                      // 0x0564(0x0004)
	class UTexture2D*                                  ProjectedArrow;                                           // 0x0568(0x0004)
	struct FVector2D                                   BagHolderIcon;                                            // 0x056C(0x0008) (Edit)
	struct FVector2D                                   BagHolderName;                                            // 0x0574(0x0008) (Edit)
	struct FVector2D                                   BagSearchCountDown;                                       // 0x057C(0x0008) (Edit)
	struct FVector2D                                   BagDistanceOffset;                                        // 0x0584(0x0008) (Edit)
	struct FVector2D                                   StashDistanceOffset;                                      // 0x058C(0x0008) (Edit)
	struct FVector2D                                   StashTimerOffset;                                         // 0x0594(0x0008) (Edit)
	float                                              BagFadeDistance;                                          // 0x059C(0x0004) (Const)
	float                                              StashpointFadeDistance;                                   // 0x05A0(0x0004) (Const)
	class UClass*                                      TdMessageClass;                                           // 0x05A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitHUD");
		return ptr;
	}


	void DisplayBagHolder(class ATdPursuitPRI* MyPRI, class ATdPursuitGRI* MyGRI);
	void DrawLivingHUD();
	void DrawProjectedBag(class ATdPursuitPRI* MyPRI, class ATdPursuitGRI* MyGRI);
	void DrawProjectedStashpoint(class ATdPursuitGRI* MyGRI);
	void LoadHUDContent(class UClass* ContentClass);
	void PreBeginPlay();
};


// Class TdGame.TdPursuitGRI
// 0x0028 (0x02A8 - 0x0280)
class ATdPursuitGRI : public ATdBagGRI
{
public:
	class ATdStashpoint*                               StashpointList;                                           // 0x0280(0x0004) (Net)
	class ATdStashpoint*                               EngagedRunnerStashpoint;                                  // 0x0284(0x0004) (Net)
	class ATdStashpoint*                               EngagedCopStashpoint;                                     // 0x0288(0x0004)
	int                                                TimeToBagSearchCompletion;                                // 0x028C(0x0004) (Net)
	int                                                TimeToNewRunnerStahspoint;                                // 0x0290(0x0004) (Net)
	int                                                SyncRunnerStahspointTimer;                                // 0x0294(0x0004) (Net)
	class ATdPlayerReplicationInfo*                    RunnerStashAssistPRI;                                     // 0x0298(0x0004)
	struct FVector                                     LastBagDropLocation;                                      // 0x029C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitGRI");
		return ptr;
	}


	void OnStashingCompleted(class ATdStashpoint* Stashpoint);
	void OnDropCarriedObject(class ATdPlayerReplicationInfo* PRI, class AActor* CarriedActor);
	void OnCarriedObjectTouchedGround(class AActor* CarriedActor);
	float RateBagStart(class ATdBagStart* Bs, class ATdMPTeamPursuitGame* MyGameMode);
	struct FVector FindBestBagStart();
	void Timer();
};


// Class TdGame.TdOfflineGhostStorageManager
// 0x0014 (0x0084 - 0x0070)
class UTdOfflineGhostStorageManager : public UTdGhostStorageManager
{
public:
	struct FTsSaveData                                 WriteData;                                                // 0x0070(0x0014) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOfflineGhostStorageManager");
		return ptr;
	}


	void LocalWriteComplete(TEnumAsByte<ETsResult> Result);
	bool WriteGhost(class UTdGhost* Ghost, const struct FUniqueNetId& PlayerId, const struct FScriptDelegate& WriteCompleted);
	void LocalReadComplete(TEnumAsByte<ETsResult> Result, TArray<unsigned char> ReadBuffer);
	bool ReadGhost(const struct FTdGhostInfo& GhostInfo, const struct FScriptDelegate& ReadCompleted);
};


// Class TdGame.TdOnlineLoginHandler
// 0x0130 (0x016C - 0x003C)
class UTdOnlineLoginHandler : public UObject
{
public:
	class UTpConnection*                               Connection;                                               // 0x003C(0x0004) (Transient)
	class UTpSystemBase*                               SystemBase;                                               // 0x0040(0x0004) (Transient)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0044(0x0004) (Transient)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x0048(0x0008) (Transient)
	class UTdGameUISceneClient*                        SceneClient;                                              // 0x0050(0x0004)
	class UUIScene*                                    AccountLoginPC;                                           // 0x0054(0x0004) (Transient)
	class UUIScene*                                    TOS;                                                      // 0x0058(0x0004) (Transient)
	class UUIScene*                                    CreateAccountConsole;                                     // 0x005C(0x0004) (Transient)
	class UUIScene*                                    CreateAccountConfirm;                                     // 0x0060(0x0004) (Transient)
	class UUIScene*                                    CreateAccountPC;                                          // 0x0064(0x0004) (Transient)
	class UUIScene*                                    OnlineCheck;                                              // 0x0068(0x0004) (Transient)
	class UUIScene*                                    CreatePersonaScene;                                       // 0x006C(0x0004) (Transient)
	class UUIScene*                                    ParentalEmailScene;                                       // 0x0070(0x0004) (Transient)
	TScriptInterface<class UTdUIScene_CreateAccountInterface> CreateAccountInstance;                                    // 0x0074(0x0008) (Transient)
	class UTdUIScene_MessageBox*                       ModalConnectingMessageBox;                                // 0x007C(0x0004) (Transient)
	unsigned long                                      bSkipSilentLoginAccount : 1;                              // 0x0080(0x0004) (Transient)
	unsigned long                                      bIsInLoginProcess : 1;                                    // 0x0080(0x0004) (Transient)
	unsigned long                                      ConnectionRequired : 1;                                   // 0x0080(0x0004) (Transient)
	unsigned long                                      bAcceptEAMailParam : 1;                                   // 0x0080(0x0004) (Transient)
	unsigned long                                      bAcceptThirdPartyMailParam : 1;                           // 0x0080(0x0004) (Transient)
	unsigned long                                      bAcceptParam : 1;                                         // 0x0080(0x0004) (Transient)
	unsigned long                                      bIsConsoleParam : 1;                                      // 0x0080(0x0004) (Transient)
	int                                                LocalUserNum;                                             // 0x0084(0x0004) (Transient)
	struct FString                                     LatestCreatedPersona;                                     // 0x0088(0x000C) (Transient, NeedCtorLink)
	TArray<struct FTpCreateAccountCountry>             TOSCountries;                                             // 0x0094(0x000C) (Transient, NeedCtorLink)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x00A0(0x0004) (Transient)
	struct FString                                     EmailStrParam;                                            // 0x00A4(0x000C) (Transient, NeedCtorLink)
	struct FString                                     PasswdStrParam;                                           // 0x00B0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     PersonaStrParam;                                          // 0x00BC(0x000C) (Transient, NeedCtorLink)
	struct FString                                     MessageParam;                                             // 0x00C8(0x000C) (Transient, NeedCtorLink)
	struct FString                                     TOSStrParam;                                              // 0x00D4(0x000C) (Transient, NeedCtorLink)
	struct FTpCreateAccountParams                      CreateAccountParam;                                       // 0x00E0(0x004C) (Transient, NeedCtorLink)
	TEnumAsByte<ETpAccountError>                       AccountErrParam;                                          // 0x012C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	TArray<struct FString>                             PersonasListParam;                                        // 0x0130(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnPlayOffline__Delegate;                                // 0x013C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnConnectedAndFriendsLoaded__Delegate;                  // 0x0148(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnModalBoxOpened__Delegate;                             // 0x0154(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnModalBoxClosed__Delegate;                             // 0x0160(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineLoginHandler");
		return ptr;
	}


	void ModalBoxAboutToDie();
	void CloseModalBox(const struct FScriptDelegate& ModalBoxClosed);
	void OnModalBoxFullyOpened(class UUIScene* OpenedScene);
	void OnNotifyModalBoxCancel(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowModalBox_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowModalBox(const struct FScriptDelegate& ModalBoxOpened, TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnCreatePersonaDone_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnModalBoxPreSelecting();
	void OnModalBoxCancel_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnRepromptDisplay_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnConfirmMessage_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnShowOffline_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void OnDisconnect_MessageBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void PlayOfflineCallback();
	void OnlineCheck_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowOffline();
	void OnFailure_ShowOffline_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnFailure_Disconnect_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnFailure(bool UserAbort);
	void OnSucces_ClosedModal();
	void OnSuccess();
	void ParentalEmailScene_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDisplayParentalEmail_ModalClosed();
	void OnDisplayParentalEmail();
	void OnDisplayConfirmMessage_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDisplayConfirmMessage(const struct FString& Message);
	void OnDisconnect();
	void OnConnectionFailed_ModalClosed();
	void OnConnectionFailed(TEnumAsByte<ETpConnectionError> InError);
	void OnConnectionReady(const struct FString& EncLogin, const struct FString& Persona);
	void TOS_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnGetTOS_ModalClosed();
	void OnGetTOS(const struct FString& TOSText);
	void CreatePersonaScene_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDisplayPersonas_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDisplayPersonas_ModalClosed();
	void OnDisplayPersonas(TArray<struct FString> Personas);
	void AccountLoginPC_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnLoginReady_ModalClosed();
	void OnLoginReady();
	void OnLoginAccountError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnLoginAccountError_ModalClosed();
	void OnLoginAccountError(TEnumAsByte<ETpAccountError> InError);
	void OnDisplayCountrySelect(TArray<struct FTpCreateAccountCountry> Countries);
	void CreateAccountPC_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void CreateAccountConsole_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnCreateAccountReady_ModalClosed();
	void OnCreateAccountReady(const struct FString& Email, const struct FString& Pass, bool bAllowEaEmail, bool bAllowTPEmail, bool bIsConsole);
	void OnCreateAccountError_ModalClosed();
	void OnCreateAccountError(TEnumAsByte<ETpAccountError> InError);
	void OnLoginPersonaError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnLoginPersonaError_ModalClosed();
	void OnLoginPersonaError(int ErrorCode);
	void OnCreatePersonaError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnCreatePersonaError_ModalClosed();
	void OnCreatePersonaError(int ErrorCode);
	void OnFriendsListLoaded_ModalClosed();
	void OnFriendsListLoaded(bool bInOk);
	void OnConfirmParentalEmail();
	void ConfirmParentalEmail(const struct FString& Email);
	void OnLoginPersona();
	void LoginPersona(const struct FString& Persona);
	void OnCreatePersona();
	void CreatePersona(const struct FString& Persona);
	void OnPrepareCreateAccount();
	void PrepareCreateAccount();
	void Disconnect();
	void OnUserAbort_ModalClosed();
	void UserAbort();
	void OnCreateAccountAsync_Fail();
	void OnCreateAccountOnPC();
	void CreateAccountOnPC(const struct FTpCreateAccountParams& Params);
	void OnCreateAccountOnConsole();
	void CreateAccountOnConsole(const struct FString& LoginName, const struct FString& Password, bool bAllowEaEmail, bool bAllowThirdPartyEmail);
	void CreateAccountConfirm_Opened(class UUIScene* OpenedScene, bool bInitialActivation);
	void ConfirmCreateAccountConsole(const struct FString& Email, const struct FString& Password, bool bAllowEaEmail, bool bAllowThirdPartyEmail);
	void OnAcceptTOS();
	void AcceptTOS(bool Accept);
	void OnLoginAccount();
	void LoginAccount(const struct FString& Email, const struct FString& Password);
	void OnStartConnection();
	void OnShowBadVersion_Response(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void ShowBadVersion_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowBadVersion();
	void ShowNoConnection_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowNoConnection();
	void OnVerifyVersion(const struct FString& CurrentVersion);
	void VerifyVersion();
	void StartConnection(bool IsConnectionRequired);
	bool IsInLoginProcess();
	void OnConnectionChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	void Finalize();
	void Initialize(class UTdGameUISceneClient* SClient, class ULocalPlayer* Owner);
	void SetLocalUserNum(int Value);
	void OnModalBoxClosed();
	void OnModalBoxOpened();
	void OnConnectedAndFriendsLoaded(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
	void OnPlayOffline(TEnumAsByte<ESceneTransitionAnim> SceneAnim);
};


// Class TdGame.TdUIScene_CreateAccountInterface
// 0x0000 (0x003C - 0x003C)
class UTdUIScene_CreateAccountInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CreateAccountInterface");
		return ptr;
	}


	void SetSceneDeactivatedDelegate(const struct FScriptDelegate& SceneDeactivated);
	void CreateAccountDone(int Error, const struct FString& LocError);
};


// Class TdGame.TdUIScene_CreateAccountConfirm
// 0x0018 (0x0310 - 0x02F8)
class UTdUIScene_CreateAccountConfirm : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  LoginNameEditbox;                                         // 0x02F8(0x0004) (Transient)
	class UUIEditBox*                                  PasswordEditbox;                                          // 0x02FC(0x0004) (Transient)
	unsigned long                                      bAllowEaEmailHided : 1;                                   // 0x0300(0x0004) (Transient)
	unsigned long                                      bAllowThirdPartyEmailHided : 1;                           // 0x0300(0x0004) (Transient)
	struct FScriptDelegate                             __CreateAccount__Delegate;                                // 0x0304(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CreateAccountConfirm");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void SetUserLoginData(const struct FString& LoginName, const struct FString& Password, bool bAllowEaEmail, bool bAllowThirdPartyEmail);
	void OnSceneClosed_Submit(class UUIScene* ClosedScene);
	void OnSubmit();
	void OnCloseScene();
	bool OnButtonBar_Submit(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void CreateAccount(const struct FString& LoginName, const struct FString& Password, bool bAllowEaEmail, bool bAllowThirdPartyEmail);
};


// Class TdGame.TdUIScene_CreateAccountConsole
// 0x0030 (0x0328 - 0x02F8)
class UTdUIScene_CreateAccountConsole : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  LoginNameEditbox;                                         // 0x02F8(0x0004) (Transient)
	class UUIEditBox*                                  PasswordEditbox;                                          // 0x02FC(0x0004) (Transient)
	class UUIEditBox*                                  CurrentActiveEditbox;                                     // 0x0300(0x0004) (Transient)
	struct FString                                     CreateAccountDone_LocError;                               // 0x0304(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __ConfirmCreateAccountConsole__Delegate;                  // 0x0310(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x031C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CreateAccountConsole");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void CreateAccountError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void SetSceneDeactivatedDelegate(const struct FScriptDelegate& SceneDeactivated);
	void CreateAccountDone(int Error, const struct FString& LocError);
	void OnKeyboardInput_Complete(bool bWasSuccessful);
	void OnEditEditbox();
	void TryContinue();
	bool GetUserData(struct FString* LoginName, struct FString* Password);
	void OnEditBoxChanged(class UUIObject* Sender, int PlayerIndex);
	void SetValues(const struct FString& Email, const struct FString& Password, bool bAllowEaEmail, bool bAllowTPEmail);
	void OnSceneClosed_UserAbort(class UUIScene* ClosedScene);
	void OnCloseScene();
	bool OnButtonBar_EditEditbox(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
	void UserAbort();
	void ConfirmCreateAccountConsole(const struct FString& Email, const struct FString& Password, bool bAllowEaEmail, bool bAllowThirdPartyEmail);
};


// Class TdGame.TdUIScene_CreateAccountPC
// 0x004C (0x0344 - 0x02F8)
class UTdUIScene_CreateAccountPC : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  LoginNameEditbox;                                         // 0x02F8(0x0004) (Transient)
	class UUIEditBox*                                  PasswordEditbox;                                          // 0x02FC(0x0004) (Transient)
	class UUIEditBox*                                  VerifyPasswordEditbox;                                    // 0x0300(0x0004) (Transient)
	class UUIEditBox*                                  YearEditbox;                                              // 0x0304(0x0004) (Transient)
	class UUIEditBox*                                  MonthEditbox;                                             // 0x0308(0x0004) (Transient)
	class UUIEditBox*                                  DayEditbox;                                               // 0x030C(0x0004) (Transient)
	class UUIComboBox*                                 CountryCombo;                                             // 0x0310(0x0004) (Transient)
	class UUIComboBox*                                 LanguageCombo;                                            // 0x0314(0x0004) (Transient)
	class UUIImage*                                    ComboListBG;                                              // 0x0318(0x0004) (Transient)
	class UUIDataStore_TdLoginData*                    LoginData;                                                // 0x031C(0x0004)
	struct FString                                     CreateAccountFail_LocError;                               // 0x0320(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x032C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CreateAccountOnPC__Delegate;                            // 0x0338(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CreateAccountPC");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void CreateAccountFail_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void SetSceneDeactivatedDelegate(const struct FScriptDelegate& SceneDeactivated);
	void CreateAccountDone(int Error, const struct FString& LocError);
	void TryContinueFail_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void TryContinue();
	void OnSceneClosed_UserAbort(class UUIScene* ClosedScene);
	void OnCloseScene();
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetValues(bool bAllowEaEmail, bool bAllowTPEmail);
	void SetupButtonBar();
	void OnCountryComboList_VisibilityChanged(class UUIScreenObject* SourceWidget, bool bIsVisible);
	void PostInitialize();
	void CreateAccountOnPC(const struct FTpCreateAccountParams& Params);
	void UserAbort();
};


// Class TdGame.TdUIScene_AccountLoginPC
// 0x0030 (0x0328 - 0x02F8)
class UTdUIScene_AccountLoginPC : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  LoginNameEditbox;                                         // 0x02F8(0x0004) (Transient)
	class UUIEditBox*                                  PasswordEditbox;                                          // 0x02FC(0x0004) (Transient)
	class UUIEditBox*                                  CurrentActiveEditbox;                                     // 0x0300(0x0004) (Transient)
	struct FScriptDelegate                             __LoginAccount__Delegate;                                 // 0x0304(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PrepareCreateAccount__Delegate;                         // 0x0310(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x031C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_AccountLoginPC");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCreateAccount_Prepare(class UUIScene* ClosedScene);
	void OnCreateAccount();
	void OnKeyboardInput_Complete(bool bWasSuccessful);
	void OnEditEditbox();
	void OnSceneClosed_Login(class UUIScene* ClosedScene);
	void TryLogin();
	bool GetUserData(struct FString* LoginName, struct FString* Password);
	void OnEditBoxChanged(class UUIObject* Sender, int PlayerIndex);
	void OnSceneClosed_UserAbort(class UUIScene* ClosedScene);
	void OnCloseScene();
	bool OnButtonBar_EditEditbox(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_CreateAccount(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Login(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
	void UserAbort();
	void PrepareCreateAccount();
	void LoginAccount(const struct FString& Email, const struct FString& Password);
};


// Class TdGame.TdUIScene_CreatePersona
// 0x0030 (0x0328 - 0x02F8)
class UTdUIScene_CreatePersona : public UTdUIScene_SubMenu
{
public:
	class UUIList*                                     PersonasList;                                             // 0x02F8(0x0004) (Transient)
	class UUIEditBox*                                  PersonaEditbox;                                           // 0x02FC(0x0004) (Transient)
	class UUIDataStore_TdLoginData*                    LoginData;                                                // 0x0300(0x0004)
	struct FScriptDelegate                             __CreatePersona__Delegate;                                // 0x0304(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LoginPersona__Delegate;                                 // 0x0310(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x031C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CreatePersona");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void PersonasList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnCancel();
	void OnSubmitError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnCloseScene_CreatePersona(class UUIScene* ClosedScene);
	void OnCloseScene_LoginPersona(class UUIScene* ClosedScene);
	void OnSubmit();
	void UpdatePersonasBox();
	void SetListPersonas(TArray<struct FString> Personas);
	void OnPersonasList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Submit(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
	void UserAbort();
	void LoginPersona(const struct FString& Persona);
	void CreatePersona(const struct FString& Persona);
};


// Class TdGame.TdUIScene_TOS
// 0x001C (0x0314 - 0x02F8)
class UTdUIScene_TOS : public UTdUIScene_SubMenu
{
public:
	class UUIScrollFrame*                              ScrollFrame;                                              // 0x02F8(0x0004) (Transient)
	struct FScriptDelegate                             __AcceptTOS__Delegate;                                    // 0x02FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x0308(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TOS");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene_Cancel(class UUIScene* ClosedScene);
	void OnCancelTOS();
	void OnCloseScene_Accept(class UUIScene* ClosedScene);
	void OnAcceptTOS();
	void SetTOSMessage(const struct FString& Message);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void UserAbort();
	void AcceptTOS(bool Accept);
};


// Class TdGame.TdUIScene_ParentalEmail
// 0x001C (0x0314 - 0x02F8)
class UTdUIScene_ParentalEmail : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  ParentalEmailEditbox;                                     // 0x02F8(0x0004) (Transient)
	struct FScriptDelegate                             __ConfirmParentalEmail__Delegate;                         // 0x02FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UserAbort__Delegate;                                    // 0x0308(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ParentalEmail");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnKeyboardInput_Complete(bool bWasSuccessful);
	void OnEditEditbox();
	void OnSceneClosed_TryContinue(class UUIScene* ClosedScene);
	void TryContinue();
	void OnSceneClosed_UserAbort(class UUIScene* ClosedScene);
	void OnCloseScene();
	bool OnButtonBar_EditEditbox(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void UserAbort();
	void ConfirmParentalEmail(const struct FString& Email);
};


// Class TdGame.TdUIScene_OnlineCheck
// 0x000C (0x0304 - 0x02F8)
class UTdUIScene_OnlineCheck : public UTdUIScene_SubMenu
{
public:
	struct FScriptDelegate                             __PlayOffline__Delegate;                                  // 0x02F8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_OnlineCheck");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnSceneClosed_PlayOffline(class UUIScene* ClosedScene);
	void OnPlayOffline();
	void OnCloseScene();
	bool OnButtonBar_PlayOffline(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PlayOffline();
};


// Class TdGame.TdOnlineStatsReadForUI
// 0x0000 (0x00B8 - 0x00B8)
class UTdOnlineStatsReadForUI : public UTdOnlineStatsRead
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdOnlineStatsReadForUI");
		return ptr;
	}

};


// Class TdGame.TdPedSkeletalMeshActor
// 0x0000 (0x01F4 - 0x01F4)
class ATdPedSkeletalMeshActor : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPedSkeletalMeshActor");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialDecals
// 0x004C (0x0088 - 0x003C)
class UTdPhysicalMaterialDecals : public UTdPhysicalMaterialBase
{
public:
	TArray<class UDecalComponent*>                     Heavy_Weapon_Impact;                                      // 0x003C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UDecalComponent*>                     Heavy_Weapon_Ricochet;                                    // 0x0048(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UDecalComponent*>                     Light_Weapon_Impact;                                      // 0x0054(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UDecalComponent*>                     Light_Weapon_Ricochet;                                    // 0x0060(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UDecalComponent*>                     ShotGun_Impact;                                           // 0x006C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UDecalComponent*>                     ShotGun_Ricochet;                                         // 0x0078(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	float                                              CriticalAngle;                                            // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialDecals");
		return ptr;
	}

};


// Class TdGame.TdPhysicalMaterialImpactEffects
// 0x0020 (0x005C - 0x003C)
class UTdPhysicalMaterialImpactEffects : public UTdPhysicalMaterialBase
{
public:
	class UParticleSystem*                             LightAmmo;                                                // 0x003C(0x0004) (Edit)
	class UParticleSystem*                             HeavyAmmo;                                                // 0x0040(0x0004) (Edit)
	class UParticleSystem*                             HeliAmmo;                                                 // 0x0044(0x0004) (Edit)
	class UParticleSystem*                             ShotgunPellet;                                            // 0x0048(0x0004) (Edit)
	class UParticleSystemComponent*                    LightAmmoPhysX;                                           // 0x004C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    HeavyAmmoPhysX;                                           // 0x0050(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    HeliAmmoPhysX;                                            // 0x0054(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ShotgunPelletPhysX;                                       // 0x0058(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPhysicalMaterialImpactEffects");
		return ptr;
	}

};


// Class TdGame.TdPlayerCamera
// 0x0030 (0x05A4 - 0x0574)
class ATdPlayerCamera : public ACamera
{
public:
	struct FVector                                     FreeflightPosition;                                       // 0x0574(0x000C)
	struct FRotator                                    FreeflightRotation;                                       // 0x0580(0x000C)
	float                                              FreeflightScale;                                          // 0x058C(0x0004) (Config)
	float                                              FixedPersonDistance;                                      // 0x0590(0x0004)
	struct FRotator                                    FixedPersonVectorRelativeRotator;                         // 0x0594(0x000C)
	int                                                ThirdPerson360Yaw;                                        // 0x05A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerCamera");
		return ptr;
	}


	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void PostBeginPlay();
};


// Class TdGame.TdStatsManager
// 0x0034 (0x0070 - 0x003C)
class UTdStatsManager : public UObject
{
public:
	TArray<int>                                        StatsArray;                                               // 0x003C(0x000C) (Transient, NeedCtorLink)
	float                                              CachedWalkingStateTime;                                   // 0x0048(0x0004) (Transient)
	float                                              CachedStartWallrunTime;                                   // 0x004C(0x0004) (Transient)
	float                                              CachedStartBagPickupTime;                                 // 0x0050(0x0004) (Transient)
	int                                                MaxMomentumTimeLimit;                                     // 0x0054(0x0004) (Edit, Config)
	int                                                SPAirMeleeKillsLimit;                                     // 0x0058(0x0004) (Edit, Config)
	int                                                SPDisarmLimit;                                            // 0x005C(0x0004) (Edit, Config)
	int                                                SPMeleeLimit;                                             // 0x0060(0x0004) (Edit, Config)
	int                                                SP180TauntLimit;                                          // 0x0064(0x0004) (Edit, Config)
	int                                                SPLandOnHeadLimit;                                        // 0x0068(0x0004) (Edit, Config)
	int                                                NumberOfBagsToFindForFirstAchievement;                    // 0x006C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdStatsManager");
		return ptr;
	}


	bool RegisterFoundBag(int BagIndex, class UTdProfileSettings* P);
	int GetStatCount(TEnumAsByte<EAchievementStatsID> Id, class UTdProfileSettings* P);
	void SetToDefaults(class UTdProfileSettings* P);
	bool RegisterStats(TEnumAsByte<EAchievementStatsID> Id, float Time, class UTdProfileSettings* P);
	void ShowAchievementStats(class UTdProfileSettings* P);
	void LoadStatsFromProfile(class UTdProfileSettings* P, bool bLevelStats, bool bGameStats, bool bGlobalStats);
	void SaveStatsToProfile(class UTdProfileSettings* P, bool bLevelStats, bool bGameStats, bool bGlobalStats);
	void ResetStats(class UTdProfileSettings* P, bool bLevelStats, bool bGameStats, bool bGlobalStats);
	void ResetStatCount(TEnumAsByte<EAchievementStatsID> Id, class UTdProfileSettings* P);
};


// Class TdGame.TdSavedMove
// 0x0005 (0x00DD - 0x00D8)
class UTdSavedMove : public USavedMove
{
public:
	unsigned long                                      bReleasedJump : 1;                                        // 0x00D8(0x0004)
	TEnumAsByte<EMoveActionHint>                       MoveActionHint;                                           // 0x00DC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSavedMove");
		return ptr;
	}


	TEnumAsByte<EDoubleClickDir> STATIC_SetFlags(unsigned char Flags, class APlayerController* PC);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	bool IsImportantMove(const struct FVector& CompareAccel);
	unsigned char CompressedFlags();
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick);
	void Clear();
};


// Class TdGame.TdPlayerInputConsole
// 0x0038 (0x01C0 - 0x0188)
class UTdPlayerInputConsole : public UTdPlayerInput
{
public:
	class ATdPawn*                                     AATarget;                                                 // 0x0188(0x0004)
	class ATdPawn*                                     AAStrafeTarget;                                           // 0x018C(0x0004)
	int                                                AAStrafeOrigin;                                           // 0x0190(0x0004)
	unsigned long                                      bAAEnabled : 1;                                           // 0x0194(0x0004) (Edit)
	int                                                AAStrafeAssistRelease;                                    // 0x0198(0x0004) (Edit)
	struct FVector                                     DeltaAim;                                                 // 0x019C(0x000C)
	float                                              DeltaAimDistZ;                                            // 0x01A8(0x0004)
	float                                              DeltaAimDistY;                                            // 0x01AC(0x0004)
	class ATdWeapon*                                   CurrentWeapon;                                            // 0x01B0(0x0004)
	float                                              AssistYawBias;                                            // 0x01B4(0x0004)
	float                                              AssistPitchBias;                                          // 0x01B8(0x0004)
	float                                              YawAccelerationTime;                                      // 0x01BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPlayerInputConsole");
		return ptr;
	}


	void ViewAcceleration(float DeltaTime);
	void PerformResponseMapping(float DeltaTime);
	void AimAssist(float DeltaTime);
	bool EqualSigns(float A, float B);
	void PreProcessInput(float DeltaTime);
	void EnableAA();
	void InitInputSystem(class UClass* GameInfoClass);
};


// Class TdGame.TdPossessionPRI
// 0x0000 (0x0270 - 0x0270)
class ATdPossessionPRI : public ATdBagPRI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPossessionPRI");
		return ptr;
	}


	void OnDropCarriedObject(class AActor* inActor);
	void OnCarryObject(class AActor* inActor);
};


// Class TdGame.TdProj_HeavyFlashbangGrenade
// 0x0000 (0x0248 - 0x0248)
class ATdProj_HeavyFlashbangGrenade : public ATdProj_FlashbangGrenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdProj_HeavyFlashbangGrenade");
		return ptr;
	}

};


// Class TdGame.TdPursuitAgentMove
// 0x0000 (0x018C - 0x018C)
class UTdPursuitAgentMove : public UTdPhysicsMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdPursuitAgentMove");
		return ptr;
	}


	void OnCustomAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
};


// Class TdGame.TdStashpointManager
// 0x0004 (0x01C4 - 0x01C0)
class ATdStashpointManager : public AActor
{
public:
	class ATdPursuitGRI*                               MyGRI;                                                    // 0x01C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdStashpointManager");
		return ptr;
	}


	bool RemoveStashPoint(class ATdStashpoint* StashpointToRemove);
	class AActor* AddStashPoint(const struct FVector& StashLocation, class UClass* StashpointClass);
	int GetFirstRunnerStashPointID();
	void SendKismetOnStartMatchInProgress();
	void OnStartMatchInProgress();
	TArray<class ATdStashpoint*> GetStashpoints(int TeamIndex, int StashPointID);
	void Initialize(class ATdPursuitGRI* InGRI, const TScriptInterface<class UTdStashpointListener>& InListener);
};


// Class TdGame.TdReflectionVolume
// 0x0000 (0x01FC - 0x01FC)
class ATdReflectionVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdReflectionVolume");
		return ptr;
	}

};


// Class TdGame.TdRobberStashpoint
// 0x0000 (0x01E4 - 0x01E4)
class ATdRobberStashpoint : public ATdStashpoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdRobberStashpoint");
		return ptr;
	}

};


// Class TdGame.TdSoundMarker
// 0x0000 (0x01CC - 0x01CC)
class ATdSoundMarker : public ATdMarker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSoundMarker");
		return ptr;
	}

};


// Class TdGame.TdSPPostProcessingBase
// 0x0084 (0x00C0 - 0x003C)
class UTdSPPostProcessingBase : public UObject
{
public:
	class UTdUIScene_LoadIndicator*                    LoadIndicator;                                            // 0x003C(0x0004) (Transient)
	class UTdUIScene_MessageBox*                       ErrorMessageBox;                                          // 0x0040(0x0004) (Transient)
	struct FString                                     PlayerName;                                               // 0x0044(0x000C) (NeedCtorLink)
	struct FUniqueNetId                                PlayerId;                                                 // 0x0050(0x0008)
	float                                              TotalTime;                                                // 0x0058(0x0004)
	TArray<float>                                      IntermediateTimes;                                        // 0x005C(0x000C) (NeedCtorLink)
	int                                                DistanceRun;                                              // 0x0068(0x0004)
	float                                              AverageSpeed;                                             // 0x006C(0x0004)
	int                                                TotalRating;                                              // 0x0070(0x0004)
	int                                                UnlockedStretch;                                          // 0x0074(0x0004)
	int                                                StretchId;                                                // 0x0078(0x0004)
	int                                                ControllerId;                                             // 0x007C(0x0004)
	unsigned long                                      bError : 1;                                               // 0x0080(0x0004) (Transient)
	struct FString                                     ErrorTitle;                                               // 0x0084(0x000C) (Transient, NeedCtorLink)
	struct FString                                     ErrorMessage;                                             // 0x0090(0x000C) (Transient, NeedCtorLink)
	class UTdTTInput*                                  InputToProcess;                                           // 0x009C(0x0004) (Transient)
	class UTdTTResult*                                 TTResult;                                                 // 0x00A0(0x0004) (Transient)
	class UUIDataStore_TdTimeTrialData*                TTDataStore;                                              // 0x00A4(0x0004)
	struct FScriptDelegate                             __OnPostProcessDone__Delegate;                            // 0x00A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClosed__Delegate;                                     // 0x00B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPPostProcessingBase");
		return ptr;
	}


	void PPOnlineConnectionLost();
	void OnErrorMessageBoxClosed(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnShowErrorMessageBox_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowErrorMessageBox();
	void OnLoadSceneClosed(class UUIScene* ClosedScene);
	void SetError(const struct FString& Title, const struct FString& Message);
	void CloseLoadScene();
	void OnShowLoadScene_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowLoadScene(const struct FScriptDelegate& SceneFullyOpened);
	float RoundTime(float N);
	bool WasNewRecord(float TimeToBeat, float MyTime);
	void FinishPostProcessing();
	void UpdateDataStoreAndResult(class UTdTTInput* TTInput, bool bSaveSuccess);
	void OnProfileWriteComplete(bool bSuccess);
	void UpdateOfflineStats(class UTdTTInput* TTOfflineInput);
	void WriteOnlineStatsCompletedCallback(bool bSuccess);
	void UpdateOnlineStats(class UTdTTInput* TTOnlineInput, bool bOnlyAllTime, int InGhostTag);
	void ProcessRace(class UTdTTInput* RaceInput, int InStretchId, const struct FScriptDelegate& PostProcessDone);
	void OnClosed();
	void OnPostProcessDone(class UTdTTResult* PostProcessingResult);
};


// Class TdGame.TdSPLevelRacePostProcessing
// 0x0004 (0x00C4 - 0x00C0)
class UTdSPLevelRacePostProcessing : public UTdSPPostProcessingBase
{
public:
	float                                              QualifyingTime;                                           // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPLevelRacePostProcessing");
		return ptr;
	}


	void UpdateTTDataStoreInfo(class UTdTTInput* TTInput);
	class UTdTTResult* CreateTTResult(class UTdTTInput* TTInput);
	void UpdateOfflineTTResult(class UTdTTInput* TTOfflineInput, class UTdTTResult* TTOfflineResult);
	void UpdateOfflineStats(class UTdTTInput* TTOfflineInput);
	void UpdateOnlineTTResult(class UTdTTInput* TTOnlineInput, class UTdTTResult* TTOnlineResult);
	void UpdateDataStoreAndResult(class UTdTTInput* TTInput, bool bSaveSuccess);
	void OnUpdateOnlineStats(class UUIScene* OpenedScene);
	void ProcessRace(class UTdTTInput* RaceInput, int InStretchId, const struct FScriptDelegate& PostProcessDone);
};


// Class TdGame.TdSPLevelRaceHUD
// 0x0014 (0x053C - 0x0528)
class ATdSPLevelRaceHUD : public ATdSPHUD
{
public:
	class UUIDataStore_TdGameData*                     GameData;                                                 // 0x0528(0x0004)
	struct FVector2D                                   RaceTimerPos;                                             // 0x052C(0x0008) (Edit)
	struct FVector2D                                   TargetTimePos;                                            // 0x0534(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPLevelRaceHUD");
		return ptr;
	}


	void DrawRaceTimer(class ATdSPLevelRace* Game, bool bBothTimes);
	void DrawLivingHUD();
	void PostBeginPlay();
	void LoadHUDContent(class UClass* ContentClass);
};


// Class TdGame.TdTimerCheckpoint
// 0x0048 (0x0374 - 0x032C)
class ATdTimerCheckpoint : public ATdPlaceableCheckpoint
{
public:
	TArray<struct ATdTimerCheckpoint_FCheckPointTrackIndex> BelongToTracks;                                           // 0x032C(0x000C) (Edit, NeedCtorLink)
	float                                              CustomHeight;                                             // 0x0338(0x0004) (Edit)
	float                                              CustomWidthScale;                                         // 0x033C(0x0004) (Edit)
	unsigned long                                      bNoRespawn : 1;                                           // 0x0340(0x0004) (Edit)
	float                                              InitialHeight;                                            // 0x0344(0x0004) (Transient)
	float                                              InitialRadius;                                            // 0x0348(0x0004) (Transient)
	class UParticleSystemComponent*                    EffectPSComponent;                                        // 0x034C(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             ArrowEffect;                                              // 0x0350(0x0004)
	class UMaterialInstanceConstant*                   CheckpointMaterials[0x2];                                 // 0x0354(0x0004) (Transient)
	float                                              FadeParam;                                                // 0x035C(0x0004) (Transient)
	float                                              FadeTarget;                                               // 0x0360(0x0004) (Transient)
	float                                              FadeTime;                                                 // 0x0364(0x0004) (Config)
	class UStaticMeshComponent*                        CheckpointTimeMesh;                                       // 0x0368(0x0004) (Const, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        CheckpointFinishlineMesh;                                 // 0x036C(0x0004) (Const, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        CurrentMesh;                                              // 0x0370(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTimerCheckpoint");
		return ptr;
	}


	void Show(bool bShow, int Track, bool bNoFade);
	void SetDirectionHint(const struct FRotator& NextCheckpointHint);
	bool HasIntermediateTimeInTrack(int Track);
	bool IsLastcheckpointInTrack(int Track);
	void SetLastCheckpoint(int TrackIndex);
	int GetOrderIndexForTrack(int TrackIndex);
	int GetOrderIndex(int ArrayIdx);
	int GetTrackIndex(int ArrayIdx);
	bool ShouldGenerateTrackData(int TrackIndex);
	int GetNumTracks();
	void SetUpCheckpoint(bool bIsLastCheckpoint);
	void ScaleHeight();
	void AlignToGround(bool bIsLastCheckpoint);
};


// Class TdGame.TdTimeTrialStart
// 0x0001 (0x032D - 0x032C)
class ATdTimeTrialStart : public ATdPlayerStart
{
public:
	TEnumAsByte<ETTStretch>                            TrackIndex;                                               // 0x032C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTimeTrialStart");
		return ptr;
	}

};


// Class TdGame.TdSPTimeTrialPostProcessing
// 0x0004 (0x00C4 - 0x00C0)
class UTdSPTimeTrialPostProcessing : public UTdSPPostProcessingBase
{
public:
	unsigned long                                      bSaveGhost : 1;                                           // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdSPTimeTrialPostProcessing");
		return ptr;
	}


	void PPOnlineConnectionLost();
	void UpdateDataStoreAndResult(class UTdTTInput* TTInput, bool bSaveSuccess);
	void UpdateTTDataStoreInfo(class UTdTTInput* TTInput);
	class UTdTTResult* CreateTTResult(class UTdTTInput* TTInput);
	void UpdateOfflineTTResult(class UTdTTInput* TTOfflineInput, class UTdTTResult* TTOfflineResult);
	void UpdateOfflineStats(class UTdTTInput* TTOfflineInput);
	void UpdateOnlineTTResult(class UTdTTInput* TTOnlineInput, class UTdTTResult* TTOnlineResult);
	void SaveGhostCompleteCallback(TEnumAsByte<EGhostStorageResult> Result, int GhostTag);
	void OnUpdateOnlineStats(class UUIScene* OpenedScene);
	void ProcessRace(class UTdTTInput* RaceInput, int InStretchId, const struct FScriptDelegate& PostProcessDone);
};


// Class TdGame.TdTimeTrialHUD
// 0x0098 (0x05C0 - 0x0528)
class ATdTimeTrialHUD : public ATdSPHUD
{
public:
	struct FVector2D                                   RaceTimerPos;                                             // 0x0528(0x0008) (Edit)
	struct FVector2D                                   SpeedPos;                                                 // 0x0530(0x0008) (Edit)
	struct FVector2D                                   RaceProgressPos;                                          // 0x0538(0x0008) (Edit)
	struct FVector2D                                   StarRatingPos;                                            // 0x0540(0x0008) (Edit)
	float                                              StarFadeTime;                                             // 0x0548(0x0004) (Edit)
	float                                              StarCompletedAlpha;                                       // 0x054C(0x0004) (Edit)
	float                                              StarFailedAlpha;                                          // 0x0550(0x0004) (Edit)
	float                                              RaceProgressBarHeight;                                    // 0x0554(0x0004) (Edit)
	float                                              ProgressBarAlpha;                                         // 0x0558(0x0004) (Edit)
	float                                              ProgressBarCompletedAlpha;                                // 0x055C(0x0004) (Edit)
	float                                              ProgressBarWidth;                                         // 0x0560(0x0004) (Edit)
	float                                              ProgressBarFadeTime;                                      // 0x0564(0x0004) (Edit)
	class UTexture2D*                                  BottomBar[0x3];                                           // 0x0568(0x0004) (Transient)
	class UTexture2D*                                  MiddleBar[0x3];                                           // 0x0574(0x0004) (Transient)
	class UTexture2D*                                  TopBar[0x3];                                              // 0x0580(0x0004) (Transient)
	class UTexture2D*                                  Star;                                                     // 0x058C(0x0004) (Transient)
	TArray<float>                                      HUDProgressFade;                                          // 0x0590(0x000C) (Transient, NeedCtorLink)
	float                                              StarRatingAlpha[0x3];                                     // 0x059C(0x0004) (Transient)
	struct FString                                     SpeedUnitString;                                          // 0x05A8(0x000C) (Transient, NeedCtorLink)
	int                                                MeasurementUnits;                                         // 0x05B4(0x0004) (Transient)
	class UParticleSystem*                             CheckPointEffectParticles;                                // 0x05B8(0x0004)
	float                                              CheckPointDistanceInCameraDirection;                      // 0x05BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTimeTrialHUD");
		return ptr;
	}


	void ActivatePopUp(TEnumAsByte<EPopUpType> Type, float Duration, const struct FString& Message);
	void TriggerCheckPointEffect();
	void UnPauseGame(class UUIScene* DeactivatedScene);
	void PlayerOwnerRestart();
	void OpenInGameMenu();
	void DrawRaceTimer(class ATdSPTimeTrialGame* Game);
	void DrawStarRating(class ATdSPTimeTrialGame* Game);
	void DrawTrackProgress(class ATdSPTimeTrialGame* Game);
	void DrawSpeed(float* PosY);
	void PauseGame();
	void TriggerRestartRaceblinkCallback();
	void TriggerRestartRaceblink();
	void DrawLivingHUD();
	void CacheMeasurementUnitInfo();
	void PostBeginPlay();
	void LoadHUDContent(class UClass* ContentClass);
};


// Class TdGame.TdTutorialCheckpoint
// 0x000C (0x0338 - 0x032C)
class ATdTutorialCheckpoint : public ATdPlaceableCheckpoint
{
public:
	TArray<struct ATdTutorialCheckpoint_FCheckPointTrackIndex> BelongToTracks;                                           // 0x032C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialCheckpoint");
		return ptr;
	}


	void SendCompletedEvent(int TrackIndex);
	bool HasCompletionCriterias(int TrackIndex);
	bool BelongsToTrack(int TrackIndex);
	int GetOrderIndexForTrack(int TrackIndex);
	int GetOrderIndex(int ArrayIdx);
	int GetTrackIndex(int ArrayIdx);
	void Show(bool bShow, int Track, bool bNoFade);
	bool CanCompleteCheckpoint(int TrackIndex, TEnumAsByte<EMovement> CurrentMove, TEnumAsByte<ETutorialEvents> CurrentTutorialEvent);
	bool IsOptional(int TrackIndex);
	bool ShouldResetPlayer(int TrackIndex, TEnumAsByte<EMovement> CurrentMove, TEnumAsByte<ETutorialEvents> CurrentTutorialEvent);
	bool IsCheckpointInTrack(int TrackIndex);
	int GetArrayIndexForTrack(int TrackIndex);
	int GetNumTracks();
};


// Class TdGame.TdTutorialStart
// 0x000C (0x0338 - 0x032C)
class ATdTutorialStart : public ATdPlayerStart
{
public:
	TArray<TEnumAsByte<EMovementChallenge>>            BelongToChallenge;                                        // 0x032C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialStart");
		return ptr;
	}


	bool IsStartSpotInTrack(int TrackIndex);
};


// Class TdGame.TdTutorialHUD
// 0x0014 (0x053C - 0x0528)
class ATdTutorialHUD : public ATdSPHUD
{
public:
	struct FVector2D                                   RaceTimerPos;                                             // 0x0528(0x0008) (Edit)
	struct FVector2D                                   TutorialInfoPos;                                          // 0x0530(0x0008) (Edit)
	class UUIScene*                                    TutorialMessageScene;                                     // 0x0538(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTutorialHUD");
		return ptr;
	}


	void DrawLivingHUD();
	void LoadHUDContent(class UClass* ContentClass);
};


// Class TdGame.TdStashCompleter
// 0x0000 (0x01E4 - 0x01E4)
class ATdStashCompleter : public ATdStashpoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdStashCompleter");
		return ptr;
	}

};


// Class TdGame.TdTimeTrialRaceLauncher
// 0x0048 (0x0084 - 0x003C)
class UTdTimeTrialRaceLauncher : public UObject
{
public:
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x003C(0x0004)
	class UTdUIScene_LoadIndicator*                    LoadIndicator;                                            // 0x0040(0x0004)
	unsigned long                                      bDataReadCorrectly : 1;                                   // 0x0044(0x0004)
	unsigned long                                      bStartOnlineMode : 1;                                     // 0x0044(0x0004)
	TEnumAsByte<EGhostStorageResult>                   GhostReadResult;                                          // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     ErrorTitle;                                               // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     ErrorMessage;                                             // 0x0058(0x000C) (NeedCtorLink)
	int                                                RaceModeId;                                               // 0x0064(0x0004)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x0068(0x0004) (Transient)
	struct FScriptDelegate                             __OnLoadMessageDone__Delegate;                            // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRaceLauncherFinished__Delegate;                       // 0x0078(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTimeTrialRaceLauncher");
		return ptr;
	}


	void SetErrorMessage(const struct FString& Title, const struct FString& Message);
	void OnLoadFailedQuitToMain(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnGhostLoadFailedAccept(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnGhostLoadMsgBoxPreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void OnGhostReadFailed_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnDataReadFailed_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnStartStretch();
	void CloseLoadMessage();
	void OnLoadMessageClosed(class UUIScene* ClosedScene);
	void OnShowLoadMessage_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowLoadMessage(const struct FScriptDelegate& SceneDelegate);
	void OnOpenGhostComplete(TEnumAsByte<EGhostStorageResult> Result);
	void OnStretchDataReadComplete(bool bSuccess);
	void OnTransitionDoneStartStretch(class UUIScene* OpenedScene);
	void StartStretch(int InRaceModeId, bool bOnlineMode, class ULocalPlayer* Player, const struct FScriptDelegate& OnFinish);
	void OnRaceLauncherFinished(int Result);
	void OnLoadMessageDone();
};


// Class TdGame.TdTrigger_Dynamic
// 0x0000 (0x01F0 - 0x01F0)
class ATdTrigger_Dynamic : public ATdTrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTrigger_Dynamic");
		return ptr;
	}

};


// Class TdGame.TdTriggerVolume
// 0x0000 (0x01FC - 0x01FC)
class ATdTriggerVolume : public ATriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdTriggerVolume");
		return ptr;
	}

};


// Class TdGame.TdUIDrawEORPlayersPanel
// 0x0000 (0x0464 - 0x0464)
class UTdUIDrawEORPlayersPanel : public UTdUIDrawPlayersPanel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIDrawEORPlayersPanel");
		return ptr;
	}


	void DrawPlayerScore(class UCanvas* C, int Score, int Left, int Top, int Width, int Height);
	void DrawPlayerKillsDeaths(class UCanvas* C, int Kills, int Deaths, int Left, int Top, int Width, int Height);
	void DrawPlayerName(class UCanvas* C, const struct FString& PlayerName, int Left, int Top, int Width, int Height);
	void DrawPlayer(class UCanvas* C, class ATdPlayerReplicationInfo* TdPRI, int TeamIndex, bool bIsSelected, int Left, int Top, int Width, int Height);
	void DrawPlayerSlotBG(class UCanvas* C, int TeamIndex, int PlayerSlotIndex, int X, int Y, int XL, int YL);
};


// Class TdGame.TdUIDrawLobbyPlayersPanel
// 0x0010 (0x0474 - 0x0464)
class UTdUIDrawLobbyPlayersPanel : public UTdUIDrawPlayersPanel
{
public:
	class UTexture2D*                                  IsReadyImage;                                             // 0x0464(0x0004) (Edit)
	TArray<int>                                        Roles;                                                    // 0x0468(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIDrawLobbyPlayersPanel");
		return ptr;
	}


	void DrawPlayerIsReady(class UCanvas* C, int Left, int Top, int Width, int Height);
	void DrawPlayerRole(class UCanvas* C, int RoleId, int Left, int Top, int Width, int Height);
	void DrawPlayerName(class UCanvas* C, const struct FString& PlayerName, bool bIsSelected, int Left, int Top, int Width, int Height);
	void DrawPlayer(class UCanvas* C, class ATdPlayerReplicationInfo* TdPRI, int TeamIndex, bool bIsSelected, int Left, int Top, int Width, int Height);
	void DrawPlayerSlotBG(class UCanvas* C, int TeamIndex, int PlayerSlotIndex, int X, int Y, int XL, int YL);
};


// Class TdGame.TdUILevelList
// 0x0000 (0x0664 - 0x0664)
class UTdUILevelList : public UTdUIImageList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUILevelList");
		return ptr;
	}

};


// Class TdGame.TdUILobbyPlayerWidget
// 0x000C (0x03F4 - 0x03E8)
class UTdUILobbyPlayerWidget : public UTdUIPlayerSlotBase
{
public:
	class UTdUIFocusLabel*                             PlayerNameLabel;                                          // 0x03E8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    PlayerIsReadyImage;                                       // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UUIImage*                                    PlayerRoleImage;                                          // 0x03F0(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUILobbyPlayerWidget");
		return ptr;
	}

};


// Class TdGame.TdUIMenuList
// 0x0000 (0x0664 - 0x0664)
class UTdUIMenuList : public UTdUIListBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIMenuList");
		return ptr;
	}

};


// Class TdGame.TdUIScene_AudioVideoSettings
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_AudioVideoSettings : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_AudioVideoSettings");
		return ptr;
	}

};


// Class TdGame.TdUIScene_AudioVideoSettingsPC
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_AudioVideoSettingsPC : public UTdUIScene_AudioVideoSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_AudioVideoSettingsPC");
		return ptr;
	}

};


// Class TdGame.TdUIScene_BigOverlayImage
// 0x0004 (0x02FC - 0x02F8)
class UTdUIScene_BigOverlayImage : public UTdUIScene_Overlay
{
public:
	class UUIImage*                                    BigImage;                                                 // 0x02F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_BigOverlayImage");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	void SetOverlayImage(class USurface* Image);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
};


// Class TdGame.TdUIScene_ButtonBar
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_ButtonBar : public UTdUIScene_Overlay
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ButtonBar");
		return ptr;
	}

};


// Class TdGame.TdUIScene_ObjectivesScene
// 0x0030 (0x0328 - 0x02F8)
class UTdUIScene_ObjectivesScene : public UTdUIScene
{
public:
	class UTdUITabControl*                             TabControl;                                               // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    TitleLabel;                                               // 0x02FC(0x0004) (Transient)
	class UUIImage*                                    CurrentObjectiveBGImage;                                  // 0x0300(0x0004) (Transient)
	class UUIImage*                                    CurrentObjectiveBGTopImage;                               // 0x0304(0x0004) (Transient)
	class UUIImage*                                    FinishedObjectivesBGImage;                                // 0x0308(0x0004) (Transient)
	class UUIImage*                                    FinishedObjectivesBGTopImage;                             // 0x030C(0x0004) (Transient)
	class UUIDataStore_TdGameObjectivesData*           TdGameObjectives;                                         // 0x0310(0x0004)
	struct FName                                       ObjectivesToReadFieldName;                                // 0x0314(0x0008) (Edit)
	struct FName                                       FinishedObjectivesToReadFieldName;                        // 0x031C(0x0008) (Edit)
	unsigned long                                      bObjectiveListIsEmpty : 1;                                // 0x0324(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ObjectivesScene");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void OnTabPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex);
	void PostInitialize();
	void Initialized();
};


// Class TdGame.TdUITabPage
// 0x0000 (0x047C - 0x047C)
class UTdUITabPage : public UUITabPage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void Activated();
};


// Class TdGame.TdUITabPage_FinishedObjectives
// 0x0010 (0x048C - 0x047C)
class UTdUITabPage_FinishedObjectives : public UTdUITabPage
{
public:
	class UUIList*                                     FinishedObjectivesList;                                   // 0x047C(0x0004) (Transient)
	class UUILabel*                                    DescriptionLabel;                                         // 0x0480(0x0004) (Transient)
	class UUILabel*                                    NoFinishedObjectivesLabel;                                // 0x0484(0x0004) (Transient)
	class UUIDataStore_TdGameObjectivesData*           TdGameObjectivesData;                                     // 0x0488(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage_FinishedObjectives");
		return ptr;
	}


	void FinishedObjectivesList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void UpdateDescription();
	void OnFinishedObjectivesList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void PostInitialize();
};


// Class TdGame.TdUIScene_ChallengeObjectives
// 0x0000 (0x0328 - 0x0328)
class UTdUIScene_ChallengeObjectives : public UTdUIScene_ObjectivesScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ChallengeObjectives");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnSceneDeactivated_RestartCurrentMovementChallenge(class UUIScene* ClosedScene);
	void OnSceneDeactivated_RestartMovementChallenge(class UUIScene* ClosedScene);
	void OnCloseScene();
	void StartChallenge();
	bool OnButtonBar_StartChallenge(class UUIScreenObject* Sender, int PlayerIndex);
	void OnTabPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex);
	void OnFinishedObjectivesList_SubmitSelection(class UUIList* Sender, int PlayerIndex);
	void SetupButtonBar();
};


// Class TdGame.TdUIScene_CompareStats
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_CompareStats : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_CompareStats");
		return ptr;
	}

};


// Class TdGame.TdUIScene_ControllerMappings
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_ControllerMappings : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_ControllerMappings");
		return ptr;
	}

};


// Class TdGame.TdUIScene_DifficultySettings
// 0x000C (0x0304 - 0x02F8)
class UTdUIScene_DifficultySettings : public UTdUIScene_SubMenu
{
public:
	class UUITdOptionButton*                           DifficultyOptionButton;                                   // 0x02F8(0x0004) (Transient)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x02FC(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_DifficultySettings");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	void OnProfileWriteFailed_Closed(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void OnProfileWriteFailed_PreSelection(class UTdUIScene_MessageBox* InMessageBox, int SelectedOption, int PlayerIndex);
	void ProfileWriteFailed_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnStartGame();
	void TryWriteProfile();
	void OnProfileWriteComplete(bool bSucceeded);
	void OnAccept();
	void OnCancel();
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_EndLogo
// 0x0004 (0x02FC - 0x02F8)
class UTdUIScene_EndLogo : public UTdUIScene
{
public:
	class UUIImage*                                    Logo;                                                     // 0x02F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_EndLogo");
		return ptr;
	}


	void PostInitialize();
};


// Class TdGame.TdUIScene_EndOfLevelRace
// 0x0008 (0x0300 - 0x02F8)
class UTdUIScene_EndOfLevelRace : public UTdUIScene
{
public:
	struct FUniqueNetId                                GamerCardId;                                              // 0x02F8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_EndOfLevelRace");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnShowGamerCard();
	bool OnButtonBar_ShowGamerCard(class UUIScreenObject* Sender, int PlayerIndex);
	void OnRestart();
	void OnContinue();
	bool OnButtonBar_Restart(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
};


// Class TdGame.TdUIScene_EndOfRace
// 0x0044 (0x033C - 0x02F8)
class UTdUIScene_EndOfRace : public UTdUIScene
{
public:
	class UUILabel*                                    YouName;                                                  // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    TargetName;                                               // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    TimeYou;                                                  // 0x0300(0x0004) (Transient)
	class UUILabel*                                    TimeTarget;                                               // 0x0304(0x0004) (Transient)
	class UUILabel*                                    DistanceYou;                                              // 0x0308(0x0004) (Transient)
	class UUILabel*                                    DistanceTarget;                                           // 0x030C(0x0004) (Transient)
	class UUILabel*                                    AverageSpeedYou;                                          // 0x0310(0x0004) (Transient)
	class UUILabel*                                    AverageSpeedTarget;                                       // 0x0314(0x0004) (Transient)
	class UUILabel*                                    StarRatingYou;                                            // 0x0318(0x0004) (Transient)
	class UUILabel*                                    StarRatingTarget;                                         // 0x031C(0x0004) (Transient)
	class UUIImage*                                    MapStar1;                                                 // 0x0320(0x0004) (Transient)
	class UUIImage*                                    MapStar2;                                                 // 0x0324(0x0004) (Transient)
	class UUIImage*                                    MapStar3;                                                 // 0x0328(0x0004) (Transient)
	class UUITdOptionButton*                           CompareTarget;                                            // 0x032C(0x0004) (Transient)
	class UTdUIRaceProgressBar*                        RaceProgressBar;                                          // 0x0330(0x0004) (Transient)
	struct FUniqueNetId                                GamerCardId;                                              // 0x0334(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_EndOfRace");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnShowGamerCard();
	bool OnButtonBar_ShowGamerCard(class UUIScreenObject* Sender, int PlayerIndex);
	void OnSceneClosed_Restart(class UUIScene* ClosedScene);
	void HUDFadeScreenCallback();
	void OnRestart();
	void OnSceneClosed_Continue(class UUIScene* ClosedScene);
	void OnContinue();
	bool OnButtonBar_Restart(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void InitializeScene(class UUIDataStore_TdTimeTrialData* TimeTrialData, int CurrentStretchProviderIdx, class UTdTTResult* TTResult, const struct FTTData& CompareData);
	struct FString FormatAverageSpeed(float AverageSpeed);
	struct FString FormatDistance(float Distance);
	void SetUndefinedTargetTime();
	void SetUpRaceProgressBar(class UUIDataStore_TdTimeTrialData* TimeTrialData, class UTdTTResult* TTResult, const struct FTTData& CompareData);
	void OnOptionValueChanged(class UUIObject* Sender, int PlayerIndex);
	void SetMapStarRating(class UUIDataStore_TdTimeTrialData* TimeTrialData);
	void PostInitialize();
};


// Class TdGame.TdUIScene_EOM
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_EOM : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_EOM");
		return ptr;
	}

};


// Class TdGame.TdUIScene_EOR
// 0x0014 (0x030C - 0x02F8)
class UTdUIScene_EOR : public UTdUIScene
{
public:
	class UUILabel*                                    TimeUntilRestartLabel;                                    // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    WinningTeamLabel;                                         // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    WinConditionLabel;                                        // 0x0300(0x0004) (Transient)
	class UTdUIDrawPlayersPanel*                       PlayersPanel;                                             // 0x0304(0x0004) (Transient)
	class UUILabel*                                    RoundCountLabel;                                          // 0x0308(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_EOR");
		return ptr;
	}


	void OnCompare();
	void PlayersPanel_OnPlayerSlotClicked(class ATdPlayerReplicationInfo* TdPRI);
	void UpdateRoundScore(class ATdGameReplicationInfo* GRI, class ATdPlayerReplicationInfo* Winner);
	void UpdateRoundTimer(class ATdGameReplicationInfo* GRI, class ATdPlayerReplicationInfo* Winner);
	void PostInitialize();
};


// Class TdGame.TdUIScene_FindMatch
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_FindMatch : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_FindMatch");
		return ptr;
	}

};


// Class TdGame.TdUIScene_Friends
// 0x0010 (0x0308 - 0x02F8)
class UTdUIScene_Friends : public UTdUIScene
{
public:
	class UUIList*                                     FriendsList;                                              // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    NoFriendsLabel;                                           // 0x02FC(0x0004) (Transient)
	class UUIDataStore_OnlinePlayerData*               PlayerData;                                               // 0x0300(0x0004) (Transient)
	unsigned long                                      bFriendsListEmpty : 1;                                    // 0x0304(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Friends");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	bool OnFriendsList_Updated(class UUIObject* Sender, int BindingIndex);
	void RefreshList();
	void OnRemoveFriend_Confirm();
	void OnRemoveFriend_MsgBoxCallback(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void RemoveFriend_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void RemoveFriend();
	void AddFriend();
	bool GetCurrentFriendNetId(struct FUniqueNetId* FriendNetId);
	bool GetCurrentFriendNick(struct FString* FriendNick);
	bool OnButtonBar_RemoveFriend(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_AddFriend(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void UpdateButtonBar();
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_GameObjectives
// 0x001C (0x0344 - 0x0328)
class UTdUIScene_GameObjectives : public UTdUIScene_ObjectivesScene
{
public:
	class UUILabel*                                    BagStatusLabel;                                           // 0x0328(0x0004) (Transient)
	class UUILabel*                                    NumGiveBulletDamageLabel;                                 // 0x032C(0x0004) (Transient)
	class UUIDataStore_TdGameData*                     TdGameData;                                               // 0x0330(0x0004)
	class UTdProfileSettings*                          Profile;                                                  // 0x0334(0x0004)
	struct FString                                     CurrentMap;                                               // 0x0338(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_GameObjectives");
		return ptr;
	}


	void InitSceneLabels();
	void PostInitialize();
	void Initialized();
};


// Class TdGame.TdUIScene_HostMatch
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_HostMatch : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_HostMatch");
		return ptr;
	}

};


// Class TdGame.TdUIScene_HUD
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_HUD : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_HUD");
		return ptr;
	}


	void ShowMessage();
};


// Class TdGame.TdUIScene_Leaderboard
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_Leaderboard : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Leaderboard");
		return ptr;
	}

};


// Class TdGame.TdUIScene_LoadCheckpoint
// 0x0008 (0x0300 - 0x02F8)
class UTdUIScene_LoadCheckpoint : public UTdUIScene_SubMenu
{
public:
	class UUITdOptionButton*                           CheckpointOptionButton;                                   // 0x02F8(0x0004) (Transient)
	class UUIImage*                                    CheckpointImage;                                          // 0x02FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_LoadCheckpoint");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void StartGame();
	void OnCloseScene();
	void OnCheckpointChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_Lobby
// 0x007C (0x0374 - 0x02F8)
class UTdUIScene_Lobby : public UTdUIScene
{
public:
	class UUIDataStore_TdGameData*                     TdGameData;                                               // 0x02F8(0x0004)
	class UUIDataStore_TdMPData*                       TdMPData;                                                 // 0x02FC(0x0004)
	struct FName                                       SettingsDataStoreName;                                    // 0x0300(0x0008) (Edit)
	class UTdLobbyBackend*                             Backend;                                                  // 0x0308(0x0004) (Transient)
	struct FLobbyTeamWidgets                           TeamWidgets[0x2];                                         // 0x030C(0x0020) (Transient)
	class UUILabelButton*                              StartGameButton;                                          // 0x034C(0x0004) (Transient)
	class UUIPanel*                                    SettingsPanel;                                            // 0x0350(0x0004) (Transient)
	class UUILabel*                                    NumPlayersInLobbyLabel;                                   // 0x0354(0x0004) (Transient)
	class UTdUIDrawLobbyPlayersPanel*                  PlayersPanel;                                             // 0x0358(0x0004) (Transient)
	class UUITdOptionButton*                           MapOptionList;                                            // 0x035C(0x0004) (Transient)
	class UUIPanel*                                    ButtonsPanel;                                             // 0x0360(0x0004) (Transient)
	unsigned long                                      bIsControllingClient : 1;                                 // 0x0364(0x0004)
	struct FScriptDelegate                             __OnSceneClosed__Delegate;                                // 0x0368(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Lobby");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCompare();
	void OnKick();
	void PlayersPanel_OnPlayerSlotClicked(class ATdPlayerReplicationInfo* TdPRI);
	void OnQuitToMainMenu();
	void OnStartGame();
	bool OnStartGamePrepare(class UUIScreenObject* Sender, int PlayerIndex);
	void UpdatePlayers(TArray<class APlayerReplicationInfo*> pris);
	void OnGameStarted();
	void OnPlayerSetReady(class AController* Player);
	void OnPlayerSwitchRole(class AController* Player);
	void OnPlayerSwitchTeam(class AController* Player);
	void OnPlayerLeave(class AController* Player);
	void OnPlayerJoin(class AController* Player);
	void OnPrepareEnterPlayerPanel(TEnumAsByte<EUIWidgetFace> EnterFromFace);
	void OnButtonsPanel_ActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void OnMapOptionList_ActiveStateChanged(class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState);
	void SetPlayerDataWidgetBindings();
	void SceneDeactivated();
	void PostInitialize();
	void OnSceneClosed();
};


// Class TdGame.TdUIScene_MPLeaderboard
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_MPLeaderboard : public UTdUIScene_Leaderboard
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_MPLeaderboard");
		return ptr;
	}

};


// Class TdGame.TdUIScene_MPPause
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_MPPause : public UTdUIScene_Pause
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_MPPause");
		return ptr;
	}

};


// Class TdGame.TdUIScene_NewRecord
// 0x0028 (0x0320 - 0x02F8)
class UTdUIScene_NewRecord : public UTdUIScene
{
public:
	class UUILabel*                                    OldRecordName;                                            // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    OldRecordTime;                                            // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    NewRecordName;                                            // 0x0300(0x0004) (Transient)
	class UUILabel*                                    NewRecordTime;                                            // 0x0304(0x0004) (Transient)
	class UUILabel*                                    NewRecordDesc;                                            // 0x0308(0x0004) (Transient)
	class UUIImage*                                    MapStar1;                                                 // 0x030C(0x0004) (Transient)
	class UUIImage*                                    MapStar2;                                                 // 0x0310(0x0004) (Transient)
	class UUIImage*                                    MapStar3;                                                 // 0x0314(0x0004) (Transient)
	struct FUniqueNetId                                GamerCardId;                                              // 0x0318(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_NewRecord");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	bool GetRecordDescription(class UTdTTResult* TTResult, struct FString* winStr);
	struct FString GetOldTime(float Time);
	struct FString GetOldName(const struct FString& OldName);
	bool IsOldRecordUndefined(float Time);
	void SetOldRecord(float Time, const struct FString& PlayerName, int NumStars);
	void SetUndefinedOldRecord();
	void SetRecordInfo(class UTdTTResult* TTResult);
	void InitializeScene(class UUIDataStore_TdTimeTrialData* TimeTrialData, int CurrentStretchProviderIdx);
	void OnSceneClosed(class UUIScene* ClosedScene);
	void OnContinue();
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	void OnShowGamerCard();
	bool OnButtonBar_ShowGamerCard(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void SetMapStarRating(class UUIDataStore_TdTimeTrialData* TimeTrialData);
	void PostInitialize();
};


// Class TdGame.TdUIScene_OnlineMessageTicker
// 0x0014 (0x030C - 0x02F8)
class UTdUIScene_OnlineMessageTicker : public UTdUIScene_Overlay
{
public:
	class UUIObject*                                   Ticker;                                                   // 0x02F8(0x0004) (Transient, Deprecated)
	float                                              AnimDuration;                                             // 0x02FC(0x0004) (Deprecated)
	float                                              AnimTimeCount;                                            // 0x0300(0x0004) (Deprecated)
	unsigned long                                      bSceneInitialized : 1;                                    // 0x0304(0x0004) (Deprecated)
	float                                              TickerDefaultY;                                           // 0x0308(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_OnlineMessageTicker");
		return ptr;
	}

};


// Class TdGame.TdUIScene_Party
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_Party : public UTdUIScene_Popup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Party");
		return ptr;
	}

};


// Class TdGame.TdUIScene_PersonalStats
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_PersonalStats : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_PersonalStats");
		return ptr;
	}

};


// Class TdGame.TdUIScene_SendMessage
// 0x0018 (0x0310 - 0x02F8)
class UTdUIScene_SendMessage : public UTdUIScene_SubMenu
{
public:
	class UUIEditBox*                                  PlayerNameEditBox;                                        // 0x02F8(0x0004) (Transient)
	struct FString                                     TargetPlayerName;                                         // 0x02FC(0x000C) (Transient, NeedCtorLink)
	struct FUniqueNetId                                TargetPlayerNetId;                                        // 0x0308(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SendMessage");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	void OnFinishedAddFriend();
	void OnAddFriendByNameComplete(bool bWasSuccessful);
	void AddFriend();
	void SetTargetPlayer(const struct FUniqueNetId& InPlayerNetId, const struct FString& InPlayerName);
	bool OnButtonBar_AddFriend(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Cancel(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_SetMapListPopup
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_SetMapListPopup : public UTdUIScene_Popup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SetMapListPopup");
		return ptr;
	}

};


// Class TdGame.TdUIScene_SetRoleListPopup
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_SetRoleListPopup : public UTdUIScene_Popup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SetRoleListPopup");
		return ptr;
	}

};


// Class TdGame.TdUIScene_SPLeaderboard
// 0x0074 (0x036C - 0x02F8)
class UTdUIScene_SPLeaderboard : public UTdUIScene_Leaderboard
{
public:
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x02F8(0x0004) (Transient)
	class UUIDataStore_TdOnlineStats*                  TdLeaderboardData;                                        // 0x02FC(0x0004) (Transient)
	class UUIDataStore_TdOnlineStats*                  StatsDataStore;                                           // 0x0300(0x0004) (Transient)
	class UTdLeaderboardSettings*                      StatsSettings;                                            // 0x0304(0x0004) (Transient)
	class UUIList*                                     PlayerRankList;                                           // 0x0308(0x0004) (Transient)
	class UUIList*                                     LeaderBoardList;                                          // 0x030C(0x0004) (Transient)
	class UUILabel*                                    TitleLabel;                                               // 0x0310(0x0004) (Transient)
	class UUILabel*                                    StretchFilterLabel;                                       // 0x0314(0x0004) (Transient)
	class UUILabel*                                    StretchLabel;                                             // 0x0318(0x0004) (Transient)
	class UUILabel*                                    PlayersFilterLabel;                                       // 0x031C(0x0004) (Transient)
	class UUILabel*                                    TimeFrameFilterLabel;                                     // 0x0320(0x0004) (Transient)
	class UUITdOptionButton*                           GameModeOptionButton;                                     // 0x0324(0x0004) (Transient)
	class UUITdOptionButton*                           StretchFilterOptionButton;                                // 0x0328(0x0004) (Transient)
	class UUITdOptionButton*                           PlayersFilterOptionButton;                                // 0x032C(0x0004) (Transient)
	class UUITdOptionButton*                           TimeFrameFilterOptionButton;                              // 0x0330(0x0004) (Transient)
	class UUIScene*                                    StartStretchScene;                                        // 0x0334(0x0004)
	int                                                CurrentStretchProviderIndex;                              // 0x0338(0x0004)
	struct FName                                       CurrentStretchProviderName;                               // 0x033C(0x0008)
	int                                                CurrentPlayerIndex;                                       // 0x0344(0x0004)
	struct FUniqueNetId                                CurrentPlayerNetId;                                       // 0x0348(0x0008)
	struct FString                                     CurrentPlayerNickname;                                    // 0x0350(0x000C) (NeedCtorLink)
	int                                                LevelEventDelay;                                          // 0x035C(0x0004) (Transient)
	float                                              RequestDelay;                                             // 0x0360(0x0004) (Const)
	float                                              TimeToRequest;                                            // 0x0364(0x0004) (Transient)
	unsigned long                                      bIsFriendRequestParam : 1;                                // 0x0368(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SPLeaderboard");
		return ptr;
	}


	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void LeaderboardList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnStatsReadError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnStatsReadComplete(bool bWasSuccessful);
	void StepTimeFrame();
	void StepPlayerFilter();
	void StepStretch(bool bIncrease);
	void OnCloseScene();
	void RaceReadCompleted(bool Success);
	void OnPreTick(float DeltaTime, bool bTopmostScene);
	void SceneRestored();
	void SceneSavedForRestore();
	void SaveSceneState();
	void OnLevelLocked_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnLauncherFinished(int Result);
	void StartRace();
	void GamerCard();
	void SetUpLB(const struct FName& NewStretchProviderName, int NewStretchProviderIndex, int PlayerFilter);
	void ToggleLB(int GameMode);
	void ShowAddFriend_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void ShowAddFriend();
	bool OnButtonBar_GamerCard(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_ShowFriends(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_StartRace(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_AddFriend(class UUIScreenObject* Sender, int PlayerIndex);
	void UpdateButtonBar();
	void SetupButtonBar();
	void InitSceneData();
	void SceneActivated(bool bInitialActivation);
	void RefreshStats();
	void DelayedRefreshStats();
	void OnFilterOptionButton_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void ValueUpdated();
	void OnLeaderBoardList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void SetStretchFilterLabel(int ProviderIndex);
	void PostInitialize();
};


// Class TdGame.TdUIScene_TimeTrial
// 0x0044 (0x033C - 0x02F8)
class UTdUIScene_TimeTrial : public UTdUIScene_SubMenu
{
public:
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x02F8(0x0004)
	class UUIList*                                     StretchList;                                              // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    UnlockDesc;                                               // 0x0300(0x0004) (Transient)
	class UUILabel*                                    QualifyingTimeLabel1;                                     // 0x0304(0x0004) (Transient)
	class UUILabel*                                    QualifyingTimeLabel2;                                     // 0x0308(0x0004) (Transient)
	class UUILabel*                                    QualifyingTimeLabel3;                                     // 0x030C(0x0004) (Transient)
	class UUILabel*                                    WorldBestLabel;                                           // 0x0310(0x0004) (Transient)
	class UUILabel*                                    WorldBestTimeLabel;                                       // 0x0314(0x0004) (Transient)
	class UUILabel*                                    FriendsBestLabel;                                         // 0x0318(0x0004) (Transient)
	class UUILabel*                                    FriendsBestTimeLabel;                                     // 0x031C(0x0004) (Transient)
	class UUIScene*                                    StartStretchScene;                                        // 0x0320(0x0004)
	class UUIScene*                                    SPLeaderboardScene;                                       // 0x0324(0x0004)
	class UUIScene*                                    SPLeaderboardScenePC;                                     // 0x0328(0x0004)
	int                                                LevelEventDelay;                                          // 0x032C(0x0004) (Transient)
	float                                              RequestDelay;                                             // 0x0330(0x0004) (Const)
	float                                              TimeToRequest;                                            // 0x0334(0x0004) (Transient)
	int                                                PlayerFilterIndex;                                        // 0x0338(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TimeTrial");
		return ptr;
	}


	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void StretchList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnCloseScene();
	void OnPreTick(float DeltaTime, bool bTopmostScene);
	void SceneRestored();
	void SceneSavedForRestore();
	void SaveSceneState();
	void OnOpenLeaderboard(class UUIScene* ActivatedScene, bool bInitialActivation);
	void OpenLeaderboard(int InPlayerFilterIndex);
	void OnOpenWorldsLeaderBoard();
	void OnOpenFriendsLeaderBoard();
	void OnLauncherFinished(int Result);
	void StartRace();
	void OnReadTimesError_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnReadTimesCompleteDelegate(bool bSuccessful);
	void OnStretchList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_RaceWorlds(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_RaceFriends(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void RefreshStats();
	void DelayedRefreshStats();
	void PostInitialize();
};


// Class TdGame.TdUIScene_SPLevelRace
// 0x0030 (0x0328 - 0x02F8)
class UTdUIScene_SPLevelRace : public UTdUIScene_SubMenu
{
public:
	class UUIList*                                     StretchList;                                              // 0x02F8(0x0004) (Transient)
	class UUIScene*                                    SPLeaderboardScene;                                       // 0x02FC(0x0004)
	class UUIScene*                                    SPLeaderboardScenePC;                                     // 0x0300(0x0004)
	class UUILabel*                                    WorldBestLabel;                                           // 0x0304(0x0004) (Transient)
	class UUILabel*                                    WorldBestTimeLabel;                                       // 0x0308(0x0004) (Transient)
	class UUILabel*                                    FriendsBestLabel;                                         // 0x030C(0x0004) (Transient)
	class UUILabel*                                    FriendsBestTimeLabel;                                     // 0x0310(0x0004) (Transient)
	int                                                LevelEventDelay;                                          // 0x0314(0x0004) (Transient)
	float                                              RequestDelay;                                             // 0x0318(0x0004) (Const)
	float                                              TimeToRequest;                                            // 0x031C(0x0004) (Transient)
	class UUIDataStore_TdTimeTrialData*                TimeTrialData;                                            // 0x0320(0x0004)
	int                                                PlayerFilterIndex;                                        // 0x0324(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SPLevelRace");
		return ptr;
	}


	bool PlayInputKeyNotification(struct FInputEventParameters* EventParms);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void StretchList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnCloseScene();
	void OnPreTick(float DeltaTime, bool bTopmostScene);
	void SceneSavedForRestore();
	void SceneRestored();
	void SaveSceneState();
	void OnLBSceneActivated(class UUIScene* OpenedScene, bool bInitialActivation);
	void OpenLeaderboard(int InPlayerFilterIndex);
	void OnOpenWorldsLeaderBoard();
	void OnOpenFriendsLeaderBoard();
	void DelayedRefreshStats();
	void OnLauncherFinished(int Result);
	void StartRace();
	void OnReadTimesCompleteError_Init(class UUIScene* OpenedScene, bool bInitialActivation);
	void OnReadTimesCompleteDelegate(bool bSuccessful);
	void OnStretchList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Accept(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_RaceWorlds(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_RaceFriends(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_SPPause
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_SPPause : public UTdUIScene_Pause
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SPPause");
		return ptr;
	}


	void LoadLastLevelCheckpoint();
	void OnLoadLastCheckpoint_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void OnLoadLastCheckpoint_PreConfirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void LostLastCheckpoint_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	bool HandleOptionButton(class UUILabelButton* OptionButton);
	void PostInitialize();
};


// Class TdGame.TdUIScene_SPLevelRacePause
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_SPLevelRacePause : public UTdUIScene_SPPause
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_SPLevelRacePause");
		return ptr;
	}


	void OnRestartRace();
	void OnRestart_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void NotifyRestartMsgBox_OptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void Restart_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	bool HandleOptionButton(class UUILabelButton* OptionButton);
};


// Class TdGame.TdUIScene_StarRating
// 0x002C (0x0324 - 0x02F8)
class UTdUIScene_StarRating : public UTdUIScene
{
public:
	class UUILabel*                                    TotalText;                                                // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    StarsText;                                                // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    UnlockText;                                               // 0x0300(0x0004) (Transient)
	class UUIImage*                                    LeftStar;                                                 // 0x0304(0x0004) (Transient)
	class UUIImage*                                    CenterStar;                                               // 0x0308(0x0004) (Transient)
	class UUIImage*                                    RightStar;                                                // 0x030C(0x0004) (Transient)
	class UUIImage*                                    TotalStar;                                                // 0x0310(0x0004) (Transient)
	int                                                NewLevelStarRating;                                       // 0x0314(0x0004) (Transient)
	int                                                OldLevelStarRating;                                       // 0x0318(0x0004) (Transient)
	int                                                OldTotalStarRating;                                       // 0x031C(0x0004) (Transient)
	class USoundCue*                                   StarSound;                                                // 0x0320(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_StarRating");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnContinue_Done(class UUIScene* OpenedScene);
	void OnContinue();
	bool OnButtonBar_Continue(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void SetStarRating(class UUIDataStore_TdTimeTrialData* TimeTrialData, int CurrentStretchProviderIdx);
	void SetTotalText(int Stars, class UTdTTResult* TTResult);
	void SetStarsText(int Stars, const struct FString& MapName);
	void AnimEnd(class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq);
	void InitializeScene(class UUIDataStore_TdTimeTrialData* TimeTrialData, int CurrentStretchProviderIdx);
	void PostInitialize();
};


// Class TdGame.TdUIScene_StartRace
// 0x003C (0x0334 - 0x02F8)
class UTdUIScene_StartRace : public UTdUIScene
{
public:
	class UUILabel*                                    QualifyingTimeLabel1;                                     // 0x02F8(0x0004) (Transient)
	class UUILabel*                                    QualifyingTimeLabel2;                                     // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    QualifyingTimeLabel3;                                     // 0x0300(0x0004) (Transient)
	class UUIImage*                                    MapStar1;                                                 // 0x0304(0x0004) (Transient)
	class UUIImage*                                    MapStar2;                                                 // 0x0308(0x0004) (Transient)
	class UUIImage*                                    MapStar3;                                                 // 0x030C(0x0004) (Transient)
	class UUILabel*                                    TrackLegnth;                                              // 0x0310(0x0004) (Transient)
	class UUILabel*                                    TargetName;                                               // 0x0314(0x0004) (Transient)
	class UTdUIRaceProgressBar*                        RaceProgressBar;                                          // 0x0318(0x0004) (Transient)
	unsigned long                                      bIsFaded : 1;                                             // 0x031C(0x0004) (Transient)
	float                                              FadeTimer;                                                // 0x0320(0x0004) (Transient)
	float                                              TimeToFadeStart;                                          // 0x0324(0x0004) (Transient)
	float                                              FadeTime;                                                 // 0x0328(0x0004) (Transient)
	struct FUniqueNetId                                GamerCardId;                                              // 0x032C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_StartRace");
		return ptr;
	}


	void OnPreTick(float DeltaTime, bool bTopmostScene);
	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void TurnOffFade();
	void OnSceneClosed(class UUIScene* ClosedScene);
	void OnStartRace();
	void InitializeScene(class UUIDataStore_TdTimeTrialData* TTData);
	void SetMapStarRating(class UUIDataStore_TdTimeTrialData* TimeTrialData);
	bool OnButtonBar_Race(class UUIScreenObject* Sender, int PlayerIndex);
	void OnShowGamerCard();
	bool OnButtonBar_ShowGamerCard(class UUIScreenObject* Sender, int PlayerIndex);
	void OnQuit();
	bool OnButtonBar_Quit(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_TdStartStretch
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_TdStartStretch : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TdStartStretch");
		return ptr;
	}

};


// Class TdGame.TdUIScene_TdTOSOptions
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_TdTOSOptions : public UTdUIScene_SubMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TdTOSOptions");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnSubmit();
	void OnCloseScene();
	bool OnButtonBar_Submit(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
};


// Class TdGame.TdUIScene_TempLoginScene
// 0x0000 (0x02F8 - 0x02F8)
class UTdUIScene_TempLoginScene : public UTdUIScene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TempLoginScene");
		return ptr;
	}

};


// Class TdGame.TdUIScene_TimeTrialPause
// 0x0004 (0x0324 - 0x0320)
class UTdUIScene_TimeTrialPause : public UTdUIScene_Pause
{
public:
	class UUILabelButton*                              GhostButton;                                              // 0x0320(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TimeTrialPause");
		return ptr;
	}


	void OnSceneClosed(class UUIScene* ClosedScene);
	void OnRestartStretch();
	void OnToggleGhost();
	void OnRestart_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void NotifyRestartMsgBox_OptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void Restart_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	bool HandleOptionButton(class UUILabelButton* OptionButton);
	void OnBack();
	void PostInitialize();
};


// Class TdGame.TdUIScene_Tutorial
// 0x0018 (0x0310 - 0x02F8)
class UTdUIScene_Tutorial : public UTdUIScene
{
public:
	class UUIDataStore_TdTutorialData*                 TutorialData;                                             // 0x02F8(0x0004) (Transient)
	class UUIList*                                     ChallengeList;                                            // 0x02FC(0x0004) (Transient)
	class UUILabel*                                    GradeATimeLabel;                                          // 0x0300(0x0004) (Transient)
	class UUILabel*                                    GradeBTimeLabel;                                          // 0x0304(0x0004) (Transient)
	class UUILabel*                                    GradeCTimeLabel;                                          // 0x0308(0x0004) (Transient)
	class UUILabel*                                    PlayerTimeTimeLabel;                                      // 0x030C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Tutorial");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnStartChallenge(bool bRace);
	void OnChallengeList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	bool OnButtonBar_Tutorial(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Race(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void SetupButtonBar();
	void PostInitialize();
};


// Class TdGame.TdUIScene_TutorialPause
// 0x0000 (0x0320 - 0x0320)
class UTdUIScene_TutorialPause : public UTdUIScene_Pause
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_TutorialPause");
		return ptr;
	}


	void OnSkipTutorial();
	void OnStayInTutorial(bool bStayInTutorial);
	void OnSkip_Confirm(class UTdUIScene_MessageBox* MsgBox, int SelectedOption, int PlayerIndex);
	void NotifySkipMsgBox_OptionSelected(class UTdUIScene_MessageBox* MessageBox, int SelectedOption, int PlayerIndex);
	void Skip_MsgBoxInit(class UUIScene* OpenedScene, bool bInitialActivation);
	bool HandleOptionButton(class UUILabelButton* OptionButton);
	void PostInitialize();
};


// Class TdGame.TdUIScene_Unlocks
// 0x001C (0x0314 - 0x02F8)
class UTdUIScene_Unlocks : public UTdUIScene
{
public:
	class UUIImage*                                    ArtworkBGImage;                                           // 0x02F8(0x0004) (Transient)
	class UUIImage*                                    ArtworkBGTopImage;                                        // 0x02FC(0x0004) (Transient)
	class UUIImage*                                    VideosBGImage;                                            // 0x0300(0x0004) (Transient)
	class UUIImage*                                    VideosBGTopImage;                                         // 0x0304(0x0004) (Transient)
	class UUIImage*                                    MusicBGImage;                                             // 0x0308(0x0004) (Transient)
	class UUIImage*                                    MusicBGTopImage;                                          // 0x030C(0x0004) (Transient)
	class UTdUITabControl*                             TabControl;                                               // 0x0310(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUIScene_Unlocks");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void OnCloseScene();
	void SetupButtonBar();
	void OnPostTick(float DeltaTime, bool bTopmostScene);
	void OnTabPageActivated(class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex);
	void PostInitialize();
};


// Class TdGame.TdUITabPage_UnlockedArtwork
// 0x0064 (0x04E0 - 0x047C)
class UTdUITabPage_UnlockedArtwork : public UTdUITabPage
{
public:
	class UUIList*                                     ArtworkList;                                              // 0x047C(0x0004) (Transient)
	class UUIImage*                                    ArtworkImage;                                             // 0x0480(0x0004) (Transient)
	class UUILabel*                                    ArtworkDescriptionLabel;                                  // 0x0484(0x0004) (Transient)
	class UUILabel*                                    ArtworkImageLoadLabel;                                    // 0x0488(0x0004) (Transient)
	class UTdUITabControl*                             OwnerTabControl;                                          // 0x048C(0x0004) (Transient)
	class UTdUIButtonBar*                              ButtonBar;                                                // 0x0490(0x0004) (Transient)
	class UUIDataStore_TdUnlocksData*                  UnlocksData;                                              // 0x0494(0x0004)
	class UUIScene*                                    ImageOverlayScene;                                        // 0x0498(0x0004)
	struct FUIProviderFieldValue                       ImageFieldValue;                                          // 0x049C(0x0040) (Transient, NeedCtorLink)
	unsigned long                                      bArtworkImageIsDirty : 1;                                 // 0x04DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage_UnlockedArtwork");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void ArtworkList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnWriteProfileSettings_Complete(bool bSuccess);
	void OnImageSceneFullyOpened(class UUIScene* OpenedScene);
	void OnImageSceneOpened(class UUIScene* ActivatedScene, bool bInitialActivation);
	void ViewImage();
	bool OnButtonBar_View(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void RefreshButtonBar();
	void RefreshArtworkImage();
	void TickArtworkUnlock(float DeltaTime);
	void OnArtworkList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void LinkSceneWidgets();
	void PostInitialize();
};


// Class TdGame.TdUITabPage_UnlockedVideos
// 0x0020 (0x049C - 0x047C)
class UTdUITabPage_UnlockedVideos : public UTdUITabPage
{
public:
	class UUIList*                                     VideosList;                                               // 0x047C(0x0004) (Transient)
	class UUILabel*                                    VideosDescriptionLabel;                                   // 0x0480(0x0004) (Transient)
	class UUIImage*                                    VideosPreviewImage;                                       // 0x0484(0x0004) (Transient)
	class UUILabel*                                    VideosPreviewLoadLabel;                                   // 0x0488(0x0004) (Transient)
	class UTdUITabControl*                             OwnerTabControl;                                          // 0x048C(0x0004) (Transient)
	class UTdUIButtonBar*                              ButtonBar;                                                // 0x0490(0x0004) (Transient)
	class UUIDataStore_TdUnlocksData*                  UnlocksData;                                              // 0x0494(0x0004)
	unsigned long                                      bPreviewImageIsDirty : 1;                                 // 0x0498(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage_UnlockedVideos");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void VideosList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnWriteProfileSettings_Complete(bool bSuccess);
	void PlayMovie();
	void GetPathFromResourceParm(struct FString* VideoPath, struct FString* ImagePath);
	bool OnButtonBar_Play(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void RefreshButtonBar();
	void RefreshPreviewImage();
	void TickPreviewImageUnlock(float DeltaTime);
	void OnVideosList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void LinkSceneWidgets();
	void PostInitialize();
};


// Class TdGame.TdUITabPage_UnlockedMusic
// 0x0014 (0x0490 - 0x047C)
class UTdUITabPage_UnlockedMusic : public UTdUITabPage
{
public:
	class UUIList*                                     MusicList;                                                // 0x047C(0x0004) (Transient)
	class UUILabel*                                    MusicDescriptionLabel;                                    // 0x0480(0x0004) (Transient)
	class UTdUITabControl*                             OwnerTabControl;                                          // 0x0484(0x0004) (Transient)
	class UTdUIButtonBar*                              ButtonBar;                                                // 0x0488(0x0004) (Transient)
	class UUIDataStore_TdUnlocksData*                  UnlocksData;                                              // 0x048C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage_UnlockedMusic");
		return ptr;
	}


	bool HandleInputKey(struct FInputEventParameters* EventParms);
	void MusicList_OnSubmitSelection(class UUIList* Sender, int PlayerIndex);
	void OnWriteProfileSettings_Complete(bool bSuccess);
	void PlayMusic();
	bool OnButtonBar_PlayMusic(class UUIScreenObject* Sender, int PlayerIndex);
	bool OnButtonBar_Back(class UUIScreenObject* Sender, int PlayerIndex);
	void RefreshButtonBar();
	void OnMusicList_ValueChanged(class UUIObject* Sender, int PlayerIndex);
	void LinkSceneWidgets();
	void PostInitialize();
};


// Class TdGame.TdUITabPage_CurrentObjective
// 0x0038 (0x04B4 - 0x047C)
class UTdUITabPage_CurrentObjective : public UTdUITabPage
{
public:
	class UUILabel*                                    MapNameLabel;                                             // 0x047C(0x0004) (Transient)
	class UUILabel*                                    CurrentObjectiveLabel;                                    // 0x0480(0x0004) (Transient)
	class UUIImage*                                    CurrentObjectiveImage;                                    // 0x0484(0x0004) (Transient)
	class UUILabel*                                    CurrentObjectiveDescriptionLabel;                         // 0x0488(0x0004) (Transient)
	struct FSubObjectivesWidgetCol                     SubObjectivesWidgets[0x4];                                // 0x048C(0x0008) (Transient)
	class UTdUITabControl*                             OwnerTabControl;                                          // 0x04AC(0x0004) (Transient)
	class UUIDataStore_TdGameObjectivesData*           TdGameObjectivesData;                                     // 0x04B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITabPage_CurrentObjective");
		return ptr;
	}


	void ReadSubObjectiveData();
	void LinkSceneWidgets();
	void PostInitialize();
};


// Class TdGame.TdUITutorialList
// 0x0000 (0x0664 - 0x0664)
class UTdUITutorialList : public UTdUIImageList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdUITutorialList");
		return ptr;
	}

};


// Class TdGame.TdVehicleSeatPawn
// 0x0000 (0x0548 - 0x0548)
class ATdVehicleSeatPawn : public ASVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdVehicleSeatPawn");
		return ptr;
	}

};


// Class TdGame.TdWeaponPickupFactory
// 0x0004 (0x0334 - 0x0330)
class ATdWeaponPickupFactory : public APickupFactory
{
public:
	class UClass*                                      WeaponPickupClass;                                        // 0x0330(0x0004) (Edit, Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdWeaponPickupFactory");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void PickupClassChanged();
	void PreBeginPlay();
};


// Class TdGame.UIAction_TdStringToName
// 0x0014 (0x00F8 - 0x00E4)
class UUIAction_TdStringToName : public UUIAction
{
public:
	struct FString                                     TheString;                                                // 0x00E4(0x000C) (Edit, NeedCtorLink)
	struct FName                                       TheName;                                                  // 0x00F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIAction_TdStringToName");
		return ptr;
	}


	void Activated();
};


// Class TdGame.UIDataStore_TdGameSearch_Pursuit
// 0x0000 (0x00A8 - 0x00A8)
class UUIDataStore_TdGameSearch_Pursuit : public UUIDataStore_OnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UIDataStore_TdGameSearch_Pursuit");
		return ptr;
	}

};


// Class TdGame.UITdShelfOptionButton
// 0x0000 (0x04B4 - 0x04B4)
class UUITdShelfOptionButton : public UUITdOptionButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.UITdShelfOptionButton");
		return ptr;
	}

};


// Class TdGame.TdDemoRecDriver
// 0x0004 (0x0204 - 0x0200)
class UTdDemoRecDriver : public UDemoRecDriver
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0200(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDemoRecDriver");
		return ptr;
	}

};


// Class TdGame.TdDemoNetworkNotify
// 0x0004 (0x0040 - 0x003C)
class UTdDemoNetworkNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TdGame.TdDemoNetworkNotify");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
